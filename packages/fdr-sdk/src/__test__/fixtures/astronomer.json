{
  "baseUrl": {
    "domain": "www.astronomer.io",
    "basePath": "/docs/api"
  },
  "definition": {
    "config": {
      "navigation": {
        "items": [
          {
            "type": "section",
            "title": "Astro API",
            "urlSlug": "astro-api",
            "collapsed": false,
            "hidden": false,
            "items": [
              {
                "type": "page",
                "id": "docs/pages/overview.mdx",
                "title": "Overview",
                "urlSlug": "overview",
                "fullSlug": ["overview"],
                "hidden": false
              },
              {
                "type": "page",
                "id": "docs/pages/get-started.mdx",
                "title": "Get started",
                "urlSlug": "get-started",
                "fullSlug": ["get-started"],
                "hidden": false
              },
              {
                "type": "page",
                "id": "docs/pages/versioning-and-support.mdx",
                "title": "Versioning and support",
                "urlSlug": "versioning-and-support",
                "fullSlug": ["versioning-and-support"],
                "hidden": false
              }
            ],
            "skipUrlSlug": false
          },
          {
            "type": "api",
            "title": "Platform API Reference",
            "api": "7bbd8b60-d410-43c1-bda4-3c0813a4fbb7",
            "showErrors": false,
            "changelog": {
              "items": [
                {
                  "date": "2024-04-12T00:00:00.000Z",
                  "pageId": "/home/runner/work/docs/docs/api/fern/apis/platform/changelog/2024-04-12.md"
                },
                {
                  "date": "2024-04-23T00:00:00.000Z",
                  "pageId": "/home/runner/work/docs/docs/api/fern/apis/platform/changelog/2024-04-23.md"
                },
                {
                  "date": "2024-05-15T00:00:00.000Z",
                  "pageId": "/home/runner/work/docs/docs/api/fern/apis/platform/changelog/2024-05-15.md"
                }
              ],
              "urlSlug": "changelog",
              "hidden": false
            },
            "navigation": {
              "items": []
            },
            "hidden": false,
            "urlSlug": "platform-api-reference",
            "skipUrlSlug": false
          },
          {
            "type": "api",
            "title": "IAM API Reference",
            "api": "a4030141-9ea5-4ac9-8d2b-f44b815980a8",
            "showErrors": false,
            "changelog": {
              "items": [
                {
                  "date": "2024-04-12T00:00:00.000Z",
                  "pageId": "/home/runner/work/docs/docs/api/fern/apis/iam/changelog/2024-04-12.md"
                }
              ],
              "urlSlug": "changelog",
              "hidden": false
            },
            "navigation": {
              "items": []
            },
            "hidden": false,
            "urlSlug": "iam-api-reference",
            "skipUrlSlug": false
          }
        ]
      },
      "logoHref": "https://www.astronomer.io/docs/api",
      "colorsV3": {
        "type": "darkAndLight",
        "light": {
          "accentPrimary": {
            "r": 98,
            "g": 54,
            "b": 247,
            "a": 1
          },
          "logo": "49419424-29d4-4e84-983a-1d6d69cf072d",
          "background": {
            "type": "solid",
            "r": 247,
            "g": 244,
            "b": 255,
            "a": 1
          }
        },
        "dark": {
          "accentPrimary": {
            "r": 0,
            "g": 218,
            "b": 218,
            "a": 1
          },
          "logo": "015057e2-bb14-4cd7-97dd-b2cca2a0b221",
          "background": {
            "type": "solid",
            "r": 22,
            "g": 20,
            "b": 45,
            "a": 1
          }
        }
      },
      "navbarLinks": [
        {
          "type": "primary",
          "text": "Get Started Free",
          "url": "https://account.astronomer.io/login?screen_hint=signup&signup-type=trial&referral=fern-docs-nav-button"
        }
      ],
      "title": "Astro API Reference",
      "favicon": "06193aca-2385-478c-8973-6c20d3994186",
      "layout": {
        "searchbarPlacement": "HEADER",
        "tabsPlacement": "SIDEBAR",
        "contentAlignment": "CENTER",
        "headerPosition": "FIXED",
        "disableHeader": false
      },
      "js": {
        "files": []
      }
    },
    "apis": {
      "7bbd8b60-d410-43c1-bda4-3c0813a4fbb7": {
        "id": "7bbd8b60-d410-43c1-bda4-3c0813a4fbb7",
        "rootPackage": {
          "endpoints": [],
          "subpackages": [
            "subpackage_organization",
            "subpackage_options",
            "subpackage_cluster",
            "subpackage_deployment",
            "subpackage_deploy",
            "subpackage_workspace"
          ],
          "types": [
            "type_:BasicSubjectProfileSubjectType",
            "type_:BasicSubjectProfile",
            "type_:ClusterCloudProvider",
            "type_:ClusterStatus",
            "type_:ClusterType",
            "type_:Cluster",
            "type_:ClusterK8STag",
            "type_:ClusterMetadata",
            "type_:ClusterOptionsProvider",
            "type_:ClusterOptions",
            "type_:ClustersPaginated",
            "type_:CreateAwsClusterRequestCloudProvider",
            "type_:CreateAwsClusterRequestType",
            "type_:CreateAwsClusterRequest",
            "type_:CreateAzureClusterRequestCloudProvider",
            "type_:CreateAzureClusterRequestType",
            "type_:CreateAzureClusterRequest",
            "type_:CreateClusterRequest",
            "type_:CreateDedicatedDeploymentRequestExecutor",
            "type_:CreateDedicatedDeploymentRequestSchedulerSize",
            "type_:CreateDedicatedDeploymentRequestType",
            "type_:CreateDedicatedDeploymentRequest",
            "type_:CreateDeploymentRequest",
            "type_:CreateGcpClusterRequestCloudProvider",
            "type_:CreateGcpClusterRequestType",
            "type_:CreateGcpClusterRequest",
            "type_:CreateHybridDeploymentRequestExecutor",
            "type_:CreateHybridDeploymentRequestType",
            "type_:CreateHybridDeploymentRequest",
            "type_:CreateNodePoolRequest",
            "type_:CreateStandardDeploymentRequestCloudProvider",
            "type_:CreateStandardDeploymentRequestExecutor",
            "type_:CreateStandardDeploymentRequestSchedulerSize",
            "type_:CreateStandardDeploymentRequestType",
            "type_:CreateStandardDeploymentRequest",
            "type_:DeployStatus",
            "type_:DeployType",
            "type_:Deploy",
            "type_:DeploymentCloudProvider",
            "type_:DeploymentExecutor",
            "type_:DeploymentSchedulerSize",
            "type_:DeploymentStatus",
            "type_:DeploymentType",
            "type_:Deployment",
            "type_:DeploymentEnvironmentVariable",
            "type_:DeploymentEnvironmentVariableRequest",
            "type_:DeploymentHibernationOverride",
            "type_:DeploymentHibernationOverrideRequest",
            "type_:DeploymentHibernationSchedule",
            "type_:DeploymentHibernationSpec",
            "type_:DeploymentHibernationSpecRequest",
            "type_:DeploymentHibernationStatusNextEventType",
            "type_:DeploymentHibernationStatus",
            "type_:DeploymentInstanceSpecRequest",
            "type_:DeploymentOptions",
            "type_:DeploymentScalingSpec",
            "type_:DeploymentScalingSpecRequest",
            "type_:DeploymentScalingStatus",
            "type_:DeploymentsPaginated",
            "type_:DeploysPaginated",
            "type_:Error",
            "type_:HybridWorkerQueueRequest",
            "type_:MachineSpec",
            "type_:ManagedDomainStatus",
            "type_:ManagedDomain",
            "type_:NodePoolCloudProvider",
            "type_:NodePool",
            "type_:OrganizationPaymentMethod",
            "type_:OrganizationProduct",
            "type_:OrganizationStatus",
            "type_:OrganizationSupportPlan",
            "type_:Organization",
            "type_:OrganizationsPaginated",
            "type_:ProviderInstanceType",
            "type_:ProviderRegion",
            "type_:Range",
            "type_:ResourceOption",
            "type_:ResourceQuotaOptions",
            "type_:ResourceRange",
            "type_:RuntimeRelease",
            "type_:SchedulerMachineName",
            "type_:SchedulerMachine",
            "type_:UpdateClusterRequest",
            "type_:UpdateDedicatedClusterRequest",
            "type_:UpdateDedicatedDeploymentRequestExecutor",
            "type_:UpdateDedicatedDeploymentRequestSchedulerSize",
            "type_:UpdateDedicatedDeploymentRequestType",
            "type_:UpdateDedicatedDeploymentRequest",
            "type_:UpdateDeploymentRequest",
            "type_:UpdateHybridClusterRequest",
            "type_:UpdateHybridDeploymentRequestExecutor",
            "type_:UpdateHybridDeploymentRequestType",
            "type_:UpdateHybridDeploymentRequest",
            "type_:UpdateNodePoolRequest",
            "type_:UpdateStandardDeploymentRequestExecutor",
            "type_:UpdateStandardDeploymentRequestSchedulerSize",
            "type_:UpdateStandardDeploymentRequestType",
            "type_:UpdateStandardDeploymentRequest",
            "type_:WorkerMachineName",
            "type_:WorkerMachine",
            "type_:WorkerQueue",
            "type_:WorkerQueueOptions",
            "type_:WorkerQueueRequestAstroMachine",
            "type_:WorkerQueueRequest",
            "type_:WorkloadIdentityOption",
            "type_:Workspace",
            "type_:WorkspacesPaginated"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_organization:ListOrganizationsRequestSupportPlan": {
            "name": "ListOrganizationsRequestSupportPlan",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "TRIAL"
                },
                {
                  "value": "BASIC"
                },
                {
                  "value": "STANDARD"
                },
                {
                  "value": "PREMIUM"
                },
                {
                  "value": "BUSINESS_CRITICAL"
                }
              ]
            }
          },
          "type_organization:ListOrganizationsRequestProduct": {
            "name": "ListOrganizationsRequestProduct",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "HOSTED"
                },
                {
                  "value": "HYBRID"
                }
              ]
            }
          },
          "type_organization:ListOrganizationsRequestSortsItem": {
            "name": "ListOrganizationsRequestSortsItem",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "name:asc"
                },
                {
                  "value": "name:desc"
                },
                {
                  "value": "createdAt:asc"
                },
                {
                  "value": "createdAt:desc"
                },
                {
                  "value": "updatedAt:asc"
                },
                {
                  "value": "updatedAt:desc"
                }
              ]
            }
          },
          "type_options:GetClusterOptionsRequestProvider": {
            "name": "GetClusterOptionsRequestProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "AWS"
                },
                {
                  "value": "AZURE"
                },
                {
                  "value": "GCP"
                }
              ]
            }
          },
          "type_options:GetClusterOptionsRequestType": {
            "name": "GetClusterOptionsRequestType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEDICATED"
                },
                {
                  "value": "HYBRID"
                }
              ]
            }
          },
          "type_options:GetDeploymentOptionsRequestDeploymentType": {
            "name": "GetDeploymentOptionsRequestDeploymentType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "HYBRID"
                },
                {
                  "value": "DEDICATED"
                },
                {
                  "value": "STANDARD"
                }
              ]
            }
          },
          "type_options:GetDeploymentOptionsRequestExecutor": {
            "name": "GetDeploymentOptionsRequestExecutor",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CELERY"
                },
                {
                  "value": "KUBERNETES"
                }
              ]
            }
          },
          "type_options:GetDeploymentOptionsRequestCloudProvider": {
            "name": "GetDeploymentOptionsRequestCloudProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "AWS"
                },
                {
                  "value": "AZURE"
                },
                {
                  "value": "GCP"
                }
              ]
            }
          },
          "type_cluster:ListClustersRequestProvider": {
            "name": "ListClustersRequestProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "AWS"
                },
                {
                  "value": "AZURE"
                },
                {
                  "value": "GCP"
                }
              ]
            }
          },
          "type_cluster:ListClustersRequestSortsItem": {
            "name": "ListClustersRequestSortsItem",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "name:asc"
                },
                {
                  "value": "name:desc"
                },
                {
                  "value": "createdAt:asc"
                },
                {
                  "value": "createdAt:desc"
                },
                {
                  "value": "updatedAt:asc"
                },
                {
                  "value": "updatedAt:desc"
                }
              ]
            }
          },
          "type_deployment:ListDeploymentsRequestSortsItem": {
            "name": "ListDeploymentsRequestSortsItem",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "name:asc"
                },
                {
                  "value": "name:desc"
                },
                {
                  "value": "createdAt:asc"
                },
                {
                  "value": "createdAt:desc"
                },
                {
                  "value": "updatedAt:asc"
                },
                {
                  "value": "updatedAt:desc"
                }
              ]
            }
          },
          "type_deploy:CreateDeployRequestType": {
            "description": "The type of the deploy.",
            "name": "CreateDeployRequestType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "IMAGE_AND_DAG"
                },
                {
                  "value": "IMAGE_ONLY"
                },
                {
                  "value": "DAG_ONLY"
                }
              ]
            }
          },
          "type_workspace:ListWorkspacesRequestSortsItem": {
            "name": "ListWorkspacesRequestSortsItem",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "name:asc"
                },
                {
                  "value": "name:desc"
                },
                {
                  "value": "createdAt:asc"
                },
                {
                  "value": "createdAt:desc"
                },
                {
                  "value": "updatedAt:asc"
                },
                {
                  "value": "updatedAt:desc"
                }
              ]
            }
          },
          "type_:BasicSubjectProfileSubjectType": {
            "description": "The subject type.",
            "name": "BasicSubjectProfileSubjectType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "USER"
                },
                {
                  "value": "SERVICEKEY"
                }
              ]
            }
          },
          "type_:BasicSubjectProfile": {
            "name": "BasicSubjectProfile",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The API token's name. Returned only when `SubjectType` is `SERVICEKEY`.",
                  "key": "apiTokenName",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL for the user's profile image. Returned only when `SubjectType` is `USER`.",
                  "key": "avatarUrl",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The subject's full name. Returned only when `SubjectType` is `USER`.",
                  "key": "fullName",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The subject's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The subject type.",
                  "key": "subjectType",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BasicSubjectProfileSubjectType"
                    }
                  }
                },
                {
                  "description": "The subject's username. Returned only when `SubjectType` is `USER`.",
                  "key": "username",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ClusterCloudProvider": {
            "description": "The name of the cluster's cloud provider.",
            "name": "ClusterCloudProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "AWS"
                },
                {
                  "value": "AZURE"
                },
                {
                  "value": "GCP"
                }
              ]
            }
          },
          "type_:ClusterStatus": {
            "description": "The status of the cluster.",
            "name": "ClusterStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CREATING"
                },
                {
                  "value": "CREATED"
                },
                {
                  "value": "CREATE_FAILED"
                },
                {
                  "value": "UPDATE_FAILED"
                },
                {
                  "value": "UPDATING"
                }
              ]
            }
          },
          "type_:ClusterType": {
            "description": "The type of the cluster.",
            "name": "ClusterType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEDICATED"
                },
                {
                  "value": "HYBRID"
                }
              ]
            }
          },
          "type_:Cluster": {
            "name": "Cluster",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the cluster's cloud provider.",
                  "key": "cloudProvider",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ClusterCloudProvider"
                  }
                },
                {
                  "description": "The time when the cluster was created in UTC. formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "createdAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "The type of database instance that is used for the cluster.",
                  "key": "dbInstanceType",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The cluster's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the cluster is limited.",
                  "key": "isLimited",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ClusterMetadata"
                    }
                  }
                },
                {
                  "description": "The cluster's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The list of node pools that are created in the cluster.",
                  "key": "nodePools",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:NodePool"
                      }
                    }
                  }
                },
                {
                  "description": "The ID of the Organization that the cluster belongs to.",
                  "key": "organizationId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The subnet range for Pods. For GCP clusters only.",
                  "key": "podSubnetRange",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The provider account ID. For GCP clusters only.",
                  "key": "providerAccount",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The region in which the cluster is created.",
                  "key": "region",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The service peering range. For GCP clusters only.",
                  "key": "servicePeeringRange",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The service subnet range. For GCP clusters only.",
                  "key": "serviceSubnetRange",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The status of the cluster.",
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ClusterStatus"
                  }
                },
                {
                  "description": "The Kubernetes tags in the cluster. For AWS Hybrid clusters only.",
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ClusterK8STag"
                      }
                    }
                  }
                },
                {
                  "description": "The tenant ID. For Azure clusters only.",
                  "key": "tenantId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The type of the cluster.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ClusterType"
                  }
                },
                {
                  "description": "The time when the cluster was last updated in UTC. formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "updatedAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "The VPC subnet range.",
                  "key": "vpcSubnetRange",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The list of Workspaces that are authorized to the cluster.",
                  "key": "workspaceIds",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ClusterK8STag": {
            "name": "ClusterK8STag",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The tag's key.",
                  "key": "key",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The tag's value.",
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ClusterMetadata": {
            "name": "ClusterMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "External IPs of the cluster.",
                  "key": "externalIPs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "OIDC issuer URL for the cluster",
                  "key": "oidcIssuerUrl",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ClusterOptionsProvider": {
            "description": "The cloud provider.",
            "name": "ClusterOptionsProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "AWS"
                },
                {
                  "value": "AZURE"
                },
                {
                  "value": "GCP"
                }
              ]
            }
          },
          "type_:ClusterOptions": {
            "name": "ClusterOptions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The available database instances.",
                  "key": "databaseInstances",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderInstanceType"
                    }
                  }
                },
                {
                  "key": "defaultDatabaseInstance",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ProviderInstanceType"
                  }
                },
                {
                  "key": "defaultNodeInstance",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ProviderInstanceType"
                  }
                },
                {
                  "description": "The default pod subnet range.",
                  "key": "defaultPodSubnetRange",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "defaultRegion",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ProviderRegion"
                  }
                },
                {
                  "description": "The default service peering range.",
                  "key": "defaultServicePeeringRange",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The default service subnet range.",
                  "key": "defaultServiceSubnetRange",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The default VPC subnet range.",
                  "key": "defaultVpcSubnetRange",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The default number of nodes.",
                  "key": "nodeCountDefault",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The maximum number of nodes.",
                  "key": "nodeCountMax",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The minimum number of nodes.",
                  "key": "nodeCountMin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The available node instances.",
                  "key": "nodeInstances",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderInstanceType"
                    }
                  }
                },
                {
                  "description": "The cloud provider.",
                  "key": "provider",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ClusterOptionsProvider"
                  }
                },
                {
                  "description": "The available regions.",
                  "key": "regions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderRegion"
                    }
                  }
                }
              ]
            }
          },
          "type_:ClustersPaginated": {
            "name": "ClustersPaginated",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The list of clusters in the current page.",
                  "key": "clusters",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Cluster"
                    }
                  }
                },
                {
                  "description": "The maximum number of clusters in one page.",
                  "key": "limit",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The offset of the current page of clusters.",
                  "key": "offset",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of clusters.",
                  "key": "totalCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:CreateAwsClusterRequestCloudProvider": {
            "description": "The cluster's cloud provider.",
            "name": "CreateAwsClusterRequestCloudProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "AWS"
                },
                {
                  "value": "AZURE"
                },
                {
                  "value": "GCP"
                }
              ]
            }
          },
          "type_:CreateAwsClusterRequestType": {
            "description": "The cluster's type.",
            "name": "CreateAwsClusterRequestType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEDICATED"
                },
                {
                  "value": "HYBRID"
                }
              ]
            }
          },
          "type_:CreateAwsClusterRequest": {
            "name": "CreateAwsClusterRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The cluster's cloud provider.",
                  "key": "cloudProvider",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateAwsClusterRequestCloudProvider"
                  }
                },
                {
                  "description": "The type of database instance that is used for the cluster. Required for Hybrid clusters.",
                  "key": "dbInstanceType",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The Kubernetes tags in the cluster.",
                  "key": "k8sTags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ClusterK8STag"
                      }
                    }
                  }
                },
                {
                  "description": "The cluster's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The list of node pools to create in the cluster.",
                  "key": "nodePools",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:CreateNodePoolRequest"
                      }
                    }
                  }
                },
                {
                  "description": "The provider account ID. Required for Hybrid clusters.",
                  "key": "providerAccount",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The cluster's region.",
                  "key": "region",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The cluster's type.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateAwsClusterRequestType"
                  }
                },
                {
                  "description": "The VPC subnet range.",
                  "key": "vpcSubnetRange",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The list of Workspaces that are authorized to the cluster.",
                  "key": "workspaceIds",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CreateAzureClusterRequestCloudProvider": {
            "description": "The cluster's cloud provider.",
            "name": "CreateAzureClusterRequestCloudProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "AWS"
                },
                {
                  "value": "AZURE"
                },
                {
                  "value": "GCP"
                }
              ]
            }
          },
          "type_:CreateAzureClusterRequestType": {
            "description": "The cluster's type.",
            "name": "CreateAzureClusterRequestType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEDICATED"
                },
                {
                  "value": "HYBRID"
                }
              ]
            }
          },
          "type_:CreateAzureClusterRequest": {
            "name": "CreateAzureClusterRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The cluster's cloud provider.",
                  "key": "cloudProvider",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateAzureClusterRequestCloudProvider"
                  }
                },
                {
                  "description": "The type of database instance that is used for the cluster. Required for Hybrid clusters.",
                  "key": "dbInstanceType",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The Kubernetes tags in the cluster.",
                  "key": "k8sTags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ClusterK8STag"
                      }
                    }
                  }
                },
                {
                  "description": "The cluster's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The list of node pools to create in the cluster.",
                  "key": "nodePools",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:CreateNodePoolRequest"
                      }
                    }
                  }
                },
                {
                  "description": "The provider account ID. Required for Hybrid clusters.",
                  "key": "providerAccount",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The cluster's region.",
                  "key": "region",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The tenant ID. For Azure clusters only.",
                  "key": "tenantId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The cluster's type.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateAzureClusterRequestType"
                  }
                },
                {
                  "description": "The VPC subnet range.",
                  "key": "vpcSubnetRange",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The list of Workspaces that are authorized to the cluster.",
                  "key": "workspaceIds",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CreateClusterRequest": {
            "name": "CreateClusterRequest",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:CreateAwsClusterRequest"
                  },
                  "displayName": "Create Aws Cluster Request"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:CreateAzureClusterRequest"
                  },
                  "displayName": "Create Azure Cluster Request"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:CreateGcpClusterRequest"
                  },
                  "displayName": "Create Gcp Cluster Request"
                }
              ]
            }
          },
          "type_:CreateDedicatedDeploymentRequestExecutor": {
            "description": "The Deployment's executor type.",
            "name": "CreateDedicatedDeploymentRequestExecutor",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CELERY"
                },
                {
                  "value": "KUBERNETES"
                }
              ]
            }
          },
          "type_:CreateDedicatedDeploymentRequestSchedulerSize": {
            "description": "The size of the scheduler pod.",
            "name": "CreateDedicatedDeploymentRequestSchedulerSize",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "SMALL"
                },
                {
                  "value": "MEDIUM"
                },
                {
                  "value": "LARGE"
                }
              ]
            }
          },
          "type_:CreateDedicatedDeploymentRequestType": {
            "description": "The type of the Deployment.",
            "name": "CreateDedicatedDeploymentRequestType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEDICATED"
                },
                {
                  "value": "HYBRID"
                },
                {
                  "value": "STANDARD"
                }
              ]
            }
          },
          "type_:CreateDedicatedDeploymentRequest": {
            "name": "CreateDedicatedDeploymentRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Deployment's Astro Runtime version.",
                  "key": "astroRuntimeVersion",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The ID of the cluster where the Deployment will be created.",
                  "key": "clusterId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A list of contact emails for the Deployment.",
                  "key": "contactEmails",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.",
                  "key": "defaultTaskPodCpu",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi` and must be explicitly included. This value must always be twice the value of `DefaultTaskPodCpu`.",
                  "key": "defaultTaskPodMemory",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The Deployment's description.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "List of environment variables to add to the Deployment.",
                  "key": "environmentVariables",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DeploymentEnvironmentVariableRequest"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's executor type.",
                  "key": "executor",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateDedicatedDeploymentRequestExecutor"
                  }
                },
                {
                  "description": "Whether the Deployment requires that all deploys are made through CI/CD.",
                  "key": "isCicdEnforced",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the Deployment has DAG deploys enabled.",
                  "key": "isDagDeployEnabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "If true, deployment will be able to use development-only features, such as hibernation, but will not have guaranteed uptime SLAs",
                  "key": "isDevelopmentMode",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.",
                  "key": "isHighAvailability",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The Deployment's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.",
                  "key": "resourceQuotaCpu",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi` and must be explicitly included. This value must always be twice the value of `ResourceQuotaCpu`.",
                  "key": "resourceQuotaMemory",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "scalingSpec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentScalingSpecRequest"
                    }
                  }
                },
                {
                  "description": "The size of the scheduler pod.",
                  "key": "schedulerSize",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateDedicatedDeploymentRequestSchedulerSize"
                  }
                },
                {
                  "description": "The type of the Deployment.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateDedicatedDeploymentRequestType"
                  }
                },
                {
                  "description": "The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.",
                  "key": "workerQueues",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:WorkerQueueRequest"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's workload identity.",
                  "key": "workloadIdentity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The ID of the workspace to which the Deployment belongs.",
                  "key": "workspaceId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:CreateDeploymentRequest": {
            "name": "CreateDeploymentRequest",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:CreateDedicatedDeploymentRequest"
                  },
                  "displayName": "Create Dedicated Deployment Request"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:CreateHybridDeploymentRequest"
                  },
                  "displayName": "Create Hybrid Deployment Request"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:CreateStandardDeploymentRequest"
                  },
                  "displayName": "Create Standard Deployment Request"
                }
              ]
            }
          },
          "type_:CreateGcpClusterRequestCloudProvider": {
            "description": "The cluster's cloud provider.",
            "name": "CreateGcpClusterRequestCloudProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "AWS"
                },
                {
                  "value": "AZURE"
                },
                {
                  "value": "GCP"
                }
              ]
            }
          },
          "type_:CreateGcpClusterRequestType": {
            "description": "The cluster's type.",
            "name": "CreateGcpClusterRequestType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEDICATED"
                },
                {
                  "value": "HYBRID"
                }
              ]
            }
          },
          "type_:CreateGcpClusterRequest": {
            "name": "CreateGcpClusterRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The cluster's cloud provider.",
                  "key": "cloudProvider",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateGcpClusterRequestCloudProvider"
                  }
                },
                {
                  "description": "The type of database instance that is used for the cluster. Required for Hybrid clusters.",
                  "key": "dbInstanceType",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The Kubernetes tags in the cluster.",
                  "key": "k8sTags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ClusterK8STag"
                      }
                    }
                  }
                },
                {
                  "description": "The cluster's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The list of node pools to create in the cluster.",
                  "key": "nodePools",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:CreateNodePoolRequest"
                      }
                    }
                  }
                },
                {
                  "description": "The subnet range for Pods. For GCP clusters only.",
                  "key": "podSubnetRange",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The provider account ID. Required for Hybrid clusters.",
                  "key": "providerAccount",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The cluster's region.",
                  "key": "region",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The service subnet range. For GCP clusters only.",
                  "key": "servicePeeringRange",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The service peering range. For GCP clusters only.",
                  "key": "serviceSubnetRange",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The cluster's type.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateGcpClusterRequestType"
                  }
                },
                {
                  "description": "The VPC subnet range.",
                  "key": "vpcSubnetRange",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The list of Workspaces that are authorized to the cluster.",
                  "key": "workspaceIds",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CreateHybridDeploymentRequestExecutor": {
            "description": "The Deployment's executor type.",
            "name": "CreateHybridDeploymentRequestExecutor",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CELERY"
                },
                {
                  "value": "KUBERNETES"
                }
              ]
            }
          },
          "type_:CreateHybridDeploymentRequestType": {
            "description": "The type of the Deployment.",
            "name": "CreateHybridDeploymentRequestType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEDICATED"
                },
                {
                  "value": "HYBRID"
                },
                {
                  "value": "STANDARD"
                }
              ]
            }
          },
          "type_:CreateHybridDeploymentRequest": {
            "name": "CreateHybridDeploymentRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Deployment's Astro Runtime version.",
                  "key": "astroRuntimeVersion",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The ID of the cluster where the Deployment will be created.",
                  "key": "clusterId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A list of contact emails for the Deployment.",
                  "key": "contactEmails",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's description.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "List of environment variables to add to the Deployment.",
                  "key": "environmentVariables",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DeploymentEnvironmentVariableRequest"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's executor type.",
                  "key": "executor",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateHybridDeploymentRequestExecutor"
                  }
                },
                {
                  "description": "Whether the Deployment requires that all deploys are made through CI/CD.",
                  "key": "isCicdEnforced",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the Deployment has DAG deploys enabled.",
                  "key": "isDagDeployEnabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The Deployment's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "scheduler",
                  "valueType": {
                    "type": "id",
                    "value": "type_:DeploymentInstanceSpecRequest"
                  }
                },
                {
                  "description": "The node pool ID for the task pods. For `KUBERNETES` executor only.",
                  "key": "taskPodNodePoolId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The type of the Deployment.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateHybridDeploymentRequestType"
                  }
                },
                {
                  "description": "The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.",
                  "key": "workerQueues",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:HybridWorkerQueueRequest"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's workload identity.",
                  "key": "workloadIdentity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The ID of the workspace to which the Deployment belongs.",
                  "key": "workspaceId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:CreateNodePoolRequest": {
            "name": "CreateNodePoolRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether the node pool is the default node pool of the cluster.",
                  "key": "isDefault",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "The maximum number of nodes that can be created in the node pool.",
                  "key": "maxNodeCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The name of the node pool.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of node instance that is used for the node pool.",
                  "key": "nodeInstanceType",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:CreateStandardDeploymentRequestCloudProvider": {
            "description": "The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.",
            "name": "CreateStandardDeploymentRequestCloudProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "AWS"
                },
                {
                  "value": "AZURE"
                },
                {
                  "value": "GCP"
                }
              ]
            }
          },
          "type_:CreateStandardDeploymentRequestExecutor": {
            "description": "The Deployment's executor type.",
            "name": "CreateStandardDeploymentRequestExecutor",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CELERY"
                },
                {
                  "value": "KUBERNETES"
                }
              ]
            }
          },
          "type_:CreateStandardDeploymentRequestSchedulerSize": {
            "description": "The size of the scheduler pod.",
            "name": "CreateStandardDeploymentRequestSchedulerSize",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "SMALL"
                },
                {
                  "value": "MEDIUM"
                },
                {
                  "value": "LARGE"
                }
              ]
            }
          },
          "type_:CreateStandardDeploymentRequestType": {
            "description": "The type of the Deployment.",
            "name": "CreateStandardDeploymentRequestType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEDICATED"
                },
                {
                  "value": "HYBRID"
                },
                {
                  "value": "STANDARD"
                }
              ]
            }
          },
          "type_:CreateStandardDeploymentRequest": {
            "name": "CreateStandardDeploymentRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Deployment's Astro Runtime version.",
                  "key": "astroRuntimeVersion",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The cloud provider for the Deployment's cluster. Optional if `ClusterId` is specified.",
                  "key": "cloudProvider",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:CreateStandardDeploymentRequestCloudProvider"
                    }
                  }
                },
                {
                  "description": "The ID of the cluster to which the Deployment will be created in. Optional if cloud provider and region is specified.",
                  "key": "clusterId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A list of contact emails for the Deployment.",
                  "key": "contactEmails",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.",
                  "key": "defaultTaskPodCpu",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi` and must be explicitly included. This value must always be twice the value of `DefaultTaskPodCpu`.",
                  "key": "defaultTaskPodMemory",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The Deployment's description.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "List of environment variables to add to the Deployment.",
                  "key": "environmentVariables",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DeploymentEnvironmentVariableRequest"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's executor type.",
                  "key": "executor",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateStandardDeploymentRequestExecutor"
                  }
                },
                {
                  "description": "Whether the Deployment requires that all deploys are made through CI/CD.",
                  "key": "isCicdEnforced",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the Deployment has DAG deploys enabled.",
                  "key": "isDagDeployEnabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "If true, deployment will be able to use development-only features, such as hibernation, but will not have guaranteed uptime SLAs",
                  "key": "isDevelopmentMode",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.",
                  "key": "isHighAvailability",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The Deployment's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The region to host the Deployment in. Optional if `ClusterId` is specified.",
                  "key": "region",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.",
                  "key": "resourceQuotaCpu",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi` and must be explicitly included. This value must always be twice the value of `ResourceQuotaCpu`.",
                  "key": "resourceQuotaMemory",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "scalingSpec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentScalingSpecRequest"
                    }
                  }
                },
                {
                  "description": "The size of the scheduler pod.",
                  "key": "schedulerSize",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateStandardDeploymentRequestSchedulerSize"
                  }
                },
                {
                  "description": "The type of the Deployment.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateStandardDeploymentRequestType"
                  }
                },
                {
                  "description": "The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. At least 1 worker queue is needed. All Deployments need at least 1 worker queue called `default`.",
                  "key": "workerQueues",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:WorkerQueueRequest"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's workload identity.",
                  "key": "workloadIdentity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The ID of the workspace to which the Deployment belongs.",
                  "key": "workspaceId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DeployStatus": {
            "description": "The status of the deploy.",
            "name": "DeployStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "INITIALIZED"
                },
                {
                  "value": "DEPLOYED"
                },
                {
                  "value": "FAILED"
                }
              ]
            }
          },
          "type_:DeployType": {
            "description": "The type of deploy.",
            "name": "DeployType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "IMAGE_AND_DAG"
                },
                {
                  "value": "IMAGE_ONLY"
                },
                {
                  "value": "DAG_ONLY"
                }
              ]
            }
          },
          "type_:Deploy": {
            "name": "Deploy",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The deploy's Airflow version.",
                  "key": "airflowVersion",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The deploy's Astro Runtime version.",
                  "key": "astroRuntimeVersion",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time when the deploy was created in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "createdAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "createdBySubject",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BasicSubjectProfile"
                    }
                  }
                },
                {
                  "description": "The deploy's DAG tarball version, also known as the Bundle Version in the Astro UI.",
                  "key": "dagTarballVersion",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The deploy's upload URL to upload DAG bundles. Appears only if dag deploys are enabled on the Deployment.",
                  "key": "dagsUploadUrl",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's ID.",
                  "key": "deploymentId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The deploy's description.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The deploy's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The URL of the deploy's image repository.",
                  "key": "imageRepository",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The deploy's image tag. Appears only if specified in the most recent deploy.",
                  "key": "imageTag",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the deploy was triggered on a Deployment with DAG deploys enabled.",
                  "key": "isDagDeployEnabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The ID of the deploy that you completed a rollback on. Appears only if a rollback has been performed.",
                  "key": "rollbackFromId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The status of the deploy.",
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:DeployStatus"
                  }
                },
                {
                  "description": "The type of deploy.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:DeployType"
                  }
                },
                {
                  "description": "The time when the deploy was last updated in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "updatedAt",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "key": "updatedBySubject",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BasicSubjectProfile"
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentCloudProvider": {
            "description": "The cloud provider of the cluster. Only for Standard Deployment.",
            "name": "DeploymentCloudProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "AWS"
                },
                {
                  "value": "AZURE"
                },
                {
                  "value": "GCP"
                }
              ]
            }
          },
          "type_:DeploymentExecutor": {
            "description": "The Deployment's executor type.",
            "name": "DeploymentExecutor",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CELERY"
                },
                {
                  "value": "KUBERNETES"
                }
              ]
            }
          },
          "type_:DeploymentSchedulerSize": {
            "description": "The Deployment's scheduler size.",
            "name": "DeploymentSchedulerSize",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "SMALL"
                },
                {
                  "value": "MEDIUM"
                },
                {
                  "value": "LARGE"
                }
              ]
            }
          },
          "type_:DeploymentStatus": {
            "description": "The status of the Deployment.",
            "name": "DeploymentStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CREATING"
                },
                {
                  "value": "DEPLOYING"
                },
                {
                  "value": "HEALTHY"
                },
                {
                  "value": "UNHEALTHY"
                },
                {
                  "value": "UNKNOWN"
                },
                {
                  "value": "HIBERNATING"
                }
              ]
            }
          },
          "type_:DeploymentType": {
            "description": "The type of cluster that the Deployment runs on.",
            "name": "DeploymentType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEDICATED"
                },
                {
                  "value": "HYBRID"
                },
                {
                  "value": "STANDARD"
                }
              ]
            }
          },
          "type_:Deployment": {
            "name": "Deployment",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The Deployment's Airflow version.",
                  "key": "airflowVersion",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The Deployment's Astro Runtime version.",
                  "key": "astroRuntimeVersion",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The cloud provider of the cluster. Only for Standard Deployment.",
                  "key": "cloudProvider",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentCloudProvider"
                    }
                  }
                },
                {
                  "description": "The ID of the cluster where the Deployment is hosted.",
                  "key": "clusterId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The name of the cluster where the Deployment is hosted. Only for Dedicated and Hybrid Deployments.",
                  "key": "clusterName",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The list of contact emails for the Deployment.",
                  "key": "contactEmails",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The time when the Deployment was created in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "createdAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "createdBy",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BasicSubjectProfile"
                  }
                },
                {
                  "description": "The Deployment's current DAG tarball version, also known as the Bundle Version in the Astro UI. If no deploys are currently processing, this value should be the same as DesiredDagTarballVersion.",
                  "key": "dagTarballVersion",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.",
                  "key": "defaultTaskPodCpu",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi`. This value must always be twice the value of `DefaultTaskPodCpu`.",
                  "key": "defaultTaskPodMemory",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's description.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's expected DAG tarball version after a currently processing deploy completes. This value is updated when a user triggers a DAG-only deploy to indicate that the Deployment is expecting a new DAG tarball version. If no deploys are currently processing, this value should be the same as DagTarballVersion.",
                  "key": "desiredDagTarballVersion",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's environment variables. Secret values will be omitted from response.",
                  "key": "environmentVariables",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DeploymentEnvironmentVariable"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's executor type.",
                  "key": "executor",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentExecutor"
                    }
                  }
                },
                {
                  "description": "A list of the Deployment's external IPs.",
                  "key": "externalIPs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The URL of the Deployment's image repository.",
                  "key": "imageRepository",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The Deployment's custom image tag. Appears only if specified in the most recent deploy.",
                  "key": "imageTag",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A tag that Astronomer applies to the Deployment's Astro Runtime image during a deploy. It includes the date and time of the deploy.",
                  "key": "imageVersion",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the Deployment requires that all deploys are made through CI/CD.",
                  "key": "isCicdEnforced",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the Deployment has DAG deploys enabled.",
                  "key": "isDagDeployEnabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "If true, deployment will be able to use development-only features, such as hibernation, but will not have guaranteed uptime SLAs",
                  "key": "isDevelopmentMode",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the Deployment has high availability (HA) enabled. If `true`, multiple scheduler Pods will run at once.",
                  "key": "isHighAvailability",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The Deployment's namespace name in the Kubernetes cluster.",
                  "key": "namespace",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "OIDC issuer URL of the deployment's cluster",
                  "key": "oidcIssuerUrl",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The ID of the Organization to which the Deployment belongs.",
                  "key": "organizationId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The region of the cluster. Only for Dedicated and Hybrid Deployments.",
                  "key": "region",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.",
                  "key": "resourceQuotaCpu",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi`. This value must always be twice the value of `ResourceQuotaCpu`.",
                  "key": "resourceQuotaMemory",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Deprecated: runtimeVersion has been replaced with astroRuntimeVersion",
                  "key": "runtimeVersion",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "scalingSpec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentScalingSpec"
                    }
                  }
                },
                {
                  "key": "scalingStatus",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentScalingStatus"
                    }
                  }
                },
                {
                  "description": "The number of Astronomer units (AU) for the Deployment's scheduler. Applies only to Deployments hosted on Hybrid clusters.",
                  "key": "schedulerAu",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The CPU limit for the Deployment's scheduler. Specified in number of CPU cores.",
                  "key": "schedulerCpu",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The memory limit for the Deployment's scheduler. Units in Gibibytes or `Gi`.",
                  "key": "schedulerMemory",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The number of schedulers to use in the Deployment.",
                  "key": "schedulerReplicas",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The Deployment's scheduler size.",
                  "key": "schedulerSize",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentSchedulerSize"
                    }
                  }
                },
                {
                  "description": "The status of the Deployment.",
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:DeploymentStatus"
                  }
                },
                {
                  "description": "A message that provides context for the Deployment's status.",
                  "key": "statusReason",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The node pool ID for the task pod.",
                  "key": "taskPodNodePoolId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The type of cluster that the Deployment runs on.",
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentType"
                    }
                  }
                },
                {
                  "description": "The time when the Deployment was last updated in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "updatedAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "updatedBy",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BasicSubjectProfile"
                  }
                },
                {
                  "description": "The Deployment's webserver's base url to directly access the Airflow api.",
                  "key": "webServerAirflowApiUrl",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The CPU limit for the Deployment's webserver. Units are in number of CPU cores.",
                  "key": "webServerCpu",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The Deployment's webserver's ingress hostname.",
                  "key": "webServerIngressHostname",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The memory limit for the Deployment's webserver. Units in Gibibytes or `Gi`.",
                  "key": "webServerMemory",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The number of webserver replicas.",
                  "key": "webServerReplicas",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's webserver's url.",
                  "key": "webServerUrl",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A list of the Deployment's worker queues.",
                  "key": "workerQueues",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:WorkerQueue"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's workload identity.",
                  "key": "workloadIdentity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The ID of the Workspace to which the Deployment belongs.",
                  "key": "workspaceId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The name of the Workspace to which the Deployment belongs.",
                  "key": "workspaceName",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentEnvironmentVariable": {
            "name": "DeploymentEnvironmentVariable",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether the environment variable is a secret.",
                  "key": "isSecret",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The environment variable key, used to call the value in code.",
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The time when the environment variable was last updated in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "updatedAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The environment variable value.",
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentEnvironmentVariableRequest": {
            "name": "DeploymentEnvironmentVariableRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether the environment variable is a secret.",
                  "key": "isSecret",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The environment variable key, used to call the value in code.",
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The environment variable value.",
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentHibernationOverride": {
            "name": "DeploymentHibernationOverride",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether the override is currently active or not",
                  "key": "isActive",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to go into hibernation or not via the override rule",
                  "key": "isHibernating",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Timestamp till the override on the hibernation schedule is in effect",
                  "key": "overrideUntil",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentHibernationOverrideRequest": {
            "name": "DeploymentHibernationOverrideRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether to go into hibernation or not via the override rule",
                  "key": "isHibernating",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Timestamp till the override on the hibernation schedule is in effect",
                  "key": "overrideUntil",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentHibernationSchedule": {
            "name": "DeploymentHibernationSchedule",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A brief description of the schedule",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A 5-part cron expression defining the times at which the deployment should hibernate",
                  "key": "hibernateAtCron",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Toggle this schedule on or off. If set to false, this schedule will have no effect on hibernation.",
                  "key": "isEnabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "A 5-part cron expression definingh the times at which the deployment should wake from hibernation",
                  "key": "wakeAtCron",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentHibernationSpec": {
            "name": "DeploymentHibernationSpec",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "override",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentHibernationOverride"
                    }
                  }
                },
                {
                  "description": "The list of schedules for deployment hibernation",
                  "key": "schedules",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DeploymentHibernationSchedule"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentHibernationSpecRequest": {
            "name": "DeploymentHibernationSpecRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "override",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentHibernationOverrideRequest"
                    }
                  }
                },
                {
                  "description": "The list of schedules for deployment hibernation",
                  "key": "schedules",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DeploymentHibernationSchedule"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentHibernationStatusNextEventType": {
            "description": "The type of the next scheduled event for the deployment. Either HIBERNATE or WAKE",
            "name": "DeploymentHibernationStatusNextEventType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "HIBERNATE"
                },
                {
                  "value": "WAKE"
                }
              ]
            }
          },
          "type_:DeploymentHibernationStatus": {
            "name": "DeploymentHibernationStatus",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "If the deployment is currently in hibernating state or not",
                  "key": "isHibernating",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Timestamp of the next scheduled hibernation event for the deployment",
                  "key": "nextEventAt",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The type of the next scheduled event for the deployment. Either HIBERNATE or WAKE",
                  "key": "nextEventType",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentHibernationStatusNextEventType"
                    }
                  }
                },
                {
                  "description": "Reason for the current hibernation state of the deployment",
                  "key": "reason",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentInstanceSpecRequest": {
            "name": "DeploymentInstanceSpecRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The number of Astro unit allocated to the Deployment pod. Minimum `5`, Maximum `24`.",
                  "key": "au",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of replicas the pod should have. Minimum `1`, Maximum `4`.",
                  "key": "replicas",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentOptions": {
            "name": "DeploymentOptions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The available executors.",
                  "key": "executors",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "resourceQuotas",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ResourceQuotaOptions"
                  }
                },
                {
                  "description": "The available Astro Runtime versions.",
                  "key": "runtimeReleases",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:RuntimeRelease"
                    }
                  }
                },
                {
                  "description": "The available scheduler sizes.",
                  "key": "schedulerMachines",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SchedulerMachine"
                    }
                  }
                },
                {
                  "description": "The available worker machine types.",
                  "key": "workerMachines",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkerMachine"
                    }
                  }
                },
                {
                  "key": "workerQueues",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkerQueueOptions"
                  }
                },
                {
                  "description": "The available workload identity options.",
                  "key": "workloadIdentityOptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:WorkloadIdentityOption"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentScalingSpec": {
            "name": "DeploymentScalingSpec",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "hibernationSpec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentHibernationSpec"
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentScalingSpecRequest": {
            "name": "DeploymentScalingSpecRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "hibernationSpec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentHibernationSpecRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentScalingStatus": {
            "name": "DeploymentScalingStatus",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "hibernationStatus",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentHibernationStatus"
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentsPaginated": {
            "name": "DeploymentsPaginated",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A list of Deployments in the current page.",
                  "key": "deployments",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Deployment"
                    }
                  }
                },
                {
                  "description": "The maximum number of Deployments in one page.",
                  "key": "limit",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The offset of the current page of Deployments.",
                  "key": "offset",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of Deployments.",
                  "key": "totalCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploysPaginated": {
            "name": "DeploysPaginated",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A list of deploys in the current page.",
                  "key": "deploys",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Deploy"
                    }
                  }
                },
                {
                  "description": "The maximum number of deploys in one page.",
                  "key": "limit",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The offset of the current page of deploys.",
                  "key": "offset",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of deploys.",
                  "key": "totalCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:Error": {
            "name": "Error",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "requestId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "statusCode",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:HybridWorkerQueueRequest": {
            "name": "HybridWorkerQueueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The worker queue's ID. If not provided, a new worker queue will be created.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the worker queue is the default worker queue on the Deployment.",
                  "key": "isDefault",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The maximum number of workers that can run at once.",
                  "key": "maxWorkerCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The minimum number of workers running at once.",
                  "key": "minWorkerCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The worker queue's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The node pool ID associated with the worker queue.",
                  "key": "nodePoolId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The maximum number of concurrent tasks that a worker Pod can run at a time.",
                  "key": "workerConcurrency",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:MachineSpec": {
            "name": "MachineSpec",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The maximum number of tasks that a given machine instance can run at once.",
                  "key": "concurrency",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "The CPU quantity. Units are in number of CPU cores.",
                  "key": "cpu",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The ephemeral storage quantity. Units in Gibibytes or `Gi`.",
                  "key": "ephemeralStorage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The memory quantity. Units in Gibibytes or `Gi`.",
                  "key": "memory",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ManagedDomainStatus": {
            "description": "Whether the managed domain has completed the verification process.",
            "name": "ManagedDomainStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "PENDING"
                },
                {
                  "value": "VERIFIED"
                }
              ]
            }
          },
          "type_:ManagedDomain": {
            "name": "ManagedDomain",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time when the domain was created in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "createdAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "A list of login types that are enforced for users belonging to the domain.",
                  "key": "enforcedLogins",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The managed domain's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The managed domain's name/ URL.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The ID of the Organization to which the managed domain belongs.",
                  "key": "organizationId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the managed domain has completed the verification process.",
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ManagedDomainStatus"
                  }
                },
                {
                  "description": "The time when the domain was last updated in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "updatedAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                }
              ]
            }
          },
          "type_:NodePoolCloudProvider": {
            "description": "The name of the cloud provider.",
            "name": "NodePoolCloudProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "AWS"
                },
                {
                  "value": "AZURE"
                },
                {
                  "value": "GCP"
                }
              ]
            }
          },
          "type_:NodePool": {
            "name": "NodePool",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the cloud provider.",
                  "key": "cloudProvider",
                  "valueType": {
                    "type": "id",
                    "value": "type_:NodePoolCloudProvider"
                  }
                },
                {
                  "description": "The ID of the cluster that the node pool belongs to.",
                  "key": "clusterId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The time when the node pool was created in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "createdAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "The node pool's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the node pool is the default node pool of the cluster.",
                  "key": "isDefault",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The maximum number of nodes that can be created in the node pool.",
                  "key": "maxNodeCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The name of the node pool.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of node instance that is used for the node pool.",
                  "key": "nodeInstanceType",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The list of supported Astro machines for the node pool. Returned only for Hosted dedicated clusters.",
                  "key": "supportedAstroMachines",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The time when the node pool was last updated in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "updatedAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                }
              ]
            }
          },
          "type_:OrganizationPaymentMethod": {
            "description": "The Organization's payment method.",
            "name": "OrganizationPaymentMethod",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CREDIT_CARD"
                },
                {
                  "value": "INVOICE"
                },
                {
                  "value": "AWS_MARKETPLACE"
                },
                {
                  "value": "AZURE_MARKETPLACE"
                },
                {
                  "value": "GCP_MARKETPLACE"
                }
              ]
            }
          },
          "type_:OrganizationProduct": {
            "description": "The Organization's product type.",
            "name": "OrganizationProduct",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "HOSTED"
                },
                {
                  "value": "HYBRID"
                }
              ]
            }
          },
          "type_:OrganizationStatus": {
            "description": "The Organization's status.",
            "name": "OrganizationStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ACTIVE"
                },
                {
                  "value": "INACTIVE"
                },
                {
                  "value": "SUSPENDED"
                }
              ]
            }
          },
          "type_:OrganizationSupportPlan": {
            "description": "The Organization's support plan.",
            "name": "OrganizationSupportPlan",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "TRIAL"
                },
                {
                  "value": "BASIC"
                },
                {
                  "value": "STANDARD"
                },
                {
                  "value": "PREMIUM"
                },
                {
                  "value": "BUSINESS_CRITICAL"
                }
              ]
            }
          },
          "type_:Organization": {
            "name": "Organization",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The Organization's billing email.",
                  "key": "billingEmail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time when the Organization was created in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "createdAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "createdBy",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BasicSubjectProfile"
                  }
                },
                {
                  "description": "The Organization's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether SCIM is enabled for the Organization.",
                  "key": "isScimEnabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The list of managed domains configured in the Organization.",
                  "key": "managedDomains",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ManagedDomain"
                      }
                    }
                  }
                },
                {
                  "description": "The Organization's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The Organization's payment method.",
                  "key": "paymentMethod",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:OrganizationPaymentMethod"
                    }
                  }
                },
                {
                  "description": "The Organization's product type.",
                  "key": "product",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:OrganizationProduct"
                    }
                  }
                },
                {
                  "description": "The Organization's status.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:OrganizationStatus"
                    }
                  }
                },
                {
                  "description": "The Organization's support plan.",
                  "key": "supportPlan",
                  "valueType": {
                    "type": "id",
                    "value": "type_:OrganizationSupportPlan"
                  }
                },
                {
                  "description": "The time when the Organization's trial expires in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`. Organizations that are no longer in Trial will not have a expiry date.",
                  "key": "trialExpiresAt",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "The time when the Organization was last updated in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "updatedAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "updatedBy",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BasicSubjectProfile"
                  }
                }
              ]
            }
          },
          "type_:OrganizationsPaginated": {
            "name": "OrganizationsPaginated",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The maximum number of Organizations in the page.",
                  "key": "limit",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The offset of the Organizations in the page.",
                  "key": "offset",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The list of Organizations in the page.",
                  "key": "organizations",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Organization"
                    }
                  }
                },
                {
                  "description": "The total number of Organizations.",
                  "key": "totalCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:ProviderInstanceType": {
            "name": "ProviderInstanceType",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The number of CPUs. Units are in number of CPU cores.",
                  "key": "cpu",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The amount of memory. Units in Gibibytes or `Gi`.",
                  "key": "memory",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The name of the instance type.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ProviderRegion": {
            "name": "ProviderRegion",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The banned instances in the region.",
                  "key": "bannedInstances",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Whether the region is limited.",
                  "key": "limited",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "The name of the region.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Range": {
            "name": "Range",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The maximum value.",
                  "key": "ceiling",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "The default value.",
                  "key": "default",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "The minimum value.",
                  "key": "floor",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:ResourceOption": {
            "name": "ResourceOption",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "cpu",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ResourceRange"
                  }
                },
                {
                  "key": "memory",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ResourceRange"
                  }
                }
              ]
            }
          },
          "type_:ResourceQuotaOptions": {
            "name": "ResourceQuotaOptions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "defaultPodSize",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ResourceOption"
                  }
                },
                {
                  "key": "resourceQuota",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ResourceOption"
                  }
                }
              ]
            }
          },
          "type_:ResourceRange": {
            "name": "ResourceRange",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The maximum value.",
                  "key": "ceiling",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The default value.",
                  "key": "default",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The minimum value.",
                  "key": "floor",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:RuntimeRelease": {
            "name": "RuntimeRelease",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether the release requires an Airflow database migration.",
                  "key": "airflowDatabaseMigration",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The Airflow version that the Runtime image is based on.",
                  "key": "airflowVersion",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The release channel.",
                  "key": "channel",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The time when the version is released in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "releaseDate",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "Whether the release requires a Stellar database migration.",
                  "key": "stellarDatabaseMigration",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The Astro Runtime version.",
                  "key": "version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:SchedulerMachineName": {
            "description": "The machine's name.",
            "name": "SchedulerMachineName",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "SMALL"
                },
                {
                  "value": "MEDIUM"
                },
                {
                  "value": "LARGE"
                }
              ]
            }
          },
          "type_:SchedulerMachine": {
            "name": "SchedulerMachine",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The machine's name.",
                  "key": "name",
                  "valueType": {
                    "type": "id",
                    "value": "type_:SchedulerMachineName"
                  }
                },
                {
                  "key": "spec",
                  "valueType": {
                    "type": "id",
                    "value": "type_:MachineSpec"
                  }
                }
              ]
            }
          },
          "type_:UpdateClusterRequest": {
            "name": "UpdateClusterRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "clusterType",
              "variants": [
                {
                  "discriminantValue": "DEDICATED",
                  "additionalProperties": {
                    "extends": ["type_:UpdateDedicatedClusterRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "HYBRID",
                  "additionalProperties": {
                    "extends": ["type_:UpdateHybridClusterRequest"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:UpdateDedicatedClusterRequest": {
            "name": "UpdateDedicatedClusterRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The cluster's database instance type. Required for Hybrid clusters.",
                  "key": "dbInstanceType",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A list of Kubernetes tags to add to the cluster.",
                  "key": "k8sTags",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ClusterK8STag"
                    }
                  }
                },
                {
                  "description": "The cluster's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A list of node pools to add to the cluster. For Hybrid clusters only.",
                  "key": "nodePools",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:UpdateNodePoolRequest"
                      }
                    }
                  }
                },
                {
                  "description": "The list of Workspaces that are authorized to the cluster. If this value is not provided, the existing list of Workspaces remains. If this value is '[]' then all workspace cluster mappings are removed.",
                  "key": "workspaceIds",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:UpdateDedicatedDeploymentRequestExecutor": {
            "description": "The executor Deployment's executor.",
            "name": "UpdateDedicatedDeploymentRequestExecutor",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CELERY"
                },
                {
                  "value": "KUBERNETES"
                }
              ]
            }
          },
          "type_:UpdateDedicatedDeploymentRequestSchedulerSize": {
            "description": "The size of the scheduler pod.",
            "name": "UpdateDedicatedDeploymentRequestSchedulerSize",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "SMALL"
                },
                {
                  "value": "MEDIUM"
                },
                {
                  "value": "LARGE"
                }
              ]
            }
          },
          "type_:UpdateDedicatedDeploymentRequestType": {
            "description": "The type of the Deployment.",
            "name": "UpdateDedicatedDeploymentRequestType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEDICATED"
                },
                {
                  "value": "HYBRID"
                },
                {
                  "value": "STANDARD"
                }
              ]
            }
          },
          "type_:UpdateDedicatedDeploymentRequest": {
            "name": "UpdateDedicatedDeploymentRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A list of contact emails for the Deployment.",
                  "key": "contactEmails",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.",
                  "key": "defaultTaskPodCpu",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi` and must be explicitly included. This value must always be twice the value of `DefaultTaskPodCpu`.",
                  "key": "defaultTaskPodMemory",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The Deployment's description.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "List of environment variables to add to the Deployment.",
                  "key": "environmentVariables",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentEnvironmentVariableRequest"
                    }
                  }
                },
                {
                  "description": "The executor Deployment's executor.",
                  "key": "executor",
                  "valueType": {
                    "type": "id",
                    "value": "type_:UpdateDedicatedDeploymentRequestExecutor"
                  }
                },
                {
                  "description": "Whether the Deployment requires that all deploys are made through CI/CD.",
                  "key": "isCicdEnforced",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the Deployment has DAG deploys enabled.",
                  "key": "isDagDeployEnabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the Deployment is for development only. If `false`, the Deployment can be considered production for the purposes of support case priority, but development-only features such as hibernation will not be available. You can't update this value to `true` for existing non-development Deployments.",
                  "key": "isDevelopmentMode",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.",
                  "key": "isHighAvailability",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The Deployment's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.",
                  "key": "resourceQuotaCpu",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi` and must be explicitly included. This value must always be twice the value of `ResourceQuotaCpu`.",
                  "key": "resourceQuotaMemory",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "scalingSpec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentScalingSpecRequest"
                    }
                  }
                },
                {
                  "description": "The size of the scheduler pod.",
                  "key": "schedulerSize",
                  "valueType": {
                    "type": "id",
                    "value": "type_:UpdateDedicatedDeploymentRequestSchedulerSize"
                  }
                },
                {
                  "description": "The type of the Deployment.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:UpdateDedicatedDeploymentRequestType"
                  }
                },
                {
                  "description": "A list of the Deployment's worker queues. Applies only when `Executor` is `CELERY`. All Deployments need at least 1 worker queue called `default`.",
                  "key": "workerQueues",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:WorkerQueueRequest"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's workload identity.",
                  "key": "workloadIdentity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The ID of the Workspace to which the Deployment belongs.",
                  "key": "workspaceId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:UpdateDeploymentRequest": {
            "name": "UpdateDeploymentRequest",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:UpdateDedicatedDeploymentRequest"
                  },
                  "displayName": "Update Dedicated Deployment Request"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:UpdateHybridDeploymentRequest"
                  },
                  "displayName": "Update Hybrid Deployment Request"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:UpdateStandardDeploymentRequest"
                  },
                  "displayName": "Update Standard Deployment Request"
                }
              ]
            }
          },
          "type_:UpdateHybridClusterRequest": {
            "name": "UpdateHybridClusterRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The list of Workspaces that are authorized to the cluster. If this value is not provided, the existing list of Workspaces remains. If this value is '[]' then all workspace cluster mappings are removed.",
                  "key": "workspaceIds",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:UpdateHybridDeploymentRequestExecutor": {
            "description": "The Deployment's executor type.",
            "name": "UpdateHybridDeploymentRequestExecutor",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CELERY"
                },
                {
                  "value": "KUBERNETES"
                }
              ]
            }
          },
          "type_:UpdateHybridDeploymentRequestType": {
            "description": "The type of the Deployment.",
            "name": "UpdateHybridDeploymentRequestType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEDICATED"
                },
                {
                  "value": "HYBRID"
                },
                {
                  "value": "STANDARD"
                }
              ]
            }
          },
          "type_:UpdateHybridDeploymentRequest": {
            "name": "UpdateHybridDeploymentRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A list of contact emails for the Deployment.",
                  "key": "contactEmails",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's description.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "List of environment variables to add to the Deployment.",
                  "key": "environmentVariables",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentEnvironmentVariableRequest"
                    }
                  }
                },
                {
                  "description": "The Deployment's executor type.",
                  "key": "executor",
                  "valueType": {
                    "type": "id",
                    "value": "type_:UpdateHybridDeploymentRequestExecutor"
                  }
                },
                {
                  "description": "Whether the Deployment requires that all deploys are made through CI/CD.",
                  "key": "isCicdEnforced",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the Deployment has DAG deploys enabled.",
                  "key": "isDagDeployEnabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The Deployment's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "scheduler",
                  "valueType": {
                    "type": "id",
                    "value": "type_:DeploymentInstanceSpecRequest"
                  }
                },
                {
                  "description": "The node pool ID for worker Pods. Applies only when `Executor` is `KUBERNETES`.",
                  "key": "taskPodNodePoolId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The type of the Deployment.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:UpdateHybridDeploymentRequestType"
                  }
                },
                {
                  "description": "The list of worker queues configured for the Deployment. Applies only when `Executor` is `CELERY`. All Deployments need at least 1 worker queue called `default`.",
                  "key": "workerQueues",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:HybridWorkerQueueRequest"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's workload identity.",
                  "key": "workloadIdentity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The ID of the Workspace to which the Deployment belongs.",
                  "key": "workspaceId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:UpdateNodePoolRequest": {
            "name": "UpdateNodePoolRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The node pool's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the node pool is the default node pool of the cluster.",
                  "key": "isDefault",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "The maximum number of nodes that can be created in the node pool.",
                  "key": "maxNodeCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The name of the node pool.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of node instance that is used for the node pool.",
                  "key": "nodeInstanceType",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:UpdateStandardDeploymentRequestExecutor": {
            "description": "The executor Deployment's executor.",
            "name": "UpdateStandardDeploymentRequestExecutor",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CELERY"
                },
                {
                  "value": "KUBERNETES"
                }
              ]
            }
          },
          "type_:UpdateStandardDeploymentRequestSchedulerSize": {
            "description": "The size of the scheduler pod.",
            "name": "UpdateStandardDeploymentRequestSchedulerSize",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "SMALL"
                },
                {
                  "value": "MEDIUM"
                },
                {
                  "value": "LARGE"
                }
              ]
            }
          },
          "type_:UpdateStandardDeploymentRequestType": {
            "description": "The type of the Deployment.",
            "name": "UpdateStandardDeploymentRequestType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEDICATED"
                },
                {
                  "value": "HYBRID"
                },
                {
                  "value": "STANDARD"
                }
              ]
            }
          },
          "type_:UpdateStandardDeploymentRequest": {
            "name": "UpdateStandardDeploymentRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A list of contact emails for the Deployment.",
                  "key": "contactEmails",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The default CPU resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in number of CPU cores.",
                  "key": "defaultTaskPodCpu",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The default memory resource usage for a worker Pod when running the Kubernetes executor or KubernetesPodOperator. Units are in `Gi` and must be explicitly included. This value must always be twice the value of `DefaultTaskPodCpu`.",
                  "key": "defaultTaskPodMemory",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The Deployment's description.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "List of environment variables to add to the Deployment.",
                  "key": "environmentVariables",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentEnvironmentVariableRequest"
                    }
                  }
                },
                {
                  "description": "The executor Deployment's executor.",
                  "key": "executor",
                  "valueType": {
                    "type": "id",
                    "value": "type_:UpdateStandardDeploymentRequestExecutor"
                  }
                },
                {
                  "description": "Whether the Deployment requires that all deploys are made through CI/CD.",
                  "key": "isCicdEnforced",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the Deployment has DAG deploys enabled.",
                  "key": "isDagDeployEnabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the Deployment is for development only. If `false`, the Deployment can be considered production for the purposes of support case priority, but development-only features such as hibernation will not be available. You can't update this value to `true` for existing non-development Deployments.",
                  "key": "isDevelopmentMode",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the Deployment is configured for high availability. If `true`, multiple scheduler pods will be online.",
                  "key": "isHighAvailability",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The Deployment's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The CPU quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current CPU usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in number of CPU cores.",
                  "key": "resourceQuotaCpu",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The memory quota for worker Pods when running the Kubernetes executor or KubernetesPodOperator. If current memory usage across all workers exceeds the quota, no new worker Pods can be scheduled. Units are in `Gi` and must be explicitly included. This value must always be twice the value of `ResourceQuotaCpu`.",
                  "key": "resourceQuotaMemory",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "scalingSpec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DeploymentScalingSpecRequest"
                    }
                  }
                },
                {
                  "description": "The size of the scheduler pod.",
                  "key": "schedulerSize",
                  "valueType": {
                    "type": "id",
                    "value": "type_:UpdateStandardDeploymentRequestSchedulerSize"
                  }
                },
                {
                  "description": "The type of the Deployment.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:UpdateStandardDeploymentRequestType"
                  }
                },
                {
                  "description": "A list of the Deployment's worker queues. Applies only when `Executor` is `CELERY`. All Deployments need at least 1 worker queue called `default`.",
                  "key": "workerQueues",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:WorkerQueueRequest"
                      }
                    }
                  }
                },
                {
                  "description": "The Deployment's workload identity.",
                  "key": "workloadIdentity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The ID of the Workspace to which the Deployment belongs.",
                  "key": "workspaceId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkerMachineName": {
            "description": "The machine's name.",
            "name": "WorkerMachineName",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "A5"
                },
                {
                  "value": "A10"
                },
                {
                  "value": "A20"
                },
                {
                  "value": "A40"
                },
                {
                  "value": "A60"
                },
                {
                  "value": "A120"
                },
                {
                  "value": "A160"
                }
              ]
            }
          },
          "type_:WorkerMachine": {
            "name": "WorkerMachine",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "concurrency",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Range"
                  }
                },
                {
                  "description": "The machine's name.",
                  "key": "name",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkerMachineName"
                  }
                },
                {
                  "key": "spec",
                  "valueType": {
                    "type": "id",
                    "value": "type_:MachineSpec"
                  }
                }
              ]
            }
          },
          "type_:WorkerQueue": {
            "name": "WorkerQueue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The Astro machine size for each worker node in the queue. For Astro Hosted only.",
                  "key": "astroMachine",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The worker queue's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the worker queue is the default worker queue in the Deployment.",
                  "key": "isDefault",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The maximum number of workers that can run at once.",
                  "key": "maxWorkerCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The minimum number of workers running at once.",
                  "key": "minWorkerCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The worker queue's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The node pool ID associated with the worker queue.",
                  "key": "nodePoolId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The maximum number of CPU units available for a worker node. Units are in number of CPU cores.",
                  "key": "podCpu",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The maximum amount of memory available for a worker node. Units are in Gibibytes or `Gi`.",
                  "key": "podMemory",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The maximum number of concurrent tasks that a worker Pod can run at a time.",
                  "key": "workerConcurrency",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkerQueueOptions": {
            "name": "WorkerQueueOptions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "maxWorkers",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Range"
                  }
                },
                {
                  "key": "minWorkers",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Range"
                  }
                },
                {
                  "key": "workerConcurrency",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Range"
                  }
                }
              ]
            }
          },
          "type_:WorkerQueueRequestAstroMachine": {
            "description": "The Astro machine for each worker in the queue. For Astro Hosted only.",
            "name": "WorkerQueueRequestAstroMachine",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "A5"
                },
                {
                  "value": "A10"
                },
                {
                  "value": "A20"
                },
                {
                  "value": "A40"
                },
                {
                  "value": "A60"
                },
                {
                  "value": "A120"
                },
                {
                  "value": "A160"
                }
              ]
            }
          },
          "type_:WorkerQueueRequest": {
            "name": "WorkerQueueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The Astro machine for each worker in the queue. For Astro Hosted only.",
                  "key": "astroMachine",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkerQueueRequestAstroMachine"
                  }
                },
                {
                  "description": "The worker queue's ID. If not provided, a new worker queue will be created.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the worker queue is the default worker queue on the Deployment.",
                  "key": "isDefault",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The maximum number of workers that can run at once.",
                  "key": "maxWorkerCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The minimum number of workers running at once.",
                  "key": "minWorkerCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The worker queue's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The maximum number of concurrent tasks that a worker Pod can run at a time.",
                  "key": "workerConcurrency",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkloadIdentityOption": {
            "name": "WorkloadIdentityOption",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The workload identity label.",
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The workload identity role.",
                  "key": "role",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Workspace": {
            "name": "Workspace",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether CI/CD deploys are enforced by default.",
                  "key": "cicdEnforcedDefault",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The time when the Workspace was created in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`",
                  "key": "createdAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "createdBy",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BasicSubjectProfile"
                    }
                  }
                },
                {
                  "description": "The Workspace's description.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The Workspace's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The Workspace's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The ID of the organization to which the workspace belongs.",
                  "key": "organizationId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The name of the Organization to which the Workspace belongs.",
                  "key": "organizationName",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time when the Workspace was updated in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`",
                  "key": "updatedAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "updatedBy",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BasicSubjectProfile"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkspacesPaginated": {
            "name": "WorkspacesPaginated",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The maximum number of workspaces that can be retrieved per page.",
                  "key": "limit",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The offset for the current page of workspaces in the complete result.",
                  "key": "offset",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of Workspaces in the paginated result.",
                  "key": "totalCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "An array of Workspace objects representing a list of workspaces.",
                  "key": "workspaces",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Workspace"
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_organization": {
            "subpackageId": "subpackage_organization",
            "name": "Organization",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-organizations",
                "method": "GET",
                "id": "ListOrganizations",
                "name": "List Organizations",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Filters the Organization list by support plan.",
                    "key": "supportPlan",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_organization:ListOrganizationsRequestSupportPlan"
                      }
                    }
                  },
                  {
                    "description": "Filters the Organization list by product.",
                    "key": "product",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_organization:ListOrganizationsRequestProduct"
                      }
                    }
                  },
                  {
                    "description": "The number of results to skip before returning values.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The maximum number of results to return.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "A list of field names to sort by, and whether to show results as ascending or descending. Formatted as `<fieldName>:asc` or `<fieldName>:desc`.",
                    "key": "sorts",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_organization:ListOrganizationsRequestSortsItem"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:OrganizationsPaginated"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "limit": 10,
                      "offset": 0,
                      "organizations": [
                        {
                          "billingEmail": "billing@company.com",
                          "createdAt": "2022-11-22T04:37:12Z",
                          "createdBy": {
                            "apiTokenName": "my-token",
                            "avatarUrl": "https://avatar.url",
                            "fullName": "Jane Doe",
                            "id": "clm8qv74h000008mlf08scq7k",
                            "username": "user1@company.com"
                          },
                          "id": "clmaxoarx000008l2c5ayb9pt",
                          "isScimEnabled": false,
                          "managedDomains": [
                            {
                              "createdAt": "2024-01-15T09:30:00Z",
                              "id": "cln203mz7000008jv0jyz9m3y",
                              "name": "mycompany.com",
                              "organizationId": "cln204xr2000008mu3hhe3zwe",
                              "status": "PENDING",
                              "updatedAt": "2024-01-15T09:30:00Z"
                            }
                          ],
                          "name": "My organization",
                          "paymentMethod": "CREDIT_CARD",
                          "product": "HOSTED",
                          "status": "ACTIVE",
                          "supportPlan": "TRIAL",
                          "trialExpiresAt": "2022-11-22T04:37:12Z",
                          "updatedAt": "2022-11-22T04:37:12Z",
                          "updatedBy": {
                            "apiTokenName": "my-token",
                            "avatarUrl": "https://avatar.url",
                            "fullName": "Jane Doe",
                            "id": "clm8qv74h000008mlf08scq7k",
                            "username": "user1@company.com"
                          }
                        }
                      ],
                      "totalCount": 100
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "limit": 10,
                        "offset": 0,
                        "organizations": [
                          {
                            "billingEmail": "billing@company.com",
                            "createdAt": "2022-11-22T04:37:12Z",
                            "createdBy": {
                              "apiTokenName": "my-token",
                              "avatarUrl": "https://avatar.url",
                              "fullName": "Jane Doe",
                              "id": "clm8qv74h000008mlf08scq7k",
                              "username": "user1@company.com"
                            },
                            "id": "clmaxoarx000008l2c5ayb9pt",
                            "isScimEnabled": false,
                            "managedDomains": [
                              {
                                "createdAt": "2024-01-15T09:30:00Z",
                                "id": "cln203mz7000008jv0jyz9m3y",
                                "name": "mycompany.com",
                                "organizationId": "cln204xr2000008mu3hhe3zwe",
                                "status": "PENDING",
                                "updatedAt": "2024-01-15T09:30:00Z"
                              }
                            ],
                            "name": "My organization",
                            "paymentMethod": "CREDIT_CARD",
                            "product": "HOSTED",
                            "status": "ACTIVE",
                            "supportPlan": "TRIAL",
                            "trialExpiresAt": "2022-11-22T04:37:12Z",
                            "updatedAt": "2022-11-22T04:37:12Z",
                            "updatedBy": {
                              "apiTokenName": "my-token",
                              "avatarUrl": "https://avatar.url",
                              "fullName": "Jane Doe",
                              "id": "clm8qv74h000008mlf08scq7k",
                              "username": "user1@company.com"
                            }
                          }
                        ],
                        "totalCount": 100
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations",
                    "pathParameters": {},
                    "queryParameters": {
                      "supportPlan": "TRIAL",
                      "product": "HOSTED"
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations",
                    "pathParameters": {},
                    "queryParameters": {
                      "supportPlan": "TRIAL",
                      "product": "HOSTED"
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations",
                    "pathParameters": {},
                    "queryParameters": {
                      "supportPlan": "TRIAL",
                      "product": "HOSTED"
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations",
                    "pathParameters": {},
                    "queryParameters": {
                      "supportPlan": "TRIAL",
                      "product": "HOSTED"
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List the details about all Organizations that you have access to. Requires using a personal access token (PAT) for authentication.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-organization",
                "migratedFromUrlSlugs": ["get-an-organization"],
                "method": "GET",
                "id": "GetOrganization",
                "name": "Get an Organization",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The Organization's ID.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Whether to show only Organization metadata.",
                    "key": "isLookUpOnly",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Organization"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "billingEmail": "billing@company.com",
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "id": "clmaxoarx000008l2c5ayb9pt",
                      "isScimEnabled": false,
                      "managedDomains": [
                        {
                          "createdAt": "2024-01-15T09:30:00Z",
                          "enforcedLogins": ["enforcedLogins"],
                          "id": "cln203mz7000008jv0jyz9m3y",
                          "name": "mycompany.com",
                          "organizationId": "cln204xr2000008mu3hhe3zwe",
                          "status": "PENDING",
                          "updatedAt": "2024-01-15T09:30:00Z"
                        }
                      ],
                      "name": "My organization",
                      "paymentMethod": "CREDIT_CARD",
                      "product": "HOSTED",
                      "status": "ACTIVE",
                      "supportPlan": "TRIAL",
                      "trialExpiresAt": "2022-11-22T04:37:12Z",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "billingEmail": "billing@company.com",
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "id": "clmaxoarx000008l2c5ayb9pt",
                        "isScimEnabled": false,
                        "managedDomains": [
                          {
                            "createdAt": "2024-01-15T09:30:00Z",
                            "enforcedLogins": ["enforcedLogins"],
                            "id": "cln203mz7000008jv0jyz9m3y",
                            "name": "mycompany.com",
                            "organizationId": "cln204xr2000008mu3hhe3zwe",
                            "status": "PENDING",
                            "updatedAt": "2024-01-15T09:30:00Z"
                          }
                        ],
                        "name": "My organization",
                        "paymentMethod": "CREDIT_CARD",
                        "product": "HOSTED",
                        "status": "ACTIVE",
                        "supportPlan": "TRIAL",
                        "trialExpiresAt": "2022-11-22T04:37:12Z",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "isLookUpOnly": true
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "isLookUpOnly": true
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "isLookUpOnly": true
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "isLookUpOnly": true
                    },
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "isLookUpOnly": true
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Retrieve information about a specific Organization.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-organization",
                "migratedFromUrlSlugs": ["update-an-organization"],
                "method": "POST",
                "id": "UpdateOrganization",
                "name": "Update an Organization",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The Organization's ID.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The Organization's billing email.",
                        "key": "billingEmail",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Whether SCIM is enabled for the Organization.",
                        "key": "isScimEnabled",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "boolean"
                          }
                        }
                      },
                      {
                        "description": "The name of the Organization.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Organization"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "billingEmail": "billing@company.com",
                      "isScimEnabled": false,
                      "name": "My Organization"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "billingEmail": "billing@company.com",
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "id": "clmaxoarx000008l2c5ayb9pt",
                      "isScimEnabled": false,
                      "managedDomains": [
                        {
                          "createdAt": "2024-01-15T09:30:00Z",
                          "enforcedLogins": ["enforcedLogins"],
                          "id": "cln203mz7000008jv0jyz9m3y",
                          "name": "mycompany.com",
                          "organizationId": "cln204xr2000008mu3hhe3zwe",
                          "status": "PENDING",
                          "updatedAt": "2024-01-15T09:30:00Z"
                        }
                      ],
                      "name": "My organization",
                      "paymentMethod": "CREDIT_CARD",
                      "product": "HOSTED",
                      "status": "ACTIVE",
                      "supportPlan": "TRIAL",
                      "trialExpiresAt": "2022-11-22T04:37:12Z",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "billingEmail": "billing@company.com",
                        "isScimEnabled": false,
                        "name": "My Organization"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "billingEmail": "billing@company.com",
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "id": "clmaxoarx000008l2c5ayb9pt",
                        "isScimEnabled": false,
                        "managedDomains": [
                          {
                            "createdAt": "2024-01-15T09:30:00Z",
                            "enforcedLogins": ["enforcedLogins"],
                            "id": "cln203mz7000008jv0jyz9m3y",
                            "name": "mycompany.com",
                            "organizationId": "cln204xr2000008mu3hhe3zwe",
                            "status": "PENDING",
                            "updatedAt": "2024-01-15T09:30:00Z"
                          }
                        ],
                        "name": "My organization",
                        "paymentMethod": "CREDIT_CARD",
                        "product": "HOSTED",
                        "status": "ACTIVE",
                        "supportPlan": "TRIAL",
                        "trialExpiresAt": "2022-11-22T04:37:12Z",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "billingEmail": "string",
                        "isScimEnabled": true,
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "billingEmail": "string",
                        "isScimEnabled": true,
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "billingEmail": "string",
                        "isScimEnabled": true,
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "billingEmail": "string",
                        "isScimEnabled": true,
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "billingEmail": "string",
                        "isScimEnabled": true,
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update an Organization's details.",
                "authed": true
              }
            ],
            "types": [
              "type_organization:ListOrganizationsRequestSupportPlan",
              "type_organization:ListOrganizationsRequestProduct",
              "type_organization:ListOrganizationsRequestSortsItem"
            ],
            "subpackages": [],
            "urlSlug": "organization",
            "description": "The `organization` object contains the metadata and configurations of an Astro Organization. It does not include objects within the Organization, such as users and clusters. Make requests to `organization` endpoints to view and update high level settings for your Organization, including settings related to authentication and billing. To manage resources within an Organization, make requests to the endpoints related to those resources, such as `users`. See [Billing](https://www.astronomer.io/docs/astro/manage-billing), [Set up single sign-on](https://www.astronomer.io/docs/astro/configure-idp), and [Manage domains](https://www.astronomer.io/docs/astro/manage-domains).",
            "webhooks": [],
            "websockets": [],
            "displayName": "Organization"
          },
          "subpackage_options": {
            "subpackageId": "subpackage_options",
            "name": "Options",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-cluster-options",
                "method": "GET",
                "id": "GetClusterOptions",
                "name": "Get cluster options",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to get cluster options for.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/cluster-options"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The cluster's cloud provider.",
                    "key": "provider",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_options:GetClusterOptionsRequestProvider"
                      }
                    }
                  },
                  {
                    "description": "The cluster type.",
                    "key": "type",
                    "type": {
                      "type": "id",
                      "value": "type_options:GetClusterOptionsRequestType"
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ClusterOptions"
                      }
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/cluster-options",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {
                      "type": "DEDICATED"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "databaseInstances": [
                          {
                            "cpu": 4,
                            "memory": "16Gi",
                            "name": "e2-standard-4"
                          }
                        ],
                        "defaultDatabaseInstance": {
                          "cpu": 4,
                          "memory": "16Gi",
                          "name": "e2-standard-4"
                        },
                        "defaultNodeInstance": {
                          "cpu": 4,
                          "memory": "16Gi",
                          "name": "e2-standard-4"
                        },
                        "defaultPodSubnetRange": "172.21.0.0/19",
                        "defaultRegion": {
                          "bannedInstances": ["bannedInstances"],
                          "limited": true,
                          "name": "us-east-1"
                        },
                        "defaultServicePeeringRange": "172.23.0.0/20",
                        "defaultServiceSubnetRange": "172.22.0.0/22",
                        "defaultVpcSubnetRange": "172.20.0.0/19",
                        "nodeCountDefault": 20,
                        "nodeCountMax": 100,
                        "nodeCountMin": 2,
                        "nodeInstances": [
                          {
                            "cpu": 4,
                            "memory": "16Gi",
                            "name": "e2-standard-4"
                          }
                        ],
                        "provider": "AWS",
                        "regions": [
                          {
                            "limited": true,
                            "name": "us-east-1"
                          }
                        ]
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "databaseInstances": [
                            {
                              "cpu": 4,
                              "memory": "16Gi",
                              "name": "e2-standard-4"
                            }
                          ],
                          "defaultDatabaseInstance": {
                            "cpu": 4,
                            "memory": "16Gi",
                            "name": "e2-standard-4"
                          },
                          "defaultNodeInstance": {
                            "cpu": 4,
                            "memory": "16Gi",
                            "name": "e2-standard-4"
                          },
                          "defaultPodSubnetRange": "172.21.0.0/19",
                          "defaultRegion": {
                            "bannedInstances": ["bannedInstances"],
                            "limited": true,
                            "name": "us-east-1"
                          },
                          "defaultServicePeeringRange": "172.23.0.0/20",
                          "defaultServiceSubnetRange": "172.22.0.0/22",
                          "defaultVpcSubnetRange": "172.20.0.0/19",
                          "nodeCountDefault": 20,
                          "nodeCountMax": 100,
                          "nodeCountMin": 2,
                          "nodeInstances": [
                            {
                              "cpu": 4,
                              "memory": "16Gi",
                              "name": "e2-standard-4"
                            }
                          ],
                          "provider": "AWS",
                          "regions": [
                            {
                              "limited": true,
                              "name": "us-east-1"
                            }
                          ]
                        }
                      ]
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/cluster-options",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "provider": "AWS",
                      "type": "DEDICATED"
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/cluster-options",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "provider": "AWS",
                      "type": "DEDICATED"
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/cluster-options",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "provider": "AWS",
                      "type": "DEDICATED"
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/cluster-options",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "provider": "AWS",
                      "type": "DEDICATED"
                    },
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/cluster-options",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "provider": "AWS",
                      "type": "DEDICATED"
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get all possible options for configuring a cluster.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-deployment-options",
                "method": "GET",
                "id": "GetDeploymentOptions",
                "name": "Get Deployment options",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to retrieve Deployment options for.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/deployment-options"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The ID of a Deployment to retrieve options for.",
                    "key": "deploymentId",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The runtime type of the deployment.",
                    "key": "deploymentType",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_options:GetDeploymentOptionsRequestDeploymentType"
                      }
                    }
                  },
                  {
                    "description": "The executor of the deployment.",
                    "key": "executor",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_options:GetDeploymentOptionsRequestExecutor"
                      }
                    }
                  },
                  {
                    "description": "The cloud provider of the cluster for the deployment.",
                    "key": "cloudProvider",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_options:GetDeploymentOptionsRequestCloudProvider"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DeploymentOptions"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/deployment-options",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "executors": ["executors"],
                      "resourceQuotas": {
                        "defaultPodSize": {
                          "cpu": {
                            "ceiling": "10",
                            "default": "5",
                            "floor": "1"
                          },
                          "memory": {
                            "ceiling": "10",
                            "default": "5",
                            "floor": "1"
                          }
                        },
                        "resourceQuota": {
                          "cpu": {
                            "ceiling": "10",
                            "default": "5",
                            "floor": "1"
                          },
                          "memory": {
                            "ceiling": "10",
                            "default": "5",
                            "floor": "1"
                          }
                        }
                      },
                      "runtimeReleases": [
                        {
                          "airflowDatabaseMigration": false,
                          "airflowVersion": "2.7.1",
                          "channel": "stable",
                          "releaseDate": "2022-11-22T04:37:12Z",
                          "stellarDatabaseMigration": false,
                          "version": "9.1.0"
                        }
                      ],
                      "schedulerMachines": [
                        {
                          "name": "SMALL",
                          "spec": {
                            "concurrency": 10,
                            "cpu": "1",
                            "ephemeralStorage": "10Gi",
                            "memory": "2Gi"
                          }
                        }
                      ],
                      "workerMachines": [
                        {
                          "concurrency": {
                            "ceiling": 10,
                            "default": 5,
                            "floor": 1
                          },
                          "name": "A5",
                          "spec": {
                            "concurrency": 10,
                            "cpu": "1",
                            "ephemeralStorage": "10Gi",
                            "memory": "2Gi"
                          }
                        }
                      ],
                      "workerQueues": {
                        "maxWorkers": {
                          "ceiling": 10,
                          "default": 5,
                          "floor": 1
                        },
                        "minWorkers": {
                          "ceiling": 10,
                          "default": 5,
                          "floor": 1
                        },
                        "workerConcurrency": {
                          "ceiling": 10,
                          "default": 5,
                          "floor": 1
                        }
                      },
                      "workloadIdentityOptions": [
                        {
                          "label": "workload-label",
                          "role": "workload-role"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "executors": ["executors"],
                        "resourceQuotas": {
                          "defaultPodSize": {
                            "cpu": {
                              "ceiling": "10",
                              "default": "5",
                              "floor": "1"
                            },
                            "memory": {
                              "ceiling": "10",
                              "default": "5",
                              "floor": "1"
                            }
                          },
                          "resourceQuota": {
                            "cpu": {
                              "ceiling": "10",
                              "default": "5",
                              "floor": "1"
                            },
                            "memory": {
                              "ceiling": "10",
                              "default": "5",
                              "floor": "1"
                            }
                          }
                        },
                        "runtimeReleases": [
                          {
                            "airflowDatabaseMigration": false,
                            "airflowVersion": "2.7.1",
                            "channel": "stable",
                            "releaseDate": "2022-11-22T04:37:12Z",
                            "stellarDatabaseMigration": false,
                            "version": "9.1.0"
                          }
                        ],
                        "schedulerMachines": [
                          {
                            "name": "SMALL",
                            "spec": {
                              "concurrency": 10,
                              "cpu": "1",
                              "ephemeralStorage": "10Gi",
                              "memory": "2Gi"
                            }
                          }
                        ],
                        "workerMachines": [
                          {
                            "concurrency": {
                              "ceiling": 10,
                              "default": 5,
                              "floor": 1
                            },
                            "name": "A5",
                            "spec": {
                              "concurrency": 10,
                              "cpu": "1",
                              "ephemeralStorage": "10Gi",
                              "memory": "2Gi"
                            }
                          }
                        ],
                        "workerQueues": {
                          "maxWorkers": {
                            "ceiling": 10,
                            "default": 5,
                            "floor": 1
                          },
                          "minWorkers": {
                            "ceiling": 10,
                            "default": 5,
                            "floor": 1
                          },
                          "workerConcurrency": {
                            "ceiling": 10,
                            "default": 5,
                            "floor": 1
                          }
                        },
                        "workloadIdentityOptions": [
                          {
                            "label": "workload-label",
                            "role": "workload-role"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployment-options",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "deploymentId": "string",
                      "deploymentType": "HYBRID"
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployment-options",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "deploymentId": "string",
                      "deploymentType": "HYBRID"
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployment-options",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "deploymentId": "string",
                      "deploymentType": "HYBRID"
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployment-options",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "deploymentId": "string",
                      "deploymentType": "HYBRID"
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get the options available for configuring a Deployment.",
                "authed": true
              }
            ],
            "types": [
              "type_options:GetClusterOptionsRequestProvider",
              "type_options:GetClusterOptionsRequestType",
              "type_options:GetDeploymentOptionsRequestDeploymentType",
              "type_options:GetDeploymentOptionsRequestExecutor",
              "type_options:GetDeploymentOptionsRequestCloudProvider"
            ],
            "subpackages": [],
            "urlSlug": "options",
            "description": "The `options` object represents all possible configurations for a given Astro component. Make requests to the `options` object to get the configuration constraints for creating or updating a given Astro component.",
            "webhooks": [],
            "websockets": [],
            "displayName": "Options"
          },
          "subpackage_cluster": {
            "subpackageId": "subpackage_cluster",
            "name": "Cluster",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-clusters",
                "method": "GET",
                "id": "ListClusters",
                "name": "List clusters",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The Organization's unique ID.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/clusters"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "A list of names for Clusters to filter by. The API returns details only for the specified Clusters.",
                    "key": "names",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The cloud provider to list clusters for. Clusters from other providers will be filtered out of the results.",
                    "key": "provider",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_cluster:ListClustersRequestProvider"
                      }
                    }
                  },
                  {
                    "description": "The number of results to skip before returning values.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The maximum number of results to return.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "A list of field names to sort by, and whether to show results as ascending or descending. Formatted as `<fieldName>:asc` or `<fieldName>:desc`.",
                    "key": "sorts",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_cluster:ListClustersRequestSortsItem"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ClustersPaginated"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/clusters",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "clusters": [
                        {
                          "cloudProvider": "AWS",
                          "createdAt": "2022-11-22T04:37:12Z",
                          "dbInstanceType": "db.t3.medium",
                          "id": "clm7k8tgw000008jz97i37y81",
                          "isLimited": false,
                          "metadata": {
                            "oidcIssuerUrl": "https://westus2.oic.prod-aks.azure.com/b84efac8-cfae-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/"
                          },
                          "name": "my cluster",
                          "nodePools": [
                            {
                              "cloudProvider": "AWS",
                              "clusterId": "clm891jb6000308jrc3vjdtde",
                              "createdAt": "2022-11-22T04:37:12Z",
                              "id": "clm890zhe000208jr39dd0ubs",
                              "isDefault": true,
                              "maxNodeCount": 1,
                              "name": "default",
                              "nodeInstanceType": "t3.medium",
                              "updatedAt": "2022-11-22T04:37:12Z"
                            }
                          ],
                          "organizationId": "clm88r8hi000008jwhzxu5crg",
                          "podSubnetRange": "172.21.0.0/19",
                          "providerAccount": "provider-account",
                          "region": "us-east-1",
                          "servicePeeringRange": "172.23.0.0/20",
                          "serviceSubnetRange": "172.22.0.0/22",
                          "status": "CREATING",
                          "tags": [
                            {
                              "key": "key1",
                              "value": "value1"
                            }
                          ],
                          "tenantId": "your-tenant-id",
                          "type": "DEDICATED",
                          "updatedAt": "2022-11-22T04:37:12Z",
                          "vpcSubnetRange": "172.20.0.0/22",
                          "workspaceIds": ["workspaceIds"]
                        }
                      ],
                      "limit": 10,
                      "offset": 0,
                      "totalCount": 100
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "clusters": [
                          {
                            "cloudProvider": "AWS",
                            "createdAt": "2022-11-22T04:37:12Z",
                            "dbInstanceType": "db.t3.medium",
                            "id": "clm7k8tgw000008jz97i37y81",
                            "isLimited": false,
                            "metadata": {
                              "oidcIssuerUrl": "https://westus2.oic.prod-aks.azure.com/b84efac8-cfae-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/"
                            },
                            "name": "my cluster",
                            "nodePools": [
                              {
                                "cloudProvider": "AWS",
                                "clusterId": "clm891jb6000308jrc3vjdtde",
                                "createdAt": "2022-11-22T04:37:12Z",
                                "id": "clm890zhe000208jr39dd0ubs",
                                "isDefault": true,
                                "maxNodeCount": 1,
                                "name": "default",
                                "nodeInstanceType": "t3.medium",
                                "updatedAt": "2022-11-22T04:37:12Z"
                              }
                            ],
                            "organizationId": "clm88r8hi000008jwhzxu5crg",
                            "podSubnetRange": "172.21.0.0/19",
                            "providerAccount": "provider-account",
                            "region": "us-east-1",
                            "servicePeeringRange": "172.23.0.0/20",
                            "serviceSubnetRange": "172.22.0.0/22",
                            "status": "CREATING",
                            "tags": [
                              {
                                "key": "key1",
                                "value": "value1"
                              }
                            ],
                            "tenantId": "your-tenant-id",
                            "type": "DEDICATED",
                            "updatedAt": "2022-11-22T04:37:12Z",
                            "vpcSubnetRange": "172.20.0.0/22",
                            "workspaceIds": ["workspaceIds"]
                          }
                        ],
                        "limit": 10,
                        "offset": 0,
                        "totalCount": 100
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "names": "string",
                      "provider": "AWS"
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "names": "string",
                      "provider": "AWS"
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "names": "string",
                      "provider": "AWS"
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "names": "string",
                      "provider": "AWS"
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List clusters in an Organization.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-cluster",
                "migratedFromUrlSlugs": ["create-a-cluster"],
                "method": "POST",
                "id": "CreateCluster",
                "name": "Create a cluster",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to create the cluster in.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/clusters"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:CreateClusterRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Cluster"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/clusters",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "cloudProvider": "AWS",
                      "dbInstanceType": "Small General Purpose",
                      "name": "My cluster",
                      "nodePools": [
                        {
                          "isDefault": true,
                          "maxNodeCount": 10,
                          "name": "my-nodepool",
                          "nodeInstanceType": "t3.medium"
                        }
                      ],
                      "providerAccount": "provider-account",
                      "region": "us-east-1",
                      "type": "DEDICATED",
                      "vpcSubnetRange": "172.20.0.0/22"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "cloudProvider": "AWS",
                      "createdAt": "2022-11-22T04:37:12Z",
                      "dbInstanceType": "db.t3.medium",
                      "id": "clm7k8tgw000008jz97i37y81",
                      "isLimited": false,
                      "metadata": {
                        "externalIPs": ["externalIPs"],
                        "oidcIssuerUrl": "https://westus2.oic.prod-aks.azure.com/b84efac8-cfae-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/"
                      },
                      "name": "my cluster",
                      "nodePools": [
                        {
                          "cloudProvider": "AWS",
                          "clusterId": "clm891jb6000308jrc3vjdtde",
                          "createdAt": "2022-11-22T04:37:12Z",
                          "id": "clm890zhe000208jr39dd0ubs",
                          "isDefault": true,
                          "maxNodeCount": 1,
                          "name": "default",
                          "nodeInstanceType": "t3.medium",
                          "supportedAstroMachines": ["supportedAstroMachines"],
                          "updatedAt": "2022-11-22T04:37:12Z"
                        }
                      ],
                      "organizationId": "clm88r8hi000008jwhzxu5crg",
                      "podSubnetRange": "172.21.0.0/19",
                      "providerAccount": "provider-account",
                      "region": "us-east-1",
                      "servicePeeringRange": "172.23.0.0/20",
                      "serviceSubnetRange": "172.22.0.0/22",
                      "status": "CREATING",
                      "tags": [
                        {
                          "key": "key1",
                          "value": "value1"
                        }
                      ],
                      "tenantId": "your-tenant-id",
                      "type": "DEDICATED",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "vpcSubnetRange": "172.20.0.0/22",
                      "workspaceIds": ["workspaceIds"]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "cloudProvider": "AWS",
                        "dbInstanceType": "Small General Purpose",
                        "name": "My cluster",
                        "nodePools": [
                          {
                            "isDefault": true,
                            "maxNodeCount": 10,
                            "name": "my-nodepool",
                            "nodeInstanceType": "t3.medium"
                          }
                        ],
                        "providerAccount": "provider-account",
                        "region": "us-east-1",
                        "type": "DEDICATED",
                        "vpcSubnetRange": "172.20.0.0/22"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "cloudProvider": "AWS",
                        "createdAt": "2022-11-22T04:37:12Z",
                        "dbInstanceType": "db.t3.medium",
                        "id": "clm7k8tgw000008jz97i37y81",
                        "isLimited": false,
                        "metadata": {
                          "externalIPs": ["externalIPs"],
                          "oidcIssuerUrl": "https://westus2.oic.prod-aks.azure.com/b84efac8-cfae-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/"
                        },
                        "name": "my cluster",
                        "nodePools": [
                          {
                            "cloudProvider": "AWS",
                            "clusterId": "clm891jb6000308jrc3vjdtde",
                            "createdAt": "2022-11-22T04:37:12Z",
                            "id": "clm890zhe000208jr39dd0ubs",
                            "isDefault": true,
                            "maxNodeCount": 1,
                            "name": "default",
                            "nodeInstanceType": "t3.medium",
                            "supportedAstroMachines": ["supportedAstroMachines"],
                            "updatedAt": "2022-11-22T04:37:12Z"
                          }
                        ],
                        "organizationId": "clm88r8hi000008jwhzxu5crg",
                        "podSubnetRange": "172.21.0.0/19",
                        "providerAccount": "provider-account",
                        "region": "us-east-1",
                        "servicePeeringRange": "172.23.0.0/20",
                        "serviceSubnetRange": "172.22.0.0/22",
                        "status": "CREATING",
                        "tags": [
                          {
                            "key": "key1",
                            "value": "value1"
                          }
                        ],
                        "tenantId": "your-tenant-id",
                        "type": "DEDICATED",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "vpcSubnetRange": "172.20.0.0/22",
                        "workspaceIds": ["workspaceIds"]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "cloudProvider": "AWS",
                        "name": "string",
                        "region": "string",
                        "type": "DEDICATED",
                        "vpcSubnetRange": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "cloudProvider": "AWS",
                        "name": "string",
                        "region": "string",
                        "type": "DEDICATED",
                        "vpcSubnetRange": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "cloudProvider": "AWS",
                        "name": "string",
                        "region": "string",
                        "type": "DEDICATED",
                        "vpcSubnetRange": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "cloudProvider": "AWS",
                        "name": "string",
                        "region": "string",
                        "type": "DEDICATED",
                        "vpcSubnetRange": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "cloudProvider": "AWS",
                        "name": "string",
                        "region": "string",
                        "type": "DEDICATED",
                        "vpcSubnetRange": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a cluster in the Organization. An Astro cluster is a Kubernetes cluster that hosts the infrastructure required to run Deployments.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-cluster",
                "migratedFromUrlSlugs": ["get-a-cluster"],
                "method": "GET",
                "id": "GetCluster",
                "name": "Get a cluster",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the cluster belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The cluster's ID.",
                      "key": "clusterId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/clusters/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "clusterId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Cluster"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/clusters/clusterId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "clusterId": "clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "cloudProvider": "AWS",
                      "createdAt": "2022-11-22T04:37:12Z",
                      "dbInstanceType": "db.t3.medium",
                      "id": "clm7k8tgw000008jz97i37y81",
                      "isLimited": false,
                      "metadata": {
                        "externalIPs": ["externalIPs"],
                        "oidcIssuerUrl": "https://westus2.oic.prod-aks.azure.com/b84efac8-cfae-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/"
                      },
                      "name": "my cluster",
                      "nodePools": [
                        {
                          "cloudProvider": "AWS",
                          "clusterId": "clm891jb6000308jrc3vjdtde",
                          "createdAt": "2022-11-22T04:37:12Z",
                          "id": "clm890zhe000208jr39dd0ubs",
                          "isDefault": true,
                          "maxNodeCount": 1,
                          "name": "default",
                          "nodeInstanceType": "t3.medium",
                          "supportedAstroMachines": ["supportedAstroMachines"],
                          "updatedAt": "2022-11-22T04:37:12Z"
                        }
                      ],
                      "organizationId": "clm88r8hi000008jwhzxu5crg",
                      "podSubnetRange": "172.21.0.0/19",
                      "providerAccount": "provider-account",
                      "region": "us-east-1",
                      "servicePeeringRange": "172.23.0.0/20",
                      "serviceSubnetRange": "172.22.0.0/22",
                      "status": "CREATING",
                      "tags": [
                        {
                          "key": "key1",
                          "value": "value1"
                        }
                      ],
                      "tenantId": "your-tenant-id",
                      "type": "DEDICATED",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "vpcSubnetRange": "172.20.0.0/22",
                      "workspaceIds": ["workspaceIds"]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "cloudProvider": "AWS",
                        "createdAt": "2022-11-22T04:37:12Z",
                        "dbInstanceType": "db.t3.medium",
                        "id": "clm7k8tgw000008jz97i37y81",
                        "isLimited": false,
                        "metadata": {
                          "externalIPs": ["externalIPs"],
                          "oidcIssuerUrl": "https://westus2.oic.prod-aks.azure.com/b84efac8-cfae-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/"
                        },
                        "name": "my cluster",
                        "nodePools": [
                          {
                            "cloudProvider": "AWS",
                            "clusterId": "clm891jb6000308jrc3vjdtde",
                            "createdAt": "2022-11-22T04:37:12Z",
                            "id": "clm890zhe000208jr39dd0ubs",
                            "isDefault": true,
                            "maxNodeCount": 1,
                            "name": "default",
                            "nodeInstanceType": "t3.medium",
                            "supportedAstroMachines": ["supportedAstroMachines"],
                            "updatedAt": "2022-11-22T04:37:12Z"
                          }
                        ],
                        "organizationId": "clm88r8hi000008jwhzxu5crg",
                        "podSubnetRange": "172.21.0.0/19",
                        "providerAccount": "provider-account",
                        "region": "us-east-1",
                        "servicePeeringRange": "172.23.0.0/20",
                        "serviceSubnetRange": "172.22.0.0/22",
                        "status": "CREATING",
                        "tags": [
                          {
                            "key": "key1",
                            "value": "value1"
                          }
                        ],
                        "tenantId": "your-tenant-id",
                        "type": "DEDICATED",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "vpcSubnetRange": "172.20.0.0/22",
                        "workspaceIds": ["workspaceIds"]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Retrieve details about a cluster.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-cluster",
                "migratedFromUrlSlugs": ["update-a-cluster"],
                "method": "POST",
                "id": "UpdateCluster",
                "name": "Update a cluster",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the cluster belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The cluster's ID",
                      "key": "clusterId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/clusters/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "clusterId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:UpdateClusterRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Cluster"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "clusterType": "DEDICATED",
                        "k8sTags": [{}],
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "cloudProvider": "AWS",
                        "createdAt": "2023-01-01T00:00:00Z",
                        "dbInstanceType": "string",
                        "id": "string",
                        "isLimited": true,
                        "metadata": {
                          "externalIPs": ["string"],
                          "oidcIssuerUrl": "string"
                        },
                        "name": "string",
                        "nodePools": [
                          {
                            "cloudProvider": "AWS",
                            "clusterId": "string",
                            "createdAt": "2023-01-01T00:00:00Z",
                            "id": "string",
                            "isDefault": true,
                            "maxNodeCount": 0,
                            "name": "string",
                            "nodeInstanceType": "string",
                            "supportedAstroMachines": ["string"],
                            "updatedAt": "2023-01-01T00:00:00Z"
                          }
                        ],
                        "organizationId": "string",
                        "podSubnetRange": "string",
                        "providerAccount": "string",
                        "region": "string",
                        "servicePeeringRange": "string",
                        "serviceSubnetRange": "string",
                        "status": "CREATING",
                        "tags": [
                          {
                            "key": "string",
                            "value": "string"
                          }
                        ],
                        "tenantId": "string",
                        "type": "DEDICATED",
                        "updatedAt": "2023-01-01T00:00:00Z",
                        "vpcSubnetRange": "string",
                        "workspaceIds": ["string"]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "clusterType": "DEDICATED",
                        "k8sTags": [{}],
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "clusterType": "DEDICATED",
                        "k8sTags": [{}],
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "clusterType": "DEDICATED",
                        "k8sTags": [{}],
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "clusterType": "DEDICATED",
                        "k8sTags": [{}],
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "clusterType": "DEDICATED",
                        "k8sTags": [{}],
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update a cluster in the Organization.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-cluster",
                "migratedFromUrlSlugs": ["delete-a-cluster"],
                "method": "DELETE",
                "id": "DeleteCluster",
                "name": "Delete a cluster",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the cluster belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The cluster's ID.",
                      "key": "clusterId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/clusters/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "clusterId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/clusters/clusterId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "clusterId": "clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/clusters/:clusterId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "clusterId": ":clusterId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete a cluster.",
                "authed": true
              }
            ],
            "types": ["type_cluster:ListClustersRequestProvider", "type_cluster:ListClustersRequestSortsItem"],
            "subpackages": [],
            "urlSlug": "cluster",
            "description": "A `cluster` object represents an Astro cluster, which is a Kubernetes cluster that hosts the infrastructure required to run Deployments. Make requests to `cluster` endpoints to manage your standard and dedicated clusters. See [Create a dedicated cluster](https://www.astronomer.io/docs/astro/create-dedicated-cluster).",
            "webhooks": [],
            "websockets": [],
            "displayName": "Cluster"
          },
          "subpackage_deployment": {
            "subpackageId": "subpackage_deployment",
            "name": "deployment",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-deployments",
                "method": "GET",
                "id": "ListDeployments",
                "name": "List Deployments",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to list Deployments for.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/deployments"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "A list of IDs for Deployments to show. The API returns details only for the specified Deployments.",
                    "key": "deploymentIds",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "A list of names for Deployments to filter by. The API returns details only for the specified Deployments.",
                    "key": "names",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "A list of IDs for Workspaces to filter on. The API returns details for all Deployments belonging only to the specified Workspaces.",
                    "key": "workspaceIds",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The number of results to skip before returning values.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The maximum number of results to return.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "A list of field names to sort by, and whether to show results as ascending or descending. Formatted as `<fieldName>:asc` or `<fieldName>:desc`.",
                    "key": "sorts",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_deployment:ListDeploymentsRequestSortsItem"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DeploymentsPaginated"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/deployments",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "deployments": [
                        {
                          "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                          "astroRuntimeVersion": "9.1.0",
                          "cloudProvider": "AWS",
                          "clusterId": "clmh597sg000208lb2kjhcn8q",
                          "clusterName": "my cluster",
                          "contactEmails": ["contactEmails"],
                          "createdAt": "2022-11-22T04:37:12Z",
                          "createdBy": {
                            "apiTokenName": "my-token",
                            "avatarUrl": "https://avatar.url",
                            "fullName": "Jane Doe",
                            "id": "clm8qv74h000008mlf08scq7k",
                            "username": "user1@company.com"
                          },
                          "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                          "defaultTaskPodCpu": "0.5",
                          "defaultTaskPodMemory": "1Gi",
                          "description": "My deployment description",
                          "desiredDagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                          "environmentVariables": [
                            {
                              "isSecret": true,
                              "key": "my-var",
                              "updatedAt": "2022-11-22T04:37:12Z",
                              "value": "my-var-value"
                            }
                          ],
                          "executor": "CELERY",
                          "externalIPs": ["externalIPs"],
                          "id": "clmh57jtm000008lb58fe2wmv",
                          "imageRepository": "https://my-image-repository",
                          "imageTag": "my-image-tag",
                          "imageVersion": "deploy-2023-09-14T19-04",
                          "isCicdEnforced": true,
                          "isDagDeployEnabled": true,
                          "isDevelopmentMode": true,
                          "isHighAvailability": true,
                          "name": "My deployment",
                          "namespace": "weightless-diameter-8927",
                          "oidcIssuerUrl": "https://westus2.oic.prod-aks.azure.com/b84efac8-cfee-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/",
                          "organizationId": "clmh59gt0000308lbgswe5fvh",
                          "region": "us-east-1",
                          "resourceQuotaCpu": "160",
                          "resourceQuotaMemory": "320Gi",
                          "runtimeVersion": "9.1.0",
                          "schedulerAu": 5,
                          "schedulerCpu": "1",
                          "schedulerMemory": "1Gi",
                          "schedulerReplicas": 1,
                          "schedulerSize": "SMALL",
                          "status": "CREATING",
                          "statusReason": "Successfully Deployed",
                          "taskPodNodePoolId": "clmh5mash000008mia6lnbs0f",
                          "type": "DEDICATED",
                          "updatedAt": "2022-11-22T04:37:12Z",
                          "updatedBy": {
                            "apiTokenName": "my-token",
                            "avatarUrl": "https://avatar.url",
                            "fullName": "Jane Doe",
                            "id": "clm8qv74h000008mlf08scq7k",
                            "username": "user1@company.com"
                          },
                          "webServerAirflowApiUrl": "myorganization.astronomer-dev.run/d8fe2wmv/api/v1",
                          "webServerCpu": "0.5",
                          "webServerIngressHostname": "clmh597sg000208lb2kjhcn8q.astronomer.run/d8fe2wmv",
                          "webServerMemory": "0.5Gi",
                          "webServerReplicas": 1,
                          "webServerUrl": "myorganization.astronomer-dev.run/d8fe2wmv?orgId=org_edxLzpFcLrgEfpD5",
                          "workerQueues": [
                            {
                              "astroMachine": "A5",
                              "id": "clmh9vsuf000908midngba9mw",
                              "isDefault": true,
                              "maxWorkerCount": 10,
                              "minWorkerCount": 1,
                              "name": "default",
                              "nodePoolId": "clmh9yjcn000a08mi8dsgbno9",
                              "podCpu": "1",
                              "podMemory": "2Gi",
                              "workerConcurrency": 20
                            }
                          ],
                          "workloadIdentity": "workloadIdentity",
                          "workspaceId": "clmh58o7d000108lb74ktc9o64",
                          "workspaceName": "my-workspace"
                        }
                      ],
                      "limit": 10,
                      "offset": 0,
                      "totalCount": 100
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "deployments": [
                          {
                            "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                            "astroRuntimeVersion": "9.1.0",
                            "cloudProvider": "AWS",
                            "clusterId": "clmh597sg000208lb2kjhcn8q",
                            "clusterName": "my cluster",
                            "contactEmails": ["contactEmails"],
                            "createdAt": "2022-11-22T04:37:12Z",
                            "createdBy": {
                              "apiTokenName": "my-token",
                              "avatarUrl": "https://avatar.url",
                              "fullName": "Jane Doe",
                              "id": "clm8qv74h000008mlf08scq7k",
                              "username": "user1@company.com"
                            },
                            "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                            "defaultTaskPodCpu": "0.5",
                            "defaultTaskPodMemory": "1Gi",
                            "description": "My deployment description",
                            "desiredDagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                            "environmentVariables": [
                              {
                                "isSecret": true,
                                "key": "my-var",
                                "updatedAt": "2022-11-22T04:37:12Z",
                                "value": "my-var-value"
                              }
                            ],
                            "executor": "CELERY",
                            "externalIPs": ["externalIPs"],
                            "id": "clmh57jtm000008lb58fe2wmv",
                            "imageRepository": "https://my-image-repository",
                            "imageTag": "my-image-tag",
                            "imageVersion": "deploy-2023-09-14T19-04",
                            "isCicdEnforced": true,
                            "isDagDeployEnabled": true,
                            "isDevelopmentMode": true,
                            "isHighAvailability": true,
                            "name": "My deployment",
                            "namespace": "weightless-diameter-8927",
                            "oidcIssuerUrl": "https://westus2.oic.prod-aks.azure.com/b84efac8-cfee-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/",
                            "organizationId": "clmh59gt0000308lbgswe5fvh",
                            "region": "us-east-1",
                            "resourceQuotaCpu": "160",
                            "resourceQuotaMemory": "320Gi",
                            "runtimeVersion": "9.1.0",
                            "schedulerAu": 5,
                            "schedulerCpu": "1",
                            "schedulerMemory": "1Gi",
                            "schedulerReplicas": 1,
                            "schedulerSize": "SMALL",
                            "status": "CREATING",
                            "statusReason": "Successfully Deployed",
                            "taskPodNodePoolId": "clmh5mash000008mia6lnbs0f",
                            "type": "DEDICATED",
                            "updatedAt": "2022-11-22T04:37:12Z",
                            "updatedBy": {
                              "apiTokenName": "my-token",
                              "avatarUrl": "https://avatar.url",
                              "fullName": "Jane Doe",
                              "id": "clm8qv74h000008mlf08scq7k",
                              "username": "user1@company.com"
                            },
                            "webServerAirflowApiUrl": "myorganization.astronomer-dev.run/d8fe2wmv/api/v1",
                            "webServerCpu": "0.5",
                            "webServerIngressHostname": "clmh597sg000208lb2kjhcn8q.astronomer.run/d8fe2wmv",
                            "webServerMemory": "0.5Gi",
                            "webServerReplicas": 1,
                            "webServerUrl": "myorganization.astronomer-dev.run/d8fe2wmv?orgId=org_edxLzpFcLrgEfpD5",
                            "workerQueues": [
                              {
                                "astroMachine": "A5",
                                "id": "clmh9vsuf000908midngba9mw",
                                "isDefault": true,
                                "maxWorkerCount": 10,
                                "minWorkerCount": 1,
                                "name": "default",
                                "nodePoolId": "clmh9yjcn000a08mi8dsgbno9",
                                "podCpu": "1",
                                "podMemory": "2Gi",
                                "workerConcurrency": 20
                              }
                            ],
                            "workloadIdentity": "workloadIdentity",
                            "workspaceId": "clmh58o7d000108lb74ktc9o64",
                            "workspaceName": "my-workspace"
                          }
                        ],
                        "limit": 10,
                        "offset": 0,
                        "totalCount": 100
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "deploymentIds": "string",
                      "names": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "deploymentIds": "string",
                      "names": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "deploymentIds": "string",
                      "names": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "deploymentIds": "string",
                      "names": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List Deployments in an Organization.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-deployment",
                "migratedFromUrlSlugs": ["create-a-deployment"],
                "method": "POST",
                "id": "CreateDeployment",
                "name": "Create a Deployment",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization in which to create the Deployment.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/deployments"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:CreateDeploymentRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Deployment"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/deployments",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "astroRuntimeVersion": "9.1.0",
                      "clusterId": "clmh9g6zj000008mg77if5wa2",
                      "defaultTaskPodCpu": "0.5",
                      "defaultTaskPodMemory": "1Gi",
                      "description": "My deployment description",
                      "environmentVariables": [
                        {
                          "isSecret": false,
                          "key": "my-var",
                          "value": "my-var-value"
                        }
                      ],
                      "executor": "CELERY",
                      "isCicdEnforced": true,
                      "isDagDeployEnabled": true,
                      "isHighAvailability": true,
                      "name": "My deployment",
                      "resourceQuotaCpu": "160",
                      "resourceQuotaMemory": "320Gi",
                      "schedulerSize": "SMALL",
                      "type": "DEDICATED",
                      "workerQueues": [
                        {
                          "astroMachine": "A5",
                          "id": "clmha1mzc000b08mi96n182au",
                          "isDefault": true,
                          "maxWorkerCount": 1,
                          "minWorkerCount": 1,
                          "name": "My worker queue",
                          "workerConcurrency": 1
                        }
                      ],
                      "workloadIdentity": "arn:aws:iam::123456789:role/AirflowS3Logs-clmk2qqia000008mhff3ndjr0",
                      "workspaceId": "clmh8ol3x000008jo656y4285"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                      "astroRuntimeVersion": "9.1.0",
                      "cloudProvider": "AWS",
                      "clusterId": "clmh597sg000208lb2kjhcn8q",
                      "clusterName": "my cluster",
                      "contactEmails": ["contactEmails"],
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                      "defaultTaskPodCpu": "0.5",
                      "defaultTaskPodMemory": "1Gi",
                      "description": "My deployment description",
                      "desiredDagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                      "environmentVariables": [
                        {
                          "isSecret": true,
                          "key": "my-var",
                          "updatedAt": "2022-11-22T04:37:12Z",
                          "value": "my-var-value"
                        }
                      ],
                      "executor": "CELERY",
                      "externalIPs": ["externalIPs"],
                      "id": "clmh57jtm000008lb58fe2wmv",
                      "imageRepository": "https://my-image-repository",
                      "imageTag": "my-image-tag",
                      "imageVersion": "deploy-2023-09-14T19-04",
                      "isCicdEnforced": true,
                      "isDagDeployEnabled": true,
                      "isDevelopmentMode": true,
                      "isHighAvailability": true,
                      "name": "My deployment",
                      "namespace": "weightless-diameter-8927",
                      "oidcIssuerUrl": "https://westus2.oic.prod-aks.azure.com/b84efac8-cfee-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/",
                      "organizationId": "clmh59gt0000308lbgswe5fvh",
                      "region": "us-east-1",
                      "resourceQuotaCpu": "160",
                      "resourceQuotaMemory": "320Gi",
                      "runtimeVersion": "9.1.0",
                      "scalingSpec": {
                        "hibernationSpec": {
                          "schedules": [
                            {
                              "hibernateAtCron": "hibernateAtCron",
                              "isEnabled": true,
                              "wakeAtCron": "wakeAtCron"
                            }
                          ]
                        }
                      },
                      "scalingStatus": {
                        "hibernationStatus": {
                          "isHibernating": true,
                          "nextEventAt": "nextEventAt",
                          "nextEventType": "HIBERNATE",
                          "reason": "reason"
                        }
                      },
                      "schedulerAu": 5,
                      "schedulerCpu": "1",
                      "schedulerMemory": "1Gi",
                      "schedulerReplicas": 1,
                      "schedulerSize": "SMALL",
                      "status": "CREATING",
                      "statusReason": "Successfully Deployed",
                      "taskPodNodePoolId": "clmh5mash000008mia6lnbs0f",
                      "type": "DEDICATED",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "webServerAirflowApiUrl": "myorganization.astronomer-dev.run/d8fe2wmv/api/v1",
                      "webServerCpu": "0.5",
                      "webServerIngressHostname": "clmh597sg000208lb2kjhcn8q.astronomer.run/d8fe2wmv",
                      "webServerMemory": "0.5Gi",
                      "webServerReplicas": 1,
                      "webServerUrl": "myorganization.astronomer-dev.run/d8fe2wmv?orgId=org_edxLzpFcLrgEfpD5",
                      "workerQueues": [
                        {
                          "astroMachine": "A5",
                          "id": "clmh9vsuf000908midngba9mw",
                          "isDefault": true,
                          "maxWorkerCount": 10,
                          "minWorkerCount": 1,
                          "name": "default",
                          "nodePoolId": "clmh9yjcn000a08mi8dsgbno9",
                          "podCpu": "1",
                          "podMemory": "2Gi",
                          "workerConcurrency": 20
                        }
                      ],
                      "workloadIdentity": "workloadIdentity",
                      "workspaceId": "clmh58o7d000108lb74ktc9o64",
                      "workspaceName": "my-workspace"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "astroRuntimeVersion": "9.1.0",
                        "clusterId": "clmh9g6zj000008mg77if5wa2",
                        "defaultTaskPodCpu": "0.5",
                        "defaultTaskPodMemory": "1Gi",
                        "description": "My deployment description",
                        "environmentVariables": [
                          {
                            "isSecret": false,
                            "key": "my-var",
                            "value": "my-var-value"
                          }
                        ],
                        "executor": "CELERY",
                        "isCicdEnforced": true,
                        "isDagDeployEnabled": true,
                        "isHighAvailability": true,
                        "name": "My deployment",
                        "resourceQuotaCpu": "160",
                        "resourceQuotaMemory": "320Gi",
                        "schedulerSize": "SMALL",
                        "type": "DEDICATED",
                        "workerQueues": [
                          {
                            "astroMachine": "A5",
                            "id": "clmha1mzc000b08mi96n182au",
                            "isDefault": true,
                            "maxWorkerCount": 1,
                            "minWorkerCount": 1,
                            "name": "My worker queue",
                            "workerConcurrency": 1
                          }
                        ],
                        "workloadIdentity": "arn:aws:iam::123456789:role/AirflowS3Logs-clmk2qqia000008mhff3ndjr0",
                        "workspaceId": "clmh8ol3x000008jo656y4285"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                        "astroRuntimeVersion": "9.1.0",
                        "cloudProvider": "AWS",
                        "clusterId": "clmh597sg000208lb2kjhcn8q",
                        "clusterName": "my cluster",
                        "contactEmails": ["contactEmails"],
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                        "defaultTaskPodCpu": "0.5",
                        "defaultTaskPodMemory": "1Gi",
                        "description": "My deployment description",
                        "desiredDagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                        "environmentVariables": [
                          {
                            "isSecret": true,
                            "key": "my-var",
                            "updatedAt": "2022-11-22T04:37:12Z",
                            "value": "my-var-value"
                          }
                        ],
                        "executor": "CELERY",
                        "externalIPs": ["externalIPs"],
                        "id": "clmh57jtm000008lb58fe2wmv",
                        "imageRepository": "https://my-image-repository",
                        "imageTag": "my-image-tag",
                        "imageVersion": "deploy-2023-09-14T19-04",
                        "isCicdEnforced": true,
                        "isDagDeployEnabled": true,
                        "isDevelopmentMode": true,
                        "isHighAvailability": true,
                        "name": "My deployment",
                        "namespace": "weightless-diameter-8927",
                        "oidcIssuerUrl": "https://westus2.oic.prod-aks.azure.com/b84efac8-cfee-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/",
                        "organizationId": "clmh59gt0000308lbgswe5fvh",
                        "region": "us-east-1",
                        "resourceQuotaCpu": "160",
                        "resourceQuotaMemory": "320Gi",
                        "runtimeVersion": "9.1.0",
                        "scalingSpec": {
                          "hibernationSpec": {
                            "schedules": [
                              {
                                "hibernateAtCron": "hibernateAtCron",
                                "isEnabled": true,
                                "wakeAtCron": "wakeAtCron"
                              }
                            ]
                          }
                        },
                        "scalingStatus": {
                          "hibernationStatus": {
                            "isHibernating": true,
                            "nextEventAt": "nextEventAt",
                            "nextEventType": "HIBERNATE",
                            "reason": "reason"
                          }
                        },
                        "schedulerAu": 5,
                        "schedulerCpu": "1",
                        "schedulerMemory": "1Gi",
                        "schedulerReplicas": 1,
                        "schedulerSize": "SMALL",
                        "status": "CREATING",
                        "statusReason": "Successfully Deployed",
                        "taskPodNodePoolId": "clmh5mash000008mia6lnbs0f",
                        "type": "DEDICATED",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "webServerAirflowApiUrl": "myorganization.astronomer-dev.run/d8fe2wmv/api/v1",
                        "webServerCpu": "0.5",
                        "webServerIngressHostname": "clmh597sg000208lb2kjhcn8q.astronomer.run/d8fe2wmv",
                        "webServerMemory": "0.5Gi",
                        "webServerReplicas": 1,
                        "webServerUrl": "myorganization.astronomer-dev.run/d8fe2wmv?orgId=org_edxLzpFcLrgEfpD5",
                        "workerQueues": [
                          {
                            "astroMachine": "A5",
                            "id": "clmh9vsuf000908midngba9mw",
                            "isDefault": true,
                            "maxWorkerCount": 10,
                            "minWorkerCount": 1,
                            "name": "default",
                            "nodePoolId": "clmh9yjcn000a08mi8dsgbno9",
                            "podCpu": "1",
                            "podMemory": "2Gi",
                            "workerConcurrency": 20
                          }
                        ],
                        "workloadIdentity": "workloadIdentity",
                        "workspaceId": "clmh58o7d000108lb74ktc9o64",
                        "workspaceName": "my-workspace"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "astroRuntimeVersion": "string",
                        "clusterId": "string",
                        "defaultTaskPodCpu": "string",
                        "defaultTaskPodMemory": "string",
                        "executor": "CELERY",
                        "isCicdEnforced": true,
                        "isDagDeployEnabled": true,
                        "isHighAvailability": true,
                        "name": "string",
                        "resourceQuotaCpu": "string",
                        "resourceQuotaMemory": "string",
                        "schedulerSize": "SMALL",
                        "type": "DEDICATED",
                        "workspaceId": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "astroRuntimeVersion": "string",
                        "clusterId": "string",
                        "defaultTaskPodCpu": "string",
                        "defaultTaskPodMemory": "string",
                        "executor": "CELERY",
                        "isCicdEnforced": true,
                        "isDagDeployEnabled": true,
                        "isHighAvailability": true,
                        "name": "string",
                        "resourceQuotaCpu": "string",
                        "resourceQuotaMemory": "string",
                        "schedulerSize": "SMALL",
                        "type": "DEDICATED",
                        "workspaceId": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "astroRuntimeVersion": "string",
                        "clusterId": "string",
                        "defaultTaskPodCpu": "string",
                        "defaultTaskPodMemory": "string",
                        "executor": "CELERY",
                        "isCicdEnforced": true,
                        "isDagDeployEnabled": true,
                        "isHighAvailability": true,
                        "name": "string",
                        "resourceQuotaCpu": "string",
                        "resourceQuotaMemory": "string",
                        "schedulerSize": "SMALL",
                        "type": "DEDICATED",
                        "workspaceId": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "astroRuntimeVersion": "string",
                        "clusterId": "string",
                        "defaultTaskPodCpu": "string",
                        "defaultTaskPodMemory": "string",
                        "executor": "CELERY",
                        "isCicdEnforced": true,
                        "isDagDeployEnabled": true,
                        "isHighAvailability": true,
                        "name": "string",
                        "resourceQuotaCpu": "string",
                        "resourceQuotaMemory": "string",
                        "schedulerSize": "SMALL",
                        "type": "DEDICATED",
                        "workspaceId": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a Deployment in the Organization. An Astro Deployment is an Airflow environment that is powered by all core Airflow components.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-deployment",
                "migratedFromUrlSlugs": ["get-a-deployment"],
                "method": "GET",
                "id": "GetDeployment",
                "name": "Get a Deployment",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the Deployment belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deployment's ID.",
                      "key": "deploymentId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deploymentId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Deployment"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/deployments/deploymentId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "deploymentId": "deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                      "astroRuntimeVersion": "9.1.0",
                      "cloudProvider": "AWS",
                      "clusterId": "clmh597sg000208lb2kjhcn8q",
                      "clusterName": "my cluster",
                      "contactEmails": ["contactEmails"],
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                      "defaultTaskPodCpu": "0.5",
                      "defaultTaskPodMemory": "1Gi",
                      "description": "My deployment description",
                      "desiredDagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                      "environmentVariables": [
                        {
                          "isSecret": true,
                          "key": "my-var",
                          "updatedAt": "2022-11-22T04:37:12Z",
                          "value": "my-var-value"
                        }
                      ],
                      "executor": "CELERY",
                      "externalIPs": ["externalIPs"],
                      "id": "clmh57jtm000008lb58fe2wmv",
                      "imageRepository": "https://my-image-repository",
                      "imageTag": "my-image-tag",
                      "imageVersion": "deploy-2023-09-14T19-04",
                      "isCicdEnforced": true,
                      "isDagDeployEnabled": true,
                      "isDevelopmentMode": true,
                      "isHighAvailability": true,
                      "name": "My deployment",
                      "namespace": "weightless-diameter-8927",
                      "oidcIssuerUrl": "https://westus2.oic.prod-aks.azure.com/b84efac8-cfee-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/",
                      "organizationId": "clmh59gt0000308lbgswe5fvh",
                      "region": "us-east-1",
                      "resourceQuotaCpu": "160",
                      "resourceQuotaMemory": "320Gi",
                      "runtimeVersion": "9.1.0",
                      "scalingSpec": {
                        "hibernationSpec": {
                          "schedules": [
                            {
                              "hibernateAtCron": "hibernateAtCron",
                              "isEnabled": true,
                              "wakeAtCron": "wakeAtCron"
                            }
                          ]
                        }
                      },
                      "scalingStatus": {
                        "hibernationStatus": {
                          "isHibernating": true,
                          "nextEventAt": "nextEventAt",
                          "nextEventType": "HIBERNATE",
                          "reason": "reason"
                        }
                      },
                      "schedulerAu": 5,
                      "schedulerCpu": "1",
                      "schedulerMemory": "1Gi",
                      "schedulerReplicas": 1,
                      "schedulerSize": "SMALL",
                      "status": "CREATING",
                      "statusReason": "Successfully Deployed",
                      "taskPodNodePoolId": "clmh5mash000008mia6lnbs0f",
                      "type": "DEDICATED",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "webServerAirflowApiUrl": "myorganization.astronomer-dev.run/d8fe2wmv/api/v1",
                      "webServerCpu": "0.5",
                      "webServerIngressHostname": "clmh597sg000208lb2kjhcn8q.astronomer.run/d8fe2wmv",
                      "webServerMemory": "0.5Gi",
                      "webServerReplicas": 1,
                      "webServerUrl": "myorganization.astronomer-dev.run/d8fe2wmv?orgId=org_edxLzpFcLrgEfpD5",
                      "workerQueues": [
                        {
                          "astroMachine": "A5",
                          "id": "clmh9vsuf000908midngba9mw",
                          "isDefault": true,
                          "maxWorkerCount": 10,
                          "minWorkerCount": 1,
                          "name": "default",
                          "nodePoolId": "clmh9yjcn000a08mi8dsgbno9",
                          "podCpu": "1",
                          "podMemory": "2Gi",
                          "workerConcurrency": 20
                        }
                      ],
                      "workloadIdentity": "workloadIdentity",
                      "workspaceId": "clmh58o7d000108lb74ktc9o64",
                      "workspaceName": "my-workspace"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                        "astroRuntimeVersion": "9.1.0",
                        "cloudProvider": "AWS",
                        "clusterId": "clmh597sg000208lb2kjhcn8q",
                        "clusterName": "my cluster",
                        "contactEmails": ["contactEmails"],
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                        "defaultTaskPodCpu": "0.5",
                        "defaultTaskPodMemory": "1Gi",
                        "description": "My deployment description",
                        "desiredDagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                        "environmentVariables": [
                          {
                            "isSecret": true,
                            "key": "my-var",
                            "updatedAt": "2022-11-22T04:37:12Z",
                            "value": "my-var-value"
                          }
                        ],
                        "executor": "CELERY",
                        "externalIPs": ["externalIPs"],
                        "id": "clmh57jtm000008lb58fe2wmv",
                        "imageRepository": "https://my-image-repository",
                        "imageTag": "my-image-tag",
                        "imageVersion": "deploy-2023-09-14T19-04",
                        "isCicdEnforced": true,
                        "isDagDeployEnabled": true,
                        "isDevelopmentMode": true,
                        "isHighAvailability": true,
                        "name": "My deployment",
                        "namespace": "weightless-diameter-8927",
                        "oidcIssuerUrl": "https://westus2.oic.prod-aks.azure.com/b84efac8-cfee-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/",
                        "organizationId": "clmh59gt0000308lbgswe5fvh",
                        "region": "us-east-1",
                        "resourceQuotaCpu": "160",
                        "resourceQuotaMemory": "320Gi",
                        "runtimeVersion": "9.1.0",
                        "scalingSpec": {
                          "hibernationSpec": {
                            "schedules": [
                              {
                                "hibernateAtCron": "hibernateAtCron",
                                "isEnabled": true,
                                "wakeAtCron": "wakeAtCron"
                              }
                            ]
                          }
                        },
                        "scalingStatus": {
                          "hibernationStatus": {
                            "isHibernating": true,
                            "nextEventAt": "nextEventAt",
                            "nextEventType": "HIBERNATE",
                            "reason": "reason"
                          }
                        },
                        "schedulerAu": 5,
                        "schedulerCpu": "1",
                        "schedulerMemory": "1Gi",
                        "schedulerReplicas": 1,
                        "schedulerSize": "SMALL",
                        "status": "CREATING",
                        "statusReason": "Successfully Deployed",
                        "taskPodNodePoolId": "clmh5mash000008mia6lnbs0f",
                        "type": "DEDICATED",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "webServerAirflowApiUrl": "myorganization.astronomer-dev.run/d8fe2wmv/api/v1",
                        "webServerCpu": "0.5",
                        "webServerIngressHostname": "clmh597sg000208lb2kjhcn8q.astronomer.run/d8fe2wmv",
                        "webServerMemory": "0.5Gi",
                        "webServerReplicas": 1,
                        "webServerUrl": "myorganization.astronomer-dev.run/d8fe2wmv?orgId=org_edxLzpFcLrgEfpD5",
                        "workerQueues": [
                          {
                            "astroMachine": "A5",
                            "id": "clmh9vsuf000908midngba9mw",
                            "isDefault": true,
                            "maxWorkerCount": 10,
                            "minWorkerCount": 1,
                            "name": "default",
                            "nodePoolId": "clmh9yjcn000a08mi8dsgbno9",
                            "podCpu": "1",
                            "podMemory": "2Gi",
                            "workerConcurrency": 20
                          }
                        ],
                        "workloadIdentity": "workloadIdentity",
                        "workspaceId": "clmh58o7d000108lb74ktc9o64",
                        "workspaceName": "my-workspace"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Retrieve details about a Deployment.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-deployment",
                "migratedFromUrlSlugs": ["update-a-deployment"],
                "method": "POST",
                "id": "UpdateDeployment",
                "name": "Update a Deployment",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the Deployment belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deployment's ID.",
                      "key": "deploymentId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deploymentId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:UpdateDeploymentRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Deployment"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/deployments/deploymentId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "deploymentId": "deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "defaultTaskPodCpu": "0.5",
                      "defaultTaskPodMemory": "1Gi",
                      "description": "My deployment description",
                      "environmentVariables": [
                        {
                          "isSecret": false,
                          "key": "my-var",
                          "value": "my-var-value"
                        }
                      ],
                      "executor": "CELERY",
                      "isCicdEnforced": true,
                      "isDagDeployEnabled": true,
                      "isHighAvailability": true,
                      "name": "My deployment",
                      "resourceQuotaCpu": "160",
                      "resourceQuotaMemory": "320Gi",
                      "schedulerSize": "SMALL",
                      "type": "DEDICATED",
                      "workerQueues": [
                        {
                          "astroMachine": "A5",
                          "id": "clmha1mzc000b08mi96n182au",
                          "isDefault": true,
                          "maxWorkerCount": 1,
                          "minWorkerCount": 1,
                          "name": "My worker queue",
                          "workerConcurrency": 1
                        }
                      ],
                      "workloadIdentity": "arn:aws:iam::123456789:role/AirflowS3Logs-clmk2qqia000008mhff3ndjr0",
                      "workspaceId": "clmh7vdf4000008lhhlnk9t6o"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                      "astroRuntimeVersion": "9.1.0",
                      "cloudProvider": "AWS",
                      "clusterId": "clmh597sg000208lb2kjhcn8q",
                      "clusterName": "my cluster",
                      "contactEmails": ["contactEmails"],
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                      "defaultTaskPodCpu": "0.5",
                      "defaultTaskPodMemory": "1Gi",
                      "description": "My deployment description",
                      "desiredDagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                      "environmentVariables": [
                        {
                          "isSecret": true,
                          "key": "my-var",
                          "updatedAt": "2022-11-22T04:37:12Z",
                          "value": "my-var-value"
                        }
                      ],
                      "executor": "CELERY",
                      "externalIPs": ["externalIPs"],
                      "id": "clmh57jtm000008lb58fe2wmv",
                      "imageRepository": "https://my-image-repository",
                      "imageTag": "my-image-tag",
                      "imageVersion": "deploy-2023-09-14T19-04",
                      "isCicdEnforced": true,
                      "isDagDeployEnabled": true,
                      "isDevelopmentMode": true,
                      "isHighAvailability": true,
                      "name": "My deployment",
                      "namespace": "weightless-diameter-8927",
                      "oidcIssuerUrl": "https://westus2.oic.prod-aks.azure.com/b84efac8-cfee-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/",
                      "organizationId": "clmh59gt0000308lbgswe5fvh",
                      "region": "us-east-1",
                      "resourceQuotaCpu": "160",
                      "resourceQuotaMemory": "320Gi",
                      "runtimeVersion": "9.1.0",
                      "scalingSpec": {
                        "hibernationSpec": {
                          "schedules": [
                            {
                              "hibernateAtCron": "hibernateAtCron",
                              "isEnabled": true,
                              "wakeAtCron": "wakeAtCron"
                            }
                          ]
                        }
                      },
                      "scalingStatus": {
                        "hibernationStatus": {
                          "isHibernating": true,
                          "nextEventAt": "nextEventAt",
                          "nextEventType": "HIBERNATE",
                          "reason": "reason"
                        }
                      },
                      "schedulerAu": 5,
                      "schedulerCpu": "1",
                      "schedulerMemory": "1Gi",
                      "schedulerReplicas": 1,
                      "schedulerSize": "SMALL",
                      "status": "CREATING",
                      "statusReason": "Successfully Deployed",
                      "taskPodNodePoolId": "clmh5mash000008mia6lnbs0f",
                      "type": "DEDICATED",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "webServerAirflowApiUrl": "myorganization.astronomer-dev.run/d8fe2wmv/api/v1",
                      "webServerCpu": "0.5",
                      "webServerIngressHostname": "clmh597sg000208lb2kjhcn8q.astronomer.run/d8fe2wmv",
                      "webServerMemory": "0.5Gi",
                      "webServerReplicas": 1,
                      "webServerUrl": "myorganization.astronomer-dev.run/d8fe2wmv?orgId=org_edxLzpFcLrgEfpD5",
                      "workerQueues": [
                        {
                          "astroMachine": "A5",
                          "id": "clmh9vsuf000908midngba9mw",
                          "isDefault": true,
                          "maxWorkerCount": 10,
                          "minWorkerCount": 1,
                          "name": "default",
                          "nodePoolId": "clmh9yjcn000a08mi8dsgbno9",
                          "podCpu": "1",
                          "podMemory": "2Gi",
                          "workerConcurrency": 20
                        }
                      ],
                      "workloadIdentity": "workloadIdentity",
                      "workspaceId": "clmh58o7d000108lb74ktc9o64",
                      "workspaceName": "my-workspace"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "defaultTaskPodCpu": "0.5",
                        "defaultTaskPodMemory": "1Gi",
                        "description": "My deployment description",
                        "environmentVariables": [
                          {
                            "isSecret": false,
                            "key": "my-var",
                            "value": "my-var-value"
                          }
                        ],
                        "executor": "CELERY",
                        "isCicdEnforced": true,
                        "isDagDeployEnabled": true,
                        "isHighAvailability": true,
                        "name": "My deployment",
                        "resourceQuotaCpu": "160",
                        "resourceQuotaMemory": "320Gi",
                        "schedulerSize": "SMALL",
                        "type": "DEDICATED",
                        "workerQueues": [
                          {
                            "astroMachine": "A5",
                            "id": "clmha1mzc000b08mi96n182au",
                            "isDefault": true,
                            "maxWorkerCount": 1,
                            "minWorkerCount": 1,
                            "name": "My worker queue",
                            "workerConcurrency": 1
                          }
                        ],
                        "workloadIdentity": "arn:aws:iam::123456789:role/AirflowS3Logs-clmk2qqia000008mhff3ndjr0",
                        "workspaceId": "clmh7vdf4000008lhhlnk9t6o"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                        "astroRuntimeVersion": "9.1.0",
                        "cloudProvider": "AWS",
                        "clusterId": "clmh597sg000208lb2kjhcn8q",
                        "clusterName": "my cluster",
                        "contactEmails": ["contactEmails"],
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                        "defaultTaskPodCpu": "0.5",
                        "defaultTaskPodMemory": "1Gi",
                        "description": "My deployment description",
                        "desiredDagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                        "environmentVariables": [
                          {
                            "isSecret": true,
                            "key": "my-var",
                            "updatedAt": "2022-11-22T04:37:12Z",
                            "value": "my-var-value"
                          }
                        ],
                        "executor": "CELERY",
                        "externalIPs": ["externalIPs"],
                        "id": "clmh57jtm000008lb58fe2wmv",
                        "imageRepository": "https://my-image-repository",
                        "imageTag": "my-image-tag",
                        "imageVersion": "deploy-2023-09-14T19-04",
                        "isCicdEnforced": true,
                        "isDagDeployEnabled": true,
                        "isDevelopmentMode": true,
                        "isHighAvailability": true,
                        "name": "My deployment",
                        "namespace": "weightless-diameter-8927",
                        "oidcIssuerUrl": "https://westus2.oic.prod-aks.azure.com/b84efac8-cfee-467a-b223-23b9aea1486d/3075f79e-abc2-4602-a691-28117197e83d/",
                        "organizationId": "clmh59gt0000308lbgswe5fvh",
                        "region": "us-east-1",
                        "resourceQuotaCpu": "160",
                        "resourceQuotaMemory": "320Gi",
                        "runtimeVersion": "9.1.0",
                        "scalingSpec": {
                          "hibernationSpec": {
                            "schedules": [
                              {
                                "hibernateAtCron": "hibernateAtCron",
                                "isEnabled": true,
                                "wakeAtCron": "wakeAtCron"
                              }
                            ]
                          }
                        },
                        "scalingStatus": {
                          "hibernationStatus": {
                            "isHibernating": true,
                            "nextEventAt": "nextEventAt",
                            "nextEventType": "HIBERNATE",
                            "reason": "reason"
                          }
                        },
                        "schedulerAu": 5,
                        "schedulerCpu": "1",
                        "schedulerMemory": "1Gi",
                        "schedulerReplicas": 1,
                        "schedulerSize": "SMALL",
                        "status": "CREATING",
                        "statusReason": "Successfully Deployed",
                        "taskPodNodePoolId": "clmh5mash000008mia6lnbs0f",
                        "type": "DEDICATED",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "webServerAirflowApiUrl": "myorganization.astronomer-dev.run/d8fe2wmv/api/v1",
                        "webServerCpu": "0.5",
                        "webServerIngressHostname": "clmh597sg000208lb2kjhcn8q.astronomer.run/d8fe2wmv",
                        "webServerMemory": "0.5Gi",
                        "webServerReplicas": 1,
                        "webServerUrl": "myorganization.astronomer-dev.run/d8fe2wmv?orgId=org_edxLzpFcLrgEfpD5",
                        "workerQueues": [
                          {
                            "astroMachine": "A5",
                            "id": "clmh9vsuf000908midngba9mw",
                            "isDefault": true,
                            "maxWorkerCount": 10,
                            "minWorkerCount": 1,
                            "name": "default",
                            "nodePoolId": "clmh9yjcn000a08mi8dsgbno9",
                            "podCpu": "1",
                            "podMemory": "2Gi",
                            "workerConcurrency": 20
                          }
                        ],
                        "workloadIdentity": "workloadIdentity",
                        "workspaceId": "clmh58o7d000108lb74ktc9o64",
                        "workspaceName": "my-workspace"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "defaultTaskPodCpu": "string",
                        "defaultTaskPodMemory": "string",
                        "environmentVariables": [
                          {
                            "isSecret": true,
                            "key": "string"
                          }
                        ],
                        "executor": "CELERY",
                        "isCicdEnforced": true,
                        "isDagDeployEnabled": true,
                        "isHighAvailability": true,
                        "name": "string",
                        "resourceQuotaCpu": "string",
                        "resourceQuotaMemory": "string",
                        "schedulerSize": "SMALL",
                        "type": "DEDICATED",
                        "workspaceId": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "defaultTaskPodCpu": "string",
                        "defaultTaskPodMemory": "string",
                        "environmentVariables": [
                          {
                            "isSecret": true,
                            "key": "string"
                          }
                        ],
                        "executor": "CELERY",
                        "isCicdEnforced": true,
                        "isDagDeployEnabled": true,
                        "isHighAvailability": true,
                        "name": "string",
                        "resourceQuotaCpu": "string",
                        "resourceQuotaMemory": "string",
                        "schedulerSize": "SMALL",
                        "type": "DEDICATED",
                        "workspaceId": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "defaultTaskPodCpu": "string",
                        "defaultTaskPodMemory": "string",
                        "environmentVariables": [
                          {
                            "isSecret": true,
                            "key": "string"
                          }
                        ],
                        "executor": "CELERY",
                        "isCicdEnforced": true,
                        "isDagDeployEnabled": true,
                        "isHighAvailability": true,
                        "name": "string",
                        "resourceQuotaCpu": "string",
                        "resourceQuotaMemory": "string",
                        "schedulerSize": "SMALL",
                        "type": "DEDICATED",
                        "workspaceId": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "defaultTaskPodCpu": "string",
                        "defaultTaskPodMemory": "string",
                        "environmentVariables": [
                          {
                            "isSecret": true,
                            "key": "string"
                          }
                        ],
                        "executor": "CELERY",
                        "isCicdEnforced": true,
                        "isDagDeployEnabled": true,
                        "isHighAvailability": true,
                        "name": "string",
                        "resourceQuotaCpu": "string",
                        "resourceQuotaMemory": "string",
                        "schedulerSize": "SMALL",
                        "type": "DEDICATED",
                        "workspaceId": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "defaultTaskPodCpu": "string",
                        "defaultTaskPodMemory": "string",
                        "environmentVariables": [
                          {
                            "isSecret": true,
                            "key": "string"
                          }
                        ],
                        "executor": "CELERY",
                        "isCicdEnforced": true,
                        "isDagDeployEnabled": true,
                        "isHighAvailability": true,
                        "name": "string",
                        "resourceQuotaCpu": "string",
                        "resourceQuotaMemory": "string",
                        "schedulerSize": "SMALL",
                        "type": "DEDICATED",
                        "workspaceId": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update a Deployment in the Organization.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-deployment",
                "migratedFromUrlSlugs": ["delete-a-deployment"],
                "method": "DELETE",
                "id": "DeleteDeployment",
                "name": "Delete a Deployment",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the Deployment belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deployment's ID.",
                      "key": "deploymentId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deploymentId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/deployments/deploymentId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "deploymentId": "deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete a Deployment from an Organization.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-deployment-hibernation-override",
                "migratedFromUrlSlugs": ["configure-a-hibernation-override-for-a-deployment"],
                "method": "POST",
                "id": "UpdateDeploymentHibernationOverride",
                "name": "Configure a hibernation override for a deployment",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The Organization ID",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deployment ID",
                      "key": "deploymentId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deploymentId"
                    },
                    {
                      "type": "literal",
                      "value": "/hibernation-override"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The type of override to perform. Set this value to 'true' to have the Deployment hibernate regardless of its hibernation schedule. Set the value to 'false' to have the Deployment wake up regardless of its hibernation schedule. Use 'OverrideUntil' to define the length of the override.",
                        "key": "isHibernating",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "boolean"
                          }
                        }
                      },
                      {
                        "description": "The end of the override time in UTC, formatted as 'YYYY-MM-DDTHH:MM:SSZ'. If this value isn't specified, the override persists until you end it through the Astro UI or another API call.",
                        "key": "overrideUntil",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "datetime"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DeploymentHibernationOverride"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/organizations/organizationId/deployments/deploymentId/hibernation-override",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "deploymentId": "deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "isHibernating": true
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "isActive": true,
                      "isHibernating": true,
                      "overrideUntil": "2024-01-15T09:30:00Z"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "isHibernating": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "isActive": true,
                        "isHibernating": true,
                        "overrideUntil": "2024-01-15T09:30:00Z"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-deployment-hibernation-override",
                "migratedFromUrlSlugs": ["delete-a-hibernation-override-for-a-deployment"],
                "method": "DELETE",
                "id": "DeleteDeploymentHibernationOverride",
                "name": "Delete a hibernation override for a deployment",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The Organization ID",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deployment ID",
                      "key": "deploymentId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deploymentId"
                    },
                    {
                      "type": "literal",
                      "value": "/hibernation-override"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/organizations/organizationId/deployments/deploymentId/hibernation-override",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "deploymentId": "deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              }
            ],
            "types": ["type_deployment:ListDeploymentsRequestSortsItem"],
            "subpackages": [],
            "urlSlug": "deployment",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_deploy": {
            "subpackageId": "subpackage_deploy",
            "name": "deploy",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-deploys",
                "migratedFromUrlSlugs": ["list-deploys-for-a-deployment"],
                "method": "GET",
                "id": "ListDeploys",
                "name": "List deploys for a deployment",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the Deployment belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deployment's ID.",
                      "key": "deploymentId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deploymentId"
                    },
                    {
                      "type": "literal",
                      "value": "/deploys"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The number of results to skip before returning values.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The maximum number of results to return.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DeploysPaginated"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/deployments/deploymentId/deploys",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "deploymentId": "deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "deploys": [
                        {
                          "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                          "astroRuntimeVersion": "9.1.0",
                          "createdAt": "2022-11-22T04:37:12Z",
                          "createdBySubject": {
                            "apiTokenName": "my-token",
                            "avatarUrl": "https://avatar.url",
                            "fullName": "Jane Doe",
                            "id": "clm8qv74h000008mlf08scq7k",
                            "username": "user1@company.com"
                          },
                          "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                          "dagsUploadUrl": "https://astroproddagdeploy.windows.core.net/clmh59gt0000308lbgswe5fvh/clmh57jtm000008lb58fe2wmv",
                          "deploymentId": "clmh57jtm000008lb58fe2wmv",
                          "description": "My deploy description",
                          "id": "clvetru2w000201mowqwua63n",
                          "imageRepository": "https://my-image-repository",
                          "imageTag": "my-image-tag",
                          "isDagDeployEnabled": true,
                          "rollbackFromId": "clvcz1lrq000101oitxtp276e",
                          "status": "INITIALIZED",
                          "type": "IMAGE_AND_DAG",
                          "updatedAt": "2022-11-22T04:37:12Z",
                          "updatedBySubject": {
                            "apiTokenName": "my-token",
                            "avatarUrl": "https://avatar.url",
                            "fullName": "Jane Doe",
                            "id": "clm8qv74h000008mlf08scq7k",
                            "username": "user1@company.com"
                          }
                        }
                      ],
                      "limit": 1,
                      "offset": 1,
                      "totalCount": 1
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "deploys": [
                          {
                            "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                            "astroRuntimeVersion": "9.1.0",
                            "createdAt": "2022-11-22T04:37:12Z",
                            "createdBySubject": {
                              "apiTokenName": "my-token",
                              "avatarUrl": "https://avatar.url",
                              "fullName": "Jane Doe",
                              "id": "clm8qv74h000008mlf08scq7k",
                              "username": "user1@company.com"
                            },
                            "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                            "dagsUploadUrl": "https://astroproddagdeploy.windows.core.net/clmh59gt0000308lbgswe5fvh/clmh57jtm000008lb58fe2wmv",
                            "deploymentId": "clmh57jtm000008lb58fe2wmv",
                            "description": "My deploy description",
                            "id": "clvetru2w000201mowqwua63n",
                            "imageRepository": "https://my-image-repository",
                            "imageTag": "my-image-tag",
                            "isDagDeployEnabled": true,
                            "rollbackFromId": "clvcz1lrq000101oitxtp276e",
                            "status": "INITIALIZED",
                            "type": "IMAGE_AND_DAG",
                            "updatedAt": "2022-11-22T04:37:12Z",
                            "updatedBySubject": {
                              "apiTokenName": "my-token",
                              "avatarUrl": "https://avatar.url",
                              "fullName": "Jane Doe",
                              "id": "clm8qv74h000008mlf08scq7k",
                              "username": "user1@company.com"
                            }
                          }
                        ],
                        "limit": 1,
                        "offset": 1,
                        "totalCount": 1
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {
                      "offset": 0,
                      "limit": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {
                      "offset": 0,
                      "limit": 0
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {
                      "offset": 0,
                      "limit": 0
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {
                      "offset": 0,
                      "limit": 0
                    },
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {
                      "offset": 0,
                      "limit": 0
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List deploys for a deployment",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-deploy",
                "migratedFromUrlSlugs": ["create-a-deploy"],
                "method": "POST",
                "id": "CreateDeploy",
                "name": "Create a Deploy",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization in which to create the Deployment.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deployment's ID.",
                      "key": "deploymentId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deploymentId"
                    },
                    {
                      "type": "literal",
                      "value": "/deploys"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The deploy's description.",
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The type of the deploy.",
                        "key": "type",
                        "valueType": {
                          "type": "id",
                          "value": "type_deploy:CreateDeployRequestType"
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Deploy"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/deployments/deploymentId/deploys",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "deploymentId": "deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "description": "My deploy description",
                      "type": "IMAGE_AND_DAG"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                      "astroRuntimeVersion": "9.1.0",
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBySubject": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                      "dagsUploadUrl": "https://astroproddagdeploy.windows.core.net/clmh59gt0000308lbgswe5fvh/clmh57jtm000008lb58fe2wmv",
                      "deploymentId": "clmh57jtm000008lb58fe2wmv",
                      "description": "My deploy description",
                      "id": "clvetru2w000201mowqwua63n",
                      "imageRepository": "https://my-image-repository",
                      "imageTag": "my-image-tag",
                      "isDagDeployEnabled": true,
                      "rollbackFromId": "clvcz1lrq000101oitxtp276e",
                      "status": "INITIALIZED",
                      "type": "IMAGE_AND_DAG",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBySubject": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "description": "My deploy description",
                        "type": "IMAGE_AND_DAG"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                        "astroRuntimeVersion": "9.1.0",
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBySubject": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                        "dagsUploadUrl": "https://astroproddagdeploy.windows.core.net/clmh59gt0000308lbgswe5fvh/clmh57jtm000008lb58fe2wmv",
                        "deploymentId": "clmh57jtm000008lb58fe2wmv",
                        "description": "My deploy description",
                        "id": "clvetru2w000201mowqwua63n",
                        "imageRepository": "https://my-image-repository",
                        "imageTag": "my-image-tag",
                        "isDagDeployEnabled": true,
                        "rollbackFromId": "clvcz1lrq000101oitxtp276e",
                        "status": "INITIALIZED",
                        "type": "IMAGE_AND_DAG",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBySubject": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "type": "IMAGE_AND_DAG"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "type": "IMAGE_AND_DAG"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "type": "IMAGE_AND_DAG"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "type": "IMAGE_AND_DAG"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "type": "IMAGE_AND_DAG"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a new Deploy. A Deploy represents an intent to deploy new DAG code to an Astro Deployment.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-deploy",
                "migratedFromUrlSlugs": ["get-a-deploy-for-a-deployment"],
                "method": "GET",
                "id": "GetDeploy",
                "name": "Get a deploy for a deployment",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization in which to create the Deployment.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deployment's ID.",
                      "key": "deploymentId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deploy's ID.",
                      "key": "deployId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deploymentId"
                    },
                    {
                      "type": "literal",
                      "value": "/deploys/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deployId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Deploy"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/deployments/deploymentId/deploys/deployId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "deploymentId": "deploymentId",
                      "deployId": "deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                      "astroRuntimeVersion": "9.1.0",
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBySubject": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                      "dagsUploadUrl": "https://astroproddagdeploy.windows.core.net/clmh59gt0000308lbgswe5fvh/clmh57jtm000008lb58fe2wmv",
                      "deploymentId": "clmh57jtm000008lb58fe2wmv",
                      "description": "My deploy description",
                      "id": "clvetru2w000201mowqwua63n",
                      "imageRepository": "https://my-image-repository",
                      "imageTag": "my-image-tag",
                      "isDagDeployEnabled": true,
                      "rollbackFromId": "clvcz1lrq000101oitxtp276e",
                      "status": "INITIALIZED",
                      "type": "IMAGE_AND_DAG",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBySubject": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                        "astroRuntimeVersion": "9.1.0",
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBySubject": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                        "dagsUploadUrl": "https://astroproddagdeploy.windows.core.net/clmh59gt0000308lbgswe5fvh/clmh57jtm000008lb58fe2wmv",
                        "deploymentId": "clmh57jtm000008lb58fe2wmv",
                        "description": "My deploy description",
                        "id": "clvetru2w000201mowqwua63n",
                        "imageRepository": "https://my-image-repository",
                        "imageTag": "my-image-tag",
                        "isDagDeployEnabled": true,
                        "rollbackFromId": "clvcz1lrq000101oitxtp276e",
                        "status": "INITIALIZED",
                        "type": "IMAGE_AND_DAG",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBySubject": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get a deploy for a deployment",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-deploy",
                "migratedFromUrlSlugs": ["update-a-deploy"],
                "method": "POST",
                "id": "UpdateDeploy",
                "name": "Update a Deploy",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization in which to create the Deployment.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deployment's ID.",
                      "key": "deploymentId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deploy's ID.",
                      "key": "deployId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deploymentId"
                    },
                    {
                      "type": "literal",
                      "value": "/deploys/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deployId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The deploy's description.",
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Deploy"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/deployments/deploymentId/deploys/deployId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "deploymentId": "deploymentId",
                      "deployId": "deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "description": "My deploy description"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                      "astroRuntimeVersion": "9.1.0",
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBySubject": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                      "dagsUploadUrl": "https://astroproddagdeploy.windows.core.net/clmh59gt0000308lbgswe5fvh/clmh57jtm000008lb58fe2wmv",
                      "deploymentId": "clmh57jtm000008lb58fe2wmv",
                      "description": "My deploy description",
                      "id": "clvetru2w000201mowqwua63n",
                      "imageRepository": "https://my-image-repository",
                      "imageTag": "my-image-tag",
                      "isDagDeployEnabled": true,
                      "rollbackFromId": "clvcz1lrq000101oitxtp276e",
                      "status": "INITIALIZED",
                      "type": "IMAGE_AND_DAG",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBySubject": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "description": "My deploy description"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                        "astroRuntimeVersion": "9.1.0",
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBySubject": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                        "dagsUploadUrl": "https://astroproddagdeploy.windows.core.net/clmh59gt0000308lbgswe5fvh/clmh57jtm000008lb58fe2wmv",
                        "deploymentId": "clmh57jtm000008lb58fe2wmv",
                        "description": "My deploy description",
                        "id": "clvetru2w000201mowqwua63n",
                        "imageRepository": "https://my-image-repository",
                        "imageTag": "my-image-tag",
                        "isDagDeployEnabled": true,
                        "rollbackFromId": "clvcz1lrq000101oitxtp276e",
                        "status": "INITIALIZED",
                        "type": "IMAGE_AND_DAG",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBySubject": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update an existing Deploy. A Deploy represents an intent to deploy new DAG code to an Astro Deployment.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "finalize-deploy",
                "migratedFromUrlSlugs": ["finalize-deploy-of-a-deployment"],
                "method": "POST",
                "id": "FinalizeDeploy",
                "name": "Finalize deploy of a deployment",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization in which to create the Deployment.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deployment's ID.",
                      "key": "deploymentId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deploy's ID.",
                      "key": "deployId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deploymentId"
                    },
                    {
                      "type": "literal",
                      "value": "/deploys/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deployId"
                    },
                    {
                      "type": "literal",
                      "value": "/finalize"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The deploy's DAG tarball version, also known as the Bundle Version in the Astro UI. Required if DAG deploys are enabled on the Deployment, and deploy type is either IMAGE_AND_DAG or DAG_ONLY.",
                        "key": "dagTarballVersion",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Deploy"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/deployments/deploymentId/deploys/deployId/finalize",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "deploymentId": "deploymentId",
                      "deployId": "deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                      "astroRuntimeVersion": "9.1.0",
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBySubject": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                      "dagsUploadUrl": "https://astroproddagdeploy.windows.core.net/clmh59gt0000308lbgswe5fvh/clmh57jtm000008lb58fe2wmv",
                      "deploymentId": "clmh57jtm000008lb58fe2wmv",
                      "description": "My deploy description",
                      "id": "clvetru2w000201mowqwua63n",
                      "imageRepository": "https://my-image-repository",
                      "imageTag": "my-image-tag",
                      "isDagDeployEnabled": true,
                      "rollbackFromId": "clvcz1lrq000101oitxtp276e",
                      "status": "INITIALIZED",
                      "type": "IMAGE_AND_DAG",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBySubject": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                        "astroRuntimeVersion": "9.1.0",
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBySubject": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                        "dagsUploadUrl": "https://astroproddagdeploy.windows.core.net/clmh59gt0000308lbgswe5fvh/clmh57jtm000008lb58fe2wmv",
                        "deploymentId": "clmh57jtm000008lb58fe2wmv",
                        "description": "My deploy description",
                        "id": "clvetru2w000201mowqwua63n",
                        "imageRepository": "https://my-image-repository",
                        "imageTag": "my-image-tag",
                        "isDagDeployEnabled": true,
                        "rollbackFromId": "clvcz1lrq000101oitxtp276e",
                        "status": "INITIALIZED",
                        "type": "IMAGE_AND_DAG",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBySubject": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId/finalize",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId/finalize",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId/finalize",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId/finalize",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Finalize deploy of a deployment",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "deploy-rollback",
                "migratedFromUrlSlugs": ["deploy-rollback-of-a-deployment"],
                "method": "POST",
                "id": "DeployRollback",
                "name": "Deploy rollback of a deployment",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization in which to create the Deployment.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deployment's ID.",
                      "key": "deploymentId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Deploy's ID.",
                      "key": "deployId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deploymentId"
                    },
                    {
                      "type": "literal",
                      "value": "/deploys/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "deployId"
                    },
                    {
                      "type": "literal",
                      "value": "/rollback"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Deploy"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/deployments/deploymentId/deploys/deployId/rollback",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "deploymentId": "deploymentId",
                      "deployId": "deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                      "astroRuntimeVersion": "9.1.0",
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBySubject": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                      "dagsUploadUrl": "https://astroproddagdeploy.windows.core.net/clmh59gt0000308lbgswe5fvh/clmh57jtm000008lb58fe2wmv",
                      "deploymentId": "clmh57jtm000008lb58fe2wmv",
                      "description": "My deploy description",
                      "id": "clvetru2w000201mowqwua63n",
                      "imageRepository": "https://my-image-repository",
                      "imageTag": "my-image-tag",
                      "isDagDeployEnabled": true,
                      "rollbackFromId": "clvcz1lrq000101oitxtp276e",
                      "status": "INITIALIZED",
                      "type": "IMAGE_AND_DAG",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBySubject": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "airflowVersion": "2.7.2, if airflow version is not found, it will return NA",
                        "astroRuntimeVersion": "9.1.0",
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBySubject": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "dagTarballVersion": "2024-01-12T18:32:20.5898930Z",
                        "dagsUploadUrl": "https://astroproddagdeploy.windows.core.net/clmh59gt0000308lbgswe5fvh/clmh57jtm000008lb58fe2wmv",
                        "deploymentId": "clmh57jtm000008lb58fe2wmv",
                        "description": "My deploy description",
                        "id": "clvetru2w000201mowqwua63n",
                        "imageRepository": "https://my-image-repository",
                        "imageTag": "my-image-tag",
                        "isDagDeployEnabled": true,
                        "rollbackFromId": "clvcz1lrq000101oitxtp276e",
                        "status": "INITIALIZED",
                        "type": "IMAGE_AND_DAG",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBySubject": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId/rollback",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId/rollback",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId/rollback",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId/rollback",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/deployments/:deploymentId/deploys/:deployId/rollback",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "deploymentId": ":deploymentId",
                      "deployId": ":deployId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Deploy rollback of a deployment",
                "authed": true
              }
            ],
            "types": ["type_deploy:CreateDeployRequestType"],
            "subpackages": [],
            "urlSlug": "deploy",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_workspace": {
            "subpackageId": "subpackage_workspace",
            "name": "Workspace",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-workspaces",
                "method": "GET",
                "id": "ListWorkspaces",
                "name": "List Workspaces",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to list Workspaces for.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/workspaces"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "A list of IDs for specific Workspaces to list. The API will list information only for Workspaces which have been specified in this list.",
                    "key": "workspaceIds",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "A list of names for specific Workspaces to filter by. The API will list information only for Workspaces which have been specified in this list.",
                    "key": "names",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The number of results to skip before returning values.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The maximum number of results to return.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "A list of field names to sort by, and whether to show results as ascending or descending. Formatted as `<fieldName>:asc` or `<fieldName>:desc`.",
                    "key": "sorts",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_workspace:ListWorkspacesRequestSortsItem"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WorkspacesPaginated"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/workspaces",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "limit": 0,
                      "offset": 0,
                      "totalCount": 0,
                      "workspaces": [
                        {
                          "cicdEnforcedDefault": true,
                          "createdAt": "2023-09-08T12:00:00Z",
                          "createdBy": {
                            "apiTokenName": "my-token",
                            "avatarUrl": "https://avatar.url",
                            "fullName": "Jane Doe",
                            "id": "clm8qv74h000008mlf08scq7k",
                            "username": "user1@company.com"
                          },
                          "description": "This is a test workspace",
                          "id": "clm8t5u4q000008jq4qoc3036",
                          "name": "My Workspace",
                          "organizationId": "clm8t5u4q000008jq4qoc3036",
                          "organizationName": "My Organization",
                          "updatedAt": "2023-09-08T13:30:00Z",
                          "updatedBy": {
                            "apiTokenName": "my-token",
                            "avatarUrl": "https://avatar.url",
                            "fullName": "Jane Doe",
                            "id": "clm8qv74h000008mlf08scq7k",
                            "username": "user1@company.com"
                          }
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "limit": 0,
                        "offset": 0,
                        "totalCount": 0,
                        "workspaces": [
                          {
                            "cicdEnforcedDefault": true,
                            "createdAt": "2023-09-08T12:00:00Z",
                            "createdBy": {
                              "apiTokenName": "my-token",
                              "avatarUrl": "https://avatar.url",
                              "fullName": "Jane Doe",
                              "id": "clm8qv74h000008mlf08scq7k",
                              "username": "user1@company.com"
                            },
                            "description": "This is a test workspace",
                            "id": "clm8t5u4q000008jq4qoc3036",
                            "name": "My Workspace",
                            "organizationId": "clm8t5u4q000008jq4qoc3036",
                            "organizationName": "My Organization",
                            "updatedAt": "2023-09-08T13:30:00Z",
                            "updatedBy": {
                              "apiTokenName": "my-token",
                              "avatarUrl": "https://avatar.url",
                              "fullName": "Jane Doe",
                              "id": "clm8qv74h000008mlf08scq7k",
                              "username": "user1@company.com"
                            }
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "workspaceIds": "string",
                      "names": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "workspaceIds": "string",
                      "names": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "workspaceIds": "string",
                      "names": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "workspaceIds": "string",
                      "names": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List Workspaces in an Organization",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-workspace",
                "method": "POST",
                "id": "CreateWorkspace",
                "name": "Create Workspace",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the Workspace will belong.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/workspaces"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Whether new Deployments enforce CI/CD deploys by default.",
                        "key": "cicdEnforcedDefault",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "The Workspace's description.",
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The Workspace's name.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Workspace"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/workspaces",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "cicdEnforcedDefault": true,
                      "description": "This is a test workspace",
                      "name": "My Workspace"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "cicdEnforcedDefault": true,
                      "createdAt": "2023-09-08T12:00:00Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "description": "This is a test workspace",
                      "id": "clm8t5u4q000008jq4qoc3036",
                      "name": "My Workspace",
                      "organizationId": "clm8t5u4q000008jq4qoc3036",
                      "organizationName": "My Organization",
                      "updatedAt": "2023-09-08T13:30:00Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "cicdEnforcedDefault": true,
                        "description": "This is a test workspace",
                        "name": "My Workspace"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "cicdEnforcedDefault": true,
                        "createdAt": "2023-09-08T12:00:00Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "description": "This is a test workspace",
                        "id": "clm8t5u4q000008jq4qoc3036",
                        "name": "My Workspace",
                        "organizationId": "clm8t5u4q000008jq4qoc3036",
                        "organizationName": "My Organization",
                        "updatedAt": "2023-09-08T13:30:00Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a Workspace.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-workspace",
                "method": "GET",
                "id": "GetWorkspace",
                "name": "Get Workspace",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the Workspace belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Workspace's ID.",
                      "key": "workspaceId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/workspaces/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "workspaceId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Workspace"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/workspaces/workspaceId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "workspaceId": "workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "cicdEnforcedDefault": true,
                      "createdAt": "2023-09-08T12:00:00Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "description": "This is a test workspace",
                      "id": "clm8t5u4q000008jq4qoc3036",
                      "name": "My Workspace",
                      "organizationId": "clm8t5u4q000008jq4qoc3036",
                      "organizationName": "My Organization",
                      "updatedAt": "2023-09-08T13:30:00Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "cicdEnforcedDefault": true,
                        "createdAt": "2023-09-08T12:00:00Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "description": "This is a test workspace",
                        "id": "clm8t5u4q000008jq4qoc3036",
                        "name": "My Workspace",
                        "organizationId": "clm8t5u4q000008jq4qoc3036",
                        "organizationName": "My Organization",
                        "updatedAt": "2023-09-08T13:30:00Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get information about a Workspace.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-workspace",
                "method": "POST",
                "id": "UpdateWorkspace",
                "name": "Update Workspace",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the Workspace belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Workspace's ID.",
                      "key": "workspaceId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/workspaces/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "workspaceId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Whether new Deployments enforce CI/CD deploys by default.",
                        "key": "cicdEnforcedDefault",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "boolean"
                          }
                        }
                      },
                      {
                        "description": "The Workspace's description.",
                        "key": "description",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The Workspace's name.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Workspace"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/workspaces/workspaceId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "workspaceId": "workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "cicdEnforcedDefault": true,
                      "description": "This is a test workspace",
                      "name": "My Workspace"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "cicdEnforcedDefault": true,
                      "createdAt": "2023-09-08T12:00:00Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "description": "This is a test workspace",
                      "id": "clm8t5u4q000008jq4qoc3036",
                      "name": "My Workspace",
                      "organizationId": "clm8t5u4q000008jq4qoc3036",
                      "organizationName": "My Organization",
                      "updatedAt": "2023-09-08T13:30:00Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "cicdEnforcedDefault": true,
                        "description": "This is a test workspace",
                        "name": "My Workspace"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "cicdEnforcedDefault": true,
                        "createdAt": "2023-09-08T12:00:00Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "description": "This is a test workspace",
                        "id": "clm8t5u4q000008jq4qoc3036",
                        "name": "My Workspace",
                        "organizationId": "clm8t5u4q000008jq4qoc3036",
                        "organizationName": "My Organization",
                        "updatedAt": "2023-09-08T13:30:00Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "cicdEnforcedDefault": true,
                        "description": "string",
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "cicdEnforcedDefault": true,
                        "description": "string",
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "cicdEnforcedDefault": true,
                        "description": "string",
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "cicdEnforcedDefault": true,
                        "description": "string",
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "cicdEnforcedDefault": true,
                        "description": "string",
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update a Workspace.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/platform/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-workspace",
                "method": "DELETE",
                "id": "DeleteWorkspace",
                "name": "Delete Workspace",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the Workspace belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Workspace's ID.",
                      "key": "workspaceId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/workspaces/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "workspaceId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/workspaces/workspaceId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "workspaceId": "workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/workspaces/:workspaceId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "workspaceId": ":workspaceId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete a Workspace.",
                "authed": true
              }
            ],
            "types": ["type_workspace:ListWorkspacesRequestSortsItem"],
            "subpackages": [],
            "urlSlug": "workspace",
            "description": "The `workspace` object represents an Astro Workspace, which is a collection of Deployments that can be accessed by a specific group of users. It contains metadata about a Workspace, but does not contain objects within the Workspace such as users and Deployments. Make requests to `workspace` endpoints to manage high level details about your Workspace. To manage resources within a Workspace, make requests to the endpoints related to those resources, such as `users`, and use the `workspaceIds` parameter to filter results by Workspace. See [Configure Workspaces](https://www.astronomer.io/docs/astro/manage-workspaces).",
            "webhooks": [],
            "websockets": [],
            "displayName": "Workspace"
          }
        },
        "auth": {
          "type": "bearerAuth",
          "tokenName": "token"
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      },
      "a4030141-9ea5-4ac9-8d2b-f44b815980a8": {
        "id": "a4030141-9ea5-4ac9-8d2b-f44b815980a8",
        "rootPackage": {
          "endpoints": [],
          "subpackages": [
            "subpackage_authorization",
            "subpackage_invite",
            "subpackage_role",
            "subpackage_team",
            "subpackage_apiToken",
            "subpackage_user"
          ],
          "types": [
            "type_:ApiTokenType",
            "type_:ApiToken",
            "type_:ApiTokenRoleEntityType",
            "type_:ApiTokenRole",
            "type_:ApiTokensPaginated",
            "type_:BasicSubjectProfileSubjectType",
            "type_:BasicSubjectProfile",
            "type_:DefaultRoleScopeType",
            "type_:DefaultRole",
            "type_:DeploymentRole",
            "type_:Error",
            "type_:Invite",
            "type_:PermissionEntry",
            "type_:PermissionGroup",
            "type_:RoleScopeType",
            "type_:Role",
            "type_:RoleTemplateScopeType",
            "type_:RoleTemplate",
            "type_:RoleWithPermissionScopeType",
            "type_:RoleWithPermission",
            "type_:RolesPaginated",
            "type_:SubjectRolesOrganizationRole",
            "type_:SubjectRoles",
            "type_:TeamOrganizationRole",
            "type_:Team",
            "type_:TeamMember",
            "type_:TeamMembersPaginated",
            "type_:TeamsPaginated",
            "type_:UserOrganizationRole",
            "type_:UserStatus",
            "type_:User",
            "type_:UsersPaginated",
            "type_:WorkspaceRoleRole",
            "type_:WorkspaceRole"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_authorization:ListPermissionGroupsRequestScopeType": {
            "name": "ListPermissionGroupsRequestScopeType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEPLOYMENT"
                },
                {
                  "value": "WORKSPACE"
                },
                {
                  "value": "ORGANIZATION"
                }
              ]
            }
          },
          "type_invite:CreateUserInviteRequestRole": {
            "description": "The user's Organization role.",
            "name": "CreateUserInviteRequestRole",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ORGANIZATION_OWNER"
                },
                {
                  "value": "ORGANIZATION_BILLING_ADMIN"
                },
                {
                  "value": "ORGANIZATION_MEMBER"
                }
              ]
            }
          },
          "type_role:ListRoleTemplatesRequestScopeTypesItem": {
            "name": "ListRoleTemplatesRequestScopeTypesItem",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEPLOYMENT"
                },
                {
                  "value": "WORKSPACE"
                },
                {
                  "value": "ORGANIZATION"
                }
              ]
            }
          },
          "type_role:ListRolesRequestScopeTypesItem": {
            "name": "ListRolesRequestScopeTypesItem",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEPLOYMENT"
                },
                {
                  "value": "WORKSPACE"
                },
                {
                  "value": "ORGANIZATION"
                }
              ]
            }
          },
          "type_role:ListRolesRequestSortsItem": {
            "name": "ListRolesRequestSortsItem",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "name:asc"
                },
                {
                  "value": "name:desc"
                },
                {
                  "value": "scopeType:asc"
                },
                {
                  "value": "scopeType:desc"
                },
                {
                  "value": "description:asc"
                },
                {
                  "value": "description:desc"
                },
                {
                  "value": "createdAt:asc"
                },
                {
                  "value": "createdAt:desc"
                },
                {
                  "value": "updatedAt:asc"
                },
                {
                  "value": "updatedAt:desc"
                }
              ]
            }
          },
          "type_team:ListTeamsRequestSortsItem": {
            "name": "ListTeamsRequestSortsItem",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "name:asc"
                },
                {
                  "value": "name:desc"
                },
                {
                  "value": "description:asc"
                },
                {
                  "value": "description:desc"
                },
                {
                  "value": "createdAt:asc"
                },
                {
                  "value": "createdAt:desc"
                },
                {
                  "value": "updatedAt:asc"
                },
                {
                  "value": "updatedAt:desc"
                }
              ]
            }
          },
          "type_team:CreateTeamRequestOrganizationRole": {
            "description": "The Team's Organization role.",
            "name": "CreateTeamRequestOrganizationRole",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ORGANIZATION_OWNER"
                },
                {
                  "value": "ORGANIZATION_BILLING_ADMIN"
                },
                {
                  "value": "ORGANIZATION_MEMBER"
                }
              ]
            }
          },
          "type_team:ListTeamMembersRequestSortsItem": {
            "name": "ListTeamMembersRequestSortsItem",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "userId:asc"
                },
                {
                  "value": "userId:desc"
                },
                {
                  "value": "fullName:asc"
                },
                {
                  "value": "fullName:desc"
                },
                {
                  "value": "username:asc"
                },
                {
                  "value": "username:desc"
                },
                {
                  "value": "createdAt:asc"
                },
                {
                  "value": "createdAt:desc"
                }
              ]
            }
          },
          "type_team:UpdateTeamRolesRequestOrganizationRole": {
            "description": "The Team's Organization roles.",
            "name": "UpdateTeamRolesRequestOrganizationRole",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ORGANIZATION_OWNER"
                },
                {
                  "value": "ORGANIZATION_BILLING_ADMIN"
                },
                {
                  "value": "ORGANIZATION_MEMBER"
                }
              ]
            }
          },
          "type_apiToken:ListApiTokensRequestSortsItem": {
            "name": "ListApiTokensRequestSortsItem",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "name:asc"
                },
                {
                  "value": "name:desc"
                },
                {
                  "value": "description:asc"
                },
                {
                  "value": "description:desc"
                },
                {
                  "value": "createdAt:asc"
                },
                {
                  "value": "createdAt:desc"
                },
                {
                  "value": "updatedAt:asc"
                },
                {
                  "value": "updatedAt:desc"
                },
                {
                  "value": "tokenStartAt:asc"
                },
                {
                  "value": "tokenStartAt:desc"
                }
              ]
            }
          },
          "type_apiToken:CreateApiTokenRequestType": {
            "description": "The scope of the API token.",
            "name": "CreateApiTokenRequestType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEPLOYMENT"
                },
                {
                  "value": "WORKSPACE"
                },
                {
                  "value": "ORGANIZATION"
                }
              ]
            }
          },
          "type_user:ListUsersRequestSortsItem": {
            "name": "ListUsersRequestSortsItem",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "id:asc"
                },
                {
                  "value": "id:desc"
                },
                {
                  "value": "username:asc"
                },
                {
                  "value": "username:desc"
                },
                {
                  "value": "fullName:asc"
                },
                {
                  "value": "fullName:desc"
                },
                {
                  "value": "createdAt:asc"
                },
                {
                  "value": "createdAt:desc"
                },
                {
                  "value": "updatedAt:asc"
                },
                {
                  "value": "updatedAt:desc"
                }
              ]
            }
          },
          "type_user:UpdateUserRolesRequestOrganizationRole": {
            "description": "The user's updated Organization role.",
            "name": "UpdateUserRolesRequestOrganizationRole",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ORGANIZATION_OWNER"
                },
                {
                  "value": "ORGANIZATION_BILLING_ADMIN"
                },
                {
                  "value": "ORGANIZATION_MEMBER"
                }
              ]
            }
          },
          "type_:ApiTokenType": {
            "description": "The type of the API token.",
            "name": "ApiTokenType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEPLOYMENT"
                },
                {
                  "value": "WORKSPACE"
                },
                {
                  "value": "ORGANIZATION"
                }
              ]
            }
          },
          "type_:ApiToken": {
            "name": "ApiToken",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time when the API token was created in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "createdAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "createdBy",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BasicSubjectProfile"
                    }
                  }
                },
                {
                  "description": "The description of the API token.",
                  "key": "description",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The time when the API token expires in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "endAt",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "The expiry period of the API token in days.",
                  "key": "expiryPeriodInDays",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The API token's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The time when the API token was last used in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "lastUsedAt",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "The name of the API token.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The roles of the API token.",
                  "key": "roles",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ApiTokenRole"
                      }
                    }
                  }
                },
                {
                  "description": "The short value of the API token.",
                  "key": "shortToken",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The time when the API token will become valid in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "startAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "The value of the API token.",
                  "key": "token",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The type of the API token.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ApiTokenType"
                  }
                },
                {
                  "description": "The time when the API token was last updated in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "updatedAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "updatedBy",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BasicSubjectProfile"
                    }
                  }
                }
              ]
            }
          },
          "type_:ApiTokenRoleEntityType": {
            "description": "The type of the entity to which the API token is scoped for.",
            "name": "ApiTokenRoleEntityType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEPLOYMENT"
                },
                {
                  "value": "WORKSPACE"
                },
                {
                  "value": "ORGANIZATION"
                }
              ]
            }
          },
          "type_:ApiTokenRole": {
            "name": "ApiTokenRole",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the entity to which the API token is scoped for. For example, for Workspace API tokens, this is the Workspace ID.",
                  "key": "entityId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of the entity to which the API token is scoped for.",
                  "key": "entityType",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ApiTokenRoleEntityType"
                  }
                },
                {
                  "description": "The role of the API token.",
                  "key": "role",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ApiTokensPaginated": {
            "name": "ApiTokensPaginated",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The limit of values in this page.",
                  "key": "limit",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The offset of values in this page.",
                  "key": "offset",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The list of API tokens in this page.",
                  "key": "tokens",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ApiToken"
                    }
                  }
                },
                {
                  "description": "The total number of API tokens.",
                  "key": "totalCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:BasicSubjectProfileSubjectType": {
            "description": "The subject type.",
            "name": "BasicSubjectProfileSubjectType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "USER"
                },
                {
                  "value": "SERVICEKEY"
                }
              ]
            }
          },
          "type_:BasicSubjectProfile": {
            "name": "BasicSubjectProfile",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The API token's name. Returned only when `SubjectType` is `SERVICEKEY`.",
                  "key": "apiTokenName",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL for the user's profile image. Returned only when `SubjectType` is `USER`.",
                  "key": "avatarUrl",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The subject's full name. Returned only when `SubjectType` is `USER`.",
                  "key": "fullName",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The subject's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The subject type.",
                  "key": "subjectType",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BasicSubjectProfileSubjectType"
                    }
                  }
                },
                {
                  "description": "The subject's username. Returned only when `SubjectType` is `USER`.",
                  "key": "username",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DefaultRoleScopeType": {
            "description": "The role's scope.",
            "name": "DefaultRoleScopeType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEPLOYMENT"
                },
                {
                  "value": "WORKSPACE"
                },
                {
                  "value": "ORGANIZATION"
                },
                {
                  "value": "SYSTEM"
                }
              ]
            }
          },
          "type_:DefaultRole": {
            "name": "DefaultRole",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The role's description.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The role's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The role's permissions.",
                  "key": "permissions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The role's scope.",
                  "key": "scopeType",
                  "valueType": {
                    "type": "id",
                    "value": "type_:DefaultRoleScopeType"
                  }
                }
              ]
            }
          },
          "type_:DeploymentRole": {
            "name": "DeploymentRole",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The Deployment ID.",
                  "key": "deploymentId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The name of the role for the subject in the Deployment.",
                  "key": "role",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Error": {
            "name": "Error",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "requestId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "statusCode",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:Invite": {
            "name": "Invite",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time when the invite is expired in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "expiresAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The invite ID.",
                  "key": "inviteId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "invitee",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BasicSubjectProfile"
                  }
                },
                {
                  "key": "inviter",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BasicSubjectProfile"
                  }
                },
                {
                  "description": "The ID of the Organization where the invite was sent.",
                  "key": "organizationId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The name of the Organization where the invite was sent.",
                  "key": "organizationName",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The ID for the user who was invited.",
                  "key": "userId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PermissionEntry": {
            "name": "PermissionEntry",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The permission's action.",
                  "key": "action",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The permission's description.",
                  "key": "description",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:PermissionGroup": {
            "name": "PermissionGroup",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The permission group's description.",
                  "key": "description",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The permission group's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The permission group's permissions.",
                  "key": "permissions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PermissionEntry"
                    }
                  }
                },
                {
                  "description": "The permission group's scope.",
                  "key": "scope",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:RoleScopeType": {
            "description": "The role's scope.",
            "name": "RoleScopeType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEPLOYMENT"
                },
                {
                  "value": "WORKSPACE"
                },
                {
                  "value": "ORGANIZATION"
                }
              ]
            }
          },
          "type_:Role": {
            "name": "Role",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the role was created.",
                  "key": "createdAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "createdBy",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BasicSubjectProfile"
                  }
                },
                {
                  "description": "The role's description.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The role's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The role's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The IDs of Workspaces that the role is restricted to.",
                  "key": "restrictedWorkspaceIds",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The role's scope.",
                  "key": "scopeType",
                  "valueType": {
                    "type": "id",
                    "value": "type_:RoleScopeType"
                  }
                },
                {
                  "description": "The time the role was last updated.",
                  "key": "updatedAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "updatedBy",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BasicSubjectProfile"
                  }
                }
              ]
            }
          },
          "type_:RoleTemplateScopeType": {
            "description": "The role's scope.",
            "name": "RoleTemplateScopeType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEPLOYMENT"
                },
                {
                  "value": "WORKSPACE"
                },
                {
                  "value": "ORGANIZATION"
                },
                {
                  "value": "SYSTEM"
                }
              ]
            }
          },
          "type_:RoleTemplate": {
            "name": "RoleTemplate",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The role's description.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The role's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The role's permissions.",
                  "key": "permissions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The role's scope.",
                  "key": "scopeType",
                  "valueType": {
                    "type": "id",
                    "value": "type_:RoleTemplateScopeType"
                  }
                }
              ]
            }
          },
          "type_:RoleWithPermissionScopeType": {
            "description": "The role's scope.",
            "name": "RoleWithPermissionScopeType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEPLOYMENT"
                },
                {
                  "value": "WORKSPACE"
                },
                {
                  "value": "ORGANIZATION"
                }
              ]
            }
          },
          "type_:RoleWithPermission": {
            "name": "RoleWithPermission",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the role was created.",
                  "key": "createdAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "createdBy",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BasicSubjectProfile"
                  }
                },
                {
                  "description": "The role's description.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The role's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The role's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The role's permissions.",
                  "key": "permissions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The IDs of Workspaces that the role is restricted to.",
                  "key": "restrictedWorkspaceIds",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The role's scope.",
                  "key": "scopeType",
                  "valueType": {
                    "type": "id",
                    "value": "type_:RoleWithPermissionScopeType"
                  }
                },
                {
                  "description": "The time the role was last updated.",
                  "key": "updatedAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "updatedBy",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BasicSubjectProfile"
                  }
                }
              ]
            }
          },
          "type_:RolesPaginated": {
            "name": "RolesPaginated",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The list of default roles.",
                  "key": "defaultRoles",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DefaultRole"
                      }
                    }
                  }
                },
                {
                  "description": "The number of custom roles returned.",
                  "key": "limit",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The offset of the custom roles.",
                  "key": "offset",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The list of custom roles.",
                  "key": "roles",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Role"
                    }
                  }
                },
                {
                  "description": "The total number of custom roles.",
                  "key": "totalCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:SubjectRolesOrganizationRole": {
            "description": "The subject's Organization role.",
            "name": "SubjectRolesOrganizationRole",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ORGANIZATION_OWNER"
                },
                {
                  "value": "ORGANIZATION_BILLING_ADMIN"
                },
                {
                  "value": "ORGANIZATION_MEMBER"
                }
              ]
            }
          },
          "type_:SubjectRoles": {
            "name": "SubjectRoles",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A list of the subject's Deployment roles. Currently only for API tokens.",
                  "key": "deploymentRoles",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DeploymentRole"
                      }
                    }
                  }
                },
                {
                  "description": "The subject's Organization role.",
                  "key": "organizationRole",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SubjectRolesOrganizationRole"
                    }
                  }
                },
                {
                  "description": "A list of the subject's Workspace roles.",
                  "key": "workspaceRoles",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:WorkspaceRole"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TeamOrganizationRole": {
            "description": "The Team's Organization role.",
            "name": "TeamOrganizationRole",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ORGANIZATION_OWNER"
                },
                {
                  "value": "ORGANIZATION_BILLING_ADMIN"
                },
                {
                  "value": "ORGANIZATION_MEMBER"
                }
              ]
            }
          },
          "type_:Team": {
            "name": "Team",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time when the Team was created in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "createdAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "createdBy",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BasicSubjectProfile"
                    }
                  }
                },
                {
                  "description": "The Team's role in each Deployment it belongs to.",
                  "key": "deploymentRoles",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DeploymentRole"
                      }
                    }
                  }
                },
                {
                  "description": "The Team's description.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The Team's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the Team is managed by an identity provider (IdP).",
                  "key": "isIdpManaged",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The Team's name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The ID of the Organization to which the Team belongs.",
                  "key": "organizationId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The Team's Organization role.",
                  "key": "organizationRole",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TeamOrganizationRole"
                  }
                },
                {
                  "description": "The number of roles the Team has.",
                  "key": "rolesCount",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The time when the Team was last updated in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "updatedAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "updatedBy",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BasicSubjectProfile"
                    }
                  }
                },
                {
                  "description": "The Team's role in each Workspace it belongs to.",
                  "key": "workspaceRoles",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:WorkspaceRole"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TeamMember": {
            "name": "TeamMember",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The URL for the Team member's profile image.",
                  "key": "avatarUrl",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time when the Team member was added in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "createdAt",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "The Team member's full name.",
                  "key": "fullName",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The Team member's ID.",
                  "key": "userId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The Team member's username.",
                  "key": "username",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TeamMembersPaginated": {
            "name": "TeamMembersPaginated",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The maximum number of Team members in one page.",
                  "key": "limit",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The offset of the current page of Team members.",
                  "key": "offset",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The list of Team members in the current page.",
                  "key": "teamMembers",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TeamMember"
                    }
                  }
                },
                {
                  "description": "The total number of Team members.",
                  "key": "totalCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:TeamsPaginated": {
            "name": "TeamsPaginated",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The maximum number of Teams in one page.",
                  "key": "limit",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The offset of the current page of Teams.",
                  "key": "offset",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The list of Teams in the current page.",
                  "key": "teams",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Team"
                    }
                  }
                },
                {
                  "description": "The total number of Teams.",
                  "key": "totalCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:UserOrganizationRole": {
            "description": "The user's Organization role.",
            "name": "UserOrganizationRole",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ORGANIZATION_OWNER"
                },
                {
                  "value": "ORGANIZATION_BILLING_ADMIN"
                },
                {
                  "value": "ORGANIZATION_MEMBER"
                }
              ]
            }
          },
          "type_:UserStatus": {
            "description": "The user's status.",
            "name": "UserStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ACTIVE"
                },
                {
                  "value": "INACTIVE"
                },
                {
                  "value": "PENDING"
                },
                {
                  "value": "BANNED"
                }
              ]
            }
          },
          "type_:User": {
            "name": "User",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The URL for the user's profile image.",
                  "key": "avatarUrl",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The time when the user was created in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "createdAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "The user's Deployment roles.",
                  "key": "deploymentRoles",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DeploymentRole"
                      }
                    }
                  }
                },
                {
                  "description": "The user's full name.",
                  "key": "fullName",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The user's ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The user's Organization role.",
                  "key": "organizationRole",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:UserOrganizationRole"
                    }
                  }
                },
                {
                  "description": "The user's status.",
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:UserStatus"
                  }
                },
                {
                  "description": "The time when the user was updated in UTC, formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
                  "key": "updatedAt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "The user's username.",
                  "key": "username",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The user's Workspace roles.",
                  "key": "workspaceRoles",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:WorkspaceRole"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:UsersPaginated": {
            "name": "UsersPaginated",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The maximum number of users in one page.",
                  "key": "limit",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The offset of the current page of users.",
                  "key": "offset",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of users.",
                  "key": "totalCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The list of users in the current page.",
                  "key": "users",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:User"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkspaceRoleRole": {
            "description": "The role of the subject in the Workspace.",
            "name": "WorkspaceRoleRole",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "WORKSPACE_OWNER"
                },
                {
                  "value": "WORKSPACE_OPERATOR"
                },
                {
                  "value": "WORKSPACE_AUTHOR"
                },
                {
                  "value": "WORKSPACE_MEMBER"
                },
                {
                  "value": "WORKSPACE_ACCESSOR"
                }
              ]
            }
          },
          "type_:WorkspaceRole": {
            "name": "WorkspaceRole",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The role of the subject in the Workspace.",
                  "key": "role",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkspaceRoleRole"
                  }
                },
                {
                  "description": "The Workspace ID.",
                  "key": "workspaceId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_authorization": {
            "subpackageId": "subpackage_authorization",
            "name": "authorization",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-permission-groups",
                "migratedFromUrlSlugs": ["list-authorization-permission-groups"],
                "method": "GET",
                "id": "ListPermissionGroups",
                "name": "List authorization permission groups",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/authorization/permission-groups"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Filter the returned permissions based on the scope they apply to. Note that currently, the only available permissions are in the `DEPLOYMENT` scope.",
                    "key": "scopeType",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_authorization:ListPermissionGroupsRequestScopeType"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:PermissionGroup"
                      }
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/authorization/permission-groups",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "description": "Astro notification channel defines where alert messages can be sent. For example, alert messages issued via email or slack.",
                        "name": "workspace.notificationChannels",
                        "permissions": [
                          {
                            "action": "get",
                            "description": "Subject is permitted to get the scope."
                          }
                        ],
                        "scope": "Workspace NotificationChannels"
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "description": "Astro notification channel defines where alert messages can be sent. For example, alert messages issued via email or slack.",
                          "name": "workspace.notificationChannels",
                          "permissions": [
                            {
                              "action": "get",
                              "description": "Subject is permitted to get the scope."
                            }
                          ],
                          "scope": "Workspace NotificationChannels"
                        }
                      ]
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/authorization/permission-groups",
                    "pathParameters": {},
                    "queryParameters": {
                      "scopeType": "DEPLOYMENT"
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/authorization/permission-groups",
                    "pathParameters": {},
                    "queryParameters": {
                      "scopeType": "DEPLOYMENT"
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/authorization/permission-groups",
                    "pathParameters": {},
                    "queryParameters": {
                      "scopeType": "DEPLOYMENT"
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/authorization/permission-groups",
                    "pathParameters": {},
                    "queryParameters": {
                      "scopeType": "DEPLOYMENT"
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List the available permissions you can grant to a custom role.",
                "authed": true
              }
            ],
            "types": ["type_authorization:ListPermissionGroupsRequestScopeType"],
            "subpackages": [],
            "urlSlug": "authorization",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_invite": {
            "subpackageId": "subpackage_invite",
            "name": "Invite",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-user-invite",
                "migratedFromUrlSlugs": ["create-a-user-invitation"],
                "method": "POST",
                "id": "CreateUserInvite",
                "name": "Create a user invitation",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to invite the user to.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/invites"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The email of the user to invite.",
                        "key": "inviteeEmail",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The user's Organization role.",
                        "key": "role",
                        "valueType": {
                          "type": "id",
                          "value": "type_invite:CreateUserInviteRequestRole"
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Invite"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/invites",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "inviteeEmail": "user1@company.com",
                      "role": "ORGANIZATION_OWNER"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "expiresAt": "2022-11-22T04:37:12Z",
                      "inviteId": "clm9t1g17000008jmfsw20lsz",
                      "invitee": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "inviter": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "organizationId": "clm9t0gbt000108jv4f1cfu8u",
                      "organizationName": "My Organization",
                      "userId": "clm9t060z000008jv3mira7x5"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "inviteeEmail": "user1@company.com",
                        "role": "ORGANIZATION_OWNER"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "expiresAt": "2022-11-22T04:37:12Z",
                        "inviteId": "clm9t1g17000008jmfsw20lsz",
                        "invitee": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "inviter": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "organizationId": "clm9t0gbt000108jv4f1cfu8u",
                        "organizationName": "My Organization",
                        "userId": "clm9t060z000008jv3mira7x5"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/invites",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "inviteeEmail": "string",
                        "role": "ORGANIZATION_OWNER"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/invites",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "inviteeEmail": "string",
                        "role": "ORGANIZATION_OWNER"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/invites",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "inviteeEmail": "string",
                        "role": "ORGANIZATION_OWNER"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/invites",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "inviteeEmail": "string",
                        "role": "ORGANIZATION_OWNER"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/invites",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "inviteeEmail": "string",
                        "role": "ORGANIZATION_OWNER"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Invite a user to an Organization.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-user-invite",
                "migratedFromUrlSlugs": ["delete-a-user-invite"],
                "method": "DELETE",
                "id": "DeleteUserInvite",
                "name": "Delete a user invite",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization where the user was invited to.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The invite's ID.",
                      "key": "inviteId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/invites/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "inviteId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/invites/inviteId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "inviteId": "inviteId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/invites/:inviteId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "inviteId": ":inviteId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/invites/:inviteId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "inviteId": ":inviteId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/invites/:inviteId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "inviteId": ":inviteId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/invites/:inviteId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "inviteId": ":inviteId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/invites/:inviteId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "inviteId": ":inviteId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete an existing user invite.",
                "authed": true
              }
            ],
            "types": ["type_invite:CreateUserInviteRequestRole"],
            "subpackages": [],
            "urlSlug": "invite",
            "description": "The `invite` object represents the record of a user invite generated by Astro. It includes information both about the inviter and the invitee. Invites can be generated both by manual invitations through the Astro UI and automatic invitations through an identity provider. An `invite` record persists until its associated invite expires. Make requests to `invite` endpoints to create, delete, or audit invites for users across your Organization. See [Manage Organization users](https://www.astronomer.io/docs/astro/manage-organization-users) and [Manage Workspace users](https://www.astronomer.io/docs/astro/manage-workspace-users).",
            "webhooks": [],
            "websockets": [],
            "displayName": "Invite"
          },
          "subpackage_role": {
            "subpackageId": "subpackage_role",
            "name": "role",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-role-templates",
                "migratedFromUrlSlugs": ["get-role-templates"],
                "method": "GET",
                "id": "ListRoleTemplates",
                "name": "Get role templates",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The Organization's ID.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/role-templates"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Filter role templates based on the scope of permissions they include.",
                    "key": "scopeTypes",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_role:ListRoleTemplatesRequestScopeTypesItem"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:RoleTemplate"
                      }
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/role-templates",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "description": "Subject can only view deployments.",
                        "name": "Deployment_Viewer",
                        "permissions": ["permissions"],
                        "scopeType": "DEPLOYMENT"
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "description": "Subject can only view deployments.",
                          "name": "Deployment_Viewer",
                          "permissions": ["permissions"],
                          "scopeType": "DEPLOYMENT"
                        }
                      ]
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/role-templates",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "scopeTypes": "DEPLOYMENT"
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/role-templates",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "scopeTypes": "DEPLOYMENT"
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/role-templates",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "scopeTypes": "DEPLOYMENT"
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/role-templates",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "scopeTypes": "DEPLOYMENT"
                    },
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/role-templates",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "scopeTypes": "DEPLOYMENT"
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get a list of available role templates in an Organization. A role template can be used as the basis for creating a new custom role.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-roles",
                "method": "GET",
                "id": "ListRoles",
                "name": "List roles",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The Organization's ID.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/roles"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Whether to include default Astro roles in the returned list.",
                    "key": "includeDefaultRoles",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter the list of roles based on the scope of each role.",
                    "key": "scopeTypes",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_role:ListRolesRequestScopeTypesItem"
                      }
                    }
                  },
                  {
                    "description": "Offset for pagination.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Limit for pagination.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'.",
                    "key": "sorts",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_role:ListRolesRequestSortsItem"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:RolesPaginated"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/roles",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "defaultRoles": [
                        {
                          "description": "Subject can only view deployments.",
                          "name": "Deployment_Viewer",
                          "permissions": ["permissions"],
                          "scopeType": "DEPLOYMENT"
                        }
                      ],
                      "limit": 1,
                      "offset": 1,
                      "roles": [
                        {
                          "createdAt": "createdAt",
                          "createdBy": {
                            "apiTokenName": "my-token",
                            "avatarUrl": "https://avatar.url",
                            "fullName": "Jane Doe",
                            "id": "clm8qv74h000008mlf08scq7k",
                            "username": "user1@company.com"
                          },
                          "description": "Subject can only view deployments.",
                          "id": "cluc9tapx000901qn2xrgqdmn",
                          "name": "Deployment_Viewer",
                          "restrictedWorkspaceIds": ["restrictedWorkspaceIds"],
                          "scopeType": "DEPLOYMENT",
                          "updatedAt": "updatedAt",
                          "updatedBy": {
                            "apiTokenName": "my-token",
                            "avatarUrl": "https://avatar.url",
                            "fullName": "Jane Doe",
                            "id": "clm8qv74h000008mlf08scq7k",
                            "username": "user1@company.com"
                          }
                        }
                      ],
                      "totalCount": 1
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "defaultRoles": [
                          {
                            "description": "Subject can only view deployments.",
                            "name": "Deployment_Viewer",
                            "permissions": ["permissions"],
                            "scopeType": "DEPLOYMENT"
                          }
                        ],
                        "limit": 1,
                        "offset": 1,
                        "roles": [
                          {
                            "createdAt": "createdAt",
                            "createdBy": {
                              "apiTokenName": "my-token",
                              "avatarUrl": "https://avatar.url",
                              "fullName": "Jane Doe",
                              "id": "clm8qv74h000008mlf08scq7k",
                              "username": "user1@company.com"
                            },
                            "description": "Subject can only view deployments.",
                            "id": "cluc9tapx000901qn2xrgqdmn",
                            "name": "Deployment_Viewer",
                            "restrictedWorkspaceIds": ["restrictedWorkspaceIds"],
                            "scopeType": "DEPLOYMENT",
                            "updatedAt": "updatedAt",
                            "updatedBy": {
                              "apiTokenName": "my-token",
                              "avatarUrl": "https://avatar.url",
                              "fullName": "Jane Doe",
                              "id": "clm8qv74h000008mlf08scq7k",
                              "username": "user1@company.com"
                            }
                          }
                        ],
                        "totalCount": 1
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "includeDefaultRoles": true,
                      "scopeTypes": "DEPLOYMENT"
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "includeDefaultRoles": true,
                      "scopeTypes": "DEPLOYMENT"
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "includeDefaultRoles": true,
                      "scopeTypes": "DEPLOYMENT"
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "includeDefaultRoles": true,
                      "scopeTypes": "DEPLOYMENT"
                    },
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "includeDefaultRoles": true,
                      "scopeTypes": "DEPLOYMENT"
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List available user roles in an Organization.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-custom-role",
                "migratedFromUrlSlugs": ["create-a-custom-role"],
                "method": "POST",
                "id": "CreateCustomRole",
                "name": "Create a custom role",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization where you want to create the custom role.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/roles"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The role's description.",
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The role's name.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The permissions included in the role.",
                        "key": "permissions",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The IDs of the Workspaces that the role is restricted to.",
                        "key": "restrictedWorkspaceIds",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      {
                        "key": "scopeType",
                        "valueType": {
                          "type": "literal",
                          "value": {
                            "type": "stringLiteral",
                            "value": "DEPLOYMENT"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:RoleWithPermission"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/roles",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "description": "Subject can only view deployments.",
                      "name": "Deployment_Viewer",
                      "permissions": ["permissions"],
                      "scopeType": "DEPLOYMENT"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "createdAt": "createdAt",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "description": "Subject can only view deployments.",
                      "id": "cluc9tapx000901qn2xrgqdmn",
                      "name": "Deployment_Viewer",
                      "permissions": ["permissions"],
                      "restrictedWorkspaceIds": ["restrictedWorkspaceIds"],
                      "scopeType": "DEPLOYMENT",
                      "updatedAt": "updatedAt",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "description": "Subject can only view deployments.",
                        "name": "Deployment_Viewer",
                        "permissions": ["permissions"],
                        "scopeType": "DEPLOYMENT"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "createdAt": "createdAt",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "description": "Subject can only view deployments.",
                        "id": "cluc9tapx000901qn2xrgqdmn",
                        "name": "Deployment_Viewer",
                        "permissions": ["permissions"],
                        "restrictedWorkspaceIds": ["restrictedWorkspaceIds"],
                        "scopeType": "DEPLOYMENT",
                        "updatedAt": "updatedAt",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "permissions": ["string"],
                        "scopeType": "DEPLOYMENT"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "permissions": ["string"],
                        "scopeType": "DEPLOYMENT"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "permissions": ["string"],
                        "scopeType": "DEPLOYMENT"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "permissions": ["string"],
                        "scopeType": "DEPLOYMENT"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "permissions": ["string"],
                        "scopeType": "DEPLOYMENT"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a custom role that you can assign to users, Teams, and API tokens.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-custom-role",
                "method": "POST",
                "id": "UpdateCustomRole",
                "name": "Update custom role",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the role belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The custom role's ID.",
                      "key": "customRoleId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/roles/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "customRoleId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The role's description.",
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The role's name.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The permissions included in the role.",
                        "key": "permissions",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The IDs of the Workspaces that the role is restricted to.",
                        "key": "restrictedWorkspaceIds",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:RoleWithPermission"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/roles/customRoleId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "customRoleId": "customRoleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "description": "Subject can only view deployments.",
                      "name": "Deployment_Viewer",
                      "permissions": ["permissions"]
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "createdAt": "createdAt",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "description": "Subject can only view deployments.",
                      "id": "cluc9tapx000901qn2xrgqdmn",
                      "name": "Deployment_Viewer",
                      "permissions": ["permissions"],
                      "restrictedWorkspaceIds": ["restrictedWorkspaceIds"],
                      "scopeType": "DEPLOYMENT",
                      "updatedAt": "updatedAt",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "description": "Subject can only view deployments.",
                        "name": "Deployment_Viewer",
                        "permissions": ["permissions"]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "createdAt": "createdAt",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "description": "Subject can only view deployments.",
                        "id": "cluc9tapx000901qn2xrgqdmn",
                        "name": "Deployment_Viewer",
                        "permissions": ["permissions"],
                        "restrictedWorkspaceIds": ["restrictedWorkspaceIds"],
                        "scopeType": "DEPLOYMENT",
                        "updatedAt": "updatedAt",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:customRoleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "customRoleId": ":customRoleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "permissions": ["string"]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:customRoleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "customRoleId": ":customRoleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "permissions": ["string"]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:customRoleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "customRoleId": ":customRoleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "permissions": ["string"]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:customRoleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "customRoleId": ":customRoleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "permissions": ["string"]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:customRoleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "customRoleId": ":customRoleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "permissions": ["string"]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update the metadata or included permissions for a custom role.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-custom-role",
                "migratedFromUrlSlugs": ["delete-a-custom-role"],
                "method": "DELETE",
                "id": "DeleteCustomRole",
                "name": "Delete a custom role",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the role belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the role to delete.",
                      "key": "customRoleId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/roles/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "customRoleId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/roles/customRoleId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "customRoleId": "customRoleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:customRoleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "customRoleId": ":customRoleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:customRoleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "customRoleId": ":customRoleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:customRoleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "customRoleId": ":customRoleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:customRoleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "customRoleId": ":customRoleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:customRoleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "customRoleId": ":customRoleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete a custom role.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-custom-role",
                "migratedFromUrlSlugs": ["get-a-custom-role"],
                "method": "GET",
                "id": "GetCustomRole",
                "name": "Get a custom role",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the role belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The role's ID.",
                      "key": "roleId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/roles/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "roleId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:RoleWithPermission"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/roles/roleId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "roleId": "roleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "createdAt": "createdAt",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "description": "Subject can only view deployments.",
                      "id": "cluc9tapx000901qn2xrgqdmn",
                      "name": "Deployment_Viewer",
                      "permissions": ["permissions"],
                      "restrictedWorkspaceIds": ["restrictedWorkspaceIds"],
                      "scopeType": "DEPLOYMENT",
                      "updatedAt": "updatedAt",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "createdAt": "createdAt",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "description": "Subject can only view deployments.",
                        "id": "cluc9tapx000901qn2xrgqdmn",
                        "name": "Deployment_Viewer",
                        "permissions": ["permissions"],
                        "restrictedWorkspaceIds": ["restrictedWorkspaceIds"],
                        "scopeType": "DEPLOYMENT",
                        "updatedAt": "updatedAt",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:roleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "roleId": ":roleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:roleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "roleId": ":roleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:roleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "roleId": ":roleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:roleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "roleId": ":roleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/roles/:roleId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "roleId": ":roleId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get details about a custom role.",
                "authed": true
              }
            ],
            "types": [
              "type_role:ListRoleTemplatesRequestScopeTypesItem",
              "type_role:ListRolesRequestScopeTypesItem",
              "type_role:ListRolesRequestSortsItem"
            ],
            "subpackages": [],
            "urlSlug": "role",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_team": {
            "subpackageId": "subpackage_team",
            "name": "Team",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-teams",
                "method": "GET",
                "id": "ListTeams",
                "name": "List Teams",
                "path": {
                  "pathParameters": [
                    {
                      "description": "ID of the Organization to list Teams for.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/teams"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "A list of names for Teams to filter by. The API returns details only for the specified Teams.",
                    "key": "names",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Offset for pagination",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Limit for pagination",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'",
                    "key": "sorts",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_team:ListTeamsRequestSortsItem"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:TeamsPaginated"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/teams",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "limit": 10,
                      "offset": 0,
                      "teams": [
                        {
                          "createdAt": "2022-11-22T04:37:12Z",
                          "createdBy": {
                            "apiTokenName": "my-token",
                            "avatarUrl": "https://avatar.url",
                            "fullName": "Jane Doe",
                            "id": "clm8qv74h000008mlf08scq7k",
                            "username": "user1@company.com"
                          },
                          "deploymentRoles": [
                            {
                              "deploymentId": "clm8t5u4q000008jq4qoc3031",
                              "role": "DEPLOYMENT_ADMIN"
                            }
                          ],
                          "description": "My Team description",
                          "id": "clma5ftgk000008mhgev00k7d",
                          "isIdpManaged": false,
                          "name": "My Team",
                          "organizationId": "clma5g8q6000108mh88g27k1y",
                          "organizationRole": "ORGANIZATION_OWNER",
                          "rolesCount": 1,
                          "updatedAt": "2022-11-22T04:37:12Z",
                          "updatedBy": {
                            "apiTokenName": "my-token",
                            "avatarUrl": "https://avatar.url",
                            "fullName": "Jane Doe",
                            "id": "clm8qv74h000008mlf08scq7k",
                            "username": "user1@company.com"
                          },
                          "workspaceRoles": [
                            {
                              "role": "WORKSPACE_OWNER",
                              "workspaceId": "clm8t5u4q000008jq4qoc3036"
                            }
                          ]
                        }
                      ],
                      "totalCount": 100
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "limit": 10,
                        "offset": 0,
                        "teams": [
                          {
                            "createdAt": "2022-11-22T04:37:12Z",
                            "createdBy": {
                              "apiTokenName": "my-token",
                              "avatarUrl": "https://avatar.url",
                              "fullName": "Jane Doe",
                              "id": "clm8qv74h000008mlf08scq7k",
                              "username": "user1@company.com"
                            },
                            "deploymentRoles": [
                              {
                                "deploymentId": "clm8t5u4q000008jq4qoc3031",
                                "role": "DEPLOYMENT_ADMIN"
                              }
                            ],
                            "description": "My Team description",
                            "id": "clma5ftgk000008mhgev00k7d",
                            "isIdpManaged": false,
                            "name": "My Team",
                            "organizationId": "clma5g8q6000108mh88g27k1y",
                            "organizationRole": "ORGANIZATION_OWNER",
                            "rolesCount": 1,
                            "updatedAt": "2022-11-22T04:37:12Z",
                            "updatedBy": {
                              "apiTokenName": "my-token",
                              "avatarUrl": "https://avatar.url",
                              "fullName": "Jane Doe",
                              "id": "clm8qv74h000008mlf08scq7k",
                              "username": "user1@company.com"
                            },
                            "workspaceRoles": [
                              {
                                "role": "WORKSPACE_OWNER",
                                "workspaceId": "clm8t5u4q000008jq4qoc3036"
                              }
                            ]
                          }
                        ],
                        "totalCount": 100
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "names": "string",
                      "offset": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "names": "string",
                      "offset": 0
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "names": "string",
                      "offset": 0
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "names": "string",
                      "offset": 0
                    },
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "names": "string",
                      "offset": 0
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List all Teams in an Organization.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-team",
                "migratedFromUrlSlugs": ["create-a-team"],
                "method": "POST",
                "id": "CreateTeam",
                "name": "Create a Team",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization where the Team is created.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/teams"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The Team's description.",
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The list of IDs for users to add to the Team.",
                        "key": "memberIds",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      {
                        "description": "The Team's name.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The Team's Organization role.",
                        "key": "organizationRole",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_team:CreateTeamRequestOrganizationRole"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Team"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/teams",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "description": "My Team description",
                      "name": "My Team"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "deploymentRoles": [
                        {
                          "deploymentId": "clm8t5u4q000008jq4qoc3031",
                          "role": "DEPLOYMENT_ADMIN"
                        }
                      ],
                      "description": "My Team description",
                      "id": "clma5ftgk000008mhgev00k7d",
                      "isIdpManaged": false,
                      "name": "My Team",
                      "organizationId": "clma5g8q6000108mh88g27k1y",
                      "organizationRole": "ORGANIZATION_OWNER",
                      "rolesCount": 1,
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "workspaceRoles": [
                        {
                          "role": "WORKSPACE_OWNER",
                          "workspaceId": "clm8t5u4q000008jq4qoc3036"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "description": "My Team description",
                        "name": "My Team"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "deploymentRoles": [
                          {
                            "deploymentId": "clm8t5u4q000008jq4qoc3031",
                            "role": "DEPLOYMENT_ADMIN"
                          }
                        ],
                        "description": "My Team description",
                        "id": "clma5ftgk000008mhgev00k7d",
                        "isIdpManaged": false,
                        "name": "My Team",
                        "organizationId": "clma5g8q6000108mh88g27k1y",
                        "organizationRole": "ORGANIZATION_OWNER",
                        "rolesCount": 1,
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "workspaceRoles": [
                          {
                            "role": "WORKSPACE_OWNER",
                            "workspaceId": "clm8t5u4q000008jq4qoc3036"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a Team in an Organization. A Team is a group of users that have the same set of permissions in an Organization or Workspace.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-team",
                "migratedFromUrlSlugs": ["get-a-team"],
                "method": "GET",
                "id": "GetTeam",
                "name": "Get a Team",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the Team belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the Team to retrieve data for.",
                      "key": "teamId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/teams/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "teamId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Team"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/teams/teamId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "teamId": "teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "deploymentRoles": [
                        {
                          "deploymentId": "clm8t5u4q000008jq4qoc3031",
                          "role": "DEPLOYMENT_ADMIN"
                        }
                      ],
                      "description": "My Team description",
                      "id": "clma5ftgk000008mhgev00k7d",
                      "isIdpManaged": false,
                      "name": "My Team",
                      "organizationId": "clma5g8q6000108mh88g27k1y",
                      "organizationRole": "ORGANIZATION_OWNER",
                      "rolesCount": 1,
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "workspaceRoles": [
                        {
                          "role": "WORKSPACE_OWNER",
                          "workspaceId": "clm8t5u4q000008jq4qoc3036"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "deploymentRoles": [
                          {
                            "deploymentId": "clm8t5u4q000008jq4qoc3031",
                            "role": "DEPLOYMENT_ADMIN"
                          }
                        ],
                        "description": "My Team description",
                        "id": "clma5ftgk000008mhgev00k7d",
                        "isIdpManaged": false,
                        "name": "My Team",
                        "organizationId": "clma5g8q6000108mh88g27k1y",
                        "organizationRole": "ORGANIZATION_OWNER",
                        "rolesCount": 1,
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "workspaceRoles": [
                          {
                            "role": "WORKSPACE_OWNER",
                            "workspaceId": "clm8t5u4q000008jq4qoc3036"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Retrieve details about a specific Team.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-team",
                "migratedFromUrlSlugs": ["update-a-team"],
                "method": "POST",
                "id": "UpdateTeam",
                "name": "Update a Team",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the Team belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the Team to update.",
                      "key": "teamId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/teams/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "teamId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The Team's description.",
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The Team's name.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Team"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/teams/teamId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "teamId": "teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "description": "My Team Description",
                      "name": "My Team"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "deploymentRoles": [
                        {
                          "deploymentId": "clm8t5u4q000008jq4qoc3031",
                          "role": "DEPLOYMENT_ADMIN"
                        }
                      ],
                      "description": "My Team description",
                      "id": "clma5ftgk000008mhgev00k7d",
                      "isIdpManaged": false,
                      "name": "My Team",
                      "organizationId": "clma5g8q6000108mh88g27k1y",
                      "organizationRole": "ORGANIZATION_OWNER",
                      "rolesCount": 1,
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "workspaceRoles": [
                        {
                          "role": "WORKSPACE_OWNER",
                          "workspaceId": "clm8t5u4q000008jq4qoc3036"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "description": "My Team Description",
                        "name": "My Team"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "deploymentRoles": [
                          {
                            "deploymentId": "clm8t5u4q000008jq4qoc3031",
                            "role": "DEPLOYMENT_ADMIN"
                          }
                        ],
                        "description": "My Team description",
                        "id": "clma5ftgk000008mhgev00k7d",
                        "isIdpManaged": false,
                        "name": "My Team",
                        "organizationId": "clma5g8q6000108mh88g27k1y",
                        "organizationRole": "ORGANIZATION_OWNER",
                        "rolesCount": 1,
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "workspaceRoles": [
                          {
                            "role": "WORKSPACE_OWNER",
                            "workspaceId": "clm8t5u4q000008jq4qoc3036"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update a Team's details.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-team",
                "migratedFromUrlSlugs": ["delete-a-team"],
                "method": "DELETE",
                "id": "DeleteTeam",
                "name": "Delete a Team",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to delete the Team from.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the Team to delete.",
                      "key": "teamId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/teams/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "teamId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/teams/teamId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "teamId": "teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete a Team. Deleting a Team will remove all permissions associated with the Team. Users that previously belonged to the Team will no longer have these permissions.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-team-members",
                "method": "GET",
                "id": "ListTeamMembers",
                "name": "List Team members",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the Team belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the Team to retrieve member information for.",
                      "key": "teamId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/teams/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "teamId"
                    },
                    {
                      "type": "literal",
                      "value": "/members"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Offset for pagination",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Limit for pagination",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'",
                    "key": "sorts",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_team:ListTeamMembersRequestSortsItem"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:TeamMembersPaginated"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/teams/teamId/members",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "teamId": "teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "limit": 10,
                      "offset": 0,
                      "teamMembers": [
                        {
                          "avatarUrl": "https://avatar.url",
                          "createdAt": "2022-11-22T04:37:12Z",
                          "fullName": "Jane Doe",
                          "userId": "clma5vzk2000108k20jhq3f7n",
                          "username": "user1@company.com"
                        }
                      ],
                      "totalCount": 100
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "limit": 10,
                        "offset": 0,
                        "teamMembers": [
                          {
                            "avatarUrl": "https://avatar.url",
                            "createdAt": "2022-11-22T04:37:12Z",
                            "fullName": "Jane Doe",
                            "userId": "clma5vzk2000108k20jhq3f7n",
                            "username": "user1@company.com"
                          }
                        ],
                        "totalCount": 100
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {
                      "offset": 0,
                      "limit": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {
                      "offset": 0,
                      "limit": 0
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {
                      "offset": 0,
                      "limit": 0
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {
                      "offset": 0,
                      "limit": 0
                    },
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {
                      "offset": 0,
                      "limit": 0
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List the details about all users that belong to a specific Team.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "add-team-members",
                "migratedFromUrlSlugs": ["add-members-to-a-team"],
                "method": "POST",
                "id": "AddTeamMembers",
                "name": "Add members to a team",
                "path": {
                  "pathParameters": [
                    {
                      "description": "organization ID",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "team ID",
                      "key": "teamId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/teams/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "teamId"
                    },
                    {
                      "type": "literal",
                      "value": "/members"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The list of IDs for users to add to the Team.",
                        "key": "memberIds",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/teams/teamId/members",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "teamId": "teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "memberIds": ["memberIds"]
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "memberIds": ["memberIds"]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "memberIds": ["string"]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "memberIds": ["string"]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "memberIds": ["string"]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "memberIds": ["string"]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "memberIds": ["string"]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Add members to a team",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "remove-team-member",
                "method": "DELETE",
                "id": "RemoveTeamMember",
                "name": "Remove Team member",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the user belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the Team to remove the user from.",
                      "key": "teamId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the user to remove.",
                      "key": "memberId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/teams/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "teamId"
                    },
                    {
                      "type": "literal",
                      "value": "/members/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "memberId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/teams/teamId/members/memberId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "teamId": "teamId",
                      "memberId": "memberId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members/:memberId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId",
                      "memberId": ":memberId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members/:memberId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId",
                      "memberId": ":memberId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members/:memberId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId",
                      "memberId": ":memberId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members/:memberId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId",
                      "memberId": ":memberId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/members/:memberId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId",
                      "memberId": ":memberId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Remove a user from a Team. The user loses all permissions associated with the Team.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-team-roles",
                "method": "POST",
                "id": "UpdateTeamRoles",
                "name": "Update Team roles",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the Team belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the Team to update roles for.",
                      "key": "teamId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/teams/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "teamId"
                    },
                    {
                      "type": "literal",
                      "value": "/roles"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The user's updated Deployment roles. The Deployments you specify must belong to the Team's Organization.",
                        "key": "deploymentRoles",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "id",
                              "value": "type_:DeploymentRole"
                            }
                          }
                        }
                      },
                      {
                        "description": "The Team's Organization roles.",
                        "key": "organizationRole",
                        "valueType": {
                          "type": "id",
                          "value": "type_team:UpdateTeamRolesRequestOrganizationRole"
                        }
                      },
                      {
                        "description": "The Team's updated Workspace roles. The Workspaces you specify must belong to the Team's Organization.",
                        "key": "workspaceRoles",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "id",
                              "value": "type_:WorkspaceRole"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:SubjectRoles"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/teams/teamId/roles",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "teamId": "teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "deploymentRoles": [
                        {
                          "deploymentId": "clm8t5u4q000008jq4qoc3031",
                          "role": "DEPLOYMENT_ADMIN"
                        }
                      ],
                      "organizationRole": "ORGANIZATION_OWNER",
                      "workspaceRoles": [
                        {
                          "role": "WORKSPACE_OWNER",
                          "workspaceId": "clm8t5u4q000008jq4qoc3036"
                        }
                      ]
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "deploymentRoles": [
                        {
                          "deploymentId": "clm8t5u4q000008jq4qoc3031",
                          "role": "DEPLOYMENT_ADMIN"
                        }
                      ],
                      "organizationRole": "ORGANIZATION_OWNER",
                      "workspaceRoles": [
                        {
                          "role": "WORKSPACE_OWNER",
                          "workspaceId": "clm8t5u4q000008jq4qoc3036"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "deploymentRoles": [
                          {
                            "deploymentId": "clm8t5u4q000008jq4qoc3031",
                            "role": "DEPLOYMENT_ADMIN"
                          }
                        ],
                        "organizationRole": "ORGANIZATION_OWNER",
                        "workspaceRoles": [
                          {
                            "role": "WORKSPACE_OWNER",
                            "workspaceId": "clm8t5u4q000008jq4qoc3036"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "deploymentRoles": [
                          {
                            "deploymentId": "clm8t5u4q000008jq4qoc3031",
                            "role": "DEPLOYMENT_ADMIN"
                          }
                        ],
                        "organizationRole": "ORGANIZATION_OWNER",
                        "workspaceRoles": [
                          {
                            "role": "WORKSPACE_OWNER",
                            "workspaceId": "clm8t5u4q000008jq4qoc3036"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "organizationRole": "ORGANIZATION_OWNER"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "organizationRole": "ORGANIZATION_OWNER"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "organizationRole": "ORGANIZATION_OWNER"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "organizationRole": "ORGANIZATION_OWNER"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/teams/:teamId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "teamId": ":teamId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "organizationRole": "ORGANIZATION_OWNER"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update Organization and Workspace roles for a Team.",
                "authed": true
              }
            ],
            "types": [
              "type_team:ListTeamsRequestSortsItem",
              "type_team:CreateTeamRequestOrganizationRole",
              "type_team:ListTeamMembersRequestSortsItem",
              "type_team:UpdateTeamRolesRequestOrganizationRole"
            ],
            "subpackages": [],
            "urlSlug": "team",
            "description": "The `team` object represents an Astro Team, which is a group of users that share the same permissions across your Organization and Workspaces. Make requests to `team` endpoints to create, update, and delete Teams across an Organization. See [Configure Teams on Astro](https://www.astronomer.io/docs/astro/manage-teams).",
            "webhooks": [],
            "websockets": [],
            "displayName": "Team"
          },
          "subpackage_apiToken": {
            "subpackageId": "subpackage_apiToken",
            "name": "ApiToken",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-api-tokens",
                "method": "GET",
                "id": "ListApiTokens",
                "name": "List API tokens",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to list tokens for.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/tokens"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The ID of the Workspace to list API tokens for.",
                    "key": "workspaceId",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The ID of the Deployment to list API tokens for.",
                    "key": "deploymentId",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Whether to show only Organization API tokens.",
                    "key": "includeOnlyOrganizationTokens",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  {
                    "description": "Offset for pagination",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Limit for pagination",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'",
                    "key": "sorts",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_apiToken:ListApiTokensRequestSortsItem"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ApiTokensPaginated"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/tokens",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "limit": 10,
                      "offset": 0,
                      "tokens": [
                        {
                          "createdAt": "2022-11-22T04:37:12Z",
                          "createdBy": {
                            "apiTokenName": "my-token",
                            "avatarUrl": "https://avatar.url",
                            "fullName": "Jane Doe",
                            "id": "clm8qv74h000008mlf08scq7k",
                            "username": "user1@company.com"
                          },
                          "description": "my token description",
                          "endAt": "2022-11-22T04:37:12Z",
                          "expiryPeriodInDays": 30,
                          "id": "clm8q7f6q000008lcgyougpsk",
                          "lastUsedAt": "2022-11-22T04:37:12Z",
                          "name": "My token",
                          "roles": [
                            {
                              "entityId": "clm8sgvai000008l794psbkdv",
                              "entityType": "DEPLOYMENT",
                              "role": "WORKSPACE_MEMBER"
                            }
                          ],
                          "shortToken": "short-token",
                          "startAt": "2022-11-22T04:37:12Z",
                          "token": "token",
                          "type": "DEPLOYMENT",
                          "updatedAt": "2022-11-22T04:37:12Z",
                          "updatedBy": {
                            "apiTokenName": "my-token",
                            "avatarUrl": "https://avatar.url",
                            "fullName": "Jane Doe",
                            "id": "clm8qv74h000008mlf08scq7k",
                            "username": "user1@company.com"
                          }
                        }
                      ],
                      "totalCount": 100
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "limit": 10,
                        "offset": 0,
                        "tokens": [
                          {
                            "createdAt": "2022-11-22T04:37:12Z",
                            "createdBy": {
                              "apiTokenName": "my-token",
                              "avatarUrl": "https://avatar.url",
                              "fullName": "Jane Doe",
                              "id": "clm8qv74h000008mlf08scq7k",
                              "username": "user1@company.com"
                            },
                            "description": "my token description",
                            "endAt": "2022-11-22T04:37:12Z",
                            "expiryPeriodInDays": 30,
                            "id": "clm8q7f6q000008lcgyougpsk",
                            "lastUsedAt": "2022-11-22T04:37:12Z",
                            "name": "My token",
                            "roles": [
                              {
                                "entityId": "clm8sgvai000008l794psbkdv",
                                "entityType": "DEPLOYMENT",
                                "role": "WORKSPACE_MEMBER"
                              }
                            ],
                            "shortToken": "short-token",
                            "startAt": "2022-11-22T04:37:12Z",
                            "token": "token",
                            "type": "DEPLOYMENT",
                            "updatedAt": "2022-11-22T04:37:12Z",
                            "updatedBy": {
                              "apiTokenName": "my-token",
                              "avatarUrl": "https://avatar.url",
                              "fullName": "Jane Doe",
                              "id": "clm8qv74h000008mlf08scq7k",
                              "username": "user1@company.com"
                            }
                          }
                        ],
                        "totalCount": 100
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "workspaceId": "string",
                      "deploymentId": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "workspaceId": "string",
                      "deploymentId": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "workspaceId": "string",
                      "deploymentId": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "workspaceId": "string",
                      "deploymentId": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "workspaceId": "string",
                      "deploymentId": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List information about all API tokens from an Organization. Filters on Workspace when Workspace ID is provided. When `includeOnlyOrganizationTokens` is `true`, only Organization API tokens are returned.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-api-token",
                "migratedFromUrlSlugs": ["create-an-api-token"],
                "method": "POST",
                "id": "CreateApiToken",
                "name": "Create an API token",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization where you want to create the token.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/tokens"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The description for the API token.",
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The ID of the Workspace or Deployment to which the API token is scoped. It is required if `Type` is `WORKSPACE` or `DEPLOYMENT`.",
                        "key": "entityId",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The name of the API token.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The role of the API token.",
                        "key": "role",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The expiry period of the API token in days. If not specified, the token will never expire.",
                        "key": "tokenExpiryPeriodInDays",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        }
                      },
                      {
                        "description": "The scope of the API token.",
                        "key": "type",
                        "valueType": {
                          "type": "id",
                          "value": "type_apiToken:CreateApiTokenRequestType"
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ApiToken"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/tokens",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "description": "This is my API token",
                      "entityId": "clm8pxjjw000008l23jm08hyu",
                      "name": "My token",
                      "role": "WORKSPACE_OWNER",
                      "tokenExpiryPeriodInDays": 30,
                      "type": "DEPLOYMENT"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "description": "my token description",
                      "endAt": "2022-11-22T04:37:12Z",
                      "expiryPeriodInDays": 30,
                      "id": "clm8q7f6q000008lcgyougpsk",
                      "lastUsedAt": "2022-11-22T04:37:12Z",
                      "name": "My token",
                      "roles": [
                        {
                          "entityId": "clm8sgvai000008l794psbkdv",
                          "entityType": "DEPLOYMENT",
                          "role": "WORKSPACE_MEMBER"
                        }
                      ],
                      "shortToken": "short-token",
                      "startAt": "2022-11-22T04:37:12Z",
                      "token": "token",
                      "type": "DEPLOYMENT",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "description": "This is my API token",
                        "entityId": "clm8pxjjw000008l23jm08hyu",
                        "name": "My token",
                        "role": "WORKSPACE_OWNER",
                        "tokenExpiryPeriodInDays": 30,
                        "type": "DEPLOYMENT"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "description": "my token description",
                        "endAt": "2022-11-22T04:37:12Z",
                        "expiryPeriodInDays": 30,
                        "id": "clm8q7f6q000008lcgyougpsk",
                        "lastUsedAt": "2022-11-22T04:37:12Z",
                        "name": "My token",
                        "roles": [
                          {
                            "entityId": "clm8sgvai000008l794psbkdv",
                            "entityType": "DEPLOYMENT",
                            "role": "WORKSPACE_MEMBER"
                          }
                        ],
                        "shortToken": "short-token",
                        "startAt": "2022-11-22T04:37:12Z",
                        "token": "token",
                        "type": "DEPLOYMENT",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "role": "string",
                        "type": "DEPLOYMENT"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "role": "string",
                        "type": "DEPLOYMENT"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "role": "string",
                        "type": "DEPLOYMENT"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "role": "string",
                        "type": "DEPLOYMENT"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "role": "string",
                        "type": "DEPLOYMENT"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create an API token. An API token is an alphanumeric token that grants programmatic access to Astro for automated workflows. An API token can be scoped to an Organization or a Workspace.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-api-token",
                "migratedFromUrlSlugs": ["get-an-api-token"],
                "method": "GET",
                "id": "GetApiToken",
                "name": "Get an API token",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization where you want to retrieve token information.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the token that you want to retrieve data for.",
                      "key": "tokenId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/tokens/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "tokenId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ApiToken"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/tokens/tokenId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "tokenId": "tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "description": "my token description",
                      "endAt": "2022-11-22T04:37:12Z",
                      "expiryPeriodInDays": 30,
                      "id": "clm8q7f6q000008lcgyougpsk",
                      "lastUsedAt": "2022-11-22T04:37:12Z",
                      "name": "My token",
                      "roles": [
                        {
                          "entityId": "clm8sgvai000008l794psbkdv",
                          "entityType": "DEPLOYMENT",
                          "role": "WORKSPACE_MEMBER"
                        }
                      ],
                      "shortToken": "short-token",
                      "startAt": "2022-11-22T04:37:12Z",
                      "token": "token",
                      "type": "DEPLOYMENT",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "description": "my token description",
                        "endAt": "2022-11-22T04:37:12Z",
                        "expiryPeriodInDays": 30,
                        "id": "clm8q7f6q000008lcgyougpsk",
                        "lastUsedAt": "2022-11-22T04:37:12Z",
                        "name": "My token",
                        "roles": [
                          {
                            "entityId": "clm8sgvai000008l794psbkdv",
                            "entityType": "DEPLOYMENT",
                            "role": "WORKSPACE_MEMBER"
                          }
                        ],
                        "shortToken": "short-token",
                        "startAt": "2022-11-22T04:37:12Z",
                        "token": "token",
                        "type": "DEPLOYMENT",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Retrieve information about a specific API token.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-api-token",
                "migratedFromUrlSlugs": ["update-an-api-token"],
                "method": "POST",
                "id": "UpdateApiToken",
                "name": "Update an API token",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization where you want to update an API token.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The API token you want to update.",
                      "key": "tokenId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/tokens/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "tokenId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The description of the API token.",
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The name of the API token.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ApiToken"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/tokens/tokenId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "tokenId": "tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "description": "This is my API token",
                      "name": "My token"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "description": "my token description",
                      "endAt": "2022-11-22T04:37:12Z",
                      "expiryPeriodInDays": 30,
                      "id": "clm8q7f6q000008lcgyougpsk",
                      "lastUsedAt": "2022-11-22T04:37:12Z",
                      "name": "My token",
                      "roles": [
                        {
                          "entityId": "clm8sgvai000008l794psbkdv",
                          "entityType": "DEPLOYMENT",
                          "role": "WORKSPACE_MEMBER"
                        }
                      ],
                      "shortToken": "short-token",
                      "startAt": "2022-11-22T04:37:12Z",
                      "token": "token",
                      "type": "DEPLOYMENT",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "description": "This is my API token",
                        "name": "My token"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "description": "my token description",
                        "endAt": "2022-11-22T04:37:12Z",
                        "expiryPeriodInDays": 30,
                        "id": "clm8q7f6q000008lcgyougpsk",
                        "lastUsedAt": "2022-11-22T04:37:12Z",
                        "name": "My token",
                        "roles": [
                          {
                            "entityId": "clm8sgvai000008l794psbkdv",
                            "entityType": "DEPLOYMENT",
                            "role": "WORKSPACE_MEMBER"
                          }
                        ],
                        "shortToken": "short-token",
                        "startAt": "2022-11-22T04:37:12Z",
                        "token": "token",
                        "type": "DEPLOYMENT",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update the name and description of an API token.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-api-token",
                "migratedFromUrlSlugs": ["delete-an-api-token"],
                "method": "DELETE",
                "id": "DeleteApiToken",
                "name": "Delete an API token",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization where you want to delete the token.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The API token ID",
                      "key": "tokenId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/tokens/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "tokenId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/tokens/tokenId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "tokenId": "tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete an API token. When you delete an API token, make sure that no existing automation workflows are using it. After it's deleted, an API token cannot be recovered.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-api-token-roles",
                "method": "POST",
                "id": "UpdateApiTokenRoles",
                "name": "Update API token roles",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization where you want to update an API token.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The API token you want to update.",
                      "key": "tokenId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/tokens/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "tokenId"
                    },
                    {
                      "type": "literal",
                      "value": "/roles"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The roles of the API token.",
                        "key": "roles",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "id",
                            "value": "type_:ApiTokenRole"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:SubjectRoles"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/tokens/tokenId/roles",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "tokenId": "tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "roles": [
                        {
                          "entityId": "clm8sgvai000008l794psbkdv",
                          "entityType": "DEPLOYMENT",
                          "role": "WORKSPACE_MEMBER"
                        }
                      ]
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "deploymentRoles": [
                        {
                          "deploymentId": "clm8t5u4q000008jq4qoc3031",
                          "role": "DEPLOYMENT_ADMIN"
                        }
                      ],
                      "organizationRole": "ORGANIZATION_OWNER",
                      "workspaceRoles": [
                        {
                          "role": "WORKSPACE_OWNER",
                          "workspaceId": "clm8t5u4q000008jq4qoc3036"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "roles": [
                          {
                            "entityId": "clm8sgvai000008l794psbkdv",
                            "entityType": "DEPLOYMENT",
                            "role": "WORKSPACE_MEMBER"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "deploymentRoles": [
                          {
                            "deploymentId": "clm8t5u4q000008jq4qoc3031",
                            "role": "DEPLOYMENT_ADMIN"
                          }
                        ],
                        "organizationRole": "ORGANIZATION_OWNER",
                        "workspaceRoles": [
                          {
                            "role": "WORKSPACE_OWNER",
                            "workspaceId": "clm8t5u4q000008jq4qoc3036"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "roles": [
                          {
                            "entityId": "string",
                            "entityType": "DEPLOYMENT",
                            "role": "string"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "roles": [
                          {
                            "entityId": "string",
                            "entityType": "DEPLOYMENT",
                            "role": "string"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "roles": [
                          {
                            "entityId": "string",
                            "entityType": "DEPLOYMENT",
                            "role": "string"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "roles": [
                          {
                            "entityId": "string",
                            "entityType": "DEPLOYMENT",
                            "role": "string"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "roles": [
                          {
                            "entityId": "string",
                            "entityType": "DEPLOYMENT",
                            "role": "string"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update Workspace and Organization roles for an API token.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "rotate-api-token",
                "method": "POST",
                "id": "RotateApiToken",
                "name": "Rotate API token",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization where you want to rotate an API token.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The token to rotate",
                      "key": "tokenId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/tokens/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "tokenId"
                    },
                    {
                      "type": "literal",
                      "value": "/rotate"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ApiToken"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/tokens/tokenId/rotate",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "tokenId": "tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "createdAt": "2022-11-22T04:37:12Z",
                      "createdBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      },
                      "description": "my token description",
                      "endAt": "2022-11-22T04:37:12Z",
                      "expiryPeriodInDays": 30,
                      "id": "clm8q7f6q000008lcgyougpsk",
                      "lastUsedAt": "2022-11-22T04:37:12Z",
                      "name": "My token",
                      "roles": [
                        {
                          "entityId": "clm8sgvai000008l794psbkdv",
                          "entityType": "DEPLOYMENT",
                          "role": "WORKSPACE_MEMBER"
                        }
                      ],
                      "shortToken": "short-token",
                      "startAt": "2022-11-22T04:37:12Z",
                      "token": "token",
                      "type": "DEPLOYMENT",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "updatedBy": {
                        "apiTokenName": "my-token",
                        "avatarUrl": "https://avatar.url",
                        "fullName": "Jane Doe",
                        "id": "clm8qv74h000008mlf08scq7k",
                        "subjectType": "USER",
                        "username": "user1@company.com"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "createdAt": "2022-11-22T04:37:12Z",
                        "createdBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        },
                        "description": "my token description",
                        "endAt": "2022-11-22T04:37:12Z",
                        "expiryPeriodInDays": 30,
                        "id": "clm8q7f6q000008lcgyougpsk",
                        "lastUsedAt": "2022-11-22T04:37:12Z",
                        "name": "My token",
                        "roles": [
                          {
                            "entityId": "clm8sgvai000008l794psbkdv",
                            "entityType": "DEPLOYMENT",
                            "role": "WORKSPACE_MEMBER"
                          }
                        ],
                        "shortToken": "short-token",
                        "startAt": "2022-11-22T04:37:12Z",
                        "token": "token",
                        "type": "DEPLOYMENT",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "updatedBy": {
                          "apiTokenName": "my-token",
                          "avatarUrl": "https://avatar.url",
                          "fullName": "Jane Doe",
                          "id": "clm8qv74h000008mlf08scq7k",
                          "subjectType": "USER",
                          "username": "user1@company.com"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId/rotate",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId/rotate",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId/rotate",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId/rotate",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/tokens/:tokenId/rotate",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "tokenId": ":tokenId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Rotate an API token. Creates a new API token and invalidates the one you specify. Any workflows using the previous value stop working.",
                "authed": true
              }
            ],
            "types": ["type_apiToken:ListApiTokensRequestSortsItem", "type_apiToken:CreateApiTokenRequestType"],
            "subpackages": [],
            "urlSlug": "api-token",
            "description": "The `apitoken` object represents a single API token within your Organization. API tokens are used to authenticate automated tools and processes to your Organization. They have varying levels of access to your resources based on their Organization, Workspace, and Deployment roles. See [Workspace API tokens])(workspace-api-tokens.md) and [Organization API tokens](organization-api-tokens.md).",
            "webhooks": [],
            "websockets": [],
            "displayName": "ApiToken"
          },
          "subpackage_user": {
            "subpackageId": "subpackage_user",
            "name": "User",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-users",
                "migratedFromUrlSlugs": ["list-users-in-an-organization"],
                "method": "GET",
                "id": "ListUsers",
                "name": "List users in an Organization",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to list users for.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/users"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The ID of the Workspace to filter the list of users for. When specified, the API returns only users belonging to the specified Workspace.",
                    "key": "workspaceId",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The ID of the Deployment to filter the list of users for. When specified, the API returns only users belonging to the specified Deployment.",
                    "key": "deploymentId",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Offset for pagination",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Limit for pagination",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'",
                    "key": "sorts",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_user:ListUsersRequestSortsItem"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:UsersPaginated"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/users",
                    "pathParameters": {
                      "organizationId": "organizationId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "limit": 10,
                      "offset": 0,
                      "totalCount": 100,
                      "users": [
                        {
                          "avatarUrl": "https://avatar.url",
                          "createdAt": "2022-11-22T04:37:12Z",
                          "deploymentRoles": [
                            {
                              "deploymentId": "clm8t5u4q000008jq4qoc3031",
                              "role": "DEPLOYMENT_ADMIN"
                            }
                          ],
                          "fullName": "Jane Doe",
                          "id": "clm9sq6s0000008kz7uvl7yz7",
                          "organizationRole": "ORGANIZATION_OWNER",
                          "status": "ACTIVE",
                          "updatedAt": "2022-11-22T04:37:12Z",
                          "username": "user1@company.com",
                          "workspaceRoles": [
                            {
                              "role": "WORKSPACE_OWNER",
                              "workspaceId": "clm8t5u4q000008jq4qoc3036"
                            }
                          ]
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "limit": 10,
                        "offset": 0,
                        "totalCount": 100,
                        "users": [
                          {
                            "avatarUrl": "https://avatar.url",
                            "createdAt": "2022-11-22T04:37:12Z",
                            "deploymentRoles": [
                              {
                                "deploymentId": "clm8t5u4q000008jq4qoc3031",
                                "role": "DEPLOYMENT_ADMIN"
                              }
                            ],
                            "fullName": "Jane Doe",
                            "id": "clm9sq6s0000008kz7uvl7yz7",
                            "organizationRole": "ORGANIZATION_OWNER",
                            "status": "ACTIVE",
                            "updatedAt": "2022-11-22T04:37:12Z",
                            "username": "user1@company.com",
                            "workspaceRoles": [
                              {
                                "role": "WORKSPACE_OWNER",
                                "workspaceId": "clm8t5u4q000008jq4qoc3036"
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/users",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "workspaceId": "string",
                      "deploymentId": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/users",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "workspaceId": "string",
                      "deploymentId": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/users",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "workspaceId": "string",
                      "deploymentId": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/users",
                    "pathParameters": {
                      "organizationId": ":organizationId"
                    },
                    "queryParameters": {
                      "workspaceId": "string",
                      "deploymentId": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List users in an Organization or a specific Workspace within an Organization.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-user",
                "migratedFromUrlSlugs": ["get-user-information"],
                "method": "GET",
                "id": "GetUser",
                "name": "Get user information",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the user belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The user's ID.",
                      "key": "userId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/users/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "userId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:User"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/users/userId",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "userId": "userId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "avatarUrl": "https://avatar.url",
                      "createdAt": "2022-11-22T04:37:12Z",
                      "deploymentRoles": [
                        {
                          "deploymentId": "clm8t5u4q000008jq4qoc3031",
                          "role": "DEPLOYMENT_ADMIN"
                        }
                      ],
                      "fullName": "Jane Doe",
                      "id": "clm9sq6s0000008kz7uvl7yz7",
                      "organizationRole": "ORGANIZATION_OWNER",
                      "status": "ACTIVE",
                      "updatedAt": "2022-11-22T04:37:12Z",
                      "username": "user1@company.com",
                      "workspaceRoles": [
                        {
                          "role": "WORKSPACE_OWNER",
                          "workspaceId": "clm8t5u4q000008jq4qoc3036"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "avatarUrl": "https://avatar.url",
                        "createdAt": "2022-11-22T04:37:12Z",
                        "deploymentRoles": [
                          {
                            "deploymentId": "clm8t5u4q000008jq4qoc3031",
                            "role": "DEPLOYMENT_ADMIN"
                          }
                        ],
                        "fullName": "Jane Doe",
                        "id": "clm9sq6s0000008kz7uvl7yz7",
                        "organizationRole": "ORGANIZATION_OWNER",
                        "status": "ACTIVE",
                        "updatedAt": "2022-11-22T04:37:12Z",
                        "username": "user1@company.com",
                        "workspaceRoles": [
                          {
                            "role": "WORKSPACE_OWNER",
                            "workspaceId": "clm8t5u4q000008jq4qoc3036"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/users/:userId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "userId": ":userId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/users/:userId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "userId": ":userId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/users/:userId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "userId": ":userId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/users/:userId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "userId": ":userId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/users/:userId",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "userId": ":userId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Retrieve user information about a specific user account.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.astronomer.io/iam/v1beta1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-user-roles",
                "migratedFromUrlSlugs": ["update-a-users-roles"],
                "method": "POST",
                "id": "UpdateUserRoles",
                "name": "Update a user's roles",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the Organization to which the user belongs.",
                      "key": "organizationId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The user's ID",
                      "key": "userId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/organizations/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "organizationId"
                    },
                    {
                      "type": "literal",
                      "value": "/users/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "userId"
                    },
                    {
                      "type": "literal",
                      "value": "/roles"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The user's updated Deployment roles. Requires also specifying an `OrganizationRole`.",
                        "key": "deploymentRoles",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "id",
                              "value": "type_:DeploymentRole"
                            }
                          }
                        }
                      },
                      {
                        "description": "The user's updated Organization role.",
                        "key": "organizationRole",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_user:UpdateUserRolesRequestOrganizationRole"
                          }
                        }
                      },
                      {
                        "description": "The user's updated Workspace roles. Requires also specifying an `OrganizationRole`.",
                        "key": "workspaceRoles",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "id",
                              "value": "type_:WorkspaceRole"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:SubjectRoles"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "id",
                      "value": "type_:Error"
                    },
                    "statusCode": 500
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:Error"
                      }
                    },
                    "statusCode": 500
                  }
                ],
                "examples": [
                  {
                    "path": "/organizations/organizationId/users/userId/roles",
                    "pathParameters": {
                      "organizationId": "organizationId",
                      "userId": "userId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "deploymentRoles": [
                        {
                          "deploymentId": "clm8t5u4q000008jq4qoc3031",
                          "role": "DEPLOYMENT_ADMIN"
                        }
                      ],
                      "workspaceRoles": [
                        {
                          "role": "WORKSPACE_OWNER",
                          "workspaceId": "clm8t5u4q000008jq4qoc3036"
                        }
                      ]
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "deploymentRoles": [
                        {
                          "deploymentId": "clm8t5u4q000008jq4qoc3031",
                          "role": "DEPLOYMENT_ADMIN"
                        }
                      ],
                      "organizationRole": "ORGANIZATION_OWNER",
                      "workspaceRoles": [
                        {
                          "role": "WORKSPACE_OWNER",
                          "workspaceId": "clm8t5u4q000008jq4qoc3036"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "deploymentRoles": [
                          {
                            "deploymentId": "clm8t5u4q000008jq4qoc3031",
                            "role": "DEPLOYMENT_ADMIN"
                          }
                        ],
                        "workspaceRoles": [
                          {
                            "role": "WORKSPACE_OWNER",
                            "workspaceId": "clm8t5u4q000008jq4qoc3036"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "deploymentRoles": [
                          {
                            "deploymentId": "clm8t5u4q000008jq4qoc3031",
                            "role": "DEPLOYMENT_ADMIN"
                          }
                        ],
                        "organizationRole": "ORGANIZATION_OWNER",
                        "workspaceRoles": [
                          {
                            "role": "WORKSPACE_OWNER",
                            "workspaceId": "clm8t5u4q000008jq4qoc3036"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/users/:userId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "userId": ":userId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/users/:userId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "userId": ":userId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 401,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/users/:userId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "userId": ":userId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/users/:userId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "userId": ":userId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/organizations/:organizationId/users/:userId/roles",
                    "pathParameters": {
                      "organizationId": ":organizationId",
                      "userId": ":userId"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "string",
                        "requestId": "string",
                        "statusCode": 0
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update Organization and Workspace roles for a user.",
                "authed": true
              }
            ],
            "types": ["type_user:ListUsersRequestSortsItem", "type_user:UpdateUserRolesRequestOrganizationRole"],
            "subpackages": [],
            "urlSlug": "user",
            "description": "The `user` object represents a user account in your Astro Organization. Astro creates a new `user` object whenever you invite a user by email or add a user to Astro through an identity provider. The object contains all information about a user, including their personal information, roles, and login attempts. It doesn't include attributes for actions that the user completes after they log in, such as updating a Deployment. Make requests to `user` endpoints to manage permissions for existing users both at the Organization and Workspace level. To create new users, make requests to `invite` endpoints instead.",
            "webhooks": [],
            "websockets": [],
            "displayName": "User"
          }
        },
        "auth": {
          "type": "bearerAuth",
          "tokenName": "token"
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      }
    },
    "files": {
      "015057e2-bb14-4cd7-97dd-b2cca2a0b221": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/astronomer.docs.buildwithfern.com/docs/api/2024-05-24T18%3A11%3A19.885Z/docs/assets/logo-dark.svg",
      "49419424-29d4-4e84-983a-1d6d69cf072d": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/astronomer.docs.buildwithfern.com/docs/api/2024-05-24T18%3A11%3A19.885Z/docs/assets/logo-light.svg",
      "06193aca-2385-478c-8973-6c20d3994186": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/astronomer.docs.buildwithfern.com/docs/api/2024-05-24T18%3A11%3A19.885Z/docs/assets/favicon.svg"
    },
    "filesV2": {
      "015057e2-bb14-4cd7-97dd-b2cca2a0b221": {
        "type": "image",
        "width": 232,
        "height": 24,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/astronomer.docs.buildwithfern.com/docs/api/2024-05-24T18:11:19.885Z/docs/assets/logo-dark.svg"
      },
      "49419424-29d4-4e84-983a-1d6d69cf072d": {
        "type": "image",
        "width": 232,
        "height": 24,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/astronomer.docs.buildwithfern.com/docs/api/2024-05-24T18:11:19.885Z/docs/assets/logo-light.svg"
      },
      "06193aca-2385-478c-8973-6c20d3994186": {
        "type": "image",
        "width": 80,
        "height": 80,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/astronomer.docs.buildwithfern.com/docs/api/2024-05-24T18:11:19.885Z/docs/assets/favicon.svg"
      }
    },
    "pages": {
      "docs/pages/overview.mdx": {
        "markdown": "---\ntitle: Astro API overview\nslug: overview\n---\n\nThe Astro API is a standard REST API that you can use to develop applications and scripts for interacting with Astro components.\n\nThe API contains multiple schemas. Each schema covers a different part of Astro management:\n\n- **Platform API schema**: Includes endpoints for updating your Astro infrastructure and resources, such as clusters, Deployments, and Workspaces.\n- **Identity and access management (IAM) API schema**: Includes endpoints for managing role-based access control (RBAC) components, such as users and Teams.\n\nTo make your first request using the Astro API, see [Get started with the Astro API](/api/get-started).\n\n<Info>\n\nThe Astro API is currently in beta. See [Support](/api/versioning-and-support) for all policies related to using beta releases of the API.\n\n</Info>\n\n<Tip>\n\nLooking to use the Airflow REST API instead? See the [Astro documentation](https://www.astronomer.io/docs/astro/airflow-api) to learn how to make requests to Airflow Deployments using the Airflow API.\n\n</Tip>\n\n## Authentication\n\nAll requests to the API must be authenticated. You can use [bearer authentication](https://swagger.io/docs/specification/authentication/bearer-authentication/) to authenticate with a [Workspace API token](https://www.astronomer.io/docs/astro/workspace-api-tokens), [Organization API token](https://www.astronomer.io/docs/astro/organization-api-tokens), or [Deployment API token](https://www.astronomer.io/docs/astro/deplopyment-api-tokens). The following example shows how you can add a token to a curl request:\n\n```curl\ncurl --location 'https://api.astronomer.io/platform/v1beta1/organizations/<your-organization-id>/clusters' \\\n--header 'Authorization: Bearer <your-api-token>'\n```\n\nEndpoints can return subsets of specific attributes based on the permissions of your API token. If your token's role allows you to access something in the Astro UI or Astro CLI, it also allows you to access the same thing or action using the API. See [User permissions](https://www.astronomer.io/docs/astro/user-permissions) for a list of all possible permissions.\n\n## Rate limiting\n\nThe maximum number of API requests you can make with the same API token depends on the type of request you're making:\n\n- **`POST` requests**: You can make a make a maximum of 10 requests per second using the same API token.\n- **`DELETE` requests**: You can make a make a maximum of 5 requests per second using the same API token.\n- **`GET` requests**: You can make a make a maximum of 25 requests per second using the same API token.\n\n## Idempotent requests\n\nAstro supports different levels of [idempotency](https://en.wikipedia.org/wiki/Idempotence) for different request types.\n\n- **`POST` requests (Create)**: Identical `POST` requests to create a new object will result in the creation of multiple objects. For example, if you make identical requests to create an Organization, Astro creates multiple Organizations with identical settings and unique IDs.\n- **`POST` requests (Update)**: Idempotency is guaranteed for all `POST` requests to update an existing object.\n- **`DELETE` requests**: Idempotency is guaranteed for all `DELETE` requests. Any successive identical `DELETE` requests return a 404 error.\n\n## API status codes\n\nIf the API returns a `200` or `204` code, your API request was a success. If the API returns a `40x` or `500` code, your request resulted in one of the following errors:\n\n- `400`: **Bad Request** - Your request was not successful because it was not formatted properly, possibly due to missing required parameters. \n- `401`: **Unauthorized** - Your request did not include an API token. \n- `404`: **Resource Not Found** - The resource you're trying to access does not exist.\n- `403`: **Forbidden** - The API token you included did not have sufficient permissions to complete the request.\n- `500`: **Internal sever error** - The request could not be completed because of an error caused by Astro.\n\nAll error responses include a `requestId` that you can share with Astronomer support if you want to learn more about the error. \n"
      },
      "docs/pages/get-started.mdx": {
        "markdown": "---\ntitle: Get started with the Astro API\ndescription: Run a few simple commands to learn how to use the Astro API.\nslug: get-started\n---\n\nIn this quick introduction to the Astro API, you'll make some simple requests to retrieve details about your Organization and create a Workspace API token.\n\n## Prerequisites\n\n- An [Astro account](https://www.astronomer.io/docs/astro/log-in-to-astro). \n- An [Organization API token](https://www.astronomer.io/docs/astro/organization-api-tokens) with the Organization Owner role. Astronomer recommends that you create a new API token for this tutorial.\n- An Astro [Workspace](https://www.astronomer.io/docs/astro/manage-workspaces).\n- A method for making API requests. This tutorial assumes you're using curl, but you can also use tools such as Postman.\n\n## Step 1: Make your first API request\n\nTo access most endpoints, you need to provide an Organization ID to the API as a path parameter. One of the few requests that doesn't require an Organization ID is the [List Organizations](https://www.astronomer.io/docs/astro/api/platform-api-reference#tag/Organization/operation/ListOrganizations) request, which means that you can programmatically retrieve an Organization ID. \n\nTo retrieve the Organization ID through the API, run the following command:\n\n```bash\ncurl --location 'https://api.astronomer.io/platform/v1beta1/organizations' \\\n--header 'Authorization: Bearer <your-organization-api-token>' \n```\n\nIf the command was successful, then you receive a response that begins similarly to the following:\n\n```json {14}\n{\n  \"organizations\": [\n    {\n      \"billingEmail\": \"billing@example.com\",\n      \"createdAt\": \"2022-11-22T04:37:12T\",\n      \"createdBySubject\": {\n        \"apiTokenName\": \"my-token\",\n        \"avatarUrl\": \"https://avatar.url\",\n        \"fullName\": \"Jane Doe\",\n        \"id\": \"clm8qv74h000008mlf08scq7k\",\n        \"subjectType\": \"USER\",\n        \"username\": \"user1@example.com\"\n      },\n      \"id\": \"clmaxoarx000008l2c5ayb9pt\",\n      \"isScimEnabled\": false,\n...\n      ],\n```\n\nCopy the top-level `id` from this response. This is your Organization ID.\n\nWhile you could have retrieved this value manually from the Astro UI, using the API lets you script this workflow and execute it on a regular basis.\n\n## Step 2: Request Workspace details from the API\n\nUsing the Organization ID you copied, you can now find the ID for the Workspace where you want to create your API token. \n\nRun the following command to list all Workspaces in your Organization:\n\n```bash\ncurl --location 'https://api.astronomer.io/platform/v1beta1/organizations/<your-organization-id>/workspaces' \\\n--header 'Authorization: Bearer <your-api-token>' \n```\n\nIf the command succeeds, the API returns a list of Workspaces similar to the following:\n\n```json {15}\n{\n  \"workspaces\": [\n    {\n      \"cicdEnforcedDefault\": true,\n      \"createdAt\": \"2023-09-08T12:00:00Z\",\n      \"createdBy\": {\n        \"apiTokenName\": \"my-token\",\n        \"avatarUrl\": \"https://avatar.url\",\n        \"fullName\": \"Jane Doe\",\n        \"id\": \"clm8qv74h000008mlf08scq7k\",\n        \"subjectType\": \"USER\",\n        \"username\": \"user1@example.com\"\n      },\n      \"description\": \"This is a test workspace\",\n      \"id\": \"clm8t5u4q000008jq4qoc3036\",\n      \"name\": \"My Workspace\",\n      \"organizationId\": \"clm8t5u4q000008jq4qoc3036\",\n      \"organizationName\": \"My Organization\",\n      \"updatedAt\": \"2023-09-08T13:30:00Z\",\n      \"updatedBy\": {\n        \"apiTokenName\": \"my-token\",\n        \"avatarUrl\": \"https://avatar.url\",\n        \"fullName\": \"Jane Doe\",\n        \"id\": \"clm8qv74h000008mlf08scq7k\",\n        \"subjectType\": \"USER\",\n        \"username\": \"user1@example.com\"\n      }\n    }\n  ]\n}\n```\n\nIn the response for your specific Workspace, copy the top-level `id`. This is your Workspace ID.\n\n<Tip>\n\nIf the API returns too many Workspaces, add some pagination parameters to your URL. For example, to limit your results to only the 20 most recently updated Workspaces, you can run:\n\n```bash\ncurl --location 'https://api.astronomer.io/platform/v1beta1/organizations/<your-organization-id>/workspaces?limit=20&sorts=updatedAt:asc' \\\n--header 'Authorization: Bearer <your-organization-api-token>'\n```\n\n</Tip>\n\n## Step 3: Update your token description using the API\n\nNow that you have both an Organization ID and a Workspace ID, you can create a Workspace API token using the Astro API.\n\n1. Run the following command to create a new Workspace API token:\n\n    ```bash\n    curl --location 'https://api.astronomer.io/iam/v1beta1/organizations/<your-organization-id>/tokens' \\                                            \n    --header 'Content-Type: application/json' \\\n    --header 'Authorization: Bearer <your-organization-api-token>' \\                                                                                                                  \n    --data '{\n        \"description\": \"I wrote this description using the Astro API!\",\n        \"entityId\": \"<your-workspace-id>\",\n        \"name\": \"My new API token\",\n        \"role\": \"WORKSPACE_MEMBER\",\n        \"type\": \"WORKSPACE\"\n    }'\n    ```\n\n    If the request was successful, the API will return a response with your new token's details.\n\n2. In the Astro UI, go to **Workspace Settings** > **Access Management** > **API Tokens** and find your Workspace API token. You should see your updated description under **Description**."
      },
      "docs/pages/versioning-and-support.mdx": {
        "markdown": "---\ntitle: Astro API versioning, maintenance, and support\ndescription: Learn how Astronomer versions and maintains the Astro API.\nslug: versioning-and-support\n---\n\nThe Astro API is currently in beta. The following policies apply to all beta versions of the Astro API.\n\n## Releases and versioning\n\nAll API endpoints include a release name in their URL that determines which release of the API you use.\n\nEach Astro API release name includes both a major version number and a release number, formatted as `<major-version>beta<release-number>`. For example, `v2beta3` is the third release of the second major version.\n\nFor a given release, Astronomer can make non-breaking changes in place without incrementing the release name. Astronomer can make breaking changes, also known as backward-incompatible changes, only between new releases. See [Version upgrades and breaking changes](#version-upgrades-and-breaking-changes).\n\n## Deprecations\n\nAstronomer reserves the right to mark specific API endpoints or features as deprecated within a given release. When an API endpoint is marked as deprecated, you will receive a notification and have 90 days to migrate away from the endpoint. After 90 days, Astronomer can make breaking changes to the endpoint, even within the same release. \n\n## Version upgrades and breaking changes\n\nAny upgrade between versioned API releases can include breaking changes, including for non-deprecated endpoints. For example, an upgrade from `v1beta1` to `v1beta2` can include breaking changes. However, another release of `v1beta1` can include a breaking change to an endpoint only if the endpoint has been marked as deprecated for at least 90 days.\n\n## API support\n\nAstronomer offers support only for the two most recent releases at any given time. If you are on an earlier version that's out of support, you must upgrade to one of the two most recent versions to receive support. Support cases for beta releases of the Astro API are treated with lower priority than other generally available Astro features.\n\nAstronomer reserves the right to shut down endpoints for a given beta release one year after all of its endpoints have equivalent functionality in a stable version.\n\n"
      },
      "/home/runner/work/docs/docs/api/fern/apis/platform/changelog/2024-04-12.md": {
        "markdown": "\n- You can now make requests to the [`Roles` endpoint](https://www.astronomer.io/docs/api/iam-api-reference/role/list-role-templates) to manage [custom roles](https://www.astronomer.io/docs/astro/customize-deployment-roles) in your Organization.\n- The endpoint `GET /organizations/{organizationId}/clusters` now accepts a `names` query parameter\n- The endpoint `GET /organizations/{organizationId}/deploymentss` now accepts a `names` query parameter\n- The endpoint `GET /organizations/{organizationId}/workspaces` now accepts a `names` query parameter\n  "
      },
      "/home/runner/work/docs/docs/api/fern/apis/platform/changelog/2024-04-23.md": {
        "markdown": "- The endpoint `POST /organizations/{organizationId}/deployments` now accepts an `isDevelopmentMode` query parameter\n"
      },
      "/home/runner/work/docs/docs/api/fern/apis/platform/changelog/2024-05-15.md": {
        "markdown": "## Summary\n\nThis update introduces new endpoints for managing deploys, including image deploys, DAG deploys, and deploy rollbacks. See [Astro documentation](https://docs.astronomer.io/astro/deploy-code) for more information.\n\n\n### Added\n\nNew endpoints:\n\n  - `GET /organizations/{organizationId}/deployments/{deploymentId}/deploys` to list deploys for a deployment.\n  - `POST /organizations/{organizationId}/deployments/{deploymentId}/deploys` to create a new deploy.\n  - `GET /organizations/{organizationId}/deployments/{deploymentId}/deploys/{deployId}` to retrieve a specific deploy.\n  - `POST /organizations/{organizationId}/deployments/{deploymentId}/deploys/{deployId}` to update an existing deploy.\n  - `POST /organizations/{organizationId}/deployments/{deploymentId}/deploys/{deployId}/finalize` to finalize a deploy.\n  - `POST /organizations/{organizationId}/deployments/{deploymentId}/deploys/{deployId}/rollback` to roll back a deploy.\n \nNew object schemas: \n\n  - `CreateDeployRequest`\n  - `Deploy`\n  - `DeploysPaginated`\n  - `FinalizeDeployRequest`\n  - `UpdateDeployRequest`\n  - `DeployRollbackRequest`\n"
      },
      "/home/runner/work/docs/docs/api/fern/apis/iam/changelog/2024-04-12.md": {
        "markdown": "\n- The endpoint `DELETE /organizations/{organizationId}/roles/{customRoleId}` now returns a \n  `deploymentRoles` attribute\n- The endpoint `GET /authorization/permission-groups` now returns a \n  `deploymentRoles` attribute\n- The endpoint `GET /organizations/{organizationId}/role-templates` now returns a \n  `deploymentRoles` attribute\n- The endpoint `GET /organizations/{organizationId}/roles` now returns a \n  `deploymentRoles` attribute\n- The endpoint `GET /organizations/{organizationId}/roles/{roleId}` now returns a \n  `deploymentRoles` attribute\n- The endpoint `POST /organizations/{organizationId}/roles` now returns a \n  `deploymentRoles` attribute\n- The endpoint `POST /organizations/{organizationId}/roles/{customRoleId}` now returns a \n  `deploymentRoles` attribute\n  "
      }
    },
    "search": {
      "type": "singleAlgoliaIndex",
      "value": {
        "type": "unversioned",
        "indexSegment": {
          "id": "seg_astronomer.docs.buildwithfern.com/docs/api_7cb5b5a0-1fa8-42e2-b1ce-fddbeb230861",
          "searchApiKey": "ODcwMTkzYTljNjJkNWNmYTZmNmUzNTVlMWFmOTFmZjE3OGY2Zjc0OGNhMGIyYmYzNTlkODdkYTA4NDQ2ZTEwZWZpbHRlcnM9aW5kZXhTZWdtZW50SWQlM0FzZWdfYXN0cm9ub21lci5kb2NzLmJ1aWxkd2l0aGZlcm4uY29tJTJGZG9jcyUyRmFwaV83Y2I1YjVhMC0xZmE4LTQyZTItYjFjZS1mZGRiZWIyMzA4NjEmdmFsaWRVbnRpbD0xNzE2NjA0ODgy"
        }
      }
    },
    "id": "docs_definition_92cc7b7a-5c7d-4f36-9fae-844b4a53ccdf"
  },
  "lightModeEnabled": true
}
