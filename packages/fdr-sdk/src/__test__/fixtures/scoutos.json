{
  "baseUrl": {
    "domain": "scoutos.docs.buildwithfern.com"
  },
  "definition": {
    "config": {
      "navigation": {
        "tabs": [
          {
            "type": "group",
            "title": "Docs",
            "icon": "home",
            "items": [
              {
                "type": "page",
                "id": "pages/welcome.mdx",
                "title": "Welcome",
                "urlSlug": "welcome",
                "hidden": false
              },
              {
                "type": "page",
                "id": "pages/quick-start.mdx",
                "title": "Quick Start",
                "urlSlug": "quick-start",
                "hidden": false
              },
              {
                "type": "section",
                "title": "Workflows",
                "urlSlug": "workflows",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/docs/workflows/creating-workflows.mdx",
                    "title": "Creating Workflows",
                    "urlSlug": "creating-workflows",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/docs/workflows/workflow-logic-state.mdx",
                    "title": "Workflow Logic & State",
                    "urlSlug": "workflow-logic-state",
                    "hidden": false
                  },
                  {
                    "type": "section",
                    "title": "Blocks",
                    "urlSlug": "blocks",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/discord_message.mdx",
                        "title": "Discord Message",
                        "urlSlug": "discord-message",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/save.mdx",
                        "title": "Save",
                        "urlSlug": "save",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/llm.mdx",
                        "title": "Llm",
                        "urlSlug": "llm",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/scrape.mdx",
                        "title": "Scrape",
                        "urlSlug": "scrape",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/copilot_links.mdx",
                        "title": "Copilot Links",
                        "urlSlug": "copilot-links",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/text.mdx",
                        "title": "Text",
                        "urlSlug": "text",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/copilot_message.mdx",
                        "title": "Copilot Message",
                        "urlSlug": "copilot-message",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/http.mdx",
                        "title": "Http",
                        "urlSlug": "http",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/slack_message.mdx",
                        "title": "Slack Message",
                        "urlSlug": "slack-message",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/copilot_thinking_text.mdx",
                        "title": "Copilot Thinking Text",
                        "urlSlug": "copilot-thinking-text",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/conditional.mdx",
                        "title": "Conditional",
                        "urlSlug": "conditional",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/json.mdx",
                        "title": "Json",
                        "urlSlug": "json",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/extract_links.mdx",
                        "title": "Extract Links",
                        "urlSlug": "extract-links",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/input.mdx",
                        "title": "Input",
                        "urlSlug": "input",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/stop.mdx",
                        "title": "Stop",
                        "urlSlug": "stop",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/collection.mdx",
                        "title": "Collection",
                        "urlSlug": "collection",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/delay.mdx",
                        "title": "Delay",
                        "urlSlug": "delay",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/inspect_graph.mdx",
                        "title": "Inspect Graph",
                        "urlSlug": "inspect-graph",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/workflows/blocks/postgres.mdx",
                        "title": "Postgres",
                        "urlSlug": "postgres",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false,
                    "overviewPageId": "pages/docs/workflows/blocks/overview.mdx"
                  },
                  {
                    "type": "page",
                    "id": "pages/docs/workflows/running-workflows.mdx",
                    "title": "Running Workflows",
                    "urlSlug": "running-workflows",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/docs/workflows/console.mdx",
                    "title": "Console",
                    "urlSlug": "console",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/docs/workflows/history.mdx",
                    "title": "History",
                    "urlSlug": "history",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/docs/workflows/logs.mdx",
                    "title": "Logs",
                    "urlSlug": "logs",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/docs/settings/environment-variables.mdx",
                    "title": "Environment Variables",
                    "urlSlug": "environment-variables",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false,
                "overviewPageId": "pages/docs/workflows/overview.mdx"
              },
              {
                "type": "section",
                "title": "Collections",
                "urlSlug": "collections",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/docs/collections/documents.mdx",
                    "title": "Documents",
                    "urlSlug": "documents",
                    "hidden": false
                  },
                  {
                    "type": "section",
                    "title": "Uploading & Creating Documents",
                    "urlSlug": "uploading-creating-documents",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "pages/docs/collections/uploading-creating-documents/web-scraping.mdx",
                        "title": "Scraping a Website",
                        "urlSlug": "scraping-a-website",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/collections/uploading-creating-documents/uploading-files.mdx",
                        "title": "Uploading Files",
                        "urlSlug": "uploading-files",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/docs/collections/uploading-creating-documents/from-scratch.mdx",
                        "title": "Creating Documents Directly in Scout",
                        "urlSlug": "creating-documents-directly-in-scout",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false,
                    "overviewPageId": "pages/docs/collections/uploading-creating-documents/overview.mdx"
                  }
                ],
                "skipUrlSlug": false,
                "overviewPageId": "pages/docs/collections/overview.mdx"
              },
              {
                "type": "section",
                "title": "Settings",
                "urlSlug": "settings",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/docs/settings/api-keys.mdx",
                    "title": "API Keys",
                    "urlSlug": "api-keys",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/docs/settings/environment-variables.mdx",
                    "title": "Environment Variables",
                    "urlSlug": "environment-variables",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Integrations",
                "urlSlug": "integrations",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/docs/integrations/slack-bot.mdx",
                    "title": "Slack Bot",
                    "urlSlug": "slack-bot",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/docs/integrations/scout-copilot.mdx",
                    "title": "Scout Copilot",
                    "urlSlug": "scout-copilot",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/docs/integrations/command-component.mdx",
                    "title": "Command Component",
                    "urlSlug": "command-component",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlug": "docs",
            "skipUrlSlug": false
          },
          {
            "type": "group",
            "title": "Workflow Templates",
            "icon": "book",
            "items": [
              {
                "type": "page",
                "id": "pages/examples/whats-your-use-case.mdx",
                "title": "What's your use case?",
                "urlSlug": "what-s-your-use-case",
                "hidden": false
              },
              {
                "type": "section",
                "title": "Use Cases",
                "urlSlug": "use-cases",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "section",
                    "title": "Customer Support",
                    "icon": "life-ring",
                    "urlSlug": "customer-support",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "pages/examples/customer-support-reply.mdx",
                        "title": "Customer Support Reply Assistant",
                        "urlSlug": "customer-support-reply-assistant",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/customer-query-router.mdx",
                        "title": "Customer Query Router",
                        "urlSlug": "customer-query-router",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/automated-support-bot.mdx",
                        "title": "Automated Support Bot",
                        "urlSlug": "automated-support-bot",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/support-ticket-classifier.mdx",
                        "title": "Support Ticket Classifier",
                        "urlSlug": "support-ticket-classifier",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/internal-search-wiki.mdx",
                        "title": "Internal Search Wiki",
                        "urlSlug": "internal-search-wiki",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/customer-issue-escalation.mdx",
                        "title": "Customer Issue Escalation Report Builder",
                        "urlSlug": "customer-issue-escalation-report-builder",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false,
                    "overviewPageId": "pages/examples/customer-support-overview.mdx"
                  },
                  {
                    "type": "section",
                    "title": "Sales",
                    "icon": "cash-register",
                    "urlSlug": "sales",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "pages/examples/responding-to-rfps.mdx",
                        "title": "Responding to RFPs",
                        "urlSlug": "responding-to-rf-ps",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/sales-proposal-generator.mdx",
                        "title": "Sales Proposal Generator",
                        "urlSlug": "sales-proposal-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/sales-outreach-email.mdx",
                        "title": "Sales Outreach Email Assistant",
                        "urlSlug": "sales-outreach-email-assistant",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/sales-demo-script.mdx",
                        "title": "Sales Demo Script Generator",
                        "urlSlug": "sales-demo-script-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/sales-playbook-generator.mdx",
                        "title": "Sales Playbook Generator",
                        "urlSlug": "sales-playbook-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/sales-objection-handling.mdx",
                        "title": "Sales Objection Handling Guide",
                        "urlSlug": "sales-objection-handling-guide",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/product-feature-request.mdx",
                        "title": "Product Feature Request Generator",
                        "urlSlug": "product-feature-request-generator",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false,
                    "overviewPageId": "pages/examples/sales-overview.mdx"
                  },
                  {
                    "type": "section",
                    "title": "Marketing & Content Creation",
                    "icon": "newspaper",
                    "urlSlug": "marketing-content-creation",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "pages/examples/writing-blogs-landing.mdx",
                        "title": "Writing Blogs & Landing Pages",
                        "urlSlug": "writing-blogs-landing-pages",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/personalized-marketing-campaigns.mdx",
                        "title": "Creating Personalized Marketing Campaigns",
                        "urlSlug": "creating-personalized-marketing-campaigns",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/social-media-content.mdx",
                        "title": "Automating Social Media Content Creation",
                        "urlSlug": "automating-social-media-content-creation",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/seo-content-suggestion.mdx",
                        "title": "SEO Content Suggestion Tool",
                        "urlSlug": "seo-content-suggestion-tool",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/press-release-drafting.mdx",
                        "title": "Press Release Drafting Assistant",
                        "urlSlug": "press-release-drafting-assistant",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/marketing-campaign-idea.mdx",
                        "title": "Marketing Campaign Idea Generator",
                        "urlSlug": "marketing-campaign-idea-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/content-personalization.mdx",
                        "title": "Content Personalization Engine",
                        "urlSlug": "content-personalization-engine",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/content-calendar.mdx",
                        "title": "Content Calendar Builder",
                        "urlSlug": "content-calendar-builder",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/brand-voice-guide.mdx",
                        "title": "Brand Voice Guide Generator",
                        "urlSlug": "brand-voice-guide-generator",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false,
                    "overviewPageId": "pages/examples/marketing-content-creation-overview.mdx"
                  },
                  {
                    "type": "section",
                    "title": "Customer Success",
                    "icon": "face-smile",
                    "urlSlug": "customer-success",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "pages/examples/client-onboarding-guide.mdx",
                        "title": "Client Onboarding Plan Generator",
                        "urlSlug": "client-onboarding-plan-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/customer-retention-email.mdx",
                        "title": "Customer Retention Email Sequence Generator",
                        "urlSlug": "customer-retention-email-sequence-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/customer-success-playbook.mdx",
                        "title": "Customer Success Playbook Generator",
                        "urlSlug": "customer-success-playbook-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/client-feedback-summarizer.mdx",
                        "title": "Client Satisfaction Feedback Summarizer",
                        "urlSlug": "client-satisfaction-feedback-summarizer",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/internal-search-wiki.mdx",
                        "title": "Internal Search Wiki",
                        "urlSlug": "internal-search-wiki",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/customer-issue-escalation.mdx",
                        "title": "Customer Issue Escalation Report Builder",
                        "urlSlug": "customer-issue-escalation-report-builder",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false,
                    "overviewPageId": "pages/examples/customer-success-overview.mdx"
                  },
                  {
                    "type": "section",
                    "title": "Product Management",
                    "icon": "binoculars",
                    "urlSlug": "product-management",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "pages/examples/product-feedback-discovery.mdx",
                        "title": "Augmenting Product Feedback Discovery",
                        "urlSlug": "augmenting-product-feedback-discovery",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/product-documentation-generator.mdx",
                        "title": "Product Documentation Generator",
                        "urlSlug": "product-documentation-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/product-feature-request.mdx",
                        "title": "Product Feature Request Generator",
                        "urlSlug": "product-feature-request-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/product-roadmap-generator.mdx",
                        "title": "Product Roadmap Generator",
                        "urlSlug": "product-roadmap-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/feature-comparison-matrix.mdx",
                        "title": "Feature Comparison Matrix Generator",
                        "urlSlug": "feature-comparison-matrix-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/user-manual-generator.mdx",
                        "title": "User Manual Generator",
                        "urlSlug": "user-manual-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/market-research-report.mdx",
                        "title": "Market Research Report Generator",
                        "urlSlug": "market-research-report-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/competitive-analysis-summarizer.mdx",
                        "title": "Competitive Analysis Summarizer",
                        "urlSlug": "competitive-analysis-summarizer",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false,
                    "overviewPageId": "pages/examples/product-management-overview.mdx"
                  },
                  {
                    "type": "section",
                    "title": "Legal & Compliance",
                    "icon": "gavel",
                    "urlSlug": "legal-compliance",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "pages/examples/security-questionnaires.mdx",
                        "title": "Responding to Security Questionnaires",
                        "urlSlug": "responding-to-security-questionnaires",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/contract-review-assistant.mdx",
                        "title": "Contract Review Assistant",
                        "urlSlug": "contract-review-assistant",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/compliance-doc-generator.mdx",
                        "title": "Compliance Document Generator",
                        "urlSlug": "compliance-document-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/legal-discovery-doc.mdx",
                        "title": "Legal Discovery Document Summarizer",
                        "urlSlug": "legal-discovery-document-summarizer",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/internal-compliance-faq.mdx",
                        "title": "Internal Compliance Training FAQ",
                        "urlSlug": "internal-compliance-training-faq",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/saas-security-risk.mdx",
                        "title": "SAAS Security Risk Assessment Report Generator",
                        "urlSlug": "saas-security-risk-assessment-report-generator",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false,
                    "overviewPageId": "pages/examples/legal-compliance-overview.mdx"
                  },
                  {
                    "type": "section",
                    "title": "Internal Operations & Team Management",
                    "icon": "people-group",
                    "urlSlug": "internal-operations-team-management",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "pages/examples/employee-onboarding.mdx",
                        "title": "Enhancing Employee Onboarding",
                        "urlSlug": "enhancing-employee-onboarding",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/internal-policy-faq.mdx",
                        "title": "Internal Policy FAQ Generator",
                        "urlSlug": "internal-policy-faq-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/team-recognition-plan.mdx",
                        "title": "Team Recognition & Reward Plan",
                        "urlSlug": "team-recognition-reward-plan",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/meeting-transcript-summarizer.mdx",
                        "title": "Meeting Transcript Summarizer",
                        "urlSlug": "meeting-transcript-summarizer",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/project-update-summarizer.mdx",
                        "title": "Project Update Summarizer",
                        "urlSlug": "project-update-summarizer",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/board-meeting-report.mdx",
                        "title": "Board Meeting Report Generator",
                        "urlSlug": "board-meeting-report-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/job-description-generator.mdx",
                        "title": "Job Description Generator",
                        "urlSlug": "job-description-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/board-update-summarizer.mdx",
                        "title": "Board Update Summarizer",
                        "urlSlug": "board-update-summarizer",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false,
                    "overviewPageId": "pages/examples/internal-operations-team-management-overview.mdx"
                  },
                  {
                    "type": "section",
                    "title": "Client Reporting & Analysis",
                    "icon": "magnifying-glass-chart",
                    "urlSlug": "client-reporting-analysis",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "pages/examples/customer-background-report.mdx",
                        "title": "Take Customer Background Data and Generate a Report",
                        "urlSlug": "take-customer-background-data-and-generate-a-report",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/client-project-proposal.mdx",
                        "title": "Client Project Proposal Builder",
                        "urlSlug": "client-project-proposal-builder",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/investor-update-summarizer.mdx",
                        "title": "Investor Update Summarizer",
                        "urlSlug": "investor-update-summarizer",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/client-feedback-summarizer.mdx",
                        "title": "Client Satisfaction Feedback Summarizer",
                        "urlSlug": "client-satisfaction-feedback-summarizer",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/rfp-response-generator.mdx",
                        "title": "RFP Response Generator",
                        "urlSlug": "rfp-response-generator",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false,
                    "overviewPageId": "pages/examples/client-reporting-analysis-overview.mdx"
                  },
                  {
                    "type": "section",
                    "title": "Startup Toolkit",
                    "icon": "toolbox",
                    "urlSlug": "startup-toolkit",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "pages/examples/build-ai-apps.mdx",
                        "title": "Build Custom AI Apps",
                        "urlSlug": "build-custom-ai-apps",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/product-launch-plan.mdx",
                        "title": "Product Launch Plan Builder",
                        "urlSlug": "product-launch-plan-builder",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/knowledge-base-article.mdx",
                        "title": "Knowledge Base Article Generator",
                        "urlSlug": "knowledge-base-article-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/case-study-generator.mdx",
                        "title": "Case Study Generator",
                        "urlSlug": "case-study-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/press-release-drafting.mdx",
                        "title": "Press Release Drafting Assistant",
                        "urlSlug": "press-release-drafting-assistant",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/brand-voice-guide.mdx",
                        "title": "Brand Voice Guide Generator",
                        "urlSlug": "brand-voice-guide-generator",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/examples/seo-content-suggestion.mdx",
                        "title": "SEO Content Suggestion Tool",
                        "urlSlug": "seo-content-suggestion-tool",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false,
                    "overviewPageId": "pages/examples/startup-toolkit-overview.mdx"
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlug": "workflow-templates",
            "skipUrlSlug": false
          },
          {
            "type": "group",
            "title": "API & SDK",
            "icon": "code",
            "items": [
              {
                "type": "apiV2",
                "node": {
                  "id": "cf613558-95cd-4318-99a9-c433d14f2875",
                  "type": "apiReference",
                  "title": "Endpoints",
                  "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                  "paginated": false,
                  "slug": "api-sdk/endpoints",
                  "hideTitle": false,
                  "showErrors": false,
                  "children": [
                    {
                      "id": "cf613558-95cd-4318-99a9-c433d14f2875:subpackage_workflows",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_workflows.list",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_workflows.list",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "List all workflows",
                          "slug": "api-sdk/endpoints/workflows/list"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_workflows.create",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_workflows.create",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Create a new workflow",
                          "slug": "api-sdk/endpoints/workflows/create"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_workflows.get",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_workflows.get",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Get a workflow by ID",
                          "slug": "api-sdk/endpoints/workflows/get"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_workflows.update",
                          "type": "endpoint",
                          "method": "PUT",
                          "endpointId": "endpoint_workflows.update",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Update a workflow",
                          "slug": "api-sdk/endpoints/workflows/update"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_workflows.delete",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_workflows.delete",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Delete a workflow",
                          "slug": "api-sdk/endpoints/workflows/delete"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_workflows.run+endpoint_workflows.run_stream",
                          "type": "endpointPair",
                          "stream": {
                            "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_workflows.run_stream",
                            "type": "endpoint",
                            "method": "POST",
                            "endpointId": "endpoint_workflows.run_stream",
                            "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                            "availability": "beta",
                            "isResponseStream": true,
                            "title": "Execute a workflow.",
                            "slug": "api-sdk/endpoints/workflows/run-stream"
                          },
                          "nonStream": {
                            "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_workflows.run",
                            "type": "endpoint",
                            "method": "POST",
                            "endpointId": "endpoint_workflows.run",
                            "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                            "availability": "beta",
                            "isResponseStream": false,
                            "title": "Execute a workflow.",
                            "slug": "api-sdk/endpoints/workflows/run"
                          }
                        }
                      ],
                      "title": "Workflows",
                      "slug": "api-sdk/endpoints/workflows",
                      "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                      "pointsTo": "api-sdk/endpoints/workflows/list"
                    },
                    {
                      "id": "cf613558-95cd-4318-99a9-c433d14f2875:subpackage_environments",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_environments.list",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_environments.list",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "List all environments for a workflow",
                          "slug": "api-sdk/endpoints/environments/list"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_environments.update",
                          "type": "endpoint",
                          "method": "PUT",
                          "endpointId": "endpoint_environments.update",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Update a workflow environment",
                          "slug": "api-sdk/endpoints/environments/update"
                        }
                      ],
                      "title": "Environments",
                      "slug": "api-sdk/endpoints/environments",
                      "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                      "pointsTo": "api-sdk/endpoints/environments/list"
                    },
                    {
                      "id": "cf613558-95cd-4318-99a9-c433d14f2875:subpackage_revisions",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_revisions.list",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_revisions.list",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "List all revisions for a workflow",
                          "slug": "api-sdk/endpoints/revisions/list"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_revisions.update",
                          "type": "endpoint",
                          "method": "PUT",
                          "endpointId": "endpoint_revisions.update",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Make a revision the active revision for a workflow",
                          "slug": "api-sdk/endpoints/revisions/update"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_revisions.delete",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_revisions.delete",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Delete a revision",
                          "slug": "api-sdk/endpoints/revisions/delete"
                        }
                      ],
                      "title": "Revisions",
                      "slug": "api-sdk/endpoints/revisions",
                      "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                      "pointsTo": "api-sdk/endpoints/revisions/list"
                    },
                    {
                      "id": "cf613558-95cd-4318-99a9-c433d14f2875:subpackage_usage",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_usage.get",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_usage.get",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Get usage information for the current organization.",
                          "slug": "api-sdk/endpoints/usage/get"
                        }
                      ],
                      "title": "Usage",
                      "slug": "api-sdk/endpoints/usage",
                      "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                      "pointsTo": "api-sdk/endpoints/usage/get"
                    },
                    {
                      "id": "cf613558-95cd-4318-99a9-c433d14f2875:subpackage_workflowLogs",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_workflowLogs.get",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_workflowLogs.get",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Get logs for a workflow",
                          "slug": "api-sdk/endpoints/workflow-logs/get"
                        }
                      ],
                      "title": "Workflow Logs",
                      "slug": "api-sdk/endpoints/workflow-logs",
                      "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                      "pointsTo": "api-sdk/endpoints/workflow-logs/get"
                    },
                    {
                      "id": "cf613558-95cd-4318-99a9-c433d14f2875:subpackage_copilots",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_copilots.list",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_copilots.list",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "List all copilots",
                          "slug": "api-sdk/endpoints/copilots/list"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_copilots.create",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_copilots.create",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Create a new copilot",
                          "slug": "api-sdk/endpoints/copilots/create"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_copilots.get",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_copilots.get",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Get a copilot",
                          "slug": "api-sdk/endpoints/copilots/get"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_copilots.update",
                          "type": "endpoint",
                          "method": "PUT",
                          "endpointId": "endpoint_copilots.update",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Update a copilot",
                          "slug": "api-sdk/endpoints/copilots/update"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_copilots.delete",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_copilots.delete",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Delete a copilot",
                          "slug": "api-sdk/endpoints/copilots/delete"
                        }
                      ],
                      "title": "Copilots",
                      "slug": "api-sdk/endpoints/copilots",
                      "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                      "pointsTo": "api-sdk/endpoints/copilots/list"
                    },
                    {
                      "id": "cf613558-95cd-4318-99a9-c433d14f2875:subpackage_collections",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_collections.get",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_collections.get",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Get a collection by ID.",
                          "slug": "api-sdk/endpoints/collections/get"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_collections.create",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_collections.create",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Create a collection.",
                          "slug": "api-sdk/endpoints/collections/create"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_collections.update",
                          "type": "endpoint",
                          "method": "PUT",
                          "endpointId": "endpoint_collections.update",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Update a collection by ID.",
                          "slug": "api-sdk/endpoints/collections/update"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_collections.delete",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_collections.delete",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Delete a collection by ID.",
                          "slug": "api-sdk/endpoints/collections/delete"
                        }
                      ],
                      "title": "Collections",
                      "slug": "api-sdk/endpoints/collections",
                      "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                      "pointsTo": "api-sdk/endpoints/collections/get"
                    },
                    {
                      "id": "cf613558-95cd-4318-99a9-c433d14f2875:subpackage_documents",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_documents.get",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_documents.get",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Get a document by ID.",
                          "slug": "api-sdk/endpoints/documents/get"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_documents.create",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_documents.create",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Create a document in a collection.",
                          "slug": "api-sdk/endpoints/documents/create"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_documents.update",
                          "type": "endpoint",
                          "method": "PUT",
                          "endpointId": "endpoint_documents.update",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Update a document by ID.",
                          "slug": "api-sdk/endpoints/documents/update"
                        },
                        {
                          "id": "cf613558-95cd-4318-99a9-c433d14f2875:endpoint_documents.delete",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_documents.delete",
                          "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Delete a document by ID.",
                          "slug": "api-sdk/endpoints/documents/delete"
                        }
                      ],
                      "title": "Documents",
                      "slug": "api-sdk/endpoints/documents",
                      "apiDefinitionId": "cf613558-95cd-4318-99a9-c433d14f2875",
                      "pointsTo": "api-sdk/endpoints/documents/get"
                    }
                  ],
                  "pointsTo": "api-sdk/endpoints/workflows/list"
                }
              }
            ],
            "urlSlug": "api-sdk",
            "skipUrlSlug": false
          }
        ]
      },
      "colorsV3": {
        "type": "darkAndLight",
        "light": {
          "accentPrimary": {
            "r": 0,
            "g": 0,
            "b": 0,
            "a": 1
          },
          "background": {
            "type": "solid",
            "r": 255,
            "g": 255,
            "b": 255,
            "a": 1
          }
        },
        "dark": {
          "accentPrimary": {
            "r": 255,
            "g": 255,
            "b": 255,
            "a": 1
          },
          "background": {
            "type": "solid",
            "r": 0,
            "g": 0,
            "b": 0,
            "a": 1
          }
        }
      },
      "navbarLinks": [
        {
          "type": "secondary",
          "text": "Join Our Slack",
          "url": "https://studio.scoutos.com/slack"
        },
        {
          "type": "primary",
          "text": "Access Scout",
          "url": "https://studio.scoutos.com/sign-in"
        }
      ],
      "title": "Scout | Documentation",
      "favicon": "4a20efec-d73c-48f4-8d5c-1113b59cce89",
      "layout": {
        "searchbarPlacement": "HEADER",
        "tabsPlacement": "HEADER",
        "contentAlignment": "CENTER",
        "headerPosition": "FIXED",
        "disableHeader": false
      },
      "js": {
        "files": [
          {
            "fileId": "94a2faf1-778e-40cd-b55e-a1af47108af9",
            "strategy": "lazyOnload"
          },
          {
            "fileId": "e4327225-0c59-435d-b931-b2017c547ba8",
            "strategy": "lazyOnload"
          },
          {
            "fileId": "11aaed8c-e4e7-4642-9eba-e118266c864d",
            "strategy": "lazyOnload"
          },
          {
            "fileId": "9d3f963b-4da4-4b3d-911c-97407ac7ab6f",
            "strategy": "lazyOnload"
          }
        ]
      }
    },
    "apis": {
      "cf613558-95cd-4318-99a9-c433d14f2875": {
        "id": "cf613558-95cd-4318-99a9-c433d14f2875",
        "rootPackage": {
          "endpoints": [],
          "subpackages": [
            "subpackage_workflows",
            "subpackage_environments",
            "subpackage_revisions",
            "subpackage_usage",
            "subpackage_workflowLogs",
            "subpackage_copilots",
            "subpackage_collections",
            "subpackage_documents"
          ],
          "types": [
            "type_:ActorType",
            "type_:Actor",
            "type_:ApiKeyIdentity",
            "type_:BlockInputBlockConfigItem",
            "type_:BlockInput",
            "type_:BlockOutputBlockConfigItem",
            "type_:BlockOutput",
            "type_:BlockConfigItemBoolean",
            "type_:BlockConfigItemJson",
            "type_:BlockConfigItemLlm",
            "type_:BlockConfigItemNumberDefaultValue",
            "type_:BlockConfigItemNumberMinimumValue",
            "type_:BlockConfigItemNumberMaximumValue",
            "type_:BlockConfigItemNumberValue",
            "type_:BlockConfigItemNumber",
            "type_:BlockConfigItemSelect",
            "type_:BlockConfigItemTextLongValue",
            "type_:BlockConfigItemTextLong",
            "type_:BlockConfigItemTextShort",
            "type_:BlockRunCompletedEnvironment",
            "type_:BlockRunCompleted",
            "type_:BlockRunCompletedData",
            "type_:BlockRunFailedEnvironment",
            "type_:BlockRunFailed",
            "type_:BlockRunFailedData",
            "type_:BlockRunStartedEnvironment",
            "type_:BlockRunStarted",
            "type_:BlockRunStartedData",
            "type_:BlockRunUsage",
            "type_:BlockStateUpdatedEnvironment",
            "type_:BlockStateUpdated",
            "type_:BlockStateUpdatedDataUpdateType",
            "type_:BlockStateUpdatedData",
            "type_:Copilot",
            "type_:CopilotConfigMode",
            "type_:CopilotConfigFabValue",
            "type_:CopilotConfig",
            "type_:Dependency",
            "type_:EdgeUi",
            "type_:Environment",
            "type_:EnvironmentConfig",
            "type_:EnvironmentDeploymentConfigRevisionLookup",
            "type_:EnvironmentDeploymentConfig",
            "type_:EnvironmentDeploymentDocument",
            "type_:EventName",
            "type_:EventVersion",
            "type_:HttpValidationError",
            "type_:IdentityDetails",
            "type_:Identity",
            "type_:IdentityTypes",
            "type_:NodeUi",
            "type_:Position",
            "type_:PromptRole",
            "type_:Prompt",
            "type_:ResponseModelUsage",
            "type_:SelectOptionItem",
            "type_:Usage",
            "type_:UserIdentity",
            "type_:ValidationErrorLocItem",
            "type_:ValidationError",
            "type_:Workflow",
            "type_:WorkflowConfigInput",
            "type_:WorkflowConfigOutput",
            "type_:WorkflowRunStopReason",
            "type_:WorkflowRunStateValue",
            "type_:WorkflowRun",
            "type_:WorkflowRunCompletedEnvironment",
            "type_:WorkflowRunCompleted",
            "type_:WorkflowRunCompletedData",
            "type_:WorkflowRunEventEnvironment",
            "type_:WorkflowRunEventData",
            "type_:WorkflowRunEvent",
            "type_:WorkflowRunFailedEnvironment",
            "type_:WorkflowRunFailed",
            "type_:WorkflowRunFailedData",
            "type_:WorkflowRunResponse",
            "type_:WorkflowRunStartedEnvironment",
            "type_:WorkflowRunStarted",
            "type_:WorkflowRunStartedData",
            "type_:AppsServiceHandlersCreateCopilotResponse",
            "type_:AppsServiceHandlersCreateWorkflowResponse",
            "type_:AppsServiceHandlersDeleteCopilotResponse",
            "type_:AppsServiceHandlersDeleteWorkflowResponse",
            "type_:AppsServiceHandlersDeleteWorkflowRevisionResponse",
            "type_:AppsServiceHandlersGetCopilotResponse",
            "type_:AppsServiceHandlersGetWorkflowResponse",
            "type_:AppsServiceHandlersGetWorkflowEnvironmentsResponse",
            "type_:AppsServiceHandlersListCopilotsResponse",
            "type_:AppsServiceHandlersListWorkflowRevisionsResponse",
            "type_:AppsServiceHandlersListWorkflowsResponse",
            "type_:AppsServiceHandlersPromoteWorkflowRevisionResponse",
            "type_:AppsServiceHandlersUpdateCopilotResponse",
            "type_:AppsServiceHandlersUpdateWorkflowResponse",
            "type_:AppsServiceHandlersUpdateWorkflowEnvironmentResponse",
            "type_:Message",
            "type_:MessageChunk",
            "type_:Collection",
            "type_:CollectionConfigInputColumnsItem",
            "type_:CollectionConfigInput",
            "type_:CollectionConfigOutputColumnsItem",
            "type_:CollectionConfigOutput",
            "type_:ColumnTypeItemCheckBox",
            "type_:ColumnTypeItemJson",
            "type_:ColumnTypeItemNumber",
            "type_:ColumnTypeItemSelect",
            "type_:ColumnTypeItemTextLong",
            "type_:ColumnTypeItemTextShort",
            "type_:ColumnTypeItemUrl",
            "type_:ContentType",
            "type_:Document",
            "type_:DocumentContent",
            "type_:DocumentDataInputContent",
            "type_:DocumentDataInput",
            "type_:DocumentDataOutputContent",
            "type_:DocumentDataOutput",
            "type_:NumberConfigDefaultValue",
            "type_:NumberConfigMinValue",
            "type_:NumberConfigMaxValue",
            "type_:NumberConfig",
            "type_:EvalServiceHandlersCreateCollectionResponse",
            "type_:EvalServiceHandlersCreateDocumentResponse",
            "type_:EvalServiceHandlersDeleteCollectionResponse",
            "type_:EvalServiceHandlersDeleteDocumentResponse",
            "type_:EvalServiceHandlersGetCollectionResponse",
            "type_:EvalServiceHandlersGetCollectionsResponse",
            "type_:EvalServiceHandlersGetDocumentResponse",
            "type_:EvalServiceHandlersGetDocumentsResponse",
            "type_:EvalServiceHandlersUpdateCollectionResponse",
            "type_:EvalServiceHandlersUpdateDocumentResponse"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_workflows:WorkflowsRunStreamRequestInputsValue": {
            "name": "WorkflowsRunStreamRequestInputsValue",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "type": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_workflows:WorkflowsRunRequestInputsValue": {
            "name": "WorkflowsRunRequestInputsValue",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "type": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_documents:DocumentsCreateRequest": {
            "name": "DocumentsCreateRequest",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:DocumentDataInput"
                  },
                  "displayName": "Document Data Input"
                },
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DocumentDataInput"
                    }
                  }
                }
              ]
            }
          },
          "type_:ActorType": {
            "name": "ActorType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "external"
                },
                {
                  "value": "scoutos"
                }
              ]
            }
          },
          "type_:Actor": {
            "name": "Actor",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ActorType"
                  }
                }
              ]
            }
          },
          "type_:ApiKeyIdentity": {
            "name": "ApiKeyIdentity",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "api_key",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockInputBlockConfigItem": {
            "name": "BlockInputBlockConfigItem",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockConfigItemBoolean"
                  },
                  "displayName": "Block Config Item Boolean"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockConfigItemJson"
                  },
                  "displayName": "Block Config Item JSON"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockConfigItemNumber"
                  },
                  "displayName": "Block Config Item Number"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockConfigItemLlm"
                  },
                  "displayName": "Block Config Item Llm"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockConfigItemSelect"
                  },
                  "displayName": "Block Config Item Select"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockConfigItemTextLong"
                  },
                  "displayName": "Block Config Item Text Long"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockConfigItemTextShort"
                  },
                  "displayName": "Block Config Item Text Short"
                }
              ]
            }
          },
          "type_:BlockInput": {
            "name": "BlockInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "block_archetype_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "availability": "Deprecated",
                  "key": "block_config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:BlockInputBlockConfigItem"
                      }
                    }
                  }
                },
                {
                  "key": "block_display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "block_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "block_inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "block_is_output",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "dependencies",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Dependency"
                      }
                    }
                  }
                },
                {
                  "key": "input_schema",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "availability": "Deprecated",
                  "key": "output_schema",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "ui",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NodeUi"
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockOutputBlockConfigItem": {
            "name": "BlockOutputBlockConfigItem",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockConfigItemBoolean"
                  },
                  "displayName": "Block Config Item Boolean"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockConfigItemJson"
                  },
                  "displayName": "Block Config Item JSON"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockConfigItemNumber"
                  },
                  "displayName": "Block Config Item Number"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockConfigItemLlm"
                  },
                  "displayName": "Block Config Item Llm"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockConfigItemSelect"
                  },
                  "displayName": "Block Config Item Select"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockConfigItemTextLong"
                  },
                  "displayName": "Block Config Item Text Long"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockConfigItemTextShort"
                  },
                  "displayName": "Block Config Item Text Short"
                }
              ]
            }
          },
          "type_:BlockOutput": {
            "name": "BlockOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "block_archetype_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "availability": "Deprecated",
                  "key": "block_config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:BlockOutputBlockConfigItem"
                      }
                    }
                  }
                },
                {
                  "key": "block_display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "block_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "block_inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "block_is_output",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "dependencies",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Dependency"
                      }
                    }
                  }
                },
                {
                  "key": "input_schema",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "availability": "Deprecated",
                  "key": "output_schema",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "ui",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NodeUi"
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockConfigItemBoolean": {
            "name": "BlockConfigItemBoolean",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "boolean"
                    }
                  }
                },
                {
                  "key": "default_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockConfigItemJson": {
            "name": "BlockConfigItemJson",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "json"
                    }
                  }
                },
                {
                  "key": "default_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockConfigItemLlm": {
            "name": "BlockConfigItemLlm",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "prompt"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Prompt"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockConfigItemNumberDefaultValue": {
            "name": "BlockConfigItemNumberDefaultValue",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockConfigItemNumberMinimumValue": {
            "name": "BlockConfigItemNumberMinimumValue",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockConfigItemNumberMaximumValue": {
            "name": "BlockConfigItemNumberMaximumValue",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockConfigItemNumberValue": {
            "name": "BlockConfigItemNumberValue",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockConfigItemNumber": {
            "name": "BlockConfigItemNumber",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "number"
                    }
                  }
                },
                {
                  "key": "default_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BlockConfigItemNumberDefaultValue"
                    }
                  }
                },
                {
                  "key": "minimum_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BlockConfigItemNumberMinimumValue"
                    }
                  }
                },
                {
                  "key": "maximum_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BlockConfigItemNumberMaximumValue"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BlockConfigItemNumberValue"
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockConfigItemSelect": {
            "name": "BlockConfigItemSelect",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "select"
                    }
                  }
                },
                {
                  "key": "options",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SelectOptionItem"
                    }
                  }
                },
                {
                  "key": "selected_option",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockConfigItemTextLongValue": {
            "name": "BlockConfigItemTextLongValue",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Prompt"
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockConfigItemTextLong": {
            "name": "BlockConfigItemTextLong",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "text-long"
                    }
                  }
                },
                {
                  "key": "default_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BlockConfigItemTextLongValue"
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockConfigItemTextShort": {
            "name": "BlockConfigItemTextShort",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "text-short"
                    }
                  }
                },
                {
                  "key": "default_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockRunCompletedEnvironment": {
            "name": "BlockRunCompletedEnvironment",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "development"
                },
                {
                  "value": "preview"
                },
                {
                  "value": "production"
                },
                {
                  "value": "test"
                }
              ]
            }
          },
          "type_:BlockRunCompleted": {
            "name": "BlockRunCompleted",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "organization_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the event",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies the root cause of the event. If not set, it defaults to the event id.",
                  "key": "correlation_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "block_run_completed"
                    }
                  }
                },
                {
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EventVersion"
                    }
                  }
                },
                {
                  "key": "environment",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BlockRunCompletedEnvironment"
                  }
                },
                {
                  "description": "The timestamp of the event as UTC ISO 8601 string",
                  "key": "timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BlockRunCompletedData"
                  }
                }
              ]
            }
          },
          "type_:BlockRunCompletedData": {
            "name": "BlockRunCompletedData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "workflow_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "workflow_run_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "block_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "config",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "key": "cost",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "key": "session_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "block_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockRunFailedEnvironment": {
            "name": "BlockRunFailedEnvironment",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "development"
                },
                {
                  "value": "preview"
                },
                {
                  "value": "production"
                },
                {
                  "value": "test"
                }
              ]
            }
          },
          "type_:BlockRunFailed": {
            "name": "BlockRunFailed",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "organization_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the event",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies the root cause of the event. If not set, it defaults to the event id.",
                  "key": "correlation_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "block_run_failed"
                    }
                  }
                },
                {
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EventVersion"
                    }
                  }
                },
                {
                  "key": "environment",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BlockRunFailedEnvironment"
                  }
                },
                {
                  "description": "The timestamp of the event as UTC ISO 8601 string",
                  "key": "timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BlockRunFailedData"
                  }
                }
              ]
            }
          },
          "type_:BlockRunFailedData": {
            "name": "BlockRunFailedData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "workflow_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "workflow_run_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "block_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "cost",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "key": "config",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "description": "The reason why the job failed",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "key": "session_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "block_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockRunStartedEnvironment": {
            "name": "BlockRunStartedEnvironment",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "development"
                },
                {
                  "value": "preview"
                },
                {
                  "value": "production"
                },
                {
                  "value": "test"
                }
              ]
            }
          },
          "type_:BlockRunStarted": {
            "name": "BlockRunStarted",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "organization_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the event",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies the root cause of the event. If not set, it defaults to the event id.",
                  "key": "correlation_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "block_run_started"
                    }
                  }
                },
                {
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EventVersion"
                    }
                  }
                },
                {
                  "key": "environment",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BlockRunStartedEnvironment"
                  }
                },
                {
                  "description": "The timestamp of the event as UTC ISO 8601 string",
                  "key": "timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BlockRunStartedData"
                  }
                }
              ]
            }
          },
          "type_:BlockRunStartedData": {
            "name": "BlockRunStartedData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "workflow_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "workflow_run_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "block_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "config",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "key": "session_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "block_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockRunUsage": {
            "name": "BlockRunUsage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "organization_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "workflow_run_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "block_archetype_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "execution_date",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "total_cost",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "total_execution_duration_ms",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BlockStateUpdatedEnvironment": {
            "name": "BlockStateUpdatedEnvironment",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "development"
                },
                {
                  "value": "preview"
                },
                {
                  "value": "production"
                },
                {
                  "value": "test"
                }
              ]
            }
          },
          "type_:BlockStateUpdated": {
            "name": "BlockStateUpdated",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "organization_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the event",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies the root cause of the event. If not set, it defaults to the event id.",
                  "key": "correlation_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "block_state_updated"
                    }
                  }
                },
                {
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EventVersion"
                    }
                  }
                },
                {
                  "key": "environment",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BlockStateUpdatedEnvironment"
                  }
                },
                {
                  "description": "The timestamp of the event as UTC ISO 8601 string",
                  "key": "timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BlockStateUpdatedData"
                  }
                }
              ]
            }
          },
          "type_:BlockStateUpdatedDataUpdateType": {
            "description": "If `complete` represents a full replacement of state, versus `partial` that indicates data must be _merged_.",
            "name": "BlockStateUpdatedDataUpdateType",
            "shape": {
              "type": "enum",
              "default": "complete",
              "values": [
                {
                  "value": "complete"
                },
                {
                  "value": "partial"
                }
              ]
            }
          },
          "type_:BlockStateUpdatedData": {
            "name": "BlockStateUpdatedData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "workflow_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "workflow_run_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "block_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The block archetype ID",
                  "key": "block_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "update_data",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "description": "If `complete` represents a full replacement of state, versus `partial` that indicates data must be _merged_.",
                  "key": "update_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BlockStateUpdatedDataUpdateType"
                    }
                  }
                }
              ]
            }
          },
          "type_:Copilot": {
            "name": "Copilot",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "copilot_config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CopilotConfig"
                  }
                },
                {
                  "key": "last_updated_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "created_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "created_by",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Identity"
                  }
                },
                {
                  "key": "last_updated_by",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Identity"
                  }
                },
                {
                  "key": "revision_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "copilot_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "is_draft",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CopilotConfigMode": {
            "name": "CopilotConfigMode",
            "shape": {
              "type": "enum",
              "default": "light",
              "values": [
                {
                  "value": "light"
                },
                {
                  "value": "dark"
                }
              ]
            }
          },
          "type_:CopilotConfigFabValue": {
            "name": "CopilotConfigFabValue",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:CopilotConfig": {
            "name": "CopilotConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "workflow_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "img_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "mode",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:CopilotConfigMode"
                    }
                  }
                },
                {
                  "key": "colors",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "key": "fab",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:CopilotConfigFabValue"
                        }
                      }
                    }
                  }
                },
                {
                  "key": "message_placeholder",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "initial_activity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "allowed_origins",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Dependency": {
            "name": "Dependency",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "block_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "ui",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EdgeUi"
                    }
                  }
                }
              ]
            }
          },
          "type_:EdgeUi": {
            "name": "EdgeUi",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "edge_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "plusSign"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Environment": {
            "name": "Environment",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "environment_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "environment_config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EnvironmentConfig"
                  }
                },
                {
                  "key": "created_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "created_by",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Identity"
                  }
                },
                {
                  "key": "last_updated_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "last_updated_by",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Identity"
                  }
                },
                {
                  "key": "deployments",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EnvironmentDeploymentDocument"
                    }
                  }
                }
              ]
            }
          },
          "type_:EnvironmentConfig": {
            "name": "EnvironmentConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "description",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:EnvironmentDeploymentConfigRevisionLookup": {
            "name": "EnvironmentDeploymentConfigRevisionLookup",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "latest"
                },
                {
                  "value": "revision_id"
                }
              ]
            }
          },
          "type_:EnvironmentDeploymentConfig": {
            "name": "EnvironmentDeploymentConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Revision ID to direct traffic to",
                  "key": "revision_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "revision_lookup",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EnvironmentDeploymentConfigRevisionLookup"
                  }
                },
                {
                  "key": "traffic",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 100
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EnvironmentDeploymentDocument": {
            "name": "EnvironmentDeploymentDocument",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "deployment_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "environment_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "deployment_config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EnvironmentDeploymentConfig"
                  }
                },
                {
                  "key": "created_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "created_by",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Identity"
                  }
                }
              ]
            }
          },
          "type_:EventName": {
            "name": "EventName",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:EventVersion": {
            "name": "EventVersion",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:HttpValidationError": {
            "name": "HttpValidationError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ValidationError"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:IdentityDetails": {
            "name": "IdentityDetails",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:UserIdentity"
                  },
                  "displayName": "User Identity"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ApiKeyIdentity"
                  },
                  "displayName": "API Key Identity"
                }
              ]
            }
          },
          "type_:Identity": {
            "name": "Identity",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:IdentityTypes"
                  }
                },
                {
                  "key": "details",
                  "valueType": {
                    "type": "id",
                    "value": "type_:IdentityDetails"
                  }
                }
              ]
            }
          },
          "type_:IdentityTypes": {
            "name": "IdentityTypes",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "user"
                },
                {
                  "value": "api_key"
                }
              ]
            }
          },
          "type_:NodeUi": {
            "name": "NodeUi",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "position",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Position"
                    }
                  }
                }
              ]
            }
          },
          "type_:Position": {
            "name": "Position",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "x",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "y",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:PromptRole": {
            "name": "PromptRole",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "assistant"
                },
                {
                  "value": "user"
                },
                {
                  "value": "system"
                }
              ]
            }
          },
          "type_:Prompt": {
            "name": "Prompt",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "role",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PromptRole"
                  }
                },
                {
                  "key": "content",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ResponseModelUsage": {
            "name": "ResponseModelUsage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Usage"
                  }
                }
              ]
            }
          },
          "type_:SelectOptionItem": {
            "name": "SelectOptionItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Usage": {
            "name": "Usage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "usage",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BlockRunUsage"
                    }
                  }
                },
                {
                  "key": "total_cost",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:UserIdentity": {
            "name": "UserIdentity",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "org_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "scout_organization_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "email",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                }
              ]
            }
          },
          "type_:ValidationErrorLocItem": {
            "name": "ValidationErrorLocItem",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:ValidationError": {
            "name": "ValidationError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "loc",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ValidationErrorLocItem"
                    }
                  }
                },
                {
                  "key": "msg",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Workflow": {
            "name": "Workflow",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "workflow_config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowConfigOutput"
                  }
                },
                {
                  "key": "last_updated_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "created_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "created_by",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Identity"
                  }
                },
                {
                  "key": "last_updated_by",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Identity"
                  }
                },
                {
                  "key": "revision_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "workflow_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "is_draft",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowConfigInput": {
            "name": "WorkflowConfigInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "workflow_display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "Untitled"
                      }
                    }
                  }
                },
                {
                  "key": "workflow_schema_version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "1.0"
                      }
                    }
                  }
                },
                {
                  "key": "workflow_img_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "workflow_description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "blocks",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:BlockInput"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowConfigOutput": {
            "name": "WorkflowConfigOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "workflow_display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "Untitled"
                      }
                    }
                  }
                },
                {
                  "key": "workflow_schema_version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "1.0"
                      }
                    }
                  }
                },
                {
                  "key": "workflow_img_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "workflow_description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "blocks",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:BlockOutput"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowRunStopReason": {
            "name": "WorkflowRunStopReason",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "workflow_run_completed"
                },
                {
                  "value": "workflow_run_failed"
                }
              ]
            }
          },
          "type_:WorkflowRunStateValue": {
            "name": "WorkflowRunStateValue",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "type": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowRun": {
            "name": "WorkflowRun",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "stop_reason",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowRunStopReason"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:WorkflowRunStateValue"
                        }
                      }
                    }
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "key": "session_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "workflow_run_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowRunCompletedEnvironment": {
            "name": "WorkflowRunCompletedEnvironment",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "development"
                },
                {
                  "value": "preview"
                },
                {
                  "value": "production"
                },
                {
                  "value": "test"
                }
              ]
            }
          },
          "type_:WorkflowRunCompleted": {
            "name": "WorkflowRunCompleted",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "organization_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the event",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies the root cause of the event. If not set, it defaults to the event id.",
                  "key": "correlation_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "workflow_run_completed"
                    }
                  }
                },
                {
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EventVersion"
                    }
                  }
                },
                {
                  "key": "environment",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowRunCompletedEnvironment"
                  }
                },
                {
                  "description": "The timestamp of the event as UTC ISO 8601 string",
                  "key": "timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowRunCompletedData"
                  }
                }
              ]
            }
          },
          "type_:WorkflowRunCompletedData": {
            "name": "WorkflowRunCompletedData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "workflow_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "workflow_run_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "output",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "key": "session_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "workflow_config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowRunEventEnvironment": {
            "name": "WorkflowRunEventEnvironment",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "development"
                },
                {
                  "value": "preview"
                },
                {
                  "value": "production"
                },
                {
                  "value": "test"
                }
              ]
            }
          },
          "type_:WorkflowRunEventData": {
            "name": "WorkflowRunEventData",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockRunCompleted"
                  },
                  "displayName": "Block Run Completed"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockRunFailed"
                  },
                  "displayName": "Block Run Failed"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockRunStarted"
                  },
                  "displayName": "Block Run Started"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:BlockStateUpdated"
                  },
                  "displayName": "Block State Updated"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:WorkflowRunCompleted"
                  },
                  "displayName": "Workflow Run Completed"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:WorkflowRunFailed"
                  },
                  "displayName": "Workflow Run Failed"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:WorkflowRunStarted"
                  },
                  "displayName": "Workflow Run Started"
                }
              ]
            }
          },
          "type_:WorkflowRunEvent": {
            "name": "WorkflowRunEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "organization_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the event",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies the root cause of the event. If not set, it defaults to the event id.",
                  "key": "correlation_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EventName"
                  }
                },
                {
                  "key": "version",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EventVersion"
                  }
                },
                {
                  "key": "environment",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowRunEventEnvironment"
                  }
                },
                {
                  "description": "The timestamp of the event as UTC ISO 8601 string",
                  "key": "timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowRunEventData"
                  }
                }
              ]
            }
          },
          "type_:WorkflowRunFailedEnvironment": {
            "name": "WorkflowRunFailedEnvironment",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "development"
                },
                {
                  "value": "preview"
                },
                {
                  "value": "production"
                },
                {
                  "value": "test"
                }
              ]
            }
          },
          "type_:WorkflowRunFailed": {
            "name": "WorkflowRunFailed",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "organization_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the event",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies the root cause of the event. If not set, it defaults to the event id.",
                  "key": "correlation_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "workflow_run_failed"
                    }
                  }
                },
                {
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EventVersion"
                    }
                  }
                },
                {
                  "key": "environment",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowRunFailedEnvironment"
                  }
                },
                {
                  "description": "The timestamp of the event as UTC ISO 8601 string",
                  "key": "timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowRunFailedData"
                  }
                }
              ]
            }
          },
          "type_:WorkflowRunFailedData": {
            "name": "WorkflowRunFailedData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "workflow_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "workflow_run_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "session_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "workflow_config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowRunResponse": {
            "name": "WorkflowRunResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "run",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowRun"
                  }
                },
                {
                  "key": "workflow_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowRunStartedEnvironment": {
            "name": "WorkflowRunStartedEnvironment",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "development"
                },
                {
                  "value": "preview"
                },
                {
                  "value": "production"
                },
                {
                  "value": "test"
                }
              ]
            }
          },
          "type_:WorkflowRunStarted": {
            "name": "WorkflowRunStarted",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "organization_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the event",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies the root cause of the event. If not set, it defaults to the event id.",
                  "key": "correlation_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "workflow_run_started"
                    }
                  }
                },
                {
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EventVersion"
                    }
                  }
                },
                {
                  "key": "environment",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowRunStartedEnvironment"
                  }
                },
                {
                  "description": "The timestamp of the event as UTC ISO 8601 string",
                  "key": "timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowRunStartedData"
                  }
                }
              ]
            }
          },
          "type_:WorkflowRunStartedData": {
            "name": "WorkflowRunStartedData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "actor",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Actor"
                    }
                  }
                },
                {
                  "key": "workflow_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "workflow_run_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "inputs",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "key": "session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "workflow_config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersCreateCopilotResponse": {
            "name": "AppsServiceHandlersCreateCopilotResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Copilot"
                    }
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersCreateWorkflowResponse": {
            "name": "AppsServiceHandlersCreateWorkflowResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Workflow"
                    }
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersDeleteCopilotResponse": {
            "name": "AppsServiceHandlersDeleteCopilotResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersDeleteWorkflowResponse": {
            "name": "AppsServiceHandlersDeleteWorkflowResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersDeleteWorkflowRevisionResponse": {
            "name": "AppsServiceHandlersDeleteWorkflowRevisionResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersGetCopilotResponse": {
            "name": "AppsServiceHandlersGetCopilotResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Copilot"
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersGetWorkflowResponse": {
            "name": "AppsServiceHandlersGetWorkflowResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Workflow"
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersGetWorkflowEnvironmentsResponse": {
            "name": "AppsServiceHandlersGetWorkflowEnvironmentsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Environment"
                    }
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersListCopilotsResponse": {
            "name": "AppsServiceHandlersListCopilotsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Copilot"
                    }
                  }
                },
                {
                  "key": "next_cursor",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "key": "has_more",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersListWorkflowRevisionsResponse": {
            "name": "AppsServiceHandlersListWorkflowRevisionsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Workflow"
                    }
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersListWorkflowsResponse": {
            "name": "AppsServiceHandlersListWorkflowsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Workflow"
                    }
                  }
                },
                {
                  "key": "next_cursor",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "key": "has_more",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersPromoteWorkflowRevisionResponse": {
            "name": "AppsServiceHandlersPromoteWorkflowRevisionResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Workflow"
                    }
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersUpdateCopilotResponse": {
            "name": "AppsServiceHandlersUpdateCopilotResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Copilot"
                    }
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersUpdateWorkflowResponse": {
            "name": "AppsServiceHandlersUpdateWorkflowResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Workflow"
                    }
                  }
                }
              ]
            }
          },
          "type_:AppsServiceHandlersUpdateWorkflowEnvironmentResponse": {
            "name": "AppsServiceHandlersUpdateWorkflowEnvironmentResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_:Message": {
            "name": "Message",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "outputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:MessageChunk": {
            "name": "MessageChunk",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:Collection": {
            "name": "Collection",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "collection_config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CollectionConfigOutput"
                  }
                },
                {
                  "key": "last_updated_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "created_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "created_by",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Identity"
                  }
                },
                {
                  "key": "last_updated_by",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Identity"
                  }
                },
                {
                  "key": "revision_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "collection_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:CollectionConfigInputColumnsItem": {
            "name": "CollectionConfigInputColumnsItem",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ColumnTypeItemCheckBox"
                  },
                  "displayName": "Column Type Item Check Box"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ColumnTypeItemJson"
                  },
                  "displayName": "Column Type Item JSON"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ColumnTypeItemNumber"
                  },
                  "displayName": "Column Type Item Number"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ColumnTypeItemSelect"
                  },
                  "displayName": "Column Type Item Select"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ColumnTypeItemTextLong"
                  },
                  "displayName": "Column Type Item Text Long"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ColumnTypeItemTextShort"
                  },
                  "displayName": "Column Type Item Text Short"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ColumnTypeItemUrl"
                  },
                  "displayName": "Column Type Item URL"
                }
              ]
            }
          },
          "type_:CollectionConfigInput": {
            "name": "CollectionConfigInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "collection_display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "Untitled"
                      }
                    }
                  }
                },
                {
                  "key": "collection_img_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "collection_description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "columns",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:CollectionConfigInputColumnsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CollectionConfigOutputColumnsItem": {
            "name": "CollectionConfigOutputColumnsItem",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ColumnTypeItemCheckBox"
                  },
                  "displayName": "Column Type Item Check Box"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ColumnTypeItemJson"
                  },
                  "displayName": "Column Type Item JSON"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ColumnTypeItemNumber"
                  },
                  "displayName": "Column Type Item Number"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ColumnTypeItemSelect"
                  },
                  "displayName": "Column Type Item Select"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ColumnTypeItemTextLong"
                  },
                  "displayName": "Column Type Item Text Long"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ColumnTypeItemTextShort"
                  },
                  "displayName": "Column Type Item Text Short"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ColumnTypeItemUrl"
                  },
                  "displayName": "Column Type Item URL"
                }
              ]
            }
          },
          "type_:CollectionConfigOutput": {
            "name": "CollectionConfigOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "collection_display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "Untitled"
                      }
                    }
                  }
                },
                {
                  "key": "collection_img_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "collection_description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "columns",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:CollectionConfigOutputColumnsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ColumnTypeItemCheckBox": {
            "name": "ColumnTypeItemCheckBox",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "column_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "column_display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "column_type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "checkbox"
                    }
                  }
                },
                {
                  "key": "checkbox",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "data_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ColumnTypeItemJson": {
            "name": "ColumnTypeItemJson",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "column_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "column_display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "column_type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "json"
                    }
                  }
                },
                {
                  "key": "default_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "json"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ColumnTypeItemNumber": {
            "name": "ColumnTypeItemNumber",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "column_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "column_display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "column_type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "number"
                    }
                  }
                },
                {
                  "key": "number",
                  "valueType": {
                    "type": "id",
                    "value": "type_:NumberConfig"
                  }
                },
                {
                  "key": "data_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "number"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ColumnTypeItemSelect": {
            "name": "ColumnTypeItemSelect",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "column_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "column_display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "column_type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "select"
                    }
                  }
                },
                {
                  "key": "options",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SelectOptionItem"
                    }
                  }
                },
                {
                  "key": "selected_option",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "data_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ColumnTypeItemTextLong": {
            "name": "ColumnTypeItemTextLong",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "column_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "column_display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "column_type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "text-long"
                    }
                  }
                },
                {
                  "key": "default_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ColumnTypeItemTextShort": {
            "name": "ColumnTypeItemTextShort",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "column_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "column_display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "column_type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "text-short"
                    }
                  }
                },
                {
                  "key": "default_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ColumnTypeItemUrl": {
            "name": "ColumnTypeItemUrl",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "column_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "column_display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "column_type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "url"
                    }
                  }
                },
                {
                  "key": "url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ContentType": {
            "name": "ContentType",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "paragraph"
                }
              }
            }
          },
          "type_:Document": {
            "name": "Document",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "document_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:DocumentDataOutput"
                  }
                },
                {
                  "key": "created_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "key": "last_updated_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "key": "created_by",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Identity"
                  }
                },
                {
                  "key": "last_updated_by",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Identity"
                  }
                }
              ]
            }
          },
          "type_:DocumentContent": {
            "name": "DocumentContent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ContentType"
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DocumentDataInputContent": {
            "name": "DocumentDataInputContent",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DocumentContent"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DocumentDataInput": {
            "name": "DocumentDataInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "columns",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "Untitled"
                      }
                    }
                  }
                },
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DocumentDataInputContent"
                    }
                  }
                }
              ]
            }
          },
          "type_:DocumentDataOutputContent": {
            "name": "DocumentDataOutputContent",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DocumentContent"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DocumentDataOutput": {
            "name": "DocumentDataOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "columns",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "Untitled"
                      }
                    }
                  }
                },
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DocumentDataOutputContent"
                    }
                  }
                }
              ]
            }
          },
          "type_:NumberConfigDefaultValue": {
            "name": "NumberConfigDefaultValue",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:NumberConfigMinValue": {
            "name": "NumberConfigMinValue",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:NumberConfigMaxValue": {
            "name": "NumberConfigMaxValue",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:NumberConfig": {
            "name": "NumberConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "default_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NumberConfigDefaultValue"
                    }
                  }
                },
                {
                  "key": "min_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NumberConfigMinValue"
                    }
                  }
                },
                {
                  "key": "max_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NumberConfigMaxValue"
                    }
                  }
                }
              ]
            }
          },
          "type_:EvalServiceHandlersCreateCollectionResponse": {
            "name": "EvalServiceHandlersCreateCollectionResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Collection"
                    }
                  }
                }
              ]
            }
          },
          "type_:EvalServiceHandlersCreateDocumentResponse": {
            "name": "EvalServiceHandlersCreateDocumentResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Document"
                    }
                  }
                }
              ]
            }
          },
          "type_:EvalServiceHandlersDeleteCollectionResponse": {
            "name": "EvalServiceHandlersDeleteCollectionResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:EvalServiceHandlersDeleteDocumentResponse": {
            "name": "EvalServiceHandlersDeleteDocumentResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:EvalServiceHandlersGetCollectionResponse": {
            "name": "EvalServiceHandlersGetCollectionResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Collection"
                    }
                  }
                }
              ]
            }
          },
          "type_:EvalServiceHandlersGetCollectionsResponse": {
            "name": "EvalServiceHandlersGetCollectionsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Collection"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EvalServiceHandlersGetDocumentResponse": {
            "name": "EvalServiceHandlersGetDocumentResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Document"
                    }
                  }
                }
              ]
            }
          },
          "type_:EvalServiceHandlersGetDocumentsResponse": {
            "name": "EvalServiceHandlersGetDocumentsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Document"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EvalServiceHandlersUpdateCollectionResponse": {
            "name": "EvalServiceHandlersUpdateCollectionResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Collection"
                    }
                  }
                }
              ]
            }
          },
          "type_:EvalServiceHandlersUpdateDocumentResponse": {
            "name": "EvalServiceHandlersUpdateDocumentResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Document"
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_workflows": {
            "subpackageId": "subpackage_workflows",
            "name": "workflows",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "list",
                "migratedFromUrlSlugs": ["list-all-workflows"],
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_workflows.list",
                "name": "List all workflows",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/workflows"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Field to sort by",
                    "key": "sort",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Sort in ascending or descending order",
                    "key": "direction",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "created_at to start at",
                    "key": "start_at",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Limit of records to return",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Search query",
                    "key": "query",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersListWorkflowsResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/workflows",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [
                        {
                          "workflow_config": {},
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "revision_id": "revision_id",
                          "workflow_id": "workflow_id",
                          "is_draft": true
                        }
                      ],
                      "next_cursor": "2024-01-15T09:30:00Z",
                      "has_more": true
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflows.list()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflows.list()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflows.list();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [
                          {
                            "workflow_config": {},
                            "last_updated_at": "2024-01-15T09:30:00Z",
                            "created_at": "2024-01-15T09:30:00Z",
                            "created_by": {
                              "type": "user",
                              "details": {
                                "user_id": "user_id",
                                "org_id": "org_id",
                                "scout_organization_id": "scout_organization_id",
                                "email": {
                                  "key": "value"
                                }
                              }
                            },
                            "last_updated_by": {
                              "type": "user",
                              "details": {
                                "user_id": "user_id",
                                "org_id": "org_id",
                                "scout_organization_id": "scout_organization_id",
                                "email": {
                                  "key": "value"
                                }
                              }
                            },
                            "revision_id": "revision_id",
                            "workflow_id": "workflow_id",
                            "is_draft": true
                          }
                        ],
                        "next_cursor": "2024-01-15T09:30:00Z",
                        "has_more": true
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/workflows",
                    "pathParameters": {},
                    "queryParameters": {
                      "sort": "string",
                      "direction": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflows.list()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflows.list()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflows.list();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List all workflows in the organization",
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.workflows.list(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "sort=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "sort",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "direction=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "direction",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "start_at=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "start_at",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "limit=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "limit",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "query=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "query",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.workflows.list(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "sort: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "sort"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "direction: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "direction"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "startAt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "start_at"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "limit: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "limit"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "query: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "query"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["create-a-new-workflow"],
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_workflows.create",
                "name": "Create a new workflow",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/workflows"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WorkflowConfigInput"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersCreateWorkflowResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/workflows",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "workflow_config": {
                          "workflow_display_name": "workflow_display_name",
                          "workflow_schema_version": "workflow_schema_version",
                          "workflow_img_url": "workflow_img_url",
                          "workflow_description": "workflow_description",
                          "blocks": [
                            {
                              "block_archetype_id": "block_archetype_id",
                              "block_display_name": "block_display_name",
                              "block_id": "block_id"
                            }
                          ]
                        },
                        "last_updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z",
                        "created_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "last_updated_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "revision_id": "revision_id",
                        "workflow_id": "workflow_id",
                        "is_draft": true
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflows.create()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflows.create()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflows.create({});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "workflow_config": {
                            "workflow_display_name": "workflow_display_name",
                            "workflow_schema_version": "workflow_schema_version",
                            "workflow_img_url": "workflow_img_url",
                            "workflow_description": "workflow_description",
                            "blocks": [
                              {
                                "block_archetype_id": "block_archetype_id",
                                "block_display_name": "block_display_name",
                                "block_id": "block_id"
                              }
                            ]
                          },
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "revision_id": "revision_id",
                          "workflow_id": "workflow_id",
                          "is_draft": true
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/workflows",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflows.create()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflows.create()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflows.create({});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.workflows.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_display_name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "workflow_display_name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_schema_version=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "workflow_schema_version",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_img_url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "workflow_img_url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_description=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "workflow_description",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "blocks=[\n\t\t$FERN_INPUT\n\t]",
                            "delimiter": ",\n\t\t",
                            "innerTemplate": {
                              "imports": ["from scoutos import BlockInput"],
                              "isOptional": true,
                              "templateString": "BlockInput(\n\t\t\t$FERN_INPUT\n\t\t)",
                              "templateInputs": [
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "block_archetype_id=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "block_archetype_id",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "block_config=[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                    "delimiter": ",\n\t\t\t\t",
                                    "innerTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "members": [
                                        {
                                          "type": {
                                            "value": "type_:BlockConfigItemBoolean",
                                            "type": "id"
                                          },
                                          "template": {
                                            "imports": ["from scoutos import BlockConfigItemBoolean"],
                                            "isOptional": true,
                                            "templateString": "BlockConfigItemBoolean(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "display_name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "display_name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "default_value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "default_value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": {
                                            "value": "type_:BlockConfigItemJson",
                                            "type": "id"
                                          },
                                          "template": {
                                            "imports": ["from scoutos import BlockConfigItemJson"],
                                            "isOptional": true,
                                            "templateString": "BlockConfigItemJson(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "display_name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "display_name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "default_value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "default_value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": {
                                            "value": "type_:BlockConfigItemNumber",
                                            "type": "id"
                                          },
                                          "template": {
                                            "imports": ["from scoutos import BlockConfigItemNumber"],
                                            "isOptional": true,
                                            "templateString": "BlockConfigItemNumber(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "display_name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "display_name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "default_value=$FERN_INPUT",
                                                  "members": [
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    },
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "double"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    }
                                                  ],
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "default_value"
                                                  },
                                                  "type": "union_v2"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "minimum_value=$FERN_INPUT",
                                                  "members": [
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    },
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "double"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    }
                                                  ],
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "minimum_value"
                                                  },
                                                  "type": "union_v2"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "maximum_value=$FERN_INPUT",
                                                  "members": [
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    },
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "double"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    }
                                                  ],
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "maximum_value"
                                                  },
                                                  "type": "union_v2"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "value=$FERN_INPUT",
                                                  "members": [
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    },
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "double"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    }
                                                  ],
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "value"
                                                  },
                                                  "type": "union_v2"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": {
                                            "value": "type_:BlockConfigItemLlm",
                                            "type": "id"
                                          },
                                          "template": {
                                            "imports": ["from scoutos import BlockConfigItemLlm"],
                                            "isOptional": true,
                                            "templateString": "BlockConfigItemLlm(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "display_name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "display_name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "value=[\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                                  "delimiter": ",\n\t\t\t\t\t\t",
                                                  "innerTemplate": {
                                                    "imports": ["from scoutos import Prompt"],
                                                    "isOptional": true,
                                                    "templateString": "Prompt(\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t)",
                                                    "templateInputs": [
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "templateString": "id=$FERN_INPUT",
                                                          "templateInputs": [
                                                            {
                                                              "location": "RELATIVE",
                                                              "path": "id",
                                                              "type": "payload"
                                                            }
                                                          ],
                                                          "type": "generic"
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "templateString": "role=$FERN_INPUT",
                                                          "values": {
                                                            "assistant": "\"assistant\"",
                                                            "user": "\"user\"",
                                                            "system": "\"system\""
                                                          },
                                                          "templateInput": {
                                                            "location": "RELATIVE",
                                                            "path": "role"
                                                          },
                                                          "type": "enum"
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "templateString": "content=$FERN_INPUT",
                                                          "templateInputs": [
                                                            {
                                                              "location": "RELATIVE",
                                                              "path": "content",
                                                              "type": "payload"
                                                            }
                                                          ],
                                                          "type": "generic"
                                                        }
                                                      }
                                                    ],
                                                    "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                    "type": "generic"
                                                  },
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "value"
                                                  },
                                                  "type": "iterable"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": {
                                            "value": "type_:BlockConfigItemSelect",
                                            "type": "id"
                                          },
                                          "template": {
                                            "imports": ["from scoutos import BlockConfigItemSelect"],
                                            "isOptional": true,
                                            "templateString": "BlockConfigItemSelect(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "display_name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "display_name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "options=[\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                                  "delimiter": ",\n\t\t\t\t\t\t",
                                                  "innerTemplate": {
                                                    "imports": ["from scoutos import SelectOptionItem"],
                                                    "isOptional": true,
                                                    "templateString": "SelectOptionItem(\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t)",
                                                    "templateInputs": [
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "templateString": "id=$FERN_INPUT",
                                                          "templateInputs": [
                                                            {
                                                              "location": "RELATIVE",
                                                              "path": "id",
                                                              "type": "payload"
                                                            }
                                                          ],
                                                          "type": "generic"
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "templateString": "name=$FERN_INPUT",
                                                          "templateInputs": [
                                                            {
                                                              "location": "RELATIVE",
                                                              "path": "name",
                                                              "type": "payload"
                                                            }
                                                          ],
                                                          "type": "generic"
                                                        }
                                                      }
                                                    ],
                                                    "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                    "type": "generic"
                                                  },
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "options"
                                                  },
                                                  "type": "iterable"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "selected_option=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "selected_option",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": {
                                            "value": "type_:BlockConfigItemTextLong",
                                            "type": "id"
                                          },
                                          "template": {
                                            "imports": ["from scoutos import BlockConfigItemTextLong"],
                                            "isOptional": true,
                                            "templateString": "BlockConfigItemTextLong(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "display_name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "display_name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "default_value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "default_value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "value=$FERN_INPUT",
                                                  "members": [
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    },
                                                    {
                                                      "type": {
                                                        "itemType": {
                                                          "value": "type_:Prompt",
                                                          "type": "id"
                                                        },
                                                        "type": "list"
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "containerTemplateString": "[\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                                        "delimiter": ",\n\t\t\t\t\t\t",
                                                        "innerTemplate": {
                                                          "imports": ["from scoutos import Prompt"],
                                                          "isOptional": true,
                                                          "templateString": "Prompt(\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t)",
                                                          "templateInputs": [
                                                            {
                                                              "type": "template",
                                                              "value": {
                                                                "imports": [],
                                                                "isOptional": true,
                                                                "templateString": "id=$FERN_INPUT",
                                                                "templateInputs": [
                                                                  {
                                                                    "location": "RELATIVE",
                                                                    "path": "id",
                                                                    "type": "payload"
                                                                  }
                                                                ],
                                                                "type": "generic"
                                                              }
                                                            },
                                                            {
                                                              "type": "template",
                                                              "value": {
                                                                "imports": [],
                                                                "isOptional": true,
                                                                "templateString": "role=$FERN_INPUT",
                                                                "values": {
                                                                  "assistant": "\"assistant\"",
                                                                  "user": "\"user\"",
                                                                  "system": "\"system\""
                                                                },
                                                                "templateInput": {
                                                                  "location": "RELATIVE",
                                                                  "path": "role"
                                                                },
                                                                "type": "enum"
                                                              }
                                                            },
                                                            {
                                                              "type": "template",
                                                              "value": {
                                                                "imports": [],
                                                                "isOptional": true,
                                                                "templateString": "content=$FERN_INPUT",
                                                                "templateInputs": [
                                                                  {
                                                                    "location": "RELATIVE",
                                                                    "path": "content",
                                                                    "type": "payload"
                                                                  }
                                                                ],
                                                                "type": "generic"
                                                              }
                                                            }
                                                          ],
                                                          "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                          "type": "generic"
                                                        },
                                                        "templateInput": {
                                                          "location": "RELATIVE",
                                                          "path": null
                                                        },
                                                        "type": "iterable"
                                                      }
                                                    }
                                                  ],
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "value"
                                                  },
                                                  "type": "union_v2"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": {
                                            "value": "type_:BlockConfigItemTextShort",
                                            "type": "id"
                                          },
                                          "template": {
                                            "imports": ["from scoutos import BlockConfigItemTextShort"],
                                            "isOptional": true,
                                            "templateString": "BlockConfigItemTextShort(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "display_name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "display_name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "default_value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "default_value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        }
                                      ],
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": null
                                      },
                                      "type": "union_v2"
                                    },
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": "block_config"
                                    },
                                    "type": "iterable"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "block_display_name=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "block_display_name",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "block_id=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "block_id",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "block_inputs={\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                    "delimiter": ",\n\t\t\t\t",
                                    "keyTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "valueTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "keyValueSeparator": ": ",
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": "block_inputs"
                                    },
                                    "type": "dict"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "block_is_output=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "block_is_output",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "dependencies=[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                    "delimiter": ",\n\t\t\t\t",
                                    "innerTemplate": {
                                      "imports": ["from scoutos import Dependency"],
                                      "isOptional": true,
                                      "templateString": "Dependency(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "imports": [],
                                            "isOptional": true,
                                            "templateString": "block_id=$FERN_INPUT",
                                            "templateInputs": [
                                              {
                                                "location": "RELATIVE",
                                                "path": "block_id",
                                                "type": "payload"
                                              }
                                            ],
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "imports": ["from scoutos import EdgeUi"],
                                            "isOptional": true,
                                            "templateString": "ui=EdgeUi(\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "edge_type=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "ui.edge_type",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        }
                                      ],
                                      "inputDelimiter": ",\n\t\t\t\t\t",
                                      "type": "generic"
                                    },
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": "dependencies"
                                    },
                                    "type": "iterable"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "input_schema={\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                    "delimiter": ",\n\t\t\t\t",
                                    "keyTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "valueTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "keyValueSeparator": ": ",
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": "input_schema"
                                    },
                                    "type": "dict"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "output_schema=[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                    "delimiter": ",\n\t\t\t\t",
                                    "innerTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": "output_schema"
                                    },
                                    "type": "iterable"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": ["from scoutos import NodeUi"],
                                    "isOptional": true,
                                    "templateString": "ui=NodeUi(\n\t\t\t\t$FERN_INPUT\n\t\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": ["from scoutos import Position"],
                                          "isOptional": true,
                                          "templateString": "position=Position(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                          "templateInputs": [
                                            {
                                              "type": "template",
                                              "value": {
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "x=$FERN_INPUT",
                                                "templateInputs": [
                                                  {
                                                    "location": "RELATIVE",
                                                    "path": "ui.position.x",
                                                    "type": "payload"
                                                  }
                                                ],
                                                "type": "generic"
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "y=$FERN_INPUT",
                                                "templateInputs": [
                                                  {
                                                    "location": "RELATIVE",
                                                    "path": "ui.position.x.position.y",
                                                    "type": "payload"
                                                  }
                                                ],
                                                "type": "generic"
                                              }
                                            }
                                          ],
                                          "inputDelimiter": ",\n\t\t\t\t\t",
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t\t",
                                    "type": "generic"
                                  }
                                }
                              ],
                              "inputDelimiter": ",\n\t\t\t",
                              "type": "generic"
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "blocks"
                            },
                            "type": "iterable"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.workflows.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "workflowDisplayName: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "workflow_display_name"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "workflowSchemaVersion: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "workflow_schema_version"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "workflowImgUrl: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "workflow_img_url"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "workflowDescription: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "workflow_description"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "iterable",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "blocks: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t",
                                        "innerTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "{\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                          "isOptional": true,
                                          "inputDelimiter": ",\n\t\t\t\t\t",
                                          "templateInputs": [
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "blockArchetypeId: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "block_archetype_id"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "iterable",
                                                "imports": [],
                                                "isOptional": true,
                                                "containerTemplateString": "blockConfig: [\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                                "delimiter": ",\n\t\t\t\t\t\t",
                                                "innerTemplate": {
                                                  "type": "union_v2",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "$FERN_INPUT",
                                                  "members": [
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "displayName: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "display_name"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "defaultValue: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "default_value"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "value: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "value"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:BlockConfigItemBoolean"
                                                      }
                                                    },
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "displayName: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "display_name"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "defaultValue: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "default_value"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "value: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "value"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:BlockConfigItemJson"
                                                      }
                                                    },
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "displayName: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "display_name"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "union_v2",
                                                              "imports": [],
                                                              "isOptional": true,
                                                              "templateString": "defaultValue: $FERN_INPUT",
                                                              "members": [
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "integer"
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "double"
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "templateInput": {
                                                                "location": "RELATIVE",
                                                                "path": "default_value"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "union_v2",
                                                              "imports": [],
                                                              "isOptional": true,
                                                              "templateString": "minimumValue: $FERN_INPUT",
                                                              "members": [
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "integer"
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "double"
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "templateInput": {
                                                                "location": "RELATIVE",
                                                                "path": "minimum_value"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "union_v2",
                                                              "imports": [],
                                                              "isOptional": true,
                                                              "templateString": "maximumValue: $FERN_INPUT",
                                                              "members": [
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "integer"
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "double"
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "templateInput": {
                                                                "location": "RELATIVE",
                                                                "path": "maximum_value"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "union_v2",
                                                              "imports": [],
                                                              "isOptional": true,
                                                              "templateString": "value: $FERN_INPUT",
                                                              "members": [
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "integer"
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "double"
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "templateInput": {
                                                                "location": "RELATIVE",
                                                                "path": "value"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:BlockConfigItemNumber"
                                                      }
                                                    },
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "displayName: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "display_name"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "iterable",
                                                              "imports": [],
                                                              "isOptional": true,
                                                              "containerTemplateString": "value: [\n\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t]",
                                                              "delimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                              "innerTemplate": {
                                                                "type": "generic",
                                                                "imports": [],
                                                                "templateString": "{\n\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t}",
                                                                "isOptional": true,
                                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t",
                                                                "templateInputs": [
                                                                  {
                                                                    "type": "template",
                                                                    "value": {
                                                                      "type": "generic",
                                                                      "imports": [],
                                                                      "templateString": "id: $FERN_INPUT",
                                                                      "isOptional": true,
                                                                      "templateInputs": [
                                                                        {
                                                                          "type": "payload",
                                                                          "location": "RELATIVE",
                                                                          "path": "id"
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  {
                                                                    "type": "template",
                                                                    "value": {
                                                                      "type": "enum",
                                                                      "imports": [],
                                                                      "isOptional": true,
                                                                      "values": {
                                                                        "assistant": "Scout.PromptRole.Assistant",
                                                                        "user": "Scout.PromptRole.User",
                                                                        "system": "Scout.PromptRole.System"
                                                                      },
                                                                      "templateString": "role: $FERN_INPUT",
                                                                      "templateInput": {
                                                                        "location": "RELATIVE",
                                                                        "path": "role"
                                                                      }
                                                                    }
                                                                  },
                                                                  {
                                                                    "type": "template",
                                                                    "value": {
                                                                      "type": "generic",
                                                                      "imports": [],
                                                                      "templateString": "content: $FERN_INPUT",
                                                                      "isOptional": true,
                                                                      "templateInputs": [
                                                                        {
                                                                          "type": "payload",
                                                                          "location": "RELATIVE",
                                                                          "path": "content"
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                ]
                                                              },
                                                              "templateInput": {
                                                                "location": "RELATIVE",
                                                                "path": "value"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:BlockConfigItemLlm"
                                                      }
                                                    },
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "displayName: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "display_name"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "iterable",
                                                              "imports": [],
                                                              "isOptional": true,
                                                              "containerTemplateString": "options: [\n\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t]",
                                                              "delimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                              "innerTemplate": {
                                                                "type": "generic",
                                                                "imports": [],
                                                                "templateString": "{\n\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t}",
                                                                "isOptional": true,
                                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t",
                                                                "templateInputs": [
                                                                  {
                                                                    "type": "template",
                                                                    "value": {
                                                                      "type": "generic",
                                                                      "imports": [],
                                                                      "templateString": "id: $FERN_INPUT",
                                                                      "isOptional": true,
                                                                      "templateInputs": [
                                                                        {
                                                                          "type": "payload",
                                                                          "location": "RELATIVE",
                                                                          "path": "id"
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  {
                                                                    "type": "template",
                                                                    "value": {
                                                                      "type": "generic",
                                                                      "imports": [],
                                                                      "templateString": "name: $FERN_INPUT",
                                                                      "isOptional": true,
                                                                      "templateInputs": [
                                                                        {
                                                                          "type": "payload",
                                                                          "location": "RELATIVE",
                                                                          "path": "name"
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                ]
                                                              },
                                                              "templateInput": {
                                                                "location": "RELATIVE",
                                                                "path": "options"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "selectedOption: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "selected_option"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "value: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "value"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:BlockConfigItemSelect"
                                                      }
                                                    },
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "displayName: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "display_name"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "defaultValue: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "default_value"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "union_v2",
                                                              "imports": [],
                                                              "isOptional": true,
                                                              "templateString": "value: $FERN_INPUT",
                                                              "members": [
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "template": {
                                                                    "type": "iterable",
                                                                    "imports": [],
                                                                    "isOptional": true,
                                                                    "containerTemplateString": "[\n\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t]",
                                                                    "delimiter": ",\n\t\t\t\t\t\t\t\t\t\t",
                                                                    "innerTemplate": {
                                                                      "type": "generic",
                                                                      "imports": [],
                                                                      "templateString": "{\n\t\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t\t}",
                                                                      "isOptional": true,
                                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t\t",
                                                                      "templateInputs": []
                                                                    },
                                                                    "templateInput": {
                                                                      "location": "RELATIVE",
                                                                      "path": null
                                                                    }
                                                                  },
                                                                  "type": {
                                                                    "type": "list",
                                                                    "itemType": {
                                                                      "type": "id",
                                                                      "value": "type_:Prompt"
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "templateInput": {
                                                                "location": "RELATIVE",
                                                                "path": "value"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:BlockConfigItemTextLong"
                                                      }
                                                    },
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "displayName: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "display_name"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "defaultValue: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "default_value"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "value: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "value"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:BlockConfigItemTextShort"
                                                      }
                                                    }
                                                  ],
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                },
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "block_config"
                                                }
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "blockDisplayName: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "block_display_name"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "blockId: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "block_id"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "dict",
                                                "imports": [],
                                                "isOptional": true,
                                                "containerTemplateString": "blockInputs: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                                "delimiter": ",\n\t\t\t\t\t\t",
                                                "keyValueSeparator": ": ",
                                                "keyTemplate": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "valueTemplate": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "block_inputs"
                                                }
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "blockIsOutput: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "block_is_output"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "iterable",
                                                "imports": [],
                                                "isOptional": true,
                                                "containerTemplateString": "dependencies: [\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                                "delimiter": ",\n\t\t\t\t\t\t",
                                                "innerTemplate": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "{\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                                  "isOptional": true,
                                                  "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                  "templateInputs": [
                                                    {
                                                      "type": "template",
                                                      "value": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "blockId: $FERN_INPUT",
                                                        "isOptional": true,
                                                        "templateInputs": [
                                                          {
                                                            "type": "payload",
                                                            "location": "RELATIVE",
                                                            "path": "block_id"
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "template",
                                                      "value": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "ui: {\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "edgeType: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "ui.edge_type"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "dependencies"
                                                }
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "dict",
                                                "imports": [],
                                                "isOptional": true,
                                                "containerTemplateString": "inputSchema: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                                "delimiter": ",\n\t\t\t\t\t\t",
                                                "keyValueSeparator": ": ",
                                                "keyTemplate": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "valueTemplate": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "input_schema"
                                                }
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "iterable",
                                                "imports": [],
                                                "isOptional": true,
                                                "containerTemplateString": "outputSchema: [\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                                "delimiter": ",\n\t\t\t\t\t\t",
                                                "innerTemplate": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "output_schema"
                                                }
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "ui: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "position: {\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                                      "isOptional": true,
                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "x: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "ui.position.x"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "y: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "ui.position.y"
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "blocks"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "get",
                "migratedFromUrlSlugs": ["get-a-workflow-by-id"],
                "method": "GET",
                "id": "get",
                "originalEndpointId": "endpoint_workflows.get",
                "name": "Get a workflow by ID",
                "path": {
                  "pathParameters": [
                    {
                      "key": "workflow_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/workflows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "workflow_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersGetWorkflowResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/workflows/workflow_id",
                    "pathParameters": {
                      "workflow_id": "workflow_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "workflow_config": {
                          "workflow_display_name": "workflow_display_name",
                          "workflow_schema_version": "workflow_schema_version",
                          "workflow_img_url": "workflow_img_url",
                          "workflow_description": "workflow_description",
                          "blocks": [
                            {
                              "block_archetype_id": "block_archetype_id",
                              "block_display_name": "block_display_name",
                              "block_id": "block_id"
                            }
                          ]
                        },
                        "last_updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z",
                        "created_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "last_updated_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "revision_id": "revision_id",
                        "workflow_id": "workflow_id",
                        "is_draft": true
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflows.get(\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflows.get(\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflows.get(\"workflow_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "workflow_config": {
                            "workflow_display_name": "workflow_display_name",
                            "workflow_schema_version": "workflow_schema_version",
                            "workflow_img_url": "workflow_img_url",
                            "workflow_description": "workflow_description",
                            "blocks": [
                              {
                                "block_archetype_id": "block_archetype_id",
                                "block_display_name": "block_display_name",
                                "block_id": "block_id"
                              }
                            ]
                          },
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "revision_id": "revision_id",
                          "workflow_id": "workflow_id",
                          "is_draft": true
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/workflows/:workflow_id",
                    "pathParameters": {
                      "workflow_id": ":workflow_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflows.get(\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflows.get(\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflows.get(\"workflow_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetch app configuration by ID.",
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.workflows.get(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "workflow_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.workflows.get(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "workflow_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "update",
                "migratedFromUrlSlugs": ["update-a-workflow"],
                "method": "PUT",
                "id": "update",
                "originalEndpointId": "endpoint_workflows.update",
                "name": "Update a workflow",
                "path": {
                  "pathParameters": [
                    {
                      "key": "workflow_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/workflows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "workflow_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WorkflowConfigInput"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersUpdateWorkflowResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/workflows/workflow_id",
                    "pathParameters": {
                      "workflow_id": "workflow_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "workflow_config": {
                          "workflow_display_name": "workflow_display_name",
                          "workflow_schema_version": "workflow_schema_version",
                          "workflow_img_url": "workflow_img_url",
                          "workflow_description": "workflow_description",
                          "blocks": [
                            {
                              "block_archetype_id": "block_archetype_id",
                              "block_display_name": "block_display_name",
                              "block_id": "block_id"
                            }
                          ]
                        },
                        "last_updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z",
                        "created_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "last_updated_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "revision_id": "revision_id",
                        "workflow_id": "workflow_id",
                        "is_draft": true
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflows.update(\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflows.update(\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflows.update(\"workflow_id\", {});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "workflow_config": {
                            "workflow_display_name": "workflow_display_name",
                            "workflow_schema_version": "workflow_schema_version",
                            "workflow_img_url": "workflow_img_url",
                            "workflow_description": "workflow_description",
                            "blocks": [
                              {
                                "block_archetype_id": "block_archetype_id",
                                "block_display_name": "block_display_name",
                                "block_id": "block_id"
                              }
                            ]
                          },
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "revision_id": "revision_id",
                          "workflow_id": "workflow_id",
                          "is_draft": true
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/workflows/:workflow_id",
                    "pathParameters": {
                      "workflow_id": ":workflow_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflows.update(\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflows.update(\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflows.update(\"workflow_id\", {});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.workflows.update(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "workflow_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_display_name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "workflow_display_name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_schema_version=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "workflow_schema_version",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_img_url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "workflow_img_url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_description=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "workflow_description",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "blocks=[\n\t\t$FERN_INPUT\n\t]",
                            "delimiter": ",\n\t\t",
                            "innerTemplate": {
                              "imports": ["from scoutos import BlockInput"],
                              "isOptional": true,
                              "templateString": "BlockInput(\n\t\t\t$FERN_INPUT\n\t\t)",
                              "templateInputs": [
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "block_archetype_id=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "block_archetype_id",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "block_config=[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                    "delimiter": ",\n\t\t\t\t",
                                    "innerTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "members": [
                                        {
                                          "type": {
                                            "value": "type_:BlockConfigItemBoolean",
                                            "type": "id"
                                          },
                                          "template": {
                                            "imports": ["from scoutos import BlockConfigItemBoolean"],
                                            "isOptional": true,
                                            "templateString": "BlockConfigItemBoolean(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "display_name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "display_name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "default_value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "default_value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": {
                                            "value": "type_:BlockConfigItemJson",
                                            "type": "id"
                                          },
                                          "template": {
                                            "imports": ["from scoutos import BlockConfigItemJson"],
                                            "isOptional": true,
                                            "templateString": "BlockConfigItemJson(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "display_name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "display_name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "default_value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "default_value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": {
                                            "value": "type_:BlockConfigItemNumber",
                                            "type": "id"
                                          },
                                          "template": {
                                            "imports": ["from scoutos import BlockConfigItemNumber"],
                                            "isOptional": true,
                                            "templateString": "BlockConfigItemNumber(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "display_name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "display_name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "default_value=$FERN_INPUT",
                                                  "members": [
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    },
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "double"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    }
                                                  ],
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "default_value"
                                                  },
                                                  "type": "union_v2"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "minimum_value=$FERN_INPUT",
                                                  "members": [
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    },
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "double"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    }
                                                  ],
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "minimum_value"
                                                  },
                                                  "type": "union_v2"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "maximum_value=$FERN_INPUT",
                                                  "members": [
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    },
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "double"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    }
                                                  ],
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "maximum_value"
                                                  },
                                                  "type": "union_v2"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "value=$FERN_INPUT",
                                                  "members": [
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    },
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "double"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    }
                                                  ],
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "value"
                                                  },
                                                  "type": "union_v2"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": {
                                            "value": "type_:BlockConfigItemLlm",
                                            "type": "id"
                                          },
                                          "template": {
                                            "imports": ["from scoutos import BlockConfigItemLlm"],
                                            "isOptional": true,
                                            "templateString": "BlockConfigItemLlm(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "display_name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "display_name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "value=[\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                                  "delimiter": ",\n\t\t\t\t\t\t",
                                                  "innerTemplate": {
                                                    "imports": ["from scoutos import Prompt"],
                                                    "isOptional": true,
                                                    "templateString": "Prompt(\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t)",
                                                    "templateInputs": [
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "templateString": "id=$FERN_INPUT",
                                                          "templateInputs": [
                                                            {
                                                              "location": "RELATIVE",
                                                              "path": "id",
                                                              "type": "payload"
                                                            }
                                                          ],
                                                          "type": "generic"
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "templateString": "role=$FERN_INPUT",
                                                          "values": {
                                                            "assistant": "\"assistant\"",
                                                            "user": "\"user\"",
                                                            "system": "\"system\""
                                                          },
                                                          "templateInput": {
                                                            "location": "RELATIVE",
                                                            "path": "role"
                                                          },
                                                          "type": "enum"
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "templateString": "content=$FERN_INPUT",
                                                          "templateInputs": [
                                                            {
                                                              "location": "RELATIVE",
                                                              "path": "content",
                                                              "type": "payload"
                                                            }
                                                          ],
                                                          "type": "generic"
                                                        }
                                                      }
                                                    ],
                                                    "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                    "type": "generic"
                                                  },
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "value"
                                                  },
                                                  "type": "iterable"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": {
                                            "value": "type_:BlockConfigItemSelect",
                                            "type": "id"
                                          },
                                          "template": {
                                            "imports": ["from scoutos import BlockConfigItemSelect"],
                                            "isOptional": true,
                                            "templateString": "BlockConfigItemSelect(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "display_name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "display_name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "options=[\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                                  "delimiter": ",\n\t\t\t\t\t\t",
                                                  "innerTemplate": {
                                                    "imports": ["from scoutos import SelectOptionItem"],
                                                    "isOptional": true,
                                                    "templateString": "SelectOptionItem(\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t)",
                                                    "templateInputs": [
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "templateString": "id=$FERN_INPUT",
                                                          "templateInputs": [
                                                            {
                                                              "location": "RELATIVE",
                                                              "path": "id",
                                                              "type": "payload"
                                                            }
                                                          ],
                                                          "type": "generic"
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "templateString": "name=$FERN_INPUT",
                                                          "templateInputs": [
                                                            {
                                                              "location": "RELATIVE",
                                                              "path": "name",
                                                              "type": "payload"
                                                            }
                                                          ],
                                                          "type": "generic"
                                                        }
                                                      }
                                                    ],
                                                    "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                    "type": "generic"
                                                  },
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "options"
                                                  },
                                                  "type": "iterable"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "selected_option=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "selected_option",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": {
                                            "value": "type_:BlockConfigItemTextLong",
                                            "type": "id"
                                          },
                                          "template": {
                                            "imports": ["from scoutos import BlockConfigItemTextLong"],
                                            "isOptional": true,
                                            "templateString": "BlockConfigItemTextLong(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "display_name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "display_name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "default_value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "default_value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "value=$FERN_INPUT",
                                                  "members": [
                                                    {
                                                      "type": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": null,
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    },
                                                    {
                                                      "type": {
                                                        "itemType": {
                                                          "value": "type_:Prompt",
                                                          "type": "id"
                                                        },
                                                        "type": "list"
                                                      },
                                                      "template": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "containerTemplateString": "[\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                                        "delimiter": ",\n\t\t\t\t\t\t",
                                                        "innerTemplate": {
                                                          "imports": ["from scoutos import Prompt"],
                                                          "isOptional": true,
                                                          "templateString": "Prompt(\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t)",
                                                          "templateInputs": [
                                                            {
                                                              "type": "template",
                                                              "value": {
                                                                "imports": [],
                                                                "isOptional": true,
                                                                "templateString": "id=$FERN_INPUT",
                                                                "templateInputs": [
                                                                  {
                                                                    "location": "RELATIVE",
                                                                    "path": "id",
                                                                    "type": "payload"
                                                                  }
                                                                ],
                                                                "type": "generic"
                                                              }
                                                            },
                                                            {
                                                              "type": "template",
                                                              "value": {
                                                                "imports": [],
                                                                "isOptional": true,
                                                                "templateString": "role=$FERN_INPUT",
                                                                "values": {
                                                                  "assistant": "\"assistant\"",
                                                                  "user": "\"user\"",
                                                                  "system": "\"system\""
                                                                },
                                                                "templateInput": {
                                                                  "location": "RELATIVE",
                                                                  "path": "role"
                                                                },
                                                                "type": "enum"
                                                              }
                                                            },
                                                            {
                                                              "type": "template",
                                                              "value": {
                                                                "imports": [],
                                                                "isOptional": true,
                                                                "templateString": "content=$FERN_INPUT",
                                                                "templateInputs": [
                                                                  {
                                                                    "location": "RELATIVE",
                                                                    "path": "content",
                                                                    "type": "payload"
                                                                  }
                                                                ],
                                                                "type": "generic"
                                                              }
                                                            }
                                                          ],
                                                          "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                          "type": "generic"
                                                        },
                                                        "templateInput": {
                                                          "location": "RELATIVE",
                                                          "path": null
                                                        },
                                                        "type": "iterable"
                                                      }
                                                    }
                                                  ],
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "value"
                                                  },
                                                  "type": "union_v2"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": {
                                            "value": "type_:BlockConfigItemTextShort",
                                            "type": "id"
                                          },
                                          "template": {
                                            "imports": ["from scoutos import BlockConfigItemTextShort"],
                                            "isOptional": true,
                                            "templateString": "BlockConfigItemTextShort(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "display_name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "display_name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "default_value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "default_value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "value=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "value",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        }
                                      ],
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": null
                                      },
                                      "type": "union_v2"
                                    },
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": "block_config"
                                    },
                                    "type": "iterable"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "block_display_name=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "block_display_name",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "block_id=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "block_id",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "block_inputs={\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                    "delimiter": ",\n\t\t\t\t",
                                    "keyTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "valueTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "keyValueSeparator": ": ",
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": "block_inputs"
                                    },
                                    "type": "dict"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "block_is_output=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "block_is_output",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "dependencies=[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                    "delimiter": ",\n\t\t\t\t",
                                    "innerTemplate": {
                                      "imports": ["from scoutos import Dependency"],
                                      "isOptional": true,
                                      "templateString": "Dependency(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "imports": [],
                                            "isOptional": true,
                                            "templateString": "block_id=$FERN_INPUT",
                                            "templateInputs": [
                                              {
                                                "location": "RELATIVE",
                                                "path": "block_id",
                                                "type": "payload"
                                              }
                                            ],
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "imports": ["from scoutos import EdgeUi"],
                                            "isOptional": true,
                                            "templateString": "ui=EdgeUi(\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "edge_type=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "ui.edge_type",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t\t",
                                            "type": "generic"
                                          }
                                        }
                                      ],
                                      "inputDelimiter": ",\n\t\t\t\t\t",
                                      "type": "generic"
                                    },
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": "dependencies"
                                    },
                                    "type": "iterable"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "input_schema={\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                    "delimiter": ",\n\t\t\t\t",
                                    "keyTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "valueTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "keyValueSeparator": ": ",
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": "input_schema"
                                    },
                                    "type": "dict"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "output_schema=[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                    "delimiter": ",\n\t\t\t\t",
                                    "innerTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": "output_schema"
                                    },
                                    "type": "iterable"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": ["from scoutos import NodeUi"],
                                    "isOptional": true,
                                    "templateString": "ui=NodeUi(\n\t\t\t\t$FERN_INPUT\n\t\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": ["from scoutos import Position"],
                                          "isOptional": true,
                                          "templateString": "position=Position(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                          "templateInputs": [
                                            {
                                              "type": "template",
                                              "value": {
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "x=$FERN_INPUT",
                                                "templateInputs": [
                                                  {
                                                    "location": "RELATIVE",
                                                    "path": "ui.position.x",
                                                    "type": "payload"
                                                  }
                                                ],
                                                "type": "generic"
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "y=$FERN_INPUT",
                                                "templateInputs": [
                                                  {
                                                    "location": "RELATIVE",
                                                    "path": "ui.position.x.position.y",
                                                    "type": "payload"
                                                  }
                                                ],
                                                "type": "generic"
                                              }
                                            }
                                          ],
                                          "inputDelimiter": ",\n\t\t\t\t\t",
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t\t",
                                    "type": "generic"
                                  }
                                }
                              ],
                              "inputDelimiter": ",\n\t\t\t",
                              "type": "generic"
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "blocks"
                            },
                            "type": "iterable"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.workflows.update(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "workflow_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "workflowDisplayName: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "workflow_display_name"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "workflowSchemaVersion: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "workflow_schema_version"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "workflowImgUrl: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "workflow_img_url"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "workflowDescription: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "workflow_description"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "iterable",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "blocks: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t",
                                        "innerTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "{\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                          "isOptional": true,
                                          "inputDelimiter": ",\n\t\t\t\t\t",
                                          "templateInputs": [
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "blockArchetypeId: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "block_archetype_id"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "iterable",
                                                "imports": [],
                                                "isOptional": true,
                                                "containerTemplateString": "blockConfig: [\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                                "delimiter": ",\n\t\t\t\t\t\t",
                                                "innerTemplate": {
                                                  "type": "union_v2",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "$FERN_INPUT",
                                                  "members": [
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "displayName: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "display_name"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "defaultValue: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "default_value"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "value: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "value"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:BlockConfigItemBoolean"
                                                      }
                                                    },
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "displayName: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "display_name"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "defaultValue: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "default_value"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "value: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "value"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:BlockConfigItemJson"
                                                      }
                                                    },
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "displayName: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "display_name"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "union_v2",
                                                              "imports": [],
                                                              "isOptional": true,
                                                              "templateString": "defaultValue: $FERN_INPUT",
                                                              "members": [
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "integer"
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "double"
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "templateInput": {
                                                                "location": "RELATIVE",
                                                                "path": "default_value"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "union_v2",
                                                              "imports": [],
                                                              "isOptional": true,
                                                              "templateString": "minimumValue: $FERN_INPUT",
                                                              "members": [
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "integer"
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "double"
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "templateInput": {
                                                                "location": "RELATIVE",
                                                                "path": "minimum_value"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "union_v2",
                                                              "imports": [],
                                                              "isOptional": true,
                                                              "templateString": "maximumValue: $FERN_INPUT",
                                                              "members": [
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "integer"
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "double"
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "templateInput": {
                                                                "location": "RELATIVE",
                                                                "path": "maximum_value"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "union_v2",
                                                              "imports": [],
                                                              "isOptional": true,
                                                              "templateString": "value: $FERN_INPUT",
                                                              "members": [
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "integer"
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "double"
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "templateInput": {
                                                                "location": "RELATIVE",
                                                                "path": "value"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:BlockConfigItemNumber"
                                                      }
                                                    },
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "displayName: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "display_name"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "iterable",
                                                              "imports": [],
                                                              "isOptional": true,
                                                              "containerTemplateString": "value: [\n\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t]",
                                                              "delimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                              "innerTemplate": {
                                                                "type": "generic",
                                                                "imports": [],
                                                                "templateString": "{\n\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t}",
                                                                "isOptional": true,
                                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t",
                                                                "templateInputs": [
                                                                  {
                                                                    "type": "template",
                                                                    "value": {
                                                                      "type": "generic",
                                                                      "imports": [],
                                                                      "templateString": "id: $FERN_INPUT",
                                                                      "isOptional": true,
                                                                      "templateInputs": [
                                                                        {
                                                                          "type": "payload",
                                                                          "location": "RELATIVE",
                                                                          "path": "id"
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  {
                                                                    "type": "template",
                                                                    "value": {
                                                                      "type": "enum",
                                                                      "imports": [],
                                                                      "isOptional": true,
                                                                      "values": {
                                                                        "assistant": "Scout.PromptRole.Assistant",
                                                                        "user": "Scout.PromptRole.User",
                                                                        "system": "Scout.PromptRole.System"
                                                                      },
                                                                      "templateString": "role: $FERN_INPUT",
                                                                      "templateInput": {
                                                                        "location": "RELATIVE",
                                                                        "path": "role"
                                                                      }
                                                                    }
                                                                  },
                                                                  {
                                                                    "type": "template",
                                                                    "value": {
                                                                      "type": "generic",
                                                                      "imports": [],
                                                                      "templateString": "content: $FERN_INPUT",
                                                                      "isOptional": true,
                                                                      "templateInputs": [
                                                                        {
                                                                          "type": "payload",
                                                                          "location": "RELATIVE",
                                                                          "path": "content"
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                ]
                                                              },
                                                              "templateInput": {
                                                                "location": "RELATIVE",
                                                                "path": "value"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:BlockConfigItemLlm"
                                                      }
                                                    },
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "displayName: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "display_name"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "iterable",
                                                              "imports": [],
                                                              "isOptional": true,
                                                              "containerTemplateString": "options: [\n\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t]",
                                                              "delimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                              "innerTemplate": {
                                                                "type": "generic",
                                                                "imports": [],
                                                                "templateString": "{\n\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t}",
                                                                "isOptional": true,
                                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t",
                                                                "templateInputs": [
                                                                  {
                                                                    "type": "template",
                                                                    "value": {
                                                                      "type": "generic",
                                                                      "imports": [],
                                                                      "templateString": "id: $FERN_INPUT",
                                                                      "isOptional": true,
                                                                      "templateInputs": [
                                                                        {
                                                                          "type": "payload",
                                                                          "location": "RELATIVE",
                                                                          "path": "id"
                                                                        }
                                                                      ]
                                                                    }
                                                                  },
                                                                  {
                                                                    "type": "template",
                                                                    "value": {
                                                                      "type": "generic",
                                                                      "imports": [],
                                                                      "templateString": "name: $FERN_INPUT",
                                                                      "isOptional": true,
                                                                      "templateInputs": [
                                                                        {
                                                                          "type": "payload",
                                                                          "location": "RELATIVE",
                                                                          "path": "name"
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                ]
                                                              },
                                                              "templateInput": {
                                                                "location": "RELATIVE",
                                                                "path": "options"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "selectedOption: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "selected_option"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "value: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "value"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:BlockConfigItemSelect"
                                                      }
                                                    },
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "displayName: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "display_name"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "defaultValue: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "default_value"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "union_v2",
                                                              "imports": [],
                                                              "isOptional": true,
                                                              "templateString": "value: $FERN_INPUT",
                                                              "members": [
                                                                {
                                                                  "template": {
                                                                    "type": "generic",
                                                                    "imports": [],
                                                                    "templateString": "$FERN_INPUT",
                                                                    "isOptional": true,
                                                                    "templateInputs": [
                                                                      {
                                                                        "type": "payload",
                                                                        "location": "RELATIVE",
                                                                        "path": null
                                                                      }
                                                                    ]
                                                                  },
                                                                  "type": {
                                                                    "type": "primitive",
                                                                    "value": {
                                                                      "type": "string"
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "template": {
                                                                    "type": "iterable",
                                                                    "imports": [],
                                                                    "isOptional": true,
                                                                    "containerTemplateString": "[\n\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t]",
                                                                    "delimiter": ",\n\t\t\t\t\t\t\t\t\t\t",
                                                                    "innerTemplate": {
                                                                      "type": "generic",
                                                                      "imports": [],
                                                                      "templateString": "{\n\t\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t\t}",
                                                                      "isOptional": true,
                                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t\t",
                                                                      "templateInputs": []
                                                                    },
                                                                    "templateInput": {
                                                                      "location": "RELATIVE",
                                                                      "path": null
                                                                    }
                                                                  },
                                                                  "type": {
                                                                    "type": "list",
                                                                    "itemType": {
                                                                      "type": "id",
                                                                      "value": "type_:Prompt"
                                                                    }
                                                                  }
                                                                }
                                                              ],
                                                              "templateInput": {
                                                                "location": "RELATIVE",
                                                                "path": "value"
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:BlockConfigItemTextLong"
                                                      }
                                                    },
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "displayName: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "display_name"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "defaultValue: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "default_value"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "value: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "value"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:BlockConfigItemTextShort"
                                                      }
                                                    }
                                                  ],
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                },
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "block_config"
                                                }
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "blockDisplayName: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "block_display_name"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "blockId: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "block_id"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "dict",
                                                "imports": [],
                                                "isOptional": true,
                                                "containerTemplateString": "blockInputs: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                                "delimiter": ",\n\t\t\t\t\t\t",
                                                "keyValueSeparator": ": ",
                                                "keyTemplate": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "valueTemplate": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "block_inputs"
                                                }
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "blockIsOutput: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "block_is_output"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "iterable",
                                                "imports": [],
                                                "isOptional": true,
                                                "containerTemplateString": "dependencies: [\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                                "delimiter": ",\n\t\t\t\t\t\t",
                                                "innerTemplate": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "{\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                                  "isOptional": true,
                                                  "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                  "templateInputs": [
                                                    {
                                                      "type": "template",
                                                      "value": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "blockId: $FERN_INPUT",
                                                        "isOptional": true,
                                                        "templateInputs": [
                                                          {
                                                            "type": "payload",
                                                            "location": "RELATIVE",
                                                            "path": "block_id"
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "template",
                                                      "value": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "ui: {\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "edgeType: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "ui.edge_type"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                },
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "dependencies"
                                                }
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "dict",
                                                "imports": [],
                                                "isOptional": true,
                                                "containerTemplateString": "inputSchema: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                                "delimiter": ",\n\t\t\t\t\t\t",
                                                "keyValueSeparator": ": ",
                                                "keyTemplate": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "valueTemplate": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "input_schema"
                                                }
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "iterable",
                                                "imports": [],
                                                "isOptional": true,
                                                "containerTemplateString": "outputSchema: [\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                                "delimiter": ",\n\t\t\t\t\t\t",
                                                "innerTemplate": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "output_schema"
                                                }
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "ui: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "position: {\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                                      "isOptional": true,
                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "x: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "ui.position.x"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "y: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "ui.position.y"
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "blocks"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "delete",
                "migratedFromUrlSlugs": ["delete-a-workflow"],
                "method": "DELETE",
                "id": "delete",
                "originalEndpointId": "endpoint_workflows.delete",
                "name": "Delete a workflow",
                "path": {
                  "pathParameters": [
                    {
                      "key": "workflow_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/workflows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "workflow_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersDeleteWorkflowResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/workflows/workflow_id",
                    "pathParameters": {
                      "workflow_id": "workflow_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "detail": "detail"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflows.delete(\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflows.delete(\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflows.delete(\"workflow_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "detail"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/workflows/:workflow_id",
                    "pathParameters": {
                      "workflow_id": ":workflow_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflows.delete(\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflows.delete(\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflows.delete(\"workflow_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.workflows.delete(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "workflow_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.workflows.delete(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "workflow_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "run-stream",
                "migratedFromUrlSlugs": ["execute-a-workflow"],
                "method": "POST",
                "id": "run_stream",
                "originalEndpointId": "endpoint_workflows.run_stream",
                "name": "Execute a workflow.",
                "path": {
                  "pathParameters": [
                    {
                      "key": "workflow_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/workflows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "workflow_id"
                    },
                    {
                      "type": "literal",
                      "value": "/execute"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the execution environment for the workflow. The available environments include:\n\n- `production`: The production environment, where workflows are executed under live conditions.\n- `staging`: A staging environment used for testing prior to production deployment.\n- `development`: A development environment used for testing new changes.\n- `console`: The console environment, runs latest changes on a workflow.",
                    "key": "environment",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "revision_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "session_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "inputs",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "id",
                              "value": "type_workflows:WorkflowsRunStreamRequestInputsValue"
                            }
                          }
                        }
                      },
                      {
                        "key": "streaming",
                        "valueType": {
                          "type": "literal",
                          "value": {
                            "type": "booleanLiteral",
                            "value": true
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "stream",
                    "shape": {
                      "type": "reference",
                      "value": {
                        "type": "id",
                        "value": "type_:WorkflowRunEvent"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/workflows/:workflow_id/execute",
                    "pathParameters": {
                      "workflow_id": ":workflow_id"
                    },
                    "queryParameters": {
                      "environment": "string",
                      "revision_id": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.workflows.run_stream(\n        workflow_id=\"string\",\n        environment=\"string\",\n        revision_id=\"string\",\n        session_id=\"string\",\n        inputs={\"string\": True},\n    )\n    async for chunk in response:\n        yield chunk\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.workflows.run_stream(\n    workflow_id=\"string\",\n    environment=\"string\",\n    revision_id=\"string\",\n    session_id=\"string\",\n    inputs={\"string\": True},\n)\nfor chunk in response:\n    yield chunk\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflows.runStream(\"string\", {\n    environment: \"string\",\n    revisionId: \"string\",\n    sessionId: \"string\",\n    inputs: {\n        \"string\": true\n    }\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "streaming": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "stream",
                      "value": [
                        {
                          "organization_id": "string",
                          "id": "string",
                          "correlation_id": "string",
                          "name": "string",
                          "version": "string",
                          "environment": "development",
                          "timestamp": "string",
                          "data": {
                            "organization_id": "string",
                            "id": "string",
                            "correlation_id": "string",
                            "name": "block_run_completed",
                            "version": "string",
                            "environment": "development",
                            "timestamp": "string",
                            "data": {
                              "workflow_id": "string",
                              "workflow_run_id": "string",
                              "block_id": "string",
                              "config": {
                                "string": {}
                              },
                              "cost": 1,
                              "metadata": {
                                "string": {}
                              },
                              "state": {
                                "string": {}
                              },
                              "session_id": "string",
                              "block_type": "string"
                            }
                          }
                        },
                        {
                          "organization_id": "string",
                          "id": "string",
                          "correlation_id": "string",
                          "name": "string",
                          "version": "string",
                          "environment": "development",
                          "timestamp": "string",
                          "data": {
                            "organization_id": "string",
                            "id": "string",
                            "correlation_id": "string",
                            "name": "block_run_completed",
                            "version": "string",
                            "environment": "development",
                            "timestamp": "string",
                            "data": {
                              "workflow_id": "string",
                              "workflow_run_id": "string",
                              "block_id": "string",
                              "config": {
                                "string": {}
                              },
                              "cost": 1,
                              "metadata": {
                                "string": {}
                              },
                              "state": {
                                "string": {}
                              },
                              "session_id": "string",
                              "block_type": "string"
                            }
                          }
                        }
                      ]
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/workflows/:workflow_id/execute",
                    "pathParameters": {
                      "workflow_id": ":workflow_id"
                    },
                    "queryParameters": {
                      "environment": "string",
                      "revision_id": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.workflows.run_stream(\n        workflow_id=\"string\",\n        environment=\"string\",\n        revision_id=\"string\",\n        session_id=\"string\",\n        inputs={\"string\": True},\n    )\n    async for chunk in response:\n        yield chunk\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.workflows.run_stream(\n    workflow_id=\"string\",\n    environment=\"string\",\n    revision_id=\"string\",\n    session_id=\"string\",\n    inputs={\"string\": True},\n)\nfor chunk in response:\n    yield chunk\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflows.runStream(\"string\", {\n    environment: \"string\",\n    revisionId: \"string\",\n    sessionId: \"string\",\n    inputs: {\n        \"string\": true\n    }\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "streaming": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.workflows.run_stream(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "workflow_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "environment=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "environment",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "revision_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "revision_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "session_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "session_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "inputs={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "members": [
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "boolean"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "keyType": {
                                      "type": "primitive",
                                      "value": {
                                        "type": "string"
                                      }
                                    },
                                    "valueType": {
                                      "type": "unknown"
                                    },
                                    "type": "map"
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                                    "delimiter": ",\n\t\t\t",
                                    "keyTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "valueTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "keyValueSeparator": ": ",
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": null
                                    },
                                    "type": "dict"
                                  }
                                },
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "double"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "integer"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "itemType": {
                                      "type": "unknown"
                                    },
                                    "type": "list"
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "[\n\t\t\t$FERN_INPUT\n\t\t]",
                                    "delimiter": ",\n\t\t\t",
                                    "innerTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": null
                                    },
                                    "type": "iterable"
                                  }
                                },
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "string"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                }
                              ],
                              "templateInput": {
                                "location": "RELATIVE",
                                "path": null
                              },
                              "type": "union_v2"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "inputs"
                            },
                            "type": "dict"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.workflows.runStream(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "workflow_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "environment: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "environment"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "revisionId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "revision_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "sessionId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "session_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "dict",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "inputs: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "delimiter": ",\n\t\t\t",
                                  "keyValueSeparator": ": ",
                                  "keyTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "valueTemplate": {
                                    "type": "union_v2",
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "members": [
                                      {
                                        "template": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "type": {
                                          "type": "primitive",
                                          "value": {
                                            "type": "boolean"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "dict",
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "{\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                          "delimiter": ",\n\t\t\t\t\t",
                                          "keyValueSeparator": ": ",
                                          "keyTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "valueTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "type": {
                                          "type": "map",
                                          "keyType": {
                                            "type": "primitive",
                                            "value": {
                                              "type": "string"
                                            }
                                          },
                                          "valueType": {
                                            "type": "unknown"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "type": {
                                          "type": "primitive",
                                          "value": {
                                            "type": "double"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "type": {
                                          "type": "primitive",
                                          "value": {
                                            "type": "integer"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "iterable",
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                          "delimiter": ",\n\t\t\t\t\t",
                                          "innerTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "type": {
                                          "type": "list",
                                          "itemType": {
                                            "type": "unknown"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "type": {
                                          "type": "primitive",
                                          "value": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    ],
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "inputs"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "run",
                "migratedFromUrlSlugs": ["execute-a-workflow"],
                "method": "POST",
                "id": "run",
                "originalEndpointId": "endpoint_workflows.run",
                "name": "Execute a workflow.",
                "path": {
                  "pathParameters": [
                    {
                      "key": "workflow_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/workflows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "workflow_id"
                    },
                    {
                      "type": "literal",
                      "value": "/execute"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the execution environment for the workflow. The available environments include:\n\n- `production`: The production environment, where workflows are executed under live conditions.\n- `staging`: A staging environment used for testing prior to production deployment.\n- `development`: A development environment used for testing new changes.\n- `console`: The console environment, runs latest changes on a workflow.",
                    "key": "environment",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "revision_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "session_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "inputs",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "id",
                              "value": "type_workflows:WorkflowsRunRequestInputsValue"
                            }
                          }
                        }
                      },
                      {
                        "key": "streaming",
                        "valueType": {
                          "type": "literal",
                          "value": {
                            "type": "booleanLiteral",
                            "value": false
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WorkflowRunResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/workflows/workflow_id/execute",
                    "pathParameters": {
                      "workflow_id": "workflow_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "streaming": false
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "run": {
                        "stop_reason": "workflow_run_completed",
                        "errors": ["errors"],
                        "session_id": "session_id",
                        "workflow_run_id": "workflow_run_id"
                      },
                      "workflow_id": "workflow_id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflows.run(\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflows.run(\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflows.run(\"workflow_id\", {});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "streaming": false
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "run": {
                          "stop_reason": "workflow_run_completed",
                          "errors": ["errors"],
                          "session_id": "session_id",
                          "workflow_run_id": "workflow_run_id"
                        },
                        "workflow_id": "workflow_id"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/workflows/:workflow_id/execute",
                    "pathParameters": {
                      "workflow_id": ":workflow_id"
                    },
                    "queryParameters": {
                      "environment": "string",
                      "revision_id": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflows.run(\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflows.run(\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflows.run(\"workflow_id\", {});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "streaming": false
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.workflows.runStream(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "workflow_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "environment: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "environment"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "revisionId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "revision_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "sessionId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "session_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "dict",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "inputs: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "delimiter": ",\n\t\t\t",
                                  "keyValueSeparator": ": ",
                                  "keyTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "valueTemplate": {
                                    "type": "union_v2",
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "members": [
                                      {
                                        "template": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "type": {
                                          "type": "primitive",
                                          "value": {
                                            "type": "boolean"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "dict",
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "{\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                          "delimiter": ",\n\t\t\t\t\t",
                                          "keyValueSeparator": ": ",
                                          "keyTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "valueTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "type": {
                                          "type": "map",
                                          "keyType": {
                                            "type": "primitive",
                                            "value": {
                                              "type": "string"
                                            }
                                          },
                                          "valueType": {
                                            "type": "unknown"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "type": {
                                          "type": "primitive",
                                          "value": {
                                            "type": "double"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "type": {
                                          "type": "primitive",
                                          "value": {
                                            "type": "integer"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "iterable",
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                          "delimiter": ",\n\t\t\t\t\t",
                                          "innerTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "type": {
                                          "type": "list",
                                          "itemType": {
                                            "type": "unknown"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "type": {
                                          "type": "primitive",
                                          "value": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    ],
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "inputs"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.workflows.run_stream(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "workflow_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "environment=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "environment",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "revision_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "revision_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "session_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "session_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "inputs={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "members": [
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "boolean"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "keyType": {
                                      "type": "primitive",
                                      "value": {
                                        "type": "string"
                                      }
                                    },
                                    "valueType": {
                                      "type": "unknown"
                                    },
                                    "type": "map"
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                                    "delimiter": ",\n\t\t\t",
                                    "keyTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "valueTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "keyValueSeparator": ": ",
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": null
                                    },
                                    "type": "dict"
                                  }
                                },
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "double"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "integer"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "itemType": {
                                      "type": "unknown"
                                    },
                                    "type": "list"
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "[\n\t\t\t$FERN_INPUT\n\t\t]",
                                    "delimiter": ",\n\t\t\t",
                                    "innerTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": null
                                    },
                                    "type": "iterable"
                                  }
                                },
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "string"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                }
                              ],
                              "templateInput": {
                                "location": "RELATIVE",
                                "path": null
                              },
                              "type": "union_v2"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "inputs"
                            },
                            "type": "dict"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  }
                }
              }
            ],
            "types": [
              "type_workflows:WorkflowsRunStreamRequestInputsValue",
              "type_workflows:WorkflowsRunRequestInputsValue"
            ],
            "subpackages": [],
            "urlSlug": "workflows",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_environments": {
            "subpackageId": "subpackage_environments",
            "name": "environments",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "list",
                "migratedFromUrlSlugs": ["list-all-environments-for-a-workflow"],
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_environments.list",
                "name": "List all environments for a workflow",
                "path": {
                  "pathParameters": [
                    {
                      "key": "workflow_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/workflows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "workflow_id"
                    },
                    {
                      "type": "literal",
                      "value": "/environments"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersGetWorkflowEnvironmentsResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/workflows/workflow_id/environments",
                    "pathParameters": {
                      "workflow_id": "workflow_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [
                        {
                          "environment_id": "environment_id",
                          "environment_config": {
                            "name": "name",
                            "description": "description"
                          },
                          "created_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "deployments": [
                            {
                              "deployment_id": "deployment_id",
                              "environment_id": "environment_id",
                              "deployment_config": {
                                "revision_lookup": "latest"
                              },
                              "created_at": "2024-01-15T09:30:00Z",
                              "created_by": {
                                "type": "user",
                                "details": {
                                  "user_id": "user_id",
                                  "org_id": "org_id",
                                  "scout_organization_id": "scout_organization_id",
                                  "email": {
                                    "key": "value"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.environments.list(\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.environments.list(\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.environments.list(\"workflow_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [
                          {
                            "environment_id": "environment_id",
                            "environment_config": {
                              "name": "name",
                              "description": "description"
                            },
                            "created_at": "2024-01-15T09:30:00Z",
                            "created_by": {
                              "type": "user",
                              "details": {
                                "user_id": "user_id",
                                "org_id": "org_id",
                                "scout_organization_id": "scout_organization_id",
                                "email": {
                                  "key": "value"
                                }
                              }
                            },
                            "last_updated_at": "2024-01-15T09:30:00Z",
                            "last_updated_by": {
                              "type": "user",
                              "details": {
                                "user_id": "user_id",
                                "org_id": "org_id",
                                "scout_organization_id": "scout_organization_id",
                                "email": {
                                  "key": "value"
                                }
                              }
                            },
                            "deployments": [
                              {
                                "deployment_id": "deployment_id",
                                "environment_id": "environment_id",
                                "deployment_config": {
                                  "revision_lookup": "latest"
                                },
                                "created_at": "2024-01-15T09:30:00Z",
                                "created_by": {
                                  "type": "user",
                                  "details": {
                                    "user_id": "user_id",
                                    "org_id": "org_id",
                                    "scout_organization_id": "scout_organization_id",
                                    "email": {
                                      "key": "value"
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/workflows/:workflow_id/environments",
                    "pathParameters": {
                      "workflow_id": ":workflow_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.environments.list(\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.environments.list(\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.environments.list(\"workflow_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List all environments for a workflow in the organization",
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.environments.list(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "workflow_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.environments.list(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "workflow_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "update",
                "migratedFromUrlSlugs": ["update-a-workflow-environment"],
                "method": "PUT",
                "id": "update",
                "originalEndpointId": "endpoint_environments.update",
                "name": "Update a workflow environment",
                "path": {
                  "pathParameters": [
                    {
                      "key": "workflow_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "key": "environment_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/workflows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "workflow_id"
                    },
                    {
                      "type": "literal",
                      "value": "/environments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "environment_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "description",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "deployments",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "id",
                            "value": "type_:EnvironmentDeploymentConfig"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersUpdateWorkflowEnvironmentResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/workflows/workflow_id/environments/environment_id",
                    "pathParameters": {
                      "workflow_id": "workflow_id",
                      "environment_id": "environment_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "name": "name",
                      "description": "description",
                      "deployments": [
                        {
                          "revision_lookup": "latest"
                        }
                      ]
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout, EnvironmentDeploymentConfig\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.environments.update(\n        workflow_id=\"workflow_id\",\n        environment_id=\"environment_id\",\n        name=\"name\",\n        description=\"description\",\n        deployments=[\n            EnvironmentDeploymentConfig(\n                revision_lookup=\"latest\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import EnvironmentDeploymentConfig, Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.environments.update(\n    workflow_id=\"workflow_id\",\n    environment_id=\"environment_id\",\n    name=\"name\",\n    description=\"description\",\n    deployments=[\n        EnvironmentDeploymentConfig(\n            revision_lookup=\"latest\",\n        )\n    ],\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.environments.update(\"workflow_id\", \"environment_id\", {\n    name: \"name\",\n    description: \"description\",\n    deployments: [{\n            revisionLookup: Scout.EnvironmentDeploymentConfigRevisionLookup.Latest\n        }]\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "name",
                        "description": "description",
                        "deployments": [
                          {
                            "revision_lookup": "latest"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/workflows/:workflow_id/environments/:environment_id",
                    "pathParameters": {
                      "workflow_id": ":workflow_id",
                      "environment_id": ":environment_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout, EnvironmentDeploymentConfig\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.environments.update(\n        workflow_id=\"workflow_id\",\n        environment_id=\"environment_id\",\n        name=\"name\",\n        description=\"description\",\n        deployments=[\n            EnvironmentDeploymentConfig(\n                revision_lookup=\"latest\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import EnvironmentDeploymentConfig, Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.environments.update(\n    workflow_id=\"workflow_id\",\n    environment_id=\"environment_id\",\n    name=\"name\",\n    description=\"description\",\n    deployments=[\n        EnvironmentDeploymentConfig(\n            revision_lookup=\"latest\",\n        )\n    ],\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.environments.update(\"workflow_id\", \"environment_id\", {\n    name: \"name\",\n    description: \"description\",\n    deployments: [{\n            revisionLookup: Scout.EnvironmentDeploymentConfigRevisionLookup.Latest\n        }]\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "description": "string",
                        "deployments": [
                          {
                            "revision_lookup": "latest"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update deployments within a workflow environment",
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.environments.update(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "workflow_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "environment_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "environment_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "description=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "description",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "deployments=[\n\t\t$FERN_INPUT\n\t]",
                            "delimiter": ",\n\t\t",
                            "innerTemplate": {
                              "imports": ["from scoutos import EnvironmentDeploymentConfig"],
                              "isOptional": true,
                              "templateString": "EnvironmentDeploymentConfig(\n\t\t\t$FERN_INPUT\n\t\t)",
                              "templateInputs": [
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "revision_id=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "revision_id",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "revision_lookup=$FERN_INPUT",
                                    "values": {
                                      "latest": "\"latest\"",
                                      "revision_id": "\"revision_id\""
                                    },
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": "revision_lookup"
                                    },
                                    "type": "enum"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "traffic=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "traffic",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                }
                              ],
                              "inputDelimiter": ",\n\t\t\t",
                              "type": "generic"
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "deployments"
                            },
                            "type": "iterable"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.environments.update(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "workflow_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "environment_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "name: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "description: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "description"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "iterable",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "deployments: [\n\t\t\t$FERN_INPUT\n\t\t]",
                                  "delimiter": ",\n\t\t\t",
                                  "innerTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                    "isOptional": true,
                                    "inputDelimiter": ",\n\t\t\t\t",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "revisionId: $FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": "revision_id"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "enum",
                                          "imports": [],
                                          "isOptional": true,
                                          "values": {
                                            "latest": "Scout.EnvironmentDeploymentConfigRevisionLookup.Latest",
                                            "revision_id": "Scout.EnvironmentDeploymentConfigRevisionLookup.RevisionId"
                                          },
                                          "templateString": "revisionLookup: $FERN_INPUT",
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": "revision_lookup"
                                          }
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "traffic: $FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": "traffic"
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "deployments"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "environments",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_revisions": {
            "subpackageId": "subpackage_revisions",
            "name": "revisions",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "list",
                "migratedFromUrlSlugs": ["list-all-revisions-for-a-workflow"],
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_revisions.list",
                "name": "List all revisions for a workflow",
                "path": {
                  "pathParameters": [
                    {
                      "key": "workflow_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/workflows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "workflow_id"
                    },
                    {
                      "type": "literal",
                      "value": "/revisions"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersListWorkflowRevisionsResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/workflows/workflow_id/revisions",
                    "pathParameters": {
                      "workflow_id": "workflow_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [
                        {
                          "workflow_config": {},
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "revision_id": "revision_id",
                          "workflow_id": "workflow_id",
                          "is_draft": true
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.revisions.list(\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.revisions.list(\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.revisions.list(\"workflow_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [
                          {
                            "workflow_config": {},
                            "last_updated_at": "2024-01-15T09:30:00Z",
                            "created_at": "2024-01-15T09:30:00Z",
                            "created_by": {
                              "type": "user",
                              "details": {
                                "user_id": "user_id",
                                "org_id": "org_id",
                                "scout_organization_id": "scout_organization_id",
                                "email": {
                                  "key": "value"
                                }
                              }
                            },
                            "last_updated_by": {
                              "type": "user",
                              "details": {
                                "user_id": "user_id",
                                "org_id": "org_id",
                                "scout_organization_id": "scout_organization_id",
                                "email": {
                                  "key": "value"
                                }
                              }
                            },
                            "revision_id": "revision_id",
                            "workflow_id": "workflow_id",
                            "is_draft": true
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/workflows/:workflow_id/revisions",
                    "pathParameters": {
                      "workflow_id": ":workflow_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.revisions.list(\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.revisions.list(\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.revisions.list(\"workflow_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List all app revisions in the organization",
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.revisions.list(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "workflow_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.revisions.list(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "workflow_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "update",
                "migratedFromUrlSlugs": ["make-a-revision-the-active-revision-for-a-workflow"],
                "method": "PUT",
                "id": "update",
                "originalEndpointId": "endpoint_revisions.update",
                "name": "Make a revision the active revision for a workflow",
                "path": {
                  "pathParameters": [
                    {
                      "key": "workflow_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "key": "revision_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/workflows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "workflow_id"
                    },
                    {
                      "type": "literal",
                      "value": "/revisions/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "revision_id"
                    },
                    {
                      "type": "literal",
                      "value": "/promote"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersPromoteWorkflowRevisionResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/workflows/workflow_id/revisions/revision_id/promote",
                    "pathParameters": {
                      "workflow_id": "workflow_id",
                      "revision_id": "revision_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "workflow_config": {
                          "workflow_display_name": "workflow_display_name",
                          "workflow_schema_version": "workflow_schema_version",
                          "workflow_img_url": "workflow_img_url",
                          "workflow_description": "workflow_description",
                          "blocks": [
                            {
                              "block_archetype_id": "block_archetype_id",
                              "block_display_name": "block_display_name",
                              "block_id": "block_id"
                            }
                          ]
                        },
                        "last_updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z",
                        "created_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "last_updated_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "revision_id": "revision_id",
                        "workflow_id": "workflow_id",
                        "is_draft": true
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.revisions.update(\n        workflow_id=\"workflow_id\",\n        revision_id=\"revision_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.revisions.update(\n    workflow_id=\"workflow_id\",\n    revision_id=\"revision_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.revisions.update(\"workflow_id\", \"revision_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "workflow_config": {
                            "workflow_display_name": "workflow_display_name",
                            "workflow_schema_version": "workflow_schema_version",
                            "workflow_img_url": "workflow_img_url",
                            "workflow_description": "workflow_description",
                            "blocks": [
                              {
                                "block_archetype_id": "block_archetype_id",
                                "block_display_name": "block_display_name",
                                "block_id": "block_id"
                              }
                            ]
                          },
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "revision_id": "revision_id",
                          "workflow_id": "workflow_id",
                          "is_draft": true
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/workflows/:workflow_id/revisions/:revision_id/promote",
                    "pathParameters": {
                      "workflow_id": ":workflow_id",
                      "revision_id": ":revision_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.revisions.update(\n        workflow_id=\"workflow_id\",\n        revision_id=\"revision_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.revisions.update(\n    workflow_id=\"workflow_id\",\n    revision_id=\"revision_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.revisions.update(\"workflow_id\", \"revision_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.revisions.update(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "workflow_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "revision_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "revision_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.revisions.update(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "workflow_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "revision_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "delete",
                "migratedFromUrlSlugs": ["delete-a-revision"],
                "method": "DELETE",
                "id": "delete",
                "originalEndpointId": "endpoint_revisions.delete",
                "name": "Delete a revision",
                "path": {
                  "pathParameters": [
                    {
                      "key": "workflow_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "key": "revision_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/workflows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "workflow_id"
                    },
                    {
                      "type": "literal",
                      "value": "/revisions/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "revision_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersDeleteWorkflowRevisionResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/workflows/workflow_id/revisions/revision_id",
                    "pathParameters": {
                      "workflow_id": "workflow_id",
                      "revision_id": "revision_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "detail": "detail"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.revisions.delete(\n        workflow_id=\"workflow_id\",\n        revision_id=\"revision_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.revisions.delete(\n    workflow_id=\"workflow_id\",\n    revision_id=\"revision_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.revisions.delete(\"workflow_id\", \"revision_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "detail"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/workflows/:workflow_id/revisions/:revision_id",
                    "pathParameters": {
                      "workflow_id": ":workflow_id",
                      "revision_id": ":revision_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.revisions.delete(\n        workflow_id=\"workflow_id\",\n        revision_id=\"revision_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.revisions.delete(\n    workflow_id=\"workflow_id\",\n    revision_id=\"revision_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.revisions.delete(\"workflow_id\", \"revision_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.revisions.delete(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "workflow_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "revision_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "revision_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.revisions.delete(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "workflow_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "revision_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "revisions",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_usage": {
            "subpackageId": "subpackage_usage",
            "name": "usage",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "get",
                "migratedFromUrlSlugs": ["get-usage-information-for-the-current-organization"],
                "method": "GET",
                "id": "get",
                "originalEndpointId": "endpoint_usage.get",
                "name": "Get usage information for the current organization.",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/usage"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Start date for the usage data",
                    "key": "start_date",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "End date for the usage data",
                    "key": "end_date",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ResponseModelUsage"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/usage",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "usage": [
                          {
                            "total_cost": 1.1
                          }
                        ],
                        "total_cost": 1.1
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.usage.get()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.usage.get()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.usage.get();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "usage": [
                            {
                              "total_cost": 1.1
                            }
                          ],
                          "total_cost": 1.1
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/usage",
                    "pathParameters": {},
                    "queryParameters": {
                      "start_date": "string",
                      "end_date": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.usage.get()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.usage.get()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.usage.get();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.usage.get(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "start_date=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "start_date",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "end_date=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "end_date",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.usage.get(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "startDate: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "start_date"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "endDate: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "end_date"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "usage",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_workflowLogs": {
            "subpackageId": "subpackage_workflowLogs",
            "name": "workflowLogs",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "get",
                "migratedFromUrlSlugs": ["get-logs-for-a-workflow"],
                "method": "GET",
                "id": "get",
                "originalEndpointId": "endpoint_workflowLogs.get",
                "name": "Get logs for a workflow",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/run_logs"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "key": "workflow_id",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "start_date",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "end_date",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "key": "session_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "status",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "cursor",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "unknown"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/run_logs",
                    "pathParameters": {},
                    "queryParameters": {
                      "workflow_id": "workflow_id"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "key": "value"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflow_logs.get(\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflow_logs.get(\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflowLogs.get({\n    workflowId: \"workflow_id\"\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "key": "value"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/run_logs",
                    "pathParameters": {},
                    "queryParameters": {
                      "workflow_id": "string",
                      "start_date": "string",
                      "end_date": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflow_logs.get(\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflow_logs.get(\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflowLogs.get({\n    workflowId: \"workflow_id\"\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.workflow_logs.get(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "workflow_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "start_date=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "start_date",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "end_date=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "end_date",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "limit=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "limit",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "session_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "session_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "status=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "status",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "cursor=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "cursor",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.workflowLogs.get(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "workflowId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "workflow_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "startDate: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "start_date"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "endDate: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "end_date"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "limit: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "limit"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "sessionId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "session_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "status: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "status"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "cursor: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "cursor"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "workflow-logs",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_copilots": {
            "subpackageId": "subpackage_copilots",
            "name": "copilots",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "list",
                "migratedFromUrlSlugs": ["list-all-copilots"],
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_copilots.list",
                "name": "List all copilots",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/copilots"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Field to sort by",
                    "key": "sort",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Sort in ascending or descending order",
                    "key": "direction",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "created_at to start at",
                    "key": "start_at",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Limit of records to return",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Search query",
                    "key": "query",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersListCopilotsResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/copilots",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [
                        {
                          "copilot_config": {},
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "revision_id": "revision_id",
                          "copilot_id": "copilot_id",
                          "is_draft": true
                        }
                      ],
                      "next_cursor": "2024-01-15T09:30:00Z",
                      "has_more": true
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.list()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.list()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.copilots.list();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [
                          {
                            "copilot_config": {},
                            "last_updated_at": "2024-01-15T09:30:00Z",
                            "created_at": "2024-01-15T09:30:00Z",
                            "created_by": {
                              "type": "user",
                              "details": {
                                "user_id": "user_id",
                                "org_id": "org_id",
                                "scout_organization_id": "scout_organization_id",
                                "email": {
                                  "key": "value"
                                }
                              }
                            },
                            "last_updated_by": {
                              "type": "user",
                              "details": {
                                "user_id": "user_id",
                                "org_id": "org_id",
                                "scout_organization_id": "scout_organization_id",
                                "email": {
                                  "key": "value"
                                }
                              }
                            },
                            "revision_id": "revision_id",
                            "copilot_id": "copilot_id",
                            "is_draft": true
                          }
                        ],
                        "next_cursor": "2024-01-15T09:30:00Z",
                        "has_more": true
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/copilots",
                    "pathParameters": {},
                    "queryParameters": {
                      "sort": "string",
                      "direction": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.list()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.list()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.copilots.list();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List all copilots in the organization",
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.copilots.list(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "sort=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "sort",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "direction=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "direction",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "start_at=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "start_at",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "limit=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "limit",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "query=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "query",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.copilots.list(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "sort: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "sort"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "direction: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "direction"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "startAt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "start_at"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "limit: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "limit"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "query: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "query"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["create-a-new-copilot"],
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_copilots.create",
                "name": "Create a new copilot",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/copilots"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:CopilotConfig"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersCreateCopilotResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/copilots",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "copilot_config": {
                          "workflow_id": "workflow_id",
                          "img_url": "img_url",
                          "display_name": "display_name",
                          "mode": "light",
                          "colors": {
                            "key": "value"
                          },
                          "message_placeholder": "message_placeholder",
                          "allowed_origins": "allowed_origins"
                        },
                        "last_updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z",
                        "created_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "last_updated_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "revision_id": "revision_id",
                        "copilot_id": "copilot_id",
                        "is_draft": true
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.create()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.create()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.copilots.create({});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "copilot_config": {
                            "workflow_id": "workflow_id",
                            "img_url": "img_url",
                            "display_name": "display_name",
                            "mode": "light",
                            "colors": {
                              "key": "value"
                            },
                            "message_placeholder": "message_placeholder",
                            "allowed_origins": "allowed_origins"
                          },
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "revision_id": "revision_id",
                          "copilot_id": "copilot_id",
                          "is_draft": true
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/copilots",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.create()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.create()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.copilots.create({});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.copilots.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "workflow_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "img_url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "img_url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "display_name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "display_name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "mode=$FERN_INPUT",
                            "values": {
                              "light": "\"light\"",
                              "dark": "\"dark\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "mode"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "colors={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "colors"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "fab={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "members": [
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "string"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "integer"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                }
                              ],
                              "templateInput": {
                                "location": "RELATIVE",
                                "path": null
                              },
                              "type": "union_v2"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "fab"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "message_placeholder=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "message_placeholder",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "initial_activity=[\n\t\t$FERN_INPUT\n\t]",
                            "delimiter": ",\n\t\t",
                            "innerTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "initial_activity"
                            },
                            "type": "iterable"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "allowed_origins=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "allowed_origins",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.copilots.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "workflowId: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "workflow_id"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "imgUrl: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "img_url"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "displayName: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "display_name"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "light": "Scout.CopilotConfigMode.Light",
                                          "dark": "Scout.CopilotConfigMode.Dark"
                                        },
                                        "templateString": "mode: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "mode"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "colors: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "colors"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "fab: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "union_v2",
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "$FERN_INPUT",
                                          "members": [
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "primitive",
                                                "value": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "primitive",
                                                "value": {
                                                  "type": "integer"
                                                }
                                              }
                                            }
                                          ],
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "fab"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "messagePlaceholder: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "message_placeholder"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "iterable",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "initialActivity: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t",
                                        "innerTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "initial_activity"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "allowedOrigins: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "allowed_origins"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "get",
                "migratedFromUrlSlugs": ["get-a-copilot"],
                "method": "GET",
                "id": "get",
                "originalEndpointId": "endpoint_copilots.get",
                "name": "Get a copilot",
                "path": {
                  "pathParameters": [
                    {
                      "key": "copilot_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/copilots/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "copilot_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersGetCopilotResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/copilots/copilot_id",
                    "pathParameters": {
                      "copilot_id": "copilot_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "copilot_config": {
                          "workflow_id": "workflow_id",
                          "img_url": "img_url",
                          "display_name": "display_name",
                          "mode": "light",
                          "colors": {
                            "key": "value"
                          },
                          "message_placeholder": "message_placeholder",
                          "allowed_origins": "allowed_origins"
                        },
                        "last_updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z",
                        "created_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "last_updated_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "revision_id": "revision_id",
                        "copilot_id": "copilot_id",
                        "is_draft": true
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.get(\n        copilot_id=\"copilot_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.get(\n    copilot_id=\"copilot_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.copilots.get(\"copilot_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "copilot_config": {
                            "workflow_id": "workflow_id",
                            "img_url": "img_url",
                            "display_name": "display_name",
                            "mode": "light",
                            "colors": {
                              "key": "value"
                            },
                            "message_placeholder": "message_placeholder",
                            "allowed_origins": "allowed_origins"
                          },
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "revision_id": "revision_id",
                          "copilot_id": "copilot_id",
                          "is_draft": true
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/copilots/:copilot_id",
                    "pathParameters": {
                      "copilot_id": ":copilot_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.get(\n        copilot_id=\"copilot_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.get(\n    copilot_id=\"copilot_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.copilots.get(\"copilot_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetch app configuration by ID.",
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.copilots.get(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "copilot_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "copilot_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.copilots.get(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "copilot_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "update",
                "migratedFromUrlSlugs": ["update-a-copilot"],
                "method": "PUT",
                "id": "update",
                "originalEndpointId": "endpoint_copilots.update",
                "name": "Update a copilot",
                "path": {
                  "pathParameters": [
                    {
                      "key": "copilot_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/copilots/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "copilot_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:CopilotConfig"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersUpdateCopilotResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/copilots/copilot_id",
                    "pathParameters": {
                      "copilot_id": "copilot_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "copilot_config": {
                          "workflow_id": "workflow_id",
                          "img_url": "img_url",
                          "display_name": "display_name",
                          "mode": "light",
                          "colors": {
                            "key": "value"
                          },
                          "message_placeholder": "message_placeholder",
                          "allowed_origins": "allowed_origins"
                        },
                        "last_updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z",
                        "created_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "last_updated_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "revision_id": "revision_id",
                        "copilot_id": "copilot_id",
                        "is_draft": true
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.update(\n        copilot_id=\"copilot_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.update(\n    copilot_id=\"copilot_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.copilots.update(\"copilot_id\", {});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "copilot_config": {
                            "workflow_id": "workflow_id",
                            "img_url": "img_url",
                            "display_name": "display_name",
                            "mode": "light",
                            "colors": {
                              "key": "value"
                            },
                            "message_placeholder": "message_placeholder",
                            "allowed_origins": "allowed_origins"
                          },
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "revision_id": "revision_id",
                          "copilot_id": "copilot_id",
                          "is_draft": true
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/copilots/:copilot_id",
                    "pathParameters": {
                      "copilot_id": ":copilot_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.update(\n        copilot_id=\"copilot_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.update(\n    copilot_id=\"copilot_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.copilots.update(\"copilot_id\", {});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.copilots.update(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "copilot_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "copilot_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "workflow_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "workflow_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "img_url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "img_url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "display_name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "display_name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "mode=$FERN_INPUT",
                            "values": {
                              "light": "\"light\"",
                              "dark": "\"dark\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "mode"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "colors={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "colors"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "fab={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "members": [
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "string"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "integer"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                }
                              ],
                              "templateInput": {
                                "location": "RELATIVE",
                                "path": null
                              },
                              "type": "union_v2"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "fab"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "message_placeholder=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "message_placeholder",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "initial_activity=[\n\t\t$FERN_INPUT\n\t]",
                            "delimiter": ",\n\t\t",
                            "innerTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "initial_activity"
                            },
                            "type": "iterable"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "allowed_origins=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "allowed_origins",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.copilots.update(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "copilot_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "workflowId: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "workflow_id"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "imgUrl: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "img_url"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "displayName: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "display_name"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "light": "Scout.CopilotConfigMode.Light",
                                          "dark": "Scout.CopilotConfigMode.Dark"
                                        },
                                        "templateString": "mode: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "mode"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "colors: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "colors"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "fab: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "union_v2",
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "$FERN_INPUT",
                                          "members": [
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "primitive",
                                                "value": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "primitive",
                                                "value": {
                                                  "type": "integer"
                                                }
                                              }
                                            }
                                          ],
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "fab"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "messagePlaceholder: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "message_placeholder"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "iterable",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "initialActivity: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t",
                                        "innerTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "initial_activity"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "allowedOrigins: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "allowed_origins"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "delete",
                "migratedFromUrlSlugs": ["delete-a-copilot"],
                "method": "DELETE",
                "id": "delete",
                "originalEndpointId": "endpoint_copilots.delete",
                "name": "Delete a copilot",
                "path": {
                  "pathParameters": [
                    {
                      "key": "copilot_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/copilots/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "copilot_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AppsServiceHandlersDeleteCopilotResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/copilots/copilot_id",
                    "pathParameters": {
                      "copilot_id": "copilot_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "detail": "detail"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.delete(\n        copilot_id=\"copilot_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.delete(\n    copilot_id=\"copilot_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.copilots.delete(\"copilot_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "detail"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/copilots/:copilot_id",
                    "pathParameters": {
                      "copilot_id": ":copilot_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.delete(\n        copilot_id=\"copilot_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.delete(\n    copilot_id=\"copilot_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.copilots.delete(\"copilot_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.copilots.delete(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "copilot_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "copilot_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.copilots.delete(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "copilot_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "copilots",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_collections": {
            "subpackageId": "subpackage_collections",
            "name": "collections",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "get",
                "migratedFromUrlSlugs": ["get-a-collection-by-id"],
                "method": "GET",
                "id": "get",
                "originalEndpointId": "endpoint_collections.get",
                "name": "Get a collection by ID.",
                "path": {
                  "pathParameters": [
                    {
                      "key": "collection_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/collections/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "collection_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EvalServiceHandlersGetCollectionResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/collections/collection_id",
                    "pathParameters": {
                      "collection_id": "collection_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "collection_config": {
                          "collection_display_name": "collection_display_name",
                          "collection_img_url": "collection_img_url",
                          "collection_description": "collection_description",
                          "columns": [
                            {
                              "column_type": "checkbox"
                            }
                          ]
                        },
                        "last_updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z",
                        "created_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "last_updated_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "revision_id": "revision_id",
                        "collection_id": "collection_id"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.collections.get(\n        collection_id=\"collection_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.collections.get(\n    collection_id=\"collection_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.collections.get(\"collection_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "collection_config": {
                            "collection_display_name": "collection_display_name",
                            "collection_img_url": "collection_img_url",
                            "collection_description": "collection_description",
                            "columns": [
                              {
                                "column_type": "checkbox"
                              }
                            ]
                          },
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "revision_id": "revision_id",
                          "collection_id": "collection_id"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/collections/:collection_id",
                    "pathParameters": {
                      "collection_id": ":collection_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.collections.get(\n        collection_id=\"collection_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.collections.get(\n    collection_id=\"collection_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.collections.get(\"collection_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.collections.get(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "collection_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "collection_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.collections.get(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "collection_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["create-a-collection"],
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_collections.create",
                "name": "Create a collection.",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/collections"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:CollectionConfigInput"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EvalServiceHandlersCreateCollectionResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/collections",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "collection_config": {
                          "collection_display_name": "collection_display_name",
                          "collection_img_url": "collection_img_url",
                          "collection_description": "collection_description",
                          "columns": [
                            {
                              "column_type": "checkbox"
                            }
                          ]
                        },
                        "last_updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z",
                        "created_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "last_updated_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "revision_id": "revision_id",
                        "collection_id": "collection_id"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.collections.create()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.collections.create()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.collections.create({});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "collection_config": {
                            "collection_display_name": "collection_display_name",
                            "collection_img_url": "collection_img_url",
                            "collection_description": "collection_description",
                            "columns": [
                              {
                                "column_type": "checkbox"
                              }
                            ]
                          },
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "revision_id": "revision_id",
                          "collection_id": "collection_id"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/collections",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.collections.create()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.collections.create()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.collections.create({});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.collections.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "collection_display_name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "collection_display_name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "collection_img_url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "collection_img_url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "collection_description=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "collection_description",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "columns=[\n\t\t$FERN_INPUT\n\t]",
                            "delimiter": ",\n\t\t",
                            "innerTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "members": [
                                {
                                  "type": {
                                    "value": "type_:ColumnTypeItemCheckBox",
                                    "type": "id"
                                  },
                                  "template": {
                                    "imports": ["from scoutos import ColumnTypeItemCheckBox"],
                                    "isOptional": true,
                                    "templateString": "ColumnTypeItemCheckBox(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "checkbox=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "checkbox",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "value": "type_:ColumnTypeItemJson",
                                    "type": "id"
                                  },
                                  "template": {
                                    "imports": ["from scoutos import ColumnTypeItemJson"],
                                    "isOptional": true,
                                    "templateString": "ColumnTypeItemJson(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "default_value=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "default_value",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "value": "type_:ColumnTypeItemNumber",
                                    "type": "id"
                                  },
                                  "template": {
                                    "imports": ["from scoutos import ColumnTypeItemNumber"],
                                    "isOptional": true,
                                    "templateString": "ColumnTypeItemNumber(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": ["from scoutos import NumberConfig"],
                                          "isOptional": true,
                                          "templateString": "number=NumberConfig(\n\t\t\t\t$FERN_INPUT\n\t\t\t)",
                                          "templateInputs": [
                                            {
                                              "type": "template",
                                              "value": {
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "default_value=$FERN_INPUT",
                                                "members": [
                                                  {
                                                    "type": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "integer"
                                                      }
                                                    },
                                                    "template": {
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "templateInputs": [
                                                        {
                                                          "location": "RELATIVE",
                                                          "path": null,
                                                          "type": "payload"
                                                        }
                                                      ],
                                                      "type": "generic"
                                                    }
                                                  },
                                                  {
                                                    "type": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "double"
                                                      }
                                                    },
                                                    "template": {
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "templateInputs": [
                                                        {
                                                          "location": "RELATIVE",
                                                          "path": null,
                                                          "type": "payload"
                                                        }
                                                      ],
                                                      "type": "generic"
                                                    }
                                                  }
                                                ],
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "number.default_value"
                                                },
                                                "type": "union_v2"
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "min_value=$FERN_INPUT",
                                                "members": [
                                                  {
                                                    "type": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "integer"
                                                      }
                                                    },
                                                    "template": {
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "templateInputs": [
                                                        {
                                                          "location": "RELATIVE",
                                                          "path": null,
                                                          "type": "payload"
                                                        }
                                                      ],
                                                      "type": "generic"
                                                    }
                                                  },
                                                  {
                                                    "type": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "double"
                                                      }
                                                    },
                                                    "template": {
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "templateInputs": [
                                                        {
                                                          "location": "RELATIVE",
                                                          "path": null,
                                                          "type": "payload"
                                                        }
                                                      ],
                                                      "type": "generic"
                                                    }
                                                  }
                                                ],
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "number.min_value"
                                                },
                                                "type": "union_v2"
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "max_value=$FERN_INPUT",
                                                "members": [
                                                  {
                                                    "type": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "integer"
                                                      }
                                                    },
                                                    "template": {
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "templateInputs": [
                                                        {
                                                          "location": "RELATIVE",
                                                          "path": null,
                                                          "type": "payload"
                                                        }
                                                      ],
                                                      "type": "generic"
                                                    }
                                                  },
                                                  {
                                                    "type": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "double"
                                                      }
                                                    },
                                                    "template": {
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "templateInputs": [
                                                        {
                                                          "location": "RELATIVE",
                                                          "path": null,
                                                          "type": "payload"
                                                        }
                                                      ],
                                                      "type": "generic"
                                                    }
                                                  }
                                                ],
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "number.max_value"
                                                },
                                                "type": "union_v2"
                                              }
                                            }
                                          ],
                                          "inputDelimiter": ",\n\t\t\t\t",
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "value": "type_:ColumnTypeItemSelect",
                                    "type": "id"
                                  },
                                  "template": {
                                    "imports": ["from scoutos import ColumnTypeItemSelect"],
                                    "isOptional": true,
                                    "templateString": "ColumnTypeItemSelect(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "options=[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                          "delimiter": ",\n\t\t\t\t",
                                          "innerTemplate": {
                                            "imports": ["from scoutos import SelectOptionItem"],
                                            "isOptional": true,
                                            "templateString": "SelectOptionItem(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": "options"
                                          },
                                          "type": "iterable"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "selected_option=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "selected_option",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "value": "type_:ColumnTypeItemTextLong",
                                    "type": "id"
                                  },
                                  "template": {
                                    "imports": ["from scoutos import ColumnTypeItemTextLong"],
                                    "isOptional": true,
                                    "templateString": "ColumnTypeItemTextLong(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "default_value=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "default_value",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "value": "type_:ColumnTypeItemTextShort",
                                    "type": "id"
                                  },
                                  "template": {
                                    "imports": ["from scoutos import ColumnTypeItemTextShort"],
                                    "isOptional": true,
                                    "templateString": "ColumnTypeItemTextShort(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "default_value=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "default_value",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "value": "type_:ColumnTypeItemUrl",
                                    "type": "id"
                                  },
                                  "template": {
                                    "imports": ["from scoutos import ColumnTypeItemUrl"],
                                    "isOptional": true,
                                    "templateString": "ColumnTypeItemUrl(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "url=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "url",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  }
                                }
                              ],
                              "templateInput": {
                                "location": "RELATIVE",
                                "path": null
                              },
                              "type": "union_v2"
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "columns"
                            },
                            "type": "iterable"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.collections.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "collectionDisplayName: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "collection_display_name"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "collectionImgUrl: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "collection_img_url"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "collectionDescription: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "collection_description"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "iterable",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "columns: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t",
                                        "innerTemplate": {
                                          "type": "union_v2",
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "$FERN_INPUT",
                                          "members": [
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnId: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnDisplayName: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_display_name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "checkbox: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "checkbox"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ColumnTypeItemCheckBox"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnId: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnDisplayName: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_display_name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "defaultValue: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "default_value"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ColumnTypeItemJson"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnId: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnDisplayName: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_display_name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "number: {\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                                      "isOptional": true,
                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "union_v2",
                                                            "imports": [],
                                                            "isOptional": true,
                                                            "templateString": "defaultValue: $FERN_INPUT",
                                                            "members": [
                                                              {
                                                                "template": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "$FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": null
                                                                    }
                                                                  ]
                                                                },
                                                                "type": {
                                                                  "type": "primitive",
                                                                  "value": {
                                                                    "type": "integer"
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "template": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "$FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": null
                                                                    }
                                                                  ]
                                                                },
                                                                "type": {
                                                                  "type": "primitive",
                                                                  "value": {
                                                                    "type": "double"
                                                                  }
                                                                }
                                                              }
                                                            ],
                                                            "templateInput": {
                                                              "location": "RELATIVE",
                                                              "path": "number.default_value"
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "union_v2",
                                                            "imports": [],
                                                            "isOptional": true,
                                                            "templateString": "minValue: $FERN_INPUT",
                                                            "members": [
                                                              {
                                                                "template": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "$FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": null
                                                                    }
                                                                  ]
                                                                },
                                                                "type": {
                                                                  "type": "primitive",
                                                                  "value": {
                                                                    "type": "integer"
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "template": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "$FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": null
                                                                    }
                                                                  ]
                                                                },
                                                                "type": {
                                                                  "type": "primitive",
                                                                  "value": {
                                                                    "type": "double"
                                                                  }
                                                                }
                                                              }
                                                            ],
                                                            "templateInput": {
                                                              "location": "RELATIVE",
                                                              "path": "number.min_value"
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "union_v2",
                                                            "imports": [],
                                                            "isOptional": true,
                                                            "templateString": "maxValue: $FERN_INPUT",
                                                            "members": [
                                                              {
                                                                "template": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "$FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": null
                                                                    }
                                                                  ]
                                                                },
                                                                "type": {
                                                                  "type": "primitive",
                                                                  "value": {
                                                                    "type": "integer"
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "template": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "$FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": null
                                                                    }
                                                                  ]
                                                                },
                                                                "type": {
                                                                  "type": "primitive",
                                                                  "value": {
                                                                    "type": "double"
                                                                  }
                                                                }
                                                              }
                                                            ],
                                                            "templateInput": {
                                                              "location": "RELATIVE",
                                                              "path": "number.max_value"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ColumnTypeItemNumber"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnId: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnDisplayName: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_display_name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "iterable",
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "containerTemplateString": "options: [\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t]",
                                                      "delimiter": ",\n\t\t\t\t\t\t\t",
                                                      "innerTemplate": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "{\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "name: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "name"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "templateInput": {
                                                        "location": "RELATIVE",
                                                        "path": "options"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "selectedOption: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "selected_option"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ColumnTypeItemSelect"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnId: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnDisplayName: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_display_name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "defaultValue: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "default_value"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ColumnTypeItemTextLong"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnId: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnDisplayName: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_display_name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "defaultValue: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "default_value"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ColumnTypeItemTextShort"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnId: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnDisplayName: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_display_name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "url: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "url"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ColumnTypeItemUrl"
                                              }
                                            }
                                          ],
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "columns"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "update",
                "migratedFromUrlSlugs": ["update-a-collection-by-id"],
                "method": "PUT",
                "id": "update",
                "originalEndpointId": "endpoint_collections.update",
                "name": "Update a collection by ID.",
                "path": {
                  "pathParameters": [
                    {
                      "key": "collection_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/collections/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "collection_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:CollectionConfigInput"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EvalServiceHandlersUpdateCollectionResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/collections/collection_id",
                    "pathParameters": {
                      "collection_id": "collection_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "collection_config": {
                          "collection_display_name": "collection_display_name",
                          "collection_img_url": "collection_img_url",
                          "collection_description": "collection_description",
                          "columns": [
                            {
                              "column_type": "checkbox"
                            }
                          ]
                        },
                        "last_updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z",
                        "created_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "last_updated_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "revision_id": "revision_id",
                        "collection_id": "collection_id"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.collections.update(\n        collection_id=\"collection_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.collections.update(\n    collection_id=\"collection_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.collections.update(\"collection_id\", {});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "collection_config": {
                            "collection_display_name": "collection_display_name",
                            "collection_img_url": "collection_img_url",
                            "collection_description": "collection_description",
                            "columns": [
                              {
                                "column_type": "checkbox"
                              }
                            ]
                          },
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "revision_id": "revision_id",
                          "collection_id": "collection_id"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/collections/:collection_id",
                    "pathParameters": {
                      "collection_id": ":collection_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.collections.update(\n        collection_id=\"collection_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.collections.update(\n    collection_id=\"collection_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.collections.update(\"collection_id\", {});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.collections.update(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "collection_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "collection_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "collection_display_name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "collection_display_name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "collection_img_url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "collection_img_url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "collection_description=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "collection_description",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "columns=[\n\t\t$FERN_INPUT\n\t]",
                            "delimiter": ",\n\t\t",
                            "innerTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "members": [
                                {
                                  "type": {
                                    "value": "type_:ColumnTypeItemCheckBox",
                                    "type": "id"
                                  },
                                  "template": {
                                    "imports": ["from scoutos import ColumnTypeItemCheckBox"],
                                    "isOptional": true,
                                    "templateString": "ColumnTypeItemCheckBox(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "checkbox=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "checkbox",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "value": "type_:ColumnTypeItemJson",
                                    "type": "id"
                                  },
                                  "template": {
                                    "imports": ["from scoutos import ColumnTypeItemJson"],
                                    "isOptional": true,
                                    "templateString": "ColumnTypeItemJson(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "default_value=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "default_value",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "value": "type_:ColumnTypeItemNumber",
                                    "type": "id"
                                  },
                                  "template": {
                                    "imports": ["from scoutos import ColumnTypeItemNumber"],
                                    "isOptional": true,
                                    "templateString": "ColumnTypeItemNumber(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": ["from scoutos import NumberConfig"],
                                          "isOptional": true,
                                          "templateString": "number=NumberConfig(\n\t\t\t\t$FERN_INPUT\n\t\t\t)",
                                          "templateInputs": [
                                            {
                                              "type": "template",
                                              "value": {
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "default_value=$FERN_INPUT",
                                                "members": [
                                                  {
                                                    "type": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "integer"
                                                      }
                                                    },
                                                    "template": {
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "templateInputs": [
                                                        {
                                                          "location": "RELATIVE",
                                                          "path": null,
                                                          "type": "payload"
                                                        }
                                                      ],
                                                      "type": "generic"
                                                    }
                                                  },
                                                  {
                                                    "type": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "double"
                                                      }
                                                    },
                                                    "template": {
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "templateInputs": [
                                                        {
                                                          "location": "RELATIVE",
                                                          "path": null,
                                                          "type": "payload"
                                                        }
                                                      ],
                                                      "type": "generic"
                                                    }
                                                  }
                                                ],
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "number.default_value"
                                                },
                                                "type": "union_v2"
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "min_value=$FERN_INPUT",
                                                "members": [
                                                  {
                                                    "type": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "integer"
                                                      }
                                                    },
                                                    "template": {
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "templateInputs": [
                                                        {
                                                          "location": "RELATIVE",
                                                          "path": null,
                                                          "type": "payload"
                                                        }
                                                      ],
                                                      "type": "generic"
                                                    }
                                                  },
                                                  {
                                                    "type": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "double"
                                                      }
                                                    },
                                                    "template": {
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "templateInputs": [
                                                        {
                                                          "location": "RELATIVE",
                                                          "path": null,
                                                          "type": "payload"
                                                        }
                                                      ],
                                                      "type": "generic"
                                                    }
                                                  }
                                                ],
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "number.min_value"
                                                },
                                                "type": "union_v2"
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "max_value=$FERN_INPUT",
                                                "members": [
                                                  {
                                                    "type": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "integer"
                                                      }
                                                    },
                                                    "template": {
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "templateInputs": [
                                                        {
                                                          "location": "RELATIVE",
                                                          "path": null,
                                                          "type": "payload"
                                                        }
                                                      ],
                                                      "type": "generic"
                                                    }
                                                  },
                                                  {
                                                    "type": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "double"
                                                      }
                                                    },
                                                    "template": {
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "templateInputs": [
                                                        {
                                                          "location": "RELATIVE",
                                                          "path": null,
                                                          "type": "payload"
                                                        }
                                                      ],
                                                      "type": "generic"
                                                    }
                                                  }
                                                ],
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "number.max_value"
                                                },
                                                "type": "union_v2"
                                              }
                                            }
                                          ],
                                          "inputDelimiter": ",\n\t\t\t\t",
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "value": "type_:ColumnTypeItemSelect",
                                    "type": "id"
                                  },
                                  "template": {
                                    "imports": ["from scoutos import ColumnTypeItemSelect"],
                                    "isOptional": true,
                                    "templateString": "ColumnTypeItemSelect(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "options=[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                          "delimiter": ",\n\t\t\t\t",
                                          "innerTemplate": {
                                            "imports": ["from scoutos import SelectOptionItem"],
                                            "isOptional": true,
                                            "templateString": "SelectOptionItem(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "id=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "id",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "name=$FERN_INPUT",
                                                  "templateInputs": [
                                                    {
                                                      "location": "RELATIVE",
                                                      "path": "name",
                                                      "type": "payload"
                                                    }
                                                  ],
                                                  "type": "generic"
                                                }
                                              }
                                            ],
                                            "inputDelimiter": ",\n\t\t\t\t\t",
                                            "type": "generic"
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": "options"
                                          },
                                          "type": "iterable"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "selected_option=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "selected_option",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "value": "type_:ColumnTypeItemTextLong",
                                    "type": "id"
                                  },
                                  "template": {
                                    "imports": ["from scoutos import ColumnTypeItemTextLong"],
                                    "isOptional": true,
                                    "templateString": "ColumnTypeItemTextLong(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "default_value=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "default_value",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "value": "type_:ColumnTypeItemTextShort",
                                    "type": "id"
                                  },
                                  "template": {
                                    "imports": ["from scoutos import ColumnTypeItemTextShort"],
                                    "isOptional": true,
                                    "templateString": "ColumnTypeItemTextShort(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "default_value=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "default_value",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "value": "type_:ColumnTypeItemUrl",
                                    "type": "id"
                                  },
                                  "template": {
                                    "imports": ["from scoutos import ColumnTypeItemUrl"],
                                    "isOptional": true,
                                    "templateString": "ColumnTypeItemUrl(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "column_display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "column_display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "url=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "url",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  }
                                }
                              ],
                              "templateInput": {
                                "location": "RELATIVE",
                                "path": null
                              },
                              "type": "union_v2"
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "columns"
                            },
                            "type": "iterable"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.collections.update(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "collection_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "collectionDisplayName: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "collection_display_name"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "collectionImgUrl: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "collection_img_url"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "collectionDescription: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "collection_description"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "iterable",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "columns: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t",
                                        "innerTemplate": {
                                          "type": "union_v2",
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "$FERN_INPUT",
                                          "members": [
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnId: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnDisplayName: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_display_name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "checkbox: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "checkbox"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ColumnTypeItemCheckBox"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnId: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnDisplayName: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_display_name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "defaultValue: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "default_value"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ColumnTypeItemJson"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnId: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnDisplayName: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_display_name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "number: {\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                                      "isOptional": true,
                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "union_v2",
                                                            "imports": [],
                                                            "isOptional": true,
                                                            "templateString": "defaultValue: $FERN_INPUT",
                                                            "members": [
                                                              {
                                                                "template": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "$FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": null
                                                                    }
                                                                  ]
                                                                },
                                                                "type": {
                                                                  "type": "primitive",
                                                                  "value": {
                                                                    "type": "integer"
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "template": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "$FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": null
                                                                    }
                                                                  ]
                                                                },
                                                                "type": {
                                                                  "type": "primitive",
                                                                  "value": {
                                                                    "type": "double"
                                                                  }
                                                                }
                                                              }
                                                            ],
                                                            "templateInput": {
                                                              "location": "RELATIVE",
                                                              "path": "number.default_value"
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "union_v2",
                                                            "imports": [],
                                                            "isOptional": true,
                                                            "templateString": "minValue: $FERN_INPUT",
                                                            "members": [
                                                              {
                                                                "template": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "$FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": null
                                                                    }
                                                                  ]
                                                                },
                                                                "type": {
                                                                  "type": "primitive",
                                                                  "value": {
                                                                    "type": "integer"
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "template": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "$FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": null
                                                                    }
                                                                  ]
                                                                },
                                                                "type": {
                                                                  "type": "primitive",
                                                                  "value": {
                                                                    "type": "double"
                                                                  }
                                                                }
                                                              }
                                                            ],
                                                            "templateInput": {
                                                              "location": "RELATIVE",
                                                              "path": "number.min_value"
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "union_v2",
                                                            "imports": [],
                                                            "isOptional": true,
                                                            "templateString": "maxValue: $FERN_INPUT",
                                                            "members": [
                                                              {
                                                                "template": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "$FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": null
                                                                    }
                                                                  ]
                                                                },
                                                                "type": {
                                                                  "type": "primitive",
                                                                  "value": {
                                                                    "type": "integer"
                                                                  }
                                                                }
                                                              },
                                                              {
                                                                "template": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "$FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": null
                                                                    }
                                                                  ]
                                                                },
                                                                "type": {
                                                                  "type": "primitive",
                                                                  "value": {
                                                                    "type": "double"
                                                                  }
                                                                }
                                                              }
                                                            ],
                                                            "templateInput": {
                                                              "location": "RELATIVE",
                                                              "path": "number.max_value"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ColumnTypeItemNumber"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnId: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnDisplayName: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_display_name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "iterable",
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "containerTemplateString": "options: [\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t]",
                                                      "delimiter": ",\n\t\t\t\t\t\t\t",
                                                      "innerTemplate": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "{\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "id: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "id"
                                                                }
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "name: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "name"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "templateInput": {
                                                        "location": "RELATIVE",
                                                        "path": "options"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "selectedOption: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "selected_option"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ColumnTypeItemSelect"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnId: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnDisplayName: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_display_name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "defaultValue: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "default_value"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ColumnTypeItemTextLong"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnId: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnDisplayName: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_display_name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "defaultValue: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "default_value"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ColumnTypeItemTextShort"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnId: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "columnDisplayName: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "column_display_name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "url: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "url"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ColumnTypeItemUrl"
                                              }
                                            }
                                          ],
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "columns"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "delete",
                "migratedFromUrlSlugs": ["delete-a-collection-by-id"],
                "method": "DELETE",
                "id": "delete",
                "originalEndpointId": "endpoint_collections.delete",
                "name": "Delete a collection by ID.",
                "path": {
                  "pathParameters": [
                    {
                      "key": "collection_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/collections/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "collection_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EvalServiceHandlersDeleteCollectionResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/collections/collection_id",
                    "pathParameters": {
                      "collection_id": "collection_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "detail": "detail"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.collections.delete(\n        collection_id=\"collection_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.collections.delete(\n    collection_id=\"collection_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.collections.delete(\"collection_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "detail"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/collections/:collection_id",
                    "pathParameters": {
                      "collection_id": ":collection_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.collections.delete(\n        collection_id=\"collection_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.collections.delete(\n    collection_id=\"collection_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.collections.delete(\"collection_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete a collection given a collection_id.",
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.collections.delete(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "collection_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "collection_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.collections.delete(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "collection_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "collections",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_documents": {
            "subpackageId": "subpackage_documents",
            "name": "documents",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "get",
                "migratedFromUrlSlugs": ["get-a-document-by-id"],
                "method": "GET",
                "id": "get",
                "originalEndpointId": "endpoint_documents.get",
                "name": "Get a document by ID.",
                "path": {
                  "pathParameters": [
                    {
                      "key": "collection_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "key": "document_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/collections/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "collection_id"
                    },
                    {
                      "type": "literal",
                      "value": "/documents/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "document_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EvalServiceHandlersGetDocumentResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/collections/collection_id/documents/document_id",
                    "pathParameters": {
                      "collection_id": "collection_id",
                      "document_id": "document_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "document_id": "document_id",
                        "data": {
                          "id": "id",
                          "columns": {
                            "key": "value"
                          },
                          "display_name": "display_name",
                          "content": [
                            {
                              "type": "paragraph",
                              "value": "value"
                            }
                          ]
                        },
                        "created_at": "2024-01-15T09:30:00Z",
                        "last_updated_at": "2024-01-15T09:30:00Z",
                        "created_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "last_updated_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.get(\n        collection_id=\"collection_id\",\n        document_id=\"document_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.get(\n    collection_id=\"collection_id\",\n    document_id=\"document_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.get(\"collection_id\", \"document_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "document_id": "document_id",
                          "data": {
                            "id": "id",
                            "columns": {
                              "key": "value"
                            },
                            "display_name": "display_name",
                            "content": [
                              {
                                "type": "paragraph",
                                "value": "value"
                              }
                            ]
                          },
                          "created_at": "2024-01-15T09:30:00Z",
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/collections/:collection_id/documents/:document_id",
                    "pathParameters": {
                      "collection_id": ":collection_id",
                      "document_id": ":document_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.get(\n        collection_id=\"collection_id\",\n        document_id=\"document_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.get(\n    collection_id=\"collection_id\",\n    document_id=\"document_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.get(\"collection_id\", \"document_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.documents.get(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "collection_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "collection_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "document_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "document_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.documents.get(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "collection_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "document_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["create-a-document-in-a-collection"],
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_documents.create",
                "name": "Create a document in a collection.",
                "path": {
                  "pathParameters": [
                    {
                      "key": "collection_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/collections/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "collection_id"
                    },
                    {
                      "type": "literal",
                      "value": "/documents"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_documents:DocumentsCreateRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EvalServiceHandlersCreateDocumentResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/collections/collection_id/documents",
                    "pathParameters": {
                      "collection_id": "collection_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [
                        {
                          "document_id": "document_id",
                          "data": {},
                          "created_at": "2024-01-15T09:30:00Z",
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          }
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout, DocumentDataInput\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.create(\n        collection_id=\"collection_id\",\n        request=DocumentDataInput(),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import DocumentDataInput, Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.create(\n    collection_id=\"collection_id\",\n    request=DocumentDataInput(),\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.create(\"collection_id\", {});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [
                          {
                            "document_id": "document_id",
                            "data": {},
                            "created_at": "2024-01-15T09:30:00Z",
                            "last_updated_at": "2024-01-15T09:30:00Z",
                            "created_by": {
                              "type": "user",
                              "details": {
                                "user_id": "user_id",
                                "org_id": "org_id",
                                "scout_organization_id": "scout_organization_id",
                                "email": {
                                  "key": "value"
                                }
                              }
                            },
                            "last_updated_by": {
                              "type": "user",
                              "details": {
                                "user_id": "user_id",
                                "org_id": "org_id",
                                "scout_organization_id": "scout_organization_id",
                                "email": {
                                  "key": "value"
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/collections/:collection_id/documents",
                    "pathParameters": {
                      "collection_id": ":collection_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout, DocumentDataInput\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.create(\n        collection_id=\"collection_id\",\n        request=DocumentDataInput(),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import DocumentDataInput, Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.create(\n    collection_id=\"collection_id\",\n    request=DocumentDataInput(),\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.create(\"collection_id\", {});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.documents.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "collection_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "collection_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "request=$FERN_INPUT",
                            "members": [
                              {
                                "type": {
                                  "value": "type_:DocumentDataInput",
                                  "type": "id"
                                },
                                "template": {
                                  "imports": ["from scoutos import DocumentDataInput"],
                                  "isOptional": true,
                                  "templateString": "DocumentDataInput(\n\t\t$FERN_INPUT\n\t)",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "id=$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "RELATIVE",
                                            "path": "id",
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "columns={\n\t\t\t$FERN_INPUT\n\t\t}",
                                        "delimiter": ",\n\t\t\t",
                                        "keyTemplate": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": null,
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        },
                                        "valueTemplate": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": null,
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        },
                                        "keyValueSeparator": ": ",
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": "columns"
                                        },
                                        "type": "dict"
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "display_name=$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "RELATIVE",
                                            "path": "display_name",
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "content=$FERN_INPUT",
                                        "members": [
                                          {
                                            "type": {
                                              "itemType": {
                                                "value": "type_:DocumentContent",
                                                "type": "id"
                                              },
                                              "type": "list"
                                            },
                                            "template": {
                                              "imports": [],
                                              "isOptional": true,
                                              "containerTemplateString": "[\n\t\t\t$FERN_INPUT\n\t\t]",
                                              "delimiter": ",\n\t\t\t",
                                              "innerTemplate": {
                                                "imports": ["from scoutos import DocumentContent"],
                                                "isOptional": true,
                                                "templateString": "DocumentContent(\n\t\t\t\t$FERN_INPUT\n\t\t\t)",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "value=$FERN_INPUT",
                                                      "templateInputs": [
                                                        {
                                                          "location": "RELATIVE",
                                                          "path": "value",
                                                          "type": "payload"
                                                        }
                                                      ],
                                                      "type": "generic"
                                                    }
                                                  }
                                                ],
                                                "inputDelimiter": ",\n\t\t\t\t",
                                                "type": "generic"
                                              },
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": null
                                              },
                                              "type": "iterable"
                                            }
                                          },
                                          {
                                            "type": {
                                              "type": "primitive",
                                              "value": {
                                                "type": "string"
                                              }
                                            },
                                            "template": {
                                              "imports": [],
                                              "isOptional": true,
                                              "templateString": "$FERN_INPUT",
                                              "templateInputs": [
                                                {
                                                  "location": "RELATIVE",
                                                  "path": null,
                                                  "type": "payload"
                                                }
                                              ],
                                              "type": "generic"
                                            }
                                          }
                                        ],
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": "content"
                                        },
                                        "type": "union_v2"
                                      }
                                    }
                                  ],
                                  "inputDelimiter": ",\n\t\t",
                                  "type": "generic"
                                }
                              },
                              {
                                "type": {
                                  "itemType": {
                                    "value": "type_:DocumentDataInput",
                                    "type": "id"
                                  },
                                  "type": "list"
                                },
                                "template": {
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "[\n\t\t$FERN_INPUT\n\t]",
                                  "delimiter": ",\n\t\t",
                                  "innerTemplate": {
                                    "imports": ["from scoutos import DocumentDataInput"],
                                    "isOptional": true,
                                    "templateString": "DocumentDataInput(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "id=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "id",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "columns={\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                          "delimiter": ",\n\t\t\t\t",
                                          "keyTemplate": {
                                            "imports": [],
                                            "isOptional": true,
                                            "templateString": "$FERN_INPUT",
                                            "templateInputs": [
                                              {
                                                "location": "RELATIVE",
                                                "path": null,
                                                "type": "payload"
                                              }
                                            ],
                                            "type": "generic"
                                          },
                                          "valueTemplate": {
                                            "imports": [],
                                            "isOptional": true,
                                            "templateString": "$FERN_INPUT",
                                            "templateInputs": [
                                              {
                                                "location": "RELATIVE",
                                                "path": null,
                                                "type": "payload"
                                              }
                                            ],
                                            "type": "generic"
                                          },
                                          "keyValueSeparator": ": ",
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": "columns"
                                          },
                                          "type": "dict"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "display_name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "display_name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "content=$FERN_INPUT",
                                          "members": [
                                            {
                                              "type": {
                                                "itemType": {
                                                  "value": "type_:DocumentContent",
                                                  "type": "id"
                                                },
                                                "type": "list"
                                              },
                                              "template": {
                                                "imports": [],
                                                "isOptional": true,
                                                "containerTemplateString": "[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                                "delimiter": ",\n\t\t\t\t",
                                                "innerTemplate": {
                                                  "imports": ["from scoutos import DocumentContent"],
                                                  "isOptional": true,
                                                  "templateString": "DocumentContent(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                                  "templateInputs": [
                                                    {
                                                      "type": "template",
                                                      "value": {
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "templateString": "value=$FERN_INPUT",
                                                        "templateInputs": [
                                                          {
                                                            "location": "RELATIVE",
                                                            "path": "value",
                                                            "type": "payload"
                                                          }
                                                        ],
                                                        "type": "generic"
                                                      }
                                                    }
                                                  ],
                                                  "inputDelimiter": ",\n\t\t\t\t\t",
                                                  "type": "generic"
                                                },
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": null
                                                },
                                                "type": "iterable"
                                              }
                                            },
                                            {
                                              "type": {
                                                "type": "primitive",
                                                "value": {
                                                  "type": "string"
                                                }
                                              },
                                              "template": {
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "$FERN_INPUT",
                                                "templateInputs": [
                                                  {
                                                    "location": "RELATIVE",
                                                    "path": null,
                                                    "type": "payload"
                                                  }
                                                ],
                                                "type": "generic"
                                              }
                                            }
                                          ],
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": "content"
                                          },
                                          "type": "union_v2"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  },
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": null
                                  },
                                  "type": "iterable"
                                }
                              }
                            ],
                            "templateInput": {
                              "location": "BODY",
                              "path": null
                            },
                            "type": "union_v2"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.documents.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "collection_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "union_v2",
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "$FERN_INPUT",
                                  "members": [
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "id: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "id"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "dict",
                                              "imports": [],
                                              "isOptional": true,
                                              "containerTemplateString": "columns: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                              "delimiter": ",\n\t\t\t\t\t",
                                              "keyValueSeparator": ": ",
                                              "keyTemplate": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                ]
                                              },
                                              "valueTemplate": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                ]
                                              },
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": "columns"
                                              }
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "displayName: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "display_name"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "union_v2",
                                              "imports": [],
                                              "isOptional": true,
                                              "templateString": "content: $FERN_INPUT",
                                              "members": [
                                                {
                                                  "template": {
                                                    "type": "iterable",
                                                    "imports": [],
                                                    "isOptional": true,
                                                    "containerTemplateString": "[\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                                    "delimiter": ",\n\t\t\t\t\t\t",
                                                    "innerTemplate": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "{\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                                      "isOptional": true,
                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "value: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "value"
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "templateInput": {
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  },
                                                  "type": {
                                                    "type": "list",
                                                    "itemType": {
                                                      "type": "id",
                                                      "value": "type_:DocumentContent"
                                                    }
                                                  }
                                                },
                                                {
                                                  "template": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "type": {
                                                    "type": "primitive",
                                                    "value": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              ],
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": "content"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "id",
                                        "value": "type_:DocumentDataInput"
                                      }
                                    },
                                    {
                                      "template": {
                                        "type": "iterable",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t",
                                        "innerTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "{\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                          "isOptional": true,
                                          "inputDelimiter": ",\n\t\t\t\t\t",
                                          "templateInputs": [
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "id: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "id"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "dict",
                                                "imports": [],
                                                "isOptional": true,
                                                "containerTemplateString": "columns: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                                "delimiter": ",\n\t\t\t\t\t\t",
                                                "keyValueSeparator": ": ",
                                                "keyTemplate": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "valueTemplate": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "columns"
                                                }
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "displayName: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "display_name"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "union_v2",
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "content: $FERN_INPUT",
                                                "members": [
                                                  {
                                                    "template": {
                                                      "type": "iterable",
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "containerTemplateString": "[\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t]",
                                                      "delimiter": ",\n\t\t\t\t\t\t\t",
                                                      "innerTemplate": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "{\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "value: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "value"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "templateInput": {
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    },
                                                    "type": {
                                                      "type": "list",
                                                      "itemType": {
                                                        "type": "id",
                                                        "value": "type_:DocumentContent"
                                                      }
                                                    }
                                                  },
                                                  {
                                                    "template": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "$FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": null
                                                        }
                                                      ]
                                                    },
                                                    "type": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                ],
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "content"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      },
                                      "type": {
                                        "type": "list",
                                        "itemType": {
                                          "type": "id",
                                          "value": "type_:DocumentDataInput"
                                        }
                                      }
                                    }
                                  ],
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": null
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "update",
                "migratedFromUrlSlugs": ["update-a-document-by-id"],
                "method": "PUT",
                "id": "update",
                "originalEndpointId": "endpoint_documents.update",
                "name": "Update a document by ID.",
                "path": {
                  "pathParameters": [
                    {
                      "key": "collection_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "key": "document_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/collections/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "collection_id"
                    },
                    {
                      "type": "literal",
                      "value": "/documents/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "document_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DocumentDataInput"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EvalServiceHandlersUpdateDocumentResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/collections/collection_id/documents/document_id",
                    "pathParameters": {
                      "collection_id": "collection_id",
                      "document_id": "document_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "document_id": "document_id",
                        "data": {
                          "id": "id",
                          "columns": {
                            "key": "value"
                          },
                          "display_name": "display_name",
                          "content": [
                            {
                              "type": "paragraph",
                              "value": "value"
                            }
                          ]
                        },
                        "created_at": "2024-01-15T09:30:00Z",
                        "last_updated_at": "2024-01-15T09:30:00Z",
                        "created_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        },
                        "last_updated_by": {
                          "type": "user",
                          "details": {
                            "user_id": "user_id",
                            "org_id": "org_id",
                            "scout_organization_id": "scout_organization_id",
                            "email": {
                              "key": "value"
                            }
                          }
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.update(\n        collection_id=\"collection_id\",\n        document_id=\"document_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.update(\n    collection_id=\"collection_id\",\n    document_id=\"document_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.update(\"collection_id\", \"document_id\", {});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "document_id": "document_id",
                          "data": {
                            "id": "id",
                            "columns": {
                              "key": "value"
                            },
                            "display_name": "display_name",
                            "content": [
                              {
                                "type": "paragraph",
                                "value": "value"
                              }
                            ]
                          },
                          "created_at": "2024-01-15T09:30:00Z",
                          "last_updated_at": "2024-01-15T09:30:00Z",
                          "created_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          },
                          "last_updated_by": {
                            "type": "user",
                            "details": {
                              "user_id": "user_id",
                              "org_id": "org_id",
                              "scout_organization_id": "scout_organization_id",
                              "email": {
                                "key": "value"
                              }
                            }
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/collections/:collection_id/documents/:document_id",
                    "pathParameters": {
                      "collection_id": ":collection_id",
                      "document_id": ":document_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.update(\n        collection_id=\"collection_id\",\n        document_id=\"document_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.update(\n    collection_id=\"collection_id\",\n    document_id=\"document_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient, Scout } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.update(\"collection_id\", \"document_id\", {});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.documents.update(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "collection_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "collection_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "document_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "document_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "columns={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "columns"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "display_name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "display_name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "content=$FERN_INPUT",
                            "members": [
                              {
                                "type": {
                                  "itemType": {
                                    "value": "type_:DocumentContent",
                                    "type": "id"
                                  },
                                  "type": "list"
                                },
                                "template": {
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "[\n\t\t$FERN_INPUT\n\t]",
                                  "delimiter": ",\n\t\t",
                                  "innerTemplate": {
                                    "imports": ["from scoutos import DocumentContent"],
                                    "isOptional": true,
                                    "templateString": "DocumentContent(\n\t\t\t$FERN_INPUT\n\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "value=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "value",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t",
                                    "type": "generic"
                                  },
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": null
                                  },
                                  "type": "iterable"
                                }
                              },
                              {
                                "type": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string"
                                  }
                                },
                                "template": {
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "$FERN_INPUT",
                                  "templateInputs": [
                                    {
                                      "location": "RELATIVE",
                                      "path": null,
                                      "type": "payload"
                                    }
                                  ],
                                  "type": "generic"
                                }
                              }
                            ],
                            "templateInput": {
                              "location": "BODY",
                              "path": "content"
                            },
                            "type": "union_v2"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.documents.update(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "collection_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "document_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "id: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "id"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "columns: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "columns"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "displayName: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "display_name"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "union_v2",
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "content: $FERN_INPUT",
                                        "members": [
                                          {
                                            "template": {
                                              "type": "iterable",
                                              "imports": [],
                                              "isOptional": true,
                                              "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                              "delimiter": ",\n\t\t\t\t\t",
                                              "innerTemplate": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "{\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "value: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "value"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            },
                                            "type": {
                                              "type": "list",
                                              "itemType": {
                                                "type": "id",
                                                "value": "type_:DocumentContent"
                                              }
                                            }
                                          },
                                          {
                                            "template": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": null
                                                }
                                              ]
                                            },
                                            "type": {
                                              "type": "primitive",
                                              "value": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        ],
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "content"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Prod",
                    "baseUrl": "https://api-prod.scoutos.com"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Prod",
                "urlSlug": "delete",
                "migratedFromUrlSlugs": ["delete-a-document-by-id"],
                "method": "DELETE",
                "id": "delete",
                "originalEndpointId": "endpoint_documents.delete",
                "name": "Delete a document by ID.",
                "path": {
                  "pathParameters": [
                    {
                      "key": "collection_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "key": "document_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v2/collections/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "collection_id"
                    },
                    {
                      "type": "literal",
                      "value": "/documents/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "document_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EvalServiceHandlersDeleteDocumentResponse"
                    }
                  },
                  "description": "Successful Response"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:HttpValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v2/collections/collection_id/documents/document_id",
                    "pathParameters": {
                      "collection_id": "collection_id",
                      "document_id": "document_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "detail": "detail"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.delete(\n        collection_id=\"collection_id\",\n        document_id=\"document_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.delete(\n    collection_id=\"collection_id\",\n    document_id=\"document_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.delete(\"collection_id\", \"document_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "detail"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v2/collections/:collection_id/documents/:document_id",
                    "pathParameters": {
                      "collection_id": ":collection_id",
                      "document_id": ":document_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "async_client": "import asyncio\n\nfrom scoutos import AsyncScout\n\nclient = AsyncScout(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.delete(\n        collection_id=\"collection_id\",\n        document_id=\"document_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from scoutos import Scout\n\nclient = Scout(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.delete(\n    collection_id=\"collection_id\",\n    document_id=\"document_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.4.2",
                          "package": "scoutos"
                        },
                        "client": "import { ScoutClient } from \"scoutos\";\n\nconst client = new ScoutClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.delete(\"collection_id\", \"document_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete a document given a document_id.",
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.documents.delete(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "collection_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "collection_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "document_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "document_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from scoutos import Scout"],
                      "isOptional": true,
                      "templateString": "client = Scout($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.documents.delete(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "collection_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "document_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { ScoutClient } from \"scoutos\";"],
                      "templateString": "const client = new ScoutClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": ["type_documents:DocumentsCreateRequest"],
            "subpackages": [],
            "urlSlug": "documents",
            "webhooks": [],
            "websockets": []
          }
        },
        "auth": {
          "type": "bearerAuth",
          "tokenName": "apiKey"
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      }
    },
    "files": {
      "94a2faf1-778e-40cd-b55e-a1af47108af9": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/hightouch-import.js",
      "e4327225-0c59-435d-b931-b2017c547ba8": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/ketch-import.js",
      "11aaed8c-e4e7-4642-9eba-e118266c864d": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/hightouch-page-tracking.js",
      "9d3f963b-4da4-4b3d-911c-97407ac7ab6f": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/script.js",
      "4a20efec-d73c-48f4-8d5c-1113b59cce89": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/favicon.jpeg",
      "cf441ec9-a82e-4b21-876d-b644e7b49fbe": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/rag-diagram.png",
      "04eaf47d-40b0-4c98-a2ee-de235de834d4": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/document-creation.png",
      "62f50863-a874-4e02-be23-897bf71e956d": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/scrape-input.png",
      "41e8fa83-f155-4c80-9c90-de81d1d4d9fa": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/job.png",
      "256da35a-4ef4-4d3f-a9d8-823c49c7767b": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/empty-workflow.png",
      "097b7f92-e6f4-48e5-80ed-31974c83b5ca": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/new-collection-block.png",
      "d5f12ab8-38dc-49d5-bb5e-db39bc73ddf6": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/collection-settings.png",
      "98aa7fa0-d839-4103-bb96-0412e2e82d99": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/llm-config-1.png",
      "53af2de1-4328-4803-ab4b-e09acfae164f": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/add-chat-messages.png",
      "120978cb-1409-43d3-a21f-2ecedd718610": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/system-message.png",
      "638acca3-c29e-46a7-9a04-db46ae0f0ee4": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/copy-collection-block-id.png",
      "c1b48290-1f42-4329-8e09-efb845f9b393": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/output.png",
      "5655c20d-fbaa-4588-88de-0ef1710227b5": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/open-console.png",
      "617138aa-d875-482f-b462-22470b6b609a": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/completed-prompt.png",
      "0b66bf67-8b44-4618-89c7-0e3a8191ff4e": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/quick-start/llm-output.png",
      "d50ea88e-882c-41da-b9b7-88799d31cfec": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/workflows/overview-1.png",
      "be2e2ef8-f215-4f15-9dd5-fcc910251c6e": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/workflows/workflow-logic-state-1.png",
      "daa03bed-2855-4814-9270-660446db7000": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/workflows/workflow-logic-state-2.png",
      "132d2ce1-e301-4660-a76e-eee9385e0c0c": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/workflows/console.png",
      "05bf561e-5ec4-485e-8622-5e4c54f4f1ee": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/workflows/history.png",
      "d93b2509-2a77-47ab-9c8c-c50622c8558a": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/workflows/logs.png",
      "83bd1591-78fd-47b9-af72-8e259439cbee": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/settings/byo-ai.png",
      "9fdfd8fb-b72c-4c12-afb7-059122652105": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/collections/collections.png",
      "72353dcd-1fa2-4428-a62f-a9d8b65a75cd": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/collections/document.png",
      "4bd272b8-3d75-4055-8348-5fefa0573b50": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/collections/upload-documents-webscraping.png",
      "5ac9c833-5300-47bf-855e-febdd823bb5b": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/collections/web-scrape-inputs.png",
      "50290e6b-3685-40d7-901a-8ab9c36a98df": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/collections/advanced-options.png",
      "9fed29c5-5f4b-4e41-bf31-ce2f8adacdcd": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/collections/scraped-websites.png",
      "ad7ab70b-39b1-49ad-88c9-90eee7201786": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/collections/upload-files.png",
      "1392602e-83dd-4d1c-ba22-f747a5410a01": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/collections/from-scratch.png",
      "982a0526-38b2-46c8-bb31-5f94417088b3": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/settings/api-keys.png",
      "cf8c66f0-43b6-4d52-9b9e-11d58cc1978f": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/integrations/copilot-workflow.png",
      "6e987eb7-8406-4df2-8930-343a3f9af004": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/integrations/copilot-settings.png",
      "26f6dfbb-06b9-48de-b4ba-5a7abb122838": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//scoutos.docs.buildwithfern.com/2024-11-05T17%3A15%3A51.805Z/assets/integrations/embedded-copilot.svg"
    },
    "jsFiles": {},
    "filesV2": {
      "94a2faf1-778e-40cd-b55e-a1af47108af9": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/hightouch-import.js"
      },
      "e4327225-0c59-435d-b931-b2017c547ba8": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/ketch-import.js"
      },
      "11aaed8c-e4e7-4642-9eba-e118266c864d": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/hightouch-page-tracking.js"
      },
      "9d3f963b-4da4-4b3d-911c-97407ac7ab6f": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/script.js"
      },
      "4a20efec-d73c-48f4-8d5c-1113b59cce89": {
        "type": "image",
        "width": 400,
        "height": 400,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/favicon.jpeg"
      },
      "cf441ec9-a82e-4b21-876d-b644e7b49fbe": {
        "type": "image",
        "width": 1662,
        "height": 534,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/rag-diagram.png"
      },
      "04eaf47d-40b0-4c98-a2ee-de235de834d4": {
        "type": "image",
        "width": 1160,
        "height": 692,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/document-creation.png"
      },
      "62f50863-a874-4e02-be23-897bf71e956d": {
        "type": "image",
        "width": 864,
        "height": 804,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/scrape-input.png"
      },
      "41e8fa83-f155-4c80-9c90-de81d1d4d9fa": {
        "type": "image",
        "width": 1065,
        "height": 708,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/job.png"
      },
      "256da35a-4ef4-4d3f-a9d8-823c49c7767b": {
        "type": "image",
        "width": 962,
        "height": 540,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/empty-workflow.png"
      },
      "097b7f92-e6f4-48e5-80ed-31974c83b5ca": {
        "type": "image",
        "width": 613,
        "height": 224,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/new-collection-block.png"
      },
      "d5f12ab8-38dc-49d5-bb5e-db39bc73ddf6": {
        "type": "image",
        "width": 454,
        "height": 710,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/collection-settings.png"
      },
      "98aa7fa0-d839-4103-bb96-0412e2e82d99": {
        "type": "image",
        "width": 408,
        "height": 363,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/llm-config-1.png"
      },
      "53af2de1-4328-4803-ab4b-e09acfae164f": {
        "type": "image",
        "width": 414,
        "height": 111,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/add-chat-messages.png"
      },
      "120978cb-1409-43d3-a21f-2ecedd718610": {
        "type": "image",
        "width": 430,
        "height": 620,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/system-message.png"
      },
      "638acca3-c29e-46a7-9a04-db46ae0f0ee4": {
        "type": "image",
        "width": 1017,
        "height": 739,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/copy-collection-block-id.png"
      },
      "c1b48290-1f42-4329-8e09-efb845f9b393": {
        "type": "image",
        "width": 424,
        "height": 72,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/output.png"
      },
      "5655c20d-fbaa-4588-88de-0ef1710227b5": {
        "type": "image",
        "width": 1027,
        "height": 472,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/open-console.png"
      },
      "617138aa-d875-482f-b462-22470b6b609a": {
        "type": "image",
        "width": 558,
        "height": 198,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/completed-prompt.png"
      },
      "0b66bf67-8b44-4618-89c7-0e3a8191ff4e": {
        "type": "image",
        "width": 556,
        "height": 852,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/quick-start/llm-output.png"
      },
      "d50ea88e-882c-41da-b9b7-88799d31cfec": {
        "type": "image",
        "width": 975,
        "height": 546,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/workflows/overview-1.png"
      },
      "be2e2ef8-f215-4f15-9dd5-fcc910251c6e": {
        "type": "image",
        "width": 976,
        "height": 679,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/workflows/workflow-logic-state-1.png"
      },
      "daa03bed-2855-4814-9270-660446db7000": {
        "type": "image",
        "width": 930,
        "height": 804,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/workflows/workflow-logic-state-2.png"
      },
      "132d2ce1-e301-4660-a76e-eee9385e0c0c": {
        "type": "image",
        "width": 956,
        "height": 740,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/workflows/console.png"
      },
      "05bf561e-5ec4-485e-8622-5e4c54f4f1ee": {
        "type": "image",
        "width": 2020,
        "height": 1070,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/workflows/history.png"
      },
      "d93b2509-2a77-47ab-9c8c-c50622c8558a": {
        "type": "image",
        "width": 2452,
        "height": 1226,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/workflows/logs.png"
      },
      "83bd1591-78fd-47b9-af72-8e259439cbee": {
        "type": "image",
        "width": 673,
        "height": 306,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/settings/byo-ai.png"
      },
      "9fdfd8fb-b72c-4c12-afb7-059122652105": {
        "type": "image",
        "width": 1112,
        "height": 790,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/collections/collections.png"
      },
      "72353dcd-1fa2-4428-a62f-a9d8b65a75cd": {
        "type": "image",
        "width": 1483,
        "height": 931,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/collections/document.png"
      },
      "4bd272b8-3d75-4055-8348-5fefa0573b50": {
        "type": "image",
        "width": 584,
        "height": 354,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/collections/upload-documents-webscraping.png"
      },
      "5ac9c833-5300-47bf-855e-febdd823bb5b": {
        "type": "image",
        "width": 651,
        "height": 527,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/collections/web-scrape-inputs.png"
      },
      "50290e6b-3685-40d7-901a-8ab9c36a98df": {
        "type": "image",
        "width": 620,
        "height": 616,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/collections/advanced-options.png"
      },
      "9fed29c5-5f4b-4e41-bf31-ce2f8adacdcd": {
        "type": "image",
        "width": 1827,
        "height": 789,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/collections/scraped-websites.png"
      },
      "ad7ab70b-39b1-49ad-88c9-90eee7201786": {
        "type": "image",
        "width": 584,
        "height": 354,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/collections/upload-files.png"
      },
      "1392602e-83dd-4d1c-ba22-f747a5410a01": {
        "type": "image",
        "width": 584,
        "height": 354,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/collections/from-scratch.png"
      },
      "982a0526-38b2-46c8-bb31-5f94417088b3": {
        "type": "image",
        "width": 770,
        "height": 297,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/settings/api-keys.png"
      },
      "cf8c66f0-43b6-4d52-9b9e-11d58cc1978f": {
        "type": "image",
        "width": 2066,
        "height": 1488,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/integrations/copilot-workflow.png"
      },
      "6e987eb7-8406-4df2-8930-343a3f9af004": {
        "type": "image",
        "width": 2404,
        "height": 1584,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/integrations/copilot-settings.png"
      },
      "26f6dfbb-06b9-48de-b4ba-5a7abb122838": {
        "type": "image",
        "width": 800,
        "height": 466,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://scoutos.docs.buildwithfern.com/2024-11-05T17:15:51.805Z/assets/integrations/embedded-copilot.svg"
      }
    },
    "pages": {
      "pages/welcome.mdx": {
        "markdown": "---\ntitle: \"Welcome to Scout's Documentation \\U0001F389\"\nsubtitle: Empowering AI workflows with simplicity and efficiency\ndescription: >-\n  Discover how Scout enables creators and teams to build AI workflows\n  effortlessly, integrating website scraping, document processing, and semantic\n  search without complex technical setups.\n---\n\nScout makes it easy for anyone—from solo creators to growing teams—to build AI workflows that power real solutions. Scrape websites, upload documents, chunk and vectorize data, use semantic search, execute network requests, interact with large language models, and more, all without the complex technical deployments and orchestration headache.\n\n<div style=\"width: 100%; min-width: 350px; max-width: 800px;\">\n  <div style=\"position: relative; width: 100%; overflow: hidden; padding-top: 56.25%;\">\n    <p>\n      <iframe style=\"position: absolute; top: 0; left: 0; right: 0; width: 100%; height: 100%; border: none;\" src=\"https://www.youtube.com/embed/CdwUVGwqtyI?si=aXjdrq8j4ALrzuts\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"></iframe>\n    </p>\n  </div>\n</div>\n\n<hr/>\n\n<Success><b>Just getting started?</b> Check out our [Build a RAG app in under 5 minutes](/docs/quick-start) quick start guide!</Success>\n\n<hr/>\n\n## What AI use cases can we help you build?\n\n<CardGroup cols={3}>\n  <Card title=\"Customer Support\" icon='life-ring' \n    href='/workflow-templates/use-cases/customer-support'>\n    Improve response times, accuracy, and overall customer experience with AI-driven support.\n  </Card>\n\n  <Card title=\"Startup Toolkit\" icon='toolbox' \n    href='/workflow-templates/use-cases/startup-toolkit'>\n    Quickly build and launch AI-powered apps or startup initiatives with a fraction of the resources.\n  </Card>\n\n  <Card title=\"Sales\" icon='cash-register' \n    href='/workflow-templates/use-cases/sales'>\n    Streamline RFPs, security questionnaires, meeting follow ups and sales outreach with AI-powered workflows.\n  </Card>\n\n  <Card title=\"Marketing & Content Creation\" icon='newspaper' \n    href='/workflow-templates/use-cases/marketing-content-creation'>\n    Use AI to generate personalized, SEO-optimized content and marketing campaigns.\n  </Card>\n\n  <Card title=\"Customer Success\" icon='face-smile' \n    href='/workflow-templates/use-cases/customer-success'>\n    Use AI for follow-ups, success plan building and personalized outreach to scale customer success.\n  </Card>\n\n  <Card title=\"Legal & Compliance\" icon='gavel' \n    href='/workflow-templates/use-cases/legal-compliance'>\n    Simplify legal and compliance processes with AI-driven document generation, analysis and review.\n  </Card>\n\n  <Card title=\"Internal Operations & Team Management\" icon='people-group' \n    href='/workflow-templates/use-cases/internal-operations-team-management'>\n    Streamline onboarding, Q&A, internal policy creation, revops workflows and team management with AI.\n  </Card>\n\n  <Card title=\"Product Management\" icon='binoculars' \n    href='/workflow-templates/use-cases/product-management'>\n    Augment feedback analysis, documentation generation, and roadmap/release content creation to accelerate product development.\n  </Card>\n\n  <Card title=\"Client Reporting & Analysis\" icon='magnifying-glass-chart' \n    href='/workflow-templates/use-cases/client-reporting-analysis'>\n    Generate detailed reports, proposals, and satisfaction summaries using AI.\n  </Card>\n\n</CardGroup>\n"
      },
      "pages/quick-start.mdx": {
        "markdown": "---\ntitle: Build a RAG app in under 5 minutes\nsubtitle: Quickly create a retrieval-augmented generation app with Scout\ndescription: >-\n  Learn how to build an AI RAG app in under 5 minutes using Scout's intuitive\n  drag-and-drop functionality, leveraging LLMs, APIs, and your data.\nimage:\n  type: url\n  value: 'https://www.scoutos.com/images/social-previews/index.jpg'\n---\n\nScout makes building AI apps simple. With intuitive drag-and-drop functionality, you can easily build apps that leverage LLMs, APIs, your data, and your custom logic.\n\nIn this guide, we’ll show you how to build a RAG app in Scout in under 5 minutes. Scout provisions all the underlying infrastructure, and our free tier doesn't require a credit card. Let's get started!\n\n<Frame\n  caption=\"Architecture for our 5 minute RAG app. First we'll integrate our data, then we'll configure and test our AI workflow.\"\n>\n  <img src=\"file:cf441ec9-a82e-4b21-876d-b644e7b49fbe\" />\n</Frame>\n\n<Steps>\n  ### Integrate your data\n  Scout stores your data in [collections](/docs/collections), which are groups of [documents](/docs/collections/documents). Each document can contain metadata and text content. The text content is chunked and used for vector search. The metadata can be used to filter and sort the documents. Scout abstracts all of this complexity and provides a simple process to upload documents as outlined below:\n\n  <AccordionGroup toc={true}>\n    <Accordion title='Create a collection'>\n      1. [Sign up for free](https://studio.scoutos.com/onboarding/step-1) or [sign in](https://studio.scoutos.com/sign-in) to Scout\n      2. Once logged in, click \"[Collections](https://studio.scoutos.com/dashboard/collections)\" in the nav\n      3. Click \"+ New Collection\"\n      4. Name and create your collection\n      5. Once your collection is provisioned, click it to open it\n    </Accordion>\n    <Accordion title='Upload documents'>\n     There are 3 primary ways you can add documents to a collection in Scout:\n\n     * Give Scout a URL or website to scrape\n     * Upload files to Scout\n     * Create a document directly in Scout\n\n     In this guide, we'll build a collection by scraping Scout's docs (Scoutception?) but feel free to choose your own adventure for this section.\n\n     First, in your collection, click \"+\" in the nav at the top to start adding documents. Then, select the \"Website Crawl\" option.\n     <img src=\"file:04eaf47d-40b0-4c98-a2ee-de235de834d4\" />\n     * Enter `https://scoutos.com` as the Start URL\n     * Select `HTTP` as the Scraper\n     * Select `Readability` as the Text Extractor\n     <img src=\"file:62f50863-a874-4e02-be23-897bf71e956d\" width=\"400\" />\n     * Click the \"Run\" button to start scraping the Scout website. You'll land on a page showing you the progress and status of the process. Once it's complete, move on to the next step to configure your workflow.\n     <img src=\"file:41e8fa83-f155-4c80-9c90-de81d1d4d9fa\" />\n    </Accordion>\n\n  </AccordionGroup>\n\n  ### Configure your workflow\n  [Workflows](/docs/workflows) consist of inputs, composable [blocks](/docs/workflows/blocks) which represent different actions, and outputs. They can be created from scratch, cloned from an existing workflow, or started with a template. Each block is designed with its own set of configurations. In this guide, we'll create a workflow that uses an input, a collection search, an LLM, and then output:\n\n  <AccordionGroup toc={true}>\n    <Accordion title='Create a workflow'>\n      * Click \"[Workflows](https://studio.scoutos.com/dashboard/workflows)\" in the nav\n      * Click \"+ New\" to create a new workflow\n      * Name your workflow and click the \"Create\" button. You'll see your empty workflow canvas: <img src=\"file:256da35a-4ef4-4d3f-a9d8-823c49c7767b\" />\n    </Accordion>\n    <Accordion title='Add a collection block'>\n     * Hover over the input block and click the \"+\" button below it and add a new collection block <img src=\"file:097b7f92-e6f4-48e5-80ed-31974c83b5ca\"/>\n     * Then, click the newly created collection block, and modify its configurations as follows:\n        * `Collection ID`: Use the dropdown to select your collection.\n        * `Limit`: We'll use `10`. This setting controls the max amount of documents retrieved\n        * `Minimum Similarity`: We'll use `0.7`. This setting sets a threshold for similarity match between the RAG input and the documents we'll retrieve\n        * `Query`: This should be `{{inputs.user_message}}` in order to supply the RAG app's input to the collection query\n     * Click the \"Save\" button in the upper right-hand corner. Your settings should look as follows, except for the `Collection ID` should be your unique value as mentioned above: <img src=\"file:d5f12ab8-38dc-49d5-bb5e-db39bc73ddf6\"/>\n    </Accordion>\n    <Accordion title='Add an LLM block'>\n     Hover over the collection block and click the \"+\" button below it and add a new LLM block.\n\n     Then, click the newly created LLM block, and modify its configuration sections as follows:\n      * First is the <b>Configuration</b> section, where we'll use the following settings:\n        * `Model`: We'll use `gpt-4o` for this\n        * `Temperature`: We'll use `0.7` to keep it more factual\n        * `Maximum Tokens`: We'll use `2000` as we'll be supplying our queried documents in the request\n        * `Response Type`: `text` <img src=\"file:98aa7fa0-d839-4103-bb96-0412e2e82d99\" />\n      * Then we'll configure the <b>Chat Messages</b> section as follows:\n        * First, we'll add a System Message\n          * Click \"+ Add an item\" <img src=\"file:53af2de1-4328-4803-ab4b-e09acfae164f\" />\n          * Then change `Chat Messages-1`: `Single Message`\n          * Set `Role`: `system`\n          * And paste the following prompt into `Content`\n            ```\n            You are an expert customer solutions engineer at Scout. Your role is to respond to user inquiries in a helpful and guiding manner. You have access to Scout's technical configuration documentation for developers, which is provided below. Please use this documentation to answer user questions accurately and thoroughly. If you are not confident in your answer or if a question falls outside the scope of the provided information, kindly inform the user that you do not have that information. Maintain a professional and courteous tone in all your responses. Do not speculate or provide information not supported by the documentation.\n            ```\n          * The final configuration for the System Message should look as follows: <img src=\"file:120978cb-1409-43d3-a21f-2ecedd718610\" />\n        * Then, we'll add the User Message\n          * Scroll to the bottom of the Chat Messages section and click \"+ Add an item\" to add another Chat Message\n          * Then change the newly created `Chat Messages-2`: `Single Message`\n          * Set `Role`: `user`\n          * And paste the following prompt into `Content`:\n            ```\n            <<<Scout Technical Documentation>>>\n\n            {{YOUR_COLLECTION_BLOCK.output}}\n\n            <<</Scout Technical Documentation>>>\n\n            <<<User Inquiry>>>\n\n            {{inputs.user_message}}\n\n            <<</User Inquiry>>>\n            ```\n              <b>Important</b>: You will need to replace the `YOUR_COLLECTION_BLOCK.output` variable in the snippet above with your actual collection block ID. You can easily copy your collection block ID by hovering over it and clicking copy. For example, mine would be `collection_rmdz0c.output` <img src=\"file:638acca3-c29e-46a7-9a04-db46ae0f0ee4\" />\n      * Then, at the very bottom of the LLM block settings, toggle `Output Block` to on. This signifies that this LLM block will be the last block to run, and will return its output and conclude the workflow. <img src=\"file:c1b48290-1f42-4329-8e09-efb845f9b393\" />\n      Lastly, click the \"Save\" button in the upper right-hand corner. Your RAG app (workflow) is ready!\n    </Accordion>\n\n  </AccordionGroup>\n  \n  ### Run your workflow\n  There are a variety of ways to run workflows; [Slackbots](/docs/integrations/slack-bot), [Scout's embeddable Copilot](/docs/integrations/scout-copilot), [SDKs](/api-sdk), [API](/api-sdk), directly from the [Console](/docs/workflows/console) in the Scout workflow UI, and many more.\n\n  In this guide, we'll keep it simple and test the output directly from the Console in the Scout workflow UI:\n\n  <AccordionGroup toc={true}>\n    <Accordion title='Run workflow from Scout Console'>\n\n      On the upper left-hand side of the workflow canvas, click the play icon to open the Console.\n      <img src=\"file:5655c20d-fbaa-4588-88de-0ef1710227b5\" />\n\n      In the User's Message text area, paste the following query then click \"Run\":\n              ``` \n              Please build me a guide including relevant code snippets and information I'd need to install the Scout Copilot module into my website.\n              ```\n                <img src=\"file:617138aa-d875-482f-b462-22470b6b609a\" />\n      The output will be automatically formatted and rendered below the input, and should look something like this:\n              <img src=\"file:0b66bf67-8b44-4618-89c7-0e3a8191ff4e\" />\n    </Accordion>\n  </AccordionGroup>\n  \n</Steps>\n\nVoila! And there you have it; we built a RAG app in under 5 minutes that can guide you in building more powerful and complex AI apps on Scout!\n\n<Tip>\n<b>Want to keep building?</b> Check out our free [Workflow Templates](/workflow-templates/whats-your-use-case) which can help jumpstart your use case!\n</Tip>\n"
      },
      "pages/docs/workflows/overview.mdx": {
        "markdown": "---\ntitle: Workflow overview\nsubtitle: Understanding the power and flexibility of Scout workflows\ndescription: >-\n  Explore how Scout workflows automate processes and integrate with diverse data\n  sources, offering powerful tools for data processing, automated reporting, and\n  API integration.\n---\n\n<Note><b>Just getting started?</b> Check out our [Build a RAG app in under 5 minutes](/docs/quick-start) quick start guide!</Note>\n\nWorkflows are a powerful tool in the Scout platform, designed to automate processes, streamline tasks, and integrate seamlessly with various data sources and services. By utilizing workflows, users can create sophisticated sequences of actions that respond to specific inputs, making them ideal for a wide range of use cases like data processing, automated reporting, and integration with third-party APIs.\n\n<img src=\"file:d50ea88e-882c-41da-b9b7-88799d31cfec\"/>\n\nWorkflows consist of configurable components known as [blocks](/docs/workflows/blocks), which can be customized to suit different needs and chained together to create complex logic flows. Each workflow can be tailored with specific parameters, allowing for dynamic input handling and tailored output generation. You can execute a workflow from the [console](/docs/workflows/console) in the Scout UI, [Scout's embeddable Copilot](/docs/integrations/scout-copilot), a [Slackbot](/docs/integrations/slack-bot), [API](/api-sdk), [SDK](/api-sdk) and more. This flexibility makes workflows suitable for both straightforward tasks and more intricate operations that require nuanced logic.\n\nIn addition to their versatility, workflows provide a comprehensive environment for monitoring and managing operations, complete with a [console](/docs/workflows/console) for real-time execution, a revision [history](/docs/workflows/history) audit log, and detailed workflow execution [logs](/docs/workflows/logs) for troubleshooting. [Environment variables](/docs/workflows/environment-variables) can be set to manage configurations across different environments, ensuring robust and adaptable solutions.\n"
      },
      "pages/docs/workflows/creating-workflows.mdx": {
        "markdown": "---\ntitle: Building Effective Workflows in Scout\nsubtitle: Guidance on creating optimized workflows in Scout applications\ndescription: >-\n  Learn how to define objectives, integrate data sources, and use tactical\n  methods to create efficient workflows in Scout. This guide provides a\n  comprehensive overview of setting up and managing workflows, emphasizing the\n  importance of clear objectives and proper data integration.\n---\n\n<Note><b>Just getting started?</b> Check out our [Build a RAG app in under 5 minutes](/docs/quick-start) quick start guide!</Note>\n\n<Steps>\n  ### Defining your objective\n  Creating workflows starts with a simple first step; clearly defining the objective of your workflow, understanding the inputs it will handle, and the outputs it is expected to produce. This helps in determining the necessary logic and components required. Consider mapping out the sequence of operations, which will guide the logical flow of your workflow, making it easier to identify the specific [blocks](/docs/workflows/blocks) needed. \n\n  ### Data & integrations\n  Next, ensure you have all required data sources and third-party service integrations accessible, as these will be crucial for your workflow's functionality. At the very least, we'd suggest setting up a [collection](/docs/collections) so that you can augment LLM queries with your specific data. If you're going to production, and you want to make requests to external services, consider setting up [environment variables](/docs/workflows/environment-variables).\n\n  ### Tactical\n  You can create a workflow in the Scout UI by clicking \"Workflows\" in the Scout dashboard nav, then clicking \"+ New\".\n\n  Workflows can be given names, icons (an avatar image), and a description.\n\n  Request enterprise access for SDK and API workflow creation.\n</Steps>\n"
      },
      "pages/docs/workflows/workflow-logic-state.mdx": {
        "markdown": "---\ntitle: Scout Workflow Logic and State\nsubtitle: Understanding workflow execution and state management\ndescription: >-\n  Explore the logical flow and state management of workflows in Scout, including\n  execution considerations for efficient automation and integration. Learn how\n  to configure blocks for seamless data processing and error management.\n---\n\nWorkflows are designed to manage complex processes by chaining together a series of actions or [blocks](/docs/workflows/blocks). Understanding the logical flow of workflows and how state is managed between them is crucial for effective automation and integration.\n\n### Logical Flow of Workflows\n\nWorkflows operate by executing a sequence of blocks, each performing specific tasks that contribute to the overall process. These blocks can include operations like data retrieval, network requests, transformation, and output generation. The logical flow begins with the initiation of the workflow, typically triggered by an input or event, which then progresses through each block in the specified order.\n\n<img src=\"file:d50ea88e-882c-41da-b9b7-88799d31cfec\"/>\n\n### State Management\n\nState in workflows is managed through the passing of data between blocks. Each block can produce outputs that become inputs for subsequent blocks, facilitating a dynamic flow of information. This is achieved using placeholders in the form of `{{block_id.your_custom_field}}` or `{{block_id.output}}`. For instance, in the screenshot above, `{{inputs.user_message}}` can be used to represent the initial input provided to the workflow, while `{{collection_vp81p.output}}` refers to the output generated by the collection block, identified by its ID.\n\nTo use the workflow input in the query against my collection block, I would reference it in the query field of the collection block's configuration like so:\n\n<img src=\"file:be2e2ef8-f215-4f15-9dd5-fcc910251c6e\"/>\n\nThen, continuing with the same example, I may pass a prompt to my LLM block that contains the output, as referenced by `{{collection_vp81p.output}}` in the content field, from the collection block query:\n\n<img src=\"file:daa03bed-2855-4814-9270-660446db7000\"/>\n\n### Execution Considerations\n\nEnsure that each block is configured to correctly process the inputs it receives and that it outputs data in a format usable by subsequent blocks. Reference [blocks](/docs/workflows/blocks) documentation for details on each specific block type.\n\nIn addition, consider the following:\n\n- **Error Handling:** Implement strategies within your execution logic to manage potential errors or exceptions that might occur during execution.\n- **Performance:** Optimize the sequence and configuration of blocks to reduce latency and improve the efficiency of the workflow, particularly when a workflow is customer facing.\n"
      },
      "pages/docs/workflows/blocks/overview.mdx": {
        "markdown": "---\ntitle: Understanding Blocks in Scout Workflows\nsubtitle: Building effective workflows with modular units\ndescription: >-\n  Explore the foundational elements of Scout workflows, known as blocks, which\n  facilitate the creation of complex, automated processes. Learn how to use\n  various block types to achieve a wide range of automation objectives.\n---\n\nBlocks are the foundational elements of any workflow in the Scout platform, acting as modular units that carry out specific tasks within a process. Each workflow begins with an input block, which receives initial data or a trigger, setting the stage for the series of actions that follow. The versatility of blocks allows users to construct complex logical flows and achieve a wide range of automation objectives.\n\n<img src=\"file:d50ea88e-882c-41da-b9b7-88799d31cfec\"/>\n\nBlocks are designed to be both composable and customizable, enabling the creation of intricate processes by linking various types of blocks in a sequence. Each block performs a unique function, such as querying a database, sending an HTTP request, or processing text with an LLM. This modularity ensures that workflows can be tailored to specific use cases, whether for data processing, API integration, or automated reporting.\n\nEach block type has its own detailed sub-section, providing specific insights and configuration guidelines:\n\n<CardGroup cols={2}>\n<Card title=\"LLM\" icon=\"sparkles\" href=\"/docs/workflows/blocks/llm\">\n    Interface with large language models (LLMs) using the LLM block.\n</Card>\n\n<Card title=\"Collection\" icon=\"folder\" href=\"/docs/workflows/blocks/collection\">\n    Query collection data using the collection block.\n</Card>\n\n<Card title=\"JSON\" icon=\"code\" href=\"/docs/workflows/blocks/json\">\n    Work with JSON data using the JSON block.\n</Card>\n\n<Card title=\"Save\" icon=\"download\" href=\"/docs/workflows/blocks/save\">\n    Save data to various locations using the save block.\n</Card>\n\n<Card title=\"Text\" icon=\"text\" href=\"/docs/workflows/blocks/text\">\n    Manage and manipulate text using the text block.\n</Card>\n\n<Card title=\"HTTP\" icon=\"code\" href=\"/docs/workflows/blocks/http\">\n    Make HTTP requests using the HTTP block.\n</Card>\n\n<Card title=\"Extract Links\" icon=\"link\" href=\"/docs/workflows/blocks/extract-links\">\n    Extract hyperlinks from text or web pages using the extract links block.\n</Card>\n\n<Card title=\"Conditional\" icon=\"diagram-project\" href=\"/docs/workflows/blocks/conditional\">\n    Set conditions and branching logic using the conditional block.\n</Card>\n\n<Card title=\"Postgres\" icon=\"database\" href=\"/docs/workflows/blocks/postgres\">\n    Interface with Postgres databases using the Postgres block.\n</Card>\n\n<Card title=\"Discord Message\" icon=\"comment\" href=\"/docs/workflows/blocks/discord-message\">\n    Send messages to Discord channels using the Discord message block.\n</Card>\n\n</CardGroup>\n"
      },
      "pages/docs/workflows/blocks/discord_message.mdx": {
        "markdown": "---\ntitle: Discord Message Block\nsubtitle: Send messages to Discord with optional link preview disabling\ndescription: >\n  The Discord Message block allows users to send formatted messages to Discord.\n  It supports Jinja templating for dynamic content and offers an option to\n  disable link previews, making it versatile for various messaging needs.\n---\n\nThe Discord Message block is designed to facilitate sending messages to Discord channels. It allows for dynamic content generation using Jinja templating and provides an option to disable link previews, enhancing message customization and control.\n\n### Configuration (Required)\n<ParamField path=\"Discord Message\" type=\"code\" required={true}>\n    <p>The Discord message parameter defines the content of the message to be sent. This input supports Jinja templating, allowing for dynamic content generation based on the workflow context.</p>\n</ParamField>\n\n<ParamField path=\"Disable Link Previews\" type=\"boolean\" required={false}>\n    <p>This parameter determines whether link previews should be disabled in the message. By default, this is set to false, meaning link previews will be shown unless explicitly disabled.</p>\n</ParamField>\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n\n### Output\nThe block outputs the rendered message text, with optional modifications to disable link previews if specified.\n\n## Usage Context\nUse this block to send messages to Discord channels, with the ability to dynamically generate message content using Jinja templating. This is particularly useful for automated notifications or updates that require real-time data integration.\n\n## Best Practices\n\n- **Utilize Jinja templating** to customize messages based on workflow context, ensuring that the content is relevant and up-to-date.\n- **Disable link previews** when sharing sensitive or internal URLs to maintain message focus and prevent unintended information disclosure.\n"
      },
      "pages/docs/workflows/blocks/save.mdx": {
        "markdown": "---\ntitle: Save Document to Collection Block\nsubtitle: Save documents to Scout collections\ndescription: >-\n  This block allows users to save a document to a specified Scout collection. It\n  supports dynamic data insertion using Jinja templating.\n---\n\nThe Save Document to Collection block enables users to store documents within a specified Scout collection. This block is essential for managing and organizing data within your workflows, allowing for dynamic content insertion through Jinja templating.\n\n### Configuration (Required)\n<ParamField path=\"Collection ID\" type=\"string\" required={true}>\n    <p>The ID of the collection where the document will be saved. Ensure this ID is correct to avoid saving data to the wrong collection.</p>\n</ParamField>\n<ParamField path=\"ID\" type=\"string\" required={true}>\n    <p>The unique identifier for the document being saved. This ID is crucial for distinguishing between different documents and for updating existing ones.</p>\n</ParamField>\n<ParamField path=\"Text\" type=\"code\" required={true}>\n    <p>The main content of the document. This field supports Jinja templating, allowing for dynamic content generation based on workflow state.</p>\n</ParamField>\n<ParamField path=\"Values\" type=\"list\" required={false}>\n    <p>Additional fields to be saved with the document. These fields can include various data types and are optional. The default is an empty list.</p>\n</ParamField>\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n\n## Outputs\nThe block outputs the response from the collection service after saving the document. This response can be used to verify the success of the save operation or to handle any errors that may occur.\n\n## Usage Context\nUse this block to store data into Scout collections from within your workflow. It is particularly useful for applications that require organized data storage and retrieval.\n\n## Best Practices\n\n- **Ensure the collection ID and document ID are correct:** Double-check these identifiers to prevent data from being saved to the wrong location or overwriting existing documents unintentionally.\n- **Use Jinja templating in the text field for dynamic content:** Leverage the power of Jinja to create dynamic and context-aware document content.\n- **Validate fields to match the collection schema:** Ensure that any additional fields conform to the expected schema of the collection to avoid errors during the save operation.\n"
      },
      "pages/docs/workflows/blocks/llm.mdx": {
        "markdown": "---\ntitle: LLM Block\nsubtitle: Generate text using language models\ndescription: >-\n  The LLM block generates text using a specified language model. It supports\n  various models and configurations, allowing for dynamic text generation within\n  workflows.\n---\n\nThe LLM block integrates large language models into Scout workflows, enabling flexible and creative text generation through configurable foundational models.\n\n### Configuration (Required)\n\n<ParamField path=\"Model\" type=\"select\" required={true}>\n    <p>Select the underlying model to use for generating text. Current options include:</p>\n    <ul>\n        <li>claude-3-5-sonnet@20240620</li>\n        <li>gpt-3.5-turbo</li>\n        <li>gpt-3.5-turbo-0125</li>\n        <li>gpt-3.5-turbo-1106</li>\n        <li>gpt-4</li>\n        <li>gpt-4-0125-preview</li>\n        <li>gpt-4-1106-preview</li>\n        <li>gpt-4-turbo</li>\n        <li>gpt-4-turbo-2024-04-09</li>\n        <li>gpt-4o</li>\n        <li>gpt-4o-2024-08-06</li>\n        <li>gpt-4o-mini</li>\n        <li>llama-v2-13b-chat</li>\n        <li>llama-v2-70b-chat</li>\n        <li>llama-v2-7b-chat</li>\n        <li>llama-v3-70b-instruct</li>\n        <li>llama-v3p1-405b-instruct</li>\n        <li>llama-v3p1-70b-instruct</li>\n        <li>mixtral-8x7b-instruct</li>\n    </ul>\n    <p>Default: gpt-4o</p>\n</ParamField>\n\n<ParamField path=\"Temperature\" type=\"float\" required={true}>\n    <p>Controls the randomness of the output. Lower values result in more predictable responses, while higher values can generate more creative and diverse outputs.</p>\n    <p>Default: 0.7, Range: 0 to 2, Step: 0.01</p>\n</ParamField>\n\n<ParamField path=\"Maximum Tokens\" type=\"int\" required={true}>\n    <p>The maximum number of tokens to generate. This helps in controlling the length and detail of the output.</p>\n    <p>Default: 300, Minimum: 100</p>\n</ParamField>\n\n<ParamField path=\"Response Type\" type=\"select\" required={true}>\n    <p>The format of the response. Possible options include:</p>\n    <ul>\n        <li>text: For plain text outputs.</li>\n        <li>json_object: For structured JSON outputs, useful for applications needing structured data.</li>\n    </ul>\n    <p>Default: text</p>\n</ParamField>\n\n<ParamField path=\"Chat Messages\" type=\"list\" required={true}>\n    <p>Messages to be sent to the model. This can include a series of messages that define the conversation context.</p>\n    <p>Default: []</p>\n</ParamField>\n\n## Outputs\nThe block outputs generated text or a JSON object based on the specified response format.\n\n## Usage Context\nUse this block to integrate AI-generated text into your workflow, allowing for dynamic and context-aware text generation.\n\n## Best Practices\n\n- **Model Selection:** Choose the appropriate model for your use case to ensure optimal performance and relevance.\n- **Temperature Tuning:** Adjust the temperature to control the randomness and creativity of the output, balancing between predictability and diversity.\n- **Prompt Clarity:** Ensure prompts are clear and well-structured to guide the model effectively and achieve the desired output.\n"
      },
      "pages/docs/workflows/blocks/scrape.mdx": {
        "markdown": "---\ntitle: Scrape Block\nsubtitle: Scrape web pages and process HTML content\ndescription: >-\n  The Scrape block allows users to scrape web pages and process HTML content by\n  excluding specified selectors. It integrates with the Browserless API to\n  perform the scraping and returns the processed HTML content.\n---\n\nThe Scrape block enables users to scrape web pages and process HTML content by removing specified elements. This block integrates with the Browserless API to perform the scraping and returns the processed HTML content.\n\n### Configuration (Required)\n<ParamField path=\"URL to which the request will be made\" type=\"code\" required={true}>\n    <p>The URL parameter specifies the web page to be scraped. Ensure the URL is correctly templated and resolves to a valid web page.</p>\n</ParamField>\n\n<ParamField path=\"Exclude Selectors\" type=\"code\" required={false}>\n    <p>This parameter allows you to specify a comma-separated list of classes, ids, or tags to exclude from the scraped content. Use this to remove unwanted elements from the HTML content.</p>\n</ParamField>\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n\n## Output\nThe Scrape block returns the HTML content of the web page after excluding the specified selectors. This allows for a cleaner and more focused data extraction from the web page.\n\n## Usage Context\nUse this block to scrape web pages and process the HTML content by removing unwanted elements. It is particularly useful for extracting clean data from web pages for further processing or analysis.\n\n## Best Practices\n\n- **Ensure the URL is correctly templated and resolves to a valid web page.** This ensures that the scraping process can access and retrieve the desired content.\n- **Specify selectors to exclude unwanted elements from the scraped content.** This helps in obtaining a cleaner and more relevant HTML output.\n"
      },
      "pages/docs/workflows/blocks/copilot_links.mdx": {
        "markdown": "---\ntitle: Copilot Links Block\nsubtitle: Generate and manage a list of links with optional headers and limits\ndescription: >-\n  The Copilot Links block allows users to generate a list of links with a\n  customizable header and limit on the number of links displayed. This block\n  supports dynamic link generation using Jinja templating, making it suitable\n  for creating link lists based on workflow state.\n---\n\nThe Copilot Links block is designed to dynamically generate and manage lists of links within your workflow. It supports Jinja templating for dynamic content generation, allowing for flexible and customizable link lists.\n\n### Configuration (Required)\n<ParamField path=\"Header\" type=\"string\" required={false}>\n    <p>The header text for the list. This provides context or categorization for the list of links. The default value is \"Links\".</p>\n</ParamField>\n\n<ParamField path=\"List of links\" type=\"code\" required={true}>\n    <p>A Jinja template that evaluates to a list of dictionaries, each representing a link. This input is crucial for generating the list of links dynamically based on the workflow state.</p>\n</ParamField>\n\n<ParamField path=\"Limit\" type=\"integer\" required={false}>\n    <p>The maximum number of links to display. This helps control the number of links shown in the output, preventing overflow. The default value is 5.</p>\n</ParamField>\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n\n## Outputs\nThe block returns a list of processed links with optional headers and tags. The output is structured as a list, making it easy to integrate into subsequent workflow steps or external systems.\n\n## Usage Context\nUse this block to dynamically generate and manage lists of links within your workflow. It is particularly useful for creating link lists that adapt to changes in the workflow state, leveraging Jinja templating for dynamic content generation.\n\n## Best Practices\n\n- **Ensure the 'list_of_links' input is a valid Jinja template that evaluates to a list of dictionaries.**\n- **Use the 'limit' input to control the number of links displayed, preventing overflow in the output.**\n- **Leverage the 'header' input to provide context or categorization for the list of links.**\n"
      },
      "pages/docs/workflows/blocks/text.mdx": {
        "markdown": "---\ntitle: Text Block\nsubtitle: Render text using Jinja templating within Scout workflows\ndescription: >-\n  The Text block allows users to render text using Jinja templating. This is\n  useful for dynamically generating text content based on workflow state\n  variables.\n---\n\nThe Text block enables the rendering of text using Jinja templating within Scout workflows. This functionality is particularly useful for dynamically generating text content based on the state variables available in your workflow.\n\n### Configuration (Required)\n<ParamField path=\"Text\" type=\"code\" required={true}>\n    <p>The text input is a required field where you define the Jinja template that will be rendered. This template can include dynamic variables from the workflow state, allowing for flexible and dynamic text generation.</p>\n</ParamField>\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n\n## Outputs\nThe Text block outputs the rendered text based on the provided Jinja template. The output is in string format, making it suitable for use in subsequent workflow steps that require text data.\n\n## Usage Context\nUse this block to dynamically generate text content by rendering Jinja templates with workflow state variables. This is ideal for scenarios where text needs to adapt based on changing data within the workflow.\n\n## Best Practices\n\n- **Ensure the text input is a valid Jinja template:** This will prevent errors during rendering and ensure the output is as expected.\n- **Verify that all variables used in the template are available in the workflow state:** This ensures that the template can be rendered without missing data, maintaining the integrity of the output.\n"
      },
      "pages/docs/workflows/blocks/copilot_message.mdx": {
        "markdown": "---\ntitle: Copilot Message Block\nsubtitle: Generates text using a language model\ndescription: >-\n  The Copilot Message block leverages a language model to generate text. This\n  block is part of the ScoutOS Copilot suite and is designed to assist users in\n  creating dynamic text outputs within workflows.\n---\n\nThe Copilot Message block is a component of the ScoutOS Copilot suite, designed to generate text using a language model. This block is ideal for creating dynamic text outputs within workflows, enhancing automation and user interaction capabilities.\n\n### Configuration (Required)\n<ParamField path=\"Model\" type=\"select\" required={true}>\n    <p>Select the language model to use for generating text. Ensure the model is appropriate for your text generation needs.</p>\n</ParamField>\n<ParamField path=\"Prompt\" type=\"string\" required={true}>\n    <p>Provide a clear and concise prompt to guide the language model in generating the desired text output.</p>\n</ParamField>\n\n## Outputs\nThe Copilot Message block outputs the generated text from the language model. This output can be used in subsequent workflow steps to enhance automation and user interaction.\n\n## Usage Context\nUse this block to generate text dynamically within your workflow, utilizing the capabilities of a language model. It is particularly useful for tasks that require natural language processing and text generation.\n\n## Best Practices\n\n- **Ensure the input parameters are correctly configured to achieve the desired text output.** Proper configuration of inputs is crucial for obtaining accurate and relevant text generation results.\n- **Leverage the language model's strengths by providing clear and concise prompts.** A well-defined prompt helps the model generate more precise and useful text outputs.\n"
      },
      "pages/docs/workflows/blocks/http.mdx": {
        "markdown": "---\ntitle: HTTP Request Block\nsubtitle: Make HTTP requests within Scout workflows\ndescription: >-\n  The HTTP Request block allows users to perform HTTP requests, enabling\n  integration with external APIs and services. It supports various HTTP methods\n  and allows for dynamic URL and header construction using Jinja templating.\n---\n\nThe HTTP Request block enables seamless integration with external services by facilitating HTTP requests within Scout workflows. It allows you to interact with APIs and services by sending requests and handling responses effectively.\n\n### Configuration (Required)\n<ParamField path=\"Method\" type=\"select\" required={true}>\n    <p>Select the HTTP method to use for the request. Common methods include GET, POST, PUT, PATCH, and DELETE. Choose the method that corresponds to the action you wish to perform with the HTTP request.</p>\n</ParamField>\n<ParamField path=\"URL\" type=\"string\" required={true}>\n    <p>The URL specifies the endpoint to which the HTTP request will be sent. Ensure the URL is correctly formatted and points to the desired resource on the external service. This field supports Jinja templating for dynamic URL construction.</p>\n</ParamField>\n<ParamField path=\"Request body\" type=\"code\" required={false}>\n    <p>The request body is the value that's inserted into the \"body\" value of the payload used in the POST, PUT, and PATCH requests. This field supports Jinja templating for dynamic content generation.</p>\n</ParamField>\n<ParamField path=\"Headers\" type=\"list\" required={false}>\n    <p>Headers are used to pass additional information with the HTTP request, such as authentication tokens or content types. This field supports Jinja templating for dynamic header construction.</p>\n</ParamField>\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n\n## Outputs\nThe output of this block is the response from the HTTP request, which can be either a JSON object or a string, depending on the content type of the response.\n\n## Usage Context\nUse this block to interact with external APIs or services within your workflow. It is ideal for scenarios where data needs to be fetched or sent to external systems.\n\n## Best Practices\n\n- **Ensure the URL and method are correct:** Double-check the URL and HTTP method to ensure they match the intended API endpoint and action.\n- **Use Jinja templating:** Leverage Jinja templating to dynamically construct URLs and request bodies, allowing for flexible and adaptable HTTP requests.\n- **Handle possible exceptions:** Implement error handling within your workflows to manage HTTP status codes and potential request failures gracefully.\n"
      },
      "pages/docs/workflows/blocks/slack_message.mdx": {
        "markdown": "---\ntitle: Slack Message Block\nsubtitle: Convert markdown to Slack message format\ndescription: >-\n  The Slack Message block converts markdown text into a format suitable for\n  Slack messages. This allows for seamless integration of formatted text into\n  Slack channels, enhancing communication within workflows.\n---\n\nThe Slack Message block is designed to convert markdown text into a format that is compatible with Slack messages. This functionality enables seamless integration of formatted text into Slack channels, enhancing communication within your workflows.\n\n### Configuration (Required)\n<ParamField path=\"Markdown\" type=\"code\" required={true}>\n    <p>The markdown parameter is a string input that defines the content to be converted into Slack message format. Ensure that the markdown is correctly formatted to achieve the desired output. This input supports Jinja templating, allowing for dynamic content generation.</p>\n</ParamField>\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n\n## Outputs\nThe block outputs the formatted Slack message as a string, ready to be sent to a Slack channel.\n\n## Usage Context\nUse this block to format and send messages to Slack channels using markdown input. It is particularly useful for workflows that require dynamic and well-formatted communication within Slack.\n\n## Best Practices\n\n- **Ensure the markdown input is correctly formatted for conversion:** Proper markdown formatting is crucial for accurate conversion to Slack message format.\n- **Utilize Jinja templating to dynamically generate message content:** Leverage Jinja templating to create dynamic and contextually relevant messages for Slack.\n"
      },
      "pages/docs/workflows/blocks/copilot_thinking_text.mdx": {
        "markdown": "---\ntitle: Copilot Thinking Text Block\nsubtitle: Generate dynamic text using Jinja templating within Scout workflows\ndescription: >-\n  The Copilot Thinking Text block allows users to dynamically generate text\n  using Jinja templating. This block is useful for creating text outputs that\n  adapt based on the current state of the workflow, enabling flexible and\n  context-aware text generation.\n---\n\nThe Copilot Thinking Text block is designed to generate dynamic text outputs within Scout workflows using Jinja templating. This block is particularly useful for creating text that adapts based on the current state of the workflow, allowing for flexible and context-aware text generation.\n\n### Configuration (Required)\n<ParamField path=\"Text\" type=\"code\" required={true}>\n    <p>The text parameter is a required field where you define the Jinja template that will be rendered. This template can include dynamic variables from the workflow's state, allowing for the generation of context-aware text outputs.</p>\n</ParamField>\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n\n## Outputs\n\nThe block outputs the generated text based on the provided Jinja template and the current state of the workflow. This allows for the creation of dynamic and adaptable text outputs that can be used in subsequent workflow steps.\n\n## Usage Context\n\nUse this block to create dynamic text outputs that change based on the workflow's state, ideal for generating context-aware messages.\n\n## Best Practices\n\n- **Ensure the Jinja template is correctly formatted to avoid runtime errors.**\n- **Utilize the current state variables effectively within the template for meaningful outputs.**\n"
      },
      "pages/docs/workflows/blocks/conditional.mdx": {
        "markdown": "---\ntitle: Conditional Block\nsubtitle: Conditional branching in Scout workflows\ndescription: >-\n  The Conditional block allows for conditional branching within a Scout\n  workflow, enabling different execution paths based on evaluated conditions. It\n  uses Jinja templating to dynamically evaluate conditions and determine which\n  block to execute next.\n---\n\nThe Conditional block is a crucial component in Scout workflows, enabling dynamic decision-making by evaluating conditions to determine the subsequent execution path. This block uses Jinja templating to assess conditions and decide which block to execute next, allowing for flexible and responsive workflow designs.\n\n### Configuration (Required)\n<ParamField path=\"condition\" type=\"code\" required={true}>\n    <p>Template that should evaluate to True or False. This condition determines the path the workflow will take based on its evaluation.</p>\n</ParamField>\n\n<ParamField path=\"block_on_true\" type=\"string\" required={true}>\n    <p>The `block_id` of the block to run if the condition evaluates to True. Ensure this block ID exists within the workflow.</p>\n</ParamField>\n\n<ParamField path=\"block_on_false\" type=\"string\" required={true}>\n    <p>The `block_id` of the block to run if the condition evaluates to False. Verify that this block ID is present in the workflow.</p>\n</ParamField>\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n\n### Outputs\nThe Conditional block provides the evaluated condition and the block ID that will be executed. This output helps in understanding the decision path taken by the workflow.\n\n## Usage Context\nUse this block to control workflow execution based on dynamic conditions. It is ideal for scenarios where different actions are required depending on specific criteria or states.\n\n## Best Practices\n\n- **Ensure the condition template correctly evaluates to a boolean value:** This is critical for the correct functioning of the conditional logic.\n- **Verify that the block IDs provided exist in the workflow:** This ensures that the workflow can proceed without errors when the condition is evaluated.\n"
      },
      "pages/docs/workflows/blocks/json.mdx": {
        "markdown": "---\ntitle: JSON Block\nsubtitle: Process and render JSON data within Scout workflows\ndescription: >-\n  The JSON block allows users to process and render JSON data using Jinja\n  templating. This block is useful for dynamically generating JSON structures\n  based on the current state of the workflow.\n---\n\nThe JSON block is a utility block within Scout workflows designed to process and render JSON data. It leverages Jinja templating to dynamically generate JSON structures based on the current state of the workflow.\n\n### Configuration (Required)\n<ParamField path=\"JSON\" type=\"code\" required={true}>\n    <p>The JSON parameter is a string input that defines the structure and content of the JSON object to be outputted by the block. This input is critical as it determines how the data from the workflow is combined and formatted. It allows for the inclusion of dynamic data references from previous workflow blocks, enabling flexible and robust data handling.</p>\n</ParamField>\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n\n## Outputs\n\nThe block outputs the rendered JSON object based on the provided template and workflow state.\n\n## Usage Context\n\nUse this block to dynamically generate JSON data within your workflow, leveraging the current state and Jinja templating.\n\n## Best Practices\n\n- **Ensure the JSON template is valid and correctly formatted.**\n- **Use Jinja templating to inject dynamic values into the JSON structure.**\n"
      },
      "pages/docs/workflows/blocks/extract_links.mdx": {
        "markdown": "---\ntitle: Extract Links From Markdown Block\nsubtitle: Extract and process links from markdown text\ndescription: >\n  The Extract Links From Markdown block allows users to extract hyperlinks from\n  markdown text. It can fetch additional metadata such as favicons, snippets,\n  and titles for each link, providing a comprehensive overview of the links\n  present in the markdown.\n---\n\nThe Extract Links From Markdown block is designed to efficiently pull URLs and their corresponding metadata from markdown text. This block is particularly useful for identifying and managing links within markdown documents, such as documentation or notes.\n\n### Configuration (Required)\n<ParamField path=\"Markdown\" type=\"string\" required={true}>\n    <p>The markdown text to extract links from. Ensure that the markdown text is properly formatted to accurately extract links.</p>\n</ParamField>\n\n<ParamField path=\"Fetch Favicons\" type=\"boolean\" required={false}>\n    <p>Whether to fetch favicons for the extracted links. Default is true.</p>\n</ParamField>\n\n<ParamField path=\"Fetch Snippets\" type=\"boolean\" required={false}>\n    <p>Whether to fetch snippets for the extracted links. Default is true.</p>\n</ParamField>\n\n<ParamField path=\"Fetch Titles\" type=\"boolean\" required={false}>\n    <p>Whether to fetch titles for the extracted links. Default is true.</p>\n</ParamField>\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n\n### Outputs\nThe block outputs a list of links extracted from the markdown, including optional metadata like titles, snippets, and favicons. This structured output allows for further processing or analysis of the links.\n\n## Usage Context\nUse this block to extract and analyze links from markdown content, such as documentation or notes, and gather additional metadata for each link. This can be particularly useful for content management and link validation tasks.\n\n## Best Practices\n\n- **Ensure the markdown input is well-formed** to accurately extract links.\n- **Consider disabling fetching of favicons, snippets, or titles** if performance is a concern or if they are not needed.\n- **Handle potential exceptions** when fetching metadata, as network requests may fail.\n"
      },
      "pages/docs/workflows/blocks/input.mdx": {
        "markdown": "---\ntitle: Input Block\nsubtitle: Dynamic input collection for Scout workflows\ndescription: >-\n  The Input block allows users to define and collect various types of inputs\n  dynamically within a Scout workflow. It supports multiple input types such as\n  text, number, checkbox, and JSON objects, providing flexibility in data\n  collection and processing.\n---\n\nThe Input block is a versatile component within Scout workflows that enables the dynamic collection and management of various input types. This block is essential for workflows that require flexible input configurations, allowing users to define inputs such as text, numbers, checkboxes, and JSON objects.\n\n### Configuration (Required)\n<ParamField path=\"items\" type=\"list\" required={false}>\n    <p>A list of input items, each defining a specific input configuration. This list allows you to specify multiple inputs, each with its own type, default value, and optional status. The flexibility of this configuration supports a wide range of data collection needs within your workflow.</p>\n</ParamField>\n\n## Outputs\nThe Input block outputs a dictionary of resolved inputs based on the defined input items. This dictionary contains the values collected from the user, processed according to the specified input configurations.\n\n## Usage Context\nUse this block to gather and process user inputs dynamically within your workflow. It is particularly useful for workflows that require flexible input configurations, allowing for a tailored approach to data collection and processing.\n\n## Best Practices\n\n- **Define clear and descriptive display names for each input item:** This ensures that users understand the purpose of each input field, enhancing usability and clarity.\n- **Ensure that required inputs are correctly marked as non-optional:** This prevents workflow errors by ensuring that all necessary data is collected before proceeding.\n- **Use appropriate input types to match the expected data format:** Selecting the correct input type for each field ensures data integrity and facilitates accurate processing.\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n"
      },
      "pages/docs/workflows/blocks/stop.mdx": {
        "markdown": "---\ntitle: Stop If Block\nsubtitle: Conditionally stop execution in Scout workflows\ndescription: >-\n  The Stop If block evaluates a condition and stops the execution of subsequent\n  blocks if the condition is true. This is useful for controlling the flow of a\n  workflow based on dynamic conditions.\n---\n\nThe Stop If block is designed to evaluate a condition and halt the execution of subsequent blocks if the condition is true. This functionality is crucial for controlling the flow of a workflow based on dynamic conditions, allowing for more flexible and responsive workflow designs.\n\n### Configuration (Required)\n<ParamField path=\"condition\" type=\"code\" required={true}>\n    <p>Template that should evaluate to True or False. This input is essential for determining whether the workflow should continue or stop. Utilize Jinja templating to dynamically evaluate conditions based on the current state of the workflow.</p>\n</ParamField>\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n\n## Outputs\nThe block returns an output indicating whether the condition evaluated to true, along with details about the execution. This output can be used to understand the decision-making process within the workflow.\n\n## Usage Context\nUse this block to conditionally halt workflow execution based on evaluated conditions. It is particularly useful in scenarios where certain criteria must be met to proceed with the workflow, ensuring that resources are only used when necessary.\n\n## Best Practices\n\n- **Ensure the condition template correctly evaluates to a boolean value:** This is critical for the block to function as intended. Incorrect evaluations can lead to unexpected workflow behavior.\n- **Use Jinja templating to dynamically evaluate conditions based on workflow state:** This allows for more flexible and adaptable workflows that can respond to changing data and conditions.\n"
      },
      "pages/docs/workflows/blocks/collection.mdx": {
        "markdown": "---\ntitle: Collection Block\nsubtitle: Query and filter collections within Scout workflows\ndescription: >-\n  The Collection block allows users to query and filter collections in Scout\n  workflows. It supports dynamic querying using Jinja templating and provides\n  options for filtering based on metadata. This block is useful for retrieving\n  and processing data from collections efficiently.\n---\n\nThe Collection block enables querying and filtering of collections within Scout workflows. It allows for dynamic querying using Jinja templating and supports metadata-based filtering, making it an essential tool for efficient data retrieval and processing.\n\n### Configuration (Required)\n<ParamField path=\"Collection\" type=\"string\" required={true}>\n    <p>The ID of the collection to query. Ensure the collection ID is correct and exists in the system.</p>\n</ParamField>\n\n<ParamField path=\"limit\" type=\"int\" required={false}>\n    <p>Specifies the maximum number of documents to retrieve from the collection. Default is 10. Adjust this setting based on the specific needs of your task or application.</p>\n</ParamField>\n\n<ParamField path=\"minimum_similarity\" type=\"float\" required={false}>\n    <p>Determines the threshold for document similarity in the retrieval process. A value closer to 1 requires a higher similarity between the query and the document text, while a value closer to 0 allows for more lenient matches. Default is 0.5.</p>\n</ParamField>\n\n<ParamField path=\"Filter Collection\" type=\"list\" required={false}>\n    <p>Filters to apply to the collections metadata. This allows for precise and targeted data retrieval based on specific criteria.</p>\n</ParamField>\n\n<ParamField path=\"Query\" type=\"string\" required={true}>\n    <p>The query to search for in the collection. Use Jinja templating to dynamically construct queries and filters.</p>\n</ParamField>\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n\n## Outputs\nThe block outputs a list of results from the collection query, including similarity scores and metadata. This structured output allows for further processing and analysis within your workflows.\n\n## Usage Context\nUse this block to query collections and apply filters based on metadata within your Scout workflows. It is particularly useful for scenarios requiring dynamic data retrieval and processing.\n\n## Best Practices\n\n- **Ensure the collection ID is correct and exists in the system.**\n- **Use Jinja templating to dynamically construct queries and filters.**\n- **Set appropriate limits and similarity thresholds to optimize performance.**\n"
      },
      "pages/docs/workflows/blocks/delay.mdx": {
        "markdown": "---\ntitle: Delay Block\nsubtitle: Introduce delays in Scout workflows for timing control\ndescription: >-\n  The Delay block allows users to introduce a pause or delay within a Scout\n  workflow. This is useful for timing control, ensuring that certain steps do\n  not proceed until a specified duration has passed.\n---\n\nThe Delay block is used to introduce a pause or delay within a Scout workflow. This functionality is essential for timing control, ensuring that certain steps do not proceed until a specified duration has passed.\n\n### Configuration (Required)\n<ParamField path=\"Delay (ms)\" type=\"integer\" required={false}>\n    <p>The delay in milliseconds to pause the workflow. This parameter allows you to specify the duration of the delay, with a default value of 1000 milliseconds (1 second).</p>\n</ParamField>\n\n## Outputs\nThe Delay block returns the actual delay applied in milliseconds and elapsed time details. This output helps in verifying the delay duration and understanding the timing within the workflow.\n\n## Usage Context\nUse this block when you need to introduce a delay in your workflow, such as waiting for an external process to complete. It is particularly useful in scenarios where timing control is critical to the workflow's success.\n\n## Best Practices\n\n- **Set appropriate delay durations:** Avoid unnecessary workflow slowdowns by setting delays that are just long enough to achieve the desired timing control.\n- **Use delays judiciously:** Balance the need for timing control with workflow efficiency to ensure optimal performance.\n"
      },
      "pages/docs/workflows/blocks/inspect_graph.mdx": {
        "markdown": "---\ntitle: Inspect Graph Block\nsubtitle: Debug and inspect the graph structure within Scout workflows\ndescription: >-\n  The Inspect Graph block is designed for debugging purposes, allowing users to\n  inspect the structure of the graph in a Scout workflow. This can be useful for\n  understanding the flow of data and the connections between different\n  components within the workflow.\n---\n\nThe Inspect Graph block is a utility block within Scout workflows designed to help users debug and inspect the structure of the graph. This block is particularly useful for understanding the flow of data and the connections between different components within the workflow.\n\n### Outputs\nThe Inspect Graph block provides the following outputs:\n\n- **Serialized representation of the graph structure:** This output gives a detailed view of the graph's structure, allowing for thorough inspection and debugging.\n- **Output Details:**\n  - **Response Format:** The format of the response is JSON.\n  - **Elapsed Time (ms):** The time taken to process the request in milliseconds.\n  - **Cost:** The cost associated with processing the request.\n\n## Usage Context\nUse this block when you need to debug and inspect the graph structure of your workflow. It is particularly useful for verifying the connections and data flow within your workflow.\n\n## Best Practices\n\n- **Verify Connections:** Utilize this block to verify the connections and data flow within your workflow.\n- **Correct Serialization:** Ensure that the graph structure is correctly serialized for accurate inspection.\n"
      },
      "pages/docs/workflows/blocks/postgres.mdx": {
        "markdown": "---\ntitle: Postgres Block\nsubtitle: Execute SQL queries on a PostgreSQL database\ndescription: >-\n  The Postgres block allows users to run SQL queries against a PostgreSQL\n  database. It facilitates database interactions within Scout workflows,\n  enabling data retrieval and manipulation directly from the workflow.\n---\n\nThe Postgres block enables querying of a PostgreSQL database within Scout workflows. It allows you to perform SQL operations directly from your workflow, facilitating seamless data retrieval and manipulation.\n\n### Configuration (Required)\n<ParamField path=\"Connection String\" type=\"string\" required={true}>\n    <p>The connection string is essential for establishing a connection to your Postgres database. It contains all necessary connection details, such as the host, port, database name, user, and password. Ensure this string is formatted correctly to avoid connection issues.</p>\n</ParamField>\n<ParamField path=\"SQL Query\" type=\"code\" required={true}>\n    <p>The SQL query defines the specific command or set of commands you wish to execute against your Postgres database. This could range from simple SELECT statements to more complex queries involving joins and aggregations. Make sure your SQL syntax is correct to ensure successful execution.</p>\n</ParamField>\n\n<Note>See [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for details on using dynamic variables in this block.</Note>\n\n## Outputs\nThe output is a list of dictionaries representing the query result rows, with each dictionary mapping column names to their respective values.\n\n## Usage Context\nUse this block to perform SQL operations on a PostgreSQL database within your workflow.\n\n## Best Practices\n\n- **Ensure the connection string is valid and has the necessary permissions.**\n- **Use parameterized queries to prevent SQL injection.**\n- **Handle potential exceptions when executing queries.**\n"
      },
      "pages/docs/workflows/running-workflows.mdx": {
        "markdown": "---\ntitle: Running Workflows in Scout\nsubtitle: Methods for executing workflows using various Scout interfaces\ndescription: >-\n  Discover the diverse methods available for executing workflows in Scout,\n  tailored to different user preferences and integration needs. Enhance your\n  workflow execution with options like the Scout UI console, embeddable copilot,\n  Slackbots, SDKs, and the Scout API.\n---\n\nRunning workflows in Scout can be achieved through various interfaces and tools, each designed to cater to different user preferences and integration needs. Here is an overview of the different methods available for executing a workflow:\n\n### Console in the Scout UI\n\nThe simplest way to run a workflow is through the console within the Scout UI. You can initiate and monitor workflow runs directly from the console, which allows for immediate feedback and is ideal for testing and debugging workflows. For detailed instructions on using the console, refer to the [Console](/docs/workflows/console) section.\n\n### Scout’s Embeddable Copilot\n\nScout's embeddable copilot offers a versatile option for running workflows by embedding an agent directly into your websites and apps. Scout's copilot is designed to provide a seamless and interactive experience, with easy installation and customization to match your desired styling. Visit the [Scout Copilot](/docs/integration/scout-copilot) page for more information on installation and customization options.\n\n### Slackbots\n\nYou can easily [add a Scout Slackbot](https://scoutos.com/slack/install) to your Slack channel. This method is particularly useful for organizations that rely heavily on Slack for communication with customers. Details on setting up and using Slackbots with workflows can be found in the [Slack Bot](/docs/integration/slack-bot) doc.\n\n### Scout SDKs\n\nFor developers looking to integrate workflows into custom applications or services, Scout SDKs provide a programmatic interface for executing and managing workflows. SDKs are available in various programming languages, enabling seamless integration with your existing codebase. For comprehensive guidelines on using Scout SDKs, refer to the [SDK Documentation](/api-sdk).\n\n### Scout API\n\nThe Scout API offers a robust and flexible method for running workflows, enabling you to trigger and control workflow executions programmatically. This approach is ideal for automated systems or where integration with other services is required. Explore detailed API usage and examples in the [API Reference](/api-sdk).\n"
      },
      "pages/docs/workflows/console.mdx": {
        "markdown": "---\ntitle: Workflow Console in Scout\nsubtitle: Real-time execution and monitoring of Scout workflows\ndescription: >-\n  The workflow console offers a user-friendly interface for executing and\n  monitoring workflows, providing real-time feedback and detailed logs to\n  enhance accuracy and efficiency.\n---\n\nThe workflow console provides a dynamic and interactive environment for executing and monitoring your workflow processes in real-time. The console offers a user-friendly interface where you can input data, initiate workflow runs, and observe the execution flow step-by-step, making it an invaluable tool for testing, debugging, and refining your workflows.\n\nOn the upper left-hand side of the workflow canvas, click the play icon to open the console.\n\n<img src=\"file:5655c20d-fbaa-4588-88de-0ef1710227b5\" />\n\nThe console displays a form-like interface where you can enter the inputs defined in your workflow's input block. This allows you to test different scenarios by providing various data inputs, ensuring that your workflow is robust and versatile.\n\nClick \"Run\" below the input to execute the workflow. As the workflow runs, each block is executed in sequence, and the console provides detailed logs and status updates for every step. This real-time feedback helps you identify and troubleshoot any issues within your workflow, enhancing the accuracy and efficiency of your processes.\n\n<img src=\"file:132d2ce1-e301-4660-a76e-eee9385e0c0c\" />\n\nThe console not only shows the outputs generated by each block but also provides execution statistics and logs. This includes information about execution time, data transformations, and any errors encountered, enabling you to optimize the workflow for better performance.\n"
      },
      "pages/docs/workflows/history.mdx": {
        "markdown": "---\ntitle: Workflow History\nsubtitle: Tracking and managing workflow changes in Scout\ndescription: >-\n  Scout offers a detailed audit trail for your workflows, ensuring transparency\n  and ease in tracking changes over time. This feature logs edits, detailing who\n  made the changes and when, enhancing agility in workflow development.\n---\n\nScout provides a comprehensive audit trail, allowing you to track the evolution of your workflow over time. It logs edits, detailing who made changes and when, providing transparency and agility in your workflow development process.\n\n### Accessing the workflow history\n\nTo access the history of a workflow, navigate to the upper left-hand side of the workflow canvas and click on the time icon. This action opens the history panel, which displays a chronological list of all modifications made to the workflow.\n\n<img src=\"file:05bf561e-5ec4-485e-8622-5e4c54f4f1ee\" />\n\n#### Version restoration\nYou can restore previous versions of your workflow. Click the three dots, then click restore to reinstate it as the active workflow. This capability is particularly useful for reverting changes that may have introduced errors or for exploring different iterations of a workflow design.\n\n#### Draft management\nNew drafts are autosaved, allowing you to experiment with different configurations without affecting the live version of the workflow.\n\n#### Audit logs\nThe history section functions as an audit log, providing a detailed account of each change, including additions, deletions, and modifications to workflow components. Each entry is timestamped and tagged with the user who performed the action, offering a clear view of the workflow's development timeline.\n"
      },
      "pages/docs/workflows/logs.mdx": {
        "markdown": "---\ntitle: Logs\nsubtitle: Detailed tracking and analysis of workflow executions in Scout\ndescription: >-\n  Explore the comprehensive logs section to monitor and troubleshoot your Scout\n  workflows, enhancing efficiency and reliability through detailed execution\n  records.\n---\n\n<Note>Looking for [Audit Logs](/docs/workflows/history#audit-logs) showing workflow edit history?</Note>\n\nThe logs section in workflows provides a detailed record of workflow runs, offering insights into the process flow and helping to troubleshoot issues effectively.\n\nOn the upper left-hand side of the workflow canvas, click the logs icon to open it: \n\n<img src=\"file:d93b2509-2a77-47ab-9c8c-c50622c8558a\" />\n\n#### Logs interface\n\nThe logs interface is equipped with filtering options and a log table that displays previous workflow runs:\n\n- **Filters**: Customize your view to focus on specific logs by setting criteria such as:\n  - **Date range**: Specify the period for which you want to view the logs, allowing you to track performance over time.\n  - **Status**: Filter logs based on their completion state, including:\n    - **All**: Display every log entry.\n    - **Failed**: Focus on incomplete or error-prone executions.\n    - **Completed**: Review successful workflow runs.\n\n- **Log table**: This tabular display provides a structured view of each workflow execution, with columns including:\n  - **Timestamp**: The exact date and time when the workflow was executed.\n  - **Name**: The identifier for the workflow, allowing quick reference to specific processes.\n  - **Status**: Indicates whether the workflow run completed successfully, failed, or is still in progress.\n  - **Cost**: Provides an estimate of the computational resources used for the execution.\n  - **Duration**: The total time taken for the workflow to run, useful for performance analysis.\n  - **Message**: Any additional notes or error messages that provide context about the run's outcome.\n\nEach log entry captures the input, output, and status of every step within the workflow, offering full visibility into the process. This detailed logging capability ensures that you can effectively monitor and refine your workflow operations, improving efficiency and reliability.\n"
      },
      "pages/docs/settings/environment-variables.mdx": {
        "markdown": "---\ntitle: Environment Variables in Scout\nsubtitle: Securely manage configuration with environment variables\ndescription: >-\n  Learn how to effectively use environment variables in Scout to securely manage\n  sensitive information and streamline configurations across multiple workflows.\nimage:\n  type: url\n  value: 'https://www.scoutos.com/images/social-previews/index.jpg'\n---\nEnvironment variables are a way to store configuration information that can be accessed by your workflow's blocks. They are useful for storing sensitive information, such as API keys, that you don't want to hardcode into your app, or for storing variables that you want to use across multiple apps.\n\n### Setting Environment Variables\n\nTo set environment variables in the Scout dashboard, navigate to the environment variables tab on the settings page.\n\n### Accessing Environment Variables\n\nAfter you have added an environment variable to your account, you can access it in your workflow by using the `env` object in your Jinja templates.\n\nFor example, if you have an environment variable called *API_KEY*, you can access it in your workflow like this:\n\n```\n{{ env.API_KEY }}\n```\n\n<Note>\n<p>Refer to [Workflow Logic & State > State Management](/docs/workflows/workflow-logic-state#state-management) for guidance on using these dynamic variables in workflows.</p>\n</Note>\n\n### Using Your Own AI API Keys\n\nYou can also set your API keys for external AI API providers, like OpenAI, Fireworks, etc. Using your own OpenAI API key, for example, will charge usage to your OpenAI account.\n\n<img src=\"file:83bd1591-78fd-47b9-af72-8e259439cbee\" />\n"
      },
      "pages/docs/collections/overview.mdx": {
        "markdown": "---\ntitle: Collections in Scout\nsubtitle: Managing and using collections for document storage and retrieval\ndescription: >-\n  Explore how Scout's Collections feature allows you to group, manage, and\n  utilize documents efficiently for enhanced document storage and retrieval.\n  Learn to create, manage, and integrate Collections within your workflows for\n  optimal performance.\nimage:\n  type: url\n  value: 'https://www.scoutos.com/images/social-previews/index.jpg'\n---\n\n<Note><b>Just getting started?</b> Check out our [Build a RAG app in under 5 minutes](/docs/quick-start) quick start guide!</Note>\n\nCollections are groups of [documents](/docs/collections/documents) that can be used and created within Scout. Each document can contain metadata and text content. The text content is chunked and used for vector search. The metadata can be used to filter and sort the documents.\n\n<img src=\"file:9fdfd8fb-b72c-4c12-afb7-059122652105\" />\n\n### Create a New Collection\n\nClick \"Collections\" in the navigation menu, then click the \"+ New Collection\" icon at the top of the UI to create a new collection. Provide a name (required), a description (optional), and an icon image (optional), then click \"Create\".\n\nNote that it may take around 30 seconds for Scout to provision the underlying vector database; status will be displayed in the UI.\n\n### Using Collections in Workflows\n\n[Collection blocks](/docs/workflows/blocks/collection) and [Save blocks](/docs/workflows/blocks/save) can be used within workflows to query and save to collections. Read [Workflows > Collection Block](/docs/workflows/blocks/collection) and [Workflows > Save Block](/docs/workflows/blocks/save) for more information on how to use them within workflows.\n"
      },
      "pages/docs/collections/documents.mdx": {
        "markdown": "---\ntitle: Managing Documents in Scout\nsubtitle: Comprehensive guide to document creation and management\ndescription: >-\n  Explore how to efficiently manage documents within Scout Collections,\n  leveraging metadata for advanced search functionalities, and utilizing\n  semantic search for enhanced document retrieval.\nimage:\n  type: url\n  value: 'https://www.scoutos.com/images/social-previews/index.jpg'\n---\n\nDocuments are stored within [collections](/docs/collections) and contain both metadata and text. These units of content power features like vector search, filtering, and semantic search. Documents can be [created manually or uploaded in bulk](/docs/collections/uploading-creating-documents), and metadata can be customized for sorting and filtering. Scout's dashboard or API enables document management for advanced use cases such as content clustering and search optimization.\n\n## How to Use Documents\n\n#### Creating Documents\nRefer to [Uploading & Creating Documents](/docs/collections/uploading-creating-documents) for detailed instructions on how to create and upload documents.\n\n#### Document Attributes\n\n<ParamField path=\"id\" type=\"string\" required={true}>\n  <p>A unique identifier for the document. If a document with this ID already exists, it will be overwritten.</p>\n</ParamField>\n\n<ParamField path=\"text\" type=\"string\" required={true}>\n  <p>The main content of the document, which will be indexed for semantic search.</p>\n</ParamField>\n\nYou can add metadata (custom fields) to a document. These fields can be of different data types like text, number, date, etc. For example, here are some documents with added metadata fields:\n\n```json\n{\n  \"documents\": [\n    {\n      \"id\": \"document_id\",\n      \"text\": \"document text\",\n      \"title\": \"document title\",\n      \"url\": \"https://example.com\"\n    },\n    {\n      \"id\": \"document_id_2\",\n      \"text\": \"document text 2\",\n      \"title\": \"document title 2\",\n      \"tags\": [\"tag_1\", \"tag_2\"]\n    }\n  ]\n}\n```\n\n#### Editing Documents\nThe dashboard provides a list view of all documents in a collection; you can edit existing documents to update the text content or metadata. If you are manually entering text, you can use Markdown to format the document content.\n\n<img src=\"file:72353dcd-1fa2-4428-a62f-a9d8b65a75cd\"/>\n"
      },
      "pages/docs/collections/uploading-creating-documents/overview.mdx": {
        "markdown": "---\ntitle: Uploading & Creating Documents\nsubtitle: Efficient ways to manage your scout collections\ndescription: >-\n  Discover multiple methods to upload and create documents in Scout, tailored to\n  suit various needs. From scraping websites to uploading files and creating\n  documents directly, manage your content seamlessly.\nimage:\n  type: url\n  value: 'https://www.scoutos.com/images/social-previews/index.jpg'\n---\n\nScout offers a few different ways to easily upload documents into a collection. Choose the option that is right for your use case below:\n\n<CardGroup cols={3}>\n  <Card title=\"Scraping a Website\" icon=\"circle-1\" href=\"/docs/collections/uploading-creating-documents/scraping-a-website\">\n    Enter a website or sitemap and scrape a page, or multiple pages. This method is ideal for capturing dynamic content across multiple web pages efficiently.\n  </Card>\n  <Card title=\"Uploading Files\" icon=\"circle-2\" href=\"/docs/collections/uploading-creating-documents/uploading-files\">\n    Upload a file (PDF, CSV, etc.) directly to a Scout collection. This option is perfect for managing static documents and datasets.\n  </Card>\n  <Card title=\"Creating Documents Directly in Scout\" icon=\"circle-3\" href=\"/docs/collections/uploading-creating-documents/creating-documents-directly-in-scout\">\n    Create and edit a blank document directly in the Scout dashboard. This offers a hands-on approach to document creation and customization.\n  </Card>\n</CardGroup>\n"
      },
      "pages/docs/collections/uploading-creating-documents/web-scraping.mdx": {
        "markdown": "---\ntitle: Scraping a Website\nsubtitle: Comprehensive guide to web scraping options\ndescription: >-\n  Explore various web scraping methods including single page, multiple pages via\n  sitemaps, and full site crawls using Scout's advanced crawler technology.\n  Customize and control your scraping process to gather the most relevant data\n  efficiently.\nimage:\n  type: url\n  value: 'https://www.scoutos.com/images/social-previews/index.jpg'\n---\n\nThere are three different web scraping options: you can enter a URL for scraping a single web page, multiple pages via a sitemap, or an entire site (all URLs) using our crawler.\n\n<img src=\"file:4bd272b8-3d75-4055-8348-5fefa0573b50\" />\n\n## Types of Web Scrapes\n\n### Single Web Page\nEnter the URL of the single web page you wish to scrape. This will target and extract content from the specific page.\n\n### Website Crawl (Multiple Pages)\nInitiate a full crawl of a website, scraping multiple linked pages. This option scrapes content from all available pages across the domain.\n\n### Sitemap\nProvide a sitemap URL. The sitemap will be used to locate and scrape specific pages from the website, as indicated by the sitemap structure.\n\n## Customizing Web Scrapes\nThere are several inputs and settings to give you full control and customization over the scraping process:\n\n<img src=\"file:5ac9c833-5300-47bf-855e-febdd823bb5b\" />\n\n<ParamField path=\"URL\" type=\"string\" required={true}>\n  <p>The full URL of the page, domain, or sitemap you want to scrape.</p>\n</ParamField>\n\n<ParamField path=\"Scraper\" type=\"select\" required={true}>\n  <p>Select the scraper technology. Available options are:</p>\n  <ul>\n    <li>*HTTP* - Faster, but may not mix well with heavily client-side rendered sites.</li>\n    <li>*Playwright* - Heavier and slower, but renders dynamic content, which works well with heavily client-side rendered sites.</li>\n  </ul>\n</ParamField>\n\n<ParamField path=\"Text Extractor\" type=\"select\" required={true}>\n  <p>Defines how text is extracted from the page. Options include:</p>\n  <ul>\n    <li>*Custom* - Your own custom scraping logic.</li>\n    <li>*Readability* - Scout's smart scraping logic to include relevant components.</li>\n    <li>*[Trafilatura](https://trafilatura.readthedocs.io/en/latest/)* - A Python package and command-line tool used to gather text on the web.</li>\n  </ul>\n</ParamField>\n\n<ParamField path=\"Include Selectors\" type=\"string\" required={false}>\n  <p>CSS selectors for the HTML elements you want to include in the scraping. For example, targeting specific tags like `body`, `h1`, `p`.</p>\n</ParamField>\n\n<ParamField path=\"Exclude Selectors\" type=\"string\" required={false}>\n  <p>CSS selectors for the HTML elements you want to exclude from the scraping process. For example, elements like `.navbar`, `#header`, `footer`.</p>\n</ParamField>\n\n<ParamField path=\"Remove Common Elements\" type=\"boolean\" required={false}>\n  <p>Select this option if you want to automatically remove common elements such as headers and footers that often appear on multiple pages.</p>\n</ParamField>\n\n### Advanced Options\n\n<img src=\"file:50290e6b-3685-40d7-901a-8ab9c36a98df\" />\n\n<ParamField path=\"Exclude Pages with a lastmod Date Prior to\" type=\"date\" required={false}>\n  <p>Exclude any pages with a `lastmod` date older than the specified date. This helps to avoid scraping outdated content.</p>\n</ParamField>\n\n<ParamField path=\"Max Depth\" type=\"int\" required={false}>\n  <p>Sets the maximum depth for the crawl. This limits how deep the scraper will follow links from the original page.</p>\n</ParamField>\n\n<ParamField path=\"Strip\" type=\"string\" required={false}>\n  <p>Element selectors that you want stripped from the document.</p>\n</ParamField>\n\n<ParamField path=\"Max Page Count\" type=\"int\" required={false}>\n  <p>Defines the maximum number of pages to scrape. Use this to prevent overly large scrapes.</p>\n</ParamField>\n\n<ParamField path=\"Allow\" type=\"string\" required={false}>\n  <p>A list of allowed paths or patterns that the scraper will include in the crawl.</p>\n</ParamField>\n\n<ParamField path=\"Allowed Domains\" type=\"string\" required={false}>\n  <p>Specify which domains are allowed in the crawl. Links to other domains will be excluded unless specified here.</p>\n</ParamField>\n\n<ParamField path=\"Deny\" type=\"string\" required={false}>\n  <p>A list of paths or patterns that the scraper will exclude from the crawl.</p>\n</ParamField>\n\n## Monitoring Web Scrapes\nYou can monitor the progress of your web scrapes in real-time from the dashboard. Once you click the \"Run\" button to start a web scrape, you'll land on a page showing you the progress and status of the process:\n\n<img src=\"file:41e8fa83-f155-4c80-9c90-de81d1d4d9fa\" />\n\n## Results\nOnce scraping is complete, the content will be stored as documents in a collection, with each web page being a separate document.\n\n<img src=\"file:9fed29c5-5f4b-4e41-bf31-ce2f8adacdcd\" />\n"
      },
      "pages/docs/collections/uploading-creating-documents/uploading-files.mdx": {
        "markdown": "---\ntitle: Uploading Files\nsubtitle: Effortless file management in scout\ndescription: >-\n  Learn how to easily upload and manage files within Scout, ensuring seamless\n  document creation and integration with your apps.\nimage:\n  type: url\n  value: 'https://www.scoutos.com/images/social-previews/index.jpg'\n---\n\nYou can drag and drop files directly into Scout, simplifying the process of document management. When creating a new document, choose the file upload option to streamline your workflow and enhance data accessibility. This feature ensures that your documents are efficiently chunked and embedded for optimal performance within your applications.\n\n<img src=\"file:ad7ab70b-39b1-49ad-88c9-90eee7201786\" />\n"
      },
      "pages/docs/collections/uploading-creating-documents/from-scratch.mdx": {
        "markdown": "---\ntitle: Creating Documents Directly in Scout\nsubtitle: Manual document creation and metadata management\ndescription: >-\n  Learn how to manually create and manage documents within Scout, utilizing\n  Markdown for content styling and editing metadata directly from the Scout\n  dashboard.\nimage:\n  type: url\n  value: 'https://www.scoutos.com/images/social-previews/index.jpg'\n---\n\nDocuments can be added manually to a collection within Scout. This process allows for precise control over the document's content and metadata, ensuring that each document is customized to meet specific requirements.\n\n<img src=\"file:1392602e-83dd-4d1c-ba22-f747a5410a01\" />\n\nMarkdown can be used to style the content, providing a flexible and user-friendly way to format text. Additionally, metadata can be edited directly from the Scout dashboard, allowing for efficient document management. This feature is essential for maintaining organized and searchable collections, enhancing the discoverability and utility of your documents.\n"
      },
      "pages/docs/settings/api-keys.mdx": {
        "markdown": "---\ntitle: API Keys for Secure Integration\nsubtitle: Understanding publishable and secret keys in Scout\ndescription: >-\n  Learn how to manage and use API keys within Scout for secure and effective\n  application integration. This section covers both publishable and secret keys,\n  detailing their specific uses and security measures.\nimage:\n  type: url\n  value: 'https://www.scoutos.com/images/social-previews/index.jpg'\n---\nThe API Keys section of the settings contain the API keys you will use to interact with Scout.\n\n<img src=\"file:982a0526-38b2-46c8-bb31-5f94417088b3\" />\n\n### Publishable Key\nThis key should be used in your frontend code, can be safely shared, and does not need to be kept secret.\n\n### Secret Key\nThis secret key is used in your server-side code and should be kept secret.\n"
      },
      "pages/docs/integrations/slack-bot.mdx": {
        "markdown": "---\ntitle: Adding Scout Slackbot to Your Slack Channel\nsubtitle: Step-by-step guide for seamless integration\ndescription: >-\n  Learn how to effortlessly integrate Scout Slackbot into your Slack workspace\n  to enhance communication and streamline operations. Follow this guide to\n  authorize, invite, and configure the bot in various modes to suit your needs.\nimage:\n  type: url\n  value: 'https://www.scoutos.com/images/social-previews/index.jpg'\n---\n\nYou can easily add our Scout Slackbot to your Slack channel by following these steps:\n\n1. **[Click Here](https://scoutos.com/slack/install)** to add the Slackbot to your Slack channel. You will be redirected to Slack to authorize the installation.\n2. Now that the bot is in your workspace, you can invite it to any channel by typing `/invite @scout` in the channel you want to add it to.\n3. After adding the bot to your workspace, you will need to [email us](mailto:hi@scoutos.com) your Slack Channel ID so that we can enable the bot for your workspace. You can find your Channel ID by selecting the Channel Name within Slack. Scroll to the bottom Channel detail panel to find and copy the Channel ID.\n4. You will also need to let us know which mode you would like the bot to be in. We currently have two modes: auto-reply and mention mode. In auto-reply mode, the bot will automatically reply to all messages in the channel that it is added to. In mention mode, it will only reply when mentioned. We can also enable custom modes for you if you would like, just let us know.\n"
      },
      "pages/docs/integrations/scout-copilot.mdx": {
        "markdown": "---\ntitle: Scout Copilot\nsubtitle: A step-by-step guide to creating and launching Scout Copilot on your website\ndescription: >-\n  Learn how to seamlessly integrate the Scout Copilot module into your website,\n  customize its appearance, and enhance user interaction with advanced\n  configuration options.\nimage:\n  type: url\n  value: 'https://www.scoutos.com/images/social-previews/index.jpg'\n---\n\n## Using Copilot Blocks in a Workflow\n\nEach Scout Copilot is powered by a [workflow](/docs/workflows) which has special [blocks](/docs/workflows/blocks) that are specifically designed to interact with the Copilot client. Generally, this is the minimum basic workflow template you can start with: \n\n<img src=\"file:cf8c66f0-43b6-4d52-9b9e-11d58cc1978f\" />\n\n<Success><b>Just getting started with Scout workflows?</b> Check out [Workflows > Logic & State](/docs/workflows/workflow-logic-state) for a primer.</Success>\n\nWe will continue to invest and expand into these blocks, and other programatic ways to interact with the Copilot, however today these are the key blocks interactions to understand:\n\n#### Input Block\nThe Copilot sends the user's chat message to the `inputs.user_message` input by default.\n\n#### Copilot Thinking Block\nThis sends a \"pending state\" message to the Copilot client, giving the user context on the action being taken during that step of execution in the workflow that is generating the Scout Copilot response.\n\n#### Copilot Message Block\nThis is similar to an LLM block. \nThe connection to the Scout Copilot in the client is streaming, so you can send many messages in one workflow run using subsequent copilot message blocks.\n\n<Note>\nIf you are using the list of links block mentioned below, consider adding the following to your `system` prompt: \n```markdown\nIn your response, **add inline citations** using numbered brackets like `[1]`, `[2]`, etc., placed **immediately after the relevant sentence or phrase**. Each number should correspond to a reference that supports or provides more detail about the information stated. The **citations should appear directly after the referenced content**, ensuring clarity for the reader.\n\nUse a logical, sequential order for the numbering:\n- Start with `[1]` for the first reference, `[2]` for the second, and so on.\n- **Include URLs directly as markdown links** within the inline citations, like this: `[1](https://example.com/relevant-source)`.\n\n**Example:**  \n\"Edge AI enables real-time data processing at the source of data generation, reducing latency and improving performance[1](https://example.com/edge-ai-overview). It is particularly valuable in IoT environments where decisions need to be made instantly, such as in autonomous vehicles[2](https://example.com/iot-autonomous-vehicles).\"\n\n### Guidelines:\n1. **Align each citation correctly** with the relevant content. Place the citation immediately after the sentence or phrase it references.\n2. **Maintain accuracy**: Only add citations where appropriate. If no reference is required, skip the citation—do not fabricate information or sources.\n3. **Follow the numbering strictly**: Use consecutive numbers in the order the references appear within the text.\n4. **Use markdown syntax for URLs**: Ensure the citation appears in this format: `[1](https://example.com/relevant-source)`.\n\nBy following these instructions, your output will include well-placed, readable citations that can be easily parsed and tracked by our system.\n```\n</Note>\n\n#### Query Collection Block, Extract Links Block and List of Links Block\nThe [query collection block](/docs/workflows/blocks/collection) can be used in a normal fashion, however, you can pair it with the extract links and list of links blocks to include beautified citations at the end of the copilot message block output. \n\nTo use these together, you can pass your `COPILOT_MESSAGE_BLOCK_ID.output` directly to the extract links block, which will extract and beautify any links contained in the collection query response.\n\nThen, you pass the `EXTRACT_LINK_BLOCK_ID.output` to the list of links block, and it will append the formatted list of sources to the Copilot in the client.\n\n## Creating a Copilot\n\nYou can create a Copilot from the integrations tab by clicking \"+ New Copilot\"\n\nOnce you click into a created Copilot in the Scout dashboard, you can select the workflow that powers the Copilot and customize images, colors, sizes and text content of the Copilot.\n\n<img src=\"file:6e987eb7-8406-4df2-8930-343a3f9af004\" />\n\n<Error>\n<b>Getting a 401?</b> Make sure you set the `Settings > Allowed Origins` appropriately in the Copilot settings within the Scout dashboard. For example, if you're testing from at `localhost:8000` you will want to add `http://localhost:8000` to your allowed origins. Similarly, do this for any website domains where you will be installing the Copilot.\n</Error>\n\n## Adding the Copilot Widget to Your Website\n\nTo incorporate the Copilot module into your application, insert the following code:\n\n\n```html\n<scout-copilot copilot_id=\"YOUR_COPILOT_ID_HERE\"></scout-copilot>\n<script type=\"module\" src=\"https://copilot.scoutos.com/copilot.js\"></script>\n```\n\n\nAfter these steps, the Copilot component will be visible on your website.\n\nBelow, you'll find descriptions of different attributes that can be applied to the Copilot component. These attributes can be added directly to the `scout-copilot` tag.\n\nFor instance, to conceal the Copilot, you can set the `show` attribute to `false`:\n\n```js\nconst chat = document.querySelector('scout-copilot');\nchat.setAttribute('show', false);\n```\n\n### Required Attributes\n\n<ParamField path=\"copilot_id\" type=\"string\" required={true} environment=\"production\">\n   <p>The `copilot_id` is the unique identifier of the Copilot, available on the Copilot's detail page. This ID is required for proper functionality.</p>\n</ParamField>\n\n### Optional Attributes\n\n<ParamField path=\"environment\" type=\"string\" required={false}>\n   <p>Specifies the Copilot's environment, which defaults to `\"development\"`. Set this to `\"production\"` when deploying your application.</p>\n</ParamField>\n\n<ParamField path=\"user_id\" type=\"string\" required={false}>\n   <p>Identifies the user interacting with the Copilot. If not set, a random ID will be generated and stored in local storage.</p>\n</ParamField>\n\n<ParamField path=\"show\" type=\"boolean\" required={false} default={\"true\"}>\n   <p>Determines whether the component is visible. The default value is `true`.</p>\n</ParamField>\n\n<ParamField path=\"open\" type=\"boolean\" required={false} default={false}>\n   <p>Indicates whether the Copilot is open. It defaults to `false`.</p>\n</ParamField>\n\n<ParamField path=\"show_minimize\" type=\"boolean\" required={false} default={\"true\"}>\n   <p>Specifies whether the minimize button is visible, with a default value of `true`.</p>\n</ParamField>\n\n<ParamField path=\"height\" type=\"string\" required={false}>\n   <p>The height of the Copilot component. The default value is `\"40vh\"`.</p>\n</ParamField>\n\n<ParamField path=\"width\" type=\"string\" required={false}>\n   <p>The width of the Copilot component. The default value is `\"25vw\"`.</p>\n</ParamField>\n\n<ParamField path=\"message_bubble_max_width\" type=\"string\" required={false}>\n   <p>Specifies the maximum width of the message bubble. Defaults to `\"95%\"`.</p>\n</ParamField>\n\n<ParamField path=\"fab_height\" type=\"string\" required={false}>\n   <p>The height of the floating action button (FAB). Defaults to `\"40px\"`.</p>\n</ParamField>\n\n<ParamField path=\"fab_width\" type=\"string\" required={false}>\n   <p>The width of the FAB. Defaults to `\"40px\"`.</p>\n</ParamField>\n\n<ParamField path=\"embedded\" type=\"boolean\" required={false} default={\"false\"}>\n   <p>Determines whether the Copilot is embedded directly into the application interface, rather than appearing as a floating component. It defaults to `false`. See the <a href=\"#embedding-the-copilot\">Embedding the Copilot</a> section for more information.</p>\n</ParamField>\n\n\n## Customizing the FAB\n\nThe Copilot's floating action button (FAB) can be customized by passing in a child html element with the `slot` attribute set to `fab`. For example:\n\n```html\n<scout-copilot copilot_id=\"ID\">\n    <div\n    slot=\"fab\"\n    style=\"\n        background-color: white;\n        box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12),\n        0px 1px 2px rgba(0, 0, 0, 0.24);\n    \"\n    >\n    <img\n        style=\"width: 40px; height: 40px; margin-bottom: 5px\"\n        src=\"IMG_URL\"\n    />\n    <span style=\"color: black; font-weight: 500\">Ask AI</span>\n    </div>\n</scout-copilot>\n```\n\nIn the example above we are creating a simple FAB with a white background, a shadow, and an image and text inside. You can customize the FAB to your liking by changing the styles and content.\n\n## Embedding the Copilot\n\nBy default, the Copilot will be displayed as a floating action button (FAB) in the bottom right corner of the screen. To embed the Copilot within your website, set the `embedded` attribute to `true`. This will allow you to position the Copilot within your website's layout wherever you see fit.\n\n**Note**: When embedding the Copilot, the `open`, `show`, and `show_minimize` attributes will be overridden.\n\n<img src=\"file:26f6dfbb-06b9-48de-b4ba-5a7abb122838\" />\n\n```html\n<body>\n    <div class=\"container\">\n        <h1>Embedded Copilot Example</h1>\n\n        <scout-copilot copilot_id=\"copilot_id\" width=\"700px\" height=\"500px\"></scout-copilot>\n\n        <h2>Some Content</h2>\n        <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod\n            tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n            veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n            commodo consequat.\n        </p>\n    </div>\n\n    <script>\n        const chat = document.querySelector('scout-copilot')\n        chat.embedded = true\n    </script>\n</body>\n```\n\nIn the example above, the Copilot is embedded within the `.container` div and it is given a width of 700px and a height of 500px.\n"
      },
      "pages/docs/integrations/command-component.mdx": {
        "markdown": "---\ntitle: Implementing Scout's Command Module\nsubtitle: Guide to tntegrating the command component on your website\ndescription: >-\n  Learn how to integrate Scout's Command module into your website to enhance\n  user interaction with AI-driven features. This guide covers setup,\n  customization, and configuration options including hotkeys and visual\n  elements.\nimage:\n  type: url\n  value: 'https://www.scoutos.com/images/social-previews/index.jpg'\n---\n\n<Note>\nBefore implementing this code, you'll want to build an Workflow in Scout. You can grab the Workflow's `id` on its detail page. You will also need your org's public key, which you can find on the settings page.\n</Note>\n\n## Adding the widget to your website\n\nTo add the Command module to your own application, include the following in your `<head>` tag:\n\n\n```html\n<link rel=\"stylesheet\" href=\"https://assets.scoutos.com/cmd/style.css\" />\n<script async src=\"https://assets.scoutos.com/cmd/iife.js\"></script>\n```\n\n\nThen include this empty `<div>` tag right before your closing `</body>` tag. Set the `data-app-id` value to the Workflow id.\n\n\n```html\n<div id=\"scout-cmd\" data-app-id=\"your-workflow-id\" data-public-key=\"org-public-key\"></div>\n```\n\n\n## Binding the cmd widget open function to a DOM element\n\nIf you want to trigger the cmd module to open when a DOM element is clicked, you can add the id `scout-cmd-trigger` to the element. If you would like to use the styling to put a button on the bottom right of the screen, you can use class `cmd_main-container-button`, but you can use any element/styling you want.\n\n\n```html\n<button\n    class=\"cmd_main-container-button\"\n    id=\"scout-cmd-trigger\"\n>    \n    Ask AI\n</button>\n```\n\n\n\n## Setting custom hotkey\n\nBy default, the widget will show when a user clicks cmd + k. If you would like it to trigger on another key besides k, you can set it on the `data-cmd-hotkey` attribute. In the example below, the cmd will launch when the user keys in `cmd + i`.\n\n\n```html\n<div id=\"scout-cmd\" data-app-id=\"your-workflow-id\" data-cmd-hotkey=\"i\" data-public-key=\"org-public-key\"></div>\n```\n\n\n## Disable hotkey\n\nBy default, the widget will show when a user clicks cmd + k. If you would like to disable that, you can set the `data-hotkey-disable` attribute to `'true'`.\n\n\n```html\n<div id=\"scout-cmd\" data-app-id=\"your-workflow-id\" data-hotkey-disable=\"true\" data-public-key=\"org-public-key\"></div>\n```\n\n\n\n## Adding Custom Colors to the Command Component\n\nTo customize the colors of the command component, go to the app page and open the side menu by clicking the \"i\" icon on the top right. You should see a section called \"Command Component Settings\". You can change the colors there.\n\n## Suggested Questions\n\nThe suggested questions are the questions that are shown to the user when they click on the command component. You can change the suggested questions in the app settings menu, under the \"Command Component Settings\" section.\n\n## Set Display Name\n\nThe display name used for the bot in the command component is the name of the app. You can change the name of the app in the app page.\n\n## Set Avatar\n\nThe avatar used for the bot in the command component is the avatar of the app. You can change the avatar of the app in the app page.\n"
      },
      "pages/examples/whats-your-use-case.mdx": {
        "markdown": "<CardGroup cols={3}>\n  <Card title=\"Customer Support\" icon='life-ring' \n    href='/workflow-templates/use-cases/customer-support'>\n    Improve response times, accuracy, and overall customer experience with AI-driven support.\n  </Card>\n\n  <Card title=\"Startup Toolkit\" icon='toolbox' \n    href='/workflow-templates/use-cases/startup-toolkit'>\n    Quickly build and launch AI-powered apps or startup initiatives with a fraction of the resources.\n  </Card>\n\n  <Card title=\"Sales\" icon='cash-register' \n    href='/workflow-templates/use-cases/sales'>\n    Streamline RFPs, security questionnaires, meeting follow ups and sales outreach with AI-powered workflows.\n  </Card>\n\n  <Card title=\"Marketing & Content Creation\" icon='newspaper' \n    href='/workflow-templates/use-cases/marketing-content-creation'>\n    Use AI to generate personalized, SEO-optimized content and marketing campaigns.\n  </Card>\n\n  <Card title=\"Customer Success\" icon='face-smile' \n    href='/workflow-templates/use-cases/customer-success'>\n    Use AI for follow-ups, success plan building and personalized outreach to scale customer success.\n  </Card>\n\n  <Card title=\"Legal & Compliance\" icon='gavel' \n    href='/workflow-templates/use-cases/legal-compliance'>\n    Simplify legal and compliance processes with AI-driven document generation, analysis and review.\n  </Card>\n\n  <Card title=\"Internal Operations & Team Management\" icon='people-group' \n    href='/workflow-templates/use-cases/internal-operations-team-management'>\n    Streamline onboarding, Q&A, internal policy creation, revops workflows and team management with AI.\n  </Card>\n\n  <Card title=\"Product Management\" icon='binoculars' \n    href='/workflow-templates/use-cases/product-management'>\n    Augment feedback analysis, documentation generation, and roadmap/release content creation to accelerate product development.\n  </Card>\n\n  <Card title=\"Client Reporting & Analysis\" icon='magnifying-glass-chart' \n    href='/workflow-templates/use-cases/client-reporting-analysis'>\n    Generate detailed reports, proposals, and satisfaction summaries using AI.\n  </Card>\n\n</CardGroup>\n\n"
      },
      "pages/examples/customer-support-overview.mdx": {
        "markdown": "<CardGroup cols={3}>\n  <Card title=\"Customer Support Reply Assistant\" icon='envelope'\n    href='/workflow-templates/use-cases/customer-support/customer-support-reply-assistant'>\n    If AI is confident it can answer the question, it sends a first reply to customer queries.\n  </Card>\n  <Card title=\"Customer Query Router\" icon='share'\n    href='/workflow-templates/use-cases/customer-support/customer-query-router'>\n    Automatically route customer queries to the correct team using AI.\n  </Card>\n  <Card title=\"Automated Support Bot\" icon='robot'\n    href='/workflow-templates/use-cases/customer-support/automated-support-bot'>\n    Stand alone RAG support bots that have conversations and provide instant support.\n  </Card>\n  <Card title=\"Support Ticket Classifier\" icon='ticket'\n    href='/workflow-templates/use-cases/customer-support/support-ticket-classifier'>\n    Use AI to classify and prioritize support tickets based on urgency and severity.\n  </Card>\n  <Card title=\"Internal Search Wiki\" icon='headset'\n    href='/workflow-templates/use-cases/customer-support/internal-search-wiki'>\n    Build internal semantic search and suggest RAG responses to your customer facing teams.\n  </Card>\n  <Card title=\"Customer Issue Escalation Report Builder\" icon='exclamation-triangle'\n    href='/workflow-templates/use-cases/customer-support/customer-issue-escalation-report-builder'>\n    Automatically generate detailed reports when customer issues need to be escalated.\n  </Card>\n</CardGroup>\n"
      },
      "pages/examples/customer-support-reply.mdx": {
        "markdown": "---\ntitle: >-\n  Creating a Customer Support Reply Assistant with Scout's AI Workflow\n  Automation\nsubtitle: >-\n  Develop a RAG (Retrieval-Augmented Generation) Customer Support Reply\n  Assistant Using Scout\ndescription: >-\n  Learn how to create a RAG (Retrieval-Augmented Generation) customer support\n  reply assistant using Scout's platform. This guide walks through data\n  integration, workflow setup, and leveraging AI technologies to optimize\n  customer interactions and response times.\n---\n\nIn this technical guide, we will explore how to build a RAG (Retrieval-Augmented Generation) customer support reply assistant using Scout. This AI chatbot will deliver initial responses to customer inquiries, only if it is confident it knows the answer. We'll build this AI workflow using Scout, OpenAI, and a vector database. Scout's platform simplifies AI workflow creation with tools like website scraping, document processing, and semantic search without complex technical setups. Scout provisions all the underlying infrastructure necessary to build this example, and our free tier doesn’t require a credit card!\n\n<Success>\n<b>New to Scout?</b> Watch our quick-start demo to get familiar with the platform:\n<div style=\"width: 100%; min-width: 350px; max-width: 800px;\">\n  <div style=\"position: relative; width: 100%; overflow: hidden; padding-top: 56.25%;\">\n    <p>\n      <iframe style=\"position: absolute; top: 0; left: 0; right: 0; width: 100%; height: 100%; border: none;\" src=\"https://www.youtube.com/embed/CdwUVGwqtyI?si=aXjdrq8j4ALrzuts\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"></iframe>\n    </p>\n  </div>\n</div>\n</Success>\n\n## Getting started in Scout\n\nOur first step is to upload the data that the customer support reply assistant will use as a reference for relevant documentation and correct answers. In Scout, this involves building a [collection](/docs/collections), which stores relevant [documents](/docs/collections/documents) that the AI will query to generate responses. Under the hood, Scout deploys a vector database for your collection, and manages all of the web scraping, document chunking, and embedding to get your documents into the collection.\n\n<Steps>\n  ### Login to Scout\n\n    \n          1. [Sign up for free](https://studio.scoutos.com/onboarding/step-1) or [sign in](https://studio.scoutos.com/sign-in) to Scout\n          2. Once logged in, click \"[Collections](https://studio.scoutos.com/dashboard/collections)\" in the nav\n    \n\n  ### Upload docs and files to Scout\n\n    1. Let's setup your data! In the \"Collections\" section in Scout, select \"+ New Collection\". \n          Provide a name and optional description for your collection to organize and identify it later.\n          Once your collection is provisioned, click into it.\n\n    2. Inside your collection, click the \"+\" in the top nav to upload data (documents) to Scout.\n\n       To enhance the performance of your AI-powered customer support assistant, consider drawing from multiple data sources. The most common source is web scraped online technical documentation. You may also consider using previously answered tickets or conversations from platforms like Zendesk, Intercom, or Slack to provide context-rich examples. Incorporate product manuals, and FAQs to ensure the assistant offers accurate, up-to-date information. You can also include white papers, industry reports, or case studies for more in-depth insights. Regularly updating these data sources will help maintain relevance, ensuring your assistant delivers precise and helpful responses across a wide range of inquiries.\n\n       Scout offers a few different ways to easily upload documents into a collection. Choose the option that is right for your use case below:\n\n       <CardGroup cols={3}>\n             <Card title=\"Scraping a Website\" icon=\"circle-1\" href=\"/docs/collections/uploading-creating-documents/scraping-a-website\">\n               Enter a website or sitemap and scrape a page, or multiple pages. This method is ideal for capturing dynamic content across multiple web pages efficiently.\n             </Card>\n             <Card title=\"Uploading Files\" icon=\"circle-2\" href=\"/docs/collections/uploading-creating-documents/uploading-files\">\n               Upload a file (PDF, CSV, etc.) directly to a Scout collection. This option is perfect for managing static documents and datasets.\n             </Card>\n             <Card title=\"Creating Documents Directly in Scout\" icon=\"circle-3\" href=\"/docs/collections/uploading-creating-documents/creating-documents-directly-in-scout\">\n               Create and edit a blank document directly in the Scout dashboard. This offers a hands-on approach to document creation and customization.\n             </Card>\n           </CardGroup>\n\n    3. Ensure the text data in your documents is clean and accurate to enhance AI effectiveness. \n    We suggest [inspecting a few of your documents](/docs/collections/documents#editing-documents) once they're uploaded to ensure completeness. \n    If you find your web scraped documents aren't being ingested correctly, consider [Collections > Customizing Web Scrapes](/docs/collections/uploading-creating-documents/scraping-a-website#customizing-web-scrapes) for fine grained web scraping controls.\n    4. Refer to [Scout's collection documentation](https://docs.scoutos.com/docs/collections) for detailed setup instructions.\n</Steps>\n\n## Constructing a workflow\n\nScout workflows allow users to create sophisticated sequences of actions that respond to specific inputs, making them ideal for a wide range of use cases like data processing, automated reporting, and integration with third-party APIs.\n\nFor this workflow, we're going to build a workflow that does the following:\n1. Takes user input\n2. Enriches the user input to help the AI understand the context\n3. Send the enriched query and relevant documentation to an LLM to formulate a response\n4. Send the original user input, the response, and the relevant documentation to an LLM to evaluate the validity and relevance of the response\n5. Conditionally respond if it's confident it offers a solution to the user's input question\n\nLet's get started:\n<Steps>\n### Create workflow\n\n    To begin, navigate to the workflow creation page in Scout and select \"Create New Workflow.\" Assign a meaningful name to your workflow to easily identify its purpose.\n\n### Starting with the input block\n\n    Add an [input block](/docs/workflows/blocks/input) to capture the user's query. This block will serve as the entry point for user interactions with the assistant.\n\n### Add a collection block\n\n    Configure a [collection block](/docs/workflows/blocks/collection) to query the documents stored in your collection. Use the user input as the query to retrieve relevant documents.\n\n### Add an LLM block that enriches the query\n\n    Insert an [LLM block](/docs/workflows/blocks/llm) to enhance the user query with additional context. Use the following prompt configuration:\n\n    **System Prompt:**\n    ```\n    You are a customer support assistant. \n    A use query will be passed to you in the user input prompt. \n    Use the following documentation to enhance the user's query: {{collection_block.output}}\n    ```\n\n    **User Prompt:**\n    ```\n\t  {{inputs.user_message}}\n    ```\n\n    **Assistant Prompt:**\n    ```\n    Enhance this query with relevant insights from our documentation to improve semantic search accuracy.\n    ```\n\n### Add a collection block that pulls a broader set of data using the enriched query as the query input\n\n    Configure another [collection block](/docs/workflows/blocks/collection) using the enriched query to retrieve a wider range of documents. Adjust the limit and minimum similarity settings for comprehensive results.\n\n### Add an LLM block that builds a response\n\n    Insert an [LLM block](/docs/workflows/blocks/llm) to generate a response based on the enriched query and retrieved documents. Configure the prompt to guide the LLM in crafting a suitable reply.\n\n### Send the original user input, the response, and the relevant documentation to an LLM to evaluate the validity and relevance of the response\n\n    Use an [LLM block](/docs/workflows/blocks/llm) to assess the confidence level of the generated response. Evaluate the response's accuracy and relevance based on the supporting documents.\n\n### Add a stop if block\n\n    Implement a [conditional block](/docs/workflows/blocks/conditional) to determine whether the response should be delivered automatically or flagged for human review. Use the confidence level output from the previous LLM block to make this decision.\n</Steps>\n\n## Testing, refinement, and maintenance\n\nWhen building your workflow, keep the following in mind:\n\n1. **Prompt Engineering**: Iterate on our example prompts to ensure accurate AI responses that are relevant to your business and use cases. Experiment with different structures in the LLM block to enhance response quality. Use iterative testing to refine prompts, ensuring alignment with workflow objectives.\n2. **Data Quality**: High-quality data is essential for optimal AI performance. Regularly update and clean your data collection to maintain accuracy.\n3. **Workflow Testing**: Thoroughly test your workflow to ensure it handles various inquiries accurately. Use the console to simulate different scenarios and refine the workflow based on results.\n4. **Trade-offs in Prompting**: Balance specificity and flexibility in prompts. Detailed prompts guide AI precisely but may limit creativity. Broader prompts allow varied responses but may reduce accuracy. Find the right balance for your use case.\n5. **Iterative Refinement**: Experiment with different settings and configurations. Iterative refinement allows you to adapt and optimize your workflow over time. [Statsig](https://docs.statsig.com/ai-ml/ai-prompt-experiment/) is a great experimentation tool for these use cases.\n\n<hr/>\n\nCongratulations! By following this guide, you've developed a \"Customer Support Reply Assistant\" capable of addressing inquiries with accuracy. Test your workflow using the [Scout Console](https://docs.scoutos.com/docs/workflows/console) to ensure seamless functionality. Consider integrating this solution with platforms like Slackbots or APIs for efficient deployment. This setup enhances customer support efficiency and can be expanded for use in sales, marketing, and more.\n\n## Next Steps\n\nTransform your customer support with Scout's AI-driven Customer Support Reply Assistant. \nScout helps you tackle response time challenges and enhance satisfaction. \n[Join our Slack community](https://studio.scoutos.com/slack) to share insights or explore our solutions by [signing up](https://studio.scoutos.com/onboarding/step-1) today. \nPartner with our engineering team to customize your support systems and optimize workflows for success in AI-powered customer service. \nLet us assist you in revolutionizing your support strategy.\n"
      },
      "pages/examples/customer-query-router.mdx": {
        "markdown": "---\ntitle: Creating a Customer Query Router with Scout's RAG Workflow\nsubtitle: Enhance Customer Support with AI-Powered Query Routing\ndescription: >-\n  A comprehensive guide to building a Customer Query Router using Scout's\n  Retrieval-Augmented Generation (RAG) workflow. Learn how to streamline query\n  handling and optimize team routing for improved customer response times and\n  satisfaction.\n---\n\nThis technical guide explores how to create a Customer Query Router using Scout's Retrieval-Augmented Generation (RAG) workflow. \nThis system helps in directing customer inquiries to the correct department by leveraging previously resolved queries and a predefined mapping of query types to respective teams. \n\nUtilizing Scout's workflow capabilities, including modular blocks and seamless data integration, you can optimize your customer support operations. \nThis guide provides a step-by-step walkthrough for setting up the RAG workflow in Scout, focusing on essential components and blocks that facilitate efficient query routing. \nWhether you're new to Scout or seeking to enhance existing processes, this guide will equip you with the knowledge to improve response times and customer satisfaction.\n\n<Success>\n<b>New to Scout?</b> Watch our quick-start demo to get familiar with the platform:\n<div style=\"width: 100%; min-width: 350px; max-width: 800px;\">\n  <div style=\"position: relative; width: 100%; overflow: hidden; padding-top: 56.25%;\">\n    <p>\n      <iframe style=\"position: absolute; top: 0; left: 0; right: 0; width: 100%; height: 100%; border: none;\" src=\"https://www.youtube.com/embed/CdwUVGwqtyI?si=aXjdrq8j4ALrzuts\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"></iframe>\n    </p>\n  </div>\n</div>\n</Success>\n\n## Getting data into Scout\n\nTo build a Customer Query Router using Scout's RAG workflow, the first step is to set up the data that the workflow will utilize for query routing. This involves creating a collection in Scout, which will store the documents and mapping information necessary for determining the appropriate team for each query.\n\n<Steps>\n### Login to Scout\n\n  \n        1. [Sign up for free](https://studio.scoutos.com/onboarding/step-1) or [sign in](https://studio.scoutos.com/sign-in) to Scout\n        2. Once logged in, click \"[Collections](https://studio.scoutos.com/dashboard/collections)\" in the nav\n  \n\n### Create a Collection\n\n  1. Let's setup your data! In the \"Collections\" section in Scout, select \"+ New Collection\". \n        Provide a name and optional description for your collection to organize and identify it later.\n        Once your collection is provisioned, click into it.\n\n  2. Inside your collection, click the \"+\" in the top nav to upload data (documents) to Scout.\n\n     Upload documents that contain previously resolved queries and a mapping of query types to respective teams. This data will serve as a reference for the workflow to accurately route customer queries. Ensure to include various types of documents such as customer service logs, FAQs, and internal guidelines pertinent to query routing.\n\n     Scout provides multiple ways to upload documents into a collection, including direct file uploads and web scraping. Choose the method that best fits your data source:\n\n     <CardGroup cols={3}>\n           <Card title=\"Scraping a Website\" icon=\"circle-1\" href=\"/docs/collections/uploading-creating-documents/scraping-a-website\">\n             Enter a website or sitemap and scrape a page, or multiple pages. This method is ideal for capturing dynamic content across multiple web pages efficiently.\n           </Card>\n           <Card title=\"Uploading Files\" icon=\"circle-2\" href=\"/docs/collections/uploading-creating-documents/uploading-files\">\n             Upload a file (PDF, CSV, etc.) directly to a Scout collection. This option is perfect for managing static documents and datasets.\n           </Card>\n           <Card title=\"Creating Documents Directly in Scout\" icon=\"circle-3\" href=\"/docs/collections/uploading-creating-documents/creating-documents-directly-in-scout\">\n             Create and edit a blank document directly in the Scout dashboard. This offers a hands-on approach to document creation and customization.\n           </Card>\n         </CardGroup>\n\n  3. Ensure the text data in your documents is clean and accurate to enhance AI effectiveness. \n  We suggest [inspecting a few of your documents](/docs/collections/documents#editing-documents) once they're uploaded to ensure completeness. \n  If you find your web scraped documents aren't being ingested correctly, consider [Collections > Customizing Web Scrapes](/docs/collections/uploading-creating-documents/scraping-a-website#customizing-web-scrapes) for fine grained web scraping controls.\n  4. Refer to [Scout's collection documentation](https://docs.scoutos.com/docs/collections) for detailed setup instructions.\n</Steps>\n\n## Building an AI workflow\n\nWith your data in place, the next step is to build the workflow that will automate the query routing process. This involves setting up and configuring various blocks in Scout to guide the flow of data and logic.\n\n<Steps>\n### Create a New Workflow\n\n  Navigate to the workflow creation page in Scout and select \"Create New Workflow.\" Assign a meaningful name to your workflow to easily identify its purpose.\n\n### Configure the Input Block\n\n  Add an [Input Block](/docs/workflows/blocks/input) to capture the customer's query. This block will serve as the entry point for user interactions.\n\n  - **Input Type**: Text\n  - **Input Key**: customer_query\n\n### Add a Collection Block\n\n  Set up a [Collection Block](/docs/workflows/blocks/collection) to retrieve relevant documents based on the input query. This block will fetch data that the AI will use to determine the correct routing.\n\n  - **Collection ID**: [Your Collection ID]\n  - **Query**: `{{inputs.customer_query}}`\n  - **Max Documents**: 10\n  - **Similarity Threshold**: 0.5\n\n### Configure an LLM Block to Enrich the User's Query\n\n  Insert an [LLM Block](/docs/workflows/blocks/llm) to enrich the user's initial query with contextual information. \n  Often times a user's initial query may be in short hand or missing key context that will make for poor semantic search results (Especially for nested topics). \n  So, let's enrich it with more context to help ensure the LLM can understand the full context when it tries to respond:\n\n  - **System Prompt**:\n    ```jinja\n    You are a customer query router. \n    Your task is to augment and enrich a user's query to ensure it is phrased in such a way that it contains necessary context to ensure effective and complete semantic search results for the topics discussed.\n    Include details about substeps or side questions the user may have that will be relevant to completing their task or answering their question.\n    Return only the newly created augmented/enriched user query.\n\n    Here are some example previous queries and technical documentation: {{your_collection_block_id.output}}\n    ```\n  - **User Prompt**:\n    ```jinja\n    Query: {{inputs.customer_query}}\n    ```\n  - **Assistant Prompt**:\n    ```jinja\n    Analyze the query and augment and enrich it to ensure it is phrased in such a way that it contains necessary context to ensure effective and complete semantic search results for the topics discussed.\n    ```\n\n### Add Another Collection Block to get the Complete Supporting Data Set\n\n  Now that we've enriched the original user query, we'll set up a [Collection Block](/docs/workflows/blocks/collection) to retrieve relevant documents based on the added context.\n\n  - **Collection ID**: [Your Collection ID]\n  - **Query**: `{{your_llm_query_enrich_block_id.output}}`\n  - **Max Documents**: 25\n  - **Similarity Threshold**: 0.5\n\n### Configure another LLM Block to Suggest a Team\n\n  Insert an [LLM Block](/docs/workflows/blocks/llm) to analyze the customer query and map it to the appropriate team.\n  Adjust this step accordingly based on your data structures and routing needs.\n\n  - **System Prompt**:\n    ```jinja\n    You are a customer query router. \n    Your task is to determine the appropriate team for each query based on predefined criteria.\n    Return only the team name that the query should be routed to.\n\n    Here are some example routed queries: {{your_second_collection_block_id.output}}\n    ```\n  - **User Prompt**:\n    ```jinja\n    Original user query: {{inputs.customer_query}}\n    LLM enriched and augmented user query: {{your_llm_query_enrich_block_id.output}}\n    ```\n  - **Assistant Prompt**:\n    ```jinja\n    Analyze the query and determine the team it should be routed to based on the provided examples of previously routed queries.\n    ```\n\n### Configure another LLM Block to Suggest a Response\n\n  Insert an [LLM Block](/docs/workflows/blocks/llm) to build out a suggested response to attach to the response payload.\n\n  - **System Prompt**:\n    ```jinja\n    You are a helpful solutions engineer designed to suggest solutions or debug steps to customer queries.\n    Return only a suggested response.\n\n    Here are some examples of previous queries, responses and documentation: {{your_second_collection_block_id.output}}\n    ```\n  - **User Prompt**:\n    ```jinja\n    Original user query: {{inputs.customer_query}}\n    LLM enriched and augmented user query: {{your_llm_query_enrich_block_id.output}}\n    ```\n  - **Assistant Prompt**:\n  \n    ```jinja\n    Analyze the query and suggest solutions or debug steps.\n    ```\n\n### Implement JSON Block to Build Response\n\n  Use a [JSON Block](/docs/workflows/blocks/json) to organize the the output of the LLM Blocks into JSON. \n\n  - **JSON**: \n  ```jinja\n  {\n    suggested_team : \"{{your_llm_routing_block_id.output}}\",\n    suggested_response : \"{{your_llm_suggested_response_block_id.output}}\",\n  }\n  ```\n\n### Test the Workflow\n\n  Use the Scout Console to test the workflow. Run sample queries to ensure accurate and efficient routing. Adjust configurations based on test results for optimal performance.\n\n</Steps>\n\n## Considerations for Building a Customer Query Router in Scout\n\n1. **Prompt Engineering:** Craft precise and contextually relevant prompts in the LLM Block to guide the AI's analysis effectively. Experiment with different prompt structures to find the balance between specificity and flexibility, ensuring the AI can accurately map queries to the correct teams. For instance, a detailed prompt might enhance accuracy but limit creativity, while a broader prompt could allow for varied responses but reduce precision.\n\n2. **Iterative Testing and Refinement:** Regularly test your workflow with diverse query scenarios using the Scout Console. This iterative approach helps identify areas for improvement and ensures the workflow handles different types of inquiries accurately. Adjust prompts and configurations based on test outcomes to optimize performance.\n\n3. **Data Quality and Maintenance:** Ensure your data collections are clean and up-to-date. High-quality data is crucial for the AI to generate accurate responses. Regularly review and update your data sources to maintain the integrity and relevance of the information used in the workflow.\n\n<hr/>\n\nCongratulations! By following this guide, you have effectively created a Customer Query Router using Scout's RAG workflow, significantly enhancing your customer support efficiency. This solution not only optimizes query handling but also opens opportunities for integration with platforms like Slackbots or APIs, extending its use to other customer-facing tasks such as sales and marketing. Ensure to test the workflow thoroughly using the Scout Console to maintain seamless functionality and maximize the value of your new system.\n\n## Next Steps\n\nIn the journey to optimize your customer support, Scout is your indispensable guide. \nAddress response time challenges and elevate customer satisfaction with Scout’s intuitive AI workflow solutions. \n[Join our Slack community](https://studio.scoutos.com/slack) to share insights or explore our solutions by [signing up](https://studio.scoutos.com/onboarding/step-1) today. \nCount on Scout to help streamline your operations, avoid common pitfalls, and ensure your success in delivering exceptional customer service.\n"
      },
      "pages/examples/automated-support-bot.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/support-ticket-classifier.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/internal-search-wiki.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/customer-issue-escalation.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/sales-overview.mdx": {
        "markdown": "<CardGroup cols={3}>\n  <Card title=\"Responding to RFPs\" icon='file-signature'\n    href='/workflow-templates/use-cases/sales/responding-to-rfps'>\n    Automate the RFP response process, saving time and improving accuracy.\n  </Card>\n  <Card title=\"Sales Proposal Generator\" icon='file-invoice'\n    href='/workflow-templates/use-cases/sales/sales-proposal-generator'>\n    Quickly generate personalized sales proposals with AI assistance.\n  </Card>\n  <Card title=\"Sales Outreach Email Assistant\" icon='paper-plane'\n    href='/workflow-templates/use-cases/sales/sales-outreach-email-assistant'>\n    Craft personalized sales outreach emails based on AI-driven insights.\n  </Card>\n  <Card title=\"Sales Demo Script Generator\" icon='chalkboard'\n    href='/workflow-templates/use-cases/sales/sales-demo-script-generator'>\n    Create effective sales demo scripts tailored to specific audiences using AI.\n  </Card>\n  <Card title=\"Sales Playbook Generator\" icon='book'\n    href='/workflow-templates/use-cases/sales/sales-playbook-generator'>\n    Build sales playbooks that guide your team to success with AI-generated best practices.\n  </Card>\n  <Card title=\"Sales Objection Handling Guide\" icon='question-circle'\n    href='/workflow-templates/use-cases/sales/sales-objection-handling-guide'>\n    Prepare your team with AI-powered objection-handling guides to close more deals.\n  </Card>\n  <Card title=\"Lead Qualification Email Drafting\" icon='check-circle'\n    href='/workflow-templates/use-cases/sales/lead-qualification-email-drafting'>\n    Automatically draft lead qualification emails that are personalized and targeted.\n  </Card>\n  <Card title=\"Product Feature Request Generator\" icon='lightbulb'\n    href='/workflow-templates/use-cases/sales/product-feature-request-generator'>\n    Capture and prioritize product feature requests with AI.\n  </Card>\n</CardGroup>\n"
      },
      "pages/examples/responding-to-rfps.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/sales-proposal-generator.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/sales-outreach-email.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/sales-demo-script.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/sales-playbook-generator.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/sales-objection-handling.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/product-feature-request.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/marketing-content-creation-overview.mdx": {
        "markdown": "<CardGroup cols={3}>\n  <Card title=\"Writing Blogs & Landing Pages\" icon='edit'\n    href='/workflow-templates/use-cases/marketing-content-creation/writing-blogs-landing-pages'>\n    Create high-quality, SEO-optimized blog posts and landing pages with AI.\n  </Card>\n  <Card title=\"Creating Personalized Marketing Campaigns\" icon='bullhorn'\n    href='/workflow-templates/use-cases/marketing-content-creation/creating-personalized-marketing-campaigns'>\n    Craft targeted marketing campaigns using AI insights on customer behavior.\n  </Card>\n  <Card title=\"Automating Social Media Content Creation\" icon='share-alt'\n    href='/workflow-templates/use-cases/marketing-content-creation/automating-social-media-content-creation'>\n    Automatically generate engaging social media posts tailored to your audience.\n  </Card>\n  <Card title=\"SEO Content Suggestion Tool\" icon='search'\n    href='/workflow-templates/use-cases/marketing-content-creation/seo-content-suggestion-tool'>\n    Improve your content’s SEO performance with AI-driven suggestions.\n  </Card>\n  <Card title=\"Press Release Drafting Assistant\" icon='newspaper'\n    href='/workflow-templates/use-cases/marketing-content-creation/press-release-drafting-assistant'>\n    Create professional press releases quickly with AI-generated drafts.\n  </Card>\n  <Card title=\"Marketing Campaign Idea Generator\" icon='lightbulb'\n    href='/workflow-templates/use-cases/marketing-content-creation/marketing-campaign-idea-generator'>\n    Use AI to generate fresh and innovative marketing campaign ideas.\n  </Card>\n  <Card title=\"Content Personalization Engine\" icon='user-cog'\n    href='/workflow-templates/use-cases/marketing-content-creation/content-personalization-engine'>\n    Deliver personalized content at scale, based on customer behavior and preferences.\n  </Card>\n  <Card title=\"Content Calendar Builder\" icon='calendar'\n    href='/workflow-templates/use-cases/marketing-content-creation/content-calendar-builder'>\n    Generate a complete content calendar with AI based on strategy and trends.\n  </Card>\n  <Card title=\"Brand Voice Guide Generator\" icon='microphone'\n    href='/workflow-templates/use-cases/startup-toolkit/brand-voice-guide-generator'>\n    Create a consistent brand voice guide using AI-driven analysis.\n  </Card>\n</CardGroup>\n"
      },
      "pages/examples/writing-blogs-landing.mdx": {
        "markdown": "---\ntitle: 'SEO-Optimized Blogging with AI: A Comprehensive Guide'\nsubtitle: Leverage AI to Enhance Blog SEO\ndescription: >-\n  Explore how to create SEO-optimized blogs using AI-driven techniques,\n  integrated with Scout's platform for efficient content creation and indexing.\n---\n\nIn this guide, we explore how to create SEO-optimized blogs using a structured workflow that leverages AI-driven techniques. \nThis process involves generating content iteratively and refining it at different stages to ensure high-quality output. \nWe delve into prompt chaining techniques to identify core themes, clarify search intent, and uncover content gaps, ultimately crafting a comprehensive blog post. \nAdditionally, we incorporate Scout's capabilities to enhance content indexing and retrieval, ensuring your blog is engaging and optimized for search engines. \n\nScout empowers marketers and content creators by simplifying AI workflows, offering tools to automate and personalize content while maintaining a consistent brand voice. \nThrough Scout's platform, you can effortlessly integrate website scraping, document processing, and semantic search, making the creation of SEO-optimized content more efficient than ever. \nWhether you're a solo creator or part of a growing team, this guide will help you harness the power of AI to produce impactful and search-friendly blogs, enhancing your content strategy and driving better engagement.\n\n<Success>\n<b>New to Scout?</b> Watch our quick-start demo to get familiar with the platform:\n<div style=\"width: 100%; min-width: 350px; max-width: 800px;\">\n  <div style=\"position: relative; width: 100%; overflow: hidden; padding-top: 56.25%;\">\n    <p>\n      <iframe style=\"position: absolute; top: 0; left: 0; right: 0; width: 100%; height: 100%; border: none;\" src=\"https://www.youtube.com/embed/CdwUVGwqtyI?si=aXjdrq8j4ALrzuts\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"></iframe>\n    </p>\n  </div>\n</div>\n</Success>\n\n## Getting Data into Scout\n\nBefore building an AI workflow to generate SEO-optimized blogs, we need to upload the data that will serve as training examples for our AI.\nThis is arguably the most important part; ensure the content you upload to Scout is relevant and broad enough to share context on keywords and concepts throughout your target space.\nIn Scout, uploading this data involves creating a [collection](/docs/collections), which stores relevant [documents](/docs/collections/documents) that the AI will query to identify themes, search intents, and content gaps.\n\n<Steps>\n\n### Login to Scout\n\n  \n        1. [Sign up for free](https://studio.scoutos.com/onboarding/step-1) or [sign in](https://studio.scoutos.com/sign-in) to Scout\n        2. Once logged in, click \"[Collections](https://studio.scoutos.com/dashboard/collections)\" in the nav\n  \n\n### Create a Collection\n\n  \n        1. Once logged in, click \"[Collections](https://studio.scoutos.com/dashboard/collections)\" in the nav\n        2. Click \"+ New Collection\"\n        3. Name and create your collection\n        4. Once your collection is provisioned, click it to open it\n  \n\n  2. Navigate to the \"Collections\" section and click \"Create New Collection.\" Name your collection to reflect the content it will contain, such as \"SEO Content Resources.\"\n\n### Upload Documents to the Collection\n\n  1. Let's setup your data! In the \"Collections\" section in Scout, select \"+ New Collection\". \n        Provide a name and optional description for your collection to organize and identify it later.\n        Once your collection is provisioned, click into it.\n\n  3. Inside your collection, click the \"+\" in the top nav to upload documents. This step is critical. \n  Consider incorporating a mix of web-scraped online articles, SEO guides, industry reports, and any internal documentation relevant to your topic.\n  At minimum, you should have Scout scrape 10 high quality example individual blogs in your target content space.\n\n  <CardGroup cols={3}>\n        <Card title=\"Scraping a Website\" icon=\"circle-1\" href=\"/docs/collections/uploading-creating-documents/scraping-a-website\">\n          Enter a website or sitemap and scrape a page, or multiple pages. This method is ideal for capturing dynamic content across multiple web pages efficiently.\n        </Card>\n        <Card title=\"Uploading Files\" icon=\"circle-2\" href=\"/docs/collections/uploading-creating-documents/uploading-files\">\n          Upload a file (PDF, CSV, etc.) directly to a Scout collection. This option is perfect for managing static documents and datasets.\n        </Card>\n        <Card title=\"Creating Documents Directly in Scout\" icon=\"circle-3\" href=\"/docs/collections/uploading-creating-documents/creating-documents-directly-in-scout\">\n          Create and edit a blank document directly in the Scout dashboard. This offers a hands-on approach to document creation and customization.\n        </Card>\n      </CardGroup>\n\n  3. Ensure the text data in your documents is clean and accurate to enhance AI effectiveness. \n  We suggest [inspecting a few of your documents](/docs/collections/documents#editing-documents) once they're uploaded to ensure completeness. \n  If you find your web scraped documents aren't being ingested correctly, consider [Collections > Customizing Web Scrapes](/docs/collections/uploading-creating-documents/scraping-a-website#customizing-web-scrapes) for fine grained web scraping controls.\n  4. Refer to [Scout's collection documentation](https://docs.scoutos.com/docs/collections) for detailed setup instructions.\n\n</Steps>\n\n## Building an AI Workflow\n\nOnce your data is in Scout, you can start building an AI workflow to generate SEO-optimized blog content. This involves creating a series of steps that process user input and iteratively refine the content to align with SEO best practices.\n\n<Steps>\n\n### Create a New Workflow\n\n  To begin, navigate to the workflow creation page in Scout and select \"Create New Workflow.\" Name it \"SEO Blog Generator\" for easy identification.\n\n### Starting with the Input Block\n\n  Every workflow starts with an [input block](/docs/workflows/blocks/input) to capture the user's query or topic. This block serves as the entry point for your workflow.\n\n  - **Configuration:**\n    - **Input Type:** Text\n    - **Field Name:** `user_message`\n    - **Description:** \"Enter the main topics, keywords and description for the blog post.\"\n\n### Add a Collection Block to Identify Core Themes\n\n  Use a [collection block](/docs/workflows/blocks/collection) to query your collection for frequently mentioned themes and ideas.\n\n  - **Configuration:**\n    - **Collection:** Select your previously created collection (e.g., \"SEO Content Resources\").\n    - **Limit:** 20\n    - **Minimum Similarity:** 0.5\n    - **Query:** \n      ```jinja\n      {{inputs.user_message}}\n      ```\n\n### Add an LLM Block to Clarify Search Intent\n\n  Insert an [LLM block](/docs/workflows/blocks/llm) to understand user intent better using the themes identified.\n\n  - **Configuration:**\n    - **Model:** GPT-4\n    - **Temperature:** 0.7\n    - **Maximum Tokens:** 1000\n    - **System Prompt:**\n      ```jinja\n      You are an expert in understanding user search intent based on content.\n      ```\n    - **User Prompt:**\n      ```jinja\n      Based on the themes from the collection: {{your_collection_block_step_3_id.output}}, what is the core purpose driving readers to this topic?\n      ```\n\n### Add an LLM Block to Find Content Gaps\n\n  Insert an [LLM block](/docs/workflows/blocks/llm) to understand user intent better using the themes identified.\n\n  - **Configuration:**\n    - **Model:** GPT-4\n    - **Temperature:** 0.7\n    - **Maximum Tokens:** 1000\n    - **System Prompt:**\n      ```jinja\n      You are an expert in finding content gaps based on content.\n      ```\n    - **User Prompt:**\n      ```jinja\n      Based on the content from the collection: {{your_collection_block_step_3_id.output}}, what are some content gaps or new angles that may interest readers of this topic?\n      ```\n\n### Add an LLM Block to Extract Additional Insights\n\n  Use an [LLM block](/docs/workflows/blocks/llm) to enhance the content with expert advice and actionable insights.\n\n  - **Configuration:**\n    - **Model:** GPT-4\n    - **Temperature:** 0.6\n    - **Maximum Tokens:** 1500\n    - **System Prompt:**\n      ```jinja\n      You are an expert in extracting value-adding information from documents. \n      You are part of an LLM that generates high quality SEO content. \n      You will analyze the user's initial query, and the output of two other LLMs based on that query, to derive further insights into how to craft relevant, contextual and creative content.\n      ```\n    - **User Prompt:**\n      ```jinja\n      What additional insights can be added based on the themes and gaps identified?\n\n      Initial user input:\n      {{inputs.user_message}}\n\n      LLM generated concept gaps:\n      {{your_llm_content_gaps_id.user_message}}\n\n      LLM generated search intent context:\n      {{your_llm_content_gaps_id.user_message}}\n      ```\n\n### Add a Text Block to Build a Blog Outline\n\n  Add a [text block](/docs/workflows/blocks/text) to create a structured blog outline using gathered insights.\n\n  - **Configuration:**\n    - **Text:** \n      ```jinja\n      Using the themes, intent, and gaps identified, create a blog outline. Include section headings, subheadings, and key points.\n\n      Initial user input:\n      {{your_inputs_id.user_message}}\n\n      LLM generated concept gaps:\n      {{your_llm_content_gaps_id.user_message}}\n\n      LLM generated search intent context:\n      {{your_llm_search_intent_id.user_message}}\n\n      LLM generated additional insight context:\n      {{your_llm_additional_insights_id.user_message}}\n      ```\n\n### Add an LLM Block to Write the Complete Blog Post\n\n  Then, use an [LLM block](/docs/workflows/blocks/llm) to generate the full blog post from the outline.\n\n  - **Configuration:**\n    - **Model:** GPT-4\n    - **Temperature:** 0.5\n    - **Maximum Tokens:** 3000\n    - **System Prompt:**\n      ```jinja\n      You are a world-class SEO content strategist tasked with creating exceptional blog posts.\n      ```\n    - **User Prompt:**\n      ```jinja\n      Create a comprehensive blog post using the outline: {{your_blog_outline_text_block_id.output}}\n      ```\n\n### Add an LLM Block to Copy Edit\n\n  Then, use an [LLM block](/docs/workflows/blocks/llm) to generate the full blog post from the outline.\n\n  - **Configuration:**\n    - **Model:** GPT-4\n    - **Temperature:** 0.5\n    - **Maximum Tokens:** 3000\n    - **System Prompt:**\n      ```jinja\n      Alter the grammar of the technical copy given to you in order to minimize the use of certain adjectives and adverbs that have been identified as flags for LLM-origin texts, and promote the use of neutral, commonly used control words.\n      Return the altered content in its entirety. Here are your directions on how to modify the content:\n\n      1. Words to Avoid:\n\n      Adjectives such as \"innovative,\" \"meticulous,\" \"invaluable,\" and \"ingenious.\" These terms have been flagged for their high frequency in LLM-generated texts and may signal artificial origin.\n\n      Adverbs like \"lucidly,\" \"meticulously,\" \"innovatively,\" and \"compellingly.\" These are also indicative of LLM use and should be used sparingly.\n\n      2. Neutral Words to Include:\n\n      Use neutral and common words such as \"consider,\" \"conclusion,\" \"furthermore,\" \"relative,\" and \"technical.\"\n\n      Include basic colors (\"blue,\" \"red,\" \"yellow\") and temporal terms (\"before,\" \"after,\" \"earlier,\" \"later\") which are typical and not indicative of LLM origins.\n\n      3. General Guidelines:\n\n      Contextual Relevance: Ensure that the vocabulary used is appropriate for the context. Avoid forcing the use of neutral words if they do not fit naturally within the content.\n\n      Natural Language Flow: Strive for a natural flow in writing. Avoid constructions that seem artificial or forced. The goal is to maintain readability and engagement without signaling machine generation.\n\n      Balance and Variety: Maintain a good balance between descriptive language and the use of control words. Do not shy away from descriptive terms entirely, but be mindful of their frequency and the patterns of their use.\n\n      4. Examples of Adjustment:\n\n      Instead of: \"This study presents an innovative and meticulously planned approach.\"\n\n      Use: \"This study presents a well-planned approach and considers several key factors.\"\n\n      Instead of: \"The results are compellingly supported by the data.\"\n\n      Use: \"The data clearly supports the results, as shown in the analysis.\"\n\n      5. Phrases to avoid:\n\n      \"in the field of\", \"in the <> of\", \"in the age of\", \"in the search of\", \"in the fast paced world of\", etc.\n      ```\n    - **User Prompt:**\n      ```jinja\n      {{your_generated_blog_post_LLM_id.output}}\n      ```\n\n</Steps>\n\n## Considerations for Crafting SEO-Optimized Content\n\nWhen crafting SEO-optimized content, it's crucial to balance creativity with precision. Here are some key considerations:\n\n1. **Prompt Specificity vs. Flexibility**: Detailed prompts can guide AI to produce specific outputs, enhancing accuracy but potentially limiting creativity. Broader prompts allow more freedom but might reduce precision. Experiment with different prompt configurations to find the right balance for your content needs.\n\n2. **Iterative Prompting**: Use iterative testing to refine your prompts. Start with a broad prompt and gradually add specificity based on the AI's responses. This approach helps in honing the AI's output to better align with your content goals.\n\n3. **E-A-T Principles**: Ensure your content aligns with Expertise, Authoritativeness, and Trustworthiness (E-A-T) principles. This not only boosts SEO but also enhances the credibility of your content.\n\n4. **Regular Updates**: Keep your Scout collections updated to maintain relevance and accuracy in your content generation process. Regular updates ensure that your content remains fresh and aligned with current trends.\n\nBy considering these factors, you can effectively leverage AI to create compelling, SEO-optimized content.\n\nBy following this guide, you've effectively harnessed Scout's AI capabilities to create an SEO-optimized blogging workflow. \nThis process not only enhances your content creation strategy but also positions you to explore various applications, such as personalized marketing campaigns and social media content automation. \nTest your workflow in the Scout Console to ensure seamless operation, and consider integrations like Slack or APIs for expanded functionality. \nWith this approach, you're well-equipped to engage your audience, boost search rankings, and unlock new growth opportunities.\n\n[Sign up for Scout](https://studio.scoutos.com/onboarding/step-1) today and [join our Slack community](https://studio.scoutos.com/slack) to connect with our engineering team. \nBuild smart, achieve your goals, and stay ahead with Scout.\n"
      },
      "pages/examples/personalized-marketing-campaigns.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/social-media-content.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/seo-content-suggestion.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/press-release-drafting.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/marketing-campaign-idea.mdx": {
        "markdown": "Coming soon! [Ping us](https://scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/content-personalization.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/content-calendar.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/brand-voice-guide.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/customer-success-overview.mdx": {
        "markdown": "<CardGroup cols={3}>\n  <Card title=\"Client Onboarding Plan Generator\" icon='clipboard-check'\n    href='/workflow-templates/use-cases/customer-success/client-onboarding-plan-generator'>\n    Automatically generate personalized onboarding plans for your clients.\n  </Card>\n  <Card title=\"Customer Retention Email Sequence Generator\" icon='envelope-open-text'\n    href='/workflow-templates/use-cases/customer-success/customer-retention-email-sequence-generator'>\n    Create AI-powered email sequences to improve customer retention and engagement.\n  </Card>\n  <Card title=\"Customer Success Playbook Generator\" icon='book'\n    href='/workflow-templates/use-cases/customer-success/customer-success-playbook-generator'>\n    Develop scalable customer success playbooks tailored to your team’s needs.\n  </Card>\n  <Card title=\"Client Satisfaction Feedback Summarizer\" icon='smile'\n    href='/workflow-templates/use-cases/customer-success/client-satisfaction-feedback-summarizer'>\n    Automatically collect and summarize client satisfaction feedback using AI.\n  </Card>\n  <Card title=\"Internal Search Wiki\" icon='headset'\n    href='/workflow-templates/use-cases/customer-success/internal-search-wiki'>\n    Build internal semantic search and suggest RAG responses to your customer facing teams.\n  </Card>\n  <Card title=\"Customer Issue Escalation Report Builder\" icon='exclamation-triangle'\n    href='/workflow-templates/use-cases/customer-success/customer-issue-escalation-report-builder'>\n    Automatically generate detailed reports when customer issues need to be escalated.\n  </Card>\n\n</CardGroup>\n"
      },
      "pages/examples/client-onboarding-guide.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/customer-retention-email.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/customer-success-playbook.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/client-feedback-summarizer.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/product-management-overview.mdx": {
        "markdown": "<CardGroup cols={3}>\n  <Card title=\"Augmenting Product Feedback Discovery\" icon='comments'\n    href='/workflow-templates/use-cases/product-management/augmenting-product-feedback-discovery'>\n    Analyze customer feedback with AI to improve product development.\n  </Card>\n  <Card title=\"Product Documentation Generator\" icon='file-alt'\n    href='/workflow-templates/use-cases/product-management/product-documentation-generator'>\n    Automatically generate and update product documentation using AI.\n  </Card>\n  <Card title=\"Product Feature Request Generator\" icon='lightbulb'\n    href='/workflow-templates/use-cases/product-management/product-feature-request-generator'>\n    Capture and prioritize product feature requests with AI assistance.\n  </Card>\n  <Card title=\"Product Roadmap Generator\" icon='road'\n    href='/workflow-templates/use-cases/product-management/product-roadmap-generator'>\n    Create dynamic product roadmaps based on customer feedback and market trends.\n  </Card>\n  <Card title=\"Feature Comparison Matrix Generator\" icon='th-list'\n    href='/workflow-templates/use-cases/product-management/feature-comparison-matrix-generator'>\n    Build feature comparison matrices to evaluate product offerings.\n  </Card>\n  <Card title=\"User Manual Generator\" icon='book-open'\n    href='/workflow-templates/use-cases/product-management/user-manual-generator'>\n    Automatically generate user manuals from product specifications with AI.\n  </Card>\n  <Card title=\"Market Research Report Generator\" icon='chart-bar'\n    href='/workflow-templates/use-cases/product-management/market-research-report-generator'>\n    Generate comprehensive market research reports using AI insights.\n  </Card>\n  <Card title=\"Competitive Analysis Summarizer\" icon='chart-pie'\n    href='/workflow-templates/use-cases/product-management/competitive-analysis-summarizer'>\n    Summarize competitive analysis reports with actionable insights using AI.\n  </Card>\n</CardGroup>\n"
      },
      "pages/examples/product-feedback-discovery.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/product-documentation-generator.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/product-roadmap-generator.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/feature-comparison-matrix.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/user-manual-generator.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/market-research-report.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/competitive-analysis-summarizer.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/legal-compliance-overview.mdx": {
        "markdown": "<CardGroup cols={3}>\n  <Card title=\"Responding to Security Questionnaires\" icon='file-contract'\n    href='/workflow-templates/use-cases/legal/responding-to-security-questionnaires'>\n    Automate responses to security questionnaires and ensure compliance with AI.\n  </Card>\n  <Card title=\"Contract Review Assistant\" icon='balance-scale'\n    href='/workflow-templates/use-cases/legal/contract-review-assistant'>\n    Use AI to review contracts and flag risky clauses or terms for review.\n  </Card>\n  <Card title=\"Compliance Document Generator\" icon='file-invoice'\n    href='/workflow-templates/use-cases/legal/compliance-document-generator'>\n    Automate the generation of compliance documents, ensuring accuracy and completeness.\n  </Card>\n  <Card title=\"Legal Discovery Document Summarizer\" icon='folder-open'\n    href='/workflow-templates/use-cases/legal/legal-discovery-document-summarizer'>\n    Quickly summarize large volumes of legal discovery documents with AI.\n  </Card>\n  <Card title=\"Internal Compliance Training FAQ\" icon='question'\n    href='/workflow-templates/use-cases/legal/internal-compliance-training-faq'>\n    Build AI-generated compliance training FAQs to keep your team informed.\n  </Card>\n  <Card title=\"SAAS Security Risk Assessment Report Generator\" icon='shield-alt'\n    href='/workflow-templates/use-cases/legal/saas-security-risk-assessment-report-generator'>\n    Generate security risk assessments for SAAS platforms with AI assistance.\n  </Card>\n</CardGroup>\n"
      },
      "pages/examples/security-questionnaires.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/contract-review-assistant.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/compliance-doc-generator.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/legal-discovery-doc.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/internal-compliance-faq.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/saas-security-risk.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/internal-operations-team-management-overview.mdx": {
        "markdown": "<CardGroup cols={3}>\n  <Card title=\"Enhancing Employee Onboarding\" icon='user-plus'\n    href='/workflow-templates/use-cases/internal-operations/enhancing-employee-onboarding'>\n    Streamline employee onboarding with AI-powered workflows.\n  </Card>\n  <Card title=\"Internal Policy FAQ Generator\" icon='clipboard'\n    href='/workflow-templates/use-cases/internal-operations/internal-policy-faq-generator'>\n    Automatically generate internal policy FAQs to keep your team informed.\n  </Card>\n  <Card title=\"Team Recognition & Reward Plan\" icon='medal'\n    href='/workflow-templates/use-cases/internal-operations/team-recognition-reward-plan'>\n    Build a dynamic recognition and reward plan tailored to your team's achievements.\n  </Card>\n  <Card title=\"Meeting Transcript Summarizer\" icon='microphone-alt'\n    href='/workflow-templates/use-cases/internal-operations/meeting-transcript-summarizer'>\n    Summarize key takeaways from meeting transcripts with AI.\n  </Card>\n  <Card title=\"Project Update Summarizer\" icon='tasks'\n    href='/workflow-templates/use-cases/internal-operations/project-update-summarizer'>\n    Keep stakeholders informed with concise, AI-generated project updates.\n  </Card>\n  <Card title=\"Board Meeting Report Generator\" icon='briefcase'\n    href='/workflow-templates/use-cases/internal-operations/board-meeting-report-generator'>\n    Summarize board meeting outcomes with AI to keep key stakeholders informed.\n  </Card>\n  <Card title=\"Job Description Generator\" icon='id-badge'\n    href='/workflow-templates/use-cases/internal-operations/job-description-generator'>\n    Automatically generate job descriptions tailored to any role with AI.\n  </Card>\n  <Card title=\"Board Update Summarizer\" icon='newspaper'\n    href='/workflow-templates/use-cases/internal-operations/board-update-summarizer'>\n    Generate concise board updates with key highlights using AI.\n  </Card>\n</CardGroup>\n"
      },
      "pages/examples/employee-onboarding.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/internal-policy-faq.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/team-recognition-plan.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/meeting-transcript-summarizer.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/project-update-summarizer.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/board-meeting-report.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/job-description-generator.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/board-update-summarizer.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/client-reporting-analysis-overview.mdx": {
        "markdown": "<CardGroup cols={3}>\n  <Card title=\"Take Customer Background Data and Generate a Report\" icon='file-alt'\n    href='/workflow-templates/use-cases/client-reporting-analysis/take-customer-background-data-and-generate-a-report'>\n    Automatically generate detailed client reports based on background data.\n  </Card>\n  <Card title=\"Client Project Proposal Builder\" icon='file-signature'\n    href='/workflow-templates/use-cases/client-reporting-analysis/client-project-proposal-builder'>\n    Build winning project proposals tailored to client needs with AI.\n  </Card>\n  <Card title=\"Investor Update Summarizer\" icon='chart-line'\n    href='/workflow-templates/use-cases/client-reporting-analysis/investor-update-summarizer'>\n    Generate concise investor updates summarizing key company metrics and progress.\n  </Card>\n  <Card title=\"Client Satisfaction Feedback Summarizer\" icon='smile'\n    href='/workflow-templates/use-cases/client-reporting-analysis/client-satisfaction-feedback-summarizer'>\n    Automatically collect and summarize client satisfaction feedback using AI.\n  </Card>\n  <Card title=\"RFP Response Generator\" icon='file-invoice'\n    href='/workflow-templates/use-cases/client-reporting-analysis/rfp-response-generator'>\n    Quickly generate complete RFP responses based on historical data with AI.\n  </Card>\n</CardGroup>\n"
      },
      "pages/examples/customer-background-report.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/client-project-proposal.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/investor-update-summarizer.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/rfp-response-generator.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/startup-toolkit-overview.mdx": {
        "markdown": "<CardGroup cols={3}>\n  <Card title=\"Build Custom AI Apps\" icon='rocket'\n    href='/workflow-templates/use-cases/startup-toolkit/enabling-entrepreneurs-to-build-ai-apps'>\n    Build and launch AI-powered apps quickly and efficiently, without the technical headache.\n  </Card>\n  <Card title=\"Product Launch Plan Builder\" icon='calendar-alt'\n    href='/workflow-templates/use-cases/startup-toolkit/product-launch-plan-builder'>\n    Automatically create comprehensive product launch plans with AI insights.\n  </Card>\n  <Card title=\"Knowledge Base Article Generator\" icon='book'\n    href='/workflow-templates/use-cases/startup-toolkit/knowledge-base-article-generator'>\n    Build a robust knowledge base by generating articles with AI.\n  </Card>\n  <Card title=\"Case Study Generator\" icon='file-alt'\n    href='/workflow-templates/use-cases/startup-toolkit/case-study-generator'>\n    Automatically generate compelling case studies to showcase your success stories.\n  </Card>\n  <Card title=\"Press Release Drafting Assistant\" icon='bullhorn'\n    href='/workflow-templates/use-cases/startup-toolkit/press-release-drafting-assistant'>\n    Quickly draft press releases with AI that capture attention and key details.\n  </Card>\n  <Card title=\"Brand Voice Guide Generator\" icon='microphone'\n    href='/workflow-templates/use-cases/startup-toolkit/brand-voice-guide-generator'>\n    Create a consistent brand voice guide using AI-driven analysis.\n  </Card>\n  <Card title=\"SEO Content Suggestion Tool\" icon='search'\n    href='/workflow-templates/use-cases/startup-toolkit/seo-content-suggestion-tool'>\n    Optimize your content for SEO by generating AI-driven suggestions.\n  </Card>\n</CardGroup>\n"
      },
      "pages/examples/build-ai-apps.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/product-launch-plan.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/knowledge-base-article.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      },
      "pages/examples/case-study-generator.mdx": {
        "markdown": "Coming soon! [Ping us](https://studio.scoutos.com/slack) if you want to chat about this use case or get this doc prioritized!\n"
      }
    },
    "search": {
      "type": "singleAlgoliaIndex",
      "value": {
        "type": "unversioned",
        "indexSegment": {
          "id": "seg_scoutos.docs.buildwithfern.com_997cc44a-ee86-43f3-8eaa-19c9adb9b1e6",
          "searchApiKey": "OWU4MTljYmQ4NGJiYTZjMWIyMzkzNzBhMzdiYTI0NmJiNjA3YjQ0MGQwNjBmY2MwZDMzNGIxZWI0ODI2Mjg0YmZpbHRlcnM9aW5kZXhTZWdtZW50SWQlM0FzZWdfc2NvdXRvcy5kb2NzLmJ1aWxkd2l0aGZlcm4uY29tXzk5N2NjNDRhLWVlODYtNDNmMy04ZWFhLTE5YzlhZGI5YjFlNiZ2YWxpZFVudGlsPTE3MzA4NTc1NjE="
        }
      }
    },
    "id": "docs_definition_d785befd-ef98-4785-a253-e52a3fe32a3c"
  },
  "lightModeEnabled": true
}
