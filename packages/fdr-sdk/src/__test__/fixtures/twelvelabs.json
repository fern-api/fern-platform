{
  "baseUrl": {
    "domain": "twelvelabs.docs.buildwithfern.com"
  },
  "definition": {
    "config": {
      "navigation": {
        "tabs": [
          {
            "type": "group",
            "title": "Docs",
            "items": [
              {
                "type": "section",
                "title": "Get Started",
                "urlSlug": "get-started",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/introduction.mdx",
                    "title": "Introduction",
                    "urlSlug": "introduction",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/platform-overview.mdx",
                    "title": "Platform Overview",
                    "urlSlug": "platform-overview",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/quickstart.mdx",
                    "title": "Quickstart",
                    "urlSlug": "quickstart",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Guides",
                "urlSlug": "guides",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/authentication.mdx",
                    "title": "Authentication",
                    "urlSlug": "authentication",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/create-indexes.mdx",
                    "title": "Create Indexes",
                    "urlSlug": "create-indexes",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/upload-videos.mdx",
                    "title": "Upload Videos",
                    "urlSlug": "upload-videos",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlugOverride": "guides",
            "urlSlug": "guides",
            "skipUrlSlug": false
          },
          {
            "type": "group",
            "title": "API Reference",
            "items": [
              {
                "type": "apiV2",
                "node": {
                  "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                  "type": "apiReference",
                  "title": "API Reference",
                  "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                  "overviewPageId": "docs/pages/api-overview.mdx",
                  "paginated": false,
                  "slug": "api-reference/api-reference",
                  "hideTitle": false,
                  "showErrors": true,
                  "children": [
                    {
                      "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:subpackage_tasks",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_tasks.list",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_tasks.list",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "List video indexing tasks",
                          "slug": "api-reference/api-reference/tasks/list"
                        },
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_tasks.create",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_tasks.create",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Create a video indexing task",
                          "slug": "api-reference/api-reference/tasks/create"
                        },
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_tasks.retrieve",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_tasks.retrieve",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Retrieve a video indexing task",
                          "slug": "api-reference/api-reference/tasks/retrieve"
                        },
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_tasks.delete",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_tasks.delete",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Delete a video indexing task",
                          "slug": "api-reference/api-reference/tasks/delete"
                        },
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_tasks.status",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_tasks.status",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Retrieve tasks by status",
                          "slug": "api-reference/api-reference/tasks/status"
                        },
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_tasks.transfers",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_tasks.transfers",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Transfers",
                          "slug": "api-reference/api-reference/tasks/transfers"
                        }
                      ],
                      "title": "Tasks",
                      "slug": "api-reference/api-reference/tasks",
                      "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                      "pointsTo": "api-reference/api-reference/tasks/list"
                    },
                    {
                      "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:subpackage_uploadVideos",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_uploadVideos.cloud-to-cloud-import-videos",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_uploadVideos.cloud-to-cloud-import-videos",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Import videos",
                          "slug": "api-reference/api-reference/upload-videos/cloud-to-cloud-import-videos"
                        },
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_uploadVideos.cloud-to-cloud-retrieve-status",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_uploadVideos.cloud-to-cloud-retrieve-status",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Retrieve import status",
                          "slug": "api-reference/api-reference/upload-videos/cloud-to-cloud-retrieve-status"
                        },
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_uploadVideos.cloud-to-cloud-retrieve-import-logs",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_uploadVideos.cloud-to-cloud-retrieve-import-logs",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Retrieve import logs",
                          "slug": "api-reference/api-reference/upload-videos/cloud-to-cloud-retrieve-import-logs"
                        }
                      ],
                      "title": "Upload videos",
                      "slug": "api-reference/api-reference/upload-videos",
                      "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                      "pointsTo": "api-reference/api-reference/upload-videos/cloud-to-cloud-import-videos"
                    },
                    {
                      "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:subpackage_indexes",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_indexes.list",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_indexes.list",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "List indexes",
                          "slug": "api-reference/api-reference/indexes/list"
                        },
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_indexes.create",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_indexes.create",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Create an index",
                          "slug": "api-reference/api-reference/indexes/create"
                        },
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_indexes.retrieve",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_indexes.retrieve",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Retrieve an index",
                          "slug": "api-reference/api-reference/indexes/retrieve"
                        },
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_indexes.update",
                          "type": "endpoint",
                          "method": "PUT",
                          "endpointId": "endpoint_indexes.update",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Update an index",
                          "slug": "api-reference/api-reference/indexes/update"
                        },
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_indexes.delete",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_indexes.delete",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Delete an index",
                          "slug": "api-reference/api-reference/indexes/delete"
                        },
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:subpackage_indexes/videos",
                          "type": "apiPackage",
                          "children": [
                            {
                              "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_indexes/videos.list",
                              "type": "endpoint",
                              "method": "GET",
                              "endpointId": "endpoint_indexes/videos.list",
                              "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                              "isResponseStream": false,
                              "title": "List videos",
                              "slug": "api-reference/api-reference/indexes/videos/list"
                            },
                            {
                              "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_indexes/videos.retrieve",
                              "type": "endpoint",
                              "method": "GET",
                              "endpointId": "endpoint_indexes/videos.retrieve",
                              "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                              "isResponseStream": false,
                              "title": "Retrieve video information",
                              "slug": "api-reference/api-reference/indexes/videos/retrieve"
                            },
                            {
                              "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_indexes/videos.update",
                              "type": "endpoint",
                              "method": "PUT",
                              "endpointId": "endpoint_indexes/videos.update",
                              "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                              "isResponseStream": false,
                              "title": "Update video information",
                              "slug": "api-reference/api-reference/indexes/videos/update"
                            },
                            {
                              "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_indexes/videos.delete",
                              "type": "endpoint",
                              "method": "DELETE",
                              "endpointId": "endpoint_indexes/videos.delete",
                              "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                              "isResponseStream": false,
                              "title": "Delete video information",
                              "slug": "api-reference/api-reference/indexes/videos/delete"
                            }
                          ],
                          "title": "Videos",
                          "slug": "api-reference/api-reference/indexes/videos",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "pointsTo": "api-reference/api-reference/indexes/videos/list"
                        }
                      ],
                      "title": "Indexes",
                      "slug": "api-reference/api-reference/indexes",
                      "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                      "pointsTo": "api-reference/api-reference/indexes/list"
                    },
                    {
                      "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:subpackage_summarize",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_summarize.create",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_summarize.create",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Summaries, chapters, or highlights",
                          "slug": "api-reference/api-reference/summarize/create"
                        }
                      ],
                      "title": "Summarize",
                      "slug": "api-reference/api-reference/summarize",
                      "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                      "pointsTo": "api-reference/api-reference/summarize/create"
                    },
                    {
                      "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:subpackage_generate",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_generate.create",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_generate.create",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Open-ended texts",
                          "slug": "api-reference/api-reference/generate/create"
                        }
                      ],
                      "title": "Generate",
                      "slug": "api-reference/api-reference/generate",
                      "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                      "pointsTo": "api-reference/api-reference/generate/create"
                    },
                    {
                      "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:subpackage_embed",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_embed.create",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_embed.create",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Create embeddings for text, image, and audio",
                          "slug": "api-reference/api-reference/embed/create"
                        },
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:subpackage_embed/tasks",
                          "type": "apiPackage",
                          "children": [
                            {
                              "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_embed/tasks.list",
                              "type": "endpoint",
                              "method": "GET",
                              "endpointId": "endpoint_embed/tasks.list",
                              "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                              "isResponseStream": false,
                              "title": "List video embedding tasks",
                              "slug": "api-reference/api-reference/embed/tasks/list"
                            },
                            {
                              "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_embed/tasks.create",
                              "type": "endpoint",
                              "method": "POST",
                              "endpointId": "endpoint_embed/tasks.create",
                              "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                              "isResponseStream": false,
                              "title": "Create a video embedding task",
                              "slug": "api-reference/api-reference/embed/tasks/create"
                            },
                            {
                              "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_embed/tasks.retrieve",
                              "type": "endpoint",
                              "method": "GET",
                              "endpointId": "endpoint_embed/tasks.retrieve",
                              "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                              "isResponseStream": false,
                              "title": "Retrieve video embeddings",
                              "slug": "api-reference/api-reference/embed/tasks/retrieve"
                            },
                            {
                              "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:subpackage_embed/tasks/status",
                              "type": "apiPackage",
                              "children": [
                                {
                                  "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_embed/tasks/status.retrieve",
                                  "type": "endpoint",
                                  "method": "GET",
                                  "endpointId": "endpoint_embed/tasks/status.retrieve",
                                  "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                                  "isResponseStream": false,
                                  "title": "Retrieve the status of a video embedding task",
                                  "slug": "api-reference/api-reference/embed/tasks/status/retrieve"
                                }
                              ],
                              "title": "Status",
                              "slug": "api-reference/api-reference/embed/tasks/status",
                              "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                              "pointsTo": "api-reference/api-reference/embed/tasks/status/retrieve"
                            }
                          ],
                          "title": "Tasks",
                          "slug": "api-reference/api-reference/embed/tasks",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "pointsTo": "api-reference/api-reference/embed/tasks/list"
                        }
                      ],
                      "title": "Embed",
                      "slug": "api-reference/api-reference/embed",
                      "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                      "pointsTo": "api-reference/api-reference/embed/create"
                    },
                    {
                      "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:subpackage_search",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_search.query",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_search.query",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Make any-to-video search requests",
                          "slug": "api-reference/api-reference/search/query"
                        },
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_search.retrieve",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_search.retrieve",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Retrieve a specific page of search results",
                          "slug": "api-reference/api-reference/search/retrieve"
                        }
                      ],
                      "title": "Search",
                      "slug": "api-reference/api-reference/search",
                      "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                      "pointsTo": "api-reference/api-reference/search/query"
                    },
                    {
                      "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:subpackage_gist",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_gist.create",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_gist.create",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Create",
                          "slug": "api-reference/api-reference/gist/create"
                        }
                      ],
                      "title": "Gist",
                      "slug": "api-reference/api-reference/gist",
                      "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                      "pointsTo": "api-reference/api-reference/gist/create"
                    },
                    {
                      "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:subpackage_embedNew",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3:endpoint_embedNew.create",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_embedNew.create",
                          "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                          "isResponseStream": false,
                          "title": "Create",
                          "slug": "api-reference/api-reference/embed-new/create"
                        }
                      ],
                      "title": "Embed New",
                      "slug": "api-reference/api-reference/embed-new",
                      "apiDefinitionId": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
                      "pointsTo": "api-reference/api-reference/embed-new/create"
                    }
                  ],
                  "pointsTo": "api-reference/api-reference/tasks/list"
                }
              }
            ],
            "urlSlug": "api-reference",
            "skipUrlSlug": false
          }
        ]
      },
      "logoHeight": 20,
      "logoHref": "https://twelvelabs.io/?utm_campaign=demo&utm_medium=twelvelabs&utm_source=logo",
      "colorsV3": {
        "type": "darkAndLight",
        "light": {
          "accentPrimary": {
            "r": 65,
            "g": 131,
            "b": 38,
            "a": 1
          },
          "logo": "8972468f-3d2b-47e0-82b1-566275324969",
          "background": {
            "type": "solid",
            "r": 255,
            "g": 255,
            "b": 255,
            "a": 1
          },
          "border": {
            "r": 224,
            "g": 224,
            "b": 224,
            "a": 1
          },
          "cardBackground": {
            "r": 232,
            "g": 230,
            "b": 222,
            "a": 1
          },
          "sidebarBackground": {
            "r": 250,
            "g": 250,
            "b": 250,
            "a": 1
          },
          "headerBackground": {
            "r": 250,
            "g": 250,
            "b": 250,
            "a": 1
          }
        },
        "dark": {
          "accentPrimary": {
            "r": 173,
            "g": 255,
            "b": 140,
            "a": 1
          },
          "logo": "866eba06-6241-47fb-a66f-d87e074f87d6",
          "background": {
            "type": "solid",
            "r": 13,
            "g": 14,
            "b": 17,
            "a": 1
          },
          "border": {
            "r": 41,
            "g": 41,
            "b": 41,
            "a": 1
          },
          "cardBackground": {
            "r": 26,
            "g": 26,
            "b": 26,
            "a": 1
          },
          "sidebarBackground": {
            "r": 28,
            "g": 28,
            "b": 28,
            "a": 1
          },
          "headerBackground": {
            "r": 28,
            "g": 28,
            "b": 28,
            "a": 1
          }
        }
      },
      "navbarLinks": [
        {
          "type": "secondary",
          "text": "Fork this repo",
          "url": "https://github.com/twelve-labs/docs"
        },
        {
          "type": "primary",
          "text": "Get a demo",
          "url": "https://twelvelabs.io/contact?utm_campaign=demo&utm_medium=twelvelabs&utm_source=navbar"
        }
      ],
      "title": "Twelve Labs",
      "favicon": "e7b15806-38ff-4157-b400-0e662563f17f",
      "layout": {
        "pageWidth": {
          "type": "full"
        },
        "sidebarWidth": {
          "type": "px",
          "value": 298
        },
        "headerHeight": {
          "type": "px",
          "value": 50
        },
        "searchbarPlacement": "HEADER",
        "tabsPlacement": "HEADER",
        "contentAlignment": "CENTER",
        "headerPosition": "FIXED",
        "disableHeader": false
      },
      "js": {
        "files": []
      }
    },
    "apis": {
      "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3": {
        "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
        "rootPackage": {
          "endpoints": [],
          "subpackages": [
            "subpackage_tasks",
            "subpackage_uploadVideos",
            "subpackage_indexes",
            "subpackage_summarize",
            "subpackage_generate",
            "subpackage_embed",
            "subpackage_search",
            "subpackage_gist",
            "subpackage_embedNew"
          ],
          "types": [
            "type_:TasksListRequestBadRequestErrorBody",
            "type_:TasksCreateRequestBadRequestErrorBody",
            "type_:TasksRetrieveRequestBadRequestErrorBody",
            "type_:TasksDeleteRequestBadRequestErrorBody",
            "type_:TasksStatusRequestBadRequestErrorBody",
            "type_:CloudToCloudImportVideosRequestBadRequestErrorBody",
            "type_:CloudToCloudRetrieveStatusRequestBadRequestErrorBody",
            "type_:CloudToCloudRetrieveImportLogsRequestBadRequestErrorBody",
            "type_:IndexesListRequestBadRequestErrorBody",
            "type_:IndexesCreateRequestBadRequestErrorBody",
            "type_:IndexesRetrieveRequestBadRequestErrorBody",
            "type_:IndexesUpdateRequestBadRequestErrorBody",
            "type_:IndexesDeleteRequestBadRequestErrorBody",
            "type_:VideosListRequestBadRequestErrorBody",
            "type_:VideosRetrieveRequestBadRequestErrorBody",
            "type_:VideosUpdateRequestBadRequestErrorBody",
            "type_:VideosDeleteRequestBadRequestErrorBody",
            "type_:SummarizeCreateRequestBadRequestErrorBody",
            "type_:GenerateCreateRequestBadRequestErrorBody",
            "type_:EmbedCreateRequestBadRequestErrorBody",
            "type_:StatusRetrieveRequestBadRequestErrorBody",
            "type_:SearchQueryRequestBadRequestErrorBody",
            "type_:SearchRetrieveRequestBadRequestErrorBody",
            "type_:ImportLogVideoStatus",
            "type_:ImportLogFailedFilesItem",
            "type_:ImportLog",
            "type_:VideoItem",
            "type_:VideoItemFailed",
            "type_:EmbeddingResponse",
            "type_:AudioEmbeddingResponse",
            "type_:ImageEmbeddingResponse",
            "type_:TextEmbeddingResponse",
            "type_:TextEmbeddingResult",
            "type_:AudioEmbeddingResultMetadata",
            "type_:AudioEmbeddingResult",
            "type_:ImageEmbeddingResultMetadata",
            "type_:ImageEmbeddingResult",
            "type_:TextSegment",
            "type_:AudioSegment",
            "type_:ImageSegment",
            "type_:EndTime",
            "type_:StartTime",
            "type_:ScoreSearchTerms",
            "type_:Confidence",
            "type_:ModulesItem",
            "type_:Modules",
            "type_:ThumbnailUrl",
            "type_:TotalResults",
            "type_:Page",
            "type_:TotalPage",
            "type_:LimitPerPageSimple",
            "type_:TotalInnerMatches",
            "type_:NextPageToken",
            "type_:SearchPool",
            "type_:ConversationOptionAnyToVideo",
            "type_:ThresholdSearch",
            "type_:IndexEnginesItem",
            "type_:IndexSchema",
            "type_:VideoEmbeddingTaskVideoEmbeddingMetadata",
            "type_:VideoEmbeddingTaskVideoEmbedding",
            "type_:VideoEmbeddingTask",
            "type_:VideoIndexingTaskMetadata",
            "type_:VideoIndexingTask",
            "type_:VideoVectorMetadata",
            "type_:VideoVector"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_tasks:TasksListResponsePageInfo": {
            "description": "An object that provides information about pagination.",
            "name": "TasksListResponsePageInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "limit_per_page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:LimitPerPageSimple"
                    }
                  }
                },
                {
                  "key": "page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Page"
                    }
                  }
                },
                {
                  "key": "total_page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TotalPage"
                    }
                  }
                },
                {
                  "key": "total_results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TotalResults"
                    }
                  }
                }
              ]
            }
          },
          "type_tasks:TasksListResponse": {
            "name": "TasksListResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An array that contains up to `page_limit` tasks.",
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VideoIndexingTask"
                      }
                    }
                  }
                },
                {
                  "description": "An object that provides information about pagination.",
                  "key": "page_info",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_tasks:TasksListResponsePageInfo"
                    }
                  }
                }
              ]
            }
          },
          "type_tasks:TasksCreateResponse": {
            "name": "TasksCreateResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the unique identifier of your video indexing task.",
                  "key": "_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_tasks:TasksRetrieveResponseMetadata": {
            "description": "An object that contains details about the video.",
            "name": "TasksRetrieveResponseMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "duration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "height",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "width",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_tasks:TasksRetrieveResponseHls": {
            "description": "The platform returns this object only for the videos that you uploaded with the `disable_video_stream` parameter set to `false`.",
            "name": "TasksRetrieveResponseHls",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the URL of the video. You can then use this URL to access the stream over the <a href=\"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\" target=\"_blank\">HLS</a> protocol.",
                  "key": "video_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An array containing the URL of the thumbnail.",
                  "key": "thumbnail_urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the encoding status of the video file from its original format to a streamable format.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the encoding status was last updated.",
                  "key": "updated_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_tasks:TasksRetrieveResponseProcess": {
            "description": "If your video has not yet finished indexing, the platform returns the current progress of the indexing operation.",
            "name": "TasksRetrieveResponseProcess",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A value between 0 and 100 that indicates the percentage complete.",
                  "key": "percentage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Estimated time left, expressed in seconds, until the video finishes indexing.",
                  "key": "remain_seconds",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_tasks:TasksRetrieveResponse": {
            "name": "TasksRetrieveResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the video indexing task.",
                  "key": "_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the task object has been created.",
                  "key": "created_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the task object was last updated. The platform updates this field every time the video indexing task transitions to a different state.",
                  "key": "updated_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the estimated completion date and time of the video indexing process, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\").",
                  "key": "estimated_time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the unique identifier of index to which the video is uploaded.",
                  "key": "index_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the unique identifier of the video associated with the specified video indexing task. The API returns this field only when the value of the `status` field is `ready`.",
                  "key": "video_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the status of the video indexing task. See the [Task object](/reference/the-task-object) page for a list of possible statuses.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An object that contains details about the video.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_tasks:TasksRetrieveResponseMetadata"
                    }
                  }
                },
                {
                  "description": "The platform returns this object only for the videos that you uploaded with the `disable_video_stream` parameter set to `false`.",
                  "key": "hls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_tasks:TasksRetrieveResponseHls"
                    }
                  }
                },
                {
                  "description": "If your video has not yet finished indexing, the platform returns the current progress of the indexing operation.",
                  "key": "process",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_tasks:TasksRetrieveResponseProcess"
                    }
                  }
                }
              ]
            }
          },
          "type_tasks:TasksStatusResponse": {
            "name": "TasksStatusResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the index.",
                  "key": "index_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A value indicating the number of video indexing tasks for which the status is `ready`.",
                  "key": "ready",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "A value indicating the number of video indexing tasks for which the status is `validating`.",
                  "key": "validating",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "A value indicating the number of video indexing tasks for which the status is `pending`.",
                  "key": "pending",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "A value indicating the number of video indexing tasks for which the status is `failed`.",
                  "key": "failed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "A value indicating the total number of video indexing tasks in the specified index.",
                  "key": "total_result",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_uploadVideos:CloudToCloudImportVideosResponseFailedFilesItem": {
            "name": "CloudToCloudImportVideosResponseFailedFilesItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The filename of the video that failed to be imported.",
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The error message if the import failed.",
                  "key": "error_message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_uploadVideos:CloudToCloudImportVideosResponseVideosItem": {
            "name": "CloudToCloudImportVideosResponseVideosItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of a video. This identifier serves a dual purpose:\n\n- It identifies the video itself.\n- It identifies the associated video indexing task.\n\nFor example, due to this dual functionality, you can use this identifier to:\n\n- Retrieve details about the video itself by invoking the [`GET`](/reference/retrieve-video-information) method of the `/indexes/{index-id}/videos/{video-id}` endpoint.\n- Retrieve the status of the video indexing task by invoking the [`GET`](/reference/retrieve-video-indexing-task) method of the `/tasks/{task_id}` endpoint.",
                  "key": "video_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The filename of the video.",
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_uploadVideos:CloudToCloudImportVideosResponse": {
            "name": "CloudToCloudImportVideosResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A list of the video files that failed to import. Typically, these files did not meet the upload requirements. To resolve this, review the requirements listed in the [Prerequisites](/docs/upload-single-videos#prerequisites) section of the **Upload single videos page**.",
                  "key": "failed_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_uploadVideos:CloudToCloudImportVideosResponseFailedFilesItem"
                      }
                    }
                  }
                },
                {
                  "description": "A list of the videos that will be uploaded and indexed.",
                  "key": "videos",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_uploadVideos:CloudToCloudImportVideosResponseVideosItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_uploadVideos:CloudToCloudRetrieveStatusResponse": {
            "name": "CloudToCloudRetrieveStatusResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An array of filenames that haven't yet been imported.",
                  "key": "not_imported",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "An array of videos that are being validated.",
                  "key": "validating",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VideoItem"
                      }
                    }
                  }
                },
                {
                  "description": "An array of videos that are pending.",
                  "key": "pending",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VideoItem"
                      }
                    }
                  }
                },
                {
                  "description": "An array of videos that are queued for import.",
                  "key": "queued",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VideoItem"
                      }
                    }
                  }
                },
                {
                  "description": "An array of videos that are being indexed.",
                  "key": "indexing",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VideoItem"
                      }
                    }
                  }
                },
                {
                  "description": "An array of videos that have successfully been imported.",
                  "key": "ready",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VideoItem"
                      }
                    }
                  }
                },
                {
                  "description": "An array of videos that failed to import.",
                  "key": "failed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VideoItemFailed"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_uploadVideos:CloudToCloudRetrieveImportLogsResponse": {
            "name": "CloudToCloudRetrieveImportLogsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An array that contains the import logs.",
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ImportLog"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_indexes:IndexesListResponsePageInfo": {
            "description": "An object that provides information about pagination.",
            "name": "IndexesListResponsePageInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "limit_per_page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:LimitPerPageSimple"
                    }
                  }
                },
                {
                  "key": "page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Page"
                    }
                  }
                },
                {
                  "key": "total_page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TotalPage"
                    }
                  }
                },
                {
                  "key": "total_results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TotalResults"
                    }
                  }
                }
              ]
            }
          },
          "type_indexes:IndexesListResponse": {
            "name": "IndexesListResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An array that contains up to `page_limit` indexes.",
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:IndexSchema"
                      }
                    }
                  }
                },
                {
                  "description": "An object that provides information about pagination.",
                  "key": "page_info",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_indexes:IndexesListResponsePageInfo"
                    }
                  }
                }
              ]
            }
          },
          "type_indexes:IndexesCreateRequestEnginesItem": {
            "name": "IndexesCreateRequestEnginesItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the engine. The following engines are available:\n\n- **Embedding**: These engines are proficient at performing tasks such as search and classification, enabling enhanced video understanding.\n\n  - `marengo2.7`\n\n- **Generative**: These engines generate text based on your videos.\n\n  - `pegasus1.1`\n\n**NOTE:** You cannot change the engines once the index has been created.\n\nFor more details, see the [Video understanding engines](/docs/video-understanding-engines) page.",
                  "key": "engine_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "An array that specifies how the platform will process the videos uploaded to this index. For more details, see the [Engine options](/docs/engine-options) page.\n\n**NOTES:**\n\n- When using the Marengo family of video understanding engines, specify any combination of the available engine options - `visual`, `conversation`, `text_in_video`, and `logo`.\n- When using the Pegasus family of video understanding engines, specify one or both of the following engine options: `visual` and `conversation`.",
                  "key": "engine_options",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_indexes:IndexesCreateResponse": {
            "name": "IndexesCreateResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Represents the unique identifier of the `index` object.",
                  "key": "_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_indexes:IndexesRetrieveResponseEnginesItem": {
            "name": "IndexesRetrieveResponseEnginesItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the name of the engine",
                  "key": "engine_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An array of strings that contains the [engines options](/docs/engine-options) enabled for this index.",
                  "key": "engine_options",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The list of add-ons that are enabled for this index.",
                  "key": "addons",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_indexes:IndexesRetrieveResponse": {
            "name": "IndexesRetrieveResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the unique identifier of the index. It is assigned by the API when an index is created.",
                  "key": "_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the index was created.",
                  "key": "created_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the index has been updated.",
                  "key": "updated_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format \"YYYY-MM-DDTHH:mm:ssZ\", when your index will expire.\n\nIf you're on the Free plan, the platform retains your index data for 90 days from creation. After this period, the platform deletes your index data, and this action cannot be undone. To continue using your index beyond this period, consider upgrading to the Developer plan, which offers unlimited index retention. For details, see the [Upgrade your plan](/docs/manage-your-plan#upgrade-your-plan) section.\n\nIf you're on the Developer plan, this field is set to `null`, indicating no expiration.",
                  "key": "expires_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the name of the index.",
                  "key": "index_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A number representing the total duration, in seconds, of the videos in the index.",
                  "key": "total_duration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "The number of videos uploaded to this index.",
                  "key": "video_count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "An array containing the list of the [video understanding engines](/docs/video-understanding-engines) enabled for this index.",
                  "key": "engines",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_indexes:IndexesRetrieveResponseEnginesItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_summarize:Summary": {
            "description": "When the value of the `type` parameter is set to `summary`, the response is as follows:",
            "name": "Summary",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique identifier of the response.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A brief report of the main points of the video.",
                  "key": "summary",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_summarize:SummarizeCreateResponseChaptersChaptersItem": {
            "description": "An object that contains details about a chapter. Each chapter has a unique number, start time, end time, title, and summary.",
            "name": "SummarizeCreateResponseChaptersChaptersItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Represents the sequence number of the chapter. Note that this field starts at 0. Ensure to interpret it accordingly in your application.",
                  "key": "chapter_number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The starting time of the chapter, measured in seconds from the beginning of the video.",
                  "key": "start",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The ending time of the chapter, measured in seconds from the beginning of the video.",
                  "key": "end",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The title of the chapter.",
                  "key": "chapter_title",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A brief summary describing the content of the chapter.",
                  "key": "chapter_summary",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_summarize:Chapter": {
            "description": "When the value of the `type` parameter is set to `chapter`, the response is as follows:",
            "name": "Chapter",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique identifier of the response.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An array that contains details about the detected chapters and their content.",
                  "key": "chapters",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_summarize:SummarizeCreateResponseChaptersChaptersItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_summarize:SummarizeCreateResponseHighlightsHighlightsItem": {
            "description": "An object that provides a brief snapshot of a specific part of the video.",
            "name": "SummarizeCreateResponseHighlightsHighlightsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The starting time of the highlight, measured in seconds from the beginning of the video.",
                  "key": "start",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The ending time of the highlight, measured in seconds from the beginning of the video.",
                  "key": "end",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The tile of the highlight.",
                  "key": "highlight",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A brief description that captures the essence of this part of the video.",
                  "key": "highlight_summary",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_summarize:Highlight": {
            "description": "When the value of the `type` parameter is set to `highlight`, the response is as follows:",
            "name": "Highlight",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique identifier of the response.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An array that contains the highlights.",
                  "key": "highlights",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_summarize:SummarizeCreateResponseHighlightsHighlightsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_summarize:SummarizeCreateResponse": {
            "name": "SummarizeCreateResponse",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "description": "When the value of the `type` parameter is set to `summary`, the response is as follows:\n",
                  "type": {
                    "type": "id",
                    "value": "type_summarize:Summary"
                  },
                  "displayName": "Summary"
                },
                {
                  "description": "When the value of the `type` parameter is set to `chapter`, the response is as follows:\n",
                  "type": {
                    "type": "id",
                    "value": "type_summarize:Chapter"
                  },
                  "displayName": "Chapter"
                },
                {
                  "description": "When the value of the `type` parameter is set to `highlight`, the response is as follows:\n",
                  "type": {
                    "type": "id",
                    "value": "type_summarize:Highlight"
                  },
                  "displayName": "Highlight"
                }
              ]
            }
          },
          "type_generate:GenerateCreateResponseData": {
            "description": "When the value of the `stream` parameter is set to `false`, the response is as follows:",
            "name": "GenerateCreateResponseData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique identifier of the response.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The generated text based on the prompt you provided.",
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_generate:GenerateCreateResponseOneZeroMetadata": {
            "description": "An object containing metadata about the stream.",
            "name": "GenerateCreateResponseOneZeroMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A unique identifier for the generation session.",
                  "key": "generation_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_generate:GenerateCreateResponseOneZero": {
            "description": "Indicates the beginning of the stream.",
            "name": "GenerateCreateResponseOneZero",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "This field is always set to `stream_start` for this event.",
                  "key": "event_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An object containing metadata about the stream.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_generate:GenerateCreateResponseOneZeroMetadata"
                    }
                  }
                }
              ]
            }
          },
          "type_generate:GenerateCreateResponseOneText": {
            "description": "Contains a fragment of generated text. Note that text fragments may be split at arbitrary points, not necessarily at word or sentence boundaries.",
            "name": "GenerateCreateResponseOneText",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "This field is always set to `text_generation` for this event.",
                  "key": "event_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A fragment of the generated text.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_generate:GenerateCreateResponseOneEventTypeMetadata": {
            "description": "An object containing metadata about the stream.",
            "name": "GenerateCreateResponseOneEventTypeMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The same unique identifier provided in the `stream_start` event.",
                  "key": "generation_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_generate:GenerateCreateResponseOneEventType": {
            "description": "Indicates the end of the stream.",
            "name": "GenerateCreateResponseOneEventType",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "This field is always set to `stream_end` for this event.",
                  "key": "event_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An object containing metadata about the stream.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_generate:GenerateCreateResponseOneEventTypeMetadata"
                    }
                  }
                }
              ]
            }
          },
          "type_generate:GenerateCreateResponseOne": {
            "description": "When the value of the `stream` parameter is set to `true`, the platform provides a streaming response in the NDJSON format.\n\nThe stream contains three types of events:\n\n1. Stream start\n2. Text generation\n3. Stream end\n\nTo integrate the response into your application, follow the guidelines below:\n\n- Parse each line of the response as a separate JSON object.\n- Check the `event_type` field to determine how to handle the event.\n- For `text_generation` events, process the `text` field as it arrives. Depending on your application's requirements, this may involve displaying the text incrementally, storing it for later use, or performing any tasks.\n- Use the `stream_start` and `stream_end` events to manage the lifecycle of your streaming session.",
            "name": "GenerateCreateResponseOne",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "description": "Indicates the beginning of the stream.\n",
                  "type": {
                    "type": "id",
                    "value": "type_generate:GenerateCreateResponseOneZero"
                  },
                  "displayName": "Generate Create Response One Zero"
                },
                {
                  "description": "Contains a fragment of generated text. Note that text fragments may be split at arbitrary points, not necessarily at word or sentence boundaries.\n",
                  "type": {
                    "type": "id",
                    "value": "type_generate:GenerateCreateResponseOneText"
                  },
                  "displayName": "Generate Create Response One Text"
                },
                {
                  "description": "Indicates the end of the stream.\n",
                  "type": {
                    "type": "id",
                    "value": "type_generate:GenerateCreateResponseOneEventType"
                  },
                  "displayName": "Generate Create Response One Event Type"
                }
              ]
            }
          },
          "type_generate:GenerateCreateResponse": {
            "name": "GenerateCreateResponse",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "description": "When the value of the `stream` parameter is set to `false`, the response is as follows:\n",
                  "type": {
                    "type": "id",
                    "value": "type_generate:GenerateCreateResponseData"
                  },
                  "displayName": "Generate Create Response Data"
                },
                {
                  "description": "When the value of the `stream` parameter is set to `true`, the platform provides a streaming response in the NDJSON format.\n\nThe stream contains three types of events:\n1. Stream start\n2. Text generation\n3. Stream end\n\nTo integrate the response into your application, follow the guidelines below:\n- Parse each line of the response as a separate JSON object.\n- Check the `event_type` field to determine how to handle the event.\n- For `text_generation` events, process the `text` field as it arrives. Depending on your application's requirements, this may involve displaying the text incrementally, storing it for later use, or performing any tasks.\n- Use the `stream_start` and `stream_end` events to manage the lifecycle of your streaming session.\n",
                  "type": {
                    "type": "id",
                    "value": "type_generate:GenerateCreateResponseOne"
                  },
                  "displayName": "Generate Create Response One"
                }
              ]
            }
          },
          "type_search:SearchQueryRequestSearchOptionsItem": {
            "name": "SearchQueryRequestSearchOptionsItem",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "visual"
                },
                {
                  "value": "conversation"
                },
                {
                  "value": "text_in_video"
                },
                {
                  "value": "logo"
                }
              ]
            }
          },
          "type_search:SearchQueryRequestGroupBy": {
            "description": "Use this parameter to group or ungroup items in a response. It can take one of the following values:\n\n- `video`: The platform will group the matching video clips in the response by video.\n- `clip`: The matching video clips in the response will not be grouped.\n\n**Default:** `clip`",
            "name": "SearchQueryRequestGroupBy",
            "shape": {
              "type": "enum",
              "default": "clip",
              "values": [
                {
                  "value": "video"
                },
                {
                  "value": "clip"
                }
              ]
            }
          },
          "type_search:SearchQueryRequestSortOption": {
            "description": "Use this parameter to specify the sort order for the response.\n\nWhen performing a search, the platform determines the level of confidence that each video clip matches your search terms. By default, the search results are sorted on the level of confidence in descending order.\n\nIf you set this parameter to `score` and `group_by` is set to `video`, the platform will determine the maximum value of the `score` field for each video and sort the videos in the response by the maximum value of this field. For each video, the matching video clips will be sorted by the level of confidence.\n\nIf you set this parameter to `clip_count` and `group_by` is set to `video`, the platform will sort the videos in the response by the number of clips. For each video, the matching video clips will be sorted by the level of confidence. You can use `clip_count` only when the matching video clips are sorted by video.\n\n**Default:** `score`",
            "name": "SearchQueryRequestSortOption",
            "shape": {
              "type": "enum",
              "default": "score",
              "values": [
                {
                  "value": "score"
                },
                {
                  "value": "clip_count"
                }
              ]
            }
          },
          "type_search:SearchQueryRequestOperator": {
            "description": "When you perform a search specifying multiple [sources of information](/docs/search-options), you can use the this parameter to broaden or narrow your search.\n\nThe following logical operators are supported:\n\n- `or`\n\n- `and`\n\nFor details and examples, see the [Using multiple sources of information](/docs/search-single-queries#using-multiple-sources-of-information) section.\n\n**Default**: `or`.",
            "name": "SearchQueryRequestOperator",
            "shape": {
              "type": "enum",
              "default": "or",
              "values": [
                {
                  "value": "or"
                },
                {
                  "value": "and"
                }
              ]
            }
          },
          "type_search:SearchQueryResponseDataItemMetadataItem": {
            "name": "SearchQueryResponseDataItemMetadataItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string that indicates the type of match (`visual`, `conversation`, `text_in_video`, or `logo`).",
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "For `conversation` and `text_in_video`, the API returns a transcription of the spoken words or the text that matches your search query.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_search:SearchQueryResponseDataItem": {
            "name": "SearchQueryResponseDataItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "score",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ScoreSearchTerms"
                    }
                  }
                },
                {
                  "key": "start",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:StartTime"
                    }
                  }
                },
                {
                  "key": "end",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EndTime"
                    }
                  }
                },
                {
                  "description": "A string representing the unique identifier of the video. Once the platform indexes a video, it assigns a unique identifier. Note that this is different from the identifier of the video indexing task.",
                  "key": "video_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An array of objects where each object contains details about a specific type of match and has the following fields:",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_search:SearchQueryResponseDataItemMetadataItem"
                      }
                    }
                  }
                },
                {
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Confidence"
                    }
                  }
                },
                {
                  "key": "thumbnail_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ThumbnailUrl"
                    }
                  }
                },
                {
                  "key": "modules",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Modules"
                    }
                  }
                }
              ]
            }
          },
          "type_search:SearchQueryResponsePageInfo": {
            "description": "An object that provides information about pagination.",
            "name": "SearchQueryResponsePageInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The maximum number of items on each page. When grouping by video, this field represents the maximum number of videos per page. Otherwise, it represents the maximum number of video clips per page.",
                  "key": "limit_per_page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the page expires.",
                  "key": "page_expired_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The total number of results. When grouping by video, this field represents the total number of video clips matching your query. Otherwise , this field represents the total number of videos.",
                  "key": "total_results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "total_inner_matches",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TotalInnerMatches"
                    }
                  }
                },
                {
                  "key": "next_page_token",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NextPageToken"
                    }
                  }
                }
              ]
            }
          },
          "type_search:SearchQueryResponse": {
            "name": "SearchQueryResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An array that contains your search results. For each match found, the engine returns the following fields:",
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_search:SearchQueryResponseDataItem"
                      }
                    }
                  }
                },
                {
                  "description": "An object that provides information about pagination.",
                  "key": "page_info",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_search:SearchQueryResponsePageInfo"
                    }
                  }
                },
                {
                  "key": "search_pool",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SearchPool"
                    }
                  }
                }
              ]
            }
          },
          "type_search:SearchRetrieveResponseDataItemMetadataItem": {
            "name": "SearchRetrieveResponseDataItemMetadataItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string that indicates the type of match (`visual`, `conversation`, `text_in_video`, or `logo`).",
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "For `conversation` and `text_in_video`, the API returns a transcription of the spoken words or the text that matches your search query.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_search:SearchRetrieveResponseDataItem": {
            "name": "SearchRetrieveResponseDataItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "score",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ScoreSearchTerms"
                    }
                  }
                },
                {
                  "key": "start",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:StartTime"
                    }
                  }
                },
                {
                  "key": "end",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EndTime"
                    }
                  }
                },
                {
                  "description": "A string representing the unique identifier of the video. Once the platform indexes a video, it assigns a unique identifier. Note that this is different from the identifier of the video indexing task.",
                  "key": "video_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An array of objects where each object contains details about a specific type of match and has the following fields:",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_search:SearchRetrieveResponseDataItemMetadataItem"
                      }
                    }
                  }
                },
                {
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Confidence"
                    }
                  }
                },
                {
                  "key": "thumbnail_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ThumbnailUrl"
                    }
                  }
                },
                {
                  "key": "modules",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Modules"
                    }
                  }
                }
              ]
            }
          },
          "type_search:SearchRetrieveResponsePageInfo": {
            "description": "An object that provides information about pagination.",
            "name": "SearchRetrieveResponsePageInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The maximum number of items on each page. When grouping by video, this field represents the maximum number of videos per page. Otherwise, it represents the maximum number of video clips per page.",
                  "key": "limit_per_page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the page expires.",
                  "key": "page_expired_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The total number of results. When grouping by video, this field represents the total number of video clips matching your query. Otherwise , this field represents the total number of videos.",
                  "key": "total_results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "total_inner_matches",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TotalInnerMatches"
                    }
                  }
                },
                {
                  "key": "next_page_token",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NextPageToken"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the previous page.",
                  "key": "prev_page_token",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_search:SearchRetrieveResponse": {
            "name": "SearchRetrieveResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An array that contains your search results. For each match found, the engine returns the following fields.",
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_search:SearchRetrieveResponseDataItem"
                      }
                    }
                  }
                },
                {
                  "description": "An object that provides information about pagination.",
                  "key": "page_info",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_search:SearchRetrieveResponsePageInfo"
                    }
                  }
                },
                {
                  "key": "search_pool",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SearchPool"
                    }
                  }
                }
              ]
            }
          },
          "type_embed/tasks:TasksListResponsePageInfo": {
            "description": "An object that provides information about pagination.",
            "name": "TasksListResponsePageInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "limit_per_page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:LimitPerPageSimple"
                    }
                  }
                },
                {
                  "key": "page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Page"
                    }
                  }
                },
                {
                  "key": "total_page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TotalPage"
                    }
                  }
                },
                {
                  "key": "total_results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TotalResults"
                    }
                  }
                }
              ]
            }
          },
          "type_embed/tasks:TasksListResponse": {
            "name": "TasksListResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An array that contains up to `page_limit` video embedding tasks.",
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VideoEmbeddingTask"
                      }
                    }
                  }
                },
                {
                  "description": "An object that provides information about pagination.",
                  "key": "page_info",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_embed/tasks:TasksListResponsePageInfo"
                    }
                  }
                }
              ]
            }
          },
          "type_embed/tasks:TasksCreateResponse": {
            "name": "TasksCreateResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the video embedding task. You can use the identifier to:\n\n- Retrieve the status of your task by invoking the [`GET`](/reference/retrieve-video-embeding-task) method of the `/embed/tasks/{task_id}/status` endpoint.\n- Retrieve the embedding by invoking the [`GET`](/reference/retrieve-video-embeding) method of the `/embed/tasks/{task_id}` endpoint.",
                  "key": "_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_embed/tasks:TasksRetrieveResponseVideoEmbeddingMetadata": {
            "description": "An object containing metadata about the video.",
            "name": "TasksRetrieveResponseVideoEmbeddingMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the video file. The platform returns this field when you upload a video from your local file system.",
                  "key": "input_filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the video. The platform returns this field when you upload a video from a publicly accessible URL.",
                  "key": "input_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The duration for each clip in seconds, as specified by the `video_clip_length` parameter of the [`POST`](/reference/create-video-embeding-task) method of the `/embed/task` endpoint. Note that the platform automatically truncates video segments shorter than 2 seconds. For a 31-second video divided into 6-second segments, the final 1-second segment will be truncated. This truncation only applies to the last segment if it does not meet the minimum length requirement of 2 seconds.",
                  "key": "video_clip_length",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "The scope you've specified in the request. It can take one of the following values: ['clip'] or ['clip', 'video'].",
                  "key": "video_embedding_scope",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The total duration of the video in seconds.",
                  "key": "duration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_embed/tasks:TasksRetrieveResponseVideoEmbeddingSegmentsItem": {
            "name": "TasksRetrieveResponseVideoEmbeddingSegmentsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The start time of the video segment for this embedding. If the embedding scope is `video`, this field equals `0`.",
                  "key": "start_offset_sec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "The end time of the video segment for this embedding. If the embedding scope is `video`, this field equals the duration of the video.",
                  "key": "end_offset_sec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Indicates the scope of this embedding. It can take the following values:\n\n- `video`: This embedding if for the entire video.\n- `clip`: This embedding is for a specific segment.",
                  "key": "embedding_scope",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An array of floating point numbers representing the embedding. You can use this array with cosine similarity for various downstream tasks. Note that the example response was truncated for brevity.",
                  "key": "float",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_embed/tasks:TasksRetrieveResponseVideoEmbedding": {
            "description": "An object containing the generated embedding vectors and their metadata.",
            "name": "TasksRetrieveResponseVideoEmbedding",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An object containing metadata about the video.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_embed/tasks:TasksRetrieveResponseVideoEmbeddingMetadata"
                    }
                  }
                },
                {
                  "description": "An array of objects containing the embeddings for each video segment and the associated information.",
                  "key": "segments",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_embed/tasks:TasksRetrieveResponseVideoEmbeddingSegmentsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_embed/tasks:TasksRetrieveResponse": {
            "name": "TasksRetrieveResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the video embedding task.",
                  "key": "_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video embedding task was created.",
                  "key": "created_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The name of the video understanding engine the platform used to create the embedding.",
                  "key": "engine_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the status of the video indexing task. It can take one of the following values: `processing`, `ready` or `failed`.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An object containing the generated embedding vectors and their metadata.",
                  "key": "video_embedding",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_embed/tasks:TasksRetrieveResponseVideoEmbedding"
                    }
                  }
                }
              ]
            }
          },
          "type_embed/tasks/status:StatusRetrieveResponseMetadata": {
            "description": "An object containing metadata about the video.",
            "name": "StatusRetrieveResponseMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the video file. The platform returns this field when you upload a video from your local file system.",
                  "key": "input_filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the video. The platform returns this field when you upload a video from a publicly accessible URL.",
                  "key": "input_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The duration for each clip in seconds, as specified by the `video_clip_length` parameter of the [`POST`](/reference/create-video-embeding-task) method of the `/embed/task` endpoint. Note that the platform automatically truncates video segments shorter than 2 seconds. For a 31-second video divided into 6-second segments, the final 1-second segment will be truncated. This truncation only applies to the last segment if it does not meet the minimum length requirement of 2 seconds.",
                  "key": "video_clip_length",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "The scope of the video embedding. It can take one of the following values: ['clip'] or ['clip', 'video'].",
                  "key": "video_embedding_scope",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The total duration of the video in seconds.",
                  "key": "duration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_embed/tasks/status:StatusRetrieveResponse": {
            "name": "StatusRetrieveResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the video embedding task.",
                  "key": "_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the status of the video indexing task. It can take one of the following values: `processing`, `ready` or `failed`.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The name of the video understanding engine the platform used to create the embedding.",
                  "key": "engine_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An object containing metadata about the video.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_embed/tasks/status:StatusRetrieveResponseMetadata"
                    }
                  }
                }
              ]
            }
          },
          "type_indexes/videos:VideosListRequestMetadataValue": {
            "name": "VideosListRequestMetadataValue",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_indexes/videos:VideosListResponsePageInfo": {
            "description": "An object that provides information about pagination.",
            "name": "VideosListResponsePageInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "limit_per_page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:LimitPerPageSimple"
                    }
                  }
                },
                {
                  "key": "page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Page"
                    }
                  }
                },
                {
                  "key": "total_page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TotalPage"
                    }
                  }
                },
                {
                  "key": "total_results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TotalResults"
                    }
                  }
                }
              ]
            }
          },
          "type_indexes/videos:VideosListResponse": {
            "name": "VideosListResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An array that contains up to `page_limit` videos.",
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VideoVector"
                      }
                    }
                  }
                },
                {
                  "description": "An object that provides information about pagination.",
                  "key": "page_info",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_indexes/videos:VideosListResponsePageInfo"
                    }
                  }
                }
              ]
            }
          },
          "type_indexes/videos:VideosRetrieveResponseMetadata": {
            "description": "An object that contains the information about the video.",
            "name": "VideosRetrieveResponseMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "duration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "fps",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "height",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "width",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_indexes/videos:VideosRetrieveResponseHls": {
            "description": "The platform returns this object only for the videos that you uploaded with the `disable_video_stream` parameter set to `false`.",
            "name": "VideosRetrieveResponseHls",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the URL of the video. You can then use this URL to access the stream over the <a href=\"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\" target=\"_blank\">HLS</a> protocol.",
                  "key": "video_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An array containing the URL of the thumbnail.",
                  "key": "thumbnail_urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the encoding status of the video file from its original format to a streamable format.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the encoding status was last updated.",
                  "key": "updated_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_indexes/videos:VideosRetrieveResponseEmbeddingVideoEmbeddingSegmentsItem": {
            "name": "VideosRetrieveResponseEmbeddingVideoEmbeddingSegmentsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The start time of the video segment for this embedding.",
                  "key": "start_offset_sec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "The end time of the video segment for this embedding.",
                  "key": "end_offset_sec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Indicates the scope of this embedding.",
                  "key": "embedding_scope",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An array of floating point numbers representing the embeddings for each individual segment. Each segment is between 2 and 10 seconds. You can use this array with cosine similarity for various downstream tasks. Note that the example response was truncated for brevity.",
                  "key": "float",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_indexes/videos:VideosRetrieveResponseEmbeddingVideoEmbedding": {
            "description": "An object that contains the embeddings.",
            "name": "VideosRetrieveResponseEmbeddingVideoEmbedding",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An array of objects that contains the embeddings for each individual segment.",
                  "key": "segments",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_indexes/videos:VideosRetrieveResponseEmbeddingVideoEmbeddingSegmentsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_indexes/videos:VideosRetrieveResponseEmbedding": {
            "description": "Contains the embedding and the associated information. The platform returns this field when the `embed` query parameter is set to `true` in the request.",
            "name": "VideosRetrieveResponseEmbedding",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the video understanding engine used to create the embedding.",
                  "key": "engine_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An object that contains the embeddings.",
                  "key": "video_embedding",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_indexes/videos:VideosRetrieveResponseEmbeddingVideoEmbedding"
                    }
                  }
                }
              ]
            }
          },
          "type_indexes/videos:VideosRetrieveResponse": {
            "name": "VideosRetrieveResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the video.",
                  "key": "_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task was created.",
                  "key": "created_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the corresponding video indexing task was last updated. The platform updates this field every time the corresponding video indexing task transitions to a different state.",
                  "key": "updated_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task has been completed.",
                  "key": "indexed_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An object that contains the information about the video.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_indexes/videos:VideosRetrieveResponseMetadata"
                    }
                  }
                },
                {
                  "description": "The platform returns this object only for the videos that you uploaded with the `disable_video_stream` parameter set to `false`.",
                  "key": "hls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_indexes/videos:VideosRetrieveResponseHls"
                    }
                  }
                },
                {
                  "description": "Contains the embedding and the associated information. The platform returns this field when the `embed` query parameter is set to `true` in the request.",
                  "key": "embedding",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_indexes/videos:VideosRetrieveResponseEmbedding"
                    }
                  }
                }
              ]
            }
          },
          "type_:TasksListRequestBadRequestErrorBody": {
            "name": "TasksListRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TasksCreateRequestBadRequestErrorBody": {
            "name": "TasksCreateRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TasksRetrieveRequestBadRequestErrorBody": {
            "name": "TasksRetrieveRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TasksDeleteRequestBadRequestErrorBody": {
            "name": "TasksDeleteRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TasksStatusRequestBadRequestErrorBody": {
            "name": "TasksStatusRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CloudToCloudImportVideosRequestBadRequestErrorBody": {
            "name": "CloudToCloudImportVideosRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CloudToCloudRetrieveStatusRequestBadRequestErrorBody": {
            "name": "CloudToCloudRetrieveStatusRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CloudToCloudRetrieveImportLogsRequestBadRequestErrorBody": {
            "name": "CloudToCloudRetrieveImportLogsRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:IndexesListRequestBadRequestErrorBody": {
            "name": "IndexesListRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:IndexesCreateRequestBadRequestErrorBody": {
            "name": "IndexesCreateRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:IndexesRetrieveRequestBadRequestErrorBody": {
            "name": "IndexesRetrieveRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:IndexesUpdateRequestBadRequestErrorBody": {
            "name": "IndexesUpdateRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:IndexesDeleteRequestBadRequestErrorBody": {
            "name": "IndexesDeleteRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideosListRequestBadRequestErrorBody": {
            "name": "VideosListRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideosRetrieveRequestBadRequestErrorBody": {
            "name": "VideosRetrieveRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideosUpdateRequestBadRequestErrorBody": {
            "name": "VideosUpdateRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideosDeleteRequestBadRequestErrorBody": {
            "name": "VideosDeleteRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SummarizeCreateRequestBadRequestErrorBody": {
            "name": "SummarizeCreateRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:GenerateCreateRequestBadRequestErrorBody": {
            "name": "GenerateCreateRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EmbedCreateRequestBadRequestErrorBody": {
            "name": "EmbedCreateRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:StatusRetrieveRequestBadRequestErrorBody": {
            "name": "StatusRetrieveRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchQueryRequestBadRequestErrorBody": {
            "name": "SearchQueryRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error, intended to be suitable for display in a user interface.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the relevant documentation page.",
                  "key": "docs_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchRetrieveRequestBadRequestErrorBody": {
            "name": "SearchRetrieveRequestBadRequestErrorBody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Represents the code associated with the error. See the [Error codes](/reference/error-codes) page for details.",
                  "key": "error_code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable string describing the error.",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ImportLogVideoStatus": {
            "description": "Counts of files in different statuses. See the [Task object](/reference/the-task-object) page for details on each status.",
            "name": "ImportLogVideoStatus",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "ready",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "validating",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "queued",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "pending",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "indexing",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "failed",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:ImportLogFailedFilesItem": {
            "name": "ImportLogFailedFilesItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the video file that failed to import.",
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable error message.",
                  "key": "error_message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ImportLog": {
            "description": "An object that contains information about the import process.",
            "name": "ImportLog",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the index associated with this import.",
                  "key": "index_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The name of the index associated with this import.",
                  "key": "index_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format when the import process was initiated.",
                  "key": "created_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "The date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format, when the platform completed importing your videos. A `null` value indicates that the import process is still ongoing.",
                  "key": "ended_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "Counts of files in different statuses. See the [Task object](/reference/the-task-object) page for details on each status.",
                  "key": "video_status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ImportLogVideoStatus"
                    }
                  }
                },
                {
                  "description": "An array containing the video files that failed to import, along with details about the error.",
                  "key": "failed_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ImportLogFailedFilesItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoItem": {
            "description": "An object that contains information about a video file.",
            "name": "VideoItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the video.",
                  "key": "video_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The name of the video file.",
                  "key": "filename",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the video was added to the import process.",
                  "key": "created_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoItemFailed": {
            "description": "An object that contains information about a video file that failed to import.",
            "name": "VideoItemFailed",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the video.",
                  "key": "video_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The name of the video file.",
                  "key": "filename",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the video was added to the import process.",
                  "key": "created_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "A human-readable error message.",
                  "key": "error_message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:EmbeddingResponse": {
            "description": "An object that contains the generated embedding vector and associated information.",
            "name": "EmbeddingResponse",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:AudioEmbeddingResponse"
                  },
                  "displayName": "Audio Embedding Response"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ImageEmbeddingResponse"
                  },
                  "displayName": "Image Embedding Response"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:TextEmbeddingResponse"
                  },
                  "displayName": "Text Embedding Response"
                }
              ]
            }
          },
          "type_:AudioEmbeddingResponse": {
            "description": "An object that contains the generated audio embedding vector and associated information.",
            "name": "AudioEmbeddingResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "audio_embedding",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AudioEmbeddingResult"
                    }
                  }
                }
              ]
            }
          },
          "type_:ImageEmbeddingResponse": {
            "description": "An object that contains the generated image embedding vector and associated information.",
            "name": "ImageEmbeddingResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "image_embedding",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ImageEmbeddingResult"
                  }
                }
              ]
            }
          },
          "type_:TextEmbeddingResponse": {
            "description": "An object that contains the generated text embedding vector and associated information.",
            "name": "TextEmbeddingResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "text_embedding",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TextEmbeddingResult"
                  }
                }
              ]
            }
          },
          "type_:TextEmbeddingResult": {
            "description": "An object containing the generated embedding vector.",
            "name": "TextEmbeddingResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Error message if the embedding generation failed.",
                  "key": "error_message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An object that contains the embedding.",
                  "key": "segments",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:TextSegment"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:AudioEmbeddingResultMetadata": {
            "description": "Metadata about the embedding.",
            "name": "AudioEmbeddingResultMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The URL of the audio file used to generate the embedding. Present if a URL was provided in the request.",
                  "key": "input_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The name of the audio file used to generate the embedding. Present if a file was provided in the request.",
                  "key": "input_filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:AudioEmbeddingResult": {
            "description": "An object that contains the generated embedding vector and associated information.",
            "name": "AudioEmbeddingResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An object that contains the embedding and its start time.",
                  "key": "segments",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:AudioSegment"
                      }
                    }
                  }
                },
                {
                  "description": "Error message if the embedding generation failed.",
                  "key": "error_message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Metadata about the embedding.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AudioEmbeddingResultMetadata"
                    }
                  }
                }
              ]
            }
          },
          "type_:ImageEmbeddingResultMetadata": {
            "description": "Metadata about the embedding.",
            "name": "ImageEmbeddingResultMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The URL of the image file used to generate the embedding. Present if a URL was provided in the request.",
                  "key": "input_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The name of the image file used to generate the embedding. Present if a file was provided in the request.",
                  "key": "input_filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ImageEmbeddingResult": {
            "description": "An object containing the generated embedding vector and associated information.",
            "name": "ImageEmbeddingResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Error message if the embedding generation failed.",
                  "key": "error_message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An object that contains the embedding.",
                  "key": "segments",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ImageSegment"
                      }
                    }
                  }
                },
                {
                  "description": "Metadata about the embedding.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ImageEmbeddingResultMetadata"
                    }
                  }
                }
              ]
            }
          },
          "type_:TextSegment": {
            "description": "An object that contains the text embedding.",
            "name": "TextSegment",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An array of floating point numbers representing the embedding. You can use this array with cosine similarity for various downstream tasks. Note that the example response was truncated for brevity.",
                  "key": "float",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:AudioSegment": {
            "description": "An object that contains the audio embedding and its start time.",
            "name": "AudioSegment",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An array of floating point numbers representing the embedding. You can use this array with cosine similarity for various downstream tasks. Note that the example response was truncated for brevity.",
                  "key": "float",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The start time, in seconds, from which the platform generated the audio embedding.",
                  "key": "start_offset_sec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ImageSegment": {
            "description": "An object that contains the image embedding.",
            "name": "ImageSegment",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An array of floating point numbers representing the embedding. You can use this array with cosine similarity for various downstream tasks. Note that the example response was truncated for brevity.",
                  "key": "float",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EndTime": {
            "description": "The end time of the matching video clip, expressed in seconds.",
            "name": "EndTime",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          "type_:StartTime": {
            "description": "The start time of the matching video clip, expressed in seconds.",
            "name": "StartTime",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          "type_:ScoreSearchTerms": {
            "description": "A quantitative value determined by the AI engine representing the level of confidence that the results match your search terms.",
            "name": "ScoreSearchTerms",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:Confidence": {
            "description": "A qualitative indicator based on the value of the `score` field. This field can take one of the following values:\n\n- `high`\n- `medium`\n- `low`\n- `extremely low`",
            "name": "Confidence",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:ModulesItem": {
            "description": "Each element is a dictionary.",
            "name": "ModulesItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The source of information for which the video clip matched your search terms. It can take one of the following values: `conversation`, `visual`, `text_in_video`, and `logo`.",
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The confidence level that the result is accurate.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Modules": {
            "description": "When the request specifies multiple sources of information, this array indicates the confidence level that the result is accurate for each matching source of information.",
            "name": "Modules",
            "shape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ModulesItem"
                }
              }
            }
          },
          "type_:ThumbnailUrl": {
            "description": "If thumbnail generation has been enabled for this index, the platform returns a string representing the URL of the thumbnail. Note that the URL expires in one hour.",
            "name": "ThumbnailUrl",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:TotalResults": {
            "description": "The total number of results.",
            "name": "TotalResults",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          "type_:Page": {
            "description": "The page you retrieved.",
            "name": "Page",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          "type_:TotalPage": {
            "description": "The total number of pages.",
            "name": "TotalPage",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          "type_:LimitPerPageSimple": {
            "description": "The maximum number of items on each page.",
            "name": "LimitPerPageSimple",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          "type_:TotalInnerMatches": {
            "description": "When grouping by video, the platform return this field that shows the total number of video clips matching your query.",
            "name": "TotalInnerMatches",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          "type_:NextPageToken": {
            "description": "The unique identifier of the next page.",
            "name": "NextPageToken",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:SearchPool": {
            "description": "An object that contains details about the index you queried.",
            "name": "SearchPool",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The number of videos in the index you queried.",
                  "key": "total_count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The total duration of the videos.",
                  "key": "total_duration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the index.",
                  "key": "index_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ConversationOptionAnyToVideo": {
            "description": "Specifies the type of match the platform performs.\n\nWhen using image queries:\n\n- This parameter must be set to `semantic`.\n\nWhen using text queries, supported values are:\n\n- `semantic`\n- `exact_match`\n  For details, see the [Conversation option](/docs/conversation-option) page.\n\n**Default:** `semantic`",
            "name": "ConversationOptionAnyToVideo",
            "shape": {
              "type": "enum",
              "default": "semantic",
              "values": [
                {
                  "value": "semantic"
                },
                {
                  "value": "exact_match"
                }
              ]
            }
          },
          "type_:ThresholdSearch": {
            "description": "Use this parameter to filter on the level of confidence that the results match your query.\n\n**Default:** `low`",
            "name": "ThresholdSearch",
            "shape": {
              "type": "enum",
              "default": "low",
              "values": [
                {
                  "value": "high"
                },
                {
                  "value": "medium"
                },
                {
                  "value": "low"
                },
                {
                  "value": "none"
                }
              ]
            }
          },
          "type_:IndexEnginesItem": {
            "name": "IndexEnginesItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the name of the engine.",
                  "key": "engine_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An array of strings that contains the [engine options](/docs/engine-options) enabled for this index.",
                  "key": "engine_options",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The list of the add-ons that are enabled for this index.",
                  "key": "addons",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:IndexSchema": {
            "description": "An index groups one or more videos stored as vectors and is the most granular level at which you can perform a search.",
            "name": "IndexSchema",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the unique identifier of the index. It is assigned by the API when an index is created.",
                  "key": "_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the index was created.",
                  "key": "created_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the index has been updated.",
                  "key": "updated_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when your index will expire.\n\nIf you're on the Free plan, the platform retains your index data for 90 days from creation. After this period, the platform deletes your index data, and this action cannot be undone. To continue using your index beyond this period, consider upgrading to the Developer plan, which offers unlimited index retention. For details, see the [Upgrade your plan](/docs/manage-your-plan#upgrade-your-plan) section.\n\nIf you're on the Developer plan, this field is set to `null`, indicating no expiration.",
                  "key": "expires_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the name of the index.",
                  "key": "index_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A number representing the total duration, in seconds, of the videos in the index.",
                  "key": "total_duration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "The number of videos uploaded to this index.",
                  "key": "video_count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "An array containing the list of the [video understanding engines](/docs/video-understanding-engines) enabled for this index.",
                  "key": "engines",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:IndexEnginesItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoEmbeddingTaskVideoEmbeddingMetadata": {
            "description": "An object containing metadata about the video.",
            "name": "VideoEmbeddingTaskVideoEmbeddingMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the video file. The platform returns this field when you upload a video from your local file system.",
                  "key": "input_filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The URL of the video. The platform returns this field when you upload a video from a publicly accessible URL.",
                  "key": "input_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The duration for each clip in seconds, as specified by the `video_clip_length` parameter of the [`POST`](/reference/create-video-embeding-task) method of the `/embed/task` endpoint. Note that the platform automatically truncates video segments shorter than 2 seconds. For a 31-second video divided into 6-second segments, the final 1-second segment will be truncated. This truncation only applies to the last segment if it does not meet the minimum length requirement of 2 seconds.",
                  "key": "video_clip_length",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "The scope you've specified in the request. It can take one of the following values: ['clip'] or ['clip', 'video'].",
                  "key": "video_embedding_scope",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The total duration of the video in seconds.",
                  "key": "duration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoEmbeddingTaskVideoEmbedding": {
            "description": "An object containing the metadata associated with the embedding.",
            "name": "VideoEmbeddingTaskVideoEmbedding",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An object containing metadata about the video.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VideoEmbeddingTaskVideoEmbeddingMetadata"
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoEmbeddingTask": {
            "description": "A video embedding task that describes the status of the task and the metadata about the video.",
            "name": "VideoEmbeddingTask",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the video embedding task.",
                  "key": "_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The name of the video understanding engine the platform used to create the embedding.",
                  "key": "engine_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the status of the video indexing task. It can take one of the following values: `processing`, `ready` or `failed`.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video embedding task was created.",
                  "key": "created_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "An object containing the metadata associated with the embedding.",
                  "key": "video_embedding",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VideoEmbeddingTaskVideoEmbedding"
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoIndexingTaskMetadata": {
            "description": "An object that contains information about the video.",
            "name": "VideoIndexingTaskMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "duration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "height",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "width",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoIndexingTask": {
            "description": "A video indexing task that describes the status of the task and the metadata about the video.",
            "name": "VideoIndexingTask",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the unique identifier of the task. It is assigned by the platform when a new task is created.",
                  "key": "_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the task was created.",
                  "key": "created_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the task object was last updated. The platform updates this field every time the video indexing task transitions to a different state.",
                  "key": "updated_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the status of the video indexing task. See the [Task object](/reference/the-task-object) page for a list of possible statuses.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the estimated completion date and time of the video indexing task, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\").",
                  "key": "estimated_time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string representing the unique identifier of the index to which the video must be uploaded.",
                  "key": "index_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An object that contains information about the video.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VideoIndexingTaskMetadata"
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoVectorMetadata": {
            "description": "An object that contains information about the video.",
            "name": "VideoVectorMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "duration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "fps",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "width",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "height",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoVector": {
            "description": "A video object that contains information about the video.",
            "name": "VideoVector",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A string representing the unique identifier of a video. The platform creates a new `video_vector` object and assigns it a unique identifier when the video has successfully been indexed. Note that video IDs are different from task IDs.",
                  "key": "_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task was created.",
                  "key": "created_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task object was last updated. The platform updates this field every time the video indexing task transitions to a different state.",
                  "key": "updated_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task has been completed.",
                  "key": "indexed_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An object that contains information about the video.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VideoVectorMetadata"
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_tasks": {
            "subpackageId": "subpackage_tasks",
            "name": "tasks",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list",
                "migratedFromUrlSlugs": ["list-video-indexing-tasks"],
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_tasks.list",
                "name": "List video indexing tasks",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/tasks"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "A number that identifies the page to retrieve.\n\n**Default**: `1`.",
                    "key": "page",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The number of items to return on each page.\n\n**Default**: `10`.\n**Max**: `50`.",
                    "key": "page_limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The field to sort on. The following options are available:\n\n- `updated_at`: Sorts by the time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the item was updated.\n- `created_at`: Sorts by the time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the item was created.\n\n**Default**: `created_at`.",
                    "key": "sort_by",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The sorting direction. The following options are available:\n\n- `asc`\n- `desc`\n\n**Default**: `desc`.",
                    "key": "sort_option",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by the unique identifier of a video indexing task.",
                    "key": "_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by the unique identifier of an index.",
                    "key": "index_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by filename.",
                    "key": "filename",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by duration. Expressed in seconds.",
                    "key": "duration",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by width.",
                    "key": "width",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by height.",
                    "key": "height",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter video indexing tasks by the creation date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the video indexing tasks that were created on the specified date at or after the given time.",
                    "key": "created_at",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter video indexing tasks by the last update date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the video indexing tasks that were updated on the specified date at or after the given time.",
                    "key": "updated_at",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter video indexing tasks by the estimated completion date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the video indexing tasks estimated to be completed on the specified date at or after the given time.",
                    "key": "estimated_time",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_tasks:TasksListResponse"
                    }
                  },
                  "description": "The video indexing tasks have successfully been retrieved."
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:TasksListRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/tasks",
                    "pathParameters": {},
                    "queryParameters": {
                      "sort_by": "created_at",
                      "sort_option": "desc",
                      "_id": "663da73b31cdd0c1f638a8e6",
                      "index_id": "630aff993fcee0532cb809d0",
                      "filename": "01.mp4",
                      "created_at": "2024-03-01T00:00:00Z",
                      "updated_at": "2024-03-01T00:00:00Z",
                      "estimated_time": "2024-03-01T00:00:00Z"
                    },
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [
                        {
                          "_id": "62a17bf847f5678267ec10cc",
                          "created_at": "2022-06-09T04:50:00.879Z",
                          "updated_at": "2022-06-09T04:55:57.256Z",
                          "status": "ready",
                          "estimated_time": "2022-06-09T04:55:53.746Z",
                          "index_id": "62a0906d47f5678267ec10a6",
                          "metadata": {
                            "duration": 531.998133,
                            "filename": "01.mp4",
                            "height": 400,
                            "width": 854
                          }
                        },
                        {
                          "_id": "62a17bce47f5678267ec10c6",
                          "created_at": "2022-06-09T04:49:20.001Z",
                          "updated_at": "2022-06-09T04:54:10.345Z",
                          "status": "ready",
                          "estimated_time": "2022-06-09T04:53:59.772Z",
                          "index_id": "62a0906d47f5678267ec10a6",
                          "metadata": {
                            "duration": 741.875,
                            "filename": "02.mp4",
                            "height": 480,
                            "width": 854
                          }
                        }
                      ],
                      "page_info": {
                        "limit_per_page": 10,
                        "page": 1,
                        "total_page": 1,
                        "total_results": 2
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.tasks.list()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.list()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.list();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [
                          {
                            "_id": "62a17bf847f5678267ec10cc",
                            "created_at": "2022-06-09T04:50:00.879Z",
                            "updated_at": "2022-06-09T04:55:57.256Z",
                            "status": "ready",
                            "estimated_time": "2022-06-09T04:55:53.746Z",
                            "index_id": "62a0906d47f5678267ec10a6",
                            "metadata": {
                              "duration": 531.998133,
                              "filename": "01.mp4",
                              "height": 400,
                              "width": 854
                            }
                          },
                          {
                            "_id": "62a17bce47f5678267ec10c6",
                            "created_at": "2022-06-09T04:49:20.001Z",
                            "updated_at": "2022-06-09T04:54:10.345Z",
                            "status": "ready",
                            "estimated_time": "2022-06-09T04:53:59.772Z",
                            "index_id": "62a0906d47f5678267ec10a6",
                            "metadata": {
                              "duration": 741.875,
                              "filename": "02.mp4",
                              "height": 480,
                              "width": 854
                            }
                          }
                        ],
                        "page_info": {
                          "limit_per_page": 10,
                          "page": 1,
                          "total_page": 1,
                          "total_results": 2
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/tasks",
                    "pathParameters": {},
                    "queryParameters": {
                      "page": 0,
                      "page_limit": 0
                    },
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.tasks.list()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.list()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.list();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method returns a list of the video indexing tasks in your account. The API returns your video indexing tasks sorted by creation date, with the newest at the top of the list.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.tasks.list(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "page=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "page",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "page_limit=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "page_limit",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "sort_by=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "sort_by",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "sort_option=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "sort_option",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "index_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "filename=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "filename",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "duration=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "duration",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "width=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "width",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "height=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "height",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "created_at=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "created_at",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "updated_at=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "updated_at",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "estimated_time=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "estimated_time",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.tasks.list(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "page: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "page"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "pageLimit: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "page_limit"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "sortBy: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "sort_by"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "sortOption: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "sort_option"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "id: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "indexId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "index_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "filename: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "filename"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "duration: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "duration"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "width: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "width"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "height: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "height"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "createdAt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "created_at"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "updatedAt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "updated_at"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "estimatedTime: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "estimated_time"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["create-a-video-indexing-task"],
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_tasks.create",
                "name": "Create a video indexing task",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/tasks"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "TasksCreateRequest",
                      "properties": [
                        {
                          "type": "bodyProperty",
                          "key": "index_id",
                          "valueType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          },
                          "description": "The unique identifier of the index to which the video is being uploaded.\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "provide_transcription",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean"
                              }
                            }
                          },
                          "description": "A boolean value specifying whether or not you provide a transcription for this video.\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "language",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string",
                                "default": "en"
                              }
                            }
                          },
                          "description": "Must be set to `en`."
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "video_file",
                            "isOptional": true
                          }
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "transcription_file",
                            "isOptional": true
                          }
                        },
                        {
                          "type": "bodyProperty",
                          "key": "video_url",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Specify this parameter to upload a video from a publicly accessible URL.\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "transcription_url",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "When the `provide_transcription` parameter is set to `true`, and you want to provide a transcription from a publicly accessible URL, use the `transcription_url` parameter to specify the URL of your transcription. The transcription must be in the SRT or VTT format.\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "disable_video_stream",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean"
                              }
                            }
                          },
                          "description": "This parameter indicates if the platform stores the video for streaming. When set to `false`, the platform stores the video, and you can retrieve its URL by calling the [`GET`](/reference/retrieve-video-information) method of the `/indexes/{index-id}/videos/{video-id}` endpoint. You can then use this URL to access the stream over the <a href=\"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\" target=\"_blank\">HLS</a> protocol.\n\n**Default:** `false`\n"
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_tasks:TasksCreateResponse"
                    }
                  },
                  "description": "A video indexing task has successfully been created."
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:TasksCreateRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "insufficient_funds",
                            "message": "Not enough free credit. Please register a payment method or contact sales@twelvelabs.io.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      },
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/tasks",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "requestBody": {
                      "index_id": "index_id"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "_id": "62a1ec6d9ea24f052b971a0f"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.tasks.create(\n        index_id=\"index_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.create(\n    index_id=\"index_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\nimport * as fs from \"fs\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.create(fs.createReadStream(\"/path/to/your/file\"), fs.createReadStream(\"/path/to/your/file\"), {\n    indexId: \"index_id\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "index_id": {
                          "type": "json",
                          "value": "index_id"
                        },
                        "provide_transcription": {
                          "type": "json"
                        },
                        "language": {
                          "type": "json"
                        },
                        "video_file": {
                          "type": "filename",
                          "value": "<file1>"
                        },
                        "transcription_file": {
                          "type": "filename",
                          "value": "<file1>"
                        },
                        "video_url": {
                          "type": "json"
                        },
                        "transcription_url": {
                          "type": "json"
                        },
                        "disable_video_stream": {
                          "type": "json"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "_id": "62a1ec6d9ea24f052b971a0f"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/tasks",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.tasks.create(\n        index_id=\"index_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.create(\n    index_id=\"index_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\nimport * as fs from \"fs\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.create(fs.createReadStream(\"/path/to/your/file\"), fs.createReadStream(\"/path/to/your/file\"), {\n    indexId: \"index_id\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "index_id": {
                          "type": "json",
                          "value": "string"
                        },
                        "provide_transcription": {
                          "type": "json"
                        },
                        "language": {
                          "type": "json"
                        },
                        "video_url": {
                          "type": "json"
                        },
                        "transcription_url": {
                          "type": "json"
                        },
                        "disable_video_stream": {
                          "type": "json"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method creates a video indexing task that uploads and indexes a video.\nEnsure your video meets the requirements in the [Prerequisites](/docs/upload-single-videos#prerequisites) section of the **Upload single videos** page.\n\nUpload options:\n\n- **Local file**: Use the `video_file` parameter.\n- **Publicly accessible URL**: Use the `video_url` parameter.\n\n**NOTES**:\n\n- The platform supports video URLs that can play without additional user interaction or custom video players. Ensure your URL points to the raw video file, not a web page containing the video. Links to third-party hosting sites, cloud storage services, or videos requiring extra steps to play are not supported.\n- This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.tasks.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "index_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "provide_transcription=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "provide_transcription",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "language=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "language",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "video_file=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "video_file",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "transcription_file=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "transcription_file",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "video_url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "video_url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "transcription_url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "transcription_url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "disable_video_stream=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "disable_video_stream",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.tasks.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": ["import fs from \"fs\";"],
                                  "templateString": "fs.createReadStream(\"/path/to/your/file\")",
                                  "isOptional": false,
                                  "templateInputs": []
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": ["import fs from \"fs\";"],
                                  "templateString": "fs.createReadStream(\"/path/to/your/file\")",
                                  "isOptional": false,
                                  "templateInputs": []
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "indexId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "index_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "provideTranscription: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "provide_transcription"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "language: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "language"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "videoUrl: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "video_url"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "transcriptionUrl: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "transcription_url"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "disableVideoStream: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "disable_video_stream"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "retrieve",
                "migratedFromUrlSlugs": ["retrieve-a-video-indexing-task"],
                "method": "GET",
                "id": "retrieve",
                "originalEndpointId": "endpoint_tasks.retrieve",
                "name": "Retrieve a video indexing task",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The unique identifier of the video indexing task to retrieve.",
                      "key": "task_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/tasks/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "task_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_tasks:TasksRetrieveResponse"
                    }
                  },
                  "description": "The specified video indexing task has successfully been retrieved."
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:TasksRetrieveRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/tasks/6298d673f1090f1100476d4c",
                    "pathParameters": {
                      "task_id": "6298d673f1090f1100476d4c"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "_id": "61e1789761c43d6d9b7362f3",
                      "created_at": "2022-01-14T13:20:22.986Z",
                      "updated_at": "2022-01-17T08:35:21.639Z",
                      "estimated_time": "2022-01-14T14:18:52.175Z",
                      "index_id": "61e165b061c43d6d9b73627b",
                      "video_id": "61e1789761c43d6d9b7362f3",
                      "status": "ready",
                      "metadata": {
                        "duration": 4334.0297,
                        "filename": "WPK3hvTr8PU.mp4",
                        "height": 360,
                        "width": 544
                      },
                      "hls": {
                        "video_url": "https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8",
                        "thumbnail_urls": [
                          "https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg"
                        ],
                        "status": "COMPLETE",
                        "updated_at": "2024-01-16T07:59:40.879Z"
                      },
                      "process": {
                        "percentage": 50,
                        "remain_seconds": 120
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.tasks.retrieve(\n        task_id=\"task_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.retrieve(\n    task_id=\"task_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.retrieve(\"task_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "_id": "61e1789761c43d6d9b7362f3",
                        "created_at": "2022-01-14T13:20:22.986Z",
                        "updated_at": "2022-01-17T08:35:21.639Z",
                        "estimated_time": "2022-01-14T14:18:52.175Z",
                        "index_id": "61e165b061c43d6d9b73627b",
                        "video_id": "61e1789761c43d6d9b7362f3",
                        "status": "ready",
                        "metadata": {
                          "duration": 4334.0297,
                          "filename": "WPK3hvTr8PU.mp4",
                          "height": 360,
                          "width": 544
                        },
                        "hls": {
                          "video_url": "https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8",
                          "thumbnail_urls": [
                            "https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg"
                          ],
                          "status": "COMPLETE",
                          "updated_at": "2024-01-16T07:59:40.879Z"
                        },
                        "process": {
                          "percentage": 50,
                          "remain_seconds": 120
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/tasks/:task_id",
                    "pathParameters": {
                      "task_id": ":task_id"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.tasks.retrieve(\n        task_id=\"task_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.retrieve(\n    task_id=\"task_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.retrieve(\"task_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method retrieves a video indexing task.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.tasks.retrieve(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "task_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "task_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.tasks.retrieve(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "task_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete",
                "migratedFromUrlSlugs": ["delete-a-video-indexing-task"],
                "method": "DELETE",
                "id": "delete",
                "originalEndpointId": "endpoint_tasks.delete",
                "name": "Delete a video indexing task",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The unique identifier of the video indexing task you want to delete.",
                      "key": "task_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/tasks/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "task_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:TasksDeleteRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/tasks/6298d673f1090f1100476d4c",
                    "pathParameters": {
                      "task_id": "6298d673f1090f1100476d4c"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.tasks.delete(\n        task_id=\"task_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.delete(\n    task_id=\"task_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.delete(\"task_id\");\n"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/tasks/:task_id",
                    "pathParameters": {
                      "task_id": ":task_id"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.tasks.delete(\n        task_id=\"task_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.delete(\n    task_id=\"task_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.delete(\"task_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This action cannot be undone.\nNote the following about deleting a video indexing task:\n\n- You can only delete video indexing tasks for which the status is `ready` or `failed`.\n- If the status of your video indexing task is `ready`, you must first delete the video vector associated with your video indexing task by calling the [`DELETE`](/reference/delete-video-information) method of the `/indexes/videos` endpoint.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.tasks.delete(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "task_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "task_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.tasks.delete(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "task_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "status",
                "migratedFromUrlSlugs": ["retrieve-tasks-by-status"],
                "method": "GET",
                "id": "status",
                "originalEndpointId": "endpoint_tasks.status",
                "name": "Retrieve tasks by status",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/tasks/status"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The unique identifier of the index for which you want to retrieve the number video indexing tasks in each status.",
                    "key": "index_id",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_tasks:TasksStatusResponse"
                    }
                  },
                  "description": "An object containing the number video indexing tasks in each status.\n"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:TasksStatusRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/tasks/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "index_id": "6298d673f1090f1100476d4c"
                    },
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "index_id": "635be12062c8def3b96b2616",
                      "ready": 7,
                      "validating": 2,
                      "pending": 0,
                      "failed": 0,
                      "total_result": 10
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.tasks.status(\n        index_id=\"index_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.status(\n    index_id=\"index_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.status({\n    indexId: \"index_id\"\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "index_id": "635be12062c8def3b96b2616",
                        "ready": 7,
                        "validating": 2,
                        "pending": 0,
                        "failed": 0,
                        "total_result": 10
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/tasks/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "index_id": "string"
                    },
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.tasks.status(\n        index_id=\"index_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.status(\n    index_id=\"index_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.status({\n    indexId: \"index_id\"\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method retrieves the number video indexing tasks in each status for the specified index.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.tasks.status(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "index_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.tasks.status(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "indexId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "index_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "transfers",
                "method": "POST",
                "id": "transfers",
                "originalEndpointId": "endpoint_tasks.transfers",
                "name": "Transfers",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/tasks/transfers"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/tasks/transfers",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.tasks.transfers()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.transfers()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\nimport * as fs from \"fs\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.transfers(fs.createReadStream(\"/path/to/your/file\"));\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.tasks.transfers(\n\t$FERN_INPUT\n)",
                      "templateInputs": [],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.tasks.transfers(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": ["import fs from \"fs\";"],
                                  "templateString": "fs.createReadStream(\"/path/to/your/file\")",
                                  "isOptional": false,
                                  "templateInputs": []
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [
              "type_tasks:TasksListResponsePageInfo",
              "type_tasks:TasksListResponse",
              "type_tasks:TasksCreateResponse",
              "type_tasks:TasksRetrieveResponseMetadata",
              "type_tasks:TasksRetrieveResponseHls",
              "type_tasks:TasksRetrieveResponseProcess",
              "type_tasks:TasksRetrieveResponse",
              "type_tasks:TasksStatusResponse"
            ],
            "subpackages": [],
            "urlSlug": "tasks",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_uploadVideos": {
            "subpackageId": "subpackage_uploadVideos",
            "name": "uploadVideos",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "cloud-to-cloud-import-videos",
                "migratedFromUrlSlugs": ["import-videos"],
                "method": "POST",
                "id": "cloud-to-cloud-import-videos",
                "originalEndpointId": "endpoint_uploadVideos.cloud-to-cloud-import-videos",
                "name": "Import videos",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The unique identifier of the integration for which you want to import videos.",
                      "key": "integration-id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/tasks/transfers/import/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "integration-id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The unique identifier of the index to which the videos are being uploaded.\n",
                        "key": "index_id",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Specifies whether or not incremental sync is enabled. If set to `false`, the platform will synchronize all the files in the bucket.\n\n**Default**: `true`.\n",
                        "key": "incremental_import",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Determines whether the platform retries failed uploads. When set to `true`, the platform attempts to re-upload files that failed during the initial upload process.\n\n**Default**: `false`.\n",
                        "key": "retry_failed",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Metadata that helps you categorize your videos. You can specify a list of keys and values. Keys must be of type `string`, and values can be of the following types: `string`, `integer`, `float` or `boolean`.\n\n**NOTES:**\n- The metadata you specify when calling this method applies to all videos imported in this request.\n-  If you want to store other types of data such as objects or arrays, you must convert your data into string values.\n- You cannot override any of the predefined metadata (example: duration, width, length, etc) associated with a video.\n",
                        "key": "user_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_uploadVideos:CloudToCloudImportVideosResponse"
                    }
                  },
                  "description": "An import has successfully been initiated.\n"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:CloudToCloudImportVideosRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/tasks/transfers/import/6298d673f1090f1100476d4c",
                    "pathParameters": {
                      "integration-id": "6298d673f1090f1100476d4c"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "requestBody": {
                      "index_id": "6298d673f1090f1100476d4c",
                      "incremental_import": true,
                      "retry_failed": false,
                      "user_metadata": {
                        "category": "recentlyAdded",
                        "batchNumber": 5
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "failed_files": [
                        {
                          "filename": "1.mp4",
                          "error_message": "The video is too big. Please use a video with a size less than %s. The current size is %s."
                        }
                      ],
                      "videos": [
                        {
                          "video_id": "66fcee250f9f7bcce21915a2",
                          "filename": "1.mp4"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "index_id": "6298d673f1090f1100476d4c",
                        "incremental_import": true,
                        "retry_failed": false,
                        "user_metadata": {
                          "category": "recentlyAdded",
                          "batchNumber": 5
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "failed_files": [
                          {
                            "filename": "1.mp4",
                            "error_message": "The video is too big. Please use a video with a size less than %s. The current size is %s."
                          }
                        ],
                        "videos": [
                          {
                            "video_id": "66fcee250f9f7bcce21915a2",
                            "filename": "1.mp4"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/tasks/transfers/import/:integration-id",
                    "pathParameters": {
                      "integration-id": ":integration-id"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "index_id": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "An import represents the process of uploading and indexing all videos from the specified integration. This method initiates an asynchronous import and returns two lists:\n\n- Videos that will be imported.\n- Videos that will not be imported, typically due to unmet [prerequisites](/docs/upload-single-videos#prerequisites).\n\nThe actual uploading and indexing of videos occur asynchronously after you invoke this method. To monitor the status of each upload after invoking this method, use the [`GET`](/reference/cloud-to-cloud-retrieve-status) method of the `/tasks/transfers/import/{integration-id}/status` endpoint.\n\n**NOTES**:\n\n- Before importing videos, you must set up an integration. For details, see the [Set up an integration](/docs/upload-cloud#set-up-an-integration) section.\n- The videos you wish to upload must meet the requirements in the [Prerequisites](/docs/upload-single-videos#prerequisites) section of the **Upload single videos** page.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.upload_videos.cloud_to_cloud_import_videos(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "integration_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "integration-id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "index_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "incremental_import=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "incremental_import",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "retry_failed=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "retry_failed",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "user_metadata={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "user_metadata"
                            },
                            "type": "dict"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "cloud-to-cloud-retrieve-status",
                "migratedFromUrlSlugs": ["retrieve-import-status"],
                "method": "GET",
                "id": "cloud-to-cloud-retrieve-status",
                "originalEndpointId": "endpoint_uploadVideos.cloud-to-cloud-retrieve-status",
                "name": "Retrieve import status",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The unique identifier of the integration for which you want to retrieve the status of your imported videos.",
                      "key": "integration-id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/tasks/transfers/import/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "integration-id"
                    },
                    {
                      "type": "literal",
                      "value": "/status"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The unique identifier of the index for which you want to retrieve the status of your imported videos.",
                        "key": "index_id",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_uploadVideos:CloudToCloudRetrieveStatusResponse"
                    }
                  },
                  "description": "The status for each video from the specified integration and index has successfully been retrieved\n"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:CloudToCloudRetrieveStatusRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/tasks/transfers/import/6298d673f1090f1100476d4c/status",
                    "pathParameters": {
                      "integration-id": "6298d673f1090f1100476d4c"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "requestBody": {
                      "index_id": "6298d673f1090f1100476d4c"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "not_imported": ["NEW_VIDEO_1.mp4", "NEW_VIDEO_2.mp4"],
                      "validating": [
                        {
                          "video_id": "66fcee250f9f7bcce21915a2",
                          "filename": "1.mp4",
                          "created_at": "2024-09-24T13:22:00Z"
                        }
                      ],
                      "pending": [
                        {
                          "video_id": "VIDEO_ID_3",
                          "filename": "VIDEO_3.mp4",
                          "created_at": "2024-09-24T13:22:00Z"
                        }
                      ],
                      "queued": [
                        {
                          "video_id": "66fcee250f9f7bcce21915a2",
                          "filename": "1.mp4",
                          "created_at": "2024-09-24T13:22:00Z"
                        }
                      ],
                      "indexing": [
                        {
                          "video_id": "66fcee250f9f7bcce21915a2",
                          "filename": "1.mp4",
                          "created_at": "2024-09-24T13:22:00Z"
                        }
                      ],
                      "ready": [
                        {
                          "video_id": "VIDEO_ID_1",
                          "filename": "VIDEO_1.mp4",
                          "created_at": "2024-09-24T13:22:00Z"
                        },
                        {
                          "video_id": "VIDEO_ID_2",
                          "filename": "VIDEO_2.mp4",
                          "created_at": "2024-09-24T13:22:00Z"
                        }
                      ],
                      "failed": [
                        {
                          "video_id": "66fcee250f9f7bcce21915a2",
                          "filename": "1.mp4",
                          "created_at": "2024-09-24T13:22:00Z",
                          "error_message": "The video is too big. Please use a video with a size less than %s. The current size is %s."
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "index_id": "6298d673f1090f1100476d4c"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "not_imported": ["NEW_VIDEO_1.mp4", "NEW_VIDEO_2.mp4"],
                        "validating": [
                          {
                            "video_id": "66fcee250f9f7bcce21915a2",
                            "filename": "1.mp4",
                            "created_at": "2024-09-24T13:22:00Z"
                          }
                        ],
                        "pending": [
                          {
                            "video_id": "VIDEO_ID_3",
                            "filename": "VIDEO_3.mp4",
                            "created_at": "2024-09-24T13:22:00Z"
                          }
                        ],
                        "queued": [
                          {
                            "video_id": "66fcee250f9f7bcce21915a2",
                            "filename": "1.mp4",
                            "created_at": "2024-09-24T13:22:00Z"
                          }
                        ],
                        "indexing": [
                          {
                            "video_id": "66fcee250f9f7bcce21915a2",
                            "filename": "1.mp4",
                            "created_at": "2024-09-24T13:22:00Z"
                          }
                        ],
                        "ready": [
                          {
                            "video_id": "VIDEO_ID_1",
                            "filename": "VIDEO_1.mp4",
                            "created_at": "2024-09-24T13:22:00Z"
                          },
                          {
                            "video_id": "VIDEO_ID_2",
                            "filename": "VIDEO_2.mp4",
                            "created_at": "2024-09-24T13:22:00Z"
                          }
                        ],
                        "failed": [
                          {
                            "video_id": "66fcee250f9f7bcce21915a2",
                            "filename": "1.mp4",
                            "created_at": "2024-09-24T13:22:00Z",
                            "error_message": "The video is too big. Please use a video with a size less than %s. The current size is %s."
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/tasks/transfers/import/:integration-id/status",
                    "pathParameters": {
                      "integration-id": ":integration-id"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "index_id": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method retrieves the current status for each video from a specified integration and index. It returns an object containing lists of videos grouped by status. See the [Task object](/reference/the-task-object) page for details on each status.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "cloud-to-cloud-retrieve-import-logs",
                "migratedFromUrlSlugs": ["retrieve-import-logs"],
                "method": "GET",
                "id": "cloud-to-cloud-retrieve-import-logs",
                "originalEndpointId": "endpoint_uploadVideos.cloud-to-cloud-retrieve-import-logs",
                "name": "Retrieve import logs",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The unique identifier of the integration for which you want to retrieve the import logs.",
                      "key": "integration-id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/tasks/transfers/import/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "integration-id"
                    },
                    {
                      "type": "literal",
                      "value": "/logs"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_uploadVideos:CloudToCloudRetrieveImportLogsResponse"
                    }
                  },
                  "description": "The import logs have successfully been retrieved."
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:CloudToCloudRetrieveImportLogsRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/tasks/transfers/import/6298d673f1090f1100476d4c/logs",
                    "pathParameters": {
                      "integration-id": "6298d673f1090f1100476d4c"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [
                        {
                          "index_id": "66ed1ed7046a96796303a06f",
                          "index_name": "my sample index",
                          "created_at": "2024-09-24T13:22:00Z",
                          "ended_at": "2024-09-24T13:23:00Z",
                          "video_status": {
                            "ready": 5,
                            "validating": 2,
                            "queued": 0,
                            "pending": 1,
                            "indexing": 3,
                            "failed": 2
                          },
                          "failed_files": [
                            {
                              "filename": "VIDEO_3.mp4",
                              "error_message": "Video indexing has failed. Please try again."
                            }
                          ]
                        },
                        {
                          "index_id": "66ed1ed7046a96796303a06f",
                          "index_name": "my sample index",
                          "created_at": "2024-09-22T13:25:00Z",
                          "ended_at": "2024-09-24T13:26:00Z",
                          "video_status": {
                            "ready": 10,
                            "validating": 0,
                            "queued": 0,
                            "pending": 0,
                            "indexing": 0,
                            "failed": 3
                          },
                          "failed_files": [
                            {
                              "filename": "VIDEO_3.mp4",
                              "error_message": "No sound"
                            }
                          ]
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [
                          {
                            "index_id": "66ed1ed7046a96796303a06f",
                            "index_name": "my sample index",
                            "created_at": "2024-09-24T13:22:00Z",
                            "ended_at": "2024-09-24T13:23:00Z",
                            "video_status": {
                              "ready": 5,
                              "validating": 2,
                              "queued": 0,
                              "pending": 1,
                              "indexing": 3,
                              "failed": 2
                            },
                            "failed_files": [
                              {
                                "filename": "VIDEO_3.mp4",
                                "error_message": "Video indexing has failed. Please try again."
                              }
                            ]
                          },
                          {
                            "index_id": "66ed1ed7046a96796303a06f",
                            "index_name": "my sample index",
                            "created_at": "2024-09-22T13:25:00Z",
                            "ended_at": "2024-09-24T13:26:00Z",
                            "video_status": {
                              "ready": 10,
                              "validating": 0,
                              "queued": 0,
                              "pending": 0,
                              "indexing": 0,
                              "failed": 3
                            },
                            "failed_files": [
                              {
                                "filename": "VIDEO_3.mp4",
                                "error_message": "No sound"
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/tasks/transfers/import/:integration-id/logs",
                    "pathParameters": {
                      "integration-id": ":integration-id"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This endpoint returns a chronological list of import operations for the specified integration. The list is sorted by creation date, with the oldest imports first. Each item in the list contains:\n\n- The number of videos in each status\n- Detailed error information for failed uploads, including filenames and error messages.\n\nUse this endpoint to track import progress and troubleshoot potential issues across multiple operations.",
                "authed": false
              }
            ],
            "types": [
              "type_uploadVideos:CloudToCloudImportVideosResponseFailedFilesItem",
              "type_uploadVideos:CloudToCloudImportVideosResponseVideosItem",
              "type_uploadVideos:CloudToCloudImportVideosResponse",
              "type_uploadVideos:CloudToCloudRetrieveStatusResponse",
              "type_uploadVideos:CloudToCloudRetrieveImportLogsResponse"
            ],
            "subpackages": [],
            "urlSlug": "upload-videos",
            "webhooks": [],
            "websockets": [],
            "displayName": "Upload videos"
          },
          "subpackage_indexes": {
            "subpackageId": "subpackage_indexes",
            "name": "indexes",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list",
                "migratedFromUrlSlugs": ["list-indexes"],
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_indexes.list",
                "name": "List indexes",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/indexes"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "A number that identifies the page to retrieve.\n\n**Default**: `1`.",
                    "key": "page",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The number of items to return on each page.\n\n**Default**: `10`.\n**Max**: `50`.",
                    "key": "page_limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The field to sort on. The following options are available:\n\n- `updated_at`: Sorts by the time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the item was updated.\n- `created_at`: Sorts by the time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the item was created.\n\n**Default**: `created_at`.",
                    "key": "sort_by",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The sorting direction. The following options are available:\n\n- `asc`\n- `desc`\n\n**Default**: `desc`.",
                    "key": "sort_option",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by the unique identifier of an index.",
                    "key": "_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by the name of an index.",
                    "key": "index_name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by the engine options. When filtering by multiple engine options, the values must be comma-separated.",
                    "key": "engine_options",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by the engine family. This parameter can take one of the following values: `marengo` or `pegasus`. You can specify a single value.",
                    "key": "engine_family",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by the indexing options. When filtering by multiple indexing options, the values must be comma-separated.\n\n**NOTE:** This parameter is supported for backward compatibility and will be deprecated in a future release. Instead, use `engine_options` or `engine_family`.",
                    "key": "index_options",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter indexes by the creation date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the indexes that were created on the specified date at or after the given time.",
                    "key": "created_at",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter indexes by the last update date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the indexes that were last updated on the specified date at or after the given time.",
                    "key": "updated_at",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_indexes:IndexesListResponse"
                    }
                  },
                  "description": "The indexes have successfully been retrieved."
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:IndexesListRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/indexes",
                    "pathParameters": {},
                    "queryParameters": {
                      "sort_by": "created_at",
                      "sort_option": "desc",
                      "_id": "6298d673f1090f1100476d4c",
                      "index_name": "myIndex",
                      "engine_options": "engine_options=visual,conversation",
                      "engine_family": "marengo",
                      "index_options": "index_options=visual,conversation",
                      "created_at": "2024-08-16T16:53:59Z",
                      "updated_at": "2024-08-16T16:55:59Z"
                    },
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [
                        {
                          "_id": "62d85fe7340fa665f1fda5dd",
                          "created_at": "2024-01-09T11:11:20.463Z",
                          "updated_at": "2024-01-09T11:17:15.296Z",
                          "expires_at": "2024-04-08T11:11:20.463Z",
                          "index_name": "index-01",
                          "total_duration": 1363.76,
                          "video_count": 2,
                          "engines": [
                            {
                              "engine_name": "marengo2.7",
                              "engine_options": ["visual", "text_in_video", "conversation", "logo"],
                              "addons": ["thumbnail"]
                            },
                            {
                              "engine_name": "pegasus1.1",
                              "engine_options": ["visual", "conversation"],
                              "addons": ["thumbnail"]
                            }
                          ]
                        },
                        {
                          "_id": "62d858ee340fa665f1fda5d8",
                          "created_at": "2024-01-09T11:11:20.463Z",
                          "updated_at": "2024-01-09T11:17:15.296Z",
                          "expires_at": "2024-04-08T11:11:20.463Z",
                          "index_name": "index-02",
                          "total_duration": 579.12,
                          "video_count": 1,
                          "engines": [
                            {
                              "engine_name": "marengo2.7",
                              "engine_options": ["visual", "logo"],
                              "addons": ["thumbnail"]
                            },
                            {
                              "engine_name": "pegasus1.1",
                              "engine_options": ["visual", "conversation"],
                              "addons": ["thumbnail"]
                            }
                          ]
                        }
                      ],
                      "page_info": {
                        "limit_per_page": 10,
                        "page": 1,
                        "total_page": 1,
                        "total_results": 2
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.list(\n        engine_options=\"engine_options=visual,conversation\",\n        index_options=\"index_options=visual,conversation\",\n        created_at=\"2024-08-16T16:53:59Z\",\n        updated_at=\"2024-08-16T16:55:59Z\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.list(\n    engine_options=\"engine_options=visual,conversation\",\n    index_options=\"index_options=visual,conversation\",\n    created_at=\"2024-08-16T16:53:59Z\",\n    updated_at=\"2024-08-16T16:55:59Z\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.list({\n    engineOptions: \"engine_options=visual,conversation\",\n    indexOptions: \"index_options=visual,conversation\",\n    createdAt: \"2024-08-16T16:53:59Z\",\n    updatedAt: \"2024-08-16T16:55:59Z\"\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [
                          {
                            "_id": "62d85fe7340fa665f1fda5dd",
                            "created_at": "2024-01-09T11:11:20.463Z",
                            "updated_at": "2024-01-09T11:17:15.296Z",
                            "expires_at": "2024-04-08T11:11:20.463Z",
                            "index_name": "index-01",
                            "total_duration": 1363.76,
                            "video_count": 2,
                            "engines": [
                              {
                                "engine_name": "marengo2.7",
                                "engine_options": ["visual", "text_in_video", "conversation", "logo"],
                                "addons": ["thumbnail"]
                              },
                              {
                                "engine_name": "pegasus1.1",
                                "engine_options": ["visual", "conversation"],
                                "addons": ["thumbnail"]
                              }
                            ]
                          },
                          {
                            "_id": "62d858ee340fa665f1fda5d8",
                            "created_at": "2024-01-09T11:11:20.463Z",
                            "updated_at": "2024-01-09T11:17:15.296Z",
                            "expires_at": "2024-04-08T11:11:20.463Z",
                            "index_name": "index-02",
                            "total_duration": 579.12,
                            "video_count": 1,
                            "engines": [
                              {
                                "engine_name": "marengo2.7",
                                "engine_options": ["visual", "logo"],
                                "addons": ["thumbnail"]
                              },
                              {
                                "engine_name": "pegasus1.1",
                                "engine_options": ["visual", "conversation"],
                                "addons": ["thumbnail"]
                              }
                            ]
                          }
                        ],
                        "page_info": {
                          "limit_per_page": 10,
                          "page": 1,
                          "total_page": 1,
                          "total_results": 2
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/indexes",
                    "pathParameters": {},
                    "queryParameters": {
                      "page": 0,
                      "page_limit": 0
                    },
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.list(\n        engine_options=\"engine_options=visual,conversation\",\n        index_options=\"index_options=visual,conversation\",\n        created_at=\"2024-08-16T16:53:59Z\",\n        updated_at=\"2024-08-16T16:55:59Z\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.list(\n    engine_options=\"engine_options=visual,conversation\",\n    index_options=\"index_options=visual,conversation\",\n    created_at=\"2024-08-16T16:53:59Z\",\n    updated_at=\"2024-08-16T16:55:59Z\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.list({\n    engineOptions: \"engine_options=visual,conversation\",\n    indexOptions: \"index_options=visual,conversation\",\n    createdAt: \"2024-08-16T16:53:59Z\",\n    updatedAt: \"2024-08-16T16:55:59Z\"\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method returns a list of the indexes in your account. The API returns indexes sorted by creation date, with the oldest indexes at the top of the list.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.indexes.list(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "page=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "page",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "page_limit=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "page_limit",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "sort_by=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "sort_by",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "sort_option=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "sort_option",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "index_name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "engine_options=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "engine_options",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "engine_family=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "engine_family",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_options=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "index_options",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "created_at=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "created_at",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "updated_at=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "updated_at",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.indexes.list(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "page: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "page"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "pageLimit: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "page_limit"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "sortBy: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "sort_by"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "sortOption: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "sort_option"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "id: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "indexName: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "index_name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "engineOptions: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "engine_options"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "engineFamily: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "engine_family"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "indexOptions: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "index_options"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "createdAt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "created_at"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "updatedAt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "updated_at"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["create-an-index"],
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_indexes.create",
                "name": "Create an index",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/indexes"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The name of the index. Make sure you use a succinct and descriptive name.\n",
                        "key": "index_name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "An array that specifies the [video understanding engines](/docs/video-understanding-engines) and the [engine options](/docs/engine-options) to be enabled for this index. This determines how the platform processes your videos.\n",
                        "key": "engines",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "id",
                            "value": "type_indexes:IndexesCreateRequestEnginesItem"
                          }
                        }
                      },
                      {
                        "description": "An array specifying which add-ons should be enabled. Each entry in the array is an addon, and the following values are supported:\n- `thumbnail`: Enables [thumbnail generation](/docs/extract-video-data#retrieve-thumbnails).\n\nIf you don't provide this parameter, no add-ons will be enabled.\n\n**NOTES:**\n- You can only enable addons when using the Marengo video understanding engine.\n- You cannot disable an add-on once the index has been created.\n",
                        "key": "addons",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_indexes:IndexesCreateResponse"
                    }
                  },
                  "description": "An index has successfully been created"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:IndexesCreateRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/indexes",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "requestBody": {
                      "index_name": "myIndex",
                      "engines": [
                        {
                          "engine_name": "marengo2.7",
                          "engine_options": ["visual", "conversation", "text_in_video", "logo"]
                        },
                        {
                          "engine_name": "pegasus1.1",
                          "engine_options": ["visual", "conversation"]
                        }
                      ],
                      "addons": ["thumbnail"]
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "_id": "62d85fe7340fa665f1fda5dd"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\nfrom twelvelabs.indexes import IndexesCreateRequestEnginesItem\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.create(\n        index_name=\"myIndex\",\n        engines=[\n            IndexesCreateRequestEnginesItem(\n                engine_name=\"marengo2.6\",\n                engine_options=[\n                    \"visual\",\n                    \"conversation\",\n                    \"text_in_video\",\n                    \"logo\",\n                ],\n            ),\n            IndexesCreateRequestEnginesItem(\n                engine_name=\"pagasus1.0\",\n                engine_options=[\"visual\", \"conversation\"],\n            ),\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\nfrom twelvelabs.indexes import IndexesCreateRequestEnginesItem\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.create(\n    index_name=\"myIndex\",\n    engines=[\n        IndexesCreateRequestEnginesItem(\n            engine_name=\"marengo2.6\",\n            engine_options=[\"visual\", \"conversation\", \"text_in_video\", \"logo\"],\n        ),\n        IndexesCreateRequestEnginesItem(\n            engine_name=\"pagasus1.0\",\n            engine_options=[\"visual\", \"conversation\"],\n        ),\n    ],\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.create({\n    indexName: \"myIndex\",\n    engines: [{\n            engineName: \"marengo2.6\",\n            engineOptions: [\"visual\", \"conversation\", \"text_in_video\", \"logo\"]\n        }, {\n            engineName: \"pagasus1.0\",\n            engineOptions: [\"visual\", \"conversation\"]\n        }]\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "index_name": "myIndex",
                        "engines": [
                          {
                            "engine_name": "marengo2.7",
                            "engine_options": ["visual", "conversation", "text_in_video", "logo"]
                          },
                          {
                            "engine_name": "pegasus1.1",
                            "engine_options": ["visual", "conversation"]
                          }
                        ],
                        "addons": ["thumbnail"]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "_id": "62d85fe7340fa665f1fda5dd"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/indexes",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\nfrom twelvelabs.indexes import IndexesCreateRequestEnginesItem\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.create(\n        index_name=\"myIndex\",\n        engines=[\n            IndexesCreateRequestEnginesItem(\n                engine_name=\"marengo2.6\",\n                engine_options=[\n                    \"visual\",\n                    \"conversation\",\n                    \"text_in_video\",\n                    \"logo\",\n                ],\n            ),\n            IndexesCreateRequestEnginesItem(\n                engine_name=\"pagasus1.0\",\n                engine_options=[\"visual\", \"conversation\"],\n            ),\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\nfrom twelvelabs.indexes import IndexesCreateRequestEnginesItem\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.create(\n    index_name=\"myIndex\",\n    engines=[\n        IndexesCreateRequestEnginesItem(\n            engine_name=\"marengo2.6\",\n            engine_options=[\"visual\", \"conversation\", \"text_in_video\", \"logo\"],\n        ),\n        IndexesCreateRequestEnginesItem(\n            engine_name=\"pagasus1.0\",\n            engine_options=[\"visual\", \"conversation\"],\n        ),\n    ],\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.create({\n    indexName: \"myIndex\",\n    engines: [{\n            engineName: \"marengo2.6\",\n            engineOptions: [\"visual\", \"conversation\", \"text_in_video\", \"logo\"]\n        }, {\n            engineName: \"pagasus1.0\",\n            engineOptions: [\"visual\", \"conversation\"]\n        }]\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "index_name": "string",
                        "engines": [
                          {
                            "engine_name": "string",
                            "engine_options": ["string"]
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method creates an index.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.indexes.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "index_name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "engines=[\n\t\t$FERN_INPUT\n\t]",
                            "delimiter": ",\n\t\t",
                            "innerTemplate": {
                              "imports": ["from twelvelabs.indexes import IndexesCreateRequestEnginesItem"],
                              "isOptional": true,
                              "templateString": "IndexesCreateRequestEnginesItem(\n\t\t\t$FERN_INPUT\n\t\t)",
                              "templateInputs": [
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "engine_name=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "engine_name",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "containerTemplateString": "engine_options=[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                    "delimiter": ",\n\t\t\t\t",
                                    "innerTemplate": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "RELATIVE",
                                          "path": null,
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    },
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": "engine_options"
                                    },
                                    "type": "iterable"
                                  }
                                }
                              ],
                              "inputDelimiter": ",\n\t\t\t",
                              "type": "generic"
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "engines"
                            },
                            "type": "iterable"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "addons=[\n\t\t$FERN_INPUT\n\t]",
                            "delimiter": ",\n\t\t",
                            "innerTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "addons"
                            },
                            "type": "iterable"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.indexes.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "indexName: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "index_name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "iterable",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "engines: [\n\t\t\t$FERN_INPUT\n\t\t]",
                                  "delimiter": ",\n\t\t\t",
                                  "innerTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                    "isOptional": true,
                                    "inputDelimiter": ",\n\t\t\t\t",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "engineName: $FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": "engine_name"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "iterable",
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "engineOptions: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                          "delimiter": ",\n\t\t\t\t\t",
                                          "innerTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": "engine_options"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "engines"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "iterable",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "addons: [\n\t\t\t$FERN_INPUT\n\t\t]",
                                  "delimiter": ",\n\t\t\t",
                                  "innerTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "addons"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "retrieve",
                "migratedFromUrlSlugs": ["retrieve-an-index"],
                "method": "GET",
                "id": "retrieve",
                "originalEndpointId": "endpoint_indexes.retrieve",
                "name": "Retrieve an index",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Unique identifier of the index to retrieve.",
                      "key": "index-id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/indexes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "index-id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_indexes:IndexesRetrieveResponse"
                    }
                  },
                  "description": "The specified index has successfully been retrieved."
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:IndexesRetrieveRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/indexes/6298d673f1090f1100476d4c",
                    "pathParameters": {
                      "index-id": "6298d673f1090f1100476d4c"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "_id": "62d9bafa90077fc60af827a0",
                      "created_at": "2024-01-09T11:11:20.463Z",
                      "updated_at": "2024-01-09T11:17:15.296Z",
                      "expires_at": "2024-04-08T11:11:20.463Z",
                      "index_name": "myIndex",
                      "total_duration": 8716.8969,
                      "video_count": 12,
                      "engines": [
                        {
                          "engine_name": "marengo2.7",
                          "engine_options": ["visual", "text_in_video", "conversation", "logo"],
                          "addons": ["thumbnail"]
                        },
                        {
                          "engine_name": "pegasus1.1",
                          "engine_options": ["visual", "conversation"],
                          "addons": ["thumbnail"]
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.retrieve(\n        index_id=\"index-id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.retrieve(\n    index_id=\"index-id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.retrieve(\"index-id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "_id": "62d9bafa90077fc60af827a0",
                        "created_at": "2024-01-09T11:11:20.463Z",
                        "updated_at": "2024-01-09T11:17:15.296Z",
                        "expires_at": "2024-04-08T11:11:20.463Z",
                        "index_name": "myIndex",
                        "total_duration": 8716.8969,
                        "video_count": 12,
                        "engines": [
                          {
                            "engine_name": "marengo2.7",
                            "engine_options": ["visual", "text_in_video", "conversation", "logo"],
                            "addons": ["thumbnail"]
                          },
                          {
                            "engine_name": "pegasus1.1",
                            "engine_options": ["visual", "conversation"],
                            "addons": ["thumbnail"]
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/indexes/:index-id",
                    "pathParameters": {
                      "index-id": ":index-id"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.retrieve(\n        index_id=\"index-id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.retrieve(\n    index_id=\"index-id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.retrieve(\"index-id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method retrieves details about the specified index.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.indexes.retrieve(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "index-id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.indexes.retrieve(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "index-id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update",
                "migratedFromUrlSlugs": ["update-an-index"],
                "method": "PUT",
                "id": "update",
                "originalEndpointId": "endpoint_indexes.update",
                "name": "Update an index",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Unique identifier of the index to update.",
                      "key": "index-id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/indexes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "index-id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The name of the index.\n",
                        "key": "index_name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:IndexesUpdateRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/indexes/6298d673f1090f1100476d4c",
                    "pathParameters": {
                      "index-id": "6298d673f1090f1100476d4c"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "requestBody": {
                      "index_name": "myIndex"
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.update(\n        index_id=\"index-id\",\n        index_name=\"index_name\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.update(\n    index_id=\"index-id\",\n    index_name=\"index_name\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.update(\"index-id\", {\n    indexName: \"index_name\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "index_name": "myIndex"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/indexes/:index-id",
                    "pathParameters": {
                      "index-id": ":index-id"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.update(\n        index_id=\"index-id\",\n        index_name=\"index_name\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.update(\n    index_id=\"index-id\",\n    index_name=\"index_name\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.update(\"index-id\", {\n    indexName: \"index_name\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "index_name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method updates the name of the specified index.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.indexes.update(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "index-id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "index_name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.indexes.update(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "index-id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "indexName: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "index_name"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete",
                "migratedFromUrlSlugs": ["delete-an-index"],
                "method": "DELETE",
                "id": "delete",
                "originalEndpointId": "endpoint_indexes.delete",
                "name": "Delete an index",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Unique identifier of the index to delete.",
                      "key": "index-id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/indexes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "index-id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:IndexesDeleteRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/indexes/6298d673f1090f1100476d4c",
                    "pathParameters": {
                      "index-id": "6298d673f1090f1100476d4c"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.delete(\n        index_id=\"index-id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.delete(\n    index_id=\"index-id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.delete(\"index-id\");\n"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/indexes/:index-id",
                    "pathParameters": {
                      "index-id": ":index-id"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.delete(\n        index_id=\"index-id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.delete(\n    index_id=\"index-id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.delete(\"index-id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method deletes the specified index and all the videos within it. This action cannot be undone.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.indexes.delete(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "index-id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.indexes.delete(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "index-id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [
              "type_indexes:IndexesListResponsePageInfo",
              "type_indexes:IndexesListResponse",
              "type_indexes:IndexesCreateRequestEnginesItem",
              "type_indexes:IndexesCreateResponse",
              "type_indexes:IndexesRetrieveResponseEnginesItem",
              "type_indexes:IndexesRetrieveResponse"
            ],
            "subpackages": ["subpackage_indexes/videos"],
            "urlSlug": "indexes",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_summarize": {
            "subpackageId": "subpackage_summarize",
            "name": "summarize",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["summaries-chapters-or-highlights"],
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_summarize.create",
                "name": "Summaries, chapters, or highlights",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/summarize"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The unique identifier of the video that you want to summarize.\n",
                        "key": "video_id",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Specifies the type of summary. Use one of the following values:\n  - `summary`: A brief that encapsulates the key points of a video, presenting the most important information clearly and concisely.\n  - `chapter`: A chronological list of all the chapters in a video, providing a granular breakdown of its content. For each chapter, the platform returns its starting and end times, measured in seconds from the beginning of the video clip, a descriptive headline that offers a brief of the events or activities within that part of the video, and an accompanying summary that elaborates on the headline.\n  - `highlight`: A chronologically ordered list of the most important events within a video. Unlike chapters, highlights only capture the key moments, providing a snapshot of the video's main topics. For each highlight, the platform returns its starting and end times, measured in seconds from the beginning of the video, a title, and a brief description that captures the essence of this part of the video.\n",
                        "key": "type",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Use this field to provide context for the summarization task, such as the target audience, style, tone of voice, and purpose.\n\n**NOTES**:\n  - Your prompts can be instructive or descriptive, or you can also phrase them as questions.\n  - The maximum length of a prompt is 1500 characters.\n\n**Example**: Generate a summary of this video for a social media post, up to two sentences.\n",
                        "key": "prompt",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.\n\n**Default:** 0.7\n**Min:** 0\n**Max:** 1\n",
                        "key": "temperature",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_summarize:SummarizeCreateResponse"
                    }
                  },
                  "description": "The specified video has successfully been summarized.\n"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:SummarizeCreateRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429,
                    "description": "If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.\n",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/summarize",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "requestBody": {
                      "video_id": "6298d673f1090f1100476d4c",
                      "type": "summary",
                      "prompt": "Generate a summary of this video for a social media post, up to two sentences.",
                      "temperature": 0.7
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "663da73b31cdd0c1f638a8e6",
                      "highlights": [
                        {
                          "start": 0,
                          "end": 30,
                          "highlight": "A woman vlogs about her summer day, sharing her experience while standing in her childhood home in Minnesota.",
                          "highlight_summary": "The woman talks about her love for getting some sun, despite not tanning well, and shows the camera around her house, mentioning her fake tanner."
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.summarize.create(\n        video_id=\"video_id\",\n        type=\"type\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.summarize.create(\n    video_id=\"video_id\",\n    type=\"type\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.summarize.create({\n    videoId: \"video_id\",\n    type: \"type\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "video_id": "6298d673f1090f1100476d4c",
                        "type": "summary",
                        "prompt": "Generate a summary of this video for a social media post, up to two sentences.",
                        "temperature": 0.7
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "663da73b31cdd0c1f638a8e6",
                        "highlights": [
                          {
                            "start": 0,
                            "end": 30,
                            "highlight": "A woman vlogs about her summer day, sharing her experience while standing in her childhood home in Minnesota.",
                            "highlight_summary": "The woman talks about her love for getting some sun, despite not tanning well, and shows the camera around her house, mentioning her fake tanner."
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/summarize",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.summarize.create(\n        video_id=\"video_id\",\n        type=\"type\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.summarize.create(\n    video_id=\"video_id\",\n    type=\"type\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.summarize.create({\n    videoId: \"video_id\",\n    type: \"type\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "video_id": "string",
                        "type": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/summarize",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 429,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.summarize.create(\n        video_id=\"video_id\",\n        type=\"type\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.summarize.create(\n    video_id=\"video_id\",\n    type=\"type\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.summarize.create({\n    videoId: \"video_id\",\n    type: \"type\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "video_id": "string",
                        "type": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This endpoint generates summaries, chapters, or highlights for your videos. Optionally, you can provide a prompt to customize the output.\n\n**NOTE**: This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.summarize.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "video_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "video_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "type=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "type",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "prompt=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "prompt",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "temperature=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "temperature",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.summarize.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "videoId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "video_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "type: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "type"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "prompt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "prompt"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "temperature: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "temperature"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [
              "type_summarize:Summary",
              "type_summarize:SummarizeCreateResponseChaptersChaptersItem",
              "type_summarize:Chapter",
              "type_summarize:SummarizeCreateResponseHighlightsHighlightsItem",
              "type_summarize:Highlight",
              "type_summarize:SummarizeCreateResponse"
            ],
            "subpackages": [],
            "urlSlug": "summarize",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_generate": {
            "subpackageId": "subpackage_generate",
            "name": "generate",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["open-ended-texts"],
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_generate.create",
                "name": "Open-ended texts",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/generate"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The unique identifier of the video for which you wish to generate a text.",
                        "key": "video_id",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "A prompt that guides the model on the desired format or content.\n\n**NOTES**:\n  - Even though the model behind this endpoint is trained to a high degree of accuracy, the preciseness of the generated text may vary based on the nature and quality of the video and the clarity of the prompt.\n  - Your prompts can be instructive or descriptive, or you can also phrase them as questions. \n  - The maximum length of a prompt is 1500 characters.\n\n**Examples**:\n  \n  - Based on this video, I want to generate five keywords for SEO (Search Engine Optimization).\n  - I want to generate a description for my video with the following format: Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.\n",
                        "key": "prompt",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.\n\n**Default:** 0.7\n**Min:** 0\n**Max:** 1\n",
                        "key": "temperature",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double"
                            }
                          }
                        }
                      },
                      {
                        "description": "Set this parameter to `true` to enable streaming responses in the <a href=\"https://github.com/ndjson/ndjson-spec\" target=\"_blank\">NDJSON</a> format. \n\n**Default:** `true`\n",
                        "key": "stream",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_generate:GenerateCreateResponse"
                    }
                  },
                  "description": "The specified video has successfully been processed."
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:GenerateCreateRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429,
                    "description": "If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.\n",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "name": "Non-streamed response",
                    "path": "/generate",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "requestBody": {
                      "video_id": "6298d673f1090f1100476d4c",
                      "prompt": "I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.",
                      "temperature": 0.7,
                      "stream": true
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "2a22fd17-7bd4-446a-abd6-b9382cb18f90",
                      "data": "1. Vlog\\n2. Minnesota\\n3. Mall of America\\n4. Shopping haul\\n5. Outdoor adventure"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.generate.create(\n        video_id=\"video_id\",\n        prompt=\"prompt\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.generate.create(\n    video_id=\"video_id\",\n    prompt=\"prompt\",\n)\n",
                        "exampleIdentifier": "Non-streamed response"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.generate.create({\n    videoId: \"video_id\",\n    prompt: \"prompt\"\n});\n",
                        "exampleIdentifier": "Non-streamed response"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "video_id": "6298d673f1090f1100476d4c",
                        "prompt": "I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.",
                        "temperature": 0.7,
                        "stream": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "2a22fd17-7bd4-446a-abd6-b9382cb18f90",
                        "data": "1. Vlog\\n2. Minnesota\\n3. Mall of America\\n4. Shopping haul\\n5. Outdoor adventure"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "name": "Stream start",
                    "path": "/generate",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "requestBody": {
                      "video_id": "6298d673f1090f1100476d4c",
                      "prompt": "I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.",
                      "temperature": 0.7,
                      "stream": true
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "event_type": "stream_start",
                      "metadata": {
                        "generation_id": "2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.generate.create(\n        video_id=\"video_id\",\n        prompt=\"prompt\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.generate.create(\n    video_id=\"video_id\",\n    prompt=\"prompt\",\n)\n",
                        "exampleIdentifier": "Stream start"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.generate.create({\n    videoId: \"video_id\",\n    prompt: \"prompt\"\n});\n",
                        "exampleIdentifier": "Stream start"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "video_id": "6298d673f1090f1100476d4c",
                        "prompt": "I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.",
                        "temperature": 0.7,
                        "stream": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "event_type": "stream_start",
                        "metadata": {
                          "generation_id": "2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "name": "Text generation",
                    "path": "/generate",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "requestBody": {
                      "video_id": "6298d673f1090f1100476d4c",
                      "prompt": "I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.",
                      "temperature": 0.7,
                      "stream": true
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "event_type": "text_generation",
                      "text": "light-hearted moments of cats"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.generate.create(\n        video_id=\"video_id\",\n        prompt=\"prompt\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.generate.create(\n    video_id=\"video_id\",\n    prompt=\"prompt\",\n)\n",
                        "exampleIdentifier": "Text generation"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.generate.create({\n    videoId: \"video_id\",\n    prompt: \"prompt\"\n});\n",
                        "exampleIdentifier": "Text generation"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "video_id": "6298d673f1090f1100476d4c",
                        "prompt": "I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.",
                        "temperature": 0.7,
                        "stream": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "event_type": "text_generation",
                        "text": "light-hearted moments of cats"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "name": "Stream end",
                    "path": "/generate",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "requestBody": {
                      "video_id": "6298d673f1090f1100476d4c",
                      "prompt": "I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.",
                      "temperature": 0.7,
                      "stream": true
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "event_type": "stream_end",
                      "metadata": {
                        "generation_id": "2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.generate.create(\n        video_id=\"video_id\",\n        prompt=\"prompt\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.generate.create(\n    video_id=\"video_id\",\n    prompt=\"prompt\",\n)\n",
                        "exampleIdentifier": "Stream end"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.generate.create({\n    videoId: \"video_id\",\n    prompt: \"prompt\"\n});\n",
                        "exampleIdentifier": "Stream end"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "video_id": "6298d673f1090f1100476d4c",
                        "prompt": "I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.",
                        "temperature": 0.7,
                        "stream": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "event_type": "stream_end",
                        "metadata": {
                          "generation_id": "2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/generate",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.generate.create(\n        video_id=\"video_id\",\n        prompt=\"prompt\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.generate.create(\n    video_id=\"video_id\",\n    prompt=\"prompt\",\n)\n",
                        "exampleIdentifier": "Non-streamed response"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.generate.create({\n    videoId: \"video_id\",\n    prompt: \"prompt\"\n});\n",
                        "exampleIdentifier": "Text generation"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "video_id": "string",
                        "prompt": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/generate",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 429,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.generate.create(\n        video_id=\"video_id\",\n        prompt=\"prompt\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.generate.create(\n    video_id=\"video_id\",\n    prompt=\"prompt\",\n)\n",
                        "exampleIdentifier": "Non-streamed response"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.generate.create({\n    videoId: \"video_id\",\n    prompt: \"prompt\"\n});\n",
                        "exampleIdentifier": "Text generation"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "video_id": "string",
                        "prompt": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This endpoint generates open-ended texts based on your videos, including but not limited to tables of content, action items, memos, and detailed analyses.\n\n**NOTES**:\n\n- This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.\n- This endpoint supports streaming responses. For details on integrating this feature into your application, refer to the [Streaming response](/docs/streaming-responses) guide.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.generate.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "video_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "video_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "prompt=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "prompt",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "temperature=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "temperature",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "stream=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "stream",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.generate.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "videoId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "video_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "prompt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "prompt"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "temperature: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "temperature"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "stream: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "stream"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [
              "type_generate:GenerateCreateResponseData",
              "type_generate:GenerateCreateResponseOneZeroMetadata",
              "type_generate:GenerateCreateResponseOneZero",
              "type_generate:GenerateCreateResponseOneText",
              "type_generate:GenerateCreateResponseOneEventTypeMetadata",
              "type_generate:GenerateCreateResponseOneEventType",
              "type_generate:GenerateCreateResponseOne",
              "type_generate:GenerateCreateResponse"
            ],
            "subpackages": [],
            "urlSlug": "generate",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_embed": {
            "subpackageId": "subpackage_embed",
            "name": "embed",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["create-embeddings-for-text-image-and-audio"],
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_embed.create",
                "name": "Create embeddings for text, image, and audio",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/embed"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "EmbedCreateRequest",
                      "properties": [
                        {
                          "type": "bodyProperty",
                          "key": "engine_name",
                          "valueType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          },
                          "description": "The name of the engine you want to use. The following engines are available:\n  - `Marengo-retrieval-2.6`\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "text",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "The text for which you wish to create an embedding.\n\n**NOTE**:\nText embeddings are limited to 77 tokens. If the text exceeds this limit, the platform truncates it according to the value of the `text_truncate` parameter described below.\n\n**Example**: \"Man with a dog crossing the street\"\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "text_truncate",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string",
                                "default": "end"
                              }
                            }
                          },
                          "description": "Specifies how the platform truncates text that exceeds 77 tokens to fit the maximum length allowed for an embedding.\nThis parameter can take one of the following values:\n- `start`: The platform will truncate the start of the provided text.\n- `end`: The platform will truncate the end of the provided text.\n- `none`: The platform will return an error if the text is longer than the maximum token limit.\n\n**Default**: `end`\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "image_url",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "The publicly accessible URL of the image for which you wish to create an embedding. This parameter is required for image embeddings if `image_file` is not provided.\n"
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "image_file",
                            "isOptional": true
                          }
                        },
                        {
                          "type": "bodyProperty",
                          "key": "audio_url",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "The publicly accessible URL of the audio file for which you wish to creae an emebdding. This parameter is required for audio embeddings if `audio_file` is not provided.   \n"
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "audio_file",
                            "isOptional": true
                          }
                        },
                        {
                          "type": "bodyProperty",
                          "key": "audio_start_offset_sec",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "double",
                                "default": 0
                              }
                            }
                          },
                          "description": "Specifies the start time, in seconds, from which the platform generates the audio embeddings. This parameter allows you to skip the initial portion of the audio during processing.\n**Default**: `0`.\n"
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EmbeddingResponse"
                    }
                  },
                  "description": "A text embedding has successfully been created. \n"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:EmbedCreateRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/embed",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "requestBody": {
                      "engine_name": "engine_name"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "audio_embedding": {
                        "segments": [
                          {
                            "float": [-0.042632885, 0.014312328, 0.029209055],
                            "start_offset_sec": 0
                          }
                        ],
                        "error_message": "Audio file is not valid.",
                        "metadata": {
                          "input_url": "https://example.com/audio.mp3",
                          "input_filename": "01.mp3"
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.embed.create(\n        engine_name=\"engine_name\",\n        text=\"text\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.create(\n    engine_name=\"engine_name\",\n    text=\"text\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.create({\n    engineName: \"engine_name\",\n    text: \"text\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "engine_name": {
                          "type": "json",
                          "value": "engine_name"
                        },
                        "text": {
                          "type": "json"
                        },
                        "text_truncate": {
                          "type": "json"
                        },
                        "image_url": {
                          "type": "json"
                        },
                        "image_file": {
                          "type": "filename",
                          "value": "<file1>"
                        },
                        "audio_url": {
                          "type": "json"
                        },
                        "audio_file": {
                          "type": "filename",
                          "value": "<file1>"
                        },
                        "audio_start_offset_sec": {
                          "type": "json"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "audio_embedding": {
                          "segments": [
                            {
                              "float": [-0.042632885, 0.014312328, 0.029209055],
                              "start_offset_sec": 0
                            }
                          ],
                          "error_message": "Audio file is not valid.",
                          "metadata": {
                            "input_url": "https://example.com/audio.mp3",
                            "input_filename": "01.mp3"
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/embed",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.embed.create(\n        engine_name=\"engine_name\",\n        text=\"text\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.create(\n    engine_name=\"engine_name\",\n    text=\"text\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.create({\n    engineName: \"engine_name\",\n    text: \"text\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "engine_name": {
                          "type": "json",
                          "value": "string"
                        },
                        "text": {
                          "type": "json"
                        },
                        "text_truncate": {
                          "type": "json"
                        },
                        "image_url": {
                          "type": "json"
                        },
                        "audio_url": {
                          "type": "json"
                        },
                        "audio_start_offset_sec": {
                          "type": "json"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method creates embedings for text, image, and audio content.\n\nBefore you create an embedding, ensure that the following prerequisites are met:\n\n- [Text embeddings](/docs/create-text-embeddings#prerequisites)\n- [Image embeddings](/docs/create-image-embeddings#prerequisites)\n- [Audio embeddings](/docs/create-audio-embeddings#prerequisites)\n\nParameters for embeddings:\n\n- **Common parameters**:\n  - `engine_name`: The video understanding engine you want to use. Example: \"Marengo-retrieval-2.6\".\n- **Text embeddings**:\n  - `text`: Text for which to create an embedding.\n- **Image embeddings**:\n  Provide one of the following:\n  - `image_url`: Publicly accessible URL of your image file.\n  - `image_file`: Local image file.\n- **Audio embeddings**:\n  Provide one of the following:\n  - `audio_url`: Publicly accessible URL of your audio file.\n  - `audio_file`: Local audio file.\n\n**NOTES**:\n\n- The “Marengo-retrieval-2.6” video understanding engine generates embeddings for all modalities in the same latent space. This shared space enables any-to-any searches across different types of content.\n- You can create multiple types of embeddings in a single API call.\n- Audio embeddings combine generic sound and human speech in a single embedding. For videos with transcriptions, you can [retrieve transcriptions](/reference/retrieve-transcription) and then [create text embeddings](/reference/create-text-embedding) from these transcriptions.\n\n> 🚧 Important\n> The response includes breaking changes that might require updates to your application code.\n> **Common changes**:\n>\n> - The `is_success` boolean flag has been removed.\n>   **Media-specific changes**:\n> - **Text**:The response now includes a nested array named `segments`.\n> - **Image**: The response now includes a nested array named `segments`.\n> - **Audio**: No additional changes.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.embed.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "engine_name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "engine_name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "text=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "text",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "text_truncate=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "text_truncate",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "image_url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "image_url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "image_file=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "image_file",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "audio_url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "audio_url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "audio_file=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "audio_file",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "audio_start_offset_sec=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "audio_start_offset_sec",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.embed.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "engineName: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "engine_name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "text: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "text"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "textTruncate: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "text_truncate"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [],
            "subpackages": ["subpackage_embed/tasks"],
            "urlSlug": "embed",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_search": {
            "subpackageId": "subpackage_search",
            "name": "search",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "query",
                "migratedFromUrlSlugs": ["make-any-to-video-search-requests"],
                "method": "POST",
                "id": "query",
                "originalEndpointId": "endpoint_search.query",
                "name": "Make any-to-video search requests",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/search"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "SearchQueryRequest",
                      "properties": [
                        {
                          "type": "bodyProperty",
                          "key": "query_media_type",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "literal",
                              "value": {
                                "type": "stringLiteral",
                                "value": "image"
                              }
                            }
                          },
                          "description": "The type of media you wish to use. This parameter is required for media queries. For example, to perform an image-based search, set this parameter to `image`.\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "query_media_url",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "The publicly accessible URL of the media file you wish to use. This parameter is required for media queries if `query_media_file` is not provided.\n"
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "query_media_file",
                            "isOptional": true
                          }
                        },
                        {
                          "type": "bodyProperty",
                          "key": "query_text",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "The text query to search for. This parameter is required for text queries. Note that the platform supports full natural language-based search.\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "index_id",
                          "valueType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          },
                          "description": "The unique identifier of the index to search.\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "search_options",
                          "valueType": {
                            "type": "list",
                            "itemType": {
                              "type": "id",
                              "value": "type_search:SearchQueryRequestSearchOptionsItem"
                            }
                          },
                          "description": "Specifies the [sources of information](/docs/search-options) the platform uses when performing a search. You must include the `search_options` parameter separately for each desired source of information.\n\n**NOTES:** \n- The search options you specify must be a subset of the [engine options](/docs/engine-options) used when you created the index.\n- You can specify multiple search options in conjunction with the `operator` parameter described below to broaden or narrow your search.\n\nExample:\nTo search using both visual and audio cues, include this parameter twice in the request as shown below:\n```JSON\n--form search_options=visual \\\n--form search_options=conversation \\\n```\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "adjust_confidence_level",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "double"
                              }
                            }
                          },
                          "description": "This parameter specifies the strictness of the thresholds for assigning the high, medium, or low confidence levels to search results. If you use a lower value, the thresholds become more relaxed, and more search results will be classified as having high, medium, or low confidence levels. You can use this parameter to include a broader range of potentially relevant video clips, even if some results might be less precise. \n\n**Min**: 0\n**Max**: 1\n**Default:** 0.5\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "group_by",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "id",
                              "value": "type_search:SearchQueryRequestGroupBy"
                            }
                          },
                          "description": "Use this parameter to group or ungroup items in a response. It can take one of the following values:\n- `video`:  The platform will group the matching video clips in the response by video.\n- `clip`: The matching video clips in the response will not be grouped.\n\n**Default:** `clip`\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "threshold",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "id",
                              "value": "type_:ThresholdSearch"
                            }
                          }
                        },
                        {
                          "type": "bodyProperty",
                          "key": "sort_option",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "id",
                              "value": "type_search:SearchQueryRequestSortOption"
                            }
                          },
                          "description": "Use this parameter to specify the sort order for the response.\n\nWhen performing a search, the platform determines the level of confidence that each video clip matches your search terms. By default, the search results are sorted on the level of confidence in descending order. \n\nIf you set this parameter to `score` and `group_by` is set to `video`, the platform will determine the maximum value of the `score` field for each video and sort the videos in the response by the maximum value of this field. For each video, the matching video clips will be sorted by the level of confidence.\n\nIf you set this parameter to `clip_count` and `group_by` is set to `video`, the platform will sort the videos in the response by the number of clips. For each video, the matching video clips will be sorted by the level of confidence. You can use `clip_count` only when the matching video clips are sorted by video.\n\n\n**Default:** `score`\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "operator",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "id",
                              "value": "type_search:SearchQueryRequestOperator"
                            }
                          },
                          "description": "When you perform a search specifying multiple [sources of information](/docs/search-options), you can use the this parameter to broaden or narrow your search.\n  \n  The following logical operators are supported:\n  \n  - `or`\n  \n  - `and`\n  \n  For details and examples, see the [Using multiple sources of information](/docs/search-single-queries#using-multiple-sources-of-information) section.\n\n  \n  **Default**: `or`.\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "conversation_option",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "id",
                              "value": "type_:ConversationOptionAnyToVideo"
                            }
                          }
                        },
                        {
                          "type": "bodyProperty",
                          "key": "page_limit",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "integer",
                                "default": 10
                              }
                            }
                          },
                          "description": "The number of items to return on each page. When grouping by video, this parameter represents the number of videos per page. Otherwise, it represents the maximum number of video clips per page. \n\n**Max**: `50`.\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "filter",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "This parameter accepts a stringified object to filter search results:\n- For string fields: Use the exact match operator (`=`) to return results that exactly equal the specified value. Syntax: `\"field\": \"value\"`.\n- For numeric fields: Use either exact match (`=`) or comparison operators (`gte`, `lte`) for arithmetic comparisons Syntax: `\"field\": number` or `\"field\": { \"gte\": number, \"lte\": number }`.\n\nThe filter object can contain the following properties:\n- `id`: An array of strings to filter by specific video IDs. Example: `\"id\": [\"video1\", \"video2\"]`.\n- `duration`: An object to filter your search results based on the duration of the video containing the segment that matches your query. Example: `\"duration\": { \"gte\": 600, \"lte\": 800 }`.\n- `width`: A numeric value to filter by video width. Example: `\"width\": 1920` or `\"width\": { \"gte\": 1280, \"lte\": 1920 }`\n- `height`: A numeric value to filter by video height. Example: `\"height\": 1080` or `\"height\": { \"gte\": 720, \"lte\": 1080 }`.\n- `size`: A numeric value to filter by video size in bytes. Example: `\"size\": 1048576` or `\"size\": { \"gte\": 1048576, \"lte\": 5242880 }`.\n- `title`: A string value to filter by video title. Example: `\"title\": \"Animal Encounters part 1\"`.\n\nTo enable filtering by custom fields:\n1. Add metadata to your video by calling the the [`PUT`](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint\n2. Use the custom fields as filter criteria in your queries. For example, to return only videos where a custom field named `needsReview` of type boolean is `true`, use: `\"needs_review\": true`.\n\nFor more details and examples, see the [Filter search results based on metadata](/docs/filtering-search-results) page.\n"
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_search:SearchQueryResponse"
                    }
                  },
                  "description": "Successfully performed a search request."
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:SearchQueryRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429,
                    "description": "If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.\n",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/search",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "requestBody": {
                      "index_id": "index_id",
                      "search_options": ["visual"]
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [
                        {
                          "score": "85.08",
                          "start": 238.75,
                          "end": 259.62109375,
                          "video_id": "639963a1ce36463e0199c8c7",
                          "metadata": [
                            {
                              "type": "visual",
                              "text": "Hello, how are you?"
                            }
                          ],
                          "confidence": "high",
                          "thumbnail_url": "https://example.com/thumbnail.jpg",
                          "modules": [
                            {
                              "type": "visual",
                              "confidence": "high"
                            }
                          ]
                        }
                      ],
                      "page_info": {
                        "limit_per_page": 10,
                        "page_expired_at": "2024-03-01T00:00:00Z",
                        "total_results": 100,
                        "total_inner_matches": 10,
                        "next_page_token": "663da73b31cdd0c1f638a8e6"
                      },
                      "search_pool": {
                        "total_count": 10,
                        "total_duration": 8731,
                        "index_id": "639961c9e219c90227c371a2"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.search.query(\n        query=\"query\",\n        index_id=\"index_id\",\n        search_options=[\"visual\", \"conversation\", \"text_in_video\", \"logo\"],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search.query(\n    query=\"query\",\n    index_id=\"index_id\",\n    search_options=[\"visual\", \"conversation\", \"text_in_video\", \"logo\"],\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search.query({\n    query: \"query\",\n    indexId: \"index_id\",\n    searchOptions: [\"visual\", \"conversation\", \"text_in_video\", \"logo\"]\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "query_media_type": {
                          "type": "json"
                        },
                        "query_media_url": {
                          "type": "json"
                        },
                        "query_media_file": {
                          "type": "filename",
                          "value": "<file1>"
                        },
                        "query_text": {
                          "type": "json"
                        },
                        "index_id": {
                          "type": "json",
                          "value": "index_id"
                        },
                        "search_options": {
                          "type": "json",
                          "value": ["visual"]
                        },
                        "adjust_confidence_level": {
                          "type": "json"
                        },
                        "group_by": {
                          "type": "json"
                        },
                        "threshold": {
                          "type": "json"
                        },
                        "sort_option": {
                          "type": "json"
                        },
                        "operator": {
                          "type": "json"
                        },
                        "conversation_option": {
                          "type": "json"
                        },
                        "page_limit": {
                          "type": "json"
                        },
                        "filter": {
                          "type": "json"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [
                          {
                            "score": "85.08",
                            "start": 238.75,
                            "end": 259.62109375,
                            "video_id": "639963a1ce36463e0199c8c7",
                            "metadata": [
                              {
                                "type": "visual",
                                "text": "Hello, how are you?"
                              }
                            ],
                            "confidence": "high",
                            "thumbnail_url": "https://example.com/thumbnail.jpg",
                            "modules": [
                              {
                                "type": "visual",
                                "confidence": "high"
                              }
                            ]
                          }
                        ],
                        "page_info": {
                          "limit_per_page": 10,
                          "page_expired_at": "2024-03-01T00:00:00Z",
                          "total_results": 100,
                          "total_inner_matches": 10,
                          "next_page_token": "663da73b31cdd0c1f638a8e6"
                        },
                        "search_pool": {
                          "total_count": 10,
                          "total_duration": 8731,
                          "index_id": "639961c9e219c90227c371a2"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/search",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.search.query(\n        query=\"query\",\n        index_id=\"index_id\",\n        search_options=[\"visual\", \"conversation\", \"text_in_video\", \"logo\"],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search.query(\n    query=\"query\",\n    index_id=\"index_id\",\n    search_options=[\"visual\", \"conversation\", \"text_in_video\", \"logo\"],\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search.query({\n    query: \"query\",\n    indexId: \"index_id\",\n    searchOptions: [\"visual\", \"conversation\", \"text_in_video\", \"logo\"]\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "query_media_type": {
                          "type": "json"
                        },
                        "query_media_url": {
                          "type": "json"
                        },
                        "query_text": {
                          "type": "json"
                        },
                        "index_id": {
                          "type": "json",
                          "value": "string"
                        },
                        "search_options": {
                          "type": "json",
                          "value": ["visual"]
                        },
                        "adjust_confidence_level": {
                          "type": "json"
                        },
                        "group_by": {
                          "type": "json"
                        },
                        "threshold": {
                          "type": "json"
                        },
                        "sort_option": {
                          "type": "json"
                        },
                        "operator": {
                          "type": "json"
                        },
                        "conversation_option": {
                          "type": "json"
                        },
                        "page_limit": {
                          "type": "json"
                        },
                        "filter": {
                          "type": "json"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/search",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 429,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.search.query(\n        query=\"query\",\n        index_id=\"index_id\",\n        search_options=[\"visual\", \"conversation\", \"text_in_video\", \"logo\"],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search.query(\n    query=\"query\",\n    index_id=\"index_id\",\n    search_options=[\"visual\", \"conversation\", \"text_in_video\", \"logo\"],\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search.query({\n    query: \"query\",\n    indexId: \"index_id\",\n    searchOptions: [\"visual\", \"conversation\", \"text_in_video\", \"logo\"]\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "query_media_type": {
                          "type": "json"
                        },
                        "query_media_url": {
                          "type": "json"
                        },
                        "query_text": {
                          "type": "json"
                        },
                        "index_id": {
                          "type": "json",
                          "value": "string"
                        },
                        "search_options": {
                          "type": "json",
                          "value": ["visual"]
                        },
                        "adjust_confidence_level": {
                          "type": "json"
                        },
                        "group_by": {
                          "type": "json"
                        },
                        "threshold": {
                          "type": "json"
                        },
                        "sort_option": {
                          "type": "json"
                        },
                        "operator": {
                          "type": "json"
                        },
                        "conversation_option": {
                          "type": "json"
                        },
                        "page_limit": {
                          "type": "json"
                        },
                        "filter": {
                          "type": "json"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Use this endpoint to search for relevant matches in an index using text or various media queries.\n\n**Text queries**:\n\n- Use the `query_text` parameter to specify your query.\n\n**Media queries**:\n\n- Set the `query_media_type` parameter to the corresponding media type (example: `image`).\n- Specify either one of the following parameters:\n  - `query_media_url`: Publicly accessible URL of your media file.\n  - `query_media_file`: Local media file.\n    If both `query_media_url` and `query_media_file` are specified in the same request, `query_media_url` takes precedence.\n\nBefore using a media file as a query, ensure that the file meets the [prerequisites](/docs/single-queries-prerequisites).\n\n**NOTE**: This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.search.query(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "query_media_url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "query_media_url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "query_media_file=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "query_media_file",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "query_text=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "query_text",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "index_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "search_options=[\n\t\t$FERN_INPUT\n\t]",
                            "delimiter": ",\n\t\t",
                            "innerTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "values": {
                                "visual": "\"visual\"",
                                "conversation": "\"conversation\"",
                                "text_in_video": "\"text_in_video\"",
                                "logo": "\"logo\""
                              },
                              "templateInput": {
                                "location": "RELATIVE",
                                "path": null
                              },
                              "type": "enum"
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "search_options"
                            },
                            "type": "iterable"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "adjust_confidence_level=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "adjust_confidence_level",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "group_by=$FERN_INPUT",
                            "values": {
                              "video": "\"video\"",
                              "clip": "\"clip\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "group_by"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "threshold=$FERN_INPUT",
                            "values": {
                              "high": "\"high\"",
                              "medium": "\"medium\"",
                              "low": "\"low\"",
                              "none": "\"none\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "threshold"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "sort_option=$FERN_INPUT",
                            "values": {
                              "score": "\"score\"",
                              "clip_count": "\"clip_count\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "sort_option"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "operator=$FERN_INPUT",
                            "values": {
                              "or": "\"or\"",
                              "and": "\"and\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "operator"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "conversation_option=$FERN_INPUT",
                            "values": {
                              "semantic": "\"semantic\"",
                              "exact_match": "\"exact_match\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "conversation_option"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "page_limit=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "page_limit",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "filter=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "filter",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.search.query(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "query: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "query"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "indexId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "index_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "iterable",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "searchOptions: [\n\t\t\t$FERN_INPUT\n\t\t]",
                                  "delimiter": ",\n\t\t\t",
                                  "innerTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "search_options"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "adjustConfidenceLevel: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "adjust_confidence_level"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "video": "\"video\"",
                                    "clip": "\"clip\""
                                  },
                                  "templateString": "groupBy: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "group_by"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "high": "\"high\"",
                                    "medium": "\"medium\"",
                                    "low": "\"low\"",
                                    "none": "\"none\""
                                  },
                                  "templateString": "threshold: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "threshold"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "score": "\"score\"",
                                    "clip_count": "\"clip_count\""
                                  },
                                  "templateString": "sortOption: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "sort_option"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "operator: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "operator"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "semantic": "\"semantic\"",
                                    "exact_match": "\"exact_match\""
                                  },
                                  "templateString": "conversationOption: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "conversation_option"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "pageLimit: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "page_limit"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "filter: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "iterable",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "id: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t",
                                        "innerTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "filter.id"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "duration: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "gte: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "BODY",
                                                  "path": "filter.duration.gte"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "lte: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "BODY",
                                                  "path": "filter.duration.lte"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "width: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "filter.width"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "height: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "filter.height"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "size: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "filter.size"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "title: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "filter.title"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "retrieve",
                "migratedFromUrlSlugs": ["retrieve-a-specific-page-of-search-results"],
                "method": "GET",
                "id": "retrieve",
                "originalEndpointId": "endpoint_search.retrieve",
                "name": "Retrieve a specific page of search results",
                "path": {
                  "pathParameters": [
                    {
                      "description": "A token that identifies the page to retrieve.",
                      "key": "page-token",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/search/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "page-token"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_search:SearchRetrieveResponse"
                    }
                  },
                  "description": "Successfully retrieved the specified page of search results."
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:SearchRetrieveRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "error_code": 104,
                            "message": "The conversation option of transcription is not allowed with multiple search options. You should use semantic instead."
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/search/1234567890",
                    "pathParameters": {
                      "page-token": "1234567890"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [
                        {
                          "score": "85.08",
                          "start": 238.75,
                          "end": 259.62109375,
                          "video_id": "639963a1ce36463e0199c8c7",
                          "metadata": [
                            {
                              "type": "visual",
                              "text": "Hello, how are you?"
                            }
                          ],
                          "confidence": "high",
                          "thumbnail_url": "https://example.com/thumbnail.jpg",
                          "modules": [
                            {
                              "type": "visual",
                              "confidence": "high"
                            }
                          ]
                        }
                      ],
                      "page_info": {
                        "limit_per_page": 10,
                        "page_expired_at": "2024-03-01T00:00:00Z",
                        "total_results": 100,
                        "total_inner_matches": 10,
                        "next_page_token": "663da73b31cdd0c1f638a8e6",
                        "prev_page_token": "663da73b31cdd0c1f638a8e6"
                      },
                      "search_pool": {
                        "total_count": 10,
                        "total_duration": 8731,
                        "index_id": "639961c9e219c90227c371a2"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.search.retrieve(\n        page_token=\"page-token\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search.retrieve(\n    page_token=\"page-token\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search.retrieve(\"page-token\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [
                          {
                            "score": "85.08",
                            "start": 238.75,
                            "end": 259.62109375,
                            "video_id": "639963a1ce36463e0199c8c7",
                            "metadata": [
                              {
                                "type": "visual",
                                "text": "Hello, how are you?"
                              }
                            ],
                            "confidence": "high",
                            "thumbnail_url": "https://example.com/thumbnail.jpg",
                            "modules": [
                              {
                                "type": "visual",
                                "confidence": "high"
                              }
                            ]
                          }
                        ],
                        "page_info": {
                          "limit_per_page": 10,
                          "page_expired_at": "2024-03-01T00:00:00Z",
                          "total_results": 100,
                          "total_inner_matches": 10,
                          "next_page_token": "663da73b31cdd0c1f638a8e6",
                          "prev_page_token": "663da73b31cdd0c1f638a8e6"
                        },
                        "search_pool": {
                          "total_count": 10,
                          "total_duration": 8731,
                          "index_id": "639961c9e219c90227c371a2"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/search/:page-token",
                    "pathParameters": {
                      "page-token": ":page-token"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.search.retrieve(\n        page_token=\"page-token\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search.retrieve(\n    page_token=\"page-token\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search.retrieve(\"page-token\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error_code": 0,
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Use this endpoint to retrieve a specific page of search results.\n\n**NOTE**: When you use pagination, you will not be charged for retrieving subsequent pages of results.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.search.retrieve(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "page_token=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "page-token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.search.retrieve(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "page-token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [
              "type_search:SearchQueryRequestSearchOptionsItem",
              "type_search:SearchQueryRequestGroupBy",
              "type_search:SearchQueryRequestSortOption",
              "type_search:SearchQueryRequestOperator",
              "type_search:SearchQueryResponseDataItemMetadataItem",
              "type_search:SearchQueryResponseDataItem",
              "type_search:SearchQueryResponsePageInfo",
              "type_search:SearchQueryResponse",
              "type_search:SearchRetrieveResponseDataItemMetadataItem",
              "type_search:SearchRetrieveResponseDataItem",
              "type_search:SearchRetrieveResponsePageInfo",
              "type_search:SearchRetrieveResponse"
            ],
            "subpackages": [],
            "urlSlug": "search",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_gist": {
            "subpackageId": "subpackage_gist",
            "name": "gist",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create",
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_gist.create",
                "name": "Create",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/gist"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/gist",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.gist.create(\n        video_id=\"video_id\",\n        types=[\"topic\"],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.gist.create(\n    video_id=\"video_id\",\n    types=[\"topic\"],\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.gist.create({\n    videoId: \"video_id\",\n    types: [\"topic\"]\n});\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.gist.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.gist.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "videoId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "video_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "iterable",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "types: [\n\t\t\t$FERN_INPUT\n\t\t]",
                                  "delimiter": ",\n\t\t\t",
                                  "innerTemplate": {
                                    "type": "enum",
                                    "imports": [],
                                    "isOptional": true,
                                    "values": {
                                      "topic": "\"topic\"",
                                      "hashtag": "\"hashtag\"",
                                      "title": "\"title\""
                                    },
                                    "templateString": "$FERN_INPUT",
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "types"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "gist",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_embedNew": {
            "subpackageId": "subpackage_embedNew",
            "name": "embedNew",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create",
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_embedNew.create",
                "name": "Create",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/embed-new"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/embed-new",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.embed_new.create(\n        engine_name=\"engine_name\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed_new.create(\n    engine_name=\"engine_name\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\nimport * as fs from \"fs\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embedNew.create(fs.createReadStream(\"/path/to/your/file\"), fs.createReadStream(\"/path/to/your/file\"), {\n    engineName: \"engine_name\"\n});\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.embed_new.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.embedNew.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": ["import fs from \"fs\";"],
                                  "templateString": "fs.createReadStream(\"/path/to/your/file\")",
                                  "isOptional": false,
                                  "templateInputs": []
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": ["import fs from \"fs\";"],
                                  "templateString": "fs.createReadStream(\"/path/to/your/file\")",
                                  "isOptional": false,
                                  "templateInputs": []
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "engineName: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "engine_name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "text: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "text"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "textTruncate: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "text_truncate"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "imageUrl: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "image_url"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "audioUrl: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "audio_url"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "audioTruncate: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "audio_truncate"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "embed-new",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_embed/tasks": {
            "subpackageId": "subpackage_embed/tasks",
            "parent": "subpackage_embed",
            "name": "tasks",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list",
                "migratedFromUrlSlugs": ["list-video-embedding-tasks"],
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_embed/tasks.list",
                "name": "List video embedding tasks",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/embed/tasks"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Retrieve the video embedding tasks that were created after the given date and time, expressed in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\").",
                    "key": "started_at",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Retrieve the video embedding tasks that were created before the given date and time, expressed in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\").",
                    "key": "ended_at",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter video embedding tasks by their current status. Possible values are `processing`, `ready`, or `failed`.",
                    "key": "status",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "A number that identifies the page to retrieve.\n\n**Default**: `1`.",
                    "key": "page",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The number of items to return on each page.\n\n**Default**: `10`.\n**Max**: `50`.",
                    "key": "page_limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                ],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_embed/tasks:TasksListResponse"
                    }
                  },
                  "description": "A list of video embedding tasks has successfully been retrieved.\n"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:TasksListRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/embed/tasks",
                    "pathParameters": {},
                    "queryParameters": {
                      "started_at": "2024-03-01T00:00:00Z",
                      "ended_at": "2024-03-01T00:00:00Z",
                      "status": "processing"
                    },
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [
                        {
                          "_id": "66f537778d9641fe5a0d101f",
                          "engine_name": "Marengo-retrieval-2.6",
                          "status": "processing",
                          "created_at": "2024-09-26T10:29:19Z",
                          "video_embedding": {
                            "metadata": {
                              "input_filename": "01.mp4",
                              "input_url": "https://myvideo.com/myvideo.mp4",
                              "video_clip_length": 6,
                              "video_embedding_scope": ["clip"],
                              "duration": 13.4400001
                            }
                          }
                        },
                        {
                          "_id": "66f535874bd2802fc13293f4",
                          "engine_name": "Marengo-retrieval-2.6",
                          "status": "processing",
                          "created_at": "2024-09-26T10:21:04Z",
                          "video_embedding": {
                            "metadata": {
                              "input_filename": "01.mp4",
                              "input_url": "https://myvideo.com/myvideo.mp4",
                              "video_clip_length": 6,
                              "video_embedding_scope": ["clip"],
                              "duration": 13.4400001
                            }
                          }
                        },
                        {
                          "_id": "66f534fd4bd2802fc13293ee",
                          "engine_name": "Marengo-retrieval-2.6",
                          "status": "processing",
                          "created_at": "2024-09-26T10:18:44Z",
                          "video_embedding": {
                            "metadata": {
                              "input_filename": "01.mp4",
                              "input_url": "https://myvideo.com/myvideo.mp4",
                              "video_clip_length": 6,
                              "video_embedding_scope": ["clip"],
                              "duration": 13.4400001
                            }
                          }
                        }
                      ],
                      "page_info": {
                        "limit_per_page": 10,
                        "page": 1,
                        "total_page": 1,
                        "total_results": 3
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.embed.tasks.list()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.list()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.list();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [
                          {
                            "_id": "66f537778d9641fe5a0d101f",
                            "engine_name": "Marengo-retrieval-2.6",
                            "status": "processing",
                            "created_at": "2024-09-26T10:29:19Z",
                            "video_embedding": {
                              "metadata": {
                                "input_filename": "01.mp4",
                                "input_url": "https://myvideo.com/myvideo.mp4",
                                "video_clip_length": 6,
                                "video_embedding_scope": ["clip"],
                                "duration": 13.4400001
                              }
                            }
                          },
                          {
                            "_id": "66f535874bd2802fc13293f4",
                            "engine_name": "Marengo-retrieval-2.6",
                            "status": "processing",
                            "created_at": "2024-09-26T10:21:04Z",
                            "video_embedding": {
                              "metadata": {
                                "input_filename": "01.mp4",
                                "input_url": "https://myvideo.com/myvideo.mp4",
                                "video_clip_length": 6,
                                "video_embedding_scope": ["clip"],
                                "duration": 13.4400001
                              }
                            }
                          },
                          {
                            "_id": "66f534fd4bd2802fc13293ee",
                            "engine_name": "Marengo-retrieval-2.6",
                            "status": "processing",
                            "created_at": "2024-09-26T10:18:44Z",
                            "video_embedding": {
                              "metadata": {
                                "input_filename": "01.mp4",
                                "input_url": "https://myvideo.com/myvideo.mp4",
                                "video_clip_length": 6,
                                "video_embedding_scope": ["clip"],
                                "duration": 13.4400001
                              }
                            }
                          }
                        ],
                        "page_info": {
                          "limit_per_page": 10,
                          "page": 1,
                          "total_page": 1,
                          "total_results": 3
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/embed/tasks",
                    "pathParameters": {},
                    "queryParameters": {
                      "started_at": "string",
                      "ended_at": "string"
                    },
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.embed.tasks.list()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.list()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.list();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method returns a list of the video embedding tasks in your account. The platform returns your video embedding tasks sorted by creation date, with the newest at the top of the list.\n\n**NOTES**:\n\n- Video embeddings are stored for seven days\n- When you invoke this method without specifying the `started_at` and `ended_at` parameters, the platform returns all the video embedding tasks created within the last seven days.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.embed.tasks.list(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "started_at=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "started_at",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "ended_at=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "ended_at",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "status=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "status",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "page=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "page",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "page_limit=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "page_limit",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.embed.tasks.list(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "startedAt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "started_at"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "endedAt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "ended_at"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "status: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "status"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "page: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "page"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "pageLimit: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "page_limit"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["create-a-video-embedding-task"],
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_embed/tasks.create",
                "name": "Create a video embedding task",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/embed/tasks"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "TasksCreateRequest",
                      "properties": [
                        {
                          "type": "bodyProperty",
                          "key": "engine_name",
                          "valueType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          },
                          "description": "The name of the engine you want to use. The following engines are available:\n  - `Marengo-retrieval-2.6`\n"
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "video_file",
                            "isOptional": true
                          }
                        },
                        {
                          "type": "bodyProperty",
                          "key": "video_url",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Specify this parameter to upload a video from a publicly accessible URL.\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "video_start_offset_sec",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "double"
                              }
                            }
                          },
                          "description": "The start offset in seconds from the beginning of the video where processing should begin. Specifying 0 means starting from the beginning of the video.\n\n**Default**: 0\n**Min**: 0\n**Max**: Duration of the video minus 6\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "video_end_offset_sec",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "double"
                              }
                            }
                          },
                          "description": "The end offset in seconds from the beginning of the video where processing should stop.\n\nEnsure the following when you specify this parameter:\n- The end offset does not exceed the total duration of the video file.\n- The end offset is greater than the start offset.\n- You must set both the start and end offsets. Setting only one of these offsets is not permitted, resulting in an error.\n\n**Min**: video_start_offset + 6\n**Max**: Duration of the video file\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "video_clip_length",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "double"
                              }
                            }
                          },
                          "description": "The desired duration in seconds for each clip for which the platform generates an embedding. Ensure that the clip length does not exceed the interval between the start and end offsets.\n\n**Default**: 6\n**Min**: 2\n**Max**: 10\n"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "video_embedding_scope",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string",
                                "default": "clip"
                              }
                            }
                          },
                          "description": "Defines the scope of video embedding generation. Valid values are the following:\n- `clip`: Creates embeddings for each video segment of `video_clip_length` seconds, from `video_start_offset_sec` to `video_end_offset_sec`.\n- `clip` and `video`: Creates embeddings for video segments and the entire video.\n\nTo create embeddings for segments and the entire video in the same request, include this parameter twice as shown below:\n\n```json\n--form video_embedding_scope=clip \\\n--form video_embedding_scope=video\n```\n\n**Default**: `clip`\n"
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_embed/tasks:TasksCreateResponse"
                    }
                  },
                  "description": "A video embedding task has successfully been created.\n"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:TasksCreateRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "insufficient_funds",
                            "message": "Not enough free credit. Please register a payment method or contact sales@twelvelabs.io.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      },
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/embed/tasks",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "requestBody": {
                      "engine_name": "engine_name"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "_id": "66419a20c70bb578439bd8f4"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.embed.tasks.create(\n        engine_name=\"engine_name\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.create(\n    engine_name=\"engine_name\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\nimport * as fs from \"fs\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.create(fs.createReadStream(\"/path/to/your/file\"), {\n    engineName: \"engine_name\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "engine_name": {
                          "type": "json",
                          "value": "engine_name"
                        },
                        "video_file": {
                          "type": "filename",
                          "value": "<file1>"
                        },
                        "video_url": {
                          "type": "json"
                        },
                        "video_start_offset_sec": {
                          "type": "json"
                        },
                        "video_end_offset_sec": {
                          "type": "json"
                        },
                        "video_clip_length": {
                          "type": "json"
                        },
                        "video_embedding_scope": {
                          "type": "json"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "_id": "66419a20c70bb578439bd8f4"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/embed/tasks",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.embed.tasks.create(\n        engine_name=\"engine_name\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.create(\n    engine_name=\"engine_name\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\nimport * as fs from \"fs\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.create(fs.createReadStream(\"/path/to/your/file\"), {\n    engineName: \"engine_name\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "engine_name": {
                          "type": "json",
                          "value": "string"
                        },
                        "video_url": {
                          "type": "json"
                        },
                        "video_start_offset_sec": {
                          "type": "json"
                        },
                        "video_end_offset_sec": {
                          "type": "json"
                        },
                        "video_clip_length": {
                          "type": "json"
                        },
                        "video_embedding_scope": {
                          "type": "json"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method creates a new video embedding task that uploads a video to the platform and creates one or multiple video embeddings.\n\nEnsure your video meets the requirements in the [Prerequisites](/docs/create-video-embeddings#prerequisites) section of the **Create video embeddings** page.\n\nUpload options:\n\n- **Local file**: Use the `video_file` parameter\n- **Publicly accessible URL**: Use the `video_url` parameter.\n\nSpecify at least one option. If both are provided, `video_url` takes precedence.\n\n**NOTES**:\n\n- The “Marengo-retrieval-2.6” video understanding engine generates embeddings for all modalities in the same latent space. This shared space enables any-to-any searches across different types of content.\n- Video embeddings are stored for seven days.\n- The platform supports uploading video files that can play without additional user interaction or custom video players. Ensure your URL points to the raw video file, not a web page containing the video. Links to third-party hosting sites, cloud storage services, or videos requiring extra steps to play are not supported.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.embed.tasks.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "engine_name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "engine_name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "video_file=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "video_file",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "video_url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "video_url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "video_start_offset_sec=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "video_start_offset_sec",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "video_end_offset_sec=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "video_end_offset_sec",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "video_clip_length=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "video_clip_length",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "video_embedding_scope=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "video_embedding_scope",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.embed.tasks.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": ["import fs from \"fs\";"],
                                  "templateString": "fs.createReadStream(\"/path/to/your/file\")",
                                  "isOptional": false,
                                  "templateInputs": []
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "engineName: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "engine_name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "videoUrl: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "video_url"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "videoStartOffsetSec: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "video_start_offset_sec"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "videoEndOffsetSec: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "video_end_offset_sec"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "videoClipLength: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "video_clip_length"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "videoEmbeddingScope: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "video_embedding_scope"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "retrieve",
                "migratedFromUrlSlugs": ["retrieve-video-embeddings"],
                "method": "GET",
                "id": "retrieve",
                "originalEndpointId": "endpoint_embed/tasks.retrieve",
                "name": "Retrieve video embeddings",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The unique identifier of your video embedding task.",
                      "key": "task_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/embed/tasks/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "task_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_embed/tasks:TasksRetrieveResponse"
                    }
                  },
                  "description": "Video embeddings have successfully been retrieved.\n"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:TasksRetrieveRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/embed/tasks/663da73b31cdd0c1f638a8e6",
                    "pathParameters": {
                      "task_id": "663da73b31cdd0c1f638a8e6"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "_id": "663e16ac4d11aff765088b3a",
                      "created_at": "2024-09-26T10:29:19.968Z",
                      "engine_name": "Marengo-retrieval-2.6",
                      "status": "ready",
                      "video_embedding": {
                        "metadata": {
                          "input_filename": "01.mp4",
                          "input_url": "example.com/video.mp4",
                          "video_clip_length": 6,
                          "video_embedding_scope": ["clip", "video"],
                          "duration": 18
                        },
                        "segments": [
                          {
                            "start_offset_sec": 0,
                            "end_offset_sec": 6,
                            "embedding_scope": "clip",
                            "float": [-0.060086973, 0.016479108]
                          },
                          {
                            "start_offset_sec": 6,
                            "end_offset_sec": 12,
                            "embedding_scope": "clip",
                            "float": [-0.056660935, 0.012404642]
                          },
                          {
                            "start_offset_sec": 12,
                            "end_offset_sec": 18,
                            "embedding_scope": "clip",
                            "float": [-0.05971131, -0.00859428]
                          },
                          {
                            "start_offset_sec": 0,
                            "end_offset_sec": 18,
                            "embedding_scope": "video",
                            "float": [-0.05971131, -0.00859428]
                          }
                        ]
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.embed.tasks.retrieve(\n        task_id=\"task_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.retrieve(\n    task_id=\"task_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.retrieve(\"task_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "_id": "663e16ac4d11aff765088b3a",
                        "created_at": "2024-09-26T10:29:19.968Z",
                        "engine_name": "Marengo-retrieval-2.6",
                        "status": "ready",
                        "video_embedding": {
                          "metadata": {
                            "input_filename": "01.mp4",
                            "input_url": "example.com/video.mp4",
                            "video_clip_length": 6,
                            "video_embedding_scope": ["clip", "video"],
                            "duration": 18
                          },
                          "segments": [
                            {
                              "start_offset_sec": 0,
                              "end_offset_sec": 6,
                              "embedding_scope": "clip",
                              "float": [-0.060086973, 0.016479108]
                            },
                            {
                              "start_offset_sec": 6,
                              "end_offset_sec": 12,
                              "embedding_scope": "clip",
                              "float": [-0.056660935, 0.012404642]
                            },
                            {
                              "start_offset_sec": 12,
                              "end_offset_sec": 18,
                              "embedding_scope": "clip",
                              "float": [-0.05971131, -0.00859428]
                            },
                            {
                              "start_offset_sec": 0,
                              "end_offset_sec": 18,
                              "embedding_scope": "video",
                              "float": [-0.05971131, -0.00859428]
                            }
                          ]
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/embed/tasks/:task_id",
                    "pathParameters": {
                      "task_id": ":task_id"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.embed.tasks.retrieve(\n        task_id=\"task_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.retrieve(\n    task_id=\"task_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.retrieve(\"task_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method retrieves embeddings for a specific video embedding task. Ensure the task status is `ready` before invoking this method. Refer to the [Retrieve a video embedding](/reference/retrieve-video-embeding-task) task page for instructions on checking the task status.\n\n> 🚧 Important\n> The response includes breaking changes that might require updates to your application code. Key differences:\n>\n> - The `video_embeddings` field has been renamed to `video_embedding` (plural to singular)\n> - The response now includes a nested array named `segments`.\n\n- The `metadata` field is now nested under `video_embedding`.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.embed.tasks.retrieve(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "task_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "task_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.embed.tasks.retrieve(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "task_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [
              "type_embed/tasks:TasksListResponsePageInfo",
              "type_embed/tasks:TasksListResponse",
              "type_embed/tasks:TasksCreateResponse",
              "type_embed/tasks:TasksRetrieveResponseVideoEmbeddingMetadata",
              "type_embed/tasks:TasksRetrieveResponseVideoEmbeddingSegmentsItem",
              "type_embed/tasks:TasksRetrieveResponseVideoEmbedding",
              "type_embed/tasks:TasksRetrieveResponse"
            ],
            "subpackages": ["subpackage_embed/tasks/status"],
            "urlSlug": "tasks",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_embed/tasks/status": {
            "subpackageId": "subpackage_embed/tasks/status",
            "parent": "subpackage_embed/tasks",
            "name": "status",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "retrieve",
                "migratedFromUrlSlugs": ["retrieve-the-status-of-a-video-embedding-task"],
                "method": "GET",
                "id": "retrieve",
                "originalEndpointId": "endpoint_embed/tasks/status.retrieve",
                "name": "Retrieve the status of a video embedding task",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The unique identifier of your video embedding task.",
                      "key": "task_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/embed/tasks/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "task_id"
                    },
                    {
                      "type": "literal",
                      "value": "/status"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_embed/tasks/status:StatusRetrieveResponse"
                    }
                  },
                  "description": "The status of your video embedding task has been retrieved.\n"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:StatusRetrieveRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/embed/tasks/663da73b31cdd0c1f638a8e6/status",
                    "pathParameters": {
                      "task_id": "663da73b31cdd0c1f638a8e6"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "_id": "6641c0efc70bb578439bd909",
                      "status": "processing",
                      "engine_name": "Marengo-retrieval-2.6",
                      "metadata": {
                        "input_filename": "01.mp4",
                        "input_url": "example.com/video.mp4",
                        "video_clip_length": 6,
                        "video_embedding_scope": ["clip", "video"],
                        "duration": 18
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.embed.tasks.status.retrieve(\n        task_id=\"task_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.status.retrieve(\n    task_id=\"task_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.status.retrieve(\"task_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "_id": "6641c0efc70bb578439bd909",
                        "status": "processing",
                        "engine_name": "Marengo-retrieval-2.6",
                        "metadata": {
                          "input_filename": "01.mp4",
                          "input_url": "example.com/video.mp4",
                          "video_clip_length": 6,
                          "video_embedding_scope": ["clip", "video"],
                          "duration": 18
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/embed/tasks/:task_id/status",
                    "pathParameters": {
                      "task_id": ":task_id"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.embed.tasks.status.retrieve(\n        task_id=\"task_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.status.retrieve(\n    task_id=\"task_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.status.retrieve(\"task_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method retrieves the status of a video embedding task. Check the task status of a video embedding task to determine when you can retrieve the embedding.\n\nA task can have one of the following statuses:\n\n- `processing`: The platform is creating the embeddings.\n- `ready`: Processing is complete. Retrieve the embeddings by invoking the [`GET`](/reference/retrieve-video-embeding) method of the `/embed/tasks/{task_id} endpoint`.\n- `failed`: The task could not be completed, and the embeddings haven't been created.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.embed.tasks.status.retrieve(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "task_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "task_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.embed.tasks.status.retrieve(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "task_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [
              "type_embed/tasks/status:StatusRetrieveResponseMetadata",
              "type_embed/tasks/status:StatusRetrieveResponse"
            ],
            "subpackages": [],
            "urlSlug": "status",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_indexes/videos": {
            "subpackageId": "subpackage_indexes/videos",
            "parent": "subpackage_indexes",
            "name": "videos",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list",
                "migratedFromUrlSlugs": ["list-videos"],
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_indexes/videos.list",
                "name": "List videos",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The unique identifier of the index for which the API will retrieve the videos.",
                      "key": "index-id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/indexes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "index-id"
                    },
                    {
                      "type": "literal",
                      "value": "/videos"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "A number that identifies the page to retrieve.\n\n**Default**: `1`.",
                    "key": "page",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The number of items to return on each page.\n\n**Default**: `10`.\n**Max**: `50`.",
                    "key": "page_limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The field to sort on. The following options are available:\n\n- `updated_at`: Sorts by the time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the item was updated.\n- `created_at`: Sorts by the time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the item was created.\n\n**Default**: `created_at`.",
                    "key": "sort_by",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The sorting direction. The following options are available:\n\n- `asc`\n- `desc`\n\n**Default**: `desc`.",
                    "key": "sort_option",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by the unique identifier of a video index.",
                    "key": "_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by filename.",
                    "key": "filename",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by duration. Expressed in seconds.",
                    "key": "duration",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by frames per second.",
                    "key": "fps",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by width.",
                    "key": "width",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by height.",
                    "key": "height",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter by size. Expressed in bytes.",
                    "key": "size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter videos by the creation date and time of their associated indexing tasks, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the videos whose indexing tasks were created on the specified date at or after the given time.",
                    "key": "created_at",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "This filter applies only to videos updated using the [`PUT`](/reference/update-video-information) method of the `/indexes/{index-id}/videos/{video-id}` endpoint. It filters videos by the last update date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the video indexing tasks that were last updated on the specified date at or after the given time.",
                    "key": "updated_at",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter videos by the completion time of their associated indexing tasks, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the videos whose indexing tasks were completed on the specified date at or after the given time.",
                    "key": "indexed_at",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "To enable filtering by custom fields, first add metadata to your video by calling the [`PUT](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint.\n\nExamples:\n\n- To filter on a string: `?category=recentlyAdded`\n- To filter on an integer: `?batchNumber=5`\n- To filter on a float: `?rating=9.3`\n- To filter on a boolean: `?needsReview=true`",
                    "key": "metadata",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "map",
                        "keyType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        },
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_indexes/videos:VideosListRequestMetadataValue"
                          }
                        }
                      }
                    }
                  }
                ],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_indexes/videos:VideosListResponse"
                    }
                  },
                  "description": "The video vectors in the specified index have successfully been retrieved."
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:VideosListRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/indexes/6298d673f1090f1100476d4c/videos",
                    "pathParameters": {
                      "index-id": "6298d673f1090f1100476d4c"
                    },
                    "queryParameters": {
                      "sort_by": "created_at",
                      "sort_option": "desc",
                      "_id": "6298d673f1090f1100476d4c",
                      "filename": "01.mp4",
                      "created_at": "2024-08-16T16:53:59Z",
                      "updated_at": "2024-08-16T16:53:59Z",
                      "indexed_at": "2024-08-16T16:53:59Z"
                    },
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [
                        {
                          "_id": "62a17bf847f5678267ec10cc",
                          "created_at": "2022-06-09T04:50:00.879Z",
                          "updated_at": "2022-06-09T04:55:57.256Z",
                          "indexed_at": "2024-03-01T00:00:00Z",
                          "metadata": {
                            "filename": "01.mp4",
                            "duration": 531.998133,
                            "fps": 741.875,
                            "width": 854,
                            "height": 400,
                            "size": 65749715
                          }
                        },
                        {
                          "_id": "62a17bce47f5678267ec10c6",
                          "created_at": "2022-06-09T04:49:20.001Z",
                          "updated_at": "2022-06-09T04:54:10.345Z",
                          "indexed_at": "2024-03-01T00:00:00Z",
                          "metadata": {
                            "filename": "02.mp4",
                            "duration": 741.875,
                            "fps": 741.875,
                            "width": 854,
                            "height": 480,
                            "size": 65749715
                          }
                        }
                      ],
                      "page_info": {
                        "limit_per_page": 10,
                        "page": 1,
                        "total_page": 1,
                        "total_results": 2
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.indexes.videos.list(\n        index_id=\"index-id\",\n    )\n    async for item in response:\n        yield item\n    # alternatively, you can paginate page-by-page\n    async for page in response.iter_pages():\n        yield page\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.indexes.videos.list(\n    index_id=\"index-id\",\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.list(\"index-id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [
                          {
                            "_id": "62a17bf847f5678267ec10cc",
                            "created_at": "2022-06-09T04:50:00.879Z",
                            "updated_at": "2022-06-09T04:55:57.256Z",
                            "indexed_at": "2024-03-01T00:00:00Z",
                            "metadata": {
                              "filename": "01.mp4",
                              "duration": 531.998133,
                              "fps": 741.875,
                              "width": 854,
                              "height": 400,
                              "size": 65749715
                            }
                          },
                          {
                            "_id": "62a17bce47f5678267ec10c6",
                            "created_at": "2022-06-09T04:49:20.001Z",
                            "updated_at": "2022-06-09T04:54:10.345Z",
                            "indexed_at": "2024-03-01T00:00:00Z",
                            "metadata": {
                              "filename": "02.mp4",
                              "duration": 741.875,
                              "fps": 741.875,
                              "width": 854,
                              "height": 480,
                              "size": 65749715
                            }
                          }
                        ],
                        "page_info": {
                          "limit_per_page": 10,
                          "page": 1,
                          "total_page": 1,
                          "total_results": 2
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/indexes/:index-id/videos",
                    "pathParameters": {
                      "index-id": ":index-id"
                    },
                    "queryParameters": {
                      "page": 0,
                      "page_limit": 0
                    },
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.indexes.videos.list(\n        index_id=\"index-id\",\n    )\n    async for item in response:\n        yield item\n    # alternatively, you can paginate page-by-page\n    async for page in response.iter_pages():\n        yield page\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.indexes.videos.list(\n    index_id=\"index-id\",\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.list(\"index-id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method returns a list of the videos in the specified index. By default, the API returns your videos sorted by creation date, with the newest at the top of the list.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.indexes.videos.list(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "index-id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "page=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "page",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "page_limit=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "page_limit",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "sort_by=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "sort_by",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "sort_option=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "sort_option",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "filename=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "filename",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "duration=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "duration",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "fps=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "fps",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "width=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "width",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "height=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "height",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "size=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "size",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "created_at=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "created_at",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "updated_at=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "updated_at",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "indexed_at=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "indexed_at",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "metadata={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "members": [
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "string"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "double"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "boolean"
                                    }
                                  },
                                  "template": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                }
                              ],
                              "templateInput": {
                                "location": "RELATIVE",
                                "path": null
                              },
                              "type": "union_v2"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "QUERY",
                              "path": "metadata"
                            },
                            "type": "dict"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.indexes.videos.list(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "index-id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "page: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "page"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "pageLimit: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "page_limit"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "sortBy: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "sort_by"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "sortOption: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "sort_option"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "id: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "filename: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "filename"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "duration: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "duration"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "fps: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "fps"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "width: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "width"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "height: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "height"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "size: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "size"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "createdAt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "created_at"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "updatedAt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "updated_at"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "indexedAt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "indexed_at"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "dict",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "metadata: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "delimiter": ",\n\t\t\t",
                                  "keyValueSeparator": ": ",
                                  "keyTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "valueTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "QUERY",
                                    "path": "metadata"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "retrieve",
                "migratedFromUrlSlugs": ["retrieve-video-information"],
                "method": "GET",
                "id": "retrieve",
                "originalEndpointId": "endpoint_indexes/videos.retrieve",
                "name": "Retrieve video information",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The unique identifier of the index to which the video has been uploaded.",
                      "key": "index-id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The unique identifier of the video to retrieve.",
                      "key": "video-id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/indexes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "index-id"
                    },
                    {
                      "type": "literal",
                      "value": "/videos/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "video-id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_indexes/videos:VideosRetrieveResponse"
                    }
                  },
                  "description": "The specified video information has successfully been retrieved."
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:VideosRetrieveRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/indexes/6298d673f1090f1100476d4c/videos/6298d673f1090f1100476d4c",
                    "pathParameters": {
                      "index-id": "6298d673f1090f1100476d4c",
                      "video-id": "6298d673f1090f1100476d4c"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "_id": "61e17be5777e6caec646fa07",
                      "created_at": "2022-01-14T13:34:29Z",
                      "updated_at": "2022-01-14T13:34:29Z",
                      "indexed_at": "2022-01-14T14:05:55Z",
                      "metadata": {
                        "duration": 3747.841667,
                        "filename": "IOKgzkakhlk.mp4",
                        "fps": 29.97002997002997,
                        "height": 360,
                        "width": 482
                      },
                      "hls": {
                        "video_url": "https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8",
                        "thumbnail_urls": [
                          "https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg"
                        ],
                        "status": "COMPLETE",
                        "updated_at": "2024-01-16T07:59:40.879Z"
                      },
                      "embedding": {
                        "engine_name": "Marengo-retrieval-2.6",
                        "video_embedding": {
                          "segments": [
                            {
                              "start_offset_sec": 0,
                              "end_offset_sec": 7.5666666,
                              "embedding_scope": "clip",
                              "float": [-0.04747168, 0.030509098, 0.032282468]
                            }
                          ]
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.videos.retrieve(\n        index_id=\"index-id\",\n        video_id=\"video-id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.videos.retrieve(\n    index_id=\"index-id\",\n    video_id=\"video-id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.retrieve(\"index-id\", \"video-id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "_id": "61e17be5777e6caec646fa07",
                        "created_at": "2022-01-14T13:34:29Z",
                        "updated_at": "2022-01-14T13:34:29Z",
                        "indexed_at": "2022-01-14T14:05:55Z",
                        "metadata": {
                          "duration": 3747.841667,
                          "filename": "IOKgzkakhlk.mp4",
                          "fps": 29.97002997002997,
                          "height": 360,
                          "width": 482
                        },
                        "hls": {
                          "video_url": "https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8",
                          "thumbnail_urls": [
                            "https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg"
                          ],
                          "status": "COMPLETE",
                          "updated_at": "2024-01-16T07:59:40.879Z"
                        },
                        "embedding": {
                          "engine_name": "Marengo-retrieval-2.6",
                          "video_embedding": {
                            "segments": [
                              {
                                "start_offset_sec": 0,
                                "end_offset_sec": 7.5666666,
                                "embedding_scope": "clip",
                                "float": [-0.04747168, 0.030509098, 0.032282468]
                              }
                            ]
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/indexes/:index-id/videos/:video-id",
                    "pathParameters": {
                      "index-id": ":index-id",
                      "video-id": ":video-id"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.videos.retrieve(\n        index_id=\"index-id\",\n        video_id=\"video-id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.videos.retrieve(\n    index_id=\"index-id\",\n    video_id=\"video-id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.retrieve(\"index-id\", \"video-id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method retrieves information about the specified video.\n\n> 🚧 Important\n> When retrieving video embeddings, the response includes breaking changes that might require updates to your application code. Key differences:\n>\n> - The `video_embeddings` field has been renamed to `video_embedding` (plural to singular)\n> - The response now includes a nested array named `segments`.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.indexes.videos.retrieve(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "index-id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "video_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "video-id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "embed=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "embed",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.indexes.videos.retrieve(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "index-id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "video-id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update",
                "migratedFromUrlSlugs": ["update-video-information"],
                "method": "PUT",
                "id": "update",
                "originalEndpointId": "endpoint_indexes/videos.update",
                "name": "Update video information",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The unique identifier of the index to which the video has been uploaded.",
                      "key": "index-id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The unique identifier of the video to update.",
                      "key": "video-id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/indexes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "index-id"
                    },
                    {
                      "type": "literal",
                      "value": "/videos/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "video-id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Set this parameter to `true` to retrieve the video embedding in the response. The video must be indexed with the Marengo video understanding engine version 2.6 or later. For details on enabling this engine for an index, see the [Create an index](/reference/create-index) page.\n**Default**: `false`.",
                    "key": "embed",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Specifies the new title of the video.\n",
                        "key": "video_title",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Metadata that helps you categorize your videos. You can specify a list of keys and values. Keys must be of type `string`, and values can be of the following types: `string`, `integer`, `float` or `boolean`.\n\n**NOTES:**\n-  If you want to store other types of data such as objects or arrays,  you must convert your data into string values.\n- You cannot override any of the predefined metadata (example: duration, width, length, etc) associated with a video.\n",
                        "key": "metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:VideosUpdateRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/indexes/6298d673f1090f1100476d4c/videos/6298d673f1090f1100476d4c",
                    "pathParameters": {
                      "index-id": "6298d673f1090f1100476d4c",
                      "video-id": "6298d673f1090f1100476d4c"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "requestBody": {
                      "video_title": "My new video title",
                      "metadata": {
                        "category": "recentlyAdded",
                        "batchNumber": 5,
                        "rating": 9.3,
                        "needsReview": true
                      }
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.videos.update(\n        index_id=\"index-id\",\n        video_id=\"video-id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.videos.update(\n    index_id=\"index-id\",\n    video_id=\"video-id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.update(\"index-id\", \"video-id\");\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "video_title": "My new video title",
                        "metadata": {
                          "category": "recentlyAdded",
                          "batchNumber": 5,
                          "rating": 9.3,
                          "needsReview": true
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/indexes/:index-id/videos/:video-id",
                    "pathParameters": {
                      "index-id": ":index-id",
                      "video-id": ":video-id"
                    },
                    "queryParameters": {
                      "embed": true
                    },
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.videos.update(\n        index_id=\"index-id\",\n        video_id=\"video-id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.videos.update(\n    index_id=\"index-id\",\n    video_id=\"video-id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.update(\"index-id\", \"video-id\");\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Use this method to update the title and the metadata of a video.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.indexes.videos.update(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "index-id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "video_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "video-id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "video_title=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "video_title",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "metadata={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "metadata"
                            },
                            "type": "dict"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.indexes.videos.update(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "index-id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "video-id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "videoTitle: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "video_title"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "dict",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "metadata: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "delimiter": ",\n\t\t\t",
                                  "keyValueSeparator": ": ",
                                  "keyTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "valueTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "metadata"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.twelvelabs.io/v1.3"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete",
                "migratedFromUrlSlugs": ["delete-video-information"],
                "method": "DELETE",
                "id": "delete",
                "originalEndpointId": "endpoint_indexes/videos.delete",
                "name": "Delete video information",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The unique identifier of the index to which the video has been uploaded.",
                      "key": "index-id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The unique identifier of the video to delete.",
                      "key": "video-id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/indexes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "index-id"
                    },
                    {
                      "type": "literal",
                      "value": "/videos/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "video-id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page.",
                    "key": "x-api-key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:VideosDeleteRequestBadRequestErrorBody"
                      }
                    },
                    "statusCode": 400,
                    "description": "The request has failed.",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "code": "generic_error",
                            "message": "An error occurred.",
                            "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/indexes/6298d673f1090f1100476d4c/videos/6298d673f1090f1100476d4c",
                    "pathParameters": {
                      "index-id": "6298d673f1090f1100476d4c",
                      "video-id": "6298d673f1090f1100476d4c"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "tlk-1234567890"
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.videos.delete(\n        index_id=\"index-id\",\n        video_id=\"video-id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.videos.delete(\n    index_id=\"index-id\",\n    video_id=\"video-id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.delete(\"index-id\", \"video-id\");\n"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/indexes/:index-id/videos/:video-id",
                    "pathParameters": {
                      "index-id": ":index-id",
                      "video-id": ":video-id"
                    },
                    "queryParameters": {},
                    "headers": {
                      "x-api-key": "string"
                    },
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.2.10",
                          "package": "twelvelabs"
                        },
                        "async_client": "import asyncio\n\nfrom twelvelabs import AsyncTwelveLabs\n\nclient = AsyncTwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.indexes.videos.delete(\n        index_id=\"index-id\",\n        video_id=\"video-id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.videos.delete(\n    index_id=\"index-id\",\n    video_id=\"video-id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.67",
                          "package": "twelevelabs-js"
                        },
                        "client": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.delete(\"index-id\", \"video-id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "docs_url": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This method deletes all the information about the specified video This action cannot be undone.",
                "authed": false,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.indexes.videos.delete(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "index_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "index-id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "video_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "video-id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from twelvelabs import TwelveLabs"],
                      "isOptional": true,
                      "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
                      "templateInputs": [],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.indexes.videos.delete(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "index-id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "video-id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { TwelveLabsClient } from \"twelevelabs-js\";"],
                      "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "HEADERS",
                                      "path": "x-api-key"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [
              "type_indexes/videos:VideosListRequestMetadataValue",
              "type_indexes/videos:VideosListResponsePageInfo",
              "type_indexes/videos:VideosListResponse",
              "type_indexes/videos:VideosRetrieveResponseMetadata",
              "type_indexes/videos:VideosRetrieveResponseHls",
              "type_indexes/videos:VideosRetrieveResponseEmbeddingVideoEmbeddingSegmentsItem",
              "type_indexes/videos:VideosRetrieveResponseEmbeddingVideoEmbedding",
              "type_indexes/videos:VideosRetrieveResponseEmbedding",
              "type_indexes/videos:VideosRetrieveResponse"
            ],
            "subpackages": [],
            "urlSlug": "videos",
            "webhooks": [],
            "websockets": []
          }
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      }
    },
    "files": {
      "866eba06-6241-47fb-a66f-d87e074f87d6": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//twelvelabs.docs.buildwithfern.com/2024-11-05T09%3A00%3A28.639Z/docs/assets/logo-dark.svg",
      "8972468f-3d2b-47e0-82b1-566275324969": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//twelvelabs.docs.buildwithfern.com/2024-11-05T09%3A00%3A28.639Z/docs/assets/logo-light.svg",
      "e7b15806-38ff-4157-b400-0e662563f17f": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//twelvelabs.docs.buildwithfern.com/2024-11-05T09%3A00%3A28.639Z/docs/assets/favicon.ico"
    },
    "jsFiles": {},
    "filesV2": {
      "866eba06-6241-47fb-a66f-d87e074f87d6": {
        "type": "image",
        "width": 317,
        "height": 41,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://twelvelabs.docs.buildwithfern.com/2024-11-05T09:00:28.639Z/docs/assets/logo-dark.svg"
      },
      "8972468f-3d2b-47e0-82b1-566275324969": {
        "type": "image",
        "width": 317,
        "height": 41,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://twelvelabs.docs.buildwithfern.com/2024-11-05T09:00:28.639Z/docs/assets/logo-light.svg"
      },
      "e7b15806-38ff-4157-b400-0e662563f17f": {
        "type": "image",
        "width": 16,
        "height": 16,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://twelvelabs.docs.buildwithfern.com/2024-11-05T09:00:28.639Z/docs/assets/favicon.ico"
      }
    },
    "pages": {
      "docs/pages/introduction.mdx": {
        "markdown": "The Twelve Labs Video Understanding Platform leverages artificial intelligence to extract information from videos. It identifies and interprets movements, actions, objects, individuals, sounds, on-screen text, and spoken words. Built on a state-of-the-art multimodal foundation model optimized for videos, the platform enables you to add rich, contextual video understanding to your applications through developer-friendly APIs.\n\n## Key Capabilities of Twelve Labs for Multimodal Video Understanding\n\nTwelve Labs equips developers with the following key capabilities:\n\n- **Deep Semantic Search**: Find the exact moment you need within your videos using natural language queries instead of tags or metadata.\n- **Zero-shot Classification**: Use natural language to create your custom taxonomy, facilitating accurate and efficient video classification tailored to your unique use case.\n- **Dynamic Video-to-Text Generation**: Capture the essence of your videos into concise summaries or custom reports. The platform offers built-in formats to generate titles, topics, summaries, hashtags, chapters, and highlights. Additionally, you can provide a prompt detailing the content and desired output format, such as a police report, to tailor the results to your needs.\n- **Intuitive Integration**: Embed a state-of-the-art multimodal foundation model for video understanding into your application in just a few API calls.\n- **Rapid Result Retrieval**: Receive your results within seconds.\n- **Scalability**: Our cloud-native distributed infrastructure seamlessly processes thousands of concurrent requests.\n\n## Twelve Labs’ Advantages\n\nThe table below provides a basic comparison between Twelve Labs Video Understanding Platform and other video AI solutions:\n\n- **Simplified API Integration**: Perform a rich set of video understanding tasks with just a few API calls. This allows you to focus on building your application rather than aggregating data from separate image and speech APIs or managing multiple data sources.\n- **Natural Language Use**: Tap into the model's capabilities using everyday language to write queries or prompts. This method is more effective, intuitive, flexible, and accurate than using solely rules, tags, or keywords.\n- **Image-to-Video Search**: Perform searches using images as queries and find videos semantically similar to the provided images. This addresses the challenges you face when the existing reverse image search tools yield inconsistent results or when describing the desired results using text is challenging.\n- **Multimodal Approach**: The platform adopts a video-first, multimodal approach, surpassing traditional unimodal models that depend exclusively on text or images, providing a comprehensive understanding of your videos.\n- **One-time Video Indexing for Multiple Tasks**: Index your videos once and create contextual video embeddings that encapsulate semantics for scaling and repurposing, allowing you to search and classify your videos swiftly.\n- **Flexible Deployment**: The platform can adapt to varied business needs, with deployment options spanning on-premise, hybrid, or cloud-based environments.\n- **Fine-tuning Capabilities**: Though our state-of-the-art foundation model for video understanding already yields highly accurate results, we can provide fine-tuning capabilities to help you get more out of the models and achieve better results with only a few examples.\n\nFor details on fine-tuning the models or different deployment options, please contact us at [email protected].\n\n## Discover Twelve Labs\n\nExperience the key capabilities of the Twelve Labs Video Understanding platform by signing up for a free account.\n",
        "editThisPageUrl": "https://github.com/twelve-labs/docs/blob/main/fern/docs/pages/introduction.mdx"
      },
      "docs/pages/platform-overview.mdx": {
        "markdown": "The Twelve Labs Video Understanding Platform, currently in beta, offers an API suite for integrating a state-of-the-art foundation model that understands contextual information from your videos, making it accessible to your applications. The API is organized around REST and is compatible with most programming languages. You can also use Postman or other REST clients to send requests and view responses.\n\n## Architecture Overview\n\nThe following diagram illustrates the architecture of the Twelve Labs Video Understanding Platform and how different parts interact:\n\n### Indexes\n\nAn index is a basic unit for organizing and storing video data, consisting of video embeddings and metadata. Indexes facilitate information retrieval and processing. You can use indexes to group related videos, making it easier to manage and search through your video data.\n\n### Video Understanding Engines\n\nA video understanding engine consists of a family of deep neural networks built on top of our multimodal foundation model for video understanding. These engines offer search, classification, and summarization capabilities. For each index, you must configure the engines you want to enable. The available engines and their capabilities are detailed on the [Video Understanding Engines page](https://docs.twelvelabs.io/docs/video-understanding-engines).\n\n### Engine Options\n\nThe engine options define the types of information that a specific engine will process. Currently, the platform provides the following engine options:\n\n- **Visual**: Processes visual elements within the video.\n- **Conversation**: Analyzes spoken words and dialogues.\n- **Text in Video**: Detects and processes text appearing in the video.\n- **Logo**: Identifies logos within the video content.\n\nFor more details, see the [Engine Options page](https://docs.twelvelabs.io/docs/engine-options).\n\n### Query/Prompt Processing Engine\n\nThis component processes user inputs such as search queries, classification queries, and prompts for generating text from video. It returns the corresponding results to your application, enabling you to leverage the platform's capabilities effectively.\n",
        "editThisPageUrl": "https://github.com/twelve-labs/docs/blob/main/fern/docs/pages/platform-overview.mdx"
      },
      "docs/pages/quickstart.mdx": {
        "markdown": "This guide demonstrates building a production-ready video understanding service using a three-step process:\n\n1. **Create an Index**: Organize and store video data, consisting of video embeddings and metadata.\n2. **Upload Videos**: Add video content to your index for processing.\n3. **Perform Downstream Tasks**: Utilize the platform's capabilities to search, classify, and generate text from videos.\n\nEach step is composed of a single API call, making the process straightforward and efficient.\n\n> **Note**: You can interact with the platform using one of the available SDKs or an HTTP client like `requests` or `axios`. This guide demonstrates how to use the SDKs, the recommended approach for most scenarios.\n\n## Prerequisites\n\n- Familiarity with the concepts described on the Platform overview page.\n- A free account on Twelve Labs. Sign up or sign in if you already have one.\n- An API key. Retrieve it by navigating to the API Key page, logging in, and selecting the **Copy** icon next to your API key.\n- Videos to upload must meet the following requirements:\n  - **Video resolution**: Between 360p and 4K.\n  - **Video and audio formats**: Must be encoded in formats listed on the FFmpeg Formats Documentation page.\n  - **Duration**: For Marengo, between 4 seconds and 2 hours. For Pegasus, between 4 seconds and 30 minutes.\n  - **File size**: Must not exceed 2 GB.\n  - **Audio track**: Required if the `conversation` engine option is selected.\n\n- Install the Twelve Labs SDK for your programming language:\n  - Python: `pip install twelvelabs`\n  - Node.js: `yarn add twelvelabs-js`\n\n## Procedure\n\nFollow the steps in one of the guides below, depending on what task you want to complete:\n\n- **Search Videos**: Use natural language queries to find specific moments in your videos.\n- **Generate Text from Video**: Create summaries, titles, and more from video content.\n- **Classify Videos**: Organize videos into categories based on custom taxonomies.\n- **Create Video Embeddings**: Generate embeddings for advanced video analysis.\n\nFor detailed instructions, refer to the specific guides on each task.\n",
        "editThisPageUrl": "https://github.com/twelve-labs/docs/blob/main/fern/docs/pages/quickstart.mdx"
      },
      "docs/pages/authentication.mdx": {
        "markdown": "The Twelve Labs API uses API keys for authentication. Treat your API key like a password and do not distribute or hardcode it. If you suspect your account is compromised, generate a new key.\n\n## Managing API Keys\n\n- **Retrieve API Key**: Go to the API key page and select the **copy** icon next to the key to copy it to your clipboard.\n- **Generate a New API Key**: Go to the API key page and select the **Regenerate Key** button under the **API Key** section.\n- **Revoke API Key**: Go to the API key page and select the **Revoke Key** button under the **API Key** section.\n\nFor security reasons, API keys automatically expire every 90 days. You must generate a new key to continue using the API once it expires.\n\n> **Note**\n> - If your policy requires more frequent key rotation, you can generate a new key at any time.\n> - To temporarily suspend API usage without deleting your account, you can revoke your API key.\n\n## Using the SDK\n\nWhen using the SDK client, provide the API key when instantiating the client.\n\n### Prerequisites\n\n- You must have an API key.\n\n### Procedure\n\n1. Install the `twelvelabs` package:\n   - Python: `pip install twelvelabs`\n   - Node.js: `yarn add twelvelabs-js`\n\n2. Import the SDK into your application:\n   - Python: `from twelvelabs import TwelveLabs`\n   - Node.js: `import { TwelveLabs } from 'twelvelabs-js';`\n\n3. Instantiate the SDK client:\n   - Python: `client = TwelveLabs(api_key=\"<YOUR_API_KEY>\")`\n   - Node.js: `const client = new TwelveLabs({ apiKey: '<YOUR_API_KEY>' });`\n\n4. Use the SDK to interact with the platform:\n   - Example: Create an index\n\n```python\ntry:\n    index = client.index.create(\n        name=\"<YOUR_INDEX_NAME>\",\n        engines=[\n            {\n                \"name\": \"marengo2.6\",\n                \"options\": [\"visual\", \"conversation\"],\n            }\n        ]\n    )\n    print(f\"Created index: id={index.id}\")\nexcept AuthenticationError as e:\n    print(e)\n```\n\n```javascript\ntry {\n    let index = await client.index.create({\n        name: '<YOUR_INDEX_NAME>',\n        engines: [\n            {\n                name: 'marengo2.6',\n                options: ['visual', 'conversation'],\n            },\n        ],\n    });\n    console.log(`Created index: id=${index.id} name=${index.name} engines=${JSON.stringify(index.engines)}`);\n} catch (e) {\n    console.log(e);\n}\n```\n\nIf the API key is valid, the index will be created successfully. If it is expired or invalid, an error message will be returned.\n\n## Using an HTTP Client\n\nWhen using an HTTP client like `requests` or `axios`, include the API key in the headers of each HTTP request.\n\n### Prerequisites\n\n- You must have an API key.\n- The URL of the API service should be stored in the `API_URL` variable.\n\n### Procedure\n\n1. Install the necessary packages:\n   - Python: `python -m pip install requests`\n   - Node.js: `npm install axios form-data`\n\n2. Configure the HTTP request headers:\n   - Python: `headers = { \"x-api-key\": \"<YOUR_API_KEY>\" }`\n   - Node.js: `const headers = { 'x-api-key': '<YOUR_API_KEY>' }`\n\n3. Declare the `/indexes` endpoint:\n   - Python: `INDEXES_URL = f\"{API_URL}/indexes\"`\n   - Node.js: `const INDEXES_URL = `${API_URL}/indexes`;`\n\n4. Use the POST method to create a new index:\n\n```python\nINDEX_NAME = \"<YOUR_INDEX_NAME>\"\ndata = {\n    \"engines\": [\n        {\n            \"engine_name\": \"marengo2.6\",\n            \"engine_options\": [\"visual\", \"conversation\", \"text_in_video\", \"logo\"]\n        }\n    ],\n    \"index_name\": INDEX_NAME,\n}\nresponse = requests.post(INDEXES_URL, headers=headers, json=data)\nprint(f'Status code: {response.status_code}')\nprint(response.json())\n```\n\n```javascript\nconst INDEX_NAME = '<YOUR_INDEX_NAME>';\nconst resp = await axios.post(\n    INDEXES_URL,\n    {\n        'engine_id': 'marengo2.5',\n        'index_options': ['visual', 'conversation', 'text_in_video'],\n        'index_name': INDEX_NAME\n    },\n    { headers }\n);\nconst { data: response } = resp;\nconsole.log(`Status code: ${resp.status}`);\nconsole.log(response);\n```\n\nIf the API key is valid, the index will be created successfully. If it is expired or invalid, an error message will be returned.\n\n",
        "editThisPageUrl": "https://github.com/twelve-labs/docs/blob/main/fern/docs/pages/authentication.mdx"
      },
      "docs/pages/create-indexes.mdx": {
        "markdown": "An index is a fundamental unit for organizing and storing video data, consisting of video embeddings and metadata. Indexes facilitate information retrieval and processing.\n\nYou can use indexes to group related videos. For example, if you want to upload multiple videos from a car race, you can create a single index and upload all the videos to it. After uploading, you can search for specific moments across all videos in that index in a single request.\n\n## Prerequisites\n\n- You’re familiar with the concepts described on the Platform overview page.\n- You have an API key. To retrieve your API key, navigate to the API Key page and log in with your credentials. Then, select the **Copy** icon to the right of your API key to copy it to your clipboard.\n\n## Procedure\n\n1. **Import the SDK into your application**:\n   - Python: `from twelvelabs import TwelveLabs`\n   - Node.js: `import { TwelveLabs } from 'twelvelabs-js';`\n\n2. **Instantiate the SDK client with your API key**:\n   - Python: `client = TwelveLabs(api_key=\"<YOUR_API_KEY>\")`\n   - Node.js: `const client = new TwelveLabs({ apiKey: '<YOUR_API_KEY>' });`\n\n3. **Specify the desired engine configuration**:\n   - The example below enables the Marengo video understanding engine and the following engine options - `visual`, `conversation`, `text_in_video`, and `logo`:\n     - Python:\n       ```python\n       engines = [\n           {\n               \"name\": \"marengo2.6\",\n               \"options\": [\"visual\", \"conversation\", \"text_in_video\", \"logo\"]\n           }\n       ]\n       ```\n     - Node.js:\n       ```javascript\n       const engines = [\n           {\n               name: 'marengo2.6',\n               options: ['visual', 'conversation', 'text_in_video', 'logo'],\n           },\n       ];\n       ```\n\n4. **Create a new index**:\n   - Invoke the `create` method of the `client.index` object with the following parameters:\n     - `name`: A string representing the name of your new index. Choose a succinct and descriptive name for your index.\n     - `engines`: An object specifying your engine configuration. You constructed this object in the previous step.\n     - _(Optional)_ `addons`: An array of strings specifying the add-ons you want to enable for your index. This example enables the thumbnail generation feature.\n     - Python:\n       ```python\n       index = client.index.create(\n           name=\"<YOUR_INDEX_NAME>\",\n           engines=engines,\n           addons=[\"thumbnail\"]  # Optional\n       )\n       print(f\"A new index has been created: id={index.id} name={index.name} engines={index.engines}\")\n       ```\n     - Node.js:\n       ```javascript\n       let index = await client.index.create({\n           name: '<YOUR_INDEX_NAME>',\n           engines: engines,\n           addons: ['thumbnail'], // Optional\n       });\n       console.log(`A new index has been created: id=${index.id} name=${index.name} engines=${JSON.stringify(index.engines)}`);\n       ```\n\nThe response should look similar to the following one:\n```\nA new index has been created: id=65d345106efba5e3988d6d4b name=index-01 engines=[Engine(name='marengo2.6', options=['visual', 'conversation', 'text_in_video', 'logo'], addons=None)]\n```\n\nNote that the response contains, among other information, a field named `id`, representing the unique identifier of your new index.\n",
        "editThisPageUrl": "https://github.com/twelve-labs/docs/blob/main/fern/docs/pages/create-indexes.mdx"
      },
      "docs/pages/upload-videos.mdx": {
        "markdown": "This guide shows how you can upload a video file to the Twelve Labs platform. The platform offers the following options for uploading single videos:\n\n- **Upload from the local file system**: Use this option to upload a single video file from your local file system.\n- **Upload from a direct URL**: Use this option to upload a video file from a publicly accessible URL. The platform will retrieve the file directly from the specified URL, so your application doesn't have to store the video locally and upload it.\n\n> **Notes:**\n> - The platform supports uploading video files that can play without additional user interaction or custom video players. Ensure your URL points to the raw video file, not a web page containing the video. Links to third-party hosting sites, cloud storage services, or videos requiring extra steps to play are not supported.\n> - The ability to upload videos from YouTube is no longer supported.\n\n## Prerequisites\n\n- You’re familiar with the concepts described on the Platform overview page.\n- You have an API key. To retrieve your API key, navigate to the API Key page and log in with your credentials. Then, select the **Copy** icon to the right of your API key to copy it to your clipboard.\n- You’ve already created an index.\n- The video you wish to upload must meet the following requirements:\n  - **Video resolution**: Must be greater or equal to 360p and less or equal to 4K.\n  - **Video and audio formats**: The video files you wish to upload must be encoded in the video and audio formats listed on the FFmpeg Formats Documentation page.\n  - **Duration**: For Marengo, it must be between 4 seconds and 2 hours (7,200s). For Pegasus, it must be between 4 seconds and 30 minutes (1,800s).\n  - **File size**: Must not exceed 2 GB.\n  - **Audio track**: If the `conversation` engine option is selected, the video you're uploading must contain an audio track.\n\n## Procedure\n\n1. **Import the required packages into your application**:\n   - Python:\n     ```python\n     from twelvelabs import TwelveLabs\n     from twelvelabs.models.task import Task\n     ```\n   - Node.js:\n     ```javascript\n     import { TwelveLabs, Task } from 'twelvelabs-js';\n     ```\n\n2. **Instantiate the SDK client with your API key**:\n   - Python:\n     ```python\n     client = TwelveLabs(api_key=\"<YOUR_API_KEY>\")\n     ```\n   - Node.js:\n     ```javascript\n     const client = new TwelveLabs({ apiKey: '<YOUR_API_KEY>' });\n     ```\n\n3. **Upload a video**:\n   - **From the local file system**:\n     - Python:\n       ```python\n       task = client.task.create(\n           index_id=\"<YOUR_INDEX_ID>\",\n           file=\"<YOUR_VIDEO_FILE>\",\n           transcription_file=\"<YOUR_TRANSCRIPTION_FILE>\"  # Optional\n       )\n       print(f\"Task id={task.id}\")\n       ```\n     - Node.js:\n       ```javascript\n       const task = await client.task.create({\n           indexId: '<YOUR_INDEX_ID>',\n           file: '<YOUR_VIDEO_FILE>',\n           transcriptionFile: '<YOUR_TRANSCRIPTION_FILE>',  // Optional\n       });\n       console.log(`Task id=${task.id}`);\n       ```\n\n   - **From a direct URL**:\n     - Python:\n       ```python\n       task = client.task.create(\n           index_id=\"<YOUR_INDEX_ID>\",\n           url=\"<YOUR_VIDEO_URL>\",\n           transcription_url=\"<YOUR_TRANSCRIPTION_URL>\"  # Optional\n       )\n       print(f\"Task id={task.id}\")\n       ```\n     - Node.js:\n       ```javascript\n       const task = await client.task.create({\n           indexId: '<YOUR_INDEX_ID>',\n           url: '<YOUR_VIDEO_URL>',\n           transcriptionUrl: '<YOUR_TRANSCRIPTION_URL>',  // Optional\n       });\n       console.log(`Task id=${task.id}`);\n       ```\n\n4. **Monitor the indexing process**:\n   - Python:\n     ```python\n     def on_task_update(task: Task):\n         print(f\"  Status={task.status}\")\n     task.wait_for_done(sleep_interval=5, callback=on_task_update)\n     if task.status != \"ready\":\n         raise RuntimeError(f\"Indexing failed with status {task.status}\")\n     print(f\"The unique identifier of your video is {task.video_id}.\")\n     ```\n   - Node.js:\n     ```javascript\n     await task.waitForDone(500, (task: Task) => {\n         console.log(`  Status=${task.status}`);\n     });\n     if (task.status !== 'ready') {\n         throw new Error(`Indexing failed with status ${task.status}`);\n     }\n     console.log(`The unique identifier of your video is ${task.videoId}`);\n     ```\n\nOnce a video has been successfully uploaded and indexed, the `task` object contains, among other information, a field named `video_id`, representing the unique identifier of your video.\n",
        "editThisPageUrl": "https://github.com/twelve-labs/docs/blob/main/fern/docs/pages/upload-videos.mdx"
      },
      "docs/pages/api-overview.mdx": {
        "markdown": "The Twelve Labs API provides a comprehensive suite of tools for integrating advanced video understanding capabilities into your applications. This overview covers the key components and functionalities of the API, helping you get started with building powerful video-based solutions.\n\n## Key Features\n\n- **Video Indexing**: Organize and store video data efficiently, enabling fast retrieval and processing.\n- **Semantic Search**: Use natural language queries to find specific moments within videos.\n- **Video Classification**: Categorize videos based on custom taxonomies using zero-shot classification.\n- **Text Generation**: Create summaries, titles, and other text outputs from video content.\n- **Multimodal Analysis**: Leverage a video-first, multimodal approach for comprehensive video understanding.\n\n## API Structure\n\nThe API is organized around REST principles, making it easy to integrate with most programming languages and tools. It supports the following operations:\n\n- **Index Management**: Create, update, and manage video indexes.\n- **Video Uploading**: Add videos to your indexes from local files or direct URLs.\n- **Search and Query**: Perform searches and queries to extract information from videos.\n- **Classification and Analysis**: Apply classification models and analyze video content.\n\n## Authentication\n\nAccess to the API requires an API key, which you can obtain by signing up for a Twelve Labs account. Include the API key in the headers of your requests to authenticate and authorize your access.\n\n## Getting Started\n\n1. **Sign Up**: Create a free account on Twelve Labs to access the API.\n2. **Obtain API Key**: Retrieve your API key from the API Key page after logging in.\n3. **Install SDK**: Use the Twelve Labs SDK for your preferred programming language to simplify API interactions.\n   - Python: `pip install twelvelabs`\n   - Node.js: `yarn add twelvelabs-js`\n\n4. **Explore API Endpoints**: Use the API to create indexes, upload videos, and perform various video understanding tasks.\n\n## Support and Resources\n\nFor more detailed information on each API endpoint and its parameters, refer to the specific API documentation sections. If you encounter any issues or have questions, contact Twelve Labs support or visit the community forums for assistance.\n\n---\n\nThis page provides a general overview of the Twelve Labs API, helping you understand its capabilities and how to start using it effectively.\n",
        "editThisPageUrl": "https://github.com/twelve-labs/docs/blob/main/fern/docs/pages/api-overview.mdx"
      }
    },
    "search": {
      "type": "singleAlgoliaIndex",
      "value": {
        "type": "unversioned",
        "indexSegment": {
          "id": "seg_twelvelabs.docs.buildwithfern.com_640d381a-aa06-49f0-88b7-1daa4a4cb2bd",
          "searchApiKey": "MDBmMzFhNDY3MWFkNGVkNTJlNTQzZmVjOGQ2ZDRjODc1MTA1ZWNiM2U1YjQ1NjA1Y2JiZDg3OTQ2YTEwOWNhNWZpbHRlcnM9aW5kZXhTZWdtZW50SWQlM0FzZWdfdHdlbHZlbGFicy5kb2NzLmJ1aWxkd2l0aGZlcm4uY29tXzY0MGQzODFhLWFhMDYtNDlmMC04OGI3LTFkYWE0YTRjYjJiZCZ2YWxpZFVudGlsPTE3MzA4Mjc4Mzc="
        }
      }
    },
    "id": "docs_definition_091109b4-21b7-493a-899c-74651450e806"
  },
  "lightModeEnabled": true
}
