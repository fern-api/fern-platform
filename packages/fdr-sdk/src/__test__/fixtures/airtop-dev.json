{
  "baseUrl": {
    "domain": "airtop-dev.docs.buildwithfern.com"
  },
  "definition": {
    "config": {
      "navigation": {
        "tabs": [
          {
            "type": "group",
            "title": "Guides",
            "icon": "book",
            "items": [
              {
                "type": "section",
                "title": "Getting Started",
                "urlSlug": "getting-started",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/guides/getting-started/what-is-airtop.mdx",
                    "title": "What is Airtop?",
                    "urlSlug": "what-is-airtop",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/guides/getting-started/quick-start.mdx",
                    "title": "Quick Start",
                    "urlSlug": "quick-start",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "How To",
                "urlSlug": "how-to",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/guides/how-to/creating-a-session.mdx",
                    "title": "Creating a Session",
                    "urlSlug": "creating-a-session",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/guides/how-to/saving-a-profile.mdx",
                    "title": "Saving a Profile",
                    "urlSlug": "saving-a-profile",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/guides/how-to/creating-a-live-view.mdx",
                    "title": "Creating a Live View",
                    "urlSlug": "creating-a-live-view",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/guides/how-to/proxy.mdx",
                    "title": "Using a Proxy",
                    "urlSlug": "using-a-proxy",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/guides/how-to/remote-debugging.mdx",
                    "title": "Debugging a Session",
                    "urlSlug": "debugging-a-session",
                    "hidden": false
                  },
                  {
                    "type": "section",
                    "title": "Automation Frameworks",
                    "urlSlug": "automation-frameworks",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "pages/guides/how-to/automation-frameworks/puppeteer.mdx",
                        "title": "Puppeteer",
                        "urlSlug": "puppeteer",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/guides/how-to/automation-frameworks/playwright.mdx",
                        "title": "Playwright",
                        "urlSlug": "playwright",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/guides/how-to/automation-frameworks/selenium.mdx",
                        "title": "Selenium",
                        "urlSlug": "selenium",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false
                  },
                  {
                    "type": "section",
                    "title": "AI APIs",
                    "urlSlug": "ai",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "pages/guides/how-to/ai/scraping-a-page.mdx",
                        "title": "Smart Scraping",
                        "urlSlug": "smart-scraping",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/guides/how-to/ai/scrape-and-prompt.mdx",
                        "title": "Prompting a Page",
                        "urlSlug": "prompting-a-page",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "pages/guides/how-to/ai/ai-costs.mdx",
                        "title": "AI Costs",
                        "urlSlug": "ai-costs",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Misc",
                "urlSlug": "misc",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/guides/misc/support.mdx",
                    "title": "Support",
                    "urlSlug": "support",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/guides/misc/faq.mdx",
                    "title": "FAQ",
                    "urlSlug": "faq",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlug": "guides",
            "skipUrlSlug": false
          },
          {
            "type": "group",
            "title": "Recipes",
            "icon": "hat-chef",
            "items": [
              {
                "type": "section",
                "title": "Recipes",
                "urlSlug": "recipes",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/recipes/summarize.mdx",
                    "title": "Summarize a webpage",
                    "urlSlug": "summarize-a-webpage",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/recipes/prompt-content.mdx",
                    "title": "Extract data from a webpage requiring login",
                    "urlSlug": "extract-data-from-a-webpage-requiring-login",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "pages/recipes/sec-filings.mdx",
                    "title": "Scrape the SEC database for recent S-1 filings",
                    "urlSlug": "scrape-the-sec-database-for-recent-s-1-filings",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlug": "recipes",
            "skipUrlSlug": false
          },
          {
            "type": "group",
            "title": "API Reference",
            "icon": "puzzle",
            "items": [
              {
                "type": "apiV2",
                "node": {
                  "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                  "type": "apiReference",
                  "title": "Airtop API",
                  "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                  "overviewPageId": "pages/api-summary.mdx",
                  "paginated": false,
                  "slug": "api-reference/airtop-api",
                  "hideTitle": false,
                  "showErrors": false,
                  "children": [
                    {
                      "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6.subpackage_sessions",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6.subpackage_sessions.create",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_sessions.create",
                          "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                          "isResponseStream": false,
                          "title": "Create a session",
                          "slug": "api-reference/airtop-api/sessions/create"
                        },
                        {
                          "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6:endpoint_sessions.list",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_sessions.list",
                          "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                          "isResponseStream": false,
                          "title": "Get a list of sessions",
                          "slug": "api-reference/airtop-api/sessions/list"
                        },
                        {
                          "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6:endpoint_sessions.getInfo",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_sessions.getInfo",
                          "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                          "isResponseStream": false,
                          "title": "Get info for a session",
                          "slug": "api-reference/airtop-api/sessions/get-info"
                        },
                        {
                          "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6:endpoint_sessions.terminate",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_sessions.terminate",
                          "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                          "isResponseStream": false,
                          "title": "Ends a session",
                          "slug": "api-reference/airtop-api/sessions/terminate"
                        }
                      ],
                      "title": "Sessions",
                      "slug": "api-reference/airtop-api/sessions",
                      "hidden": false,
                      "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                      "pointsTo": "api-reference/airtop-api/sessions/create"
                    },
                    {
                      "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6.subpackage_windows",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6.subpackage_windows.summarize-content",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_windows.summarize-content",
                          "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                          "availability": "deprecated",
                          "isResponseStream": false,
                          "title": "Get a summary of content in a browser window",
                          "slug": "api-reference/airtop-api/windows/summarize-content"
                        },
                        {
                          "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6.subpackage_windows.scrape-content",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_windows.scrape-content",
                          "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                          "isResponseStream": false,
                          "title": "Scrape a window",
                          "slug": "api-reference/airtop-api/windows/scrape-content"
                        },
                        {
                          "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6.subpackage_windows.prompt-content",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_windows.prompt-content",
                          "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                          "isResponseStream": false,
                          "title": "Submit a prompt about the content in a specific browser window.",
                          "slug": "api-reference/airtop-api/windows/prompt-content"
                        },
                        {
                          "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6:endpoint_windows.create",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_windows.create",
                          "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                          "isResponseStream": false,
                          "title": "Creates a new browser window in a session",
                          "slug": "api-reference/airtop-api/windows/create"
                        },
                        {
                          "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6:endpoint_windows.get-window-info",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_windows.get-window-info",
                          "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                          "isResponseStream": false,
                          "title": "Get information about a browser window in a session",
                          "slug": "api-reference/airtop-api/windows/get-window-info"
                        },
                        {
                          "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6:endpoint_windows.loadUrl",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_windows.loadUrl",
                          "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                          "isResponseStream": false,
                          "title": "Loads a specified url on a given window",
                          "slug": "api-reference/airtop-api/windows/load-url"
                        },
                        {
                          "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6:endpoint_windows.close",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_windows.close",
                          "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                          "isResponseStream": false,
                          "title": "Close the specified window",
                          "slug": "api-reference/airtop-api/windows/close"
                        }
                      ],
                      "title": "Windows",
                      "slug": "api-reference/airtop-api/windows",
                      "hidden": false,
                      "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                      "pointsTo": "api-reference/airtop-api/windows/summarize-content"
                    },
                    {
                      "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6.subpackage_profiles",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6:endpoint_profiles.get",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_profiles.get",
                          "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                          "isResponseStream": false,
                          "title": "Get profiles",
                          "slug": "api-reference/airtop-api/profiles/get"
                        },
                        {
                          "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6:endpoint_profiles.delete",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_profiles.delete",
                          "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                          "isResponseStream": false,
                          "title": "Delete profiles",
                          "slug": "api-reference/airtop-api/profiles/delete"
                        }
                      ],
                      "title": "Profiles",
                      "slug": "api-reference/airtop-api/profiles",
                      "apiDefinitionId": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
                      "pointsTo": "api-reference/airtop-api/profiles/get"
                    }
                  ],
                  "pointsTo": "api-reference/airtop-api/sessions/create"
                }
              }
            ],
            "urlSlug": "api-reference",
            "skipUrlSlug": false
          },
          {
            "type": "changelogV3",
            "node": {
              "id": ".changelog",
              "type": "changelog",
              "title": "Changelog",
              "slug": "changelog",
              "icon": "history",
              "children": [
                {
                  "id": ".changelog.2024",
                  "type": "changelogYear",
                  "title": "2024",
                  "year": 2024,
                  "slug": "changelog/2024",
                  "children": [
                    {
                      "id": ".changelog.1900-11",
                      "type": "changelogMonth",
                      "title": "November 1900",
                      "month": 11,
                      "slug": "changelog/11",
                      "children": [
                        {
                          "id": ".changelog.2024-11-1",
                          "type": "changelogEntry",
                          "title": "November 1, 2024",
                          "slug": "changelog/2024/11/1",
                          "date": "2024-11-01T00:00:00.000Z",
                          "pageId": "changelog/2024-11-01.mdx"
                        }
                      ]
                    },
                    {
                      "id": ".changelog.1900-10",
                      "type": "changelogMonth",
                      "title": "October 1900",
                      "month": 10,
                      "slug": "changelog/10",
                      "children": [
                        {
                          "id": ".changelog.2024-10-19",
                          "type": "changelogEntry",
                          "title": "October 19, 2024",
                          "slug": "changelog/2024/10/19",
                          "date": "2024-10-19T00:00:00.000Z",
                          "pageId": "changelog/2024-10-19.mdx"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      "logoHeight": 32,
      "logoHref": "https://www.airtop.ai",
      "colorsV3": {
        "type": "dark",
        "accentPrimary": {
          "r": 211,
          "g": 225,
          "b": 225,
          "a": 1
        },
        "logo": "12940024-283e-49c3-adcf-8fb94888abd8",
        "background": {
          "type": "solid",
          "r": 16,
          "g": 38,
          "b": 38,
          "a": 1
        }
      },
      "navbarLinks": [
        {
          "type": "filled",
          "text": "Portal",
          "url": "https://portal.airtop.ai"
        }
      ],
      "title": "Airtop | Documentation",
      "favicon": "b8e63715-f527-43e1-b9ce-8090246fcab2",
      "layout": {
        "pageWidth": {
          "type": "px",
          "value": 1504
        },
        "headerHeight": {
          "type": "px",
          "value": 75
        },
        "searchbarPlacement": "HEADER",
        "tabsPlacement": "HEADER",
        "contentAlignment": "CENTER",
        "headerPosition": "FIXED",
        "disableHeader": false
      },
      "js": {
        "files": []
      },
      "analyticsConfig": {
        "segment": {
          "writeKey": "i3XVDlzb5msvnIu0VNybbigaamTv1hwa"
        }
      }
    },
    "apis": {
      "43168098-0988-47e7-bc82-78ae7aaf1fe6": {
        "id": "43168098-0988-47e7-bc82-78ae7aaf1fe6",
        "rootPackage": {
          "endpoints": [],
          "subpackages": ["subpackage_profiles", "subpackage_sessions", "subpackage_windows"],
          "types": [
            "type_:AiPromptResponse",
            "type_:AiResponseEnvelope",
            "type_:ClientProvidedResponseMetadata",
            "type_:EmptyResponse",
            "type_:EmptyResponseJson",
            "type_:EnvelopeDefaultMeta",
            "type_:EnvelopeStatusDefaultMetaStatus",
            "type_:EnvelopeStatusDefaultMeta",
            "type_:ErrorDetail",
            "type_:ErrorModel",
            "type_:ExternalProfileV1",
            "type_:ExternalSessionAiResponseMetadataStatus",
            "type_:ExternalSessionAiResponseMetadata",
            "type_:ExternalSessionAiResponseMetadataUsage",
            "type_:ExternalSessionConfig",
            "type_:ExternalSessionWithConnectionInfo",
            "type_:Issue",
            "type_:Pagination",
            "type_:ProfilesResponse",
            "type_:PromptContentConfig",
            "type_:PromptContentExperimentalConfig",
            "type_:ScrapeResponse",
            "type_:ScrapeResponseContent",
            "type_:ScrapeResponseEnvelope",
            "type_:ScrapeResponseOutput",
            "type_:Proxy",
            "type_:CustomProxy",
            "type_:SessionConfigV1ProxyItem",
            "type_:SessionConfigV1Proxy",
            "type_:SessionConfigV1",
            "type_:SessionResponse",
            "type_:SessionsResponse",
            "type_:SessionsWithPagination",
            "type_:SummaryConfig",
            "type_:SummaryExperimentalConfig",
            "type_:Window",
            "type_:WindowId",
            "type_:WindowIdResponse",
            "type_:WindowResponse"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_sessions:SessionsListRequestStatus": {
            "description": "Status of the session to get.",
            "name": "SessionsListRequestStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "awaitingCapacity"
                },
                {
                  "value": "initializing"
                },
                {
                  "value": "running"
                },
                {
                  "value": "ended"
                }
              ]
            }
          },
          "type_windows:CreateWindowInputV1BodyWaitUntil": {
            "description": "Wait until the specified loading event occurs. Defaults to 'load', which waits until the page dom and it's assets have loaded. 'domContentLoaded' will wait until the dom has loaded, and 'complete' will wait until the page and all it's iframes have loaded it's dom and assets.",
            "name": "CreateWindowInputV1BodyWaitUntil",
            "shape": {
              "type": "enum",
              "default": "load",
              "values": [
                {
                  "value": "load"
                },
                {
                  "value": "domContentLoaded"
                },
                {
                  "value": "complete"
                }
              ]
            }
          },
          "type_windows:WindowLoadUrlV1BodyWaitUntil": {
            "description": "Wait until the specified loading event occurs. Defaults to 'load', which waits until the page dom and it's assets have loaded. 'domContentLoaded' will wait until the dom has loaded, and 'complete' will wait until the page and all it's iframes have loaded it's dom and assets.",
            "name": "WindowLoadUrlV1BodyWaitUntil",
            "shape": {
              "type": "enum",
              "default": "load",
              "values": [
                {
                  "value": "load"
                },
                {
                  "value": "domContentLoaded"
                },
                {
                  "value": "complete"
                }
              ]
            }
          },
          "type_:AiPromptResponse": {
            "name": "AiPromptResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:AiResponseEnvelope"
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                },
                {
                  "key": "meta",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ExternalSessionAiResponseMetadata"
                  }
                },
                {
                  "key": "warnings",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:AiResponseEnvelope": {
            "name": "AiResponseEnvelope",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "modelResponse",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ClientProvidedResponseMetadata": {
            "name": "ClientProvidedResponseMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "clientRequestId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EmptyResponse": {
            "name": "EmptyResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EmptyResponseJson"
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                },
                {
                  "key": "meta",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EnvelopeStatusDefaultMeta"
                  }
                },
                {
                  "key": "warnings",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EmptyResponseJson": {
            "name": "EmptyResponseJson",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Indicates if the operations was successful",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_:EnvelopeDefaultMeta": {
            "name": "EnvelopeDefaultMeta",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "requestId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EnvelopeStatusDefaultMetaStatus": {
            "name": "EnvelopeStatusDefaultMetaStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "success"
                },
                {
                  "value": " failure"
                },
                {
                  "value": " timeout"
                }
              ]
            }
          },
          "type_:EnvelopeStatusDefaultMeta": {
            "name": "EnvelopeStatusDefaultMeta",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "requestId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EnvelopeStatusDefaultMetaStatus"
                    }
                  }
                }
              ]
            }
          },
          "type_:ErrorDetail": {
            "name": "ErrorDetail",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'",
                  "key": "location",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Error message text",
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "unknown"
                    }
                  }
                }
              ]
            }
          },
          "type_:ErrorModel": {
            "name": "ErrorModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A human-readable explanation specific to this occurrence of the problem.",
                  "key": "detail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Optional list of individual error details",
                  "key": "errors",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ErrorDetail"
                      }
                    }
                  }
                },
                {
                  "description": "A URI reference that identifies the specific occurrence of the problem.",
                  "key": "instance",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "HTTP status code",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long"
                      }
                    }
                  }
                },
                {
                  "description": "A short, human-readable summary of the problem type. This value should not change between occurrences of the error.",
                  "key": "title",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A URI reference to human-readable documentation for the error.",
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "about:blank"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ExternalProfileV1": {
            "name": "ExternalProfileV1",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Id of the profile.",
                  "key": "profileId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "description": "Status of the profile.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ExternalSessionAiResponseMetadataStatus": {
            "description": "Outcome of the operation.",
            "name": "ExternalSessionAiResponseMetadataStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "success"
                },
                {
                  "value": "partial"
                },
                {
                  "value": "failure"
                }
              ]
            }
          },
          "type_:ExternalSessionAiResponseMetadata": {
            "name": "ExternalSessionAiResponseMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "clientProvided",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ClientProvidedResponseMetadata"
                    }
                  }
                },
                {
                  "key": "requestId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Outcome of the operation.",
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ExternalSessionAiResponseMetadataStatus"
                  }
                },
                {
                  "key": "usage",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ExternalSessionAiResponseMetadataUsage"
                  }
                }
              ]
            }
          },
          "type_:ExternalSessionAiResponseMetadataUsage": {
            "name": "ExternalSessionAiResponseMetadataUsage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The credit usage for this request",
                  "key": "credits",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long"
                    }
                  }
                },
                {
                  "description": "The id of the request",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ExternalSessionConfig": {
            "name": "ExternalSessionConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Id of a profile to load into the session.",
                  "key": "baseProfileId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Persist the profile.",
                  "key": "persistProfile",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Max length of session in minutes, after which it will terminate if not already deleted.",
                  "key": "timeoutMinutes",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 1440,
                        "default": 10
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ExternalSessionWithConnectionInfo": {
            "name": "ExternalSessionWithConnectionInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Url to connect to chrome devtools protocol port on the Airtop browser. Include the header 'Authorization: Bearer <api-key>.'",
                  "key": "cdpUrl",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Websocket url to connect to the Airtop browser for CDP-based automation frameworks (e.g. Puppeteer or Playwright). Include the header 'Authorization: Bearer <airtop-api-key>.'",
                  "key": "cdpWsUrl",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Websocket url to connect to the Airtop browser for webdriver-based automation frameworks (e.g. Selenium). Include the header 'Authorization: Bearer <airtop-api-key>.'",
                  "key": "chromedriverUrl",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Session configuration details.",
                  "key": "configuration",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ExternalSessionConfig"
                  }
                },
                {
                  "description": "Current usage in minutes.",
                  "key": "currentUsage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long"
                      }
                    }
                  }
                },
                {
                  "description": "Date the session was created.",
                  "key": "dateCreated",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "Id of the session.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Date of the last activity.",
                  "key": "lastActivity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "Id of a newly persisted profile.",
                  "key": "profileId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Session status.",
                  "key": "status",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Issue": {
            "name": "Issue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Issue code.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Any associated details.",
                  "key": "details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Message describing the issue.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Pagination": {
            "name": "Pagination",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "currentLimit",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long"
                    }
                  }
                },
                {
                  "key": "currentPage",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long"
                    }
                  }
                },
                {
                  "key": "finalCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long"
                    }
                  }
                },
                {
                  "key": "hasMore",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "key": "initialCount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long"
                    }
                  }
                },
                {
                  "key": "nextOffset",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long"
                    }
                  }
                },
                {
                  "key": "numberOfPages",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long"
                    }
                  }
                },
                {
                  "key": "totalItems",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long"
                    }
                  }
                }
              ]
            }
          },
          "type_:ProfilesResponse": {
            "name": "ProfilesResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ExternalProfileV1"
                      }
                    }
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                },
                {
                  "key": "meta",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EnvelopeDefaultMeta"
                  }
                },
                {
                  "key": "warnings",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PromptContentConfig": {
            "name": "PromptContentConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "JSON schema defining the structure of the output. If not provided, the format of the output might vary.",
                  "key": "outputSchema",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PromptContentExperimentalConfig": {
            "name": "PromptContentExperimentalConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "If set to 'enabled', Airtop AI will also analyze the web page visually when fulfilling the request. Note that this can add to both the execution time and cost of the operation. If the page is too large, the context window can be exceeded and the request will fail. If set to 'auto' or 'disabled', no visual analysis will be conducted. If 'followPaginationLinks' is set to true, visual analysis will be conducted unless 'includeVisualAnalysis' is explicitly set to 'disabled'.",
                  "key": "includeVisualAnalysis",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "auto"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ScrapeResponse": {
            "name": "ScrapeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ScrapeResponseEnvelope"
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                },
                {
                  "key": "meta",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ExternalSessionAiResponseMetadata"
                  }
                },
                {
                  "key": "warnings",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ScrapeResponseContent": {
            "name": "ScrapeResponseContent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The mime type of content extracted from the browser window (usually text/plain but could be text/csv or other types depending on the site).",
                  "key": "contentType",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The text content of the browser window.",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ScrapeResponseEnvelope": {
            "name": "ScrapeResponseEnvelope",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The response from the Airtop AI model.",
                  "key": "modelResponse",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ScrapeResponseOutput"
                  }
                }
              ]
            }
          },
          "type_:ScrapeResponseOutput": {
            "name": "ScrapeResponseOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The scraped content of the browser window.",
                  "key": "scrapedContent",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ScrapeResponseContent"
                  }
                },
                {
                  "description": "Any text that was highlighted in the browser window.",
                  "key": "selectedText",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The title of the browser page.",
                  "key": "title",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Proxy": {
            "description": "Proxy object with url of the proxy as a parameter. Takes optional username and password.",
            "name": "Proxy",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "password",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "username",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CustomProxy": {
            "description": "Configuration for a single custom proxy.",
            "name": "CustomProxy",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "description": "Url of the proxy.",
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Proxy object with url of the proxy as a parameter. Takes optional username and password.",
                  "type": {
                    "type": "id",
                    "value": "type_:Proxy"
                  },
                  "displayName": "Proxy"
                }
              ]
            }
          },
          "type_:SessionConfigV1ProxyItem": {
            "description": "You can set multiple proxies. You associate each proxy with a domain pattern. If the domain matches the pattern, the proxy is used. Pattern can contain '?' to match any single character, and '_' to match any sequence of characters. For example, '_.example.com' will match 'www.example.com' and 'sub.example.com'",
            "name": "SessionConfigV1ProxyItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "domainPattern",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Configuration for a single custom proxy.",
                  "key": "relay",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CustomProxy"
                  }
                }
              ]
            }
          },
          "type_:SessionConfigV1Proxy": {
            "description": "Proxy configuration.",
            "name": "SessionConfigV1Proxy",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "description": "Configuration for a single custom proxy.",
                  "type": {
                    "type": "id",
                    "value": "type_:CustomProxy"
                  },
                  "displayName": "Custom Proxy"
                },
                {
                  "description": "Array of proxy configurations. Includes a domain pattern and a proxy configuration to assign proxies to specific domains.",
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SessionConfigV1ProxyItem"
                    }
                  }
                }
              ]
            }
          },
          "type_:SessionConfigV1": {
            "name": "SessionConfigV1",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Id of a profile to load into the session.",
                  "key": "baseProfileId",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Persist the profile.",
                  "key": "persistProfile",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Proxy configuration.",
                  "key": "proxy",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SessionConfigV1Proxy"
                    }
                  }
                },
                {
                  "description": "Max length of session in minutes, after which it will terminate if not already deleted.",
                  "key": "timeoutMinutes",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 1440,
                        "default": 10
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SessionResponse": {
            "name": "SessionResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ExternalSessionWithConnectionInfo"
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                },
                {
                  "key": "meta",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EnvelopeDefaultMeta"
                  }
                },
                {
                  "key": "warnings",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SessionsResponse": {
            "name": "SessionsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:SessionsWithPagination"
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                },
                {
                  "key": "meta",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EnvelopeDefaultMeta"
                  }
                },
                {
                  "key": "warnings",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SessionsWithPagination": {
            "name": "SessionsWithPagination",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Pagination details.",
                  "key": "pagination",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Pagination"
                  }
                },
                {
                  "description": "List of sessions.",
                  "key": "sessions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ExternalSessionWithConnectionInfo"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SummaryConfig": {
            "name": "SummaryConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "JSON schema defining the structure of the output. If not provided, the format of the output might vary.",
                  "key": "outputSchema",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SummaryExperimentalConfig": {
            "name": "SummaryExperimentalConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "If set to 'enabled', Airtop AI will also analyze the web page visually when fulfilling the request. Note that this can add to both the execution time and cost of the operation. If the page is too large, the context window can be exceeded and the request will fail. If set to 'auto' or 'disabled', no visual analysis will be conducted.",
                  "key": "includeVisualAnalysis",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "auto"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Window": {
            "name": "Window",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Url for loading a browser window live view that is configured according to the request options like screenResolution, disableResize, etc.",
                  "key": "liveViewUrl",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Airtop window ID of the browser window",
                  "key": "windowId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:WindowId": {
            "name": "WindowId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "CDP Window target ID",
                  "key": "targetId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Airtop window ID of the browser window",
                  "key": "windowId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:WindowIdResponse": {
            "name": "WindowIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WindowId"
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                },
                {
                  "key": "meta",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EnvelopeDefaultMeta"
                  }
                },
                {
                  "key": "warnings",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WindowResponse": {
            "name": "WindowResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Window"
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                },
                {
                  "key": "meta",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EnvelopeDefaultMeta"
                  }
                },
                {
                  "key": "warnings",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Issue"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_profiles": {
            "subpackageId": "subpackage_profiles",
            "name": "profiles",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.airtop.ai/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get",
                "migratedFromUrlSlugs": ["get-profiles"],
                "method": "GET",
                "id": "get",
                "originalEndpointId": "endpoint_profiles.get",
                "name": "Get profiles",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/profiles"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "A comma-separated list of profile ids.",
                    "key": "profileIds",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ProfilesResponse"
                    }
                  },
                  "description": "OK"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/profiles",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [
                        {
                          "profileId": "profileId",
                          "status": "status"
                        }
                      ],
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ],
                      "meta": {
                        "requestId": "requestId"
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.profiles.get()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.profiles.get()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.profiles.get();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [
                          {
                            "profileId": "profileId",
                            "status": "status"
                          }
                        ],
                        "errors": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ],
                        "meta": {
                          "requestId": "requestId"
                        },
                        "warnings": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get profiles matching by id",
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.profiles.get(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "profile_ids=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "profileIds",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from airtop import Airtop"],
                      "isOptional": true,
                      "templateString": "client = Airtop($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.profiles.get(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "profileIds: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "profileIds"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { AirtopClient } from \"@airtop/sdk\";"],
                      "templateString": "const client = new AirtopClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.airtop.ai/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete",
                "migratedFromUrlSlugs": ["delete-profiles"],
                "method": "DELETE",
                "id": "delete",
                "originalEndpointId": "endpoint_profiles.delete",
                "name": "Delete profiles",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/profiles"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "A comma-separated list of profile ids.",
                    "key": "profileIds",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/profiles",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.profiles.delete()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.profiles.delete()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.profiles.delete();\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete profiles matching by id",
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.profiles.delete(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "profile_ids=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "profileIds",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from airtop import Airtop"],
                      "isOptional": true,
                      "templateString": "client = Airtop($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.profiles.delete(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "profileIds: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "profileIds"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { AirtopClient } from \"@airtop/sdk\";"],
                      "templateString": "const client = new AirtopClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "profiles",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_sessions": {
            "subpackageId": "subpackage_sessions",
            "name": "sessions",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.airtop.ai/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list",
                "migratedFromUrlSlugs": ["get-a-list-of-sessions"],
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_sessions.list",
                "name": "Get a list of sessions",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/sessions"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "A comma-separated list of IDs of the sessions to retrieve.",
                    "key": "sessionIds",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Status of the session to get.",
                    "key": "status",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_sessions:SessionsListRequestStatus"
                      }
                    }
                  },
                  {
                    "description": "Offset for pagination.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "long"
                        }
                      }
                    }
                  },
                  {
                    "description": "Limit for pagination.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "long"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:SessionsResponse"
                    }
                  },
                  "description": "OK"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorModel"
                      }
                    },
                    "statusCode": 404,
                    "description": "Not Found",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "detail": "Property foo is required but is missing.",
                            "instance": "https://example.com/error-log/abc123",
                            "status": 400,
                            "title": "Bad Request",
                            "type": "https://example.com/errors/example"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorModel"
                      }
                    },
                    "statusCode": 422,
                    "description": "Unprocessable Entity",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "detail": "Property foo is required but is missing.",
                            "instance": "https://example.com/error-log/abc123",
                            "status": 400,
                            "title": "Bad Request",
                            "type": "https://example.com/errors/example"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorModel"
                      }
                    },
                    "statusCode": 500,
                    "description": "Internal Server Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "detail": "Property foo is required but is missing.",
                            "instance": "https://example.com/error-log/abc123",
                            "status": 400,
                            "title": "Bad Request",
                            "type": "https://example.com/errors/example"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/sessions",
                    "pathParameters": {},
                    "queryParameters": {
                      "offset": 1,
                      "limit": 10
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "pagination": {
                          "currentLimit": 1000000,
                          "currentPage": 1000000,
                          "finalCount": 1000000,
                          "hasMore": true,
                          "initialCount": 1000000,
                          "nextOffset": 1000000,
                          "numberOfPages": 1000000,
                          "totalItems": 1000000
                        },
                        "sessions": [
                          {
                            "configuration": {
                              "baseProfileId": "a13c6f73-bd89-4a76-ab32-5a6c422e8224",
                              "persistProfile": true,
                              "timeoutMinutes": 10
                            },
                            "id": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                            "profileId": "427c6f73-bd89-4a76-ab32-5a6c422e8b0b",
                            "status": "active"
                          }
                        ]
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ],
                      "meta": {
                        "requestId": "requestId"
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.sessions.list(\n        offset=1,\n        limit=10,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sessions.list(\n    offset=1,\n    limit=10,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sessions.list({\n    offset: 1,\n    limit: 10\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "pagination": {
                            "currentLimit": 1000000,
                            "currentPage": 1000000,
                            "finalCount": 1000000,
                            "hasMore": true,
                            "initialCount": 1000000,
                            "nextOffset": 1000000,
                            "numberOfPages": 1000000,
                            "totalItems": 1000000
                          },
                          "sessions": [
                            {
                              "configuration": {
                                "baseProfileId": "a13c6f73-bd89-4a76-ab32-5a6c422e8224",
                                "persistProfile": true,
                                "timeoutMinutes": 10
                              },
                              "id": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                              "profileId": "427c6f73-bd89-4a76-ab32-5a6c422e8b0b",
                              "status": "active"
                            }
                          ]
                        },
                        "errors": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ],
                        "meta": {
                          "requestId": "requestId"
                        },
                        "warnings": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/sessions",
                    "pathParameters": {},
                    "queryParameters": {
                      "sessionIds": "string",
                      "status": "awaitingCapacity"
                    },
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.sessions.list(\n        offset=1,\n        limit=10,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sessions.list(\n    offset=1,\n    limit=10,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sessions.list({\n    offset: 1,\n    limit: 10\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "string",
                        "errors": [
                          {
                            "location": "string",
                            "message": "string",
                            "value": {}
                          }
                        ],
                        "instance": "string",
                        "status": 99999,
                        "title": "string",
                        "type": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/sessions",
                    "pathParameters": {},
                    "queryParameters": {
                      "sessionIds": "string",
                      "status": "awaitingCapacity"
                    },
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.sessions.list(\n        offset=1,\n        limit=10,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sessions.list(\n    offset=1,\n    limit=10,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sessions.list({\n    offset: 1,\n    limit: 10\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "string",
                        "errors": [
                          {
                            "location": "string",
                            "message": "string",
                            "value": {}
                          }
                        ],
                        "instance": "string",
                        "status": 99999,
                        "title": "string",
                        "type": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/sessions",
                    "pathParameters": {},
                    "queryParameters": {
                      "sessionIds": "string",
                      "status": "awaitingCapacity"
                    },
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.sessions.list(\n        offset=1,\n        limit=10,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sessions.list(\n    offset=1,\n    limit=10,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sessions.list({\n    offset: 1,\n    limit: 10\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "string",
                        "errors": [
                          {
                            "location": "string",
                            "message": "string",
                            "value": {}
                          }
                        ],
                        "instance": "string",
                        "status": 99999,
                        "title": "string",
                        "type": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get a list of sessions by ID",
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.sessions.list(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "session_ids=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "sessionIds",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "status=$FERN_INPUT",
                            "values": {
                              "awaitingCapacity": "\"awaitingCapacity\"",
                              "initializing": "\"initializing\"",
                              "running": "\"running\"",
                              "ended": "\"ended\""
                            },
                            "templateInput": {
                              "location": "QUERY",
                              "path": "status"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "offset=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "offset",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "limit=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "limit",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from airtop import Airtop"],
                      "isOptional": true,
                      "templateString": "client = Airtop($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.sessions.list(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "sessionIds: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "sessionIds"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "awaitingCapacity": "Airtop.SessionsListRequestStatus.AwaitingCapacity",
                                    "initializing": "Airtop.SessionsListRequestStatus.Initializing",
                                    "running": "Airtop.SessionsListRequestStatus.Running",
                                    "ended": "Airtop.SessionsListRequestStatus.Ended"
                                  },
                                  "templateString": "status: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "QUERY",
                                    "path": "status"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "offset: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "offset"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "limit: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "limit"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { AirtopClient } from \"@airtop/sdk\";"],
                      "templateString": "const client = new AirtopClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.airtop.ai/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["create-a-session"],
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_sessions.create",
                "name": "Create a session",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/sessions"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Session configuration",
                        "key": "configuration",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:SessionConfigV1"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:SessionResponse"
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/sessions",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "cdpUrl": "cdpUrl",
                        "cdpWsUrl": "cdpWsUrl",
                        "chromedriverUrl": "chromedriverUrl",
                        "configuration": {
                          "baseProfileId": "a13c6f73-bd89-4a76-ab32-5a6c422e8224",
                          "persistProfile": true,
                          "timeoutMinutes": 10
                        },
                        "currentUsage": 1000000,
                        "dateCreated": "2024-01-15T09:30:00Z",
                        "id": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                        "lastActivity": "2024-01-15T09:30:00Z",
                        "profileId": "427c6f73-bd89-4a76-ab32-5a6c422e8b0b",
                        "status": "active"
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ],
                      "meta": {
                        "requestId": "requestId"
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.sessions.create()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sessions.create()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sessions.create();\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "cdpUrl": "cdpUrl",
                          "cdpWsUrl": "cdpWsUrl",
                          "chromedriverUrl": "chromedriverUrl",
                          "configuration": {
                            "baseProfileId": "a13c6f73-bd89-4a76-ab32-5a6c422e8224",
                            "persistProfile": true,
                            "timeoutMinutes": 10
                          },
                          "currentUsage": 1000000,
                          "dateCreated": "2024-01-15T09:30:00Z",
                          "id": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                          "lastActivity": "2024-01-15T09:30:00Z",
                          "profileId": "427c6f73-bd89-4a76-ab32-5a6c422e8b0b",
                          "status": "active"
                        },
                        "errors": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ],
                        "meta": {
                          "requestId": "requestId"
                        },
                        "warnings": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.sessions.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": ["from airtop import SessionConfigV1"],
                            "isOptional": true,
                            "templateString": "configuration=SessionConfigV1(\n\t\t$FERN_INPUT\n\t)",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "base_profile_id=$FERN_INPUT",
                                  "templateInputs": [
                                    {
                                      "location": "BODY",
                                      "path": "configuration.baseProfileId",
                                      "type": "payload"
                                    }
                                  ],
                                  "type": "generic"
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "persist_profile=$FERN_INPUT",
                                  "templateInputs": [
                                    {
                                      "location": "BODY",
                                      "path": "configuration.persistProfile",
                                      "type": "payload"
                                    }
                                  ],
                                  "type": "generic"
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "proxy=$FERN_INPUT",
                                  "members": [
                                    {
                                      "type": {
                                        "value": "type_:CustomProxy",
                                        "type": "id"
                                      },
                                      "template": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "$FERN_INPUT",
                                        "members": [
                                          {
                                            "type": {
                                              "type": "primitive",
                                              "value": {
                                                "type": "string"
                                              }
                                            },
                                            "template": {
                                              "imports": [],
                                              "isOptional": true,
                                              "templateString": "$FERN_INPUT",
                                              "templateInputs": [
                                                {
                                                  "location": "RELATIVE",
                                                  "path": null,
                                                  "type": "payload"
                                                }
                                              ],
                                              "type": "generic"
                                            }
                                          },
                                          {
                                            "type": {
                                              "value": "type_:Proxy",
                                              "type": "id"
                                            },
                                            "template": {
                                              "imports": ["from airtop import Proxy"],
                                              "isOptional": true,
                                              "templateString": "Proxy(\n\t\t\t$FERN_INPUT\n\t\t)",
                                              "templateInputs": [
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "imports": [],
                                                    "isOptional": true,
                                                    "templateString": "password=$FERN_INPUT",
                                                    "templateInputs": [
                                                      {
                                                        "location": "RELATIVE",
                                                        "path": "password",
                                                        "type": "payload"
                                                      }
                                                    ],
                                                    "type": "generic"
                                                  }
                                                },
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "imports": [],
                                                    "isOptional": true,
                                                    "templateString": "url=$FERN_INPUT",
                                                    "templateInputs": [
                                                      {
                                                        "location": "RELATIVE",
                                                        "path": "url",
                                                        "type": "payload"
                                                      }
                                                    ],
                                                    "type": "generic"
                                                  }
                                                },
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "imports": [],
                                                    "isOptional": true,
                                                    "templateString": "username=$FERN_INPUT",
                                                    "templateInputs": [
                                                      {
                                                        "location": "RELATIVE",
                                                        "path": "username",
                                                        "type": "payload"
                                                      }
                                                    ],
                                                    "type": "generic"
                                                  }
                                                }
                                              ],
                                              "inputDelimiter": ",\n\t\t\t",
                                              "type": "generic"
                                            }
                                          }
                                        ],
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": null
                                        },
                                        "type": "union_v2"
                                      }
                                    },
                                    {
                                      "type": {
                                        "itemType": {
                                          "value": "type_:SessionConfigV1ProxyItem",
                                          "type": "id"
                                        },
                                        "type": "list"
                                      },
                                      "template": {
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "[\n\t\t\t$FERN_INPUT\n\t\t]",
                                        "delimiter": ",\n\t\t\t",
                                        "innerTemplate": {
                                          "imports": ["from airtop import SessionConfigV1ProxyItem"],
                                          "isOptional": true,
                                          "templateString": "SessionConfigV1ProxyItem(\n\t\t\t\t$FERN_INPUT\n\t\t\t)",
                                          "templateInputs": [
                                            {
                                              "type": "template",
                                              "value": {
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "domain_pattern=$FERN_INPUT",
                                                "templateInputs": [
                                                  {
                                                    "location": "RELATIVE",
                                                    "path": "domainPattern",
                                                    "type": "payload"
                                                  }
                                                ],
                                                "type": "generic"
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "relay=$FERN_INPUT",
                                                "members": [
                                                  {
                                                    "type": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "template": {
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "templateInputs": [
                                                        {
                                                          "location": "RELATIVE",
                                                          "path": null,
                                                          "type": "payload"
                                                        }
                                                      ],
                                                      "type": "generic"
                                                    }
                                                  },
                                                  {
                                                    "type": {
                                                      "value": "type_:Proxy",
                                                      "type": "id"
                                                    },
                                                    "template": {
                                                      "imports": ["from airtop import Proxy"],
                                                      "isOptional": true,
                                                      "templateString": "Proxy(\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t)",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "imports": [],
                                                            "isOptional": true,
                                                            "templateString": "password=$FERN_INPUT",
                                                            "templateInputs": [
                                                              {
                                                                "location": "RELATIVE",
                                                                "path": "password",
                                                                "type": "payload"
                                                              }
                                                            ],
                                                            "type": "generic"
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "imports": [],
                                                            "isOptional": true,
                                                            "templateString": "url=$FERN_INPUT",
                                                            "templateInputs": [
                                                              {
                                                                "location": "RELATIVE",
                                                                "path": "url",
                                                                "type": "payload"
                                                              }
                                                            ],
                                                            "type": "generic"
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "imports": [],
                                                            "isOptional": true,
                                                            "templateString": "username=$FERN_INPUT",
                                                            "templateInputs": [
                                                              {
                                                                "location": "RELATIVE",
                                                                "path": "username",
                                                                "type": "payload"
                                                              }
                                                            ],
                                                            "type": "generic"
                                                          }
                                                        }
                                                      ],
                                                      "inputDelimiter": ",\n\t\t\t\t\t",
                                                      "type": "generic"
                                                    }
                                                  }
                                                ],
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": "relay"
                                                },
                                                "type": "union_v2"
                                              }
                                            }
                                          ],
                                          "inputDelimiter": ",\n\t\t\t\t",
                                          "type": "generic"
                                        },
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": null
                                        },
                                        "type": "iterable"
                                      }
                                    }
                                  ],
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "configuration.proxy"
                                  },
                                  "type": "union_v2"
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "timeout_minutes=$FERN_INPUT",
                                  "templateInputs": [
                                    {
                                      "location": "BODY",
                                      "path": "configuration.timeoutMinutes",
                                      "type": "payload"
                                    }
                                  ],
                                  "type": "generic"
                                }
                              }
                            ],
                            "inputDelimiter": ",\n\t\t",
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from airtop import Airtop"],
                      "isOptional": true,
                      "templateString": "client = Airtop($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.sessions.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "configuration: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "baseProfileId: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "configuration.baseProfileId"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "persistProfile: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "configuration.persistProfile"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "union_v2",
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "proxy: $FERN_INPUT",
                                        "members": [
                                          {
                                            "template": {
                                              "type": "union_v2",
                                              "imports": [],
                                              "isOptional": true,
                                              "templateString": "$FERN_INPUT",
                                              "members": [
                                                {
                                                  "template": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "type": {
                                                    "type": "primitive",
                                                    "value": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                {
                                                  "template": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "inputDelimiter": ",\n\t\t\t\t\t",
                                                    "templateInputs": [
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "generic",
                                                          "imports": [],
                                                          "templateString": "password: $FERN_INPUT",
                                                          "isOptional": true,
                                                          "templateInputs": [
                                                            {
                                                              "type": "payload",
                                                              "location": "RELATIVE",
                                                              "path": "password"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "generic",
                                                          "imports": [],
                                                          "templateString": "url: $FERN_INPUT",
                                                          "isOptional": true,
                                                          "templateInputs": [
                                                            {
                                                              "type": "payload",
                                                              "location": "RELATIVE",
                                                              "path": "url"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "generic",
                                                          "imports": [],
                                                          "templateString": "username: $FERN_INPUT",
                                                          "isOptional": true,
                                                          "templateInputs": [
                                                            {
                                                              "type": "payload",
                                                              "location": "RELATIVE",
                                                              "path": "username"
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "type": {
                                                    "type": "id",
                                                    "value": "type_:Proxy"
                                                  }
                                                }
                                              ],
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            },
                                            "type": {
                                              "type": "id",
                                              "value": "type_:CustomProxy"
                                            }
                                          },
                                          {
                                            "template": {
                                              "type": "iterable",
                                              "imports": [],
                                              "isOptional": true,
                                              "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                              "delimiter": ",\n\t\t\t\t\t",
                                              "innerTemplate": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "{\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "domainPattern: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "domainPattern"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "union_v2",
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "relay: $FERN_INPUT",
                                                      "members": [
                                                        {
                                                          "template": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "$FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": null
                                                              }
                                                            ]
                                                          },
                                                          "type": {
                                                            "type": "primitive",
                                                            "value": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "template": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "$FERN_INPUT",
                                                            "isOptional": true,
                                                            "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                            "templateInputs": [
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "password: $FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": "password"
                                                                    }
                                                                  ]
                                                                }
                                                              },
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "url: $FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": "url"
                                                                    }
                                                                  ]
                                                                }
                                                              },
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "username: $FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": "username"
                                                                    }
                                                                  ]
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "type": {
                                                            "type": "id",
                                                            "value": "type_:Proxy"
                                                          }
                                                        }
                                                      ],
                                                      "templateInput": {
                                                        "location": "RELATIVE",
                                                        "path": "relay"
                                                      }
                                                    }
                                                  }
                                                ]
                                              },
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            },
                                            "type": {
                                              "type": "list",
                                              "itemType": {
                                                "type": "id",
                                                "value": "type_:SessionConfigV1ProxyItem"
                                              }
                                            }
                                          }
                                        ],
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "configuration.proxy"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "timeoutMinutes: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "configuration.timeoutMinutes"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { AirtopClient } from \"@airtop/sdk\";"],
                      "templateString": "const client = new AirtopClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.airtop.ai/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-info",
                "migratedFromUrlSlugs": ["get-info-for-a-session"],
                "method": "GET",
                "id": "getInfo",
                "originalEndpointId": "endpoint_sessions.getInfo",
                "name": "Get info for a session",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Id of the session to get",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/sessions/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:SessionResponse"
                    }
                  },
                  "description": "OK"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorModel"
                      }
                    },
                    "statusCode": 404,
                    "description": "Not Found",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "detail": "Property foo is required but is missing.",
                            "instance": "https://example.com/error-log/abc123",
                            "status": 400,
                            "title": "Bad Request",
                            "type": "https://example.com/errors/example"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorModel"
                      }
                    },
                    "statusCode": 422,
                    "description": "Unprocessable Entity",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "detail": "Property foo is required but is missing.",
                            "instance": "https://example.com/error-log/abc123",
                            "status": 400,
                            "title": "Bad Request",
                            "type": "https://example.com/errors/example"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorModel"
                      }
                    },
                    "statusCode": 500,
                    "description": "Internal Server Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "detail": "Property foo is required but is missing.",
                            "instance": "https://example.com/error-log/abc123",
                            "status": 400,
                            "title": "Bad Request",
                            "type": "https://example.com/errors/example"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/sessions/6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                    "pathParameters": {
                      "id": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "cdpUrl": "cdpUrl",
                        "cdpWsUrl": "cdpWsUrl",
                        "chromedriverUrl": "chromedriverUrl",
                        "configuration": {
                          "baseProfileId": "a13c6f73-bd89-4a76-ab32-5a6c422e8224",
                          "persistProfile": true,
                          "timeoutMinutes": 10
                        },
                        "currentUsage": 1000000,
                        "dateCreated": "2024-01-15T09:30:00Z",
                        "id": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                        "lastActivity": "2024-01-15T09:30:00Z",
                        "profileId": "427c6f73-bd89-4a76-ab32-5a6c422e8b0b",
                        "status": "active"
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ],
                      "meta": {
                        "requestId": "requestId"
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.sessions.getinfo(\n        id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sessions.getinfo(\n    id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sessions.getinfo(\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "cdpUrl": "cdpUrl",
                          "cdpWsUrl": "cdpWsUrl",
                          "chromedriverUrl": "chromedriverUrl",
                          "configuration": {
                            "baseProfileId": "a13c6f73-bd89-4a76-ab32-5a6c422e8224",
                            "persistProfile": true,
                            "timeoutMinutes": 10
                          },
                          "currentUsage": 1000000,
                          "dateCreated": "2024-01-15T09:30:00Z",
                          "id": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                          "lastActivity": "2024-01-15T09:30:00Z",
                          "profileId": "427c6f73-bd89-4a76-ab32-5a6c422e8b0b",
                          "status": "active"
                        },
                        "errors": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ],
                        "meta": {
                          "requestId": "requestId"
                        },
                        "warnings": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/sessions/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.sessions.getinfo(\n        id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sessions.getinfo(\n    id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sessions.getinfo(\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "string",
                        "errors": [
                          {
                            "location": "string",
                            "message": "string",
                            "value": {}
                          }
                        ],
                        "instance": "string",
                        "status": 99999,
                        "title": "string",
                        "type": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/sessions/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.sessions.getinfo(\n        id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sessions.getinfo(\n    id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sessions.getinfo(\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "string",
                        "errors": [
                          {
                            "location": "string",
                            "message": "string",
                            "value": {}
                          }
                        ],
                        "instance": "string",
                        "status": 99999,
                        "title": "string",
                        "type": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/sessions/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.sessions.getinfo(\n        id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sessions.getinfo(\n    id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sessions.getinfo(\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "string",
                        "errors": [
                          {
                            "location": "string",
                            "message": "string",
                            "value": {}
                          }
                        ],
                        "instance": "string",
                        "status": 99999,
                        "title": "string",
                        "type": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get a session by ID",
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.sessions.get_info(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from airtop import Airtop"],
                      "isOptional": true,
                      "templateString": "client = Airtop($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.airtop.ai/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "terminate",
                "migratedFromUrlSlugs": ["ends-a-session"],
                "method": "DELETE",
                "id": "terminate",
                "originalEndpointId": "endpoint_sessions.terminate",
                "name": "Ends a session",
                "path": {
                  "pathParameters": [
                    {
                      "description": "ID of the session to delete.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/sessions/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/sessions/6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                    "pathParameters": {
                      "id": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.sessions.terminate(\n        id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sessions.terminate(\n    id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sessions.terminate(\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\");\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Ends a session by ID. If a given session id does not exist within the organization, it is ignored.",
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.sessions.terminate(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from airtop import Airtop"],
                      "isOptional": true,
                      "templateString": "client = Airtop($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.sessions.terminate(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { AirtopClient } from \"@airtop/sdk\";"],
                      "templateString": "const client = new AirtopClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": ["type_sessions:SessionsListRequestStatus"],
            "subpackages": [],
            "urlSlug": "sessions",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_windows": {
            "subpackageId": "subpackage_windows",
            "name": "windows",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.airtop.ai/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["creates-a-new-browser-window-in-a-session"],
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_windows.create",
                "name": "Creates a new browser window in a session",
                "path": {
                  "pathParameters": [
                    {
                      "description": "ID of the session that owns the window.",
                      "key": "sessionId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/sessions/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "sessionId"
                    },
                    {
                      "type": "literal",
                      "value": "/windows"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Affects the live view configuration. By default, a live view will fill the parent frame (or local window if loaded directly) when initially loaded, causing the browser window to be resized to match. This parameter can be used to instead configure the returned liveViewUrl so that the live view is loaded with fixed dimensions (e.g. 1280x720), resizing the browser window to match, and then disallows any further resizing from the live view.",
                        "key": "screenResolution",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "default": "1280x720"
                            }
                          }
                        }
                      },
                      {
                        "description": "Initial url to navigate to",
                        "key": "url",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "default": "https://www.google.com"
                            }
                          }
                        }
                      },
                      {
                        "description": "Wait until the specified loading event occurs. Defaults to 'load', which waits until the page dom and it's assets have loaded. 'domContentLoaded' will wait until the dom has loaded, and 'complete' will wait until the page and all it's iframes have loaded it's dom and assets.",
                        "key": "waitUntil",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_windows:CreateWindowInputV1BodyWaitUntil"
                          }
                        }
                      },
                      {
                        "description": "Maximum time in seconds to wait for the specified loading event to occur before timing out.",
                        "key": "waitUntilTimeoutSeconds",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "long"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WindowIdResponse"
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/sessions/6aac6f73-bd89-4a76-ab32-5a6c422e8b0b/windows",
                    "pathParameters": {
                      "sessionId": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "targetId": "targetId",
                        "windowId": "windowId"
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ],
                      "meta": {
                        "requestId": "requestId"
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.windows.create(\n        session_id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.windows.create(\n    session_id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.windows.create(\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\");\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "targetId": "targetId",
                          "windowId": "windowId"
                        },
                        "errors": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ],
                        "meta": {
                          "requestId": "requestId"
                        },
                        "warnings": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.windows.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "session_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "sessionId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "screen_resolution=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "screenResolution",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "wait_until=$FERN_INPUT",
                            "values": {
                              "load": "\"load\"",
                              "domContentLoaded": "\"domContentLoaded\"",
                              "complete": "\"complete\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "waitUntil"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "wait_until_timeout_seconds=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "waitUntilTimeoutSeconds",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from airtop import Airtop"],
                      "isOptional": true,
                      "templateString": "client = Airtop($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.windows.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "sessionId"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "screenResolution: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "screenResolution"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "url: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "url"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "load": "Airtop.CreateWindowInputV1BodyWaitUntil.Load",
                                    "domContentLoaded": "Airtop.CreateWindowInputV1BodyWaitUntil.DomContentLoaded",
                                    "complete": "Airtop.CreateWindowInputV1BodyWaitUntil.Complete"
                                  },
                                  "templateString": "waitUntil: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "waitUntil"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "waitUntilTimeoutSeconds: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "waitUntilTimeoutSeconds"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { AirtopClient } from \"@airtop/sdk\";"],
                      "templateString": "const client = new AirtopClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.airtop.ai/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-window-info",
                "migratedFromUrlSlugs": ["get-information-about-a-browser-window-in-a-session"],
                "method": "GET",
                "id": "get-window-info",
                "originalEndpointId": "endpoint_windows.get-window-info",
                "name": "Get information about a browser window in a session",
                "path": {
                  "pathParameters": [
                    {
                      "description": "ID of the session that owns the window.",
                      "key": "sessionId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "ID of the browser window, which can either be a normal AirTop windowId or a [CDP TargetId](https://chromedevtools.github.io/devtools-protocol/tot/Target/#type-TargetID) from a browser automation library like Puppeteer (typically associated with the page or main frame). Our SDKs will handle retrieving a TargetId for you from various popular browser automation libraries, but we also have details in our guides on how to do it manually.",
                      "key": "windowId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/sessions/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "sessionId"
                    },
                    {
                      "type": "literal",
                      "value": "/windows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "windowId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Affects the live view configuration. A navigation bar is not shown in the live view of a browser by default. Set this to true to configure the returned liveViewUrl so that a navigation bar is rendered, allowing users to easily navigate the browser to other pages from the live view.",
                    "key": "includeNavigationBar",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  {
                    "description": "Affects the live view configuration. Set to true to configure the returned liveViewUrl so that the ability to resize the browser window from the live view is disabled (resizing is allowed by default). Note that, at initial load, the live view will automatically fill the parent frame (or local window if loaded directly) and cause the browser window to be resized to match. This parameter does not affect that initial load behavior. See screenResolution for a way to set a fixed size for the live view.",
                    "key": "disableResize",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  {
                    "description": "Affects the live view configuration. By default, a live view will fill the parent frame (or local window if loaded directly) when initially loaded, causing the browser window to be resized to match. This parameter can be used to instead configure the returned liveViewUrl so that the live view is loaded with fixed dimensions (e.g. 1280x720), resizing the browser window to match, and then disallows any further resizing from the live view.",
                    "key": "screenResolution",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WindowResponse"
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/sessions/6aac6f73-bd89-4a76-ab32-5a6c422e8b0b/windows/7334da2a-91b0-42c5-6156-76a5eba87430",
                    "pathParameters": {
                      "sessionId": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                      "windowId": "7334da2a-91b0-42c5-6156-76a5eba87430"
                    },
                    "queryParameters": {
                      "screenResolution": "1280x720"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "liveViewUrl": "liveViewUrl",
                        "windowId": "windowId"
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ],
                      "meta": {
                        "requestId": "requestId"
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.windows.get_window_info(\n        session_id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n        window_id=\"7334da2a-91b0-42c5-6156-76a5eba87430\",\n        screen_resolution=\"1280x720\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.windows.get_window_info(\n    session_id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n    window_id=\"7334da2a-91b0-42c5-6156-76a5eba87430\",\n    screen_resolution=\"1280x720\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.windows.getWindowInfo(\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\", \"7334da2a-91b0-42c5-6156-76a5eba87430\", {\n    screenResolution: \"1280x720\"\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "liveViewUrl": "liveViewUrl",
                          "windowId": "windowId"
                        },
                        "errors": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ],
                        "meta": {
                          "requestId": "requestId"
                        },
                        "warnings": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.windows.get_window_info(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "session_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "sessionId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "window_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "windowId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "include_navigation_bar=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "includeNavigationBar",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "disable_resize=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "disableResize",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "screen_resolution=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "screenResolution",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from airtop import Airtop"],
                      "isOptional": true,
                      "templateString": "client = Airtop($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.windows.getWindowInfo(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "sessionId"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "windowId"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "includeNavigationBar: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "includeNavigationBar"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "disableResize: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "disableResize"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "screenResolution: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "screenResolution"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { AirtopClient } from \"@airtop/sdk\";"],
                      "templateString": "const client = new AirtopClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.airtop.ai/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "load-url",
                "migratedFromUrlSlugs": ["loads-a-specified-url-on-a-given-window"],
                "method": "POST",
                "id": "loadUrl",
                "originalEndpointId": "endpoint_windows.loadUrl",
                "name": "Loads a specified url on a given window",
                "path": {
                  "pathParameters": [
                    {
                      "description": "ID of the session that owns the window.",
                      "key": "sessionId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Airtop window ID of the browser window.",
                      "key": "windowId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/sessions/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "sessionId"
                    },
                    {
                      "type": "literal",
                      "value": "/windows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "windowId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Url to navigate to",
                        "key": "url",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Wait until the specified loading event occurs. Defaults to 'load', which waits until the page dom and it's assets have loaded. 'domContentLoaded' will wait until the dom has loaded, and 'complete' will wait until the page and all it's iframes have loaded it's dom and assets.",
                        "key": "waitUntil",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_windows:WindowLoadUrlV1BodyWaitUntil"
                          }
                        }
                      },
                      {
                        "description": "Maximum time in seconds to wait for the specified loading event to occur before timing out.",
                        "key": "waitUntilTimeoutSeconds",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "long"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EmptyResponse"
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/sessions/6aac6f73-bd89-4a76-ab32-5a6c422e8b0b/windows/7334da2a-91b0-42c5-6156-76a5eba87430",
                    "pathParameters": {
                      "sessionId": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                      "windowId": "7334da2a-91b0-42c5-6156-76a5eba87430"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "url": "https://www.airtop.ai"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "success": true
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ],
                      "meta": {
                        "requestId": "requestId",
                        "status": "success"
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.windows.load_url(\n        session_id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n        window_id=\"7334da2a-91b0-42c5-6156-76a5eba87430\",\n        url=\"https://www.airtop.ai\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.windows.load_url(\n    session_id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n    window_id=\"7334da2a-91b0-42c5-6156-76a5eba87430\",\n    url=\"https://www.airtop.ai\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.windows.loadUrl(\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\", \"7334da2a-91b0-42c5-6156-76a5eba87430\", {\n    url: \"https://www.airtop.ai\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "url": "https://www.airtop.ai"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "success": true
                        },
                        "errors": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ],
                        "meta": {
                          "requestId": "requestId",
                          "status": "success"
                        },
                        "warnings": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.windows.load_url(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "session_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "sessionId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "window_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "windowId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "wait_until=$FERN_INPUT",
                            "values": {
                              "load": "\"load\"",
                              "domContentLoaded": "\"domContentLoaded\"",
                              "complete": "\"complete\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "waitUntil"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "wait_until_timeout_seconds=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "waitUntilTimeoutSeconds",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from airtop import Airtop"],
                      "isOptional": true,
                      "templateString": "client = Airtop($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.windows.loadUrl(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "sessionId"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "windowId"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "url: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "url"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "load": "Airtop.WindowLoadUrlV1BodyWaitUntil.Load",
                                    "domContentLoaded": "Airtop.WindowLoadUrlV1BodyWaitUntil.DomContentLoaded",
                                    "complete": "Airtop.WindowLoadUrlV1BodyWaitUntil.Complete"
                                  },
                                  "templateString": "waitUntil: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "waitUntil"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "waitUntilTimeoutSeconds: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "waitUntilTimeoutSeconds"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { AirtopClient } from \"@airtop/sdk\";"],
                      "templateString": "const client = new AirtopClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.airtop.ai/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "close",
                "migratedFromUrlSlugs": ["close-the-specified-window"],
                "method": "DELETE",
                "id": "close",
                "originalEndpointId": "endpoint_windows.close",
                "name": "Close the specified window",
                "path": {
                  "pathParameters": [
                    {
                      "description": "ID of the session that owns the window.",
                      "key": "sessionId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Airtop window ID of the browser window.",
                      "key": "windowId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/sessions/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "sessionId"
                    },
                    {
                      "type": "literal",
                      "value": "/windows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "windowId"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WindowIdResponse"
                    }
                  },
                  "description": "OK"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/sessions/6aac6f73-bd89-4a76-ab32-5a6c422e8b0b/windows/7334da2a-91b0-42c5-6156-76a5eba87430",
                    "pathParameters": {
                      "sessionId": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                      "windowId": "7334da2a-91b0-42c5-6156-76a5eba87430"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "targetId": "targetId",
                        "windowId": "windowId"
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ],
                      "meta": {
                        "requestId": "requestId"
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.windows.close(\n        session_id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n        window_id=\"7334da2a-91b0-42c5-6156-76a5eba87430\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.windows.close(\n    session_id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n    window_id=\"7334da2a-91b0-42c5-6156-76a5eba87430\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.windows.close(\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\", \"7334da2a-91b0-42c5-6156-76a5eba87430\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "targetId": "targetId",
                          "windowId": "windowId"
                        },
                        "errors": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ],
                        "meta": {
                          "requestId": "requestId"
                        },
                        "warnings": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.windows.close(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "session_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "sessionId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "window_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "windowId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from airtop import Airtop"],
                      "isOptional": true,
                      "templateString": "client = Airtop($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.windows.close(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "sessionId"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "windowId"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { AirtopClient } from \"@airtop/sdk\";"],
                      "templateString": "const client = new AirtopClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.airtop.ai/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "prompt-content",
                "migratedFromUrlSlugs": ["submit-a-prompt-about-the-content-in-a-specific-browser-window"],
                "method": "POST",
                "id": "prompt-content",
                "originalEndpointId": "endpoint_windows.prompt-content",
                "name": "Submit a prompt about the content in a specific browser window.",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The session id for the window.",
                      "key": "sessionId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Airtop window id of the browser window to target with an Airtop AI prompt.",
                      "key": "windowId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/sessions/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "sessionId"
                    },
                    {
                      "type": "literal",
                      "value": "/windows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "windowId"
                    },
                    {
                      "type": "literal",
                      "value": "/prompt-content"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "clientRequestId",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Request configuration",
                        "key": "configuration",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PromptContentConfig"
                          }
                        }
                      },
                      {
                        "description": "A credit threshold that, once exceeded, will cause the operation to be cancelled. Note that this is *not* a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).",
                        "key": "costThresholdCredits",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "long"
                            }
                          }
                        }
                      },
                      {
                        "description": "Make a best effort attempt to load more content items than are originally displayed on the page, e.g. by following pagination links, clicking controls to load more content, utilizing infinite scrolling, etc. This can be quite a bit more costly, but may be necessary for sites that require additional interaction to show the needed results. You can provide constraints in your prompt (e.g. on the total number of pages or results to consider).",
                        "key": "followPaginationLinks",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "The prompt to submit about the content in the browser window.",
                        "key": "prompt",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "A time threshold in seconds that, once exceeded, will cause the operation to be cancelled. Note that this is *not* a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).\n\nThis setting does not extend the maximum session duration provided at the time of session creation.",
                        "key": "timeThresholdSeconds",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "long"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AiPromptResponse"
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/sessions/6aac6f73-bd89-4a76-ab32-5a6c422e8b0b/windows/0334da2a-91b0-42c5-6156-76a5eba87430/prompt-content",
                    "pathParameters": {
                      "sessionId": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                      "windowId": "0334da2a-91b0-42c5-6156-76a5eba87430"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "prompt": "What is the main idea of this page?"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "modelResponse": "modelResponse"
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ],
                      "meta": {
                        "clientProvided": {
                          "clientRequestId": "clientRequestId"
                        },
                        "requestId": "requestId",
                        "status": "success",
                        "usage": {
                          "credits": 1000000,
                          "id": "id"
                        }
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.windows.prompt_content(\n        session_id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n        window_id=\"0334da2a-91b0-42c5-6156-76a5eba87430\",\n        prompt=\"What is the main idea of this page?\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.windows.prompt_content(\n    session_id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n    window_id=\"0334da2a-91b0-42c5-6156-76a5eba87430\",\n    prompt=\"What is the main idea of this page?\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.windows.promptContent(\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\", \"0334da2a-91b0-42c5-6156-76a5eba87430\", {\n    prompt: \"What is the main idea of this page?\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "prompt": "What is the main idea of this page?"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "modelResponse": "modelResponse"
                        },
                        "errors": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ],
                        "meta": {
                          "clientProvided": {
                            "clientRequestId": "clientRequestId"
                          },
                          "requestId": "requestId",
                          "status": "success",
                          "usage": {
                            "credits": 1000000,
                            "id": "id"
                          }
                        },
                        "warnings": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.windows.prompt_content(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "session_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "sessionId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "window_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "windowId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "client_request_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "clientRequestId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "cost_threshold_credits=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "costThresholdCredits",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "follow_pagination_links=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "followPaginationLinks",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "prompt=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "prompt",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "time_threshold_seconds=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "timeThresholdSeconds",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from airtop import Airtop"],
                      "isOptional": true,
                      "templateString": "client = Airtop($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.windows.promptContent(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "sessionId"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "windowId"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "clientRequestId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "clientRequestId"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "costThresholdCredits: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "costThresholdCredits"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "followPaginationLinks: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "followPaginationLinks"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "prompt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "prompt"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "timeThresholdSeconds: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "timeThresholdSeconds"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { AirtopClient } from \"@airtop/sdk\";"],
                      "templateString": "const client = new AirtopClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.airtop.ai/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "scrape-content",
                "migratedFromUrlSlugs": ["scrape-a-window"],
                "method": "POST",
                "id": "scrape-content",
                "originalEndpointId": "endpoint_windows.scrape-content",
                "name": "Scrape a window",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The session id for the window.",
                      "key": "sessionId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Airtop window id of the browser window to scrape.",
                      "key": "windowId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/sessions/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "sessionId"
                    },
                    {
                      "type": "literal",
                      "value": "/windows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "windowId"
                    },
                    {
                      "type": "literal",
                      "value": "/scrape-content"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "clientRequestId",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "A credit threshold that, once exceeded, will cause the operation to be cancelled. Note that this is *not* a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).",
                        "key": "costThresholdCredits",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "long"
                            }
                          }
                        }
                      },
                      {
                        "description": "A time threshold in seconds that, once exceeded, will cause the operation to be cancelled. Note that this is *not* a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).\n\nThis setting does not extend the maximum session duration provided at the time of session creation.",
                        "key": "timeThresholdSeconds",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "long"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ScrapeResponse"
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/sessions/6aac6f73-bd89-4a76-ab32-5a6c422e8b0b/windows/0334da2a-91b0-42c5-6156-76a5eba87430/scrape-content",
                    "pathParameters": {
                      "sessionId": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                      "windowId": "0334da2a-91b0-42c5-6156-76a5eba87430"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "modelResponse": {
                          "scrapedContent": {
                            "contentType": "contentType",
                            "text": "text"
                          },
                          "selectedText": "selectedText",
                          "title": "title"
                        }
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ],
                      "meta": {
                        "clientProvided": {
                          "clientRequestId": "clientRequestId"
                        },
                        "requestId": "requestId",
                        "status": "success",
                        "usage": {
                          "credits": 1000000,
                          "id": "id"
                        }
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.windows.scrape_content(\n        session_id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n        window_id=\"0334da2a-91b0-42c5-6156-76a5eba87430\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.windows.scrape_content(\n    session_id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n    window_id=\"0334da2a-91b0-42c5-6156-76a5eba87430\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.windows.scrapeContent(\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\", \"0334da2a-91b0-42c5-6156-76a5eba87430\");\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "modelResponse": {
                            "scrapedContent": {
                              "contentType": "contentType",
                              "text": "text"
                            },
                            "selectedText": "selectedText",
                            "title": "title"
                          }
                        },
                        "errors": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ],
                        "meta": {
                          "clientProvided": {
                            "clientRequestId": "clientRequestId"
                          },
                          "requestId": "requestId",
                          "status": "success",
                          "usage": {
                            "credits": 1000000,
                            "id": "id"
                          }
                        },
                        "warnings": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.windows.scrape_content(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "session_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "sessionId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "window_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "windowId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "client_request_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "clientRequestId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "cost_threshold_credits=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "costThresholdCredits",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "time_threshold_seconds=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "timeThresholdSeconds",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from airtop import Airtop"],
                      "isOptional": true,
                      "templateString": "client = Airtop($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.windows.scrapeContent(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "sessionId"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "windowId"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "clientRequestId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "clientRequestId"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "costThresholdCredits: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "costThresholdCredits"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "timeThresholdSeconds: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "timeThresholdSeconds"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { AirtopClient } from \"@airtop/sdk\";"],
                      "templateString": "const client = new AirtopClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.airtop.ai/api/v1"
                  }
                ],
                "availability": "Deprecated",
                "defaultEnvironment": "Default",
                "urlSlug": "summarize-content",
                "migratedFromUrlSlugs": ["get-a-summary-of-content-in-a-browser-window"],
                "method": "POST",
                "id": "summarize-content",
                "originalEndpointId": "endpoint_windows.summarize-content",
                "name": "Get a summary of content in a browser window",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The session id for the window.",
                      "key": "sessionId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The Airtop window id of the browser window to summarize.",
                      "key": "windowId",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/sessions/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "sessionId"
                    },
                    {
                      "type": "literal",
                      "value": "/windows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "windowId"
                    },
                    {
                      "type": "literal",
                      "value": "/summarize-content"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "clientRequestId",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Request configuration",
                        "key": "configuration",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:SummaryConfig"
                          }
                        }
                      },
                      {
                        "description": "A credit threshold that, once exceeded, will cause the operation to be cancelled. Note that this is *not* a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).",
                        "key": "costThresholdCredits",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "long"
                            }
                          }
                        }
                      },
                      {
                        "description": "An optional prompt providing the Airtop AI model with additional direction or constraints about the summary (such as desired length).",
                        "key": "prompt",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "A time threshold in seconds that, once exceeded, will cause the operation to be cancelled. Note that this is *not* a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A default threshold is used if not specified, but you can use this option to increase or decrease as needed. Set to 0 to disable this feature entirely (not recommended).\n\nThis setting does not extend the maximum session duration provided at the time of session creation.",
                        "key": "timeThresholdSeconds",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "long"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:AiPromptResponse"
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/sessions/6aac6f73-bd89-4a76-ab32-5a6c422e8b0b/windows/0334da2a-91b0-42c5-6156-76a5eba87430/summarize-content",
                    "pathParameters": {
                      "sessionId": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                      "windowId": "0334da2a-91b0-42c5-6156-76a5eba87430"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": {
                        "modelResponse": "modelResponse"
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ],
                      "meta": {
                        "clientProvided": {
                          "clientRequestId": "clientRequestId"
                        },
                        "requestId": "requestId",
                        "status": "success",
                        "usage": {
                          "credits": 1000000,
                          "id": "id"
                        }
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value"
                          },
                          "message": "message"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.22",
                          "package": "airtop"
                        },
                        "async_client": "import asyncio\n\nfrom airtop import AsyncAirtop\n\nclient = AsyncAirtop(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.windows.summarize_content(\n        session_id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n        window_id=\"0334da2a-91b0-42c5-6156-76a5eba87430\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from airtop import Airtop\n\nclient = Airtop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.windows.summarize_content(\n    session_id=\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\",\n    window_id=\"0334da2a-91b0-42c5-6156-76a5eba87430\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.1.4",
                          "package": "@airtop/sdk"
                        },
                        "client": "import { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.windows.summarizeContent(\"6aac6f73-bd89-4a76-ab32-5a6c422e8b0b\", \"0334da2a-91b0-42c5-6156-76a5eba87430\");\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": {
                          "modelResponse": "modelResponse"
                        },
                        "errors": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ],
                        "meta": {
                          "clientProvided": {
                            "clientRequestId": "clientRequestId"
                          },
                          "requestId": "requestId",
                          "status": "success",
                          "usage": {
                            "credits": 1000000,
                            "id": "id"
                          }
                        },
                        "warnings": [
                          {
                            "code": "code",
                            "details": {
                              "key": "value"
                            },
                            "message": "message"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true,
                "snippetTemplates": {
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.windows.summarize_content(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "session_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "sessionId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "window_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "windowId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "client_request_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "clientRequestId",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "cost_threshold_credits=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "costThresholdCredits",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "prompt=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "prompt",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "time_threshold_seconds=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "timeThresholdSeconds",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": {
                      "imports": ["from airtop import Airtop"],
                      "isOptional": true,
                      "templateString": "client = Airtop($FERN_INPUT, )",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": false,
                            "templateString": "api_key=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "AUTH",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",",
                      "type": "generic"
                    }
                  },
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await client.windows.summarizeContent(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "sessionId"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "windowId"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "clientRequestId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "clientRequestId"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "costThresholdCredits: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "costThresholdCredits"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "prompt: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "prompt"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "timeThresholdSeconds: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "timeThresholdSeconds"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": {
                      "type": "generic",
                      "imports": ["import { AirtopClient } from \"@airtop/sdk\";"],
                      "templateString": "const client = new AirtopClient($FERN_INPUT);",
                      "isOptional": false,
                      "inputDelimiter": ",",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{ $FERN_INPUT }",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "apiKey: $FERN_INPUT",
                                  "isOptional": false,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "AUTH",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ],
            "types": ["type_windows:CreateWindowInputV1BodyWaitUntil", "type_windows:WindowLoadUrlV1BodyWaitUntil"],
            "subpackages": [],
            "urlSlug": "windows",
            "webhooks": [],
            "websockets": []
          }
        },
        "auth": {
          "type": "bearerAuth",
          "tokenName": "apiKey"
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      }
    },
    "files": {
      "12940024-283e-49c3-adcf-8fb94888abd8": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//airtop-dev.docs.buildwithfern.com/2024-11-05T16%3A55%3A03.734Z/images/logo_w_mark.svg",
      "b8e63715-f527-43e1-b9ce-8090246fcab2": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//airtop-dev.docs.buildwithfern.com/2024-11-05T16%3A55%3A03.734Z/images/favicon.ico",
      "1710b0cc-b19c-4f60-9acc-879f840c778c": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//airtop-dev.docs.buildwithfern.com/2024-11-05T16%3A55%3A03.734Z/images/authentication/auth-flow.png",
      "09cd06ed-9cc6-40c8-995d-ebf2fe4d617c": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//airtop-dev.docs.buildwithfern.com/2024-11-05T16%3A55%3A03.734Z/images/live-view/live-view-example.png",
      "b088cea7-c409-4955-9bb3-97f430bcb022": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//airtop-dev.docs.buildwithfern.com/2024-11-05T16%3A55%3A03.734Z/images/live-view/live-view-w-bar.png",
      "fa4be246-5ea7-423c-a765-471f8f707a73": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//airtop-dev.docs.buildwithfern.com/2024-11-05T16%3A55%3A03.734Z/images/debugger/debugger_field.png",
      "d81ef6b1-2c9c-4467-aee3-55cc31eebb3f": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//airtop-dev.docs.buildwithfern.com/2024-11-05T16%3A55%3A03.734Z/images/debugger/devtools_discover_page.png",
      "676025f8-ee06-4151-bec5-1b21a42e6387": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//airtop-dev.docs.buildwithfern.com/2024-11-05T16%3A55%3A03.734Z/images/debugger/devtools_inspector.png"
    },
    "jsFiles": {},
    "filesV2": {
      "12940024-283e-49c3-adcf-8fb94888abd8": {
        "type": "image",
        "width": 133,
        "height": 33,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://airtop-dev.docs.buildwithfern.com/2024-11-05T16:55:03.734Z/images/logo_w_mark.svg"
      },
      "b8e63715-f527-43e1-b9ce-8090246fcab2": {
        "type": "image",
        "width": 48,
        "height": 48,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://airtop-dev.docs.buildwithfern.com/2024-11-05T16:55:03.734Z/images/favicon.ico"
      },
      "1710b0cc-b19c-4f60-9acc-879f840c778c": {
        "type": "image",
        "width": 1618,
        "height": 920,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://airtop-dev.docs.buildwithfern.com/2024-11-05T16:55:03.734Z/images/authentication/auth-flow.png"
      },
      "09cd06ed-9cc6-40c8-995d-ebf2fe4d617c": {
        "type": "image",
        "width": 2104,
        "height": 1370,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://airtop-dev.docs.buildwithfern.com/2024-11-05T16:55:03.734Z/images/live-view/live-view-example.png"
      },
      "b088cea7-c409-4955-9bb3-97f430bcb022": {
        "type": "image",
        "width": 2850,
        "height": 1694,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://airtop-dev.docs.buildwithfern.com/2024-11-05T16:55:03.734Z/images/live-view/live-view-w-bar.png"
      },
      "fa4be246-5ea7-423c-a765-471f8f707a73": {
        "type": "image",
        "width": 1604,
        "height": 570,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://airtop-dev.docs.buildwithfern.com/2024-11-05T16:55:03.734Z/images/debugger/debugger_field.png"
      },
      "d81ef6b1-2c9c-4467-aee3-55cc31eebb3f": {
        "type": "image",
        "width": 1257,
        "height": 711,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://airtop-dev.docs.buildwithfern.com/2024-11-05T16:55:03.734Z/images/debugger/devtools_discover_page.png"
      },
      "676025f8-ee06-4151-bec5-1b21a42e6387": {
        "type": "image",
        "width": 1284,
        "height": 713,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://airtop-dev.docs.buildwithfern.com/2024-11-05T16:55:03.734Z/images/debugger/devtools_inspector.png"
      }
    },
    "pages": {
      "pages/guides/getting-started/what-is-airtop.mdx": {
        "markdown": "---\ntitle: What is Airtop?\nsubtitle: Why do you need Airtop and how does it work?\n---\n\n## Overview\n\nAirtop is a cloud browser platform that allows you, your AI Agent, or your automation tools to control a web browser in the cloud.\n\nAny application that wants to automate actions on behalf of users has 2 options:\n\n1. Use a service's APIs\n2. Use a browser automation tool and interact with a web application directly.\n\nQuite often, the first option is not possible because the service's API is unavailable or does not provide the necessary functionality, so developers must go with option #2.\n\nHowever, browser automation is very challenging to do well at scale for the following reasons:\n\n1. **Infrastructure Complexity**: Properly managing a browser infrastructure is a complex task. You need to manage a cluster of virtual machines, maintain pre-warmed pools of browsers, ensure high availability, manage security of browser sessions, keep browser versions updated to prevent security vulnerabilities, and more.\n2. **High Cost**: Managing a fleet of browsers is expensive, both in terms of money and infrastructure. In particular, keeping a warm pool of browsers to guarantee high availability is very resource-intensive and not where you want to spend your money.\n3. **Fragile Scripts**: Writing Puppeteer/Playwright/Selenium scripts is fragile. CSS selectors often break when the page is updated, and the scripts are hard to maintain and scale.\n4. **Anti-bot Detection**: Most web applications have anti-bot detection mechanisms that make it difficult to automate actions at scale. You need to deal with CAPTCHAs, residential proxies, fingerprinting, and more.\n5. **Authentication**: Many web applications have authentication mechanisms that make it difficult to automate actions on behalf of users. You need to handle OAuth, SSO, 2FA, and other methods, all with exceptional security requirements.\n\nAirtop solves all of these problems by offering you a simple, scalable, and cost-effective service to run large numbers of browser sessions in the cloud and automate actions via natural language, all through a powerful, yet simple API.\n\n## How it works\n\n### Creating a browser session\n\nThe first step to using Airtop is to create a browser session, which is as simple as a single line of code.\n\n<CodeGroup>\n```ts NodeJS\nconst session = await client.sessions.create();\n```\n\n```python Python\nsession = client.sessions.create()\n```\n\n</CodeGroup>\n\nThis will instantiate a cloud browser that you can use to navigate the web, either directly as an end-user, or via an API as an AI Agent.\n\n### AI APIs\n\nAirtop offers a powerful AI API that allows your agent to control the browser through natural language. For example, suppose that you wanted to extract all the search results in a product search page, including across all pages of results. You could simply call this API with your prompt:\n\n<CodeGroup>\n```ts NodeJS\nconst prompt = `Get me up to 1000 results in this search page \n                and extract the title, price, and link for each result. \n                Format the results as a JSON array.`;\nconst results = await client.windows.promptContent(session.data.id, window.id, {\n  prompt,\n  followPaginationLinks: true,\n});\n```\n\n```python Python\nprompt = \"\"\"\nGet me up to 1000 results in this search page and extract the title, price, and link for each result. \nFormat the results as a JSON array.\n\"\"\"\nprompt_result = client.windows.prompt_content(session.data.id, window_response.data.window_id, prompt=prompt)\n```\n\n</CodeGroup>\n\nThese APIs are powered by a state-of-the-art LLM that understands the structure of the web, and can navigate complex pages. We use a multi-modal approach that incorporates visual information, text, and DOM structure to understand and navigate pages.\n\nThis is an excellent option if you want to automate the browser without having to go deep into the DOM structure and craft site specific scripts.\n\n### Playwright/Puppeteer/Selenium scripts\n\nThere are times when you do want lower level control of your automation. We fully support Playwright, Puppeteer, and Selenium scripts, and can easily integrate with them.\n\nHere is a brief example of how to use Puppeteer/Playwright with Airtop:\n\n<CodeGroup>\n```ts NodeJS (Puppeteer)\nconst session = await client.sessions.create();\nconst browser = await puppeteer.connect({\n  browserWSEndpoint: session.data?.cdpWsUrl,\n  headers: {\n    authorization: `Bearer API_KEY`,\n  },\n});\nconst page = await browser.newPage();\n\n// Navigate to a page\nawait page.goto('https://www.airtop.ai');\n\n// Extract all the href links from the page\nconst links = await page.evaluate(() => {\n  return Array.from(document.querySelectorAll('a')).map((link) => link.href);\n});\n```\n\n```python Python (Playwright)\nbrowser = p.chromium.connect_over_cdp(session.data.cdp_ws_url, headers={\n    'authorization': 'Bearer API_KEY'\n})\n\ndefault_context = browser.contexts[0]\npage = default_context.new_page()\n\n# Navigate to a page\npage.goto(\"https://www.airtop.ai\")\n\n# Extract all the href links from the page\nlinks = page.eval_on_selector_all('a', 'elements => elements.map(el => el.href)')\n```\n\n</CodeGroup>\n\n### Authentication\n\nOften times, you will need to automate a web application that requires authentication. Airtop offers a powerful authentication system that allows you to ask your users to login and, and subsequently allow your agents to continue browsing the web on their behalf.\n\nFirst, you create a a browser session as shown above. Then, you can create a live browser view, which you can embed in your own web app and allow your users to interact and log in to the target site.\n\nOnce the user logs in, you can save the session profile, which includes all cookies and other artifacts of the browser session. You can subsequently instantiate new browser sessions with that profile, which will include the authenticated state. We **never store any actual credentials, including passwords** and store the entire profile fully encrypted.\n\n<Frame>\n  <img src=\"file:1710b0cc-b19c-4f60-9acc-879f840c778c\" alt=\"Authentication Flow\" />\n</Frame>\n\nThis powerful feature allows you to build applications that can interact with authenticated web services on behalf of your users, while maintaining the highest level of security and privacy.\n\n### Residential proxies\n\nThere are times when a site blocks requests from a single or a non-residential IP address. In these cases, you can use Airtop's residential proxy feature to proxy traffic to residential IPs and ensure your traffic is not blocked. We include an integrated residential proxy network with over 100 million residential IPs from 100+ countries. Or if you already have your own proxy vendor or infrastructure, you can use your own.\n\n## Where to go from here?\n\nNow that you have a basic understanding of what Airtop is and how it works, you can start building your own applications. We recommend the following resources:\n\n1. Check out our [Quickstart Guide](/guides/getting-started/quick-start) to get started.\n2. For more detailed guides on how to use each of our features, check out our [How-To Guides](/guides/how-to) section.\n3. If you need to reference our API, check out our [API Reference](/api-reference/airtop-api).\n4. We have prepared a set of [Recipes](/recipes), fully functioning, open-sourced examples, that you can download and modify to get started quickly.\n5. Finally, if you get stuck, you can always [reach out to us for support](mailto:support@airtop.ai).\n"
      },
      "pages/guides/getting-started/quick-start.mdx": {
        "markdown": "---\ntitle: Quick Start\nsubtitle: Connect your AI Agent to the web in just 2 minutes\n---\n\nWelcome to Airtop! We're thrilled to guide you through connecting your AI Agent to the web using our powerful cloud browsers. In this quick-start guide, we'll walk you through:\n\n- Setting up your project\n- Creating a browser session\n- Navigating the web\n- Summarizing web pages using AI\n\nBy the end, you'll have created your browser session and summarized the page contents in just a few minutes. Let's get started!\n\n<Steps toc={true}>\n \n### Step 1\n\nLet's begin by installing the necessary packages. You'll need the Airtop SDK to interact with our service.\n\n<CodeGroup>\n\n```bash NodeJS (npm)\nnpm i -s @airtop/sdk\n```\n\n```bash NodeJS (yarn)\nyarn add @airtop/sdk\n```\n\n```bash NodeJS (pnpm)\npnpm add @airtop/sdk\n```\n\n```bash Python\npip install airtop\n```\n\n</CodeGroup>\n\n### Step 2\n\nGet an API key from the [Airtop Developer Portal](https://portal.airtop.ai/api-keys).\n\n<Tip>You can create a **free** account if you don't already have one when you first log in.</Tip>\n\n### Step 3\n\nOpen up your favorite code editor and create a new file called `quickstart.js`. Create a new Airtop client.\n\n<CodeGroup>\n\n```ts NodeJS\nimport { AirtopClient } from '@airtop/sdk';\n\nconst apiKey = 'YOUR_AIRTOP_API_KEY';\nconst client = new AirtopClient({ apiKey });\n```\n\n```python Python\nfrom airtop import Airtop\n\nclient = Airtop(api_key=\"YOUR_AIRTOP_API_KEY\")\n```\n\n</CodeGroup>\n\n### Step 4\n\nCreate a new browser session.\n\n<CodeGroup>\n```ts NodeJS\nconst session = await client.sessions.create();\n```\n\n```python Python\nsession = client.sessions.create()\n```\n\n</CodeGroup>\n\n### Step 5\n\nCreate a new window, load a URL and get the window information.\n\n<CodeGroup>\n```ts NodeJS\nconst window = await client.windows.create(session.data.id, { url: \"https://www.airtop.ai\" });\n```\n\n```python Python\nwindow = client.windows.create(session.data.id, url=\"https://www.airtop.ai\")\n```\n\n</CodeGroup>\n\n\n### Step 6\n\nGet the page content and summarize using AI.\n\n<CodeGroup>\n```ts NodeJS\nconst contentSummary = await client.windows.promptContent(session.data.id, window.data.windowId, {\n  prompt: 'Summarize the contents of the page in 1 short paragraph up to 170 characters.',\n});\nconsole.log(contentSummary.data.modelResponse);\n\n// Terminate the session when you're done\nawait client.sessions.terminate(session.data.id);\n```\n\n```python Python\nprompt = 'Summarize the contents of the page in 1 short paragraph up to 170 characters.'\ncontent_summary = client.windows.prompt_content(session.data.id, window.data.window_id, prompt=prompt)\nprint(content_summary.data.model_response)\n\n# Terminate the session when you're done\nclient.sessions.terminate(session.data.id)\n```\n\n</CodeGroup>\n\n### Step 7\n\nIn your terminal, run the following command:\n\n<CodeGroup>\n```bash NodeJS\nnode quickstart.js\n```\n\n```bash Python\npython quickstart.py\n```\n\n</CodeGroup>\n\n</Steps>\n\nCongratulations 🎉! You've just created your first browser session, navigated to the Airtop website and summarized the page contents using AI.\n"
      },
      "pages/guides/how-to/creating-a-session.mdx": {
        "markdown": "---\ntitle: Creating a Session\nsubtitle: How to create a session with Airtop\n---\n\n## What is a session?\n\nA session represents an instance of a browser. Each session is identified by a unique UUID and can contain multiple windows that each can load a page. \n\n## How to create a session\n\nYou can create a session by simply calling the `create` function on the API as follows:\n\n<CodeBlock>\n```typescript NodeJS\nconst client = new AirtopClient({apiKey: \"YOUR_API_KEY\"});\nconst session = await client.sessions.create();\n```\n\n```python Python\nclient = Airtop(api_key=\"YOUR_API_KEY\")\nsession = client.sessions.create()\n```\n</CodeBlock>\n\nWhen you create a session, it may take a small amount of time to initialize. Usually it's a matter of seconds, but in rare cases when hardware isn't immediately available, it may take around 1 minute. The `create` function will wait until the session is fully initialized and ready to be used. However, if you would like to create a session and not wait for initialization, you can pass the `skipWaitSessionReady` parameter as `true`.\n\n<CodeBlock>\n```typescript NodeJS\nconst client = new AirtopClient({apiKey: \"YOUR_API_KEY\"});\nconst session = await client.sessions.create({\n  configuration: {\n    skipWaitSessionReady: true,\n  }\n});\n```\n\n```python Python\n# Also import SessionConfig to pass the configuration parameter\nfrom airtop import Airtop, SessionConfig\n\nclient = Airtop(api_key=\"YOUR_API_KEY\")\nsession = client.sessions.create(configuration=SessionConfig(skip_wait_session_ready=True))\n```\n</CodeBlock>\n\nIf you choose to not wait for the session to initialize, you can use the `waitForSessionReady` function to wait until the session is ready.\n\n<CodeBlock>\n```typescript NodeJS\nconst client = new AirtopClient({apiKey: \"YOUR_API_KEY\"});\nconst session = await client.sessions.create({\n  configuration: {\n    skipWaitSessionReady: true,\n  }\n});\n\n// Session will be returned immediately but may not be ready for use\nawait client.sessions.waitForSessionReady(session.data.id);\n\n// Session is now ready for use\n```\n\n```python Python\nclient = Airtop(api_key=\"YOUR_API_KEY\")\nsession = await client.sessions.create(configuration=SessionConfig(skip_wait_session_ready=True))\n\n# Session will be returned immediately but may not be ready for use\nclient.sessions.wait_for_session_ready(session.data.id)\n\n# Session is now ready for use\n```\n</CodeBlock>\n\nBy default, session have a TTL (Time To Live) of 10 mins. Once the TTL expires, the session will be automatically terminated. You can also specify a custom timeout when creating a session by passing the `timeoutMinutes` parameter.\n\n<CodeBlock>\n```typescript NodeJS\nconst client = new AirtopClient({apiKey: \"YOUR_API_KEY\"});\nconst session = await client.sessions.create({configuration: {\n  timeoutMinutes: 15,\n}});\n```\n\n```python Python\n# Also import SessionConfigV1 to pass the configuration parameter\nfrom airtop import Airtop, SessionConfig\n\nclient = Airtop(api_key=\"YOUR_API_KEY\")\nsession = client.sessions.create(configuration=SessionConfig(timeout_minutes=15))\n```\n</CodeBlock>\n\nYou can also terminate a session at any point by calling the `terminate` function.\n\n<CodeBlock>\n```typescript NodeJS\nconst client = new AirtopClient({apiKey: \"YOUR_API_KEY\"});\nconst session = await client.sessions.create();\nawait client.sessions.terminate(session.data.id);\n```\n\n```python Python\nclient = Airtop(api_key=\"YOUR_API_KEY\")\nsession = client.sessions.create()\nclient.sessions.terminate(session.data.id)\n```\n</CodeBlock>\n\n<Note>\nRemember that sessions are billed per 30s increments, so it's important to terminate sessions when you're done with them to avoid unnecessary charges.\n</Note>\n\n## Session States\n\nSessions can be in one of the following states:\n\n- `initializing`: The session is pending initialization.\n- `awaiting_capacity`: The session is waiting for capacity.\n- `running`: The session is running and ready for use.\n- `ended`: The session has been ended by the user or due to inactivity.\n\nIn general, if you are creating a session via the SDK without the `skipWaitSessionReady: true` parameter, you do not need to worry about `initializing` and `awaiting_capacity` states. These states are only relevant if you are creating a session with the `skipWaitSessionReady: true` parameter or directly through the REST API. A session might be `ended` if it terminated due to TTL timeout, if you explicitly terminate it, or if it was terminated due to an error.\n\nYou can check the state of a session by calling the `getInfo` function.\n\n<CodeBlock>\n```typescript NodeJS\nconst client = new AirtopClient({apiKey: \"YOUR_API_KEY\"});\nconst session = await client.sessions.getInfo(session.data.id);\nconsole.log(session.data.status);\n```\n\n```python Python\nclient = Airtop(api_key=\"YOUR_API_KEY\")\nsession = client.sessions.getinfo(session.data.id)\nprint(session.data.status)\n```\n</CodeBlock>\n\n## Profiles\n\nWhen creating a session, you can choose to save the profile of the browser for future use, or load a saved profile. This will allow you to reuse cookies and local storage between sessions. For more detailed information on how to use profiles, see [Profiles](/guides/how-to/saving-a-profile). \n\n## Windows\n\nAfter you create a session, you can create one or more windows to load pages within the session. You can create a window by calling the `create` function on the `windows` API.\n\n<CodeBlock>\n```typescript NodeJS\nconst window = await client.windows.create(session.data.id, { url: \"https://www.airtop.ai\" });\n```\n\n```python Python\nwindow = client.windows.create(session.data.id, url=\"https://www.airtop.ai\")\n```\n</CodeBlock>\n\n### Wait Until Options\n\nBefore you can interact or prompt the page, the page must be fully loaded. You can provide a `waitUntil` parameter to the `create` function to customize exactly what you are waiting for. There are 2 options for the `waitUntil` parameter: `load` and `domcontentloaded`.\n\n- `load`: Wait until the page and all resources are fully loaded (default).\n- `domcontentloaded`: Wait until the DOM is fully loaded.\n\n<CodeBlock>\n```typescript NodeJS\nconst window = await client.windows.create(session.data.id, { url: \"https://www.airtop.ai\" waitUntil: \"domcontentloaded\"});\n```\n\n```python Python\nwindow = client.windows.create(session.data.id, url=\"https://www.airtop.ai\", wait_until=\"domcontentloaded\")\n```\n</CodeBlock>\n\n\n### Screen Resolution\n\nYou can also specify the screen resolution of the window by passing the `screenResolution` parameter to the `create` function. This is useful if you want to ensure that the browser is loaded at a specific resolution. The screen resolution should be passed as a string in the format of `widthxheight`.\n\n<CodeBlock>\n```typescript NodeJS\nconst window = await client.windows.create(session.data.id, { url: \"https://www.airtop.ai\", screenResolution: \"1920x1080\" });\n```\n\n```python Python\nwindow = client.windows.create(session.data.id, url=\"https://www.airtop.ai\", screen_resolution=\"1920x1080\")\n```\n</CodeBlock>\n\n### Loading URLs\n\nIf you've already created a window and want to load a URL in it, you can use the `loadUrl` function using the window ID.\n\n<CodeBlock>\n```typescript NodeJS\n// Create a window and load URL 1\nconst windowResponse = await client.windows.create(session.data.id, { url: \"https://www.airtop.ai\" });\n\n// Load URL 2\nawait client.windows.loadUrl(session.data.id, windowResponse.data.windowId, { url: \"https://www.google.com\" });\n```\n\n```python Python\n# Create a window and load URL 1\nwindow = client.windows.create(session.data.id, url=\"https://www.airtop.ai\")\n\n# Load URL 2\nclient.windows.load_url(session.data.id, window.data.window_id, url=\"https://www.google.com\")\n```\n</CodeBlock>\n\n### Closing Windows\n\nIf you terminate a browser session (see [Timeouts and Termination](#timeouts-and-termination) above), all windows associated with that session will be closed automatically.\n\nIf you have a window ID, you can close that specific window by calling the `close` function.\n\n<CodeBlock>\n```typescript NodeJS\nawait client.windows.close(sessionId, windowId);\n```\n\n```python Python\nclient.windows.close(session_id, window_id)\n```\n</CodeBlock>\n\nThis can be useful if you have a long running session with multiple windows and want to close windows you aren't using anymore to free up resources.\n"
      },
      "pages/guides/how-to/saving-a-profile.mdx": {
        "markdown": "---\ntitle: Profiles\nsubtitle: How to save and restore profiles with Airtop\n---\n\n## What are profiles?\n\nProfiles are saved archives of the artifacts produced by a browsing session. Most importantly, they contain the cookies and local storage of a session, which can be used to hydrate future sessions and keep the same authenticated state. You will want to use profiles when your users need to authenticate to a site via a Live View, and you want to save the authenticated state for your agents to use.\n\n## Creating a new profile\n\nWhen you create a new session, you can request that the profile generated by that session be persisted by passing the `persistProfile` parameter as `true`.\n\n<CodeBlock>\n```typescript NodeJS\nconst session = await client.sessions.create({configuration: {persistProfile: true}});\nconst profileId = session.data.profileId;\n```\n\n```python Python\nsession = client.sessions.create(configuration=SessionConfig(persist_profile=True))\nprofile_id = session.data.profileId\n```\n</CodeBlock>\n\nWhen the session returns, you will have a new profile ID that you can use to restore the profile later. Note that the profile will not be persisted until the session has been terminated.\n\n## Restoring an existing profile\n\nIf you have an existing profile ID, you can restore the profile by passing it to the `sessions.create` method.\n\n<CodeBlock>\n```typescript NodeJS\nconst session = await client.sessions.create({configuration: {baseProfileId: \"YOUR_PROFILE_ID\"}});\n```\n\n```python Python\nsession = client.sessions.create(configuration=SessionConfig(base_profile_id=\"YOUR_PROFILE_ID\"))\n```\n\n</CodeBlock>\n\nThis session will be restored from the existing profile. \n\n<Note>\n  Profiles are immutable and cannot be changed once created. When you restore a profile, you are duplicating a base profile and making modifications to it. If you want to save a modified version of a profile, you will need start with a base profile and also request that your session's profile be persisted, thereby creating a new profile.\n\n<CodeBlock> \n```typescript NodeJS\nconst session = await client.sessions.create({configuration: {persistProfile: true, baseProfileId: \"ORIGINAL_PROFILE_ID\"}});\nconst profileId = session.data.profileId;\n```\n\n```python Python\nsession = client.sessions.create(configuration=SessionConfig(persist_profile=True, base_profile_id=\"ORIGINAL_PROFILE_ID\"))\nprofile_id = session.data.profile_Id\n```\n</CodeBlock>\n\n  In this example, `ORIGINAL_PROFILE_ID` will be used to restore the profile, but the modified version of the profile will be saved with a new ID returned in `profileId`.\n</Note>\n\n## Fetching and deleting profiles\n\nYou can fetch a list of all profiles for your account using the `profiles.get` method.\n\n<CodeBlock>\n```typescript NodeJS\nconst profiles = await client.profiles.get();\n```\n\n```python Python\nprofiles = client.profiles.get()\n```\n</CodeBlock>\n\nYou can also fetch a single profile by ID or a list of IDs, which is useful if you want to check the status of a profile.\n\n<CodeBlock>\n```typescript NodeJS\nconst profile = await client.profiles.get({profileIds: \"PROFILE_ID\"});\nconst profiles = await client.profiles.get({profileIds: [\"PROFILE_ID\", \"ANOTHER_PROFILE_ID\"]});\n```\n\n```python Python\nprofile = client.profiles.get(profile_ids=[\"PROFILE_ID\"])\nprofiles = client.profiles.get(profile_ids=[\"PROFILE_ID\", \"ANOTHER_PROFILE_ID\"])\n```\n</CodeBlock>\n\nFinally, you can delete profiles by ID, if you no longer want to retain them. \n\n<CodeBlock>\n```typescript NodeJS\nawait client.profiles.delete({profileIds: \"PROFILE_ID\"});\nawait client.profiles.delete({profileIds: [\"PROFILE_ID\", \"ANOTHER_PROFILE_ID\"]});\n```\n\n```python Python\nclient.profiles.delete(profile_ids=\"PROFILE_ID\")\nclient.profiles.delete(profile_ids=[\"PROFILE_ID\", \"ANOTHER_PROFILE_ID\"])\n```\n</CodeBlock>\n\n## Security & Privacy\n\nAirtop takes the security and privacy of your data seriously. We **never** share any customer data, including profile data, with any third parties, nor do we use that data for any purpose other than to provide the service to you. All profiles are encrypted at rest using AES-256 encryption. If you have any questions or concerns about data privacy and security, please reach out to us at [support@airtop.ai](mailto:support@airtop.ai).\n"
      },
      "pages/guides/how-to/creating-a-live-view.mdx": {
        "markdown": "---\ntitle: Creating a Live View\nsubtitle: How to provide interactive access of your browser to your users\n---\n\n## What is a Live View?\n\nA live view is a way to provide real-time interactive access of your browser to your users. You can use a live view to support a range of use cases, including:\n\n- Authentication workflows\n- Human / AI training use cases\n- Human in the loop workflows\n\n## How to use a Live View\n\n<Steps toc={true}>\n\n### Step 1\n\nOnce you have a session and have loaded a url in a window, you can request a live view URL from the API. \n\n<CodeBlock>\n```typescript NodeJS\nconst windowInfo = await client.windows.getWindowInfo(session.data.id, windowId);\nconst liveViewUrl = windowInfo.data.liveViewUrl;\n```\n\n```python Python\nwindow_info = client.windows.get_window_info(session.data.id, window_id)\nlive_view_url = window_info.data.live_view_url\n```\n</CodeBlock>\n\n<Note>\nIf you're using Puppeteer, Playwright, or Selenium, you can use framework specific `getWindowInfo` variants. \n\n<CodeBlock>\n```typescript NodeJS\nconst windowInfo = await client.windows.getWindowInfoForPuppeteerPage(session, page); // page is a puppeteer.Page object\nconst windowInfo = await client.windows.getWindowInfoForPlaywrightPage(session, page); // page is a playwright.Page object\nconst windowInfo = await client.windows.getWindowInfoForSeleniumDriver(session, driver); // driver is a seleniumWebdriver.WebDriver object\n```\n\n```python Python\nwindow_info = client.windows.get_window_info_for_playwright_page(session.data, page) # page is a playwright.Page object\nwindow_info = client.windows.get_window_info_for_selenium_driver(session.data, browser) # browser is a webdriver.Remote object\n``` \n</CodeBlock>\n\n</Note>\n\n### Step 2\n\nYou may load the live view URL in your browser, or more likely, embed it in your application as an iframe.\n\n```html\n<iframe\n  allow=\"clipboard-read;clipboard-write\"\n  title=\"<YOUR_BROWSER_ID>\" // iframe elements require a unique title property\n  id=\"<YOUR_BROWSER_ID>\" // used to identify the iframe in live view message events\n  src=\"<YOUR_LIVE_VIEW_URL>\"\n/>\n```\n\nHere's an example of what an embeded live view might look like in an application:\n<Frame>\n  <img src=\"file:09cd06ed-9cc6-40c8-995d-ebf2fe4d617c\" alt=\"Live View Embed\" />\n</Frame>\n\n### Step 3\n\nYou can optionally set up the live view to include a navigation bar, which will provide a URL bar and other controls to the user.\n\n<CodeBlock>\n```typescript NodeJS\nconst windowInfo = await client.windows.getWindowInfo(session.data.id, windowId, {\n  includeNavigationBar: true,\n});\nconst liveViewUrl = windowInfo.data.liveViewUrl;\n```\n\n```python Python\nwindow_info = client.windows.get_window_info(session.data.id, window_id, include_navigation_bar=True)\nlive_view_url = window_info.data.live_view_url\n```\n</CodeBlock>\n\n<Frame>\n  <img src=\"file:b088cea7-c409-4955-9bb3-97f430bcb022\" alt=\"Live View with Navigation Bar\" />\n</Frame>\n\n### Step 4\n\nIf you would like to receive messages from the Live View, you can set up a message listener in your application to let you know when certain events occur, such as when the page url changes. Check out the section below on [Messages](#messages) for more information.\n\n</Steps>\n\n## Controlling the Live View's dimensions\n\nBy default, the live view will resize to fit the wrapping iframe or window. You can control the Live View's size by simply adjusting the iframe's dimensions and the browser contents will resize to fit. However, you may also choose to set the screen resolution and disable resizing as shown below.\n\n<CodeBlock>\n```typescript NodeJS\nconst windowInfo = await client.windows.getWindowInfo(session.data.id, windowId, {\n  includeNavigationBar: true,\n  screenResolution: \"1920x1080\", // Width x Height\n  disableResize: true,\n});\n```\n\n```python Python\nwindow_info = client.windows.get_window_info(session.data.id, window_id, include_navigation_bar=True, screen_resolution=\"1920x1080\", disable_resize=True)\n```\n</CodeBlock>\n\n## Messages\n\nThe Live View iframe and parent window can communicate with each other via the [`window.postMessage` API](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage).\nEach message has an `eventName` field that indicates the type of event, and some messages have a `payload` field containing relevant data.\n\nTo send and receive live view messages, you will first need to install the Airtop SDK for your frontend JS/TS app.\n\n```bash\nnpm install @airtop/sdk\n```\n\n### Message handling in the parent window\n\nYou can set up a message listener in your application to handle messages from the Live View as shown below.\n\n```typescript\nimport { LiveViewEventName, LiveViewMessage } from \"@airtop/sdk\";\n\nwindow.addEventListener('message', function (event) {\n  const iframe = document.getElementById('airtopLiveView');\n  if (!iframe || event.source !== iframe.contentWindow) {\n    // Message did not originate from the live view iframe\n    return;\n  }\n\n  const message: LiveViewMessage = event.data;\n\n  switch (message.eventName) {\n    case LiveViewEventName.UrlChange: {\n      handleUrlChange(message.payload); // Message payload is the new url\n      break;\n    }\n    default: {\n      return;\n    }\n  }\n});\n```\n\nWhenever a relevant event occurs in the live view, the live view iframe will send a message to the parent window, which you can handle as appropriate for your use case.\n\n### Sending messages to the live view\n\nIf you need your frontend application to send messages to the live view, you can use the `postMessage` API as shown below. Typically, if you use the built in navigation bar, you won't need to send messages to the live view, but if you have a custom navigation bar, you may need to use this mechanism to control the live view. Of course, your backend service can always control the browser and any changes will be reflected in the live view for your end users.\n\n```typescript\nimport { LiveViewEventName, LiveViewMessage } from \"@airtop/sdk\";\n\nconst sendMessageToBrowser = (eventName: string, payload?: any) => {\n  const message: LiveViewMessage = {\n    eventName,\n    ...(payload && { payload }),\n  };\n\n  const iframe = document.getElementById(browserId) as HTMLIFrameElement;\n\n  if (!iframe) {\n    return;\n  }\n\n  iframe.contentWindow.postMessage(message, 'https://live.airtop.ai');\n};\n```\n"
      },
      "pages/guides/how-to/proxy.mdx": {
        "markdown": "---\ntitle: Using a Residential Proxy\nsubtitle: Avoid bot detection with a residential proxy\n---\n\n## What is a residential proxy?\n\nSome websites have mechanisms to detect and block bot traffic coming from datacenter IPs. Residential proxies are networks of residential IP addresses that proxy requests, making them look like regular human traffic. Airtop has support for using residential proxies to avoid detection.\n\n## Proxy Options\n\nYou can use a proxy in 2 different ways:\n1. Specifying that you want to use Airtop's integrated proxy service when creating a session. With this option, you don't have to do anything else and you'll be charged for the bandwidth that your session uses.\n\n<Tip>\n  Our integrated proxy service is in alpha mode and not generally available. We plan on rolling it out to all users in Nov 2024.\n</Tip>\n\n2. You can also bring your own proxy. If you'd like to use your own proxy, Airtop doesn't charge for the data that your session uses, and you handle the billing for the proxy yourself with your provider of choice. We have a list of recommended proxy providers [below](#recommended-proxy-providers).\n\n## How to configure a custom proxy\n\nYou can specify a custom proxy in the `sessions.create` function. `proxy` can either take a string or an object with `url`, `username`, and `password` properties.\n\n<CodeBlock>\n```typescript NodeJS\nawait client.sessions.create({ \n  configuration: {\n    proxy: 'https://username:password@my-proxy-provider.com',\n  },\n});\n\nawait client.sessions.create({\n  configuration: {\n    proxy: {\n      url: 'https://my-proxy-provider.com',\n      username: 'my-proxy-username',\n      password: 'my-proxy-password',\n    },\n  },\n});\n```\n\n```python Python\nfrom airtop import SessionConfig, Proxy\n\nclient.sessions.create(configuration=SessionConfig(proxy='https://username:password@my-proxy-provider.com'))\n\nclient.sessions.create(configuration=SessionConfig(\n    proxy=Proxy(\n        url='https://my-proxy-provider.com', \n        username='my-proxy-username', \n        password='my-proxy-password'\n    )\n))\n\n``` \n</CodeBlock>\n\n### Limiting Proxy Usage to Specific Domains\n\nYou can limit proxy usage to specific domains by passing an array of `{ domainPattern, relay }` objects to the `proxy` parameter. This gives you the flexibility to only use the proxy for certain domains, or to use a different proxy for each domain.\n\nIn this example, the first object in the array will apply to all requests to all subdomains of `wikipedia.org`, while the second object will apply to all other domains.\n\n<CodeBlock>\n```typescript NodeJS\nawait client.sessions.create({\n  configuration: {\n    proxy: [\n      { domainPattern: '*\\.wikipedia\\.org', relay: 'https://username:password@my-proxy-provider.com' },\n      { domainPattern: '*', relay: 'https://username:password@my-other-proxy-provider.com' },\n    ],\n  },\n});\n```\n\n```python Python\nclient.sessions.create(configuration=SessionConfig(\n    proxy=[\n        SessionConfigV1ProxyItem(domain_pattern='*\\.wikipedia\\.org', relay='https://username:password@my-proxy-provider.com'),\n        SessionConfigV1ProxyItem(domain_pattern='*', relay='https://username:password@my-other-proxy-provider.com')\n    ]\n))\n```\n</CodeBlock>\n\nIn this example, only requests to subdomains of `wikipedia.org` will use the proxy, while all other requests will not use any proxy.\n\n<CodeBlock>\n```typescript NodeJS\nawait client.sessions.create({\n  configuration: {\n    proxy: [\n      { domainPattern: '*\\.wikipedia\\.org', relay: 'https://username:password@my-proxy-provider.com' },\n    ],\n  },\n});\n```\n\n```python Python\nclient.sessions.create(configuration=SessionConfig(\n    proxy=[\n        SessionConfigV1ProxyItem(domain_pattern='*\\.wikipedia\\.org', relay='https://username:password@my-proxy-provider.com'),\n    ]\n))\n```\n</CodeBlock>\n\n`domainPattern` is a string where `*` is a wildcard that matches any string. You can also use the `?` character to match a single character.\n\n\n## Recommended Proxy Providers\n\nDifferent proxy providers have different pros and cons. These are 3 that we've tested and have had good results with, but you should do your own due diligence to see which one will work best for your use case.\n\n1. [Oxylabs](https://oxylabs.io)\n2. [Smartproxy](https://smartproxy.com)\n3. [IPRoyal](https://iproyal.com)\n"
      },
      "pages/guides/how-to/remote-debugging.mdx": {
        "markdown": "---\ntitle: Debugging a Session\nsubtitle: How to open DevTools for a browser\n---\n\nYou can access the remote browser's DevTools via a [Live View](./creating-a-live-view). Here you'll be able to inspect a page, network requests, console logs, cookies, and much more. \n\n## Load the debugger\n\nFirst you'll need to create a session and get a [Live View URL](/guides/how-to/creating-a-live-view#step-3) with the `includeNavigationBar` parameter set to `true`. Load the url in your browser.\n\nIn the navigation bar inside the Live View, enter `debugger` in the url field and press enter. \n\n<Frame>\n  <img src=\"file:fa4be246-5ea7-423c-a765-471f8f707a73\" alt=\"Debugger field\" />\n</Frame>\n\nThis will load the DevTools page selector where you can select the window you want to inspect.\n\n<Frame>\n  <img src=\"file:d81ef6b1-2c9c-4467-aee3-55cc31eebb3f\" alt=\"Devtools page selector\" />\n</Frame>\n\nOnce you select a page, the DevTools will connect to the browser and you'll be able to inspect the page.\n\n<Frame>\n  <img src=\"file:676025f8-ee06-4151-bec5-1b21a42e6387\" alt=\"Devtools inspector\" />\n</Frame>\n"
      },
      "pages/guides/how-to/automation-frameworks/puppeteer.mdx": {
        "markdown": "---\ntitle: Integrating with Puppeteer\nsubtitle: How to use Puppeteer with Airtop\n---\n\n[Puppeteer](https://pptr.dev) is a popular automation library for Node.js that allows you to control headless browsers. Airtop provides a Puppeteer connector that allows you to use Puppeteer to automate your browser.\n\n<Note>\nPuppeteer is not supported in Python. We recommend using Playwright or Selenium instead.\n</Note>\n\n## Installation\n\nYou will need to install the `puppeteer-core` package to use Puppeteer with Airtop.\n\n<CodeGroup>\n\n```bash npm\nnpm i puppeteer-core\n```\n\n```bash yarn\nyarn add puppeteer-core\n```\n\n```bash pnpm\npnpm add puppeteer-core\n```\n</CodeGroup>\n\n## Usage\n\nOnce you have created a session with Airtop, you can use the `puppeteer-core` package to control the browser by connecting Puppeteer to the CDP endpoint provided by Airtop.\n\n```typescript\nimport puppeteer from \"puppeteer-core\";\n\nconst session = await client.sessions.create();\nconst puppeteerBrowser = await puppeteer.connect({\n  browserWSEndpoint: session.data?.cdpWsUrl,\n  headers: {\n    authorization: `Bearer YOUR_API_KEY`,\n  },\n});\n\n// Navigate to a page\nconst page = await browser.newPage();\nawait page.goto('https://airtop.ai');\n\n// Get the page content\nconst content = await page.content();\nconsole.log(content);\n```\n\nIf you're not already familiar with Puppeteer, you might want to check out their [documentation](https://pptr.dev/guides/getting-started) to learn more about the library and its capabilities.\n\n## Combining Puppeteer and Airtop Window Management\n\nYou can use Airtop's window management functions in combination with Puppeteer to automate your browser. For example, you might want to create a new window, load a URL in it, use our AI APIs, but use Puppeteer to push a few buttons on the page. \n\n\nOnce you create a window, you'll be given a window ID, which you'll use to interact with the window using Airtop's SDK. But you'll also be given a `targetId`, which you'll use to connect Puppeteer to the window.\n\n```typescript\nconst windowResponse = await client.windows.create(session.data.id, { url: \"https://www.airtop.ai\", waitUntil: \"load\" });\n\n// Get the target ID from the window response\nconst { targetId } = windowResponse.data;\n\n// Connect to the session using Puppeteer\nconst puppeteerBrowser = await puppeteer.connect({\n  browserWSEndpoint: session.data?.cdpWsUrl,\n  headers: {\n    authorization: `Bearer YOUR_API_KEY`,\n  },\n});\n\n\n// Iterate through the pages to find the one that matches the target ID\nconst pages = await puppeteerBrowser.pages();\nlet matchingPage;\nfor (const page of pages) {\n  const pageTargetId = await (page.mainFrame() as any)._id;\n  if (pageTargetId === targetId) {\n    matchingPage = page;\n    break;\n  }\n}\n\n// Once the page is found you can use Puppeteer to interact with it\nif (matchingPage) {\n  await matchingPage.click(\"button\");\n}\n```\n\n## Common Errors\n\nHere are some common errors you might encounter when using Puppeteer with Airtop when you initially connect to the CDP endpoint:\n\n| Error Code | Common Cause |\n|-------|----------|\n| **400** | Bad request. Check that you specify the essential parts of the request. For example, is there an “Authorization: Bearer API_KEY” header with a valid airtop API key |\n| **401** | Unauthorized. Check that you are using a valid API key. |\n| **404** | Not found. Check that the session ID you specified in your request is correct, and that the url path is correct |\n| **422** | Unprocessable Content. Check that your inputs are well-formed. For example, is your session ID a valid UUID? |\n| **503** | Service Unavailable. The session is valid, but it cannot be connected to. Check whether the session has timed out or that you haven't already terminated it. |\n"
      },
      "pages/guides/how-to/automation-frameworks/playwright.mdx": {
        "markdown": "---\ntitle: Integrating with Playwright\nsubtitle: How to use Playwright with Airtop\n---\n\n[Playwright](https://playwright.dev) is a powerful automation library that allows you to control headless browsers. Airtop provides a Playwright connector that allows you to use Playwright to automate your browser.\n\n## Installation\n\nYou will need to install the `playwright-core` package to use Playwright with Airtop.\n\n<CodeGroup>\n```bash NodeJS (npm)\nnpm i playwright-core\n```\n\n```bash NodeJS (yarn)\nyarn add playwright-core\n```\n\n```bash NodeJS (pnpm)\npnpm add playwright-core\n```\n\n```bash Python\npip install playwright\n```\n\n</CodeGroup>\n\n## Usage\n\nOnce you have created a session with Airtop, you can use the Playwright library to control the browser by connecting Playwright to the CDP endpoint provided by Airtop. Please note that currently, Airtop only supports using the default browser context.\n\n<CodeBlock>\n```typescript NodeJS\nimport { chromium } from 'playwright-core';\n\nconst session = await client.sessions.create();\nconst playwrightBrowser = await chromium.connectOverCDP(session.data.cdpWsUrl, {\n  headers: {\n    authorization: `Bearer YOUR_API_KEY`,\n  },\n});\n\n// Airtop does not currently support multiple contexts.\n// Please be sure to use the default context.\nconst defaultContext = playwrightBrowser.contexts()[0];\n\n// Navigate to a new page\nconst page = await defaultContext.newPage();\nawait page.goto('https://www.airtop.ai');\n\n// Get the page content\nconst content = await page.content();\nconsole.log(content);\n```\n\n```python Python\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    # Connect to the cloud browser.\n    browser = p.chromium.connect_over_cdp(session.data.cdp_ws_url, headers={\n        'authorization': f'Bearer YOUR_API_KEY'\n    })\n\n    # Airtop does not currently support multiple contexts.\n    # Please be sure to use the default context.\n    default_context = browser.contexts[0]\n    page = default_context.new_page()\n    page.goto(\"https://www.airtop.ai\")\n\n    # Get the page content\n    content = page.content()\n    print(content)\n```\n</CodeBlock>\n\nIf you're not already familiar with Playwright, you might want to check out their [documentation](https://playwright.dev/docs/intro) to learn more about the library and its capabilities.\n\n## Combining Playwright and Airtop Window Management\n\nYou can use Airtop's window management functions in combination with Playwright to automate your browser. For example, you might want to create a new window, load a URL in it, use our AI APIs, but use Playwright to push a few buttons on the page. \n\n\nOnce you create a window, you'll be given a window ID, which you'll use to interact with the window using Airtop's SDK. But you'll also be given a `targetId`, which you'll use to connect Playwright to the window.\n\n<CodeBlock>\n```typescript NodeJS\nconst windowResponse = await client.windows.create(session.data.id, { url: \"https://www.airtop.ai\", waitUntil: \"load\" });\n\n// Get the target ID from the window response\nconst { targetId } = windowResponse.data;\n\n// Connect to the session using Playwright\nconst playwrightBrowser = await chromium.connectOverCDP(session.data.cdpWsUrl, {\n  headers: {\n    authorization: `Bearer YOUR_API_KEY`,\n  }\n});\n\n// Iterate through the pages to find the one that matches the target ID\nconst pages = playwrightBrowser.contexts()[0].pages();\nlet matchingPage;\nfor (const page of pages) {\n  const cdpSession = await page.context().newCDPSession(page);\n  const { targetInfo } = await cdpSession.send('Target.getTargetInfo');\n  const pageTargetId = targetInfo.targetId;\n  if (pageTargetId === targetId) {\n    matchingPage = page;\n    break;\n  }\n}\n\n// Once the page is found you can use Playwright to interact with it\nif (matchingPage) {\n  await matchingPage.getByRole('button').click();\n}\n```\n\n```python Python\nwindow_response = client.windows.create(session.data.id, url=\"https://www.airtop.ai\", wait_until=\"load\")\n\n# Get the target ID from the window response\nwindow_target_id = window_response.data.target_id\n\nwith sync_playwright() as p:\n    # Connect to the session using Playwright.\n    browser = p.chromium.connect_over_cdp(session.data.cdp_ws_url, headers={\n        'authorization': 'Bearer YOUR_API_KEY'\n    })\n\n    pages = browser.contexts[0].pages\n    for page in pages:\n        cdp_session = page.context.new_cdp_session(page)\n        result = cdp_session.send('Target.getTargetInfo')\n        if result['targetInfo']['targetId'] == window_target_id:\n            matching_page = page\n            break\n\n    # Once the page is found you can use Playwright to interact with it\n    if matching_page:\n        matching_page.get_by_role('button').click()\n```\n</CodeBlock>\n\n## Common Errors\n\nHere are some common errors you might encounter when using Playwright with Airtop when you initially connect to the CDP endpoint:\n\n| Error Code | Common Cause                                                                                                                                                        |\n| ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **400**    | Bad request. Check that you specify the essential parts of the request. For example, is there an “Authorization: Bearer API_KEY” header with a valid airtop API key |\n| **401**    | Unauthorized. Check that you are using a valid API key.                                                                                                             |\n| **404**    | Not found. Check that the session ID you specified in your request is correct, and that the url path is correct                                                     |\n| **422**    | Unprocessable Content. Check that your inputs are well-formed. For example, is your session ID a valid UUID?                                                        |\n| **503**    | Service Unavailable. The session is valid, but it cannot be connected to. Check whether the session has timed out or that you haven't already terminated it.        |\n"
      },
      "pages/guides/how-to/automation-frameworks/selenium.mdx": {
        "markdown": "---\ntitle: Integrating with Selenium\nsubtitle: How to use Selenium with Airtop\n---\n\n[Selenium](https://www.selenium.dev/) is a powerful automation framework for web browsers. Airtop provides a Selenium connector that allows you to use Selenium to automate your browser.\n\n## Installation\n\nYou will need to install the `selenium-webdriver` package to use Selenium with Airtop.\n\n<CodeGroup>\n```bash NodeJS (npm)\nnpm i selenium-webdriver\n```\n\n```bash NodeJS (yarn)\nyarn add selenium-webdriver\n```\n\n```bash NodeJS (pnpm)\npnpm add selenium-webdriver\n```\n\n```python Python\npip install selenium\n```\n</CodeGroup>\n\n## Usage\n\nOnce you have created a session with Airtop, you can use the Selenium library to control the browser by connecting Selenium to the ChromeDriver endpoint provided by Airtop.\n\n<CodeBlock>\n\n```typescript NodeJS\nimport { Builder, until } from 'selenium-webdriver';\nimport * as https from 'https';\nimport chrome from 'selenium-webdriver/chrome';\nimport { AirtopClient } from \"@airtop/sdk\";\n\nconst client = new AirtopClient({ apiKey: \"YOUR_API_KEY\" });\nconst session = await client.sessions.create();\n\n// Generate a custom HTTP agent to handle the authorization header\nconst customHttpAgent = new https.Agent({});\n(customHttpAgent as any).addRequest = (req: any, options: any) => {\n  req.setHeader('Authorization', 'Bearer YOUR_API_KEY');\n  (https.Agent.prototype as any).addRequest.call(customHttpAgent, req, options);\n};\n\n// Create a new Chrome driver instance\nconst driver = await new Builder()\n  .forBrowser('chrome')\n  .usingHttpAgent(customHttpAgent)\n  .usingServer(session.data.chromedriverUrl)\n  .build();\n\n// Open a new tab and navigate to the target URL\nawait driver.switchTo().newWindow('tab');\nawait driver.get(\"https://www.airtop.ai\");\nawait driver.wait(until.titleContains('Airtop'), 10000);\n\n// Get the page content\nconst content = await driver.getPageSource();\nconsole.log(content);\n```\n\n```python Python\nfrom airtop import Airtop\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.remote_connection import ChromeRemoteConnection\n\ndef create_airtop_selenium_connection(airtop_api_key, airtop_session_data, *args, **kwargs):\n    class AirtopRemoteConnection(ChromeRemoteConnection):\n        @classmethod\n        def get_remote_connection_headers(cls, *args, **kwargs):\n            headers = super().get_remote_connection_headers(*args, **kwargs)\n            headers['Authorization'] = f'Bearer {airtop_api_key}'\n            return headers\n\n    return AirtopRemoteConnection(remote_server_addr=airtop_session_data.chromedriver_url, *args, **kwargs)\n\n# Initialize Airtop client\nclient = Airtop(api_key=api_key)\nsession = client.sessions.create()\n\n# Connect to the Airtop cloud browser with Selenium and navigate to a page.\ntry:\n  browser = webdriver.Remote(\n    command_executor=create_airtop_selenium_connection(api_key, session.data),\n    options=webdriver.ChromeOptions(),\n  )\n  browser.get(\"https://en.wikipedia.org/wiki/Rocket\")\n\n  # Get the window info and scrape the page content\n  window_info = client.windows.get_window_info_for_selenium_driver(\n    session.data,\n    browser,\n  )\n  print(f\"Live view url: {window_info.data.live_view_url}\")\n  scrape = client.windows.scrape_content(session_id=session.data.id, window_id=window_info.data.window_id, time_threshold_seconds=60)\n  print(scrape.data.model_response.scraped_content)\n\n  browser.quit()\nfinally:\n  # Terminate the Airtop session.\n  client.sessions.terminate(session.data.id)\n```\n\n</CodeBlock>\nIf you're not already familiar with Selenium, you might want to check out their [documentation](https://www.selenium.dev/documentation/) to learn more about the library and its capabilities.\n"
      },
      "pages/guides/how-to/ai/scraping-a-page.mdx": {
        "markdown": "---\ntitle: Smart Scraping\nsubtitle: Enhance your scraping with AI\n---\n\nYou can use the `scrapeContent` method to intelligently scrape the content of a page. This method extracts the content of the page and formats it as markdown, which is easy to read and ingest into your application. It will extract headers, formatting, tables, and more and present them in a structured manner.\n\nAdditionally, this method will correctly scrape content from Office365 and Google Workspace documents. These applications are notoriously difficult to scrape due to their use virtualized DOMs and require more sophisticated methods. Not only will Airtop correctly parse text content, but also table content from Microsoft Excel and Google Sheets and present it in CSV format.\n\n### Usage example\n\nFirst, you'll need to create a session.\n\n<CodeBlock>\n```typescript NodeJS\nconst session = await client.sessions.create();\n```\n\n```python Python\nsession = client.sessions.create()\n```\n</CodeBlock>\n\nNext, you'll need to create a window and load a URL.\n\n<CodeBlock>\n```typescript NodeJS\nconst window = await client.windows.create(session.data.id, { url: \"https://en.wikipedia.org/wiki/Margrit_Waltz\" });\n```\n\n```python Python\nwindow = client.windows.create(session.data.id, url=\"https://en.wikipedia.org/wiki/Margrit_Waltz\")\n```\n</CodeBlock>\n\nFinally, you can request a scrape of the page.\n\n<CodeBlock>\n```typescript NodeJS\nconst content = await client.windows.scrapeContent(session.data.id, window.data.windowId);\n```\n\n```python Python\ncontent = client.windows.scrape_content(session_id=session.data.id, window_id=window.data.window_id, time_threshold_seconds=60)\n```\n</CodeBlock>\n\nIf you inspect `content.data.modelResponse.scrapedContent.text`, you'll see the result of the scrape. Additionally, `content.data.modelResponse.scrapedContent.contentType` will be the MIME type of the content, which you can use to determine how to parse the content. It is typically `text/plain`, but could also be `text/csv` if the page is a Google Sheet document.\n\n### Result Comparison\n\nHere is a a quick snippet comparison first ~20 lines of a raw text scrape vs a smart scrape for this [wikipedia page](https://en.wikipedia.org/wiki/Margrit_Waltz).\n\n<Tabs>\n  <Tab title=\"Raw Scrape\">\n    ```text\nJump to content\n\nMain menu\n\n        Main menu\n        move to sidebar\n        hide\n\n\n\n\n\n                Navigation\n\n\n\n\n\n                        Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us\n\n\n\n\n\n\n\n\n\n                Contribute\n\n\n\n\n\n                        HelpLearn to editCommunity portalRecent changesUpload file\n\nSearch\n\n                                Search\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                        Donate\n\nAppearance\n\n        Appearance\n        move to sidebar\n        hide\n\nTextSmallStandardLargeThis page always uses small font sizeWidthStandardWideThe content is as wide as possible for your browser window.Color (beta)AutomaticLightDarkThis page is always in light mode.\n\n    ```\n\n  </Tab>\n  <Tab title=\"Smart Scrape\">\n    ```md\n    # Margrit Waltz\n\nFrom Wikipedia, the free encyclopedia\n\n| Margrit Waltz       |                             |\n| ------------------- | --------------------------- |\n| **Aviation career** |                             |\n| Full name           | Margrit Budert Waltz        |\n| First flight        | Cessna-150                  |\n| Famous flights      | Transatlantic ferry flights |\n| Flight license      | 1975                        |\n\n[![](https://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Daher_TBM_960_%2810-20-2022%29.jpg/220px-Daher_TBM_960_%2810-20-2022%29.jpg)](https://en.wikipedia.org/wiki/File:Daher_TBM_960_%2810-20-2022%29.jpg)\n\nA TBM 960 aircraft, similar to the one flown by Waltz on her 960th ferry flight\n\n**Margrit Waltz** ([née](https://en.wikipedia.org/wiki/Birth_name#Maiden_and_married_names 'Birth name') **Budert**; born February 10, 1957)<sup>[\\[1\\]](#cite_note-1)</sup> is a [ferry pilot](https://en.wikipedia.org/wiki/Ferry_pilot 'Ferry pilot'). As of April 2024, she had completed 960 ferry flights. The 960th flight was performed in a [Daher TBM 960](https://en.wikipedia.org/wiki/SOCATA_TBM 'SOCATA TBM') single-engine [turboprop](https://en.wikipedia.org/wiki/Turboprop 'Turboprop'), taking 15 hours and 38 minutes of flight time to deliver the plane from [Tarbes, France](https://en.wikipedia.org/wiki/Tarbes 'Tarbes') to [Pompano Beach, Florida](https://en.wikipedia.org/wiki/Pompano_Beach,_Florida 'Pompano Beach, Florida'). Stops were made in [Wick](https://en.wikipedia.org/wiki/Wick,_Caithness 'Wick, Caithness'), Scotland; [Keflavík](https://en.wikipedia.org/wiki/Keflav%C3%ADk 'Keflavík'), Iceland; and [Goose Bay](https://en.wikipedia.org/wiki/Happy_Valley-Goose_Bay 'Happy Valley-Goose Bay'), Canada.<sup>[\\[2\\]](#cite_note-2)</sup>\n\nAccording to a [Daher-Socata](https://en.wikipedia.org/wiki/SOCATA 'SOCATA') press release, Waltz is \"one of the world's most experienced ferry pilots\".<sup>[\\[3\\]](#cite_note-:0-3)</sup> She has been delivering planes for Daher for 33 years, and has delivered over 300 Daher [TBM](https://en.wikipedia.org/wiki/SOCATA_TBM 'SOCATA TBM') aircraft from their manufacturing plant in [Tarbes](https://en.wikipedia.org/wiki/Tarbes 'Tarbes'), France, to customers in North America.<sup>[\\[3\\]](#cite_note-:0-3)</sup> She has also made deliveries to Africa, Asia, and Australia.<sup>[\\[3\\]](#cite_note-:0-3)</sup>\n\n````\n\n  </Tab>\n</Tabs>\n\nHere's another example of a smart scrape for a [google doc](https://docs.google.com/document/d/1NjKaSZZCSxmUA19eGPFdsuET8fo27I_Ad2xi4xVMP8o/edit?usp=sharing).\n\n<Tabs>\n  <Tab title=\"Raw Scrape\">\n    ```text\n    <div class=\"docs-butterbar-container\"><div class=\"docs-butterbar-wrap\"><div class=\"jfk-butterBar jfk-butterBar-shown jfk-butterBar-warning\">JavaScript isn't enabled in your browser, so this file can't be opened. Enable and reload.</div></div><br></div>(function() {function setIframeSrcdoc(iframe) {var coreJsIframePolicy; var contentsString = \"\\x3clink rel\\x3d\\x22stylesheet\\x22 href\\x3d\\x22https://fonts.googleapis.com/css?family\\x3dGoogle+Sans:bold,normal\\x26lang\\x3den\\x22 nonce\\x3d\\x22L42FF1JdHJPKWYWFGRXMNA\\x22\\x3e\\x3clink rel\\x3d\\x22stylesheet\\x22 href\\x3d\\x22https://fonts.googleapis.com/css?family\\x3dRoboto:normal\\x26lang\\x3den\\x22 nonce\\x3d\\x22L42FF1JdHJPKWYWFGRXMNA\\x22\\x3e\\x3cstyle nonce\\x3d\\x22L42FF1JdHJPKWYWFGRXMNA\\x22\\x3e:root \\x7b--brand-color: #1a73e8\\x7dli:nth-child(1) h4:before \\x7bcontent: \\x22Step 1\\x22;\\x7dli:nth-child(2) h4:before \\x7bcontent: \\x22Step 2\\x22;\\x7d\\x3c/style\\x3e\\x3cstyle\\x3ebutton.text-button.brand-color\\x7bbackground-color:var(--brand-color);color:#fff;border:none\\x7dbody\\x7bfont-family:Roboto;font-size:14px;font-weight:400;margin:0;padding:24px;overflow-x:hidden\\x7dh3,h4,li,ol,p\\x7bmargin:0;padding:0\\x7dh3\\x7bfont-family:Google Sans;font-size:22px;font-weight:400;margin:0;padding:0\\x7dli\\x7bmargin-top:16px\\x7dp\\x7bmargin-top:5px\\x7dli h4:before\\x7bfont-weight:700\\x7dp#chrome-url-box\\x7bborder:1px solid #bdc1c6;-moz-box-sizing:border-box;box-sizing:border-box;border-radius:4px;padding:6px;height:36px\\x7dbutton#chrome-settings-url-copy\\x7bcolor:var(--brand-color);text-decoration:none;display:inline-block;border:none;padding:0;float:right;background:none;height:24px\\x7dp#chrome-url-box code\\x7bfont-family:inherit;display:block;float:left;height:24px;vertical-align:middle\\x7dp#buttons-row\\x7btext-align:right\\x7dp#buttons-row button\\x7bmargin-left:16px\\x7dbutton.text-button\\x7bfont-family:Google Sans;font-size:14px;text-decoration:none;display:inline-block;border-radius:4px;border:1px solid transparent;height:36px;padding-left:24px;padding-right:24px;cursor:pointer\\x7dbutton.text-button:disabled\\x7bborder-width:1px;border-color:#bdc1c6;border-style:solid;background-color:#fff;color:gray\\x7d.sr-only\\x7bposition:absolute;width:1px;height:1px;margin:-1px;clip:rect(0,0,0,0)\\x7dbutton#chrome-settings-url-copy svg path\\x7bfill:var(--brand-color)\\x7dol\\x7blist-style:none;padding-left:0\\x7d\\n/*# sourceMappingURL\\x3dcorejserror_ltr.css.map */\\x3c/style\\x3e\\x3cbody role\\x3d\\x22dialog\\x22 aria-labelledby\\x3d\\x22heading\\x22 aria-describedby\\x3d\\x22description\\x22\\x3e\\x3ch3 id\\x3d\\x22heading\\x22\\x3eLoading issue\\x3c/h3\\x3e\\x3cp id\\x3d\\x22description\\x22\\x3eTroubleshoot this issue by clearing application resources\\x3c/p\\x3e\\x3col\\x3e\\x3cli\\x3e\\x3ch4 class\\x3d\\x22step-header\\x22\\x3e\\x3c/h4\\x3e\\x3cp\\x3eFollow \\x3ca href\\x3d\\x22https://support.google.com/accounts/answer/32050\\x22 target\\x3d\\x22_blank\\x22\\x3ethese instructions\\x3c/a\\x3e to clear your cache and cookies\\x3c/p\\x3e\\x3c/li\\x3e\\x3cli\\x3e\\x3ch4 class\\x3d\\x22step-header\\x22\\x3e\\x3c/h4\\x3e\\x3cp\\x3eThen, reload this page\\x3c/p\\x3e\\x3c/li\\x3e\\x3c/ol\\x3e\\x3cp id\\x3d\\x22buttons-row\\x22\\x3e\\x3cbutton class\\x3d\\x22text-button\\x22 id\\x3d\\x22send-feedback\\x22 disabled\\x3eSend feedback\\x3c/button\\x3e\\x3cbutton class\\x3d\\x22text-button brand-color\\x22 id\\x3d\\x22reload-now\\x22\\x3eReload now\\x3c/button\\x3e\\x3c/p\\x3e\\x3cscript nonce\\x3d\\x22uBfdd5ElM-eQ4cCUZ50mBw\\x22\\x3efunction _F_toggles_initialize(a)\\x7b(typeof globalThis!\\x3d\\x3d\\x22undefined\\x22?globalThis:typeof self!\\x3d\\x3d\\x22undefined\\x22?self:this)._F_toggles\\x3da||\\x5b\\x5d\\x7d_F_toggles_initialize(\\x5b\\x5d);\\nvar d\\x3ddocument.getElementById(\\x22chrome-settings-url-copy\\x22);function e()\\x7bvar a\\x3ddocument.getElementById(\\x22chrome-settings-url\\x22),b\\x3dnew Range;b.setStart(a,0);b.setEnd(a,1);a\\x3dwindow.getSelection();a.empty();a.addRange(b);document.execCommand(\\x22copy\\x22);setTimeout(function()\\x7bvar c\\x3ddocument.createElement(\\x22p\\x22);c.setAttribute(\\x22role\\x22,\\x22alert\\x22);c.style.position\\x3d\\x22absolute\\x22;c.style.top\\x3d\\x22-10000px\\x22;c.appendChild(document.createTextNode(\\x22Link copied\\x22));document.body.appendChild(c)\\x7d,500);d\\x26\\x26d.focus()\\x7dd\\x26\\x26(d.onclick\\x3de);\\ndocument.getElementById(\\x22reload-now\\x22).onclick\\x3dfunction()\\x7bwindow.parent.location.reload()\\x7d;document.addEventListener(\\x22keydown\\x22,function(a)\\x7bvar b\\x3ddocument.querySelectorAll(\\x22a\\x5bhref\\x5d:not(\\x5bdisabled\\x5d), button:not(\\x5bdisabled\\x5d)\\x22),c\\x3db\\x5b0\\x5d;b\\x3db\\x5bb.length-1\\x5d;if(a.key\\x3d\\x3d\\x3d\\x22Tab\\x22||a.keyCode\\x3d\\x3d\\x3d9)a.shiftKey\\x26\\x26document.activeElement\\x3d\\x3dc?(b.focus(),a.preventDefault()):a.shiftKey||document.activeElement!\\x3db||(c.focus(),a.preventDefault())\\x7d);\\nwindow.onload\\x3dfunction()\\x7bvar a\\x3dwindow.parent.document.getElementById(\\x22core-js-error-dialog\\x22);if(a)\\x7bvar b\\x3ddocument.body.scrollHeight;a.style.height\\x3db+\\x22px\\x22;a.style\\x5b\\x22margin-top\\x22\\x5d\\x3d-Math.round(b/2)+\\x22px\\x22\\x7d\\x7d;\\n// Google Inc.\\n\\n//# sourceMappingURL\\x3dcorejserror_corejserror_chunk.sourcemap\\n\\x3c/script\\x3e\\x3cscript src\\x3d\\x22/static/document/client/js/898020166-corejserrorfeedback_corejserrorfeedback_chunk.js\\x22 nonce\\x3d\\x22uBfdd5ElM-eQ4cCUZ50mBw\\x22\\x3e\\x3c/script\\x3e\\x3c/body\\x3e\"; if (self.trustedTypes && self.trustedTypes.createPolicy) {coreJsIframePolicy = trustedTypes.createPolicy( 'docsCoreJsIframePolicy',{createHTML: function(ignored) {return contentsString;}});}var contentsTt = coreJsIframePolicy ? coreJsIframePolicy.createHTML('ignored') : contentsString; if ('srcdoc' in iframe) {iframe.srcdoc = contentsTt; return;}iframe.contentWindow.document.open(); iframe.contentWindow.document.write(contentsTt); iframe.contentWindow.document.close(); if ( true  && window.navigator && window.navigator.sendBeacon) {window.navigator.sendBeacon( '/document/jserror?jobset\\x3dprod\\x26error\\x3dJS+binary+load+failure&context.coreJsNoSrcdoc=true&context.serviceWorkerControlled=' + !!(navigator.serviceWorker && navigator.serviceWorker.controller) + '\\x26context.actionName\\x3dEdit');}}function enterCoreJsErrorDialog() {if (!setIframeSrcdoc) {return;}var overlay = document.getElementById('core-js-error-dialog-overlay');var overlayPolicy; if (self.trustedTypes && self.trustedTypes.createPolicy) {overlayPolicy = trustedTypes.createPolicy( 'docsCoreJsOverlayPolicy',{createHTML: function(ignored) {return \"\\x3cdiv style\\x3d\\x22position: absolute; left: 0; top: 0; width: 100%; height: 100%; background: rgb(0, 0, 0, 0.6)\\x22\\x3e\\x3c/div\\x3e\\x3ciframe id\\x3d\\x22core-js-error-dialog\\x22 style\\x3d\\x22position: absolute; left: 50%; top: 50%; width: 512px; height: 430px; margin-left: -256px; margin-top: -215px; background: white; border: none; border-radius: 8px\\x22\\x3e\\x3c/iframe\\x3e\";}});}var overlayTt = overlayPolicy ? overlayPolicy.createHTML('ignored') : \"\\x3cdiv style\\x3d\\x22position: absolute; left: 0; top: 0; width: 100%; height: 100%; background: rgb(0, 0, 0, 0.6)\\x22\\x3e\\x3c/div\\x3e\\x3ciframe id\\x3d\\x22core-js-error-dialog\\x22 style\\x3d\\x22position: absolute; left: 50%; top: 50%; width: 512px; height: 430px; margin-left: -256px; margin-top: -215px; background: white; border: none; border-radius: 8px\\x22\\x3e\\x3c/iframe\\x3e\"; overlay.innerHTML = overlayTt; var iframe = document.getElementById('core-js-error-dialog'); overlay.onmousedown = function(e) {iframe.focus(); e.preventDefault();}; setIframeSrcdoc(iframe); setIframeSrcdoc = null; overlay.style.display = 'block'; iframe.focus();}window.enterCoreJsErrorDialog = enterCoreJsErrorDialog;})();Explore the Random Cats        Request edit access Sign inDOCS_timing['sdb']=new Date().getTime();FileEditViewToolsHelpAccessibilityDebugDOCS_timing['edb']=new Date().getTime();DOCS_timing['che'] = new Date().getTime();DOCS_timing['chv'] = new Date().getTime();KX_resize = function() {if (KX_kixApp) {KX_kixApp.resize();}}; Gemini created these notes. They can contain errors so should be double-checked. How Gemini takes notes  OutlineOutlineDocument tabs    Headings you add to the document will appear here. Changes bythis.gbar_=this.gbar_||{};(function(_){var window=this;\ntry{\n_.Pd=function(a,b,c){if(!a.j)if(c instanceof Array)for(var d of c)_.Pd(a,b,d);else{d=(0,_.z)(a.C,a,b);const e=a.v+c;a.v++;b.dataset.eqid=e;a.B[e]=d;b&&b.addEventListener?b.addEventListener(c,d,!1):b&&b.attachEvent?b.attachEvent(\"on\"+c,d):a.o.log(Error(\"B`\"+b))}};\n}catch(e){_._DumpException(e)}\ntry{\nvar Qd=document.querySelector(\".gb_I .gb_A\"),Rd=document.querySelector(\"#gb.gb_Sc\");Qd&&!Rd&&_.Pd(_.zd,Qd,\"click\");\n}catch(e){_._DumpException(e)}\ntry{\n    ```\n\nThe entire document is too large to fit in the snippet, but you get the point. You'll actually not find any of the content in the raw scrape since the content is never present in the DOM.\n\n  </Tab>\n  <Tab title=\"Smart Scrape\">\n    ```md\n    Challenge: Explore the Random Growth Mindset Cats\n\nI started making growth mindset cats a couple of years ago, and now there are hundreds of them. For this assignment, you will browse the cats at random and pick out two or three favorites, writing up a blog post about them.\n\nRandom Cats:\n\n- You can see cats at random at the Growth Mindset blog; each time you reload the page, there will be a random cat.\n- When you see a cat that you like, click on the \"more info\" link to go to the blog post with more information.\n- To grab a copy of the image to use in your blog post, right-mouse click on the image and save it to your computer (or drag-and-drop), and make sure you link to that blog post in the Image Information.\n- Hint: As you find a cat you want to use, you might leave that open in its own tab, and then open another tab to look for the next cat; that way, you will have the cats you need each in their own tab for when you write up your blog post.\n\nYour blog post. Find two or three cats that you like, and include those images in a blog post. For each image, explain why you picked this cat in particular. Don't forget to link to the specific blog post for that cat as part of the Image Information.\n\nwill.jpg\n\n(Source: Curiosity: The will to explore.)\n````\n\nWith Smart Scraping, you actually get the content from the page, without any of the noise.\n\n  </Tab>\n</Tabs>\n"
      },
      "pages/guides/how-to/ai/scrape-and-prompt.mdx": {
        "markdown": "---\ntitle: Prompting a Page\nsubtitle: Interact with a page using LLMs\n---\n\nYou can use the `promptContent` method to interact with a page using LLMs. You might want to use this method to scrape a page for specific information, or even ask a more general question about the page.\n\nExamples:\n\n- On a company's website, ask if they have a certain job opening.\n- On a foreign news website, ask for a translation.\n- On a product page, ask for list of product, but with the price in different currencies.\n- etc.\n\n## Usage example\n\nFirst, you'll need to create a session.\n\n<CodeBlock>\n```typescript NodeJS\nconst session = await client.sessions.create();\n```\n\n```python Python\nsession = client.sessions.create()\n```\n</CodeBlock>\n\nNext, you'll need to create a window and load a URL.\n\n<CodeBlock>\n```typescript NodeJS\nconst window = await client.windows.create(session.data.id, { url: \"https://news.ycombinator.com/news\" });\n```\n\n```python Python\nwindow = client.windows.create(session.data.id, url=\"https://news.ycombinator.com/news\")\n```\n</CodeBlock>\n\nFinally, you can prompt the page.\n\n<CodeBlock>\n```typescript NodeJS\nconst result = await client.windows.promptContent(session.data.id, window.data.windowId, {\n  prompt:\n    'Give me a list of all the titles of the articles on this page along with the number of comments each article has.',\n});\nconst content = result.data.modelResponse;\n```\n\n```python Python\nresult = client.windows.prompt_content(session.data.id, window.data.window_id, prompt='Give me a list of all the titles of the articles on this page along with the number of comments each article has.')\ncontent = result.data.model_response\n```\n</CodeBlock>\n\nExample output:\n\n```text\n1. California bans legacy admissions at private universities - 71 comments\n2. Bop Spotter - 209 comments\n3. Apple No Longer in Talks to Invest in ChatGPT Maker OpenAI - 7 comments\n4. Paramotorists soar across remote Peru desert to collect threatened plants - 13 comments\n5. Launch HN: Inkeep (YC W23) – Copilot for Support (think Cursor for help desks) - 39 comments\n6. Phrase matching in Marginalia Search - 16 comments\n7. Engineers investigate another malfunction on SpaceX's Falcon 9 rocket - 11 comments\n8. Gavin Newsom vetoes SB 1047 - 414 comments\n9. EasyPost (YC S13) Is Hiring - No comments listed\n10. The Physics of Colliding Balls - 13 comments\n11. Show HN: A macOS app to prevent sound quality degradation on AirPods - 78 comments\n12. Product Hunt isn't dying, it's becoming gentrified - 16 comments\n13. Two new books on John Calhoun and his rodent experiments - 41 comments\n14. GnuCash 5.9 Released - 6 comments\n15. The fight to save Chile's white strawberry - 10 comments\n16. Keep Track: 3D Satellite Toolkit - 29 comments\n17. Normans and Slavery: Breaking the Bonds - 51 comments\n18. Screenpipe: 24/7 local AI screen and mic recording - 86 comments\n19. Peer Calls: WebRTC peer to peer calls for everyone - 11 comments\n20. How we built ngrok's data platform - 31 comments\n21. The best browser bookmarking system is files - 66 comments\n22. No such thing as exactly-once delivery - 2 comments\n23. Tips for Building and Deploying Robots - 15 comments\n24. Map with public fruit trees - 130 comments\n25. NotebookLM's automatically generated podcasts are surprisingly effective - 389 comments\n26. Generate pip requirements.txt file based on imports of any project - 55 comments\n27. New research on anesthesia and microtubules gives new clues about consciousness - 139 comments\n28. Liquid Foundation Models: Our First Series of Generative AI Models - 125 comments\n29. Sitina1 Open-Source Camera - 116 comments\n30. Do AI companies work? - 170 comments\n```\n\n## Paginated Results\n\nIf you're scraping a paginated page, Airtop will automatically handle pagination for you. You just need to pass the `followPaginationLinks: true` option and specify the number of pages or results you want to scrape.\n\n<CodeBlock>\n```typescript NodeJS\nconst result = await client.windows.promptContent(session.data.id, windowInfo.data.windowId, {\n  prompt:\n    'You are on the Hacker News website. Please scan articles 1-100, referencing the article numbers on the left side of the page, and provide a list of the articles that have over 100 comments. You may need to page through the articles using the pagination controls at the bottom of the page to get to article number 100. You should ignore articles beyond number 100, but be sure to scan the final partial list of articles up to number 100 when you reach it. Return the article number, title, number of comments, and the user who posted the article.',\n  followPaginationLinks: true,\n});\n```\n\n```python Python\nprompt = \"\"\"\nYou are on the Hacker News website. Please scan articles 1-100, referencing the article numbers on the left side of the page, and provide a list of the articles that have over 100 comments. You may need to page through the articles using the pagination controls at the bottom of the page to get to article number 100. You should ignore articles beyond number 100, but be sure to scan the final partial list of articles up to number 100 when you reach it. Return the article number, title, number of comments, and the user who posted the article.\n\"\"\"\nresult = client.windows.prompt_content(session.data.id, window_info.data.window_id, prompt=prompt, follow_pagination_links=True)\n```\n\n</CodeBlock>\n\nExample output:\n\n```txt\n1. **Article Number:** 2\n   **Title:** Too much efficiency makes everything worse (2022)\n   **Comments:** 204\n   **User:** feyman_r\n\n2. **Article Number:** 8\n   **Title:** SpaceX launches mission for 2 NASA astronauts who are stuck on the ISS\n   **Comments:** 250\n   **User:** JumpCrisscross\n\n3. **Article Number:** 23\n   **Title:** The perils of transition to 64-bit time_t\n   **Comments:** 177\n   **User:** todsacerdoti\n\n4. **Article Number:** 36\n   **Title:** Floating megabomb heaves to near the English coast\n   **Comments:** 176\n   **User:** itronitron\n\n5. **Article Number:** 51\n   **Title:** Legalizing sports gambling was a mistake\n   **Comments:** 1109\n   **User:** jimbob45\n\n6. **Article Number:** 52\n   **Title:** Automatic Content Recognition Tracking in Smart TVs\n   **Comments:** 133\n   **User:** some_furry\n\n7. **Article Number:** 53\n   **Title:** Amusing Ourselves to Death (2014)\n   **Comments:** 293\n   **User:** yamrzou\n\n8. **Article Number:** 68\n   **Title:** Everything you need to know about Python 3.13 – JIT and GIL went up the hill\n   **Comments:** 190\n   **User:** chmaynard\n\n9. **Article Number:** 84\n   **Title:** Notion's mid-life crisis\n   **Comments:** 130\n   **User:** krishna2\n\n10. **Article Number:** 91\n    **Title:** I Am Tired of AI\n    **Comments:** 1086\n    **User:** Liriel\n\n11. **Article Number:** 94\n    **Title:** Hacking Kia: Remotely controlling cars with just a license plate\n    **Comments:** 355\n    **User:** speckx\n\n12. **Article Number:** 95\n    **Title:** If WordPress is to survive, Matt Mullenweg must be removed\n    **Comments:** 224\n    **User:** graeme\n\n13. **Article Number:** 98\n    **Title:** CNN and USA Today have fake websites, I believe Forbes Marketplace runs them\n    **Comments:** 259\n    **User:** greg_V\n```\n\n## Prompting Tips\n\nLike any LLM based tool, the quality of the results depends heavily on the quality of the prompt. Here are some tips to get the best results:\n\n### Basic Prompting Tips\n\n1. Provide the AI with some context by telling it a little bit about the web page or content it's looking at.\n\n2. Be clear about your goals and what you want the AI to do.\n\n3. If, to complete the request, more content than is originally visible must be loaded (i.e. paginated results or infinite scrolling or \"Load More\" controls), be sure to include a clear limit on when the AI should stop. It can also be helpful to be explicit about how more content should be loaded.\n\n4. Provide an example or two of how you would like the AI to respond, or include a JSON schema if you want a structured response that is more suitable for automated processing.\n\n### Tips for using JSON Schemas:\n\n1. Take advantage of the `description` fields to give the AI additional clarity and instructions about how to populate the property, and consider even adding examples (especially if you would prefer certain formatting).\n\n2. Don't mark a property as required unless you're certain it will always be possible to provide. If the AI feels compelled to provide data that doesn't exist, it's very likely to hallucinate it.\n\n3. Be sure to include a valid way for the AI to report back failure if it cannot fulfill the objective. If your schema does not allow the AI to report failure and something happens, it may feel compelled to return a natural language response instead, or even hallucinate results in order to honor the schema and your request to use it for responses.\n\n4. You can sometimes use schema constraints to guide the AI response. For example, if you find that it includes an empty string or array for an optional property when unavailable, and you'd rather see that property omitted instead, you can add a constraint of minLength: 1 (or minItems: 1 for an array). Of course, make sure those properties are not marked as required.\n\n5. Most major LLMs are quite good at generating JSON schemas from examples (or even natural language descriptions) if you'd rather not write them by hand.\n\n## Example Prompt:\n\n````txt\nYou are on the Hacker News website. Please scan the first 100 articles and provide a list of any articles that seem to be about nuclear reactors. You may need to page through the articles using the pagination controls at the bottom of the page to get through the 100 articles. Report your results using the JSON schema below. If you cannot fulfill the request, use the \"error\" field in the schema to report the problem.\n\nResponse schema:\n```json\n  {\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"results\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"title\": {\n              \"type\": \"string\",\n              \"description\": \"Article title\"\n            },\n            \"score\": {\n              \"type\": \"number\",\n              \"description\": \"Number of points the article has received\"\n            },\n            \"author\": {\n              \"type\": \"string\",\n              \"description\": \"Author of the post\"\n            }\n          },\n          \"required\": [\"title\", \"score\", \"author\"],\n          \"additionalProperties\": false\n        }\n      },\n      \"error\": {\n        \"type\": \"string\",\n        \"description\": \"Error message in case of failure\",\n        \"minLength\": 1\n      },\n    },\n  }\n````\n\n```\n\n```\n"
      },
      "pages/guides/how-to/ai/ai-costs.mdx": {
        "markdown": "---\ntitle: AI Costs\nsubtitle: Learn more about how AI costs are calculated and how to control them\n---\n\nIf you are using any of the AI APIs, you may be charged for the tokens used. The cost is calculated based on the number of input and output tokens used, as well as the model used.\n\nAirtop uses a credit system to keep track of your usage since we often use multiple models and different pricing tiers for each model. We do not charge any markup on LLM costs.\n\n## Keeping track of costs\n\nEvery AI API call returns a `meta.usage` object containing the number of `credits` used by this call. You can use this number to monitor your usage on a per-request basis.\n\nYou can also see your consumed AI credits for the month on the [billing page](https://portal.airtop.ai/settings/organization/billing) of the developer portal.\n\n## Controlling costs\n\nIn addition to monitoring, you can also specify a max cost for every AI API call. There are 2 fields that can be helpful for this:\n\n1. `costThresholdCredits`: A credit threshold that, once exceeded, will cause the operation to be cancelled. Note that this is not a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. A request may slightly exceed the threshold if it's in the middle of an LLM call that is already in progress, but any subsequent calls will not be permitted to continue.\n\n2. `timeThresholdSeconds`: A time threshold in seconds that, once exceeded, will cause the operation to be cancelled. Note that this is not a hard limit, but a threshold that is checked periodically during the course of fulfilling the request. If you would like to prevent a single request from running for more than a certain amount of time rather than a cost threshold, you can use this field.\n"
      },
      "pages/guides/misc/support.mdx": {
        "markdown": "---\ntitle: Support\nsubtitle: How to get help with Airtop\n---\n\nWe're happy to help with any issues you're having with Airtop and eager to hear your feedback. If you run into any issues, please reach out to us at [support@airtop.ai](mailto:support@airtop.ai).\n\nIf you run into any bugs, please file an issue on [GitHub](https://github.com/airtop-ai/airtop-node-sdk/issues).\n"
      },
      "pages/guides/misc/faq.mdx": {
        "markdown": "---\ntitle: FAQ\nsubtitle: Answers to frequently asked questions\n---\n\n\n### What LLMs do you use?\n\nAirtop uses a variety of LLMs from OpenAI, Anthropic, and custom fine-tuned models. Airtop may dynamically switch between different models based on the workload and model capabilities. Additionally, Airtop may failover to a different model if a model is experiencing high latency or downtime. Airtop additionally uses vision capable models to provide visual data to aid in the identification of content, making prompting against sites more accurate.\n\n### How does the AI credit system work?\n\nAirtop uses a credit system to track usage of AI APIs. If you use an AI API to [summarize content](/guides/how-to/ai/summarizing-a-page), or [prompt a page](/guides/how-to/ai/prompting-a-page), Airtop will charge your account for the cost of the API call in the form of credits. \n\nCredits are calculated from input and output tokens of the LLMs, which is also how OpenAI and Anthropic charge for their APIs. Airtop does not add any markup on the cost of the LLMs.\n\n#### Why doesn't Airtop charge for token usage directly?\n\nBecause Airtop uses a variety of LLMs, sometimes within the same API call, Airtop cannot charge for token usage directly since different token consumption may have a different cost. Instead, Airtop assigns a credit value to each LLM's token use and presents a single unified cost to developers. We are constantly working to lower the cost of LLM usage and pass on savings to developers.\n\n### Will my data be shared with third parties for AI training?\n\nNo. In the cases where Airtop uses an LLM hosted by a third party, Airtop always does so under contracts that prohibit the third party from using Airtop's customers' data for their own model training.\n\n### Are you SOC 2 compliant?\n\nYes, Airtop is SOC 2 compliant. If you need access to our SOC 2 report, please reach out to us at [support@airtop.ai](mailto:support@airtop.ai).\n\n### Are there any restrictions on what I can do with Airtop?\n\nAirtop is designed to be used for good things. We do not allow any use of Airtop to engage in any activity that violates laws or the terms of service of the websites you are visiting. Please be aware that the excessive or abusive use of bots, or automation tools on some websites can lead to penalties, including temporary or even permanent restrictions on your account. We recommend you read and adhere to the specific terms of the websites you are visiting and using to avoid any disruptions or issues. We do not assume any responsibility for the consequences of abuse.\n"
      },
      "pages/recipes/summarize.mdx": {
        "markdown": "## Overview\n\nThis recipe demonstrates how to use Airtop to automate the summarization of a webpage. By leveraging Airtop's cloud browser capabilities, we can extract a concise summary from any webpage using a simple API.\n\nThe instructions below will walk through creating a script that connects to Airtop, opens a webpage in a cloud browser session, and retrieves a summary of its content. The full source code is available on [GitHub](https://github.com/airtop-ai/recipe-summarize) for your reference.\n\n## Prerequisites\n\nTo get started, ensure you have:\n\n- Node.js installed on your system.\n- An Airtop API key. You can [get one for free](https://portal.airtop.ai/).\n\n## Getting Started\n\n1. **Clone the repository**\n\n   Start by cloning the source code from [GitHub](https://github.com/airtop-ai/recipe-summarize.git):\n\n   ```bash\n   git clone https://github.com/airtop-ai/recipe-summarize.git\n   cd recipe-summarize\n   ```\n\n2. **Install dependencies**\n\n   Run the following command to install the necessary dependencies, including Puppeteer and the Airtop SDK:\n\n   ```bash\n   npm install\n   ```\n\n3. **Configure your environment**\n\n   You will need to provide your Airtop API key in a `.env` file. First, copy the provided example `.env` file:\n\n   ```bash\n   cp .env.example .env\n   ```\n\n   Now edit the `.env` file to add your Airtop API key:\n\n   ```\n   AIRTOP_API_KEY=<YOUR_API_KEY>\n   ```\n\n## Script Walkthrough\n\nThe script in `index.ts` performs the following steps:\n\n1. **Initialize the Airtop Client**\n\n   First, we initialize the `AirtopClient` using your provided API key. This client will be used to create browser sessions and interact with the page content.\n\n   ```typescript\n   const client = new AirtopClient({\n     apiKey: AIRTOP_API_KEY,\n   });\n   ```\n\n2. **Create a Browser Session**\n\n   Creating a browser session will allow us to connect to and control a cloud-based browser.\n\n   ```typescript\n   const createSessionResponse = await client.sessions.create({\n     configuration: {\n       timeoutMinutes: 5, // Customize the session timeout as needed\n     },\n   });\n   ```\n\n3. **Connect to the Browser**\n\n   Note that we use Puppeteer in this example to connect to a browser, but you can use other browser automation tools such as Playwright or Selenium if you prefer.\n\n   ```typescript\n   const browser: Browser = await puppeteer.connect({\n     browserWSEndpoint: createSessionResponse.data.cdpWsUrl,\n     headers: {\n       Authorization: `Bearer ${AIRTOP_API_KEY}`,\n     },\n   });\n   ```\n\n4. **Navigate to the Target URL**\n\n   The script opens a new page and navigates to the target URL. In this example we use a a Wikipedia page, however you can replace this with the URL of your choice.\n\n   ```typescript\n   const page: Page = await browser.newPage(); // Create a new page\n   await page.goto(TARGET_URL); // TARGET_URL is defined at the top of the script\n   ```\n\n5. **Summarize the Content**\n\n   Leverage Airtop to summarize the webpage's content using natural language. We utilize the `promptContent` API to specify how the summary should be structured.\n\n   Here we instruct Airtop to summarize the content of the page in 1 paragraph, however you can customize this prompt to suit your needs (i.e. asking it to provide bullet points).\n\n   ```typescript\n   const windowInfo = await client.windows.getWindowInfoForPuppeteerPage(session, page);\n   const contentSummary = await client.windows.promptContent(session.id, windowInfo.data.windowId, {\n     prompt: 'Summarize the content of the page in 1 paragraph',\n   });\n\n   // Print the summary to the console or otherwise use it as desired\n   console.log(contentSummary.data.modelResponse);\n   ```\n\n6. **Clean Up**\n\n   Finally, the script closes the browser and terminates the session.\n\n   ```typescript\n   await browser.close();\n   await client.sessions.terminate(session.id);\n   ```\n\n## Running the Script\n\nTo run the script, execute the following command in your terminal:\n\n```bash\nnpm run start\n```\n\n## Summary\n\nAirtop makes extracting key information from web pages as simple as writing a few lines of code. By combining the power of cloud browser automation with AI summarization, you can efficiently gather and understand content from any website on the internet.\n"
      },
      "pages/recipes/prompt-content.mdx": {
        "markdown": "## Overview\n\nThis recipe demonstrates how to use Airtop to extract data from a website using a prompt. By leveraging Airtop's live view capabilities, you can have your users log into any of their accounts inside a browser session to provide your agents access to content that requires authentication. Airtop profiles can be used to persist a user's login state across sessions and avoid the need to have them log in again.\n\nThe instructions below will walk through creating a script that connects to Airtop, provides a live view for a user to log into their Glassdoor account if necessary, and retrieves a list of relevant job postings from the Glassdoor website. Similar logic can be applied to any website that requires authentication.\n\nThe full source code is available on [GitHub](https://github.com/airtop-ai/recipe-prompt-content) for your reference.\n\n## Prerequisites\n\nTo get started, ensure you have:\n\n- Node.js installed on your system.\n- An Airtop API key. You can [get one for free](https://portal.airtop.ai/).\n\n## Getting Started\n\n1. **Clone the repository**\n\n   Start by cloning the source code from [GitHub](https://github.com/airtop-ai/recipe-prompt-content):\n\n   ```bash\n   git clone https://github.com/airtop-ai/recipe-prompt-content.git\n   cd recipe-prompt-content\n   ```\n\n2. **Install dependencies**\n\n   Run the following command to install the necessary dependencies, including Puppeteer and the Airtop SDK:\n\n   ```bash\n   npm install\n   ```\n\n3. **Configure your environment**\n\n   You will need to provide your Airtop API key in a `.env` file. First, copy the provided example `.env` file:\n\n   ```bash\n   cp .env.example .env\n   ```\n\n   Now edit the `.env` file to add your Airtop API key:\n\n   ```\n   AIRTOP_API_KEY=<YOUR_API_KEY>\n   ```\n\n## Script Walkthrough\n\nThe script in `index.ts` performs the following steps:\n\n1. **Initialize the Airtop Client**\n\n   First, we initialize the `AirtopClient` using your provided API key. This client will be used to create browser sessions and interact with the page content.\n\n   ```typescript\n   const client = new AirtopClient({\n     apiKey: AIRTOP_API_KEY,\n   });\n   ```\n\n2. **Create a Browser Session**\n\n   Creating a browser session will allow us to connect to and control a cloud-based browser. The API accepts an optional `baseProfileId` parameter, which can be used to reuse a user's previously provided credentials. If no `baseProfileId` is given, the user will be prompted to log in at the provided live view URL (see Step 4).\n\n   ```typescript\n   const profileId: string | undefined = await new Promise<string | undefined>((resolve) => {\n     process.stdout.write('Enter a profileId (or press Enter to skip): ');\n     process.stdin.once('data', (input) => {\n       const trimmedInput = input.toString().trim();\n       resolve(trimmedInput || undefined);\n     });\n   });\n\n   const createSessionResponse = await client.sessions.create({\n     configuration: {\n       timeoutMinutes: 10, // Customize the session timeout as needed\n       persistProfile: !profileId, // Persist the user's profile across sessions (if we do not have an existing profileId)\n       baseProfileId: profileId, // Use the provided profileId if one is provided\n     },\n   });\n   ```\n\n3. **Connect to the Browser**\n\n   Note that we use Puppeteer in this example to connect to a browser, but you can use other browser automation tools such as Playwright or Selenium if you prefer.\n\n   ```typescript\n   const browser: Browser = await puppeteer.connect({\n     browserWSEndpoint: createSessionResponse.data.cdpWsUrl,\n     headers: {\n       Authorization: `Bearer ${AIRTOP_API_KEY}`,\n     },\n   });\n   ```\n\n4. **Navigate to the Login Page**\n\n   Next, the script navigates to the Glassdoor's user profile page. If the user is not logged in, it waits for the user to log in at the provided live view URL. The user is also provided with a `profileId` that can be used to avoid logging in again on subsequent runs.\n\n   If the user is already logged in, they are navigated to the target URL to proceed with data extraction.\n\n   ```typescript\n   const page: Page = await browser.newPage(); // Create a new page\n   await page.goto(LOGIN_URL);\n   const windowInfo = await client.windows.getWindowInfoForPuppeteerPage(session, page, {\n     // By default, Airtop resizes a live view to match the user's local browser window size.\n     // This might affect Airtop's data extraction mechanism, so we disable that behavior here.\n     disableResize: true,\n   });\n\n   // Prompt the page content to determine if the user is logged in\n   const isLoggedInPromptResponse = await client.windows.promptContent(session.id, windowInfo.data.windowId, {\n     prompt: IS_LOGGED_IN_PROMPT,\n   });\n   const parsedResponse = JSON.parse(isLoggedInPromptResponse.data.modelResponse);\n   if (parsedResponse.error) {\n     throw new Error(parsedResponse.error);\n   }\n   const isUserLoggedIn = parsedResponse.isLoggedIn;\n\n   if (!isUserLoggedIn) {\n     console.log(\n       'Log into your Glassdoor account on the live view of your browser window.  Press `Enter` once you have logged in.',\n       windowInfo.data.liveViewUrl,\n     );\n     await new Promise<void>((resolve) => process.stdin.once('data', () => resolve())); // Wait for the user to log in\n     console.log(\n       'To avoid logging in again, use the following profileId the next time you run this script: ',\n       session.profileId,\n     );\n   } else {\n     console.log(\n       'User is already logged in. View progress at the following live view URL:',\n       windowInfo.data.liveViewUrl,\n     );\n   }\n   ```\n\n5. **Navigate to the Target URL**\n\n   After logging in, the script navigates to the target URL, which in this case is a Glassdoor search page for software engineering jobs in San Francisco.\n\n   ```typescript\n   await page.goto(TARGET_URL);\n   ```\n\n6. **Prompt the AI to Extract Data**\n\n   We construct a prompt that asks the AI to extract data about job postings that are related to AI companies and provide a JSON schema for the output.\n   Note that an optimal prompt will begin by providing context about the webpage and what the model is viewing. It will also include information in the\n   description fields of a provided JSON schema to guide the model's output.\n\n   ```typescript\n   const PROMPT = `This browser is open to a page that lists available job roles for software engineers in San Francisco. Please provide 10 job roles that appear to be posted by the AI-related companies.\n   \n   \n    Report your results using the JSON schema below.\n   \n    {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"companies\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"companyName\": {\n                  \"type\": \"string\"\n                },\n                jobTitle: {\n                  \"type\": \"string\"\n                },\n                \"location\": {\n                  \"type\": \"string\"\n                },\n                \"salary\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"min\": {\n                      \"type\": \"number\",\n                      \"minimum\": 0\n                    },\n                    \"max\": {\n                      \"type\": \"number\",\n                      \"minimum\": 0\n                    }\n                  },\n                  \"required\": [\"min\", \"max\"]\n                }\n              },\n              \"required\": [\"companyName\", \"jobTitle\", \"location\", \"salary\"]\n            }\n          },\n          \"error\": {\n            \"type\": \"string\",\n            \"description\": \"If you cannot fulfill the request, use this field to report the problem.\"\n          }\n        }\n      }\n    `;\n   ```\n\n   Utilizing Airtop's prompt feature, the script requests data about job postings that are related to AI companies, formatted as per the provided JSON schema. The AI agent can follow pagination links to gather more results on sites with multiple pages or from a feed with infinite scrolling.\n\n   ```typescript\n   // Note that it may take several minutes to receive a response from the AI agent\n   // as it follows pagination links and gathers data from each page\n   const promptContentResponse = await client.windows.promptContent(session.id, windowInfo.data.windowId, {\n     prompt: PROMPT,\n     followPaginationLinks: true,\n   });\n\n   // Print the result to the console or otherwise use it as desired\n   console.log(contentSummary.data.modelResponse);\n   ```\n\n7. **Clean Up**\n\n   Finally, the script closes the browser and terminates the session.\n\n   ```typescript\n   await browser.close();\n   await client.sessions.terminate(session.id);\n   ```\n\n## Running the Script\n\nTo run the script, execute the following command in your terminal:\n\n```bash\nnpm run start\n```\n\n## Summary\n\nThis recipe showcases how Airtop can be used to automate tasks that require authentication and data extraction from dynamic content. By combining Airtop's live view feature for manual login with automated data extraction via natural language prompts, you can interact with and extract data from complex websites that require user credentials.\n"
      },
      "pages/recipes/sec-filings.mdx": {
        "markdown": "# Overview\n\nThis recipe demonstrates how to use Airtop to scrape the SEC database for recent S-1 filings. It extracts company names and CIK numbers from the filings and sends the results via Telegram. This project showcases the power of combining web scraping, AI-assisted data extraction, and automated notifications.\n\n## Prerequisites\n\nTo get started, ensure you have:\n\n- Node.js installed on your system.\n- An Airtop API key. You can [get one for free](https://portal.airtop.ai/).\n\n## Getting Started\n\n1. **Clone the repository**\n\n   Start by opening your terminal and cloning the source code from [GitHub](https://github.com/airtop-ai/recipe-sec-bot):\n\n   ```bash\n   git clone https://github.com/airtop-ai/recipe-sec-bot\n   cd recipe-sec-bot\n   ```\n\n2. **Install dependencies**\n\n   Run the following command to install the necessary dependencies, including Puppeteer, TelegramBot, and the Airtop SDK:\n\n   ```bash\n   npm install\n   ```\n\n3. **Get your Telegram keys**\n\n   - Open Telegram application then search for `@BotFather` or just click this link [@BotFather](https://t.me/BotFather)\n   - Click Start\n   - Click Menu -> /newbot or type `/newbot` and hit Send\n   - Follow the instruction until we get message like so:\n\n     ```\n     Done! Congratulations on your new bot. You will find it at t.me/new_bot.\n     You can now add a description.....\n\n     Use this token to access the HTTP API:\n     63xxxxxx71:AAFoxxxxn0hwA-2TVSxxxNf4c\n     Keep your token secure and store it safely, it can be used by anyone to control your bot.\n\n     For a description of the Bot API, see this page: https://core.telegram.org/bots/api\n     ```\n\n   Get your user ID by talking to the `UserInfoBot` by clicking this link [@UserInfoBot](https://t.me/UserInfoBot).\n\n   - Send `/start` to it and you should get a message like this:\n\n     ```\n     @your_user_name\n     Id: 9999999999\n     First: Marcos\n     Lang: en\n     ```\n\n4. **Configure your environment**\n\n   You will need to provide your Airtop API key, Telegram bot token and user ID, in a `.env` file. First, copy the provided example `.env` file:\n\n   ```bash\n   cp .env.example .env\n   ```\n\n   Now edit the `.env` file to add your keys:\n\n   ```\n   AIRTOP_API_KEY=<YOUR_API_KEY>\n   TELEGRAM_BOT_TOKEN=<YOUR_TELEGRAM_BOT_TOKEN>\n   TELEGRAM_USER_ID=<YOUR_TELEGRAM_USER_ID>\n   ```\n\n## Script Walkthrough\n\nThe script in `index.ts` performs the following steps:\n\n1. **Initialize the Airtop Client**\n\n   First, we initialize the `AirtopClient` using your provided API key. This client will be used to create browser sessions and interact with the page content.\n\n   ```typescript\n   const airtopClient = new AirtopClient({\n     apiKey: AIRTOP_API_KEY,\n   });\n   ```\n\n1. **Initialize the Telegram Bot**\n\n   We initialize the Telegram bot using the token and user ID we got back on step 3. This bot will be used to send notifications to the user.\n\n   ```typescript\n   const bot = new TelegramBot(TELEGRAM_BOT_TOKEN!, { polling: false });\n   ```\n\n1. **Create a function to send a message to the user**\n\n   This function receives a message formatted as HTML and sends it to the user via Telegram.\n\n   ```typescript\n   async function sendTelegramMessage(message: string) {\n     try {\n       await bot.sendMessage(TELEGRAM_USER_ID!, message, {\n         parse_mode: 'HTML',\n         disable_web_page_preview: true,\n       });\n     } catch (error) {\n       console.error('Error sending telegram message:', error);\n       throw error;\n     }\n   }\n   ```\n\n1. **Create a Browser Session**\n\n   Creating a browser session will allow us to connect to and control a cloud-based browser.\n\n   ```typescript\n   const createSessionResponse = await airtopClient.sessions.create();\n\n   sessionId = createSessionResponse.data.id;\n   ```\n\n1. **Navigate to the SEC website**\n\n   Next, the script navigates to the SEC's website and waits for the page to load.\n\n   ```typescript\n   const windowResponse = await airtopClient.windows.create(sessionId, {\n     url: 'https://www.sec.gov/cgi-bin/browse-edgar?company=&CIK=&type=S-1&owner=include&count=80&action=getcurrent',\n   });\n\n   const windowInfo = await airtopClient.windows.getWindowInfo(sessionId, windowResponse.data.windowId);\n   ```\n\n1. **Prompt the AI to Extract Data**\n\n   There are several results on this page, but we want to provide specific instructions to our prompt regarding the exact data we need. Since these results are returned in plain text, we also want to instruct our prompt to convert the extracted information into a structured JSON format. This will allow us to easily parse and process the data in subsequent steps of our analysis.\n\n   To achieve this, we'll create a detailed prompt that outlines:\n\n   - The specific information to extract (company names and CIK numbers)\n   - The criteria for selecting entries (only S-1 filings, not S-1/A)\n   - How to handle special characters in company names\n   - The desired JSON structure for the output\n\n   By providing clear and precise instructions, we ensure that the AI model can accurately extract and format the data we need from the page in a repeatable way.\n\n   ```typescript\n   const prompt = `You are on the SEC website looking at a search for the latest filings.\n   Please extract the company names and their corresponding CIK numbers (which follow the company name in parentheses) from the search results table.\n   Get only the ones where the form type is S-1 and not S-1/A.\n   Company names might contain characters like backslashes, which should always be escaped.\n   \n   Examples:\n   \n   - \"S-1 | Some Company Inc (0001234567)\" should produce a result '{ \"companyName\": \"Some Company Inc\", \"cik\": \"0001234567\", \"formType\": \"S-1\" }'.\n   - \"S-1/A | Another Company Inc (0009876543)\" should be not be included because the form type is S-1/A.\n   - \"S-1 | Foo Inc \\\\D\\\\E (0002468024)\" should produce a result with the backslashes in the company name escaped: '{ \"companyName\": \"Foo Inc \\\\\\\\D\\\\\\\\E, \"cik\": \"0002468024\", \"formType\": \"S-1\" }'.\n   \n   Please produce a list of results using the JSON schema below. If you are unable to do so, use the failure field to describe the reason for the failure.\n   \n   {\n       \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n       \"type\": \"object\",\n       \"oneOf\": [\n           {\n           \"properties\": {\n               \"results\": {\n               \"type\": \"array\",\n               \"items\": {\n                   \"type\": \"object\",\n                   \"properties\": {\n                   \"companyName\": {\n                       \"type\": \"string\"\n                   },\n                   \"cik\": {\n                       \"type\": \"string\"\n                   },\n                   \"formType\": {\n                       \"type\": \"string\"\n                   }\n                   },\n                   \"required\": [\"companyName\", \"cik\", \"formType\"]\n               }\n               }\n           },\n           \"required\": [\"results\"]\n           },\n           {\n           \"properties\": {\n               \"failure\": {\n               \"type\": \"string\"\n               }\n           },\n           \"required\": [\"failure\"]\n           }\n       ]\n   }`;\n\n   const extractedContent = await airtopClient.windows.promptContent(sessionId, windowInfo.data.windowId, {\n     prompt: prompt,\n   });\n   ```\n\n   Utilizing Airtop's AI prompt feature, the script requests data about SEC filings, formatted as per the provided JSON schema. The AI agent can follow pagination links to gather more results from the SEC database, which may contain multiple pages of filings by passing the [`followPaginationLinks`](/guides/how-to/ai-ap-is/prompting-a-page#paginated-results) parameter to the `promptContent` method.\n\n1. **Process the extracted content**\n\n   ```typescript\n   modelResponse = JSON.parse(extractedContent.data.modelResponse);\n\n   if (modelResponse.failure) {\n     console.log(`Airtop AI reported failure: ${modelResponse.failure}`);\n     throw new Error(modelResponse.failure);\n   }\n\n   // Format the results as a list instead of a table\n   const formattedResults = modelResponse.results\n     .map(\n       (item: { companyName: string; cik: string }, index: number) =>\n         `${index + 1}. <b>${item.companyName}</b>\\n   CIK: <code>${item.cik}</code>`,\n     )\n     .join('\\n\\n');\n\n   const message = `<b>SEC EDGAR S-1 Results</b>\\n\\n${formattedResults}`;\n\n   await sendTelegramMessage(message);\n   ```\n\n1. **Clean Up**\n\n   Finally, the script closes the browser and terminates the session.\n\n   ```typescript\n   try {\n     await browser.close();\n   } catch (err) {}\n   if (sessionId) {\n     await airtopClient.sessions.terminate(sessionId);\n   }\n   console.log('Session deleted');\n   process.exit(0);\n   ```\n\n## Running the Script\n\nTo run the script, execute the following command in your terminal:\n\n```bash\nnpm run start\n```\n\n## Summary\n\nThis recipe demonstrates how Airtop can be utilized to automate tasks involving plain-text data extraction. By leveraging Airtop's AI prompt feature and pagination handling capabilities, you can efficiently retrieve and process information about S-1 filings from the SEC database. The script showcases how to interact with complex data sources, parse JSON responses, and format the extracted information for easy readability and further analysis.\n"
      },
      "pages/api-summary.mdx": {
        "markdown": "Welcome to our API reference. We currently offer a RESTful API, as well as Typescript/NodeJS and Python SDKs to use in your applications.\n\nIf you have any other languages that you would like us to support, please [reach out to us](mailto:support@airtop.ai).\n\n<CardGroup cols={4}>\n  <Card\n    title=\"Node.js SDK\"\n    href=\"https://github.com/airtop-ai/airtop-node-sdk\"\n    icon={<img src=\"https://cdn.brandfetch.io/idKX_Hb7va/theme/dark/logo.svg\" alt=\"Typescript logo\" />}\n  >\n    <a href=\"https://github.com/airtop-ai/airtop-node-sdk\" style=\"text-decoration: underline; color: #ffffff;\">Github</a>&nbsp;\n    <a href=\"https://www.npmjs.com/package/@airtop/sdk\" style=\"text-decoration: underline; color: #ffffff;\">NPM</a>\n  </Card> \n  <Card\n    title=\"Python SDK\"\n    href=\"https://github.com/airtop-ai/airtop-python-sdk\"\n    icon={<img src=\"https://cdn.brandfetch.io/idbpOFBgcc/theme/dark/logo.svg\" alt=\"Python Logo\" />}\n  >\n    <a href=\"https://github.com/airtop-ai/airtop-python-sdk\" style=\"text-decoration: underline; color: #ffffff;\">Github</a>&nbsp;\n    <a href=\"https://pypi.org/project/airtop/\" style=\"text-decoration: underline; color: #ffffff;\">PyPI</a>\n  </Card>\n</CardGroup>\n"
      },
      "changelog/2024-10-19.mdx": {
        "markdown": "## New Native Window Management\n\nAdded support for creating windows, loading URLs, and closing windows without having to use Puppeteer or Playwright. For more information see the guide documentation for [windows](/guides/how-to/creating-a-session#windows).\n"
      },
      "changelog/2024-11-01.mdx": {
        "markdown": "## Support for custom residential proxies\n\nAdded support for custom residential proxies. You can now use your own residential proxies with Airtop and easily configure them to use upon session creation. For more information see the guide documentation for [proxies](/guides/how-to/using-a-proxy).\n"
      }
    },
    "search": {
      "type": "singleAlgoliaIndex",
      "value": {
        "type": "unversioned",
        "indexSegment": {
          "id": "seg_airtop-dev.docs.buildwithfern.com_e6ffe43a-856b-4826-8a1c-61204dba9b1e",
          "searchApiKey": "MGExOGY4ZWMzNTA2ZTBlMmE5YzIzYmNjZjdjNGEyMTBhM2QwNzM5YTU2NzM4NDg3NTRhMDIzM2VkNjIwMDlmZWZpbHRlcnM9aW5kZXhTZWdtZW50SWQlM0FzZWdfYWlydG9wLWRldi5kb2NzLmJ1aWxkd2l0aGZlcm4uY29tX2U2ZmZlNDNhLTg1NmItNDgyNi04YTFjLTYxMjA0ZGJhOWIxZSZ2YWxpZFVudGlsPTE3MzA4NTYzMDk="
        }
      }
    },
    "id": "docs_definition_5ac1b549-dd22-4b66-9e27-0a096453619f"
  },
  "lightModeEnabled": false
}
