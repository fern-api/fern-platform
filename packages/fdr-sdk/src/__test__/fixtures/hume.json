{
  "baseUrl": {
    "domain": "dev.hume.ai"
  },
  "definition": {
    "config": {
      "navigation": {
        "tabs": [
          {
            "type": "group",
            "title": "Documentation",
            "icon": "fa-solid fa-home",
            "items": [
              {
                "type": "section",
                "title": "Introduction",
                "urlSlug": "introduction",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/introduction/welcome.mdx",
                    "title": "Welcome to Hume AI",
                    "urlSlug": "welcome-to-hume-ai",
                    "fullSlug": ["intro"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/introduction/getting-your-api-key.mdx",
                    "title": "Getting your API key",
                    "urlSlug": "api-key",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/introduction/support.mdx",
                    "title": "Support",
                    "urlSlug": "support",
                    "fullSlug": ["support"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Empathic Voice Interface (EVI)",
                "urlSlug": "empathic-voice-interface-evi",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/overview.mdx",
                    "title": "Overview",
                    "urlSlug": "overview",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/quickstart.mdx",
                    "title": "Quickstart",
                    "urlSlug": "quickstart",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/configuration.mdx",
                    "title": "Configuration",
                    "urlSlug": "configuration",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/tool-use.mdx",
                    "title": "Tool use",
                    "urlSlug": "tool-use",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/phone-calling.mdx",
                    "title": "Phone calling",
                    "urlSlug": "phone-calling",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/prompting.mdx",
                    "title": "Prompting guide",
                    "urlSlug": "prompting",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/custom-language-model.mdx",
                    "title": "Custom language model",
                    "urlSlug": "custom-language-model",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/faq.mdx",
                    "title": "FAQ",
                    "urlSlug": "faq",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Expression Measurement API",
                "urlSlug": "expression-measurement-api",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/expression-measurement-api/overview.mdx",
                    "title": "Overview",
                    "urlSlug": "overview",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/expression-measurement-api/rest.mdx",
                    "title": "Processing batches of media files",
                    "urlSlug": "rest",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/expression-measurement-api/websocket.mdx",
                    "title": "Real-time measurement streaming",
                    "urlSlug": "websocket",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/expression-measurement-api/faq.mdx",
                    "title": "FAQ",
                    "urlSlug": "faq",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Custom Models API",
                "urlSlug": "custom-models-api",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/custom-models-api/overview.mdx",
                    "title": "Overview",
                    "urlSlug": "overview",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/custom-models-api/creating-your-dataset.mdx",
                    "title": "Creating your dataset",
                    "urlSlug": "creating-your-dataset",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/custom-models-api/training-your-model.mdx",
                    "title": "Training a custom model",
                    "urlSlug": "training-a-custom-model",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/custom-models-api/evaluating-your-model.mdx",
                    "title": "Evaluating your custom model",
                    "urlSlug": "evaluating-a-custom-model",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/custom-models-api/faq.mdx",
                    "title": "FAQ",
                    "urlSlug": "faq",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Resources",
                "urlSlug": "resources",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "link",
                    "title": "Pricing",
                    "url": "https://beta.hume.ai/pricing"
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/billing.mdx",
                    "title": "Billing",
                    "urlSlug": "billing",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/errors.mdx",
                    "title": "Errors",
                    "urlSlug": "errors",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/science-hume-ai.mdx",
                    "title": "About the science",
                    "urlSlug": "science",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/use-case-guidelines.mdx",
                    "title": "Use case guidelines",
                    "urlSlug": "use-case-guidelines",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/privacy.mdx",
                    "title": "Privacy",
                    "urlSlug": "privacy",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlugOverride": "docs",
            "urlSlug": "docs"
          },
          {
            "type": "group",
            "title": "API Reference",
            "icon": "fa-solid fa-file-contract",
            "items": [
              {
                "type": "api",
                "title": "Empathic Voice Interface (EVI)",
                "api": "8b03e44c-d4e2-4613-a138-e25b8c65c3cb",
                "skipUrlSlug": false,
                "showErrors": false,
                "navigation": {
                  "items": []
                },
                "flattened": false,
                "hidden": false,
                "urlSlug": "empathic-voice-interface-evi"
              },
              {
                "type": "api",
                "title": "Expression Measurement API",
                "api": "e810f56e-df97-4af2-bdaa-659077e1948e",
                "skipUrlSlug": false,
                "showErrors": false,
                "navigation": {
                  "items": []
                },
                "flattened": false,
                "hidden": false,
                "urlSlug": "expression-measurement-api"
              },
              {
                "type": "api",
                "title": "Custom Models API",
                "api": "bcb7826e-ffd6-4440-b3de-6bf37440c3e2",
                "skipUrlSlug": false,
                "showErrors": false,
                "navigation": {
                  "items": []
                },
                "flattened": false,
                "hidden": false,
                "urlSlug": "custom-models-api"
              }
            ],
            "urlSlugOverride": "reference",
            "urlSlug": "reference"
          },
          {
            "type": "group",
            "title": "Changelog",
            "icon": "fa-regular fa-clock",
            "items": [
              {
                "type": "page",
                "id": "docs/changelog/2024.mdx",
                "title": "Changelog",
                "urlSlug": "changelog",
                "fullSlug": ["changelog"],
                "hidden": false
              }
            ],
            "urlSlugOverride": "changelog",
            "urlSlug": "changelog"
          },
          {
            "type": "link",
            "title": "Discord",
            "icon": "fa-brands fa-discord",
            "url": "https://discord.gg/WPRSugvAm6"
          }
        ]
      },
      "logoHeight": 30,
      "logoHref": "./../../docs/pages/documentation/introduction/welcome.mdx",
      "colorsV3": {
        "type": "darkAndLight",
        "light": {
          "accentPrimary": {
            "r": 153,
            "g": 144,
            "b": 135,
            "a": 1
          },
          "logo": "cda9fa3b-f513-4ad3-89b9-1bc95a761c70",
          "background": {
            "type": "solid",
            "r": 255,
            "g": 244,
            "b": 232,
            "a": 1
          },
          "border": {
            "r": 229,
            "g": 218,
            "b": 206,
            "a": 1
          },
          "cardBackground": {
            "r": 255,
            "g": 249,
            "b": 242,
            "a": 1
          },
          "sidebarBackground": {
            "r": 255,
            "g": 249,
            "b": 242,
            "a": 1
          },
          "headerBackground": {
            "r": 255,
            "g": 249,
            "b": 242,
            "a": 1
          }
        },
        "dark": {
          "accentPrimary": {
            "r": 255,
            "g": 244,
            "b": 232,
            "a": 1
          },
          "logo": "d76e7b76-7299-4a83-8095-49b065dff86e",
          "background": {
            "type": "solid",
            "r": 53,
            "g": 53,
            "b": 53,
            "a": 1
          },
          "cardBackground": {
            "r": 35,
            "g": 35,
            "b": 35,
            "a": 1
          },
          "sidebarBackground": {
            "r": 35,
            "g": 35,
            "b": 35,
            "a": 1
          },
          "headerBackground": {
            "r": 35,
            "g": 35,
            "b": 35,
            "a": 1
          }
        }
      },
      "navbarLinks": [
        {
          "type": "secondary",
          "text": "Get support",
          "url": "/support"
        },
        {
          "type": "primary",
          "text": "Login",
          "url": "https://beta.hume.ai/log-in"
        }
      ],
      "title": "Hume API",
      "favicon": "e34bc051-3181-4e76-b86f-7094e10f229a",
      "typographyV2": {
        "headingsFont": {
          "type": "custom",
          "name": "Fellix",
          "variants": [
            {
              "fontFile": "724861df-6bdb-40c2-a082-7deaf355a5a8",
              "weight": ["500"],
              "style": ["normal"]
            }
          ]
        },
        "bodyFont": {
          "type": "custom",
          "name": "Fellix",
          "variants": [
            {
              "fontFile": "4a995ab2-bc80-4cc7-bd16-5b477e98a000",
              "weight": ["400"]
            },
            {
              "fontFile": "724861df-6bdb-40c2-a082-7deaf355a5a8",
              "weight": ["500"]
            },
            {
              "fontFile": "67fe2f9d-13c2-485e-bbca-df9c46760bb7",
              "weight": ["600"]
            }
          ]
        },
        "codeFont": {
          "type": "custom",
          "name": "Fraktion",
          "variants": [
            {
              "fontFile": "3f8d3a6d-09f6-4799-a069-54a2adf6b036",
              "weight": ["400"],
              "style": ["normal"]
            },
            {
              "fontFile": "6d34714f-0bf0-47c5-bc07-acf1e117064f",
              "weight": ["500", "600"],
              "style": ["normal"]
            }
          ]
        }
      },
      "layout": {
        "pageWidth": {
          "type": "full"
        },
        "contentWidth": {
          "type": "rem",
          "value": 40
        },
        "searchbarPlacement": "SIDEBAR",
        "tabsPlacement": "SIDEBAR",
        "contentAlignment": "CENTER",
        "headerPosition": "FIXED",
        "disableHeader": true
      },
      "js": {
        "files": []
      }
    },
    "apis": {
      "e810f56e-df97-4af2-bdaa-659077e1948e": {
        "id": "e810f56e-df97-4af2-bdaa-659077e1948e",
        "rootPackage": {
          "endpoints": [],
          "subpackages": ["subpackage_batch", "subpackage_stream"],
          "types": [
            "type_:Alternative",
            "type_:Bcp47Tag",
            "type_:BoundingBox",
            "type_:BurstPrediction",
            "type_:Classification",
            "type_:CompletedEmbeddingGeneration",
            "type_:CompletedInference",
            "type_:CompletedTlInference",
            "type_:CompletedTraining",
            "type_:CustomModelPrediction",
            "type_:CustomModelRequest",
            "type_:Dataset",
            "type_:DatasetId",
            "type_:DatasetVersionId",
            "type_:DescriptionsScore",
            "type_:Direction",
            "type_:EmbeddingGenerationBaseRequest",
            "type_:EmotionScore",
            "type_:Error",
            "type_:EvaluationArgs",
            "type_:Face",
            "type_:FacePrediction",
            "type_:FacemeshPrediction",
            "type_:FacsScore",
            "type_:Failed",
            "type_:File",
            "type_:Granularity",
            "type_:GroupedPredictionsBurstPrediction",
            "type_:GroupedPredictionsFacePrediction",
            "type_:GroupedPredictionsFacemeshPrediction",
            "type_:GroupedPredictionsLanguagePrediction",
            "type_:GroupedPredictionsNerPrediction",
            "type_:GroupedPredictionsProsodyPrediction",
            "type_:InProgress",
            "type_:InferenceBaseRequest",
            "type_:InferencePrediction",
            "type_:InferenceRequest",
            "type_:InferenceResults",
            "type_:InferenceSourcePredictResult",
            "type_:JobEmbeddingGeneration",
            "type_:JobInference",
            "type_:JobTlInference",
            "type_:JobTraining",
            "type_:JobId",
            "type_:Language",
            "type_:LanguagePrediction",
            "type_:Models",
            "type_:ModelsPredictions",
            "type_:Ner",
            "type_:NerPrediction",
            "type_:Null",
            "type_:PositionInterval",
            "type_:PredictionsOptionalNullBurstPrediction",
            "type_:PredictionsOptionalNullFacePrediction",
            "type_:PredictionsOptionalNullFacemeshPrediction",
            "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction",
            "type_:PredictionsOptionalTranscriptionMetadataNerPrediction",
            "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction",
            "type_:Prosody",
            "type_:ProsodyPrediction",
            "type_:Queued",
            "type_:RegistryFileDetail",
            "type_:Regression",
            "type_:SentimentScore",
            "type_:SortBy",
            "type_:Source",
            "type_:SourceFile",
            "type_:SourceTextSource",
            "type_:SourceUrl",
            "type_:Url",
            "type_:StateEmbeddingGeneration",
            "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration",
            "type_:StateEmbeddingGenerationFailed",
            "type_:StateEmbeddingGenerationInProgress",
            "type_:StateEmbeddingGenerationQueued",
            "type_:StateInference",
            "type_:StateInferenceCompletedInference",
            "type_:StateInferenceFailed",
            "type_:StateInferenceInProgress",
            "type_:StateInferenceQueued",
            "type_:StateTlInference",
            "type_:StateTlInferenceCompletedTlInference",
            "type_:StateTlInferenceFailed",
            "type_:StateTlInferenceInProgress",
            "type_:StateTlInferenceQueued",
            "type_:StateTraining",
            "type_:StateTrainingCompletedTraining",
            "type_:StateTrainingFailed",
            "type_:StateTrainingInProgress",
            "type_:StateTrainingQueued",
            "type_:Status",
            "type_:TlInferencePrediction",
            "type_:TlInferenceResults",
            "type_:TlInferenceSourcePredictResult",
            "type_:Tag",
            "type_:Target",
            "type_:Task",
            "type_:TaskClassification",
            "type_:TaskRegression",
            "type_:TextSource",
            "type_:TimeInterval",
            "type_:TlInferenceBaseRequest",
            "type_:CustomModel",
            "type_:CustomModelId",
            "type_:CustomModelVersionId",
            "type_:ToxicityScore",
            "type_:TrainingBaseRequest",
            "type_:TrainingCustomModel",
            "type_:Transcription",
            "type_:TranscriptionMetadata",
            "type_:Type",
            "type_:Unconfigurable",
            "type_:UnionJob",
            "type_:UnionJobJobEmbeddingGeneration",
            "type_:UnionJobJobInference",
            "type_:UnionJobJobTlInference",
            "type_:UnionJobJobTraining",
            "type_:UnionPredictResult",
            "type_:ValidationArgs",
            "type_:When",
            "type_:Window",
            "type_:EmotionEmbeddingItem",
            "type_:EmotionEmbedding",
            "type_:TimeRange",
            "type_:TextPosition",
            "type_:SentimentItem",
            "type_:Sentiment",
            "type_:ToxicityItem",
            "type_:Toxicity"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_stream:StreamBurstJobDetails": {
            "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
            "name": "StreamBurstJobDetails",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "ID of the current streaming job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstBurstPredictionsItem": {
            "name": "StreamBurstBurstPredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TimeRange"
                    }
                  }
                },
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionEmbedding"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstBurst": {
            "description": "Response for the vocal burst emotion model.",
            "name": "StreamBurstBurst",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamBurstBurstPredictionsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstFacePredictionsItem": {
            "name": "StreamBurstFacePredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Frame number",
                  "key": "frame",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Time in seconds when face detection occurred.",
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "bbox",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BoundingBox"
                    }
                  }
                },
                {
                  "description": "The predicted probability that a detected face was actually a face.",
                  "key": "prob",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Identifier for a face. Not that this defaults to `unknown` unless face identification is enabled in the face model configuration.",
                  "key": "face_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionEmbedding"
                    }
                  }
                },
                {
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionEmbedding"
                    }
                  }
                },
                {
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionEmbedding"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstFace": {
            "description": "Response for the facial expression emotion model.",
            "name": "StreamBurstFace",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamBurstFacePredictionsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstFacemeshPredictionsItem": {
            "name": "StreamBurstFacemeshPredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionEmbedding"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstFacemesh": {
            "description": "Response for the facemesh emotion model.",
            "name": "StreamBurstFacemesh",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamBurstFacemeshPredictionsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstLanguagePredictionsItem": {
            "name": "StreamBurstLanguagePredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TextPosition"
                    }
                  }
                },
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionEmbedding"
                    }
                  }
                },
                {
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Sentiment"
                    }
                  }
                },
                {
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Toxicity"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstLanguage": {
            "description": "Response for the language emotion model.",
            "name": "StreamBurstLanguage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamBurstLanguagePredictionsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstProsodyPredictionsItem": {
            "name": "StreamBurstProsodyPredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TimeRange"
                    }
                  }
                },
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionEmbedding"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstProsody": {
            "description": "Response for the speech prosody emotion model.",
            "name": "StreamBurstProsody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamBurstProsodyPredictionsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurst": {
            "name": "StreamBurst",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body.",
                  "key": "payload_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
                  "key": "job_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamBurstJobDetails"
                    }
                  }
                },
                {
                  "description": "Response for the vocal burst emotion model.",
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamBurstBurst"
                    }
                  }
                },
                {
                  "description": "Response for the facial expression emotion model.",
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamBurstFace"
                    }
                  }
                },
                {
                  "description": "Response for the facemesh emotion model.",
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamBurstFacemesh"
                    }
                  }
                },
                {
                  "description": "Response for the language emotion model.",
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamBurstLanguage"
                    }
                  }
                },
                {
                  "description": "Response for the speech prosody emotion model.",
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamBurstProsody"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamErrorJobDetails": {
            "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
            "name": "StreamErrorJobDetails",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "ID of the current streaming job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamError": {
            "name": "StreamError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Error message text.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique identifier for the error.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body.",
                  "key": "payload_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
                  "key": "job_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamErrorJobDetails"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamJobDetailsJobDetails": {
            "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
            "name": "StreamJobDetailsJobDetails",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "ID of the current streaming job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamJobDetails": {
            "name": "StreamJobDetails",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Warning message text.",
                  "key": "warning",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique identifier for the error.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body.",
                  "key": "payload_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
                  "key": "job_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamJobDetailsJobDetails"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:SubscribeEvent": {
            "name": "SubscribeEvent",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_stream:StreamBurst"
                  },
                  "displayName": "Stream Burst"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_stream:StreamError"
                  },
                  "displayName": "Stream Error"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_stream:StreamJobDetails"
                  },
                  "displayName": "Stream Job Details"
                }
              ]
            }
          },
          "type_stream:StreamDataModelsFace": {
            "description": "Configuration for the facial expression emotion model.\n\nNote: Using the `reset_stream` parameter does not have any effect on face identification. A single face identifier cache is maintained over a full session whether `reset_stream` is used or not.",
            "name": "StreamDataModelsFace",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Configuration for FACS predictions. If missing or null, no FACS predictions will be generated.",
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration for Descriptions predictions. If missing or null, no Descriptions predictions will be generated.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for faces across frames. If true, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If false, all faces will be tagged with an \"unknown\" ID.",
                  "key": "identify_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Number of frames per second to process. Other frames will be omitted from the response.",
                  "key": "fps_pred",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                },
                {
                  "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response.",
                  "key": "prob_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                },
                {
                  "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response.",
                  "key": "min_face_size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamDataModelsLanguage": {
            "description": "Configuration for the language emotion model.",
            "name": "StreamDataModelsLanguage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Configuration for sentiment predictions. If missing or null, no sentiment predictions will be generated.",
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration for toxicity predictions. If missing or null, no toxicity predictions will be generated.",
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The granularity at which to generate predictions. Values are `word`, `sentence`, `utterance`, or `passage`. To get a single prediction for the entire text of your streaming payload use `passage`. Default value is `word`.",
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamDataModels": {
            "description": "Configuration used to specify which models should be used and with what settings.",
            "name": "StreamDataModels",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Configuration for the vocal burst emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`.",
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration for the facial expression emotion model.\n\nNote: Using the `reset_stream` parameter does not have any effect on face identification. A single face identifier cache is maintained over a full session whether `reset_stream` is used or not.",
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamDataModelsFace"
                    }
                  }
                },
                {
                  "description": "Configuration for the facemesh emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`.",
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration for the language emotion model.",
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamDataModelsLanguage"
                    }
                  }
                },
                {
                  "description": "Configuration for the speech prosody emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`.",
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamData": {
            "name": "StreamData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration used to specify which models should be used and with what settings.",
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamDataModels"
                    }
                  }
                },
                {
                  "description": "Length in milliseconds of streaming sliding window.\n\nExtending the length of this window will prepend media context from past payloads into the current payload.\n\nFor example, if on the first payload you send 500ms of data and on the second payload you send an additional 500ms of data, a window of at least 1000ms will allow the model to process all 1000ms of stream data.\n\nA window of 600ms would append the full 500ms of the second payload to the last 100ms of the first payload.\n\nNote: This feature is currently only supported for audio data and audio models. For other file types and models this parameter will be ignored.",
                  "key": "stream_window_ms",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 500,
                        "maximum": 10000,
                        "default": 5000
                      }
                    }
                  }
                },
                {
                  "description": "Whether to reset the streaming sliding window before processing the current payload.\n\nIf this parameter is set to `true` then past context will be deleted before processing the current payload.\n\nUse reset_stream when one audio file is done being processed and you do not want context to leak across files.",
                  "key": "reset_stream",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Set to `true` to enable the data parameter to be parsed as raw text rather than base64 encoded bytes.\nThis parameter is useful if you want to send text to be processed by the language model, but it cannot be used with other file types like audio, image, or video.",
                  "key": "raw_text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Set to `true` to get details about the job.\n\nThis parameter can be set in the same payload as data or it can be set without data and models configuration to get the job details between payloads.\n\nThis parameter is useful to get the unique job ID.",
                  "key": "job_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Pass an arbitrary string as the payload ID and get it back at the top level of the socket response.\n\nThis can be useful if you have multiple requests running asynchronously and want to disambiguate responses as they are received.",
                  "key": "payload_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Alternative": {
            "name": "Alternative",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "language_only"
                }
              }
            }
          },
          "type_:Bcp47Tag": {
            "name": "Bcp47Tag",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "zh"
                },
                {
                  "value": "da"
                },
                {
                  "value": "nl"
                },
                {
                  "value": "en"
                },
                {
                  "value": "en-AU"
                },
                {
                  "value": "en-IN"
                },
                {
                  "value": "en-NZ"
                },
                {
                  "value": "en-GB"
                },
                {
                  "value": "fr"
                },
                {
                  "value": "fr-CA"
                },
                {
                  "value": "de"
                },
                {
                  "value": "hi"
                },
                {
                  "value": "hi-Latn"
                },
                {
                  "value": "id"
                },
                {
                  "value": "it"
                },
                {
                  "value": "ja"
                },
                {
                  "value": "ko"
                },
                {
                  "value": "no"
                },
                {
                  "value": "pl"
                },
                {
                  "value": "pt"
                },
                {
                  "value": "pt-BR"
                },
                {
                  "value": "pt-PT"
                },
                {
                  "value": "ru"
                },
                {
                  "value": "es"
                },
                {
                  "value": "es-419"
                },
                {
                  "value": "sv"
                },
                {
                  "value": "ta"
                },
                {
                  "value": "tr"
                },
                {
                  "value": "uk"
                }
              ]
            }
          },
          "type_:BoundingBox": {
            "description": "A bounding box around a face.",
            "name": "BoundingBox",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "x-coordinate of bounding box top left corner.",
                  "key": "x",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                },
                {
                  "description": "y-coordinate of bounding box top left corner.",
                  "key": "y",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                },
                {
                  "description": "Bounding box width.",
                  "key": "w",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                },
                {
                  "description": "Bounding box height.",
                  "key": "h",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BurstPrediction": {
            "name": "BurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "time",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TimeInterval"
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "Modality-specific descriptive features and their scores.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DescriptionsScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:Classification": {
            "name": "Classification",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:CompletedEmbeddingGeneration": {
            "name": "CompletedEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:CompletedInference": {
            "name": "CompletedInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of predictions that were generated by this job.",
                  "key": "num_predictions",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of errors that occurred while running this job.",
                  "key": "num_errors",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:CompletedTlInference": {
            "name": "CompletedTlInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of predictions that were generated by this job.",
                  "key": "num_predictions",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of errors that occurred while running this job.",
                  "key": "num_errors",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:CompletedTraining": {
            "name": "CompletedTraining",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TrainingCustomModel"
                  }
                },
                {
                  "key": "alternatives",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "id",
                        "value": "type_:TrainingCustomModel"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CustomModelPrediction": {
            "name": "CustomModelPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "output",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "error",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "task_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:CustomModelRequest": {
            "name": "CustomModelRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Tag"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Dataset": {
            "name": "Dataset",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:DatasetId"
                  },
                  "displayName": "Dataset Id"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:DatasetVersionId"
                  },
                  "displayName": "Dataset Version Id"
                }
              ]
            }
          },
          "type_:DatasetId": {
            "name": "DatasetId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DatasetVersionId": {
            "name": "DatasetVersionId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DescriptionsScore": {
            "name": "DescriptionsScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the descriptive feature being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the descriptive feature being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Direction": {
            "name": "Direction",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "asc"
                },
                {
                  "value": "desc"
                }
              ]
            }
          },
          "type_:EmbeddingGenerationBaseRequest": {
            "name": "EmbeddingGenerationBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File ID and File URL pairs for an asset registry file",
                  "key": "registry_file_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:RegistryFileDetail"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EmotionScore": {
            "name": "EmotionScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the emotion being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the emotion being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:Error": {
            "name": "Error",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An error message.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:EvaluationArgs": {
            "name": "EvaluationArgs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "validation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ValidationArgs"
                    }
                  }
                }
              ]
            }
          },
          "type_:Face": {
            "name": "Face",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Number of frames per second to process. Other frames will be omitted from the response. Set to `0` to process every frame.",
                  "key": "fps_pred",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                },
                {
                  "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response.",
                  "key": "prob_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.99
                      }
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for faces across frames. If `true`, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If `false`, all faces will be tagged with an `unknown` ID.",
                  "key": "identify_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response.",
                  "key": "min_face_size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 10,
                        "default": 60
                      }
                    }
                  }
                },
                {
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "description": "Whether to extract and save the detected faces in the artifacts zip created by each job.",
                  "key": "save_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FacePrediction": {
            "name": "FacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Frame number",
                  "key": "frame",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Time in seconds when face detection occurred.",
                  "key": "time",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "The predicted probability that a detected face was actually a face.",
                  "key": "prob",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "box",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BoundingBox"
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "FACS 2.0 features and their scores.",
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FacsScore"
                      }
                    }
                  }
                },
                {
                  "description": "Modality-specific descriptive features and their scores.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DescriptionsScore"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FacemeshPrediction": {
            "name": "FacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:FacsScore": {
            "name": "FacsScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the FACS 2.0 feature being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the FACS 2.0 feature being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Failed": {
            "name": "Failed",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:File": {
            "name": "File",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the file.",
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The content type of the file.",
                  "key": "content_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The MD5 checksum of the file.",
                  "key": "md5sum",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Granularity": {
            "description": "The granularity at which to generate predictions. `utterance` corresponds to a natural pause or break in conversation, while `conversational_turn` corresponds to a change in speaker.",
            "name": "Granularity",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "word"
                },
                {
                  "value": "sentence"
                },
                {
                  "value": "utterance"
                },
                {
                  "value": "conversational_turn"
                }
              ]
            }
          },
          "type_:GroupedPredictionsBurstPrediction": {
            "name": "GroupedPredictionsBurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BurstPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsFacePrediction": {
            "name": "GroupedPredictionsFacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FacePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsFacemeshPrediction": {
            "name": "GroupedPredictionsFacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FacemeshPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsLanguagePrediction": {
            "name": "GroupedPredictionsLanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:LanguagePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsNerPrediction": {
            "name": "GroupedPredictionsNerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NerPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsProsodyPrediction": {
            "name": "GroupedPredictionsProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProsodyPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:InProgress": {
            "name": "InProgress",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:InferenceBaseRequest": {
            "name": "InferenceBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Models"
                    }
                  }
                },
                {
                  "key": "transcription",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Transcription"
                    }
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Text to supply directly to our language and NER models.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:InferencePrediction": {
            "name": "InferencePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "models",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ModelsPredictions"
                  }
                }
              ]
            }
          },
          "type_:InferenceRequest": {
            "name": "InferenceRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Models"
                    }
                  }
                },
                {
                  "key": "transcription",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Transcription"
                    }
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Text to supply directly to our language and NER models.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "files",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:File"
                    }
                  }
                }
              ]
            }
          },
          "type_:InferenceResults": {
            "name": "InferenceResults",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:InferencePrediction"
                    }
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Error"
                    }
                  }
                }
              ]
            }
          },
          "type_:InferenceSourcePredictResult": {
            "name": "InferenceSourcePredictResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Source"
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:InferenceResults"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:JobEmbeddingGeneration": {
            "name": "JobEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EmbeddingGenerationBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateEmbeddingGeneration"
                  }
                }
              ]
            }
          },
          "type_:JobInference": {
            "name": "JobInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:InferenceRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateInference"
                  }
                }
              ]
            }
          },
          "type_:JobTlInference": {
            "name": "JobTlInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TlInferenceBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateTlInference"
                  }
                }
              ]
            }
          },
          "type_:JobTraining": {
            "name": "JobTraining",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TrainingBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateTraining"
                  }
                }
              ]
            }
          },
          "type_:JobId": {
            "name": "JobId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the started job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Language": {
            "name": "Language",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Granularity"
                    }
                  }
                },
                {
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:LanguagePrediction": {
            "name": "LanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PositionInterval"
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TimeInterval"
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from `1` (negative) to `9` (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of `5`. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of `5`. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level.",
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SentimentScore"
                      }
                    }
                  }
                },
                {
                  "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: `toxic`, `severe_toxic`, `obscene`, `threat`, `insult`, and `identity_hate`.",
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ToxicityScore"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Models": {
            "name": "Models",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Face"
                    }
                  }
                },
                {
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Prosody"
                    }
                  }
                },
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Language"
                    }
                  }
                },
                {
                  "key": "ner",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Ner"
                    }
                  }
                },
                {
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                }
              ]
            }
          },
          "type_:ModelsPredictions": {
            "name": "ModelsPredictions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullFacePrediction"
                    }
                  }
                },
                {
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullBurstPrediction"
                    }
                  }
                },
                {
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction"
                    }
                  }
                },
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction"
                    }
                  }
                },
                {
                  "key": "ner",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataNerPrediction"
                    }
                  }
                },
                {
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullFacemeshPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:Ner": {
            "name": "Ner",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:NerPrediction": {
            "name": "NerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The recognized topic or entity.",
                  "key": "entity",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PositionInterval"
                  }
                },
                {
                  "description": "Our NER model's relative confidence in the recognized topic or entity.",
                  "key": "entity_confidence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "A measure of how often the entity is linked to by other entities.",
                  "key": "support",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "A URL which provides more information about the recognized topic or entity.",
                  "key": "uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The specific word to which the emotion predictions are linked.",
                  "key": "link_word",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TimeInterval"
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:Null": {
            "description": "No associated metadata for this model. Value will be `null`.",
            "name": "Null",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:PositionInterval": {
            "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
            "name": "PositionInterval",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The index of the first character in the text segment, inclusive.",
                  "key": "begin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The index of the last character in the text segment, exclusive.",
                  "key": "end",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalNullBurstPrediction": {
            "name": "PredictionsOptionalNullBurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsBurstPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalNullFacePrediction": {
            "name": "PredictionsOptionalNullFacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsFacePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalNullFacemeshPrediction": {
            "name": "PredictionsOptionalNullFacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsFacemeshPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataLanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsLanguagePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataNerPrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataNerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsNerPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsProsodyPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:Prosody": {
            "name": "Prosody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Granularity"
                    }
                  }
                },
                {
                  "key": "window",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Window"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ProsodyPrediction": {
            "name": "ProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TimeInterval"
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:Queued": {
            "name": "Queued",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:RegistryFileDetail": {
            "name": "RegistryFileDetail",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File ID in the Asset Registry",
                  "key": "file_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL to the file in the Asset Registry",
                  "key": "file_url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Regression": {
            "name": "Regression",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:SentimentScore": {
            "name": "SentimentScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Level of sentiment, ranging from `1` (negative) to `9` (positive)",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Prediction for this level of sentiment",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:SortBy": {
            "name": "SortBy",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "created"
                },
                {
                  "value": "started"
                },
                {
                  "value": "ended"
                }
              ]
            }
          },
          "type_:Source": {
            "name": "Source",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "url",
                  "additionalProperties": {
                    "extends": ["type_:SourceUrl"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "file",
                  "additionalProperties": {
                    "extends": ["type_:SourceFile"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text",
                  "additionalProperties": {
                    "extends": ["type_:SourceTextSource"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:SourceFile": {
            "name": "SourceFile",
            "shape": {
              "type": "object",
              "extends": ["type_:File"],
              "properties": []
            }
          },
          "type_:SourceTextSource": {
            "name": "SourceTextSource",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_:SourceUrl": {
            "name": "SourceUrl",
            "shape": {
              "type": "object",
              "extends": ["type_:Url"],
              "properties": []
            }
          },
          "type_:Url": {
            "name": "Url",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The URL of the source media file.",
                  "key": "url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:StateEmbeddingGeneration": {
            "name": "StateEmbeddingGeneration",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationCompletedEmbeddingGeneration"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration": {
            "name": "StateEmbeddingGenerationCompletedEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedEmbeddingGeneration"],
              "properties": []
            }
          },
          "type_:StateEmbeddingGenerationFailed": {
            "name": "StateEmbeddingGenerationFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateEmbeddingGenerationInProgress": {
            "name": "StateEmbeddingGenerationInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateEmbeddingGenerationQueued": {
            "name": "StateEmbeddingGenerationQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:StateInference": {
            "name": "StateInference",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceCompletedInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateInferenceCompletedInference": {
            "name": "StateInferenceCompletedInference",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedInference"],
              "properties": []
            }
          },
          "type_:StateInferenceFailed": {
            "name": "StateInferenceFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateInferenceInProgress": {
            "name": "StateInferenceInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateInferenceQueued": {
            "name": "StateInferenceQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:StateTlInference": {
            "name": "StateTlInference",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceCompletedTlInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateTlInferenceCompletedTlInference": {
            "name": "StateTlInferenceCompletedTlInference",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedTlInference"],
              "properties": []
            }
          },
          "type_:StateTlInferenceFailed": {
            "name": "StateTlInferenceFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateTlInferenceInProgress": {
            "name": "StateTlInferenceInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateTlInferenceQueued": {
            "name": "StateTlInferenceQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:StateTraining": {
            "name": "StateTraining",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingCompletedTraining"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateTrainingCompletedTraining": {
            "name": "StateTrainingCompletedTraining",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedTraining"],
              "properties": []
            }
          },
          "type_:StateTrainingFailed": {
            "name": "StateTrainingFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateTrainingInProgress": {
            "name": "StateTrainingInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateTrainingQueued": {
            "name": "StateTrainingQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:Status": {
            "name": "Status",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "QUEUED"
                },
                {
                  "value": "IN_PROGRESS"
                },
                {
                  "value": "COMPLETED"
                },
                {
                  "value": "FAILED"
                }
              ]
            }
          },
          "type_:TlInferencePrediction": {
            "name": "TlInferencePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "file_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "custom_models",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "id",
                      "value": "type_:CustomModelPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceResults": {
            "name": "TlInferenceResults",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TlInferencePrediction"
                    }
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Error"
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceSourcePredictResult": {
            "name": "TlInferenceSourcePredictResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Source"
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TlInferenceResults"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Tag": {
            "name": "Tag",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Target": {
            "name": "Target",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Task": {
            "name": "Task",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "classification",
                  "additionalProperties": {
                    "extends": ["type_:TaskClassification"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "regression",
                  "additionalProperties": {
                    "extends": ["type_:TaskRegression"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:TaskClassification": {
            "name": "TaskClassification",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_:TaskRegression": {
            "name": "TaskRegression",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_:TextSource": {
            "name": "TextSource",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:TimeInterval": {
            "description": "A time range with a beginning and end, measured in seconds.",
            "name": "TimeInterval",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Beginning of time range in seconds.",
                  "key": "begin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "End of time range in seconds.",
                  "key": "end",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceBaseRequest": {
            "name": "TlInferenceBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CustomModel"
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CustomModel": {
            "name": "CustomModel",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:CustomModelId"
                  },
                  "displayName": "Custom Model Id"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:CustomModelVersionId"
                  },
                  "displayName": "Custom Model Version Id"
                }
              ]
            }
          },
          "type_:CustomModelId": {
            "name": "CustomModelId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:CustomModelVersionId": {
            "name": "CustomModelVersionId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ToxicityScore": {
            "name": "ToxicityScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Category of toxicity.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Prediction for this category of toxicity",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TrainingBaseRequest": {
            "name": "TrainingBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CustomModelRequest"
                  }
                },
                {
                  "key": "dataset",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Dataset"
                  }
                },
                {
                  "key": "target_feature",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "label"
                      }
                    }
                  }
                },
                {
                  "key": "task",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Task"
                    }
                  }
                },
                {
                  "key": "evaluation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EvaluationArgs"
                    }
                  }
                },
                {
                  "key": "alternatives",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Alternative"
                      }
                    }
                  }
                },
                {
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TrainingCustomModel": {
            "name": "TrainingCustomModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Transcription": {
            "name": "Transcription",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Bcp47Tag"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Transcript confidence threshold. Transcripts generated with a confidence less than this threshold will be considered invalid and not used as an input for model inference.",
                  "key": "confidence_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TranscriptionMetadata": {
            "description": "Transcription metadata for your media file.",
            "name": "TranscriptionMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Value between `0.0` and `1.0` indicating our transcription model's relative confidence in the transcription of your media file.",
                  "key": "confidence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "detected_language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Bcp47Tag"
                    }
                  }
                }
              ]
            }
          },
          "type_:Type": {
            "name": "Type",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "EMBEDDING_GENERATION"
                },
                {
                  "value": "INFERENCE"
                },
                {
                  "value": "TL_INFERENCE"
                },
                {
                  "value": "TRAINING"
                }
              ]
            }
          },
          "type_:Unconfigurable": {
            "description": "To include predictions for this model type, set this field to `{}`. It is currently not configurable further.",
            "name": "Unconfigurable",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:UnionJob": {
            "name": "UnionJob",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "EMBEDDING_GENERATION",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobEmbeddingGeneration"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "INFERENCE",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "TL_INFERENCE",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobTlInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "TRAINING",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobTraining"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:UnionJobJobEmbeddingGeneration": {
            "name": "UnionJobJobEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": ["type_:JobEmbeddingGeneration"],
              "properties": []
            }
          },
          "type_:UnionJobJobInference": {
            "name": "UnionJobJobInference",
            "shape": {
              "type": "object",
              "extends": ["type_:JobInference"],
              "properties": []
            }
          },
          "type_:UnionJobJobTlInference": {
            "name": "UnionJobJobTlInference",
            "shape": {
              "type": "object",
              "extends": ["type_:JobTlInference"],
              "properties": []
            }
          },
          "type_:UnionJobJobTraining": {
            "name": "UnionJobJobTraining",
            "shape": {
              "type": "object",
              "extends": ["type_:JobTraining"],
              "properties": []
            }
          },
          "type_:UnionPredictResult": {
            "name": "UnionPredictResult",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:InferenceSourcePredictResult"
                  },
                  "displayName": "Inference Source Predict Result"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:TlInferenceSourcePredictResult"
                  },
                  "displayName": "Tl Inference Source Predict Result"
                }
              ]
            }
          },
          "type_:ValidationArgs": {
            "name": "ValidationArgs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "positive_label",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Target"
                    }
                  }
                }
              ]
            }
          },
          "type_:When": {
            "name": "When",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "created_before"
                },
                {
                  "value": "created_after"
                }
              ]
            }
          },
          "type_:Window": {
            "name": "Window",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The length of the sliding window.",
                  "key": "length",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 4
                      }
                    }
                  }
                },
                {
                  "description": "The step size of the sliding window.",
                  "key": "step",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 1
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EmotionEmbeddingItem": {
            "name": "EmotionEmbeddingItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the emotion being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Embedding value for the emotion being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EmotionEmbedding": {
            "description": "A high-dimensional embedding in emotion space.",
            "name": "EmotionEmbedding",
            "shape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:EmotionEmbeddingItem"
                }
              }
            }
          },
          "type_:TimeRange": {
            "description": "A time range with a beginning and end, measured in seconds.",
            "name": "TimeRange",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Beginning of time range in seconds.",
                  "key": "begin",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                },
                {
                  "description": "End of time range in seconds.",
                  "key": "end",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TextPosition": {
            "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
            "name": "TextPosition",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The index of the first character in the text segment, inclusive.",
                  "key": "begin",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                },
                {
                  "description": "The index of the last character in the text segment, exclusive.",
                  "key": "end",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SentimentItem": {
            "name": "SentimentItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Level of sentiment, ranging from 1 (negative) to 9 (positive)",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Prediction for this level of sentiment",
                  "key": "score",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Sentiment": {
            "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from 1 (negative) to 9 (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of 5. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of 5. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level.",
            "name": "Sentiment",
            "shape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:SentimentItem"
                }
              }
            }
          },
          "type_:ToxicityItem": {
            "name": "ToxicityItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Category of toxicity.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Prediction for this category of toxicity",
                  "key": "score",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Toxicity": {
            "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: toxic, severe_toxic, obscene, threat, insult, and identity_hate.",
            "name": "Toxicity",
            "shape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ToxicityItem"
                }
              }
            }
          }
        },
        "subpackages": {
          "subpackage_batch": {
            "subpackageId": "subpackage_batch",
            "name": "batch",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-jobs",
                "method": "GET",
                "id": "list-jobs",
                "originalEndpointId": "endpoint_batch.list-jobs",
                "name": "List jobs",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The maximum number of jobs to include in the response.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Include only jobs with these statuses.",
                    "key": "status",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Status"
                      }
                    }
                  },
                  {
                    "description": "Include only jobs that were created before or after `timestamp_ms`.",
                    "key": "when",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:When"
                      }
                    }
                  },
                  {
                    "description": "Defaults to the current date and time. See `when`.",
                    "key": "timestamp_ms",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The job timestamp to sort by.",
                    "key": "sort_by",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SortBy"
                      }
                    }
                  },
                  {
                    "description": "The sort direction.",
                    "key": "direction",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Direction"
                      }
                    }
                  },
                  {
                    "description": "Include only jobs of these types.",
                    "key": "type",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Type"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:UnionJob"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "job_id": "job_id",
                        "request": {
                          "callback_url": null,
                          "files": [
                            {
                              "filename": "filename",
                              "md5sum": "md5sum",
                              "content_type": "content_type"
                            }
                          ],
                          "models": {
                            "burst": {},
                            "face": {
                              "descriptions": null,
                              "facs": null,
                              "fps_pred": 3,
                              "identify_faces": false,
                              "min_face_size": 60,
                              "prob_threshold": 0.99,
                              "save_faces": false
                            },
                            "facemesh": {},
                            "language": {
                              "granularity": "word",
                              "identify_speakers": false,
                              "sentiment": null,
                              "toxicity": null
                            },
                            "ner": {
                              "identify_speakers": false
                            },
                            "prosody": {
                              "granularity": "utterance",
                              "identify_speakers": false,
                              "window": null
                            }
                          },
                          "notify": true,
                          "registry_files": [],
                          "text": [],
                          "urls": ["https://hume-tutorials.s3.amazonaws.com/faces.zip"]
                        },
                        "state": {
                          "created_timestamp_ms": 1712587158717,
                          "ended_timestamp_ms": 1712587159274,
                          "num_errors": 0,
                          "num_predictions": 10,
                          "started_timestamp_ms": 1712587158800,
                          "status": "COMPLETED"
                        },
                        "type": "INFERENCE",
                        "user_id": "user_id"
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.expressionMeasurement.batch.listJobs();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "job_id": "job_id",
                          "request": {
                            "callback_url": null,
                            "files": [
                              {
                                "filename": "filename",
                                "md5sum": "md5sum",
                                "content_type": "content_type"
                              }
                            ],
                            "models": {
                              "burst": {},
                              "face": {
                                "descriptions": null,
                                "facs": null,
                                "fps_pred": 3,
                                "identify_faces": false,
                                "min_face_size": 60,
                                "prob_threshold": 0.99,
                                "save_faces": false
                              },
                              "facemesh": {},
                              "language": {
                                "granularity": "word",
                                "identify_speakers": false,
                                "sentiment": null,
                                "toxicity": null
                              },
                              "ner": {
                                "identify_speakers": false
                              },
                              "prosody": {
                                "granularity": "utterance",
                                "identify_speakers": false,
                                "window": null
                              }
                            },
                            "notify": true,
                            "registry_files": [],
                            "text": [],
                            "urls": ["https://hume-tutorials.s3.amazonaws.com/faces.zip"]
                          },
                          "state": {
                            "created_timestamp_ms": 1712587158717,
                            "ended_timestamp_ms": 1712587159274,
                            "num_errors": 0,
                            "num_predictions": 10,
                            "started_timestamp_ms": 1712587158800,
                            "status": "COMPLETED"
                          },
                          "type": "INFERENCE",
                          "user_id": "user_id"
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Sort and filter jobs.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "start-inference-job",
                "method": "POST",
                "id": "start-inference-job",
                "originalEndpointId": "endpoint_batch.start-inference-job",
                "name": "Start inference job",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:InferenceBaseRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:JobId"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "urls": ["https://hume-tutorials.s3.amazonaws.com/faces.zip"],
                      "notify": true
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "job_id": "job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.expressionMeasurement.batch.startInferenceJob({\n    urls: [\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n    notify: true\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "urls": ["https://hume-tutorials.s3.amazonaws.com/faces.zip"],
                        "notify": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "job_id": "job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Start a new measurement inference job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-job-details",
                "method": "GET",
                "id": "get-job-details",
                "originalEndpointId": "endpoint_batch.get-job-details",
                "name": "Get job details",
                "path": {
                  "pathParameters": [
                    {
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:UnionJob"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Embedding Generation",
                    "path": "/v0/batch/jobs/job_id",
                    "pathParameters": {
                      "id": "job_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "type": "EMBEDDING_GENERATION",
                      "job_id": "string",
                      "request": {
                        "registry_file_details": [
                          {
                            "file_id": "string",
                            "file_url": "string"
                          }
                        ]
                      },
                      "state": {
                        "status": "QUEUED",
                        "created_timestamp_ms": 0
                      },
                      "user_id": "string"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.expressionMeasurement.batch.getJobDetails(\"job_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "type": "EMBEDDING_GENERATION",
                        "job_id": "string",
                        "request": {
                          "registry_file_details": [
                            {
                              "file_id": "string",
                              "file_url": "string"
                            }
                          ]
                        },
                        "state": {
                          "status": "QUEUED",
                          "created_timestamp_ms": 0
                        },
                        "user_id": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "name": "Inference",
                    "path": "/v0/batch/jobs/job_id",
                    "pathParameters": {
                      "id": "job_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "type": "INFERENCE",
                      "job_id": "job_id",
                      "request": {
                        "callback_url": null,
                        "files": [],
                        "models": {
                          "burst": {},
                          "face": {
                            "descriptions": null,
                            "facs": null,
                            "fps_pred": 3,
                            "identify_faces": false,
                            "min_face_size": 60,
                            "prob_threshold": 0.99,
                            "save_faces": false
                          },
                          "facemesh": {},
                          "language": {
                            "granularity": "word",
                            "identify_speakers": false,
                            "sentiment": null,
                            "toxicity": null
                          },
                          "ner": {
                            "identify_speakers": false
                          },
                          "prosody": {
                            "granularity": "utterance",
                            "identify_speakers": false,
                            "window": null
                          }
                        },
                        "notify": true,
                        "registry_files": [],
                        "text": [],
                        "urls": ["https://hume-tutorials.s3.amazonaws.com/faces.zip"]
                      },
                      "state": {
                        "created_timestamp_ms": 1712590457884,
                        "ended_timestamp_ms": 1712590462252,
                        "num_errors": 0,
                        "num_predictions": 10,
                        "started_timestamp_ms": 1712590457995,
                        "status": "COMPLETED"
                      },
                      "user_id": "user_id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.expressionMeasurement.batch.getJobDetails(\"job_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "type": "INFERENCE",
                        "job_id": "job_id",
                        "request": {
                          "callback_url": null,
                          "files": [],
                          "models": {
                            "burst": {},
                            "face": {
                              "descriptions": null,
                              "facs": null,
                              "fps_pred": 3,
                              "identify_faces": false,
                              "min_face_size": 60,
                              "prob_threshold": 0.99,
                              "save_faces": false
                            },
                            "facemesh": {},
                            "language": {
                              "granularity": "word",
                              "identify_speakers": false,
                              "sentiment": null,
                              "toxicity": null
                            },
                            "ner": {
                              "identify_speakers": false
                            },
                            "prosody": {
                              "granularity": "utterance",
                              "identify_speakers": false,
                              "window": null
                            }
                          },
                          "notify": true,
                          "registry_files": [],
                          "text": [],
                          "urls": ["https://hume-tutorials.s3.amazonaws.com/faces.zip"]
                        },
                        "state": {
                          "created_timestamp_ms": 1712590457884,
                          "ended_timestamp_ms": 1712590462252,
                          "num_errors": 0,
                          "num_predictions": 10,
                          "started_timestamp_ms": 1712590457995,
                          "status": "COMPLETED"
                        },
                        "user_id": "user_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get the request details and state of a given job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-job-predictions",
                "method": "GET",
                "id": "get-job-predictions",
                "originalEndpointId": "endpoint_batch.get-job-predictions",
                "name": "Get job predictions",
                "path": {
                  "pathParameters": [
                    {
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/predictions"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:UnionPredictResult"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs/job_id/predictions",
                    "pathParameters": {
                      "id": "job_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "source": {
                          "type": "url",
                          "url": "https://hume-tutorials.s3.amazonaws.com/faces.zip"
                        },
                        "results": {
                          "predictions": [
                            {
                              "file": "faces/100.jpg",
                              "models": {
                                "face": {
                                  "metadata": null,
                                  "grouped_predictions": [
                                    {
                                      "id": "unknown",
                                      "predictions": [
                                        {
                                          "frame": 0,
                                          "time": 0,
                                          "prob": 0.9994111061096191,
                                          "box": {
                                            "x": 1187.885986328125,
                                            "y": 1397.697509765625,
                                            "w": 1401.668701171875,
                                            "h": 1961.424560546875
                                          },
                                          "emotions": [
                                            {
                                              "name": "Admiration",
                                              "score": 0.10722749680280685
                                            },
                                            {
                                              "name": "Adoration",
                                              "score": 0.06395940482616425
                                            },
                                            {
                                              "name": "Aesthetic Appreciation",
                                              "score": 0.05811462551355362
                                            },
                                            {
                                              "name": "Amusement",
                                              "score": 0.14187128841876984
                                            },
                                            {
                                              "name": "Anger",
                                              "score": 0.02804684266448021
                                            },
                                            {
                                              "name": "Anxiety",
                                              "score": 0.2713485360145569
                                            },
                                            {
                                              "name": "Awe",
                                              "score": 0.33812594413757324
                                            },
                                            {
                                              "name": "Awkwardness",
                                              "score": 0.1745193600654602
                                            },
                                            {
                                              "name": "Boredom",
                                              "score": 0.23600080609321594
                                            },
                                            {
                                              "name": "Calmness",
                                              "score": 0.18988418579101562
                                            },
                                            {
                                              "name": "Concentration",
                                              "score": 0.44288986921310425
                                            },
                                            {
                                              "name": "Confusion",
                                              "score": 0.39346569776535034
                                            },
                                            {
                                              "name": "Contemplation",
                                              "score": 0.31002455949783325
                                            },
                                            {
                                              "name": "Contempt",
                                              "score": 0.048870109021663666
                                            },
                                            {
                                              "name": "Contentment",
                                              "score": 0.0579497292637825
                                            },
                                            {
                                              "name": "Craving",
                                              "score": 0.06544201076030731
                                            },
                                            {
                                              "name": "Desire",
                                              "score": 0.05526508390903473
                                            },
                                            {
                                              "name": "Determination",
                                              "score": 0.08590991795063019
                                            },
                                            {
                                              "name": "Disappointment",
                                              "score": 0.19508258998394012
                                            },
                                            {
                                              "name": "Disgust",
                                              "score": 0.031529419124126434
                                            },
                                            {
                                              "name": "Distress",
                                              "score": 0.23210826516151428
                                            },
                                            {
                                              "name": "Doubt",
                                              "score": 0.3284550905227661
                                            },
                                            {
                                              "name": "Ecstasy",
                                              "score": 0.040716782212257385
                                            },
                                            {
                                              "name": "Embarrassment",
                                              "score": 0.1467227339744568
                                            },
                                            {
                                              "name": "Empathic Pain",
                                              "score": 0.07633581757545471
                                            },
                                            {
                                              "name": "Entrancement",
                                              "score": 0.16245244443416595
                                            },
                                            {
                                              "name": "Envy",
                                              "score": 0.03267110139131546
                                            },
                                            {
                                              "name": "Excitement",
                                              "score": 0.10656816512346268
                                            },
                                            {
                                              "name": "Fear",
                                              "score": 0.3115977346897125
                                            },
                                            {
                                              "name": "Guilt",
                                              "score": 0.11615975946187973
                                            },
                                            {
                                              "name": "Horror",
                                              "score": 0.19795553386211395
                                            },
                                            {
                                              "name": "Interest",
                                              "score": 0.3136432468891144
                                            },
                                            {
                                              "name": "Joy",
                                              "score": 0.06285581737756729
                                            },
                                            {
                                              "name": "Love",
                                              "score": 0.06339752674102783
                                            },
                                            {
                                              "name": "Nostalgia",
                                              "score": 0.05866732448339462
                                            },
                                            {
                                              "name": "Pain",
                                              "score": 0.07684041559696198
                                            },
                                            {
                                              "name": "Pride",
                                              "score": 0.026822954416275024
                                            },
                                            {
                                              "name": "Realization",
                                              "score": 0.30000734329223633
                                            },
                                            {
                                              "name": "Relief",
                                              "score": 0.04414166510105133
                                            },
                                            {
                                              "name": "Romance",
                                              "score": 0.042728863656520844
                                            },
                                            {
                                              "name": "Sadness",
                                              "score": 0.14773206412792206
                                            },
                                            {
                                              "name": "Satisfaction",
                                              "score": 0.05902980640530586
                                            },
                                            {
                                              "name": "Shame",
                                              "score": 0.08103451132774353
                                            },
                                            {
                                              "name": "Surprise (negative)",
                                              "score": 0.25518184900283813
                                            },
                                            {
                                              "name": "Surprise (positive)",
                                              "score": 0.28845661878585815
                                            },
                                            {
                                              "name": "Sympathy",
                                              "score": 0.062488824129104614
                                            },
                                            {
                                              "name": "Tiredness",
                                              "score": 0.1559651643037796
                                            },
                                            {
                                              "name": "Triumph",
                                              "score": 0.01955239288508892
                                            }
                                          ],
                                          "facs": null,
                                          "descriptions": null
                                        }
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          ],
                          "errors": []
                        }
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.expressionMeasurement.batch.getJobPredictions(\"job_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "source": {
                            "type": "url",
                            "url": "https://hume-tutorials.s3.amazonaws.com/faces.zip"
                          },
                          "results": {
                            "predictions": [
                              {
                                "file": "faces/100.jpg",
                                "models": {
                                  "face": {
                                    "metadata": null,
                                    "grouped_predictions": [
                                      {
                                        "id": "unknown",
                                        "predictions": [
                                          {
                                            "frame": 0,
                                            "time": 0,
                                            "prob": 0.9994111061096191,
                                            "box": {
                                              "x": 1187.885986328125,
                                              "y": 1397.697509765625,
                                              "w": 1401.668701171875,
                                              "h": 1961.424560546875
                                            },
                                            "emotions": [
                                              {
                                                "name": "Admiration",
                                                "score": 0.10722749680280685
                                              },
                                              {
                                                "name": "Adoration",
                                                "score": 0.06395940482616425
                                              },
                                              {
                                                "name": "Aesthetic Appreciation",
                                                "score": 0.05811462551355362
                                              },
                                              {
                                                "name": "Amusement",
                                                "score": 0.14187128841876984
                                              },
                                              {
                                                "name": "Anger",
                                                "score": 0.02804684266448021
                                              },
                                              {
                                                "name": "Anxiety",
                                                "score": 0.2713485360145569
                                              },
                                              {
                                                "name": "Awe",
                                                "score": 0.33812594413757324
                                              },
                                              {
                                                "name": "Awkwardness",
                                                "score": 0.1745193600654602
                                              },
                                              {
                                                "name": "Boredom",
                                                "score": 0.23600080609321594
                                              },
                                              {
                                                "name": "Calmness",
                                                "score": 0.18988418579101562
                                              },
                                              {
                                                "name": "Concentration",
                                                "score": 0.44288986921310425
                                              },
                                              {
                                                "name": "Confusion",
                                                "score": 0.39346569776535034
                                              },
                                              {
                                                "name": "Contemplation",
                                                "score": 0.31002455949783325
                                              },
                                              {
                                                "name": "Contempt",
                                                "score": 0.048870109021663666
                                              },
                                              {
                                                "name": "Contentment",
                                                "score": 0.0579497292637825
                                              },
                                              {
                                                "name": "Craving",
                                                "score": 0.06544201076030731
                                              },
                                              {
                                                "name": "Desire",
                                                "score": 0.05526508390903473
                                              },
                                              {
                                                "name": "Determination",
                                                "score": 0.08590991795063019
                                              },
                                              {
                                                "name": "Disappointment",
                                                "score": 0.19508258998394012
                                              },
                                              {
                                                "name": "Disgust",
                                                "score": 0.031529419124126434
                                              },
                                              {
                                                "name": "Distress",
                                                "score": 0.23210826516151428
                                              },
                                              {
                                                "name": "Doubt",
                                                "score": 0.3284550905227661
                                              },
                                              {
                                                "name": "Ecstasy",
                                                "score": 0.040716782212257385
                                              },
                                              {
                                                "name": "Embarrassment",
                                                "score": 0.1467227339744568
                                              },
                                              {
                                                "name": "Empathic Pain",
                                                "score": 0.07633581757545471
                                              },
                                              {
                                                "name": "Entrancement",
                                                "score": 0.16245244443416595
                                              },
                                              {
                                                "name": "Envy",
                                                "score": 0.03267110139131546
                                              },
                                              {
                                                "name": "Excitement",
                                                "score": 0.10656816512346268
                                              },
                                              {
                                                "name": "Fear",
                                                "score": 0.3115977346897125
                                              },
                                              {
                                                "name": "Guilt",
                                                "score": 0.11615975946187973
                                              },
                                              {
                                                "name": "Horror",
                                                "score": 0.19795553386211395
                                              },
                                              {
                                                "name": "Interest",
                                                "score": 0.3136432468891144
                                              },
                                              {
                                                "name": "Joy",
                                                "score": 0.06285581737756729
                                              },
                                              {
                                                "name": "Love",
                                                "score": 0.06339752674102783
                                              },
                                              {
                                                "name": "Nostalgia",
                                                "score": 0.05866732448339462
                                              },
                                              {
                                                "name": "Pain",
                                                "score": 0.07684041559696198
                                              },
                                              {
                                                "name": "Pride",
                                                "score": 0.026822954416275024
                                              },
                                              {
                                                "name": "Realization",
                                                "score": 0.30000734329223633
                                              },
                                              {
                                                "name": "Relief",
                                                "score": 0.04414166510105133
                                              },
                                              {
                                                "name": "Romance",
                                                "score": 0.042728863656520844
                                              },
                                              {
                                                "name": "Sadness",
                                                "score": 0.14773206412792206
                                              },
                                              {
                                                "name": "Satisfaction",
                                                "score": 0.05902980640530586
                                              },
                                              {
                                                "name": "Shame",
                                                "score": 0.08103451132774353
                                              },
                                              {
                                                "name": "Surprise (negative)",
                                                "score": 0.25518184900283813
                                              },
                                              {
                                                "name": "Surprise (positive)",
                                                "score": 0.28845661878585815
                                              },
                                              {
                                                "name": "Sympathy",
                                                "score": 0.062488824129104614
                                              },
                                              {
                                                "name": "Tiredness",
                                                "score": 0.1559651643037796
                                              },
                                              {
                                                "name": "Triumph",
                                                "score": 0.01955239288508892
                                              }
                                            ],
                                            "facs": null,
                                            "descriptions": null
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            ],
                            "errors": []
                          }
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get the JSON predictions of a completed measurement or custom models inference job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-job-artifacts",
                "method": "GET",
                "id": "get-job-artifacts",
                "originalEndpointId": "endpoint_batch.get-job-artifacts",
                "name": "Get job artifacts",
                "path": {
                  "pathParameters": [
                    {
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/artifacts"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "fileDownload"
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs/:id/artifacts",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.expressionMeasurement.batch.getJobArtifacts(\"string\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "filename",
                      "value": "<filename>"
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get the artifacts ZIP of a completed measurement or custom models inference job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "start-inference-job-from-local-file",
                "method": "POST",
                "id": "start-inference-job-from-local-file",
                "originalEndpointId": "endpoint_batch.start-inference-job-from-local-file",
                "name": "Start inference job from local file",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "BatchStartInferenceJobFromLocalFileRequest",
                      "properties": [
                        {
                          "type": "bodyProperty",
                          "key": "json",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "id",
                              "value": "type_:InferenceBaseRequest"
                            }
                          }
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "fileArray",
                            "key": "file",
                            "isOptional": false
                          }
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:JobId"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "job_id": "job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.expressionMeasurement.batch.startInferenceJob({\n    urls: [\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n    notify: true\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "json": {
                          "type": "json"
                        },
                        "file": {
                          "type": "filenames",
                          "value": []
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "job_id": "job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Start a new batch inference job.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "batch",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_stream": {
            "subpackageId": "subpackage_stream",
            "name": "stream",
            "endpoints": [],
            "types": [
              "type_stream:StreamBurstJobDetails",
              "type_stream:StreamBurstBurstPredictionsItem",
              "type_stream:StreamBurstBurst",
              "type_stream:StreamBurstFacePredictionsItem",
              "type_stream:StreamBurstFace",
              "type_stream:StreamBurstFacemeshPredictionsItem",
              "type_stream:StreamBurstFacemesh",
              "type_stream:StreamBurstLanguagePredictionsItem",
              "type_stream:StreamBurstLanguage",
              "type_stream:StreamBurstProsodyPredictionsItem",
              "type_stream:StreamBurstProsody",
              "type_stream:StreamBurst",
              "type_stream:StreamErrorJobDetails",
              "type_stream:StreamError",
              "type_stream:StreamJobDetailsJobDetails",
              "type_stream:StreamJobDetails",
              "type_stream:SubscribeEvent",
              "type_stream:StreamDataModelsFace",
              "type_stream:StreamDataModelsLanguage",
              "type_stream:StreamDataModels",
              "type_stream:StreamData"
            ],
            "subpackages": [],
            "urlSlug": "stream",
            "webhooks": [],
            "websockets": [
              {
                "urlSlug": "stream",
                "auth": false,
                "headers": [
                  {
                    "key": "X-Hume-Api-Key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "messages": [
                  {
                    "type": "subscribe",
                    "origin": "server",
                    "body": {
                      "type": "reference",
                      "value": {
                        "type": "id",
                        "value": "type_stream:SubscribeEvent"
                      }
                    }
                  },
                  {
                    "type": "publish",
                    "origin": "client",
                    "body": {
                      "type": "reference",
                      "value": {
                        "type": "id",
                        "value": "type_stream:StreamData"
                      }
                    }
                  }
                ],
                "defaultEnvironment": "Default",
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "wss://api.hume.ai"
                  }
                ],
                "id": "stream",
                "name": "Stream",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/stream/models"
                    }
                  ]
                },
                "queryParameters": [],
                "examples": [
                  {
                    "path": "/v0/stream/models",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "messages": [
                      {
                        "type": "publish",
                        "body": {}
                      },
                      {
                        "type": "subscribe",
                        "body": {}
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        "auth": {
          "type": "header",
          "headerWireValue": "X-Hume-Api-Key",
          "nameOverride": "apiKey"
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      },
      "bcb7826e-ffd6-4440-b3de-6bf37440c3e2": {
        "id": "bcb7826e-ffd6-4440-b3de-6bf37440c3e2",
        "rootPackage": {
          "endpoints": [],
          "subpackages": ["subpackage_files", "subpackage_datasets", "subpackage_models", "subpackage_jobs"],
          "types": [
            "type_:AttributeFilter",
            "type_:FileInput",
            "type_:FileWithAttributesInput",
            "type_:AuthorizedFile",
            "type_:FileWithAttributes",
            "type_:Unit",
            "type_:DatasetVersionFeatureTypesValue",
            "type_:DatasetVersion",
            "type_:ReturnDataset",
            "type_:DatasetLabelsFileUriInputFeatureTypesValue",
            "type_:DatasetLabelsFileUriInput",
            "type_:ExternalModel",
            "type_:ExternalModelVersionFileType",
            "type_:ExternalModelVersion",
            "type_:ExternalModelVersionTag",
            "type_:ModelPage",
            "type_:PageableObject",
            "type_:SortObject",
            "type_:JsonObject",
            "type_:FilePage",
            "type_:DatasetPage",
            "type_:DatasetVersionPage",
            "type_:DatasetLabels",
            "type_:Alternative",
            "type_:Bcp47Tag",
            "type_:BoundingBox",
            "type_:BurstPrediction",
            "type_:Classification",
            "type_:CompletedEmbeddingGeneration",
            "type_:CompletedInference",
            "type_:CompletedTlInference",
            "type_:CompletedTraining",
            "type_:CustomModelPrediction",
            "type_:CustomModelRequest",
            "type_:Dataset",
            "type_:DatasetId",
            "type_:DatasetVersionId",
            "type_:DescriptionsScore",
            "type_:Direction",
            "type_:EmbeddingGenerationBaseRequest",
            "type_:EmotionScore",
            "type_:Error",
            "type_:EvaluationArgs",
            "type_:Face",
            "type_:FacePrediction",
            "type_:FacemeshPrediction",
            "type_:FacsScore",
            "type_:Failed",
            "type_:File",
            "type_:Granularity",
            "type_:GroupedPredictionsBurstPrediction",
            "type_:GroupedPredictionsFacePrediction",
            "type_:GroupedPredictionsFacemeshPrediction",
            "type_:GroupedPredictionsLanguagePrediction",
            "type_:GroupedPredictionsNerPrediction",
            "type_:GroupedPredictionsProsodyPrediction",
            "type_:InProgress",
            "type_:InferenceBaseRequest",
            "type_:InferencePrediction",
            "type_:InferenceRequest",
            "type_:InferenceResults",
            "type_:InferenceSourcePredictResult",
            "type_:JobEmbeddingGeneration",
            "type_:JobInference",
            "type_:JobTlInference",
            "type_:JobTraining",
            "type_:JobId",
            "type_:Language",
            "type_:LanguagePrediction",
            "type_:Models",
            "type_:ModelsPredictions",
            "type_:Ner",
            "type_:NerPrediction",
            "type_:Null",
            "type_:PositionInterval",
            "type_:PredictionsOptionalNullBurstPrediction",
            "type_:PredictionsOptionalNullFacePrediction",
            "type_:PredictionsOptionalNullFacemeshPrediction",
            "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction",
            "type_:PredictionsOptionalTranscriptionMetadataNerPrediction",
            "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction",
            "type_:Prosody",
            "type_:ProsodyPrediction",
            "type_:Queued",
            "type_:RegistryFileDetail",
            "type_:Regression",
            "type_:SentimentScore",
            "type_:SortBy",
            "type_:Source",
            "type_:SourceFile",
            "type_:SourceTextSource",
            "type_:SourceUrl",
            "type_:Url",
            "type_:StateEmbeddingGeneration",
            "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration",
            "type_:StateEmbeddingGenerationFailed",
            "type_:StateEmbeddingGenerationInProgress",
            "type_:StateEmbeddingGenerationQueued",
            "type_:StateInference",
            "type_:StateInferenceCompletedInference",
            "type_:StateInferenceFailed",
            "type_:StateInferenceInProgress",
            "type_:StateInferenceQueued",
            "type_:StateTlInference",
            "type_:StateTlInferenceCompletedTlInference",
            "type_:StateTlInferenceFailed",
            "type_:StateTlInferenceInProgress",
            "type_:StateTlInferenceQueued",
            "type_:StateTraining",
            "type_:StateTrainingCompletedTraining",
            "type_:StateTrainingFailed",
            "type_:StateTrainingInProgress",
            "type_:StateTrainingQueued",
            "type_:Status",
            "type_:TlInferencePrediction",
            "type_:TlInferenceResults",
            "type_:TlInferenceSourcePredictResult",
            "type_:Tag",
            "type_:Target",
            "type_:Task",
            "type_:TaskClassification",
            "type_:TaskRegression",
            "type_:TextSource",
            "type_:TimeInterval",
            "type_:TlInferenceBaseRequest",
            "type_:CustomModel",
            "type_:CustomModelId",
            "type_:CustomModelVersionId",
            "type_:ToxicityScore",
            "type_:TrainingBaseRequest",
            "type_:TrainingCustomModel",
            "type_:Transcription",
            "type_:TranscriptionMetadata",
            "type_:Type",
            "type_:Unconfigurable",
            "type_:UnionJob",
            "type_:UnionJobJobEmbeddingGeneration",
            "type_:UnionJobJobInference",
            "type_:UnionJobJobTlInference",
            "type_:UnionJobJobTraining",
            "type_:UnionPredictResult",
            "type_:ValidationArgs",
            "type_:When",
            "type_:Window"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_:AttributeFilter": {
            "description": "List of Attributes",
            "name": "AttributeFilter",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Attribute name (key)",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Attribute description (value)",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:FileInput": {
            "description": "File details",
            "name": "FileInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File name",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File URI",
                  "key": "uri",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Flag which denotes whether the file is stored with Hume",
                  "key": "hume_storage",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh",
                  "key": "data_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:FileWithAttributesInput": {
            "name": "FileWithAttributesInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "file",
                  "valueType": {
                    "type": "id",
                    "value": "type_:FileInput"
                  }
                },
                {
                  "description": "List of Attributes",
                  "key": "attributes",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:AttributeFilter"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:AuthorizedFile": {
            "description": "File details",
            "name": "AuthorizedFile",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated File ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File name",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "File URI",
                  "key": "uri",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "File upload URI",
                  "key": "upload_uri",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "File thumbnail URI",
                  "key": "thumbnail_uri",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Hume-generated User ID",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh",
                  "key": "data_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Updated date and time",
                  "key": "modified_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Additional details as key, value pairs",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "map",
                        "keyType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        },
                        "valueType": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Flag which denotes whether the file is stored with Hume",
                  "key": "hume_storage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Timestamp denoting when the file was uploaded to Hume",
                  "key": "hume_storage_upload_timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Indicates whether this file has been sanitized for sharing",
                  "key": "is_sanitized",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Indicates whether this file is owned by the current file reader",
                  "key": "is_owned_by_reader",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Indicates whether this file is linked to a model that is publicly shared",
                  "key": "is_linked_to_publicly_shared",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Indicates whether this file is linked to a Hume-owned model that is publicly shared",
                  "key": "is_linked_to_hume_model",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FileWithAttributes": {
            "name": "FileWithAttributes",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "file",
                  "valueType": {
                    "type": "id",
                    "value": "type_:AuthorizedFile"
                  }
                },
                {
                  "description": "List of Attributes",
                  "key": "attributes",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:AttributeFilter"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Unit": {
            "name": "Unit",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:DatasetVersionFeatureTypesValue": {
            "description": "Feature types of label mapped to feature type",
            "name": "DatasetVersionFeatureTypesValue",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CATEGORICAL"
                },
                {
                  "value": "NUMERIC"
                },
                {
                  "value": "TEXT"
                },
                {
                  "value": "DATETIME"
                },
                {
                  "value": "UNDEFINED"
                }
              ]
            }
          },
          "type_:DatasetVersion": {
            "name": "DatasetVersion",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Dataset version ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated User ID",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Dataset Labels file URI",
                  "key": "labels_file_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Feature types of label mapped to feature type",
                  "key": "feature_types",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "id",
                      "value": "type_:DatasetVersionFeatureTypesValue"
                    }
                  }
                },
                {
                  "description": "Hume-generated Dataset ID of the parent Dataset",
                  "key": "dataset_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Dataset version number",
                  "key": "dataset_version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnDataset": {
            "name": "ReturnDataset",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Dataset ID",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Dataset name",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "latest_version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DatasetVersion"
                    }
                  }
                },
                {
                  "description": "Updated date and time",
                  "key": "modified_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Additional details as key, value pairs",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "map",
                        "keyType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        },
                        "valueType": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DatasetLabelsFileUriInputFeatureTypesValue": {
            "description": "Feature types as key, value pairs",
            "name": "DatasetLabelsFileUriInputFeatureTypesValue",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CATEGORICAL"
                },
                {
                  "value": "NUMERIC"
                },
                {
                  "value": "TEXT"
                },
                {
                  "value": "DATETIME"
                },
                {
                  "value": "UNDEFINED"
                }
              ]
            }
          },
          "type_:DatasetLabelsFileUriInput": {
            "name": "DatasetLabelsFileUriInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Dataset name",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URI of a Labels File",
                  "key": "labels_file_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Feature types as key, value pairs",
                  "key": "feature_types",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "id",
                      "value": "type_:DatasetLabelsFileUriInputFeatureTypesValue"
                    }
                  }
                }
              ]
            }
          },
          "type_:ExternalModel": {
            "name": "ExternalModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Model ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Model name",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Updated date and time",
                  "key": "modified_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Total stars on this model",
                  "key": "total_stars",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Model is starred by this user",
                  "key": "model_is_starred_by_user",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Model is archived.",
                  "key": "archived",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "key": "latest_version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ExternalModelVersion"
                    }
                  }
                },
                {
                  "description": "Model is shared publicly",
                  "key": "is_publicly_shared",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_:ExternalModelVersionFileType": {
            "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh",
            "name": "ExternalModelVersionFileType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "video"
                },
                {
                  "value": "audio"
                },
                {
                  "value": "video_no_audio"
                },
                {
                  "value": "image"
                },
                {
                  "value": "text"
                },
                {
                  "value": "mediapipe_facemesh"
                }
              ]
            }
          },
          "type_:ExternalModelVersion": {
            "description": "Latest Model version number",
            "name": "ExternalModelVersion",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Model version ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated Model ID of the parent Model",
                  "key": "model_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated User ID",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Model version number",
                  "key": "version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Model version's source file URI",
                  "key": "source_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated Dataset version ID for the Dataset version the Model version was trained on",
                  "key": "dataset_version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Additional details as key, value pairs",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "map",
                        "keyType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        },
                        "valueType": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Model version description",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "List of Tags associated with the Model version",
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ExternalModelVersionTag"
                      }
                    }
                  }
                },
                {
                  "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh",
                  "key": "file_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ExternalModelVersionFileType"
                    }
                  }
                },
                {
                  "description": "Target feature, the feature the model was trained against",
                  "key": "target_feature",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Type of the task used to train",
                  "key": "task_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the batch training job",
                  "key": "training_job_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ExternalModelVersionTag": {
            "description": "List of Tags associated with the Model version",
            "name": "ExternalModelVersionTag",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Tag name (key)",
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Tag description (value)",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ModelPage": {
            "name": "ModelPage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ExternalModel"
                      }
                    }
                  }
                },
                {
                  "key": "pageable",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PageableObject"
                    }
                  }
                },
                {
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "last",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "total_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "total_pages",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "first",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "number_of_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PageableObject": {
            "name": "PageableObject",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "offset",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "paged",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "unpaged",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "page_number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "page_size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SortObject": {
            "name": "SortObject",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "sorted",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "unsorted",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:JsonObject": {
            "name": "JsonObject",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FilePage": {
            "name": "FilePage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FileWithAttributes"
                      }
                    }
                  }
                },
                {
                  "key": "pageable",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PageableObject"
                    }
                  }
                },
                {
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "last",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "total_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "total_pages",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "first",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "number_of_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DatasetPage": {
            "name": "DatasetPage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnDataset"
                      }
                    }
                  }
                },
                {
                  "key": "pageable",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PageableObject"
                    }
                  }
                },
                {
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "last",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "total_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "total_pages",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "first",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "number_of_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DatasetVersionPage": {
            "name": "DatasetVersionPage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DatasetVersion"
                      }
                    }
                  }
                },
                {
                  "key": "pageable",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PageableObject"
                    }
                  }
                },
                {
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "last",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "total_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "total_pages",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "first",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "number_of_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DatasetLabels": {
            "name": "DatasetLabels",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Dataset version ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated User ID",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Dataset Labels file URI",
                  "key": "labels_file_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Feature types json file URI",
                  "key": "feature_type_json_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated Dataset ID",
                  "key": "dataset_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Dataset version number",
                  "key": "dataset_version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Boolean indicating that this is the most recent version",
                  "key": "is_most_recent_version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_:Alternative": {
            "name": "Alternative",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "language_only"
                }
              }
            }
          },
          "type_:Bcp47Tag": {
            "name": "Bcp47Tag",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "zh"
                },
                {
                  "value": "da"
                },
                {
                  "value": "nl"
                },
                {
                  "value": "en"
                },
                {
                  "value": "en-AU"
                },
                {
                  "value": "en-IN"
                },
                {
                  "value": "en-NZ"
                },
                {
                  "value": "en-GB"
                },
                {
                  "value": "fr"
                },
                {
                  "value": "fr-CA"
                },
                {
                  "value": "de"
                },
                {
                  "value": "hi"
                },
                {
                  "value": "hi-Latn"
                },
                {
                  "value": "id"
                },
                {
                  "value": "it"
                },
                {
                  "value": "ja"
                },
                {
                  "value": "ko"
                },
                {
                  "value": "no"
                },
                {
                  "value": "pl"
                },
                {
                  "value": "pt"
                },
                {
                  "value": "pt-BR"
                },
                {
                  "value": "pt-PT"
                },
                {
                  "value": "ru"
                },
                {
                  "value": "es"
                },
                {
                  "value": "es-419"
                },
                {
                  "value": "sv"
                },
                {
                  "value": "ta"
                },
                {
                  "value": "tr"
                },
                {
                  "value": "uk"
                }
              ]
            }
          },
          "type_:BoundingBox": {
            "description": "A bounding box around a face.",
            "name": "BoundingBox",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "x-coordinate of bounding box top left corner.",
                  "key": "x",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "y-coordinate of bounding box top left corner.",
                  "key": "y",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Bounding box width.",
                  "key": "w",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Bounding box height.",
                  "key": "h",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:BurstPrediction": {
            "name": "BurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "time",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TimeInterval"
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "Modality-specific descriptive features and their scores.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DescriptionsScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:Classification": {
            "name": "Classification",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:CompletedEmbeddingGeneration": {
            "name": "CompletedEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:CompletedInference": {
            "name": "CompletedInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of predictions that were generated by this job.",
                  "key": "num_predictions",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of errors that occurred while running this job.",
                  "key": "num_errors",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:CompletedTlInference": {
            "name": "CompletedTlInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of predictions that were generated by this job.",
                  "key": "num_predictions",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of errors that occurred while running this job.",
                  "key": "num_errors",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:CompletedTraining": {
            "name": "CompletedTraining",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TrainingCustomModel"
                  }
                },
                {
                  "key": "alternatives",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "id",
                        "value": "type_:TrainingCustomModel"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CustomModelPrediction": {
            "name": "CustomModelPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "output",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "error",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "task_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:CustomModelRequest": {
            "name": "CustomModelRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Tag"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Dataset": {
            "name": "Dataset",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:DatasetId"
                  },
                  "displayName": "Dataset Id"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:DatasetVersionId"
                  },
                  "displayName": "Dataset Version Id"
                }
              ]
            }
          },
          "type_:DatasetId": {
            "name": "DatasetId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DatasetVersionId": {
            "name": "DatasetVersionId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DescriptionsScore": {
            "name": "DescriptionsScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the descriptive feature being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the descriptive feature being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Direction": {
            "name": "Direction",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "asc"
                },
                {
                  "value": "desc"
                }
              ]
            }
          },
          "type_:EmbeddingGenerationBaseRequest": {
            "name": "EmbeddingGenerationBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File ID and File URL pairs for an asset registry file",
                  "key": "registry_file_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:RegistryFileDetail"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EmotionScore": {
            "name": "EmotionScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the emotion being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the emotion being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:Error": {
            "name": "Error",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An error message.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:EvaluationArgs": {
            "name": "EvaluationArgs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "validation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ValidationArgs"
                    }
                  }
                }
              ]
            }
          },
          "type_:Face": {
            "name": "Face",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Number of frames per second to process. Other frames will be omitted from the response. Set to `0` to process every frame.",
                  "key": "fps_pred",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                },
                {
                  "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response.",
                  "key": "prob_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.99
                      }
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for faces across frames. If `true`, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If `false`, all faces will be tagged with an `unknown` ID.",
                  "key": "identify_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response.",
                  "key": "min_face_size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 10,
                        "default": 60
                      }
                    }
                  }
                },
                {
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "description": "Whether to extract and save the detected faces in the artifacts zip created by each job.",
                  "key": "save_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FacePrediction": {
            "name": "FacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Frame number",
                  "key": "frame",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Time in seconds when face detection occurred.",
                  "key": "time",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "The predicted probability that a detected face was actually a face.",
                  "key": "prob",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "box",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BoundingBox"
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "FACS 2.0 features and their scores.",
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FacsScore"
                      }
                    }
                  }
                },
                {
                  "description": "Modality-specific descriptive features and their scores.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DescriptionsScore"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FacemeshPrediction": {
            "name": "FacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:FacsScore": {
            "name": "FacsScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the FACS 2.0 feature being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the FACS 2.0 feature being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Failed": {
            "name": "Failed",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:File": {
            "name": "File",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the file.",
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The content type of the file.",
                  "key": "content_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The MD5 checksum of the file.",
                  "key": "md5sum",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Granularity": {
            "description": "The granularity at which to generate predictions. `utterance` corresponds to a natural pause or break in conversation, while `conversational_turn` corresponds to a change in speaker.",
            "name": "Granularity",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "word"
                },
                {
                  "value": "sentence"
                },
                {
                  "value": "utterance"
                },
                {
                  "value": "conversational_turn"
                }
              ]
            }
          },
          "type_:GroupedPredictionsBurstPrediction": {
            "name": "GroupedPredictionsBurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BurstPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsFacePrediction": {
            "name": "GroupedPredictionsFacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FacePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsFacemeshPrediction": {
            "name": "GroupedPredictionsFacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FacemeshPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsLanguagePrediction": {
            "name": "GroupedPredictionsLanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:LanguagePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsNerPrediction": {
            "name": "GroupedPredictionsNerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NerPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsProsodyPrediction": {
            "name": "GroupedPredictionsProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProsodyPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:InProgress": {
            "name": "InProgress",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:InferenceBaseRequest": {
            "name": "InferenceBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Models"
                    }
                  }
                },
                {
                  "key": "transcription",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Transcription"
                    }
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Text to supply directly to our language and NER models.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:InferencePrediction": {
            "name": "InferencePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "models",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ModelsPredictions"
                  }
                }
              ]
            }
          },
          "type_:InferenceRequest": {
            "name": "InferenceRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Models"
                    }
                  }
                },
                {
                  "key": "transcription",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Transcription"
                    }
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Text to supply directly to our language and NER models.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "files",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:File"
                    }
                  }
                }
              ]
            }
          },
          "type_:InferenceResults": {
            "name": "InferenceResults",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:InferencePrediction"
                    }
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Error"
                    }
                  }
                }
              ]
            }
          },
          "type_:InferenceSourcePredictResult": {
            "name": "InferenceSourcePredictResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Source"
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:InferenceResults"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:JobEmbeddingGeneration": {
            "name": "JobEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EmbeddingGenerationBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateEmbeddingGeneration"
                  }
                }
              ]
            }
          },
          "type_:JobInference": {
            "name": "JobInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:InferenceRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateInference"
                  }
                }
              ]
            }
          },
          "type_:JobTlInference": {
            "name": "JobTlInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TlInferenceBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateTlInference"
                  }
                }
              ]
            }
          },
          "type_:JobTraining": {
            "name": "JobTraining",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TrainingBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateTraining"
                  }
                }
              ]
            }
          },
          "type_:JobId": {
            "name": "JobId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the started job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Language": {
            "name": "Language",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Granularity"
                    }
                  }
                },
                {
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:LanguagePrediction": {
            "name": "LanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PositionInterval"
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TimeInterval"
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from `1` (negative) to `9` (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of `5`. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of `5`. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level.",
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SentimentScore"
                      }
                    }
                  }
                },
                {
                  "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: `toxic`, `severe_toxic`, `obscene`, `threat`, `insult`, and `identity_hate`.",
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ToxicityScore"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Models": {
            "name": "Models",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Face"
                    }
                  }
                },
                {
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Prosody"
                    }
                  }
                },
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Language"
                    }
                  }
                },
                {
                  "key": "ner",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Ner"
                    }
                  }
                },
                {
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                }
              ]
            }
          },
          "type_:ModelsPredictions": {
            "name": "ModelsPredictions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullFacePrediction"
                    }
                  }
                },
                {
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullBurstPrediction"
                    }
                  }
                },
                {
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction"
                    }
                  }
                },
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction"
                    }
                  }
                },
                {
                  "key": "ner",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataNerPrediction"
                    }
                  }
                },
                {
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullFacemeshPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:Ner": {
            "name": "Ner",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:NerPrediction": {
            "name": "NerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The recognized topic or entity.",
                  "key": "entity",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PositionInterval"
                  }
                },
                {
                  "description": "Our NER model's relative confidence in the recognized topic or entity.",
                  "key": "entity_confidence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "A measure of how often the entity is linked to by other entities.",
                  "key": "support",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "A URL which provides more information about the recognized topic or entity.",
                  "key": "uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The specific word to which the emotion predictions are linked.",
                  "key": "link_word",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TimeInterval"
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:Null": {
            "description": "No associated metadata for this model. Value will be `null`.",
            "name": "Null",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:PositionInterval": {
            "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
            "name": "PositionInterval",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The index of the first character in the text segment, inclusive.",
                  "key": "begin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The index of the last character in the text segment, exclusive.",
                  "key": "end",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalNullBurstPrediction": {
            "name": "PredictionsOptionalNullBurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsBurstPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalNullFacePrediction": {
            "name": "PredictionsOptionalNullFacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsFacePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalNullFacemeshPrediction": {
            "name": "PredictionsOptionalNullFacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsFacemeshPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataLanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsLanguagePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataNerPrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataNerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsNerPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsProsodyPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:Prosody": {
            "name": "Prosody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Granularity"
                    }
                  }
                },
                {
                  "key": "window",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Window"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ProsodyPrediction": {
            "name": "ProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TimeInterval"
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:Queued": {
            "name": "Queued",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:RegistryFileDetail": {
            "name": "RegistryFileDetail",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File ID in the Asset Registry",
                  "key": "file_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL to the file in the Asset Registry",
                  "key": "file_url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Regression": {
            "name": "Regression",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:SentimentScore": {
            "name": "SentimentScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Level of sentiment, ranging from `1` (negative) to `9` (positive)",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Prediction for this level of sentiment",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:SortBy": {
            "name": "SortBy",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "created"
                },
                {
                  "value": "started"
                },
                {
                  "value": "ended"
                }
              ]
            }
          },
          "type_:Source": {
            "name": "Source",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "url",
                  "additionalProperties": {
                    "extends": ["type_:SourceUrl"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "file",
                  "additionalProperties": {
                    "extends": ["type_:SourceFile"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text",
                  "additionalProperties": {
                    "extends": ["type_:SourceTextSource"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:SourceFile": {
            "name": "SourceFile",
            "shape": {
              "type": "object",
              "extends": ["type_:File"],
              "properties": []
            }
          },
          "type_:SourceTextSource": {
            "name": "SourceTextSource",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_:SourceUrl": {
            "name": "SourceUrl",
            "shape": {
              "type": "object",
              "extends": ["type_:Url"],
              "properties": []
            }
          },
          "type_:Url": {
            "name": "Url",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The URL of the source media file.",
                  "key": "url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:StateEmbeddingGeneration": {
            "name": "StateEmbeddingGeneration",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationCompletedEmbeddingGeneration"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration": {
            "name": "StateEmbeddingGenerationCompletedEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedEmbeddingGeneration"],
              "properties": []
            }
          },
          "type_:StateEmbeddingGenerationFailed": {
            "name": "StateEmbeddingGenerationFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateEmbeddingGenerationInProgress": {
            "name": "StateEmbeddingGenerationInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateEmbeddingGenerationQueued": {
            "name": "StateEmbeddingGenerationQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:StateInference": {
            "name": "StateInference",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceCompletedInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateInferenceCompletedInference": {
            "name": "StateInferenceCompletedInference",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedInference"],
              "properties": []
            }
          },
          "type_:StateInferenceFailed": {
            "name": "StateInferenceFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateInferenceInProgress": {
            "name": "StateInferenceInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateInferenceQueued": {
            "name": "StateInferenceQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:StateTlInference": {
            "name": "StateTlInference",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceCompletedTlInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateTlInferenceCompletedTlInference": {
            "name": "StateTlInferenceCompletedTlInference",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedTlInference"],
              "properties": []
            }
          },
          "type_:StateTlInferenceFailed": {
            "name": "StateTlInferenceFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateTlInferenceInProgress": {
            "name": "StateTlInferenceInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateTlInferenceQueued": {
            "name": "StateTlInferenceQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:StateTraining": {
            "name": "StateTraining",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingCompletedTraining"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateTrainingCompletedTraining": {
            "name": "StateTrainingCompletedTraining",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedTraining"],
              "properties": []
            }
          },
          "type_:StateTrainingFailed": {
            "name": "StateTrainingFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateTrainingInProgress": {
            "name": "StateTrainingInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateTrainingQueued": {
            "name": "StateTrainingQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:Status": {
            "name": "Status",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "QUEUED"
                },
                {
                  "value": "IN_PROGRESS"
                },
                {
                  "value": "COMPLETED"
                },
                {
                  "value": "FAILED"
                }
              ]
            }
          },
          "type_:TlInferencePrediction": {
            "name": "TlInferencePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "file_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "custom_models",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "id",
                      "value": "type_:CustomModelPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceResults": {
            "name": "TlInferenceResults",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TlInferencePrediction"
                    }
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Error"
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceSourcePredictResult": {
            "name": "TlInferenceSourcePredictResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Source"
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TlInferenceResults"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Tag": {
            "name": "Tag",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Target": {
            "name": "Target",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Task": {
            "name": "Task",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "classification",
                  "additionalProperties": {
                    "extends": ["type_:TaskClassification"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "regression",
                  "additionalProperties": {
                    "extends": ["type_:TaskRegression"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:TaskClassification": {
            "name": "TaskClassification",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_:TaskRegression": {
            "name": "TaskRegression",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_:TextSource": {
            "name": "TextSource",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:TimeInterval": {
            "description": "A time range with a beginning and end, measured in seconds.",
            "name": "TimeInterval",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Beginning of time range in seconds.",
                  "key": "begin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "End of time range in seconds.",
                  "key": "end",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceBaseRequest": {
            "name": "TlInferenceBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CustomModel"
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CustomModel": {
            "name": "CustomModel",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:CustomModelId"
                  },
                  "displayName": "Custom Model Id"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:CustomModelVersionId"
                  },
                  "displayName": "Custom Model Version Id"
                }
              ]
            }
          },
          "type_:CustomModelId": {
            "name": "CustomModelId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:CustomModelVersionId": {
            "name": "CustomModelVersionId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ToxicityScore": {
            "name": "ToxicityScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Category of toxicity.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Prediction for this category of toxicity",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TrainingBaseRequest": {
            "name": "TrainingBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CustomModelRequest"
                  }
                },
                {
                  "key": "dataset",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Dataset"
                  }
                },
                {
                  "key": "target_feature",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "label"
                      }
                    }
                  }
                },
                {
                  "key": "task",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Task"
                    }
                  }
                },
                {
                  "key": "evaluation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EvaluationArgs"
                    }
                  }
                },
                {
                  "key": "alternatives",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Alternative"
                      }
                    }
                  }
                },
                {
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TrainingCustomModel": {
            "name": "TrainingCustomModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Transcription": {
            "name": "Transcription",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Bcp47Tag"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Transcript confidence threshold. Transcripts generated with a confidence less than this threshold will be considered invalid and not used as an input for model inference.",
                  "key": "confidence_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TranscriptionMetadata": {
            "description": "Transcription metadata for your media file.",
            "name": "TranscriptionMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Value between `0.0` and `1.0` indicating our transcription model's relative confidence in the transcription of your media file.",
                  "key": "confidence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "detected_language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Bcp47Tag"
                    }
                  }
                }
              ]
            }
          },
          "type_:Type": {
            "name": "Type",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "EMBEDDING_GENERATION"
                },
                {
                  "value": "INFERENCE"
                },
                {
                  "value": "TL_INFERENCE"
                },
                {
                  "value": "TRAINING"
                }
              ]
            }
          },
          "type_:Unconfigurable": {
            "description": "To include predictions for this model type, set this field to `{}`. It is currently not configurable further.",
            "name": "Unconfigurable",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:UnionJob": {
            "name": "UnionJob",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "EMBEDDING_GENERATION",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobEmbeddingGeneration"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "INFERENCE",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "TL_INFERENCE",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobTlInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "TRAINING",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobTraining"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:UnionJobJobEmbeddingGeneration": {
            "name": "UnionJobJobEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": ["type_:JobEmbeddingGeneration"],
              "properties": []
            }
          },
          "type_:UnionJobJobInference": {
            "name": "UnionJobJobInference",
            "shape": {
              "type": "object",
              "extends": ["type_:JobInference"],
              "properties": []
            }
          },
          "type_:UnionJobJobTlInference": {
            "name": "UnionJobJobTlInference",
            "shape": {
              "type": "object",
              "extends": ["type_:JobTlInference"],
              "properties": []
            }
          },
          "type_:UnionJobJobTraining": {
            "name": "UnionJobJobTraining",
            "shape": {
              "type": "object",
              "extends": ["type_:JobTraining"],
              "properties": []
            }
          },
          "type_:UnionPredictResult": {
            "name": "UnionPredictResult",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:InferenceSourcePredictResult"
                  },
                  "displayName": "Inference Source Predict Result"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:TlInferenceSourcePredictResult"
                  },
                  "displayName": "Tl Inference Source Predict Result"
                }
              ]
            }
          },
          "type_:ValidationArgs": {
            "name": "ValidationArgs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "positive_label",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Target"
                    }
                  }
                }
              ]
            }
          },
          "type_:When": {
            "name": "When",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "created_before"
                },
                {
                  "value": "created_after"
                }
              ]
            }
          },
          "type_:Window": {
            "name": "Window",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The length of the sliding window.",
                  "key": "length",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 4
                      }
                    }
                  }
                },
                {
                  "description": "The step size of the sliding window.",
                  "key": "step",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 1
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_files": {
            "subpackageId": "subpackage_files",
            "name": "files",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-files",
                "method": "GET",
                "id": "list-files",
                "originalEndpointId": "endpoint_files.list-files",
                "name": "List files",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/files"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:FilePage"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/files",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "content": [
                        {
                          "file": {
                            "id": "id",
                            "user_id": "user_id",
                            "data_type": "data_type",
                            "is_sanitized": true,
                            "is_owned_by_reader": true
                          },
                          "attributes": [
                            {
                              "name": "name",
                              "value": "value"
                            }
                          ]
                        }
                      ],
                      "pageable": {
                        "offset": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "paged": true,
                        "unpaged": true,
                        "page_number": 1,
                        "page_size": 1
                      },
                      "total": 1,
                      "last": true,
                      "total_elements": 1,
                      "total_pages": 1,
                      "size": 1,
                      "number": 1,
                      "sort": {
                        "empty": true,
                        "sorted": true,
                        "unsorted": true
                      },
                      "first": true,
                      "number_of_elements": 1,
                      "empty": true
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.files.listFiles();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "content": [
                          {
                            "file": {
                              "id": "id",
                              "user_id": "user_id",
                              "data_type": "data_type",
                              "is_sanitized": true,
                              "is_owned_by_reader": true
                            },
                            "attributes": [
                              {
                                "name": "name",
                                "value": "value"
                              }
                            ]
                          }
                        ],
                        "pageable": {
                          "offset": 1,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1,
                        "last": true,
                        "total_elements": 1,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-files",
                "method": "POST",
                "id": "create-files",
                "originalEndpointId": "endpoint_files.create-files",
                "name": "Create files",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/files"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FileWithAttributesInput"
                      }
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FileWithAttributes"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/files",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": [
                      {
                        "file": {
                          "name": "name",
                          "hume_storage": true,
                          "data_type": "data_type"
                        }
                      }
                    ],
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "file": {
                          "id": "id",
                          "name": "name",
                          "uri": "uri",
                          "upload_uri": "upload_uri",
                          "thumbnail_uri": "thumbnail_uri",
                          "user_id": "user_id",
                          "data_type": "data_type",
                          "created_on": 1,
                          "modified_on": 1,
                          "metadata": {
                            "metadata": {}
                          },
                          "hume_storage": true,
                          "hume_storage_upload_timestamp": 1,
                          "is_sanitized": true,
                          "is_owned_by_reader": true,
                          "is_linked_to_publicly_shared": true,
                          "is_linked_to_hume_model": true
                        },
                        "attributes": [
                          {
                            "name": "name",
                            "value": "value"
                          }
                        ]
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.files.createFiles([{\n        file: {\n            name: \"name\",\n            humeStorage: true,\n            dataType: \"data_type\"\n        }\n    }]);\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "file": {
                            "name": "name",
                            "hume_storage": true,
                            "data_type": "data_type"
                          }
                        }
                      ]
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "file": {
                            "id": "id",
                            "name": "name",
                            "uri": "uri",
                            "upload_uri": "upload_uri",
                            "thumbnail_uri": "thumbnail_uri",
                            "user_id": "user_id",
                            "data_type": "data_type",
                            "created_on": 1,
                            "modified_on": 1,
                            "metadata": {
                              "metadata": {}
                            },
                            "hume_storage": true,
                            "hume_storage_upload_timestamp": 1,
                            "is_sanitized": true,
                            "is_owned_by_reader": true,
                            "is_linked_to_publicly_shared": true,
                            "is_linked_to_hume_model": true
                          },
                          "attributes": [
                            {
                              "name": "name",
                              "value": "value"
                            }
                          ]
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 201 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "upload-file",
                "method": "POST",
                "id": "upload-file",
                "originalEndpointId": "endpoint_files.upload-file",
                "name": "Upload file",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/files/upload"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "FilesUploadFileRequest",
                      "properties": [
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "file",
                            "isOptional": false
                          }
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "attributes",
                            "isOptional": true
                          }
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:FileWithAttributes"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/files/upload",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "file": {
                        "id": "id",
                        "name": "name",
                        "uri": "uri",
                        "upload_uri": "upload_uri",
                        "thumbnail_uri": "thumbnail_uri",
                        "user_id": "user_id",
                        "data_type": "data_type",
                        "created_on": 1,
                        "modified_on": 1,
                        "metadata": {
                          "metadata": {}
                        },
                        "hume_storage": true,
                        "hume_storage_upload_timestamp": 1,
                        "is_sanitized": true,
                        "is_owned_by_reader": true,
                        "is_linked_to_publicly_shared": true,
                        "is_linked_to_hume_model": true
                      },
                      "attributes": [
                        {
                          "name": "name",
                          "value": "value"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\nimport * as fs from \"fs\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.files.uploadFile(fs.createReadStream(\"/path/to/your/file\"), fs.createReadStream(\"/path/to/your/file\"));\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "file": {
                          "type": "filename",
                          "value": "<file1>"
                        },
                        "attributes": {
                          "type": "filename",
                          "value": "<file1>"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "file": {
                          "id": "id",
                          "name": "name",
                          "uri": "uri",
                          "upload_uri": "upload_uri",
                          "thumbnail_uri": "thumbnail_uri",
                          "user_id": "user_id",
                          "data_type": "data_type",
                          "created_on": 1,
                          "modified_on": 1,
                          "metadata": {
                            "metadata": {}
                          },
                          "hume_storage": true,
                          "hume_storage_upload_timestamp": 1,
                          "is_sanitized": true,
                          "is_owned_by_reader": true,
                          "is_linked_to_publicly_shared": true,
                          "is_linked_to_hume_model": true
                        },
                        "attributes": [
                          {
                            "name": "name",
                            "value": "value"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Upload a file synchronously. Returns 201 if successful. Files must have a name. Files must specify Content-Type. Request bodies, and therefore files, are limited to 100MB",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-file",
                "method": "GET",
                "id": "get-file",
                "originalEndpointId": "endpoint_files.get-file",
                "name": "Get file",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a File",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:FileWithAttributes"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/files/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "file": {
                        "id": "id",
                        "name": "name",
                        "uri": "uri",
                        "upload_uri": "upload_uri",
                        "thumbnail_uri": "thumbnail_uri",
                        "user_id": "user_id",
                        "data_type": "data_type",
                        "created_on": 1,
                        "modified_on": 1,
                        "metadata": {
                          "metadata": {}
                        },
                        "hume_storage": true,
                        "hume_storage_upload_timestamp": 1,
                        "is_sanitized": true,
                        "is_owned_by_reader": true,
                        "is_linked_to_publicly_shared": true,
                        "is_linked_to_hume_model": true
                      },
                      "attributes": [
                        {
                          "name": "name",
                          "value": "value"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.files.getFile(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "file": {
                          "id": "id",
                          "name": "name",
                          "uri": "uri",
                          "upload_uri": "upload_uri",
                          "thumbnail_uri": "thumbnail_uri",
                          "user_id": "user_id",
                          "data_type": "data_type",
                          "created_on": 1,
                          "modified_on": 1,
                          "metadata": {
                            "metadata": {}
                          },
                          "hume_storage": true,
                          "hume_storage_upload_timestamp": 1,
                          "is_sanitized": true,
                          "is_owned_by_reader": true,
                          "is_linked_to_publicly_shared": true,
                          "is_linked_to_hume_model": true
                        },
                        "attributes": [
                          {
                            "name": "name",
                            "value": "value"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-file",
                "method": "DELETE",
                "id": "delete-file",
                "originalEndpointId": "endpoint_files.delete-file",
                "name": "Delete file",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a File",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/files/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.files.deleteFile(\"id\");\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 204 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-file-name",
                "method": "PATCH",
                "id": "update-file-name",
                "originalEndpointId": "endpoint_files.update-file-name",
                "name": "Update file name",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a File",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "New File name",
                    "key": "name",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:FileWithAttributes"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/files/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {
                      "name": "name"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "file": {
                        "id": "id",
                        "name": "name",
                        "uri": "uri",
                        "upload_uri": "upload_uri",
                        "thumbnail_uri": "thumbnail_uri",
                        "user_id": "user_id",
                        "data_type": "data_type",
                        "created_on": 1,
                        "modified_on": 1,
                        "metadata": {
                          "metadata": {}
                        },
                        "hume_storage": true,
                        "hume_storage_upload_timestamp": 1,
                        "is_sanitized": true,
                        "is_owned_by_reader": true,
                        "is_linked_to_publicly_shared": true,
                        "is_linked_to_hume_model": true
                      },
                      "attributes": [
                        {
                          "name": "name",
                          "value": "value"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.files.updateFileName(\"id\", {\n    name: \"name\"\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "file": {
                          "id": "id",
                          "name": "name",
                          "uri": "uri",
                          "upload_uri": "upload_uri",
                          "thumbnail_uri": "thumbnail_uri",
                          "user_id": "user_id",
                          "data_type": "data_type",
                          "created_on": 1,
                          "modified_on": 1,
                          "metadata": {
                            "metadata": {}
                          },
                          "hume_storage": true,
                          "hume_storage_upload_timestamp": 1,
                          "is_sanitized": true,
                          "is_owned_by_reader": true,
                          "is_linked_to_publicly_shared": true,
                          "is_linked_to_hume_model": true
                        },
                        "attributes": [
                          {
                            "name": "name",
                            "value": "value"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-file-predictions",
                "method": "GET",
                "id": "get-file-predictions",
                "originalEndpointId": "endpoint_files.get-file-predictions",
                "name": "Get file predictions",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a File",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/predictions"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/files/id/predictions",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.files.getFilePredictions(\"id\");\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "files",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_datasets": {
            "subpackageId": "subpackage_datasets",
            "name": "datasets",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-datasets",
                "method": "GET",
                "id": "list-datasets",
                "originalEndpointId": "endpoint_datasets.list-datasets",
                "name": "List datasets",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Dataset name to be queried",
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DatasetPage"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "content": [
                        {
                          "id": "id",
                          "name": "name",
                          "latest_version": {
                            "id": "id",
                            "user_id": "user_id",
                            "labels_file_uri": "labels_file_uri",
                            "feature_types": {
                              "feature_types": "CATEGORICAL"
                            },
                            "dataset_id": "dataset_id",
                            "dataset_version": 1,
                            "created_on": 1
                          },
                          "modified_on": 1,
                          "metadata": {
                            "metadata": {}
                          }
                        }
                      ],
                      "pageable": {
                        "offset": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "paged": true,
                        "unpaged": true,
                        "page_number": 1,
                        "page_size": 1
                      },
                      "total": 1,
                      "last": true,
                      "total_elements": 1,
                      "total_pages": 1,
                      "size": 1,
                      "number": 1,
                      "sort": {
                        "empty": true,
                        "sorted": true,
                        "unsorted": true
                      },
                      "first": true,
                      "number_of_elements": 1,
                      "empty": true
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.listDatasets();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "content": [
                          {
                            "id": "id",
                            "name": "name",
                            "latest_version": {
                              "id": "id",
                              "user_id": "user_id",
                              "labels_file_uri": "labels_file_uri",
                              "feature_types": {
                                "feature_types": "CATEGORICAL"
                              },
                              "dataset_id": "dataset_id",
                              "dataset_version": 1,
                              "created_on": 1
                            },
                            "modified_on": 1,
                            "metadata": {
                              "metadata": {}
                            }
                          }
                        ],
                        "pageable": {
                          "offset": 1,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1,
                        "last": true,
                        "total_elements": 1,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-dataset",
                "method": "POST",
                "id": "create-dataset",
                "originalEndpointId": "endpoint_datasets.create-dataset",
                "name": "Create dataset",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "DatasetsCreateDatasetRequest",
                      "properties": [
                        {
                          "type": "bodyProperty",
                          "key": "name",
                          "valueType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          },
                          "description": "Name of the Dataset to be created"
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "feature_types",
                            "isOptional": true
                          }
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "labels_file",
                            "isOptional": false
                          }
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnDataset"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "name": "name"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "name": "name",
                      "latest_version": {
                        "id": "id",
                        "user_id": "user_id",
                        "labels_file_uri": "labels_file_uri",
                        "feature_types": {
                          "feature_types": "CATEGORICAL"
                        },
                        "dataset_id": "dataset_id",
                        "dataset_version": 1,
                        "created_on": 1
                      },
                      "modified_on": 1,
                      "metadata": {
                        "metadata": {
                          "metadata": {
                            "key": "value"
                          }
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\nimport * as fs from \"fs\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.createDataset(fs.createReadStream(\"/path/to/your/file\"), fs.createReadStream(\"/path/to/your/file\"), {\n    name: \"name\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "name": {
                          "type": "json",
                          "value": "name"
                        },
                        "feature_types": {
                          "type": "filename",
                          "value": "<file1>"
                        },
                        "labels_file": {
                          "type": "filename",
                          "value": "<file1>"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "name": "name",
                        "latest_version": {
                          "id": "id",
                          "user_id": "user_id",
                          "labels_file_uri": "labels_file_uri",
                          "feature_types": {
                            "feature_types": "CATEGORICAL"
                          },
                          "dataset_id": "dataset_id",
                          "dataset_version": 1,
                          "created_on": 1
                        },
                        "modified_on": 1,
                        "metadata": {
                          "metadata": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 201 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-dataset",
                "method": "GET",
                "id": "get-dataset",
                "originalEndpointId": "endpoint_datasets.get-dataset",
                "name": "Get dataset",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnDataset"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "name": "name",
                      "latest_version": {
                        "id": "id",
                        "user_id": "user_id",
                        "labels_file_uri": "labels_file_uri",
                        "feature_types": {
                          "feature_types": "CATEGORICAL"
                        },
                        "dataset_id": "dataset_id",
                        "dataset_version": 1,
                        "created_on": 1
                      },
                      "modified_on": 1,
                      "metadata": {
                        "metadata": {
                          "metadata": {
                            "key": "value"
                          }
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.getDataset(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "name": "name",
                        "latest_version": {
                          "id": "id",
                          "user_id": "user_id",
                          "labels_file_uri": "labels_file_uri",
                          "feature_types": {
                            "feature_types": "CATEGORICAL"
                          },
                          "dataset_id": "dataset_id",
                          "dataset_version": 1,
                          "created_on": 1
                        },
                        "modified_on": 1,
                        "metadata": {
                          "metadata": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-dataset-version",
                "method": "POST",
                "id": "create-dataset-version",
                "originalEndpointId": "endpoint_datasets.create-dataset-version",
                "name": "Create dataset version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "DatasetsCreateDatasetVersionRequest",
                      "properties": [
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "feature_types",
                            "isOptional": true
                          }
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "labels_file",
                            "isOptional": false
                          }
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnDataset"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "id": "id",
                        "name": "name",
                        "latest_version": {
                          "id": "id",
                          "user_id": "user_id",
                          "labels_file_uri": "labels_file_uri",
                          "feature_types": {
                            "feature_types": "CATEGORICAL"
                          },
                          "dataset_id": "dataset_id",
                          "dataset_version": 1,
                          "created_on": 1
                        },
                        "modified_on": 1,
                        "metadata": {
                          "metadata": {}
                        }
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\nimport * as fs from \"fs\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.createDatasetVersion(fs.createReadStream(\"/path/to/your/file\"), fs.createReadStream(\"/path/to/your/file\"), \"id\");\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "feature_types": {
                          "type": "filename",
                          "value": "<file1>"
                        },
                        "labels_file": {
                          "type": "filename",
                          "value": "<file1>"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "id": "id",
                          "name": "name",
                          "latest_version": {
                            "id": "id",
                            "user_id": "user_id",
                            "labels_file_uri": "labels_file_uri",
                            "feature_types": {
                              "feature_types": "CATEGORICAL"
                            },
                            "dataset_id": "dataset_id",
                            "dataset_version": 1,
                            "created_on": 1
                          },
                          "modified_on": 1,
                          "metadata": {
                            "metadata": {}
                          }
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-dataset",
                "method": "DELETE",
                "id": "delete-dataset",
                "originalEndpointId": "endpoint_datasets.delete-dataset",
                "name": "Delete dataset",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.deleteDataset(\"id\");\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 204 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-dataset-versions",
                "method": "GET",
                "id": "list-dataset-versions",
                "originalEndpointId": "endpoint_datasets.list-dataset-versions",
                "name": "List dataset versions",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/versions"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DatasetVersionPage"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets/id/versions",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "content": [
                        {
                          "id": "id",
                          "user_id": "user_id",
                          "labels_file_uri": "labels_file_uri",
                          "feature_types": {
                            "feature_types": "CATEGORICAL"
                          },
                          "dataset_id": "dataset_id",
                          "dataset_version": 1,
                          "created_on": 1
                        }
                      ],
                      "pageable": {
                        "offset": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "paged": true,
                        "unpaged": true,
                        "page_number": 1,
                        "page_size": 1
                      },
                      "total": 1,
                      "last": true,
                      "total_elements": 1,
                      "total_pages": 1,
                      "size": 1,
                      "number": 1,
                      "sort": {
                        "empty": true,
                        "sorted": true,
                        "unsorted": true
                      },
                      "first": true,
                      "number_of_elements": 1,
                      "empty": true
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.listDatasetVersions(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "content": [
                          {
                            "id": "id",
                            "user_id": "user_id",
                            "labels_file_uri": "labels_file_uri",
                            "feature_types": {
                              "feature_types": "CATEGORICAL"
                            },
                            "dataset_id": "dataset_id",
                            "dataset_version": 1,
                            "created_on": 1
                          }
                        ],
                        "pageable": {
                          "offset": 1,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1,
                        "last": true,
                        "total_elements": 1,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-dataset-files",
                "method": "GET",
                "id": "list-dataset-files",
                "originalEndpointId": "endpoint_datasets.list-dataset-files",
                "name": "List dataset files",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/files"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FilePage"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets/id/files",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "content": [
                          {
                            "file": {
                              "id": "id",
                              "user_id": "user_id",
                              "data_type": "data_type",
                              "is_sanitized": true,
                              "is_owned_by_reader": true
                            }
                          }
                        ],
                        "pageable": {
                          "offset": 1,
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1,
                        "last": true,
                        "total_elements": 1,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.listDatasetFiles(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "content": [
                            {
                              "file": {
                                "id": "id",
                                "user_id": "user_id",
                                "data_type": "data_type",
                                "is_sanitized": true,
                                "is_owned_by_reader": true
                              }
                            }
                          ],
                          "pageable": {
                            "offset": 1,
                            "paged": true,
                            "unpaged": true,
                            "page_number": 1,
                            "page_size": 1
                          },
                          "total": 1,
                          "last": true,
                          "total_elements": 1,
                          "total_pages": 1,
                          "size": 1,
                          "number": 1,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "first": true,
                          "number_of_elements": 1,
                          "empty": true
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-dataset-version",
                "method": "GET",
                "id": "get-dataset-version",
                "originalEndpointId": "endpoint_datasets.get-dataset-version",
                "name": "Get dataset version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset version",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DatasetLabels"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets/version/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "user_id": "user_id",
                      "labels_file_uri": "labels_file_uri",
                      "feature_type_json_uri": "feature_type_json_uri",
                      "dataset_id": "dataset_id",
                      "dataset_version": 1,
                      "created_on": 1,
                      "is_most_recent_version": true
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.getDatasetVersion(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "user_id": "user_id",
                        "labels_file_uri": "labels_file_uri",
                        "feature_type_json_uri": "feature_type_json_uri",
                        "dataset_id": "dataset_id",
                        "dataset_version": 1,
                        "created_on": 1,
                        "is_most_recent_version": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-dataset-version-files",
                "method": "GET",
                "id": "list-dataset-version-files",
                "originalEndpointId": "endpoint_datasets.list-dataset-version-files",
                "name": "List dataset version files",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset version",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/files"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FilePage"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets/version/id/files",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "content": [
                          {
                            "file": {
                              "id": "id",
                              "user_id": "user_id",
                              "data_type": "data_type",
                              "is_sanitized": true,
                              "is_owned_by_reader": true
                            }
                          }
                        ],
                        "pageable": {
                          "offset": 1,
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1,
                        "last": true,
                        "total_elements": 1,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.listDatasetVersionFiles(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "content": [
                            {
                              "file": {
                                "id": "id",
                                "user_id": "user_id",
                                "data_type": "data_type",
                                "is_sanitized": true,
                                "is_owned_by_reader": true
                              }
                            }
                          ],
                          "pageable": {
                            "offset": 1,
                            "paged": true,
                            "unpaged": true,
                            "page_number": 1,
                            "page_size": 1
                          },
                          "total": 1,
                          "last": true,
                          "total_elements": 1,
                          "total_pages": 1,
                          "size": 1,
                          "number": 1,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "first": true,
                          "number_of_elements": 1,
                          "empty": true
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "datasets",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_models": {
            "subpackageId": "subpackage_models",
            "name": "models",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-models",
                "method": "GET",
                "id": "list-models",
                "originalEndpointId": "endpoint_models.list-models",
                "name": "List models",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/models"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Model name to be queried",
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ModelPage"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/models",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "content": [
                        {
                          "id": "id",
                          "name": "name",
                          "created_on": 1,
                          "modified_on": 1,
                          "total_stars": 1,
                          "model_is_starred_by_user": true,
                          "archived": true,
                          "latest_version": {
                            "id": "id",
                            "model_id": "model_id",
                            "user_id": "user_id",
                            "version": "version",
                            "source_uri": "source_uri",
                            "dataset_version_id": "dataset_version_id",
                            "created_on": 1
                          },
                          "is_publicly_shared": true
                        }
                      ],
                      "pageable": {
                        "offset": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "paged": true,
                        "unpaged": true,
                        "page_number": 1,
                        "page_size": 1
                      },
                      "total": 1,
                      "last": true,
                      "total_elements": 1,
                      "total_pages": 1,
                      "size": 1,
                      "number": 1,
                      "sort": {
                        "empty": true,
                        "sorted": true,
                        "unsorted": true
                      },
                      "first": true,
                      "number_of_elements": 1,
                      "empty": true
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.models.listModels();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "content": [
                          {
                            "id": "id",
                            "name": "name",
                            "created_on": 1,
                            "modified_on": 1,
                            "total_stars": 1,
                            "model_is_starred_by_user": true,
                            "archived": true,
                            "latest_version": {
                              "id": "id",
                              "model_id": "model_id",
                              "user_id": "user_id",
                              "version": "version",
                              "source_uri": "source_uri",
                              "dataset_version_id": "dataset_version_id",
                              "created_on": 1
                            },
                            "is_publicly_shared": true
                          }
                        ],
                        "pageable": {
                          "offset": 1,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1,
                        "last": true,
                        "total_elements": 1,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-model-details",
                "method": "GET",
                "id": "get-model-details",
                "originalEndpointId": "endpoint_models.get-model-details",
                "name": "Get model details",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Model",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/models/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ExternalModel"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/models/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "name": "name",
                      "created_on": 1,
                      "modified_on": 1,
                      "total_stars": 1,
                      "model_is_starred_by_user": true,
                      "archived": true,
                      "latest_version": {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1,
                        "metadata": {
                          "metadata": {}
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      },
                      "is_publicly_shared": true
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.models.getModelDetails(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "total_stars": 1,
                        "model_is_starred_by_user": true,
                        "archived": true,
                        "latest_version": {
                          "id": "id",
                          "model_id": "model_id",
                          "user_id": "user_id",
                          "version": "version",
                          "source_uri": "source_uri",
                          "dataset_version_id": "dataset_version_id",
                          "created_on": 1,
                          "metadata": {
                            "metadata": {}
                          },
                          "description": "description",
                          "tags": [
                            {
                              "key": "key",
                              "value": "value"
                            }
                          ],
                          "file_type": "video",
                          "target_feature": "target_feature",
                          "task_type": "task_type",
                          "training_job_id": "training_job_id"
                        },
                        "is_publicly_shared": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-model-name",
                "method": "PATCH",
                "id": "update-model-name",
                "originalEndpointId": "endpoint_models.update-model-name",
                "name": "Update model name",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Model",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/models/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "New Model name",
                    "key": "name",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ExternalModel"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/models/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {
                      "name": "name"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "name": "name",
                      "created_on": 1,
                      "modified_on": 1,
                      "total_stars": 1,
                      "model_is_starred_by_user": true,
                      "archived": true,
                      "latest_version": {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1,
                        "metadata": {
                          "metadata": {}
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      },
                      "is_publicly_shared": true
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.models.updateModelName(\"id\", {\n    name: \"name\"\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "total_stars": 1,
                        "model_is_starred_by_user": true,
                        "archived": true,
                        "latest_version": {
                          "id": "id",
                          "model_id": "model_id",
                          "user_id": "user_id",
                          "version": "version",
                          "source_uri": "source_uri",
                          "dataset_version_id": "dataset_version_id",
                          "created_on": 1,
                          "metadata": {
                            "metadata": {}
                          },
                          "description": "description",
                          "tags": [
                            {
                              "key": "key",
                              "value": "value"
                            }
                          ],
                          "file_type": "video",
                          "target_feature": "target_feature",
                          "task_type": "task_type",
                          "training_job_id": "training_job_id"
                        },
                        "is_publicly_shared": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-model-versions",
                "method": "GET",
                "id": "list-model-versions",
                "originalEndpointId": "endpoint_models.list-model-versions",
                "name": "List model versions",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/models/version"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Hume-generated Model Version IDs to be queried",
                    "key": "id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Model version name to be queried",
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Model version number to be queried",
                    "key": "version",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ExternalModelVersion"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/models/version",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1,
                        "metadata": {
                          "metadata": {}
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.models.listModelVersions();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "id": "id",
                          "model_id": "model_id",
                          "user_id": "user_id",
                          "version": "version",
                          "source_uri": "source_uri",
                          "dataset_version_id": "dataset_version_id",
                          "created_on": 1,
                          "metadata": {
                            "metadata": {}
                          },
                          "description": "description",
                          "tags": [
                            {
                              "key": "key",
                              "value": "value"
                            }
                          ],
                          "file_type": "video",
                          "target_feature": "target_feature",
                          "task_type": "task_type",
                          "training_job_id": "training_job_id"
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-model-version",
                "method": "GET",
                "id": "get-model-version",
                "originalEndpointId": "endpoint_models.get-model-version",
                "name": "Get model version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Model version",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/models/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ExternalModelVersion"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/models/version/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "model_id": "model_id",
                      "user_id": "user_id",
                      "version": "version",
                      "source_uri": "source_uri",
                      "dataset_version_id": "dataset_version_id",
                      "created_on": 1,
                      "metadata": {
                        "metadata": {
                          "metadata": {
                            "key": "value"
                          }
                        }
                      },
                      "description": "description",
                      "tags": [
                        {
                          "key": "key",
                          "value": "value"
                        }
                      ],
                      "file_type": "video",
                      "target_feature": "target_feature",
                      "task_type": "task_type",
                      "training_job_id": "training_job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.models.getModelVersion(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1,
                        "metadata": {
                          "metadata": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-model-description",
                "method": "PATCH",
                "id": "update-model-description",
                "originalEndpointId": "endpoint_models.update-model-description",
                "name": "Update model description",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Model Version",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/models/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ExternalModelVersion"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/models/version/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": "string",
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "model_id": "model_id",
                      "user_id": "user_id",
                      "version": "version",
                      "source_uri": "source_uri",
                      "dataset_version_id": "dataset_version_id",
                      "created_on": 1,
                      "metadata": {
                        "metadata": {
                          "metadata": {
                            "key": "value"
                          }
                        }
                      },
                      "description": "description",
                      "tags": [
                        {
                          "key": "key",
                          "value": "value"
                        }
                      ],
                      "file_type": "video",
                      "target_feature": "target_feature",
                      "task_type": "task_type",
                      "training_job_id": "training_job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.models.updateModelDescription(\"id\", \"string\");\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": "string"
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1,
                        "metadata": {
                          "metadata": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "models",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_jobs": {
            "subpackageId": "subpackage_jobs",
            "name": "jobs",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "start-training-job",
                "method": "POST",
                "id": "start-training-job",
                "originalEndpointId": "endpoint_jobs.start-training-job",
                "name": "Start training job",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/v0/batch/jobs/tl/train"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:TrainingBaseRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:JobId"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/v0/batch/jobs/tl/train",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "custom_model": {
                        "name": "name"
                      },
                      "dataset": {
                        "id": "id"
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "job_id": "job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.jobs.startTrainingJob({\n    customModel: {\n        name: \"name\"\n    },\n    dataset: {\n        id: \"id\"\n    }\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "custom_model": {
                          "name": "name"
                        },
                        "dataset": {
                          "id": "id"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "job_id": "job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Start a new custom models training job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "start-custom-models-inference-job",
                "method": "POST",
                "id": "start-custom-models-inference-job",
                "originalEndpointId": "endpoint_jobs.start-custom-models-inference-job",
                "name": "Start custom models inference job",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/v0/batch/jobs/tl/inference"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:TlInferenceBaseRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:JobId"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/v0/batch/jobs/tl/inference",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "custom_model": {
                        "id": "id"
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "job_id": "job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.jobs.startCustomModelsInferenceJob({\n    customModel: {\n        id: \"id\"\n    }\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "custom_model": {
                          "id": "id"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "job_id": "job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Start a new custom models inference job.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "jobs",
            "webhooks": [],
            "websockets": []
          }
        },
        "auth": {
          "type": "header",
          "headerWireValue": "X-Hume-Api-Key",
          "nameOverride": "apiKey"
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      },
      "8b03e44c-d4e2-4613-a138-e25b8c65c3cb": {
        "id": "8b03e44c-d4e2-4613-a138-e25b8c65c3cb",
        "rootPackage": {
          "endpoints": [],
          "subpackages": [
            "subpackage_tools",
            "subpackage_prompts",
            "subpackage_configs",
            "subpackage_chats",
            "subpackage_chatGroups",
            "subpackage_chat"
          ],
          "types": [
            "type_:ReturnUserDefinedTool",
            "type_:ReturnPrompt",
            "type_:PostedBuiltinTool",
            "type_:PostedLanguageModelModelProvider",
            "type_:PostedLanguageModel",
            "type_:PostedPromptSpec",
            "type_:PostedUserDefinedToolSpec",
            "type_:PostedVoiceName",
            "type_:PostedVoice",
            "type_:ReturnBuiltinTool",
            "type_:ReturnConfig",
            "type_:ReturnLanguageModel",
            "type_:ReturnVoice",
            "type_:ReturnPagedUserDefinedTools",
            "type_:ReturnPagedPrompts",
            "type_:ReturnPagedConfigs",
            "type_:ReturnChat",
            "type_:ReturnConfigSpec",
            "type_:ReturnPagedChats",
            "type_:ReturnChatEvent",
            "type_:ReturnChatPagedEvents",
            "type_:ReturnActiveChatCount",
            "type_:ReturnActiveChatCountPerTag",
            "type_:ReturnChatGroupPagedEvents",
            "type_:ReturnChatGroupPagedChats",
            "type_:ReturnChatGroup",
            "type_:ReturnPagedChatGroups",
            "type_:AssistantEnd",
            "type_:AssistantInput",
            "type_:AssistantMessage",
            "type_:AudioConfiguration",
            "type_:AudioInput",
            "type_:AudioOutput",
            "type_:BuiltInTool",
            "type_:BuiltinToolConfig",
            "type_:ChatMessageToolResult",
            "type_:ChatMessage",
            "type_:ChatMetadata",
            "type_:Context",
            "type_:ContextType",
            "type_:EmotionScores",
            "type_:Encoding",
            "type_:WebSocketError",
            "type_:ErrorLevel",
            "type_:Inference",
            "type_:MillisecondInterval",
            "type_:PauseAssistantMessage",
            "type_:ProsodyInference",
            "type_:ResumeAssistantMessage",
            "type_:Role",
            "type_:SessionSettings",
            "type_:Tool",
            "type_:ToolCallMessage",
            "type_:ToolErrorMessage",
            "type_:ToolResponseMessage",
            "type_:ToolType",
            "type_:UserInput",
            "type_:UserInterruption",
            "type_:UserMessage",
            "type_:TtsInput",
            "type_:TextInput",
            "type_:FunctionCallResponseInput"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_chat:SubscribeEvent": {
            "name": "SubscribeEvent",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:AssistantEnd"
                  },
                  "displayName": "Assistant End"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:AssistantMessage"
                  },
                  "displayName": "Assistant Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:AudioOutput"
                  },
                  "displayName": "Audio Output"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ChatMetadata"
                  },
                  "displayName": "Chat Metadata"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:WebSocketError"
                  },
                  "displayName": "Web Socket Error"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:UserInterruption"
                  },
                  "displayName": "User Interruption"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:UserMessage"
                  },
                  "displayName": "User Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolCallMessage"
                  },
                  "displayName": "Tool Call Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolResponseMessage"
                  },
                  "displayName": "Tool Response Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolErrorMessage"
                  },
                  "displayName": "Tool Error Message"
                }
              ]
            }
          },
          "type_chat:PublishEvent": {
            "name": "PublishEvent",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:AudioInput"
                  },
                  "displayName": "Audio Input"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:SessionSettings"
                  },
                  "displayName": "Session Settings"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:UserInput"
                  },
                  "displayName": "User Input"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:AssistantInput"
                  },
                  "displayName": "Assistant Input"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolResponseMessage"
                  },
                  "displayName": "Tool Response Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolErrorMessage"
                  },
                  "displayName": "Tool Error Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:PauseAssistantMessage"
                  },
                  "displayName": "Pause Assistant Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ResumeAssistantMessage"
                  },
                  "displayName": "Resume Assistant Message"
                }
              ]
            }
          },
          "type_:ReturnUserDefinedTool": {
            "description": "A specific tool version returned from the server",
            "name": "ReturnUserDefinedTool",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Type of Tool. Values from the ToolType enum.",
                  "key": "tool_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Identifier for a Tool. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Version number for a Tool. Version numbers should be integers. The combination of configId and version number is unique.",
                  "key": "version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Inidicates whether this tool is using a fixed version number or auto-updating to the latest version. Values from the VersionType enum.",
                  "key": "version_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Description that is appended to a specific version of a Tool.",
                  "key": "version_description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Name applied to all versions of a particular Tool.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The timestamp when the first version of this tool was created.",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The timestamp when this version of the tool was created.",
                  "key": "modified_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Text to use if the tool fails to generate content.",
                  "key": "fallback_content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Text describing what the tool does.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Stringified JSON defining the parameters used by this version of the Tool.",
                  "key": "parameters",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnPrompt": {
            "description": "A specific prompt version returned from the server",
            "name": "ReturnPrompt",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a Prompt. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Version number for a Prompt. Version numbers should be integers. The combination of configId and version number is unique.",
                  "key": "version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Inidicates whether this prompt is using a fixed version number or auto-updating to the latest version. Values from the VersionType enum.",
                  "key": "version_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Description that is appended to a specific version of a Prompt.",
                  "key": "version_description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Name applied to all versions of a particular Prompt.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The timestamp when the first version of this prompt was created.",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The timestamp when this version of the prompt was created.",
                  "key": "modified_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Text used for this version of the Prompt.",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:PostedBuiltinTool": {
            "description": "A configuration of a built-in tool to be posted to the server",
            "name": "PostedBuiltinTool",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name applied to all versions of a particular Tool.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Text to use if the tool fails to generate content.",
                  "key": "fallback_content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PostedLanguageModelModelProvider": {
            "description": "The provider of this model. Based on the enum modelProvider.",
            "name": "PostedLanguageModelModelProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "OPEN_AI"
                },
                {
                  "value": "CUSTOM_LANGUAGE_MODEL"
                },
                {
                  "value": "ANTHROPIC"
                },
                {
                  "value": "FIREWORKS"
                },
                {
                  "value": "GROQ"
                }
              ]
            }
          },
          "type_:PostedLanguageModel": {
            "description": "A LanguageModel to be posted to the server",
            "name": "PostedLanguageModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The provider of this model. Based on the enum modelProvider.",
                  "key": "model_provider",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PostedLanguageModelModelProvider"
                    }
                  }
                },
                {
                  "description": "String that specifies the model to use with modelProvider.",
                  "key": "model_resource",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Model temperature.",
                  "key": "temperature",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PostedPromptSpec": {
            "description": "A specific prompt identifier to be posted to the server",
            "name": "PostedPromptSpec",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a Prompt. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Version number for a Prompt. Version numbers should be integers. The combination of configId and version number is unique.",
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PostedUserDefinedToolSpec": {
            "description": "A specific tool identifier to be posted to the server",
            "name": "PostedUserDefinedToolSpec",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a Tool. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Version number for a Tool. Version numbers should be integers. The combination of configId and version number is unique.",
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PostedVoiceName": {
            "description": "String with the name of the voice to use.",
            "name": "PostedVoiceName",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ITO"
                },
                {
                  "value": "DACHER"
                }
              ]
            }
          },
          "type_:PostedVoice": {
            "description": "A Voice specification posted to the server",
            "name": "PostedVoice",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The provider of the voice to use.",
                  "key": "provider",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "HUME_AI"
                      }
                    }
                  }
                },
                {
                  "description": "String with the name of the voice to use.",
                  "key": "name",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PostedVoiceName"
                  }
                }
              ]
            }
          },
          "type_:ReturnBuiltinTool": {
            "description": "A specific builtin tool version returned from the server",
            "name": "ReturnBuiltinTool",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Type of Tool. Values from the ToolType enum.",
                  "key": "tool_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Name applied to all versions of a particular Tool.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Text to use if the tool fails to generate content.",
                  "key": "fallback_content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnConfig": {
            "description": "A specific config version returned from the server",
            "name": "ReturnConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a Config. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Version number for a Config. Version numbers should be integers. The combination of configId and version number is unique.",
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Description that is appended to a specific version of a Config.",
                  "key": "version_description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Name applied to all versions of a particular Config.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The timestamp when the first version of this config was created.",
                  "key": "created_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The timestamp when this version of the config was created.",
                  "key": "modified_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "prompt",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnPrompt"
                    }
                  }
                },
                {
                  "key": "voice",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnVoice"
                    }
                  }
                },
                {
                  "key": "language_model",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnLanguageModel"
                    }
                  }
                },
                {
                  "description": "List of user-defined tools associated with this config.",
                  "key": "tools",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:ReturnUserDefinedTool"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of built-in tools associated with this config",
                  "key": "builtin_tools",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:ReturnBuiltinTool"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnLanguageModel": {
            "description": "A specific LanguageModel",
            "name": "ReturnLanguageModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The provider of this model. Based on the enum modelProvider.",
                  "key": "model_provider",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "String that specifies the model to use with modelProvider.",
                  "key": "model_resource",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Model temperature.",
                  "key": "temperature",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnVoice": {
            "description": "A specific voice specification",
            "name": "ReturnVoice",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The provider of the voice to use. Based on the enum VoiceProvider.",
                  "key": "provider",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "String with the name of the voice to use.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnPagedUserDefinedTools": {
            "description": "A paginated list of user defined tool versions returned from the server",
            "name": "ReturnPagedUserDefinedTools",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The page number of the returned results.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of results returned per page.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "List of tools returned for the specified page number and page size.",
                  "key": "tools_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnUserDefinedTool"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnPagedPrompts": {
            "description": "A paginated list of prompt versions returned from the server",
            "name": "ReturnPagedPrompts",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The page number of the returned results.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of results returned per page.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "List of prompts returned for the specified page number and page size.",
                  "key": "prompts_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnPrompt"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnPagedConfigs": {
            "description": "A paginated list of config versions returned from the server",
            "name": "ReturnPagedConfigs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The page number of the returned results.",
                  "key": "page_number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The number of results returned per page.",
                  "key": "page_size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "List of prompts returned for the specified page number and page size.",
                  "key": "configs_page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnConfig"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnChat": {
            "description": "A description of chat and its status",
            "name": "ReturnChat",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a chat. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Identifier for the chat group. Any chat resumed from this chat will have the same chat_group_id. Formatted as a UUID.",
                  "key": "chat_group_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Optional tag applied to this chat used to group chats by user, application, etc.",
                  "key": "tag",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The status of the chat. Values from the ChatStatus enum.",
                  "key": "status",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The timestamp when the chat started, formatted as a Unix epoch milliseconds.",
                  "key": "start_timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The timestamp when the chat ended, formatted as a Unix epoch milliseconds.",
                  "key": "end_timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The total number of events currently in this chat.",
                  "key": "event_count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Stringified JSON with additional metadata about the chat.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnConfigSpec"
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnConfigSpec": {
            "description": "An id/version number for a specific config version",
            "name": "ReturnConfigSpec",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a Config. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Version number for a Config. Version numbers should be integers. The combination of configId and version number is unique.",
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnPagedChats": {
            "description": "A paginated list of chats returned from the server",
            "name": "ReturnPagedChats",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The page number of the returned results.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of results returned per page.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "List of chats and their metadata returned for the specified page number and page size.",
                  "key": "chats_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnChat"
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnChatEvent": {
            "description": "A description of a single event in a chat returned from the server",
            "name": "ReturnChatEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a chat event. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Identifier for the chat this event occurred in. Formatted as a UUID.",
                  "key": "chat_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The timestamp when the chat event occurred, formatted as a Unix epoch milliseconds.",
                  "key": "timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The role of the user who generated the chat event. Values from the Role enum.",
                  "key": "role",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of chat event. Values from the ChatEventType enum.",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The text of the chat message, either transcribed from speaker audio or generated by the agent.",
                  "key": "message_text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Stringified JSON with data about emotional content/prosody of the event.",
                  "key": "emotion_features",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Stringified JSON with additional metadata about the chat event.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnChatPagedEvents": {
            "description": "A description of chat status with a paginated list of chat events returned from the server",
            "name": "ReturnChatPagedEvents",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a chat. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Identifier for the chat group. Any chat resumed from this chat will have the same chat_group_id. Formatted as a UUID.",
                  "key": "chat_group_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Optional tag applied to this chat used to group chats by user, application, etc.",
                  "key": "tag",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The status of the chat. Values from the ChatStatus enum.",
                  "key": "status",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The timestamp when the chat started, formatted as a Unix epoch milliseconds.",
                  "key": "start_timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The timestamp when the chat ended, formatted as a Unix epoch milliseconds.",
                  "key": "end_timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "List of chat events with the specified page number and page size.",
                  "key": "events_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnChatEvent"
                    }
                  }
                },
                {
                  "description": "Stringified JSON with additional metadata about the chat.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The page number of the returned results.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of results returned per page.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnConfigSpec"
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnActiveChatCount": {
            "description": "A description of current chat chat sessions for a user",
            "name": "ReturnActiveChatCount",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The timestamp for when chat status was measured. Formatted as a Unix epoch milliseconds.",
                  "key": "timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of active chats for this user.",
                  "key": "total_user_active_chats",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The maximum number of concurrent active chats for this user.",
                  "key": "max_allowed_active_chats",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Boolean indicating if the user is allowed to start more chats.",
                  "key": "more_active_chats_allowed",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Optional List of chat counts per tag.",
                  "key": "per_tag",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:ReturnActiveChatCountPerTag"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnActiveChatCountPerTag": {
            "description": "A description of current chat chat sessions per tag",
            "name": "ReturnActiveChatCountPerTag",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "User tag applied to a chat.",
                  "key": "tag",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The total number of active chats for this user with the specified tag.",
                  "key": "total_tag_active_chats",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnChatGroupPagedEvents": {
            "description": "A paginated list of chat events that occurred across chats in this chat_group from the server",
            "name": "ReturnChatGroupPagedEvents",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for the chat group. Any chat resumed from this chat will have the same chat_group_id. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The page number of the returned results.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of results returned per page.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The direction of the pagination (ASC or DESC).",
                  "key": "pagination_direction",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "List of chat_events returned for the specified page number and page size.",
                  "key": "events_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnChatEvent"
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnChatGroupPagedChats": {
            "description": "A description of chat_group and its status with a paginated list of each chat in the chat_group",
            "name": "ReturnChatGroupPagedChats",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for the chat group. Any chat resumed from this chat will have the same chat_group_id. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The timestamp when the first chat in this chat group started, formatted as a Unix epoch milliseconds.",
                  "key": "first_start_timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The timestamp when the most recent chat in this chat group started, formatted as a Unix epoch milliseconds.",
                  "key": "most_recent_start_timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of chats in this chat group.",
                  "key": "num_chats",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The page number of the returned results.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of results returned per page.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "List of chats and their metadata returned for the specified page number and page size.",
                  "key": "chats_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnChat"
                    }
                  }
                },
                {
                  "key": "active",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnChatGroup": {
            "description": "A description of chat_group and its status",
            "name": "ReturnChatGroup",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for the chat group. Any chat resumed from this chat will have the same chat_group_id. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The timestamp when the first chat in this chat group started, formatted as a Unix epoch milliseconds.",
                  "key": "first_start_timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The timestamp when the most recent chat in this chat group started, formatted as a Unix epoch milliseconds.",
                  "key": "most_recent_start_timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The chat_id of the most recent chat in this chat group. Formatted as a UUID.",
                  "key": "most_recent_chat_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The total number of chats in this chat group.",
                  "key": "num_chats",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "active",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnPagedChatGroups": {
            "description": "A paginated list of chat_groups returned from the server",
            "name": "ReturnPagedChatGroups",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The page number of the returned results.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of results returned per page.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "List of chat_groups and their metadata returned for the specified page number and page size.",
                  "key": "chat_groups_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnChatGroup"
                    }
                  }
                }
              ]
            }
          },
          "type_:AssistantEnd": {
            "description": "When provided, the output is an assistant end message.",
            "name": "AssistantEnd",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The type of message sent through the socket; for an Assistant End message, this must be 'assistant_end'.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "assistant_end"
                    }
                  }
                }
              ]
            }
          },
          "type_:AssistantInput": {
            "description": "When provided, the input is spoken by EVI.",
            "name": "AssistantInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Text to be synthesized.",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of message sent through the socket; for an Assistant Input message, this must be 'assistant_input'.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "assistant_input"
                    }
                  }
                }
              ]
            }
          },
          "type_:AssistantMessage": {
            "description": "When provided, the output is an assistant message.",
            "name": "AssistantMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Indicates if this message was constructed from a text input message.",
                  "key": "from_text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "ID of the assistant message.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Transcript of the message.",
                  "key": "message",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ChatMessage"
                  }
                },
                {
                  "description": "Inference model results.",
                  "key": "models",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Inference"
                  }
                },
                {
                  "description": "The type of message sent through the socket; for an Assistant Message, this must be 'assistant_message'.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "assistant_message"
                    }
                  }
                }
              ]
            }
          },
          "type_:AudioConfiguration": {
            "name": "AudioConfiguration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Number of channels.",
                  "key": "channels",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Audio encoding.",
                  "key": "encoding",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Encoding"
                  }
                },
                {
                  "description": "Audio sample rate.",
                  "key": "sample_rate",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:AudioInput": {
            "description": "When provided, the input is audio.",
            "name": "AudioInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Base64 encoded audio input.",
                  "key": "data",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of message sent through the socket; for an Audio Input message, this must be 'audio_input'.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "audio_input"
                    }
                  }
                }
              ]
            }
          },
          "type_:AudioOutput": {
            "description": "When provided, the output is audio.",
            "name": "AudioOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Base64 encoded audio output.",
                  "key": "data",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "ID of the audio output.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of message sent through the socket; for an Audio Output message, this must be 'audio_output'.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "audio_output"
                    }
                  }
                }
              ]
            }
          },
          "type_:BuiltInTool": {
            "name": "BuiltInTool",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "web_search"
                }
              }
            }
          },
          "type_:BuiltinToolConfig": {
            "name": "BuiltinToolConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "fallback_content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BuiltInTool"
                  }
                }
              ]
            }
          },
          "type_:ChatMessageToolResult": {
            "description": "Function call response from client.",
            "name": "ChatMessageToolResult",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolResponseMessage"
                  },
                  "displayName": "Tool Response Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolErrorMessage"
                  },
                  "displayName": "Tool Error Message"
                }
              ]
            }
          },
          "type_:ChatMessage": {
            "name": "ChatMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Role of who is providing the message.",
                  "key": "role",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Role"
                  }
                },
                {
                  "key": "tool_call",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ToolCallMessage"
                    }
                  }
                },
                {
                  "description": "Function call response from client.",
                  "key": "tool_result",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ChatMessageToolResult"
                    }
                  }
                }
              ]
            }
          },
          "type_:ChatMetadata": {
            "description": "When provided, the output is a chat metadata message.",
            "name": "ChatMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "ID of the chat group. Used to resume a chat.",
                  "key": "chat_group_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "ID of the chat.",
                  "key": "chat_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The type of message sent through the socket; for a Chat Metadata message, this must be 'chat_metadata'.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "chat_metadata"
                    }
                  }
                }
              ]
            }
          },
          "type_:Context": {
            "name": "Context",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "User context to inject.",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The persistence level of the injected context.",
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ContextType"
                    }
                  }
                }
              ]
            }
          },
          "type_:ContextType": {
            "name": "ContextType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "editable"
                },
                {
                  "value": "persistent"
                },
                {
                  "value": "temporary"
                }
              ]
            }
          },
          "type_:EmotionScores": {
            "name": "EmotionScores",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "Admiration",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Adoration",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Aesthetic Appreciation",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Amusement",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Anger",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Anxiety",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Awe",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Awkwardness",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Boredom",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Calmness",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Concentration",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Confusion",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Contemplation",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Contempt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Contentment",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Craving",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Desire",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Determination",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Disappointment",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Disgust",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Distress",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Doubt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Ecstasy",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Embarrassment",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Empathic Pain",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Entrancement",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Envy",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Excitement",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Fear",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Guilt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Horror",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Interest",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Joy",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Love",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Nostalgia",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Pain",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Pride",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Realization",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Relief",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Romance",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Sadness",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Satisfaction",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Shame",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Surprise (negative)",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Surprise (positive)",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Sympathy",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Tiredness",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Triumph",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:Encoding": {
            "name": "Encoding",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "linear16"
                }
              }
            }
          },
          "type_:WebSocketError": {
            "description": "When provided, the output is an error message.",
            "name": "WebSocketError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Error code.",
                  "key": "code",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Error message.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Error slug.",
                  "key": "slug",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of message sent through the socket; for a Web Socket Error message, this must be 'error'.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "error"
                    }
                  }
                }
              ]
            }
          },
          "type_:ErrorLevel": {
            "name": "ErrorLevel",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "warn"
                }
              }
            }
          },
          "type_:Inference": {
            "name": "Inference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProsodyInference"
                    }
                  }
                }
              ]
            }
          },
          "type_:MillisecondInterval": {
            "name": "MillisecondInterval",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Start time of the interval in milliseconds.",
                  "key": "begin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "End time of the interval in milliseconds.",
                  "key": "end",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:PauseAssistantMessage": {
            "description": "Pause responses from EVI. Chat history is still saved and sent after resuming.",
            "name": "PauseAssistantMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The type of message sent through the socket; for a Pause Assistant message, this must be 'pause_assistant_message'.",
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "pause_assistant_message"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ProsodyInference": {
            "name": "ProsodyInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "scores",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EmotionScores"
                  }
                }
              ]
            }
          },
          "type_:ResumeAssistantMessage": {
            "description": "Resume responses from EVI. Chat history sent while paused will now be sent.",
            "name": "ResumeAssistantMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The type of message sent through the socket; for a Resume Assistant message, this must be 'resume_assistant_message'.",
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "resume_assistant_message"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Role": {
            "name": "Role",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "assistant"
                },
                {
                  "value": "system"
                },
                {
                  "value": "user"
                },
                {
                  "value": "all"
                },
                {
                  "value": "tool"
                }
              ]
            }
          },
          "type_:SessionSettings": {
            "description": "Settings for this chat session.",
            "name": "SessionSettings",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "audio",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AudioConfiguration"
                    }
                  }
                },
                {
                  "key": "builtin_tools",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:BuiltinToolConfig"
                      }
                    }
                  }
                },
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "language_model_api_key",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "system_prompt",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "tools",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Tool"
                      }
                    }
                  }
                },
                {
                  "description": "The type of message sent through the socket; for a Session Settings message, this must be 'session_settings'.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "session_settings"
                    }
                  }
                }
              ]
            }
          },
          "type_:Tool": {
            "name": "Tool",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "fallback_content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Name of the tool.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Parameters of the tool. Is a stringified JSON schema.",
                  "key": "parameters",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Type of tool.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ToolType"
                  }
                }
              ]
            }
          },
          "type_:ToolCallMessage": {
            "description": "When provided, the output is a tool call.",
            "name": "ToolCallMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Name of the tool called.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Parameters of the tool call. Is a stringified JSON schema.",
                  "key": "parameters",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether a response is required from the developer.",
                  "key": "response_required",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "ID of the tool call.",
                  "key": "tool_call_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Type of tool called, either 'builtin' or 'function'.",
                  "key": "tool_type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ToolType"
                  }
                },
                {
                  "description": "The type of message sent through the socket; for a Tool Call message, this must be 'tool_call'.",
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "tool_call"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ToolErrorMessage": {
            "description": "When provided, the output is a function call error.",
            "name": "ToolErrorMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Error message from the tool call, not exposed to the LLM or user.",
                  "key": "error",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "level",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ErrorLevel"
                    }
                  }
                },
                {
                  "description": "ID of the tool call.",
                  "key": "tool_call_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "tool_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ToolType"
                    }
                  }
                },
                {
                  "description": "The type of message sent through the socket; for a Tool Error message, this must be 'tool_error'.",
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "tool_error"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ToolResponseMessage": {
            "description": "When provided, the output is a function call response.",
            "name": "ToolResponseMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Return value of the tool call.",
                  "key": "content",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the tool call.",
                  "key": "tool_call_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "tool_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "tool_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ToolType"
                    }
                  }
                },
                {
                  "description": "The type of message sent through the socket; for a Tool Response message, this must be ‘tool_response’.",
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "tool_response"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ToolType": {
            "name": "ToolType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "builtin"
                },
                {
                  "value": "function"
                }
              ]
            }
          },
          "type_:UserInput": {
            "description": "User text to insert into the conversation.",
            "name": "UserInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "User text to insert into the conversation.",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of message sent through the socket; for a User Input message, this must be ‘user_input’.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "user_input"
                    }
                  }
                }
              ]
            }
          },
          "type_:UserInterruption": {
            "description": "When provided, the output is an interruption.",
            "name": "UserInterruption",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unix timestamp of the detected user interruption.",
                  "key": "time",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The type of message sent through the socket; for a User Interruption message, this must be 'user_interruption'.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "user_interruption"
                    }
                  }
                }
              ]
            }
          },
          "type_:UserMessage": {
            "description": "When provided, the output is a user message.",
            "name": "UserMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Indicates if this message was constructed from a text input message.",
                  "key": "from_text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Transcript of the message.",
                  "key": "message",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ChatMessage"
                  }
                },
                {
                  "description": "Inference model results.",
                  "key": "models",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Inference"
                  }
                },
                {
                  "description": "Start and End time of user message.",
                  "key": "time",
                  "valueType": {
                    "type": "id",
                    "value": "type_:MillisecondInterval"
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "user_message"
                    }
                  }
                }
              ]
            }
          },
          "type_:TtsInput": {
            "name": "TtsInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "tts"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TextInput": {
            "name": "TextInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "text_input"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FunctionCallResponseInput": {
            "name": "FunctionCallResponseInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "function_call_response"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_tools": {
            "subpackageId": "subpackage_tools",
            "name": "tools",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-tools",
                "method": "GET",
                "id": "list-tools",
                "originalEndpointId": "endpoint_tools.list-tools",
                "name": "List tools",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The page number of the results to return.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The maximum number of results to include per page.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Only include the most recent version of each tool in the list.",
                    "key": "restrict_to_most_recent",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedUserDefinedTools"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/tools",
                    "pathParameters": {},
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 2
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 0,
                      "page_size": 2,
                      "tools_page": [
                        {
                          "tool_type": "FUNCTION",
                          "id": "d20827af-5d8d-4f66-b6b9-ce2e3e1ea2b2",
                          "version": 0,
                          "version_type": "FIXED",
                          "version_description": "Fetches user's current location.",
                          "name": "get_current_location",
                          "created_on": 1715267200693,
                          "modified_on": 1715267200693,
                          "fallback_content": "Unable to fetch location.",
                          "description": "Fetches user's current location.",
                          "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }}, \"required\": [\"location\"] }"
                        },
                        {
                          "tool_type": "FUNCTION",
                          "id": "4442f3ea-9038-40e3-a2ce-1522b7de770f",
                          "version": 0,
                          "version_type": "FIXED",
                          "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                          "name": "get_current_weather",
                          "created_on": 1715266126705,
                          "modified_on": 1715266126705,
                          "fallback_content": "Unable to fetch location.",
                          "description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                          "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.listTools({\n    pageNumber: 0,\n    pageSize: 2\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 0,
                        "page_size": 2,
                        "tools_page": [
                          {
                            "tool_type": "FUNCTION",
                            "id": "d20827af-5d8d-4f66-b6b9-ce2e3e1ea2b2",
                            "version": 0,
                            "version_type": "FIXED",
                            "version_description": "Fetches user's current location.",
                            "name": "get_current_location",
                            "created_on": 1715267200693,
                            "modified_on": 1715267200693,
                            "fallback_content": "Unable to fetch location.",
                            "description": "Fetches user's current location.",
                            "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }}, \"required\": [\"location\"] }"
                          },
                          {
                            "tool_type": "FUNCTION",
                            "id": "4442f3ea-9038-40e3-a2ce-1522b7de770f",
                            "version": 0,
                            "version_type": "FIXED",
                            "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                            "name": "get_current_weather",
                            "created_on": 1715266126705,
                            "modified_on": 1715266126705,
                            "fallback_content": "Unable to fetch location.",
                            "description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                            "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-tool",
                "method": "POST",
                "id": "create-tool",
                "originalEndpointId": "endpoint_tools.create-tool",
                "name": "Create tool",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Name applied to all versions of a particular Tool.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Description that is appended to a specific version of a Tool.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Text describing what the tool does.",
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Stringified JSON defining the parameters used by this version of the Tool.",
                        "key": "parameters",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Text to use if the tool fails to generate content.",
                        "key": "fallback_content",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnUserDefinedTool"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/tools",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "name": "get_current_weather",
                      "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                      "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                      "description": "This tool is for getting the current weather.",
                      "fallback_content": "Unable to fetch current weather."
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "tool_type": "FUNCTION",
                      "id": "aa9b71c4-723c-47ff-9f83-1a1829e74376",
                      "version": 0,
                      "version_type": "FIXED",
                      "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                      "name": "get_current_weather",
                      "created_on": 1715275452390,
                      "modified_on": 1715275452390,
                      "fallback_content": "Unable to fetch current weather.",
                      "description": "This tool is for getting the current weather.",
                      "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.createTool({\n    name: \"get_current_weather\",\n    parameters: \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n    versionDescription: \"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n    description: \"This tool is for getting the current weather.\",\n    fallbackContent: \"Unable to fetch current weather.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "get_current_weather",
                        "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                        "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                        "description": "This tool is for getting the current weather.",
                        "fallback_content": "Unable to fetch current weather."
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "tool_type": "FUNCTION",
                        "id": "aa9b71c4-723c-47ff-9f83-1a1829e74376",
                        "version": 0,
                        "version_type": "FIXED",
                        "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                        "name": "get_current_weather",
                        "created_on": 1715275452390,
                        "modified_on": 1715275452390,
                        "fallback_content": "Unable to fetch current weather.",
                        "description": "This tool is for getting the current weather.",
                        "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-tool-versions",
                "method": "GET",
                "id": "list-tool-versions",
                "originalEndpointId": "endpoint_tools.list-tool-versions",
                "name": "List tool versions",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The page number of the results to return.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The maximum number of results to include per page.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Only include the most recent version of each tool in the list.",
                    "key": "restrict_to_most_recent",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedUserDefinedTools"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
                    "pathParameters": {
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 0,
                      "page_size": 10,
                      "tools_page": [
                        {
                          "tool_type": "FUNCTION",
                          "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                          "version": 1,
                          "version_type": "FIXED",
                          "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                          "name": "get_current_weather",
                          "created_on": 1715277014228,
                          "modified_on": 1715277602313,
                          "fallback_content": "Unable to fetch current weather.",
                          "description": "This tool is for getting the current weather.",
                          "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.listToolVersions(\"00183a3f-79ba-413d-9f3b-609864268bea\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 0,
                        "page_size": 10,
                        "tools_page": [
                          {
                            "tool_type": "FUNCTION",
                            "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                            "version": 1,
                            "version_type": "FIXED",
                            "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                            "name": "get_current_weather",
                            "created_on": 1715277014228,
                            "modified_on": 1715277602313,
                            "fallback_content": "Unable to fetch current weather.",
                            "description": "This tool is for getting the current weather.",
                            "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-tool-version",
                "method": "POST",
                "id": "create-tool-version",
                "originalEndpointId": "endpoint_tools.create-tool-version",
                "name": "Create tool version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Description that is appended to a specific version of a Tool.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Text describing what the tool does.",
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Stringified JSON defining the parameters used by this version of the Tool.",
                        "key": "parameters",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Text to use if the tool fails to generate content.",
                        "key": "fallback_content",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnUserDefinedTool"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
                    "pathParameters": {
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                      "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                      "fallback_content": "Unable to fetch current weather.",
                      "description": "This tool is for getting the current weather."
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "tool_type": "FUNCTION",
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                      "version": 1,
                      "version_type": "FIXED",
                      "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                      "name": "get_current_weather",
                      "created_on": 1715277014228,
                      "modified_on": 1715277602313,
                      "fallback_content": "Unable to fetch current weather.",
                      "description": "This tool is for getting the current weather.",
                      "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.createToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", {\n    parameters: \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\", \\\"kelvin\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n    versionDescription: \"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n    fallbackContent: \"Unable to fetch current weather.\",\n    description: \"This tool is for getting the current weather.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                        "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                        "fallback_content": "Unable to fetch current weather.",
                        "description": "This tool is for getting the current weather."
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "tool_type": "FUNCTION",
                        "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                        "version": 1,
                        "version_type": "FIXED",
                        "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                        "name": "get_current_weather",
                        "created_on": 1715277014228,
                        "modified_on": 1715277602313,
                        "fallback_content": "Unable to fetch current weather.",
                        "description": "This tool is for getting the current weather.",
                        "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-tool",
                "method": "DELETE",
                "id": "delete-tool",
                "originalEndpointId": "endpoint_tools.delete-tool",
                "name": "Delete tool",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
                    "pathParameters": {
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.deleteTool(\"00183a3f-79ba-413d-9f3b-609864268bea\");\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-tool-name",
                "method": "PATCH",
                "id": "update-tool-name",
                "originalEndpointId": "endpoint_tools.update-tool-name",
                "name": "Update tool name",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Name applied to all versions of a particular Tool.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
                    "pathParameters": {
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "name": "get_current_temperature"
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.updateToolName(\"00183a3f-79ba-413d-9f3b-609864268bea\", {\n    name: \"get_current_temperature\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "get_current_temperature"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-tool-version",
                "method": "GET",
                "id": "get-tool-version",
                "originalEndpointId": "endpoint_tools.get-tool-version",
                "name": "Get tool version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a tool. Version numbers should be integers.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnUserDefinedTool"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1",
                    "pathParameters": {
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "tool_type": "FUNCTION",
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                      "version": 1,
                      "version_type": "FIXED",
                      "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                      "name": "string",
                      "created_on": 1715277014228,
                      "modified_on": 1715277602313,
                      "fallback_content": "Unable to fetch current weather.",
                      "description": "This tool is for getting the current weather.",
                      "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.getToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1);\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "tool_type": "FUNCTION",
                        "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                        "version": 1,
                        "version_type": "FIXED",
                        "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                        "name": "string",
                        "created_on": 1715277014228,
                        "modified_on": 1715277602313,
                        "fallback_content": "Unable to fetch current weather.",
                        "description": "This tool is for getting the current weather.",
                        "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-tool-version",
                "method": "DELETE",
                "id": "delete-tool-version",
                "originalEndpointId": "endpoint_tools.delete-tool-version",
                "name": "Delete tool version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a tool. Version numbers should be integers.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1",
                    "pathParameters": {
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.deleteToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1);\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-tool-description",
                "method": "PATCH",
                "id": "update-tool-description",
                "originalEndpointId": "endpoint_tools.update-tool-description",
                "name": "Update tool description",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a tool. Version numbers should be integers.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Description that is appended to a specific version of a Tool.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnUserDefinedTool"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1",
                    "pathParameters": {
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "version_description": "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region."
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "tool_type": "FUNCTION",
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                      "version": 1,
                      "version_type": "FIXED",
                      "version_description": "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.",
                      "name": "string",
                      "created_on": 1715277014228,
                      "modified_on": 1715277602313,
                      "fallback_content": "Unable to fetch current weather.",
                      "description": "This tool is for getting the current weather.",
                      "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.updateToolDescription(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1, {\n    versionDescription: \"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "version_description": "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region."
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "tool_type": "FUNCTION",
                        "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                        "version": 1,
                        "version_type": "FIXED",
                        "version_description": "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.",
                        "name": "string",
                        "created_on": 1715277014228,
                        "modified_on": 1715277602313,
                        "fallback_content": "Unable to fetch current weather.",
                        "description": "This tool is for getting the current weather.",
                        "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "tools",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_prompts": {
            "subpackageId": "subpackage_prompts",
            "name": "prompts",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-prompts",
                "method": "GET",
                "id": "list-prompts",
                "originalEndpointId": "endpoint_prompts.list-prompts",
                "name": "List prompts",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The page number of the results to return.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The maximum number of results to include per page.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Only include the most recent version of each prompt in the list.",
                    "key": "restrict_to_most_recent",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedPrompts"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/prompts",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 1,
                      "page_size": 1,
                      "prompts_page": [
                        {
                          "id": "id",
                          "version": 1,
                          "version_type": "version_type",
                          "version_description": "version_description",
                          "name": "name",
                          "created_on": 1,
                          "modified_on": 1,
                          "text": "text"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.listPrompts();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 1,
                        "page_size": 1,
                        "prompts_page": [
                          {
                            "id": "id",
                            "version": 1,
                            "version_type": "version_type",
                            "version_description": "version_description",
                            "name": "name",
                            "created_on": 1,
                            "modified_on": 1,
                            "text": "text"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-prompt",
                "method": "POST",
                "id": "create-prompt",
                "originalEndpointId": "endpoint_prompts.create-prompt",
                "name": "Create prompt",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Name applied to all versions of a particular Prompt.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Description that is appended to a specific version of a Prompt.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Text used for this version of the Prompt.",
                        "key": "text",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnPrompt"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/prompts",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "name": "name",
                      "text": "text"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "version": 1,
                      "version_type": "version_type",
                      "version_description": "version_description",
                      "name": "name",
                      "created_on": 1,
                      "modified_on": 1,
                      "text": "text"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.createPrompt({\n    name: \"name\",\n    text: \"text\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "name",
                        "text": "text"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "version": 1,
                        "version_type": "version_type",
                        "version_description": "version_description",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "text": "text"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-prompt-versions",
                "method": "GET",
                "id": "list-prompt-versions",
                "originalEndpointId": "endpoint_prompts.list-prompt-versions",
                "name": "List prompt versions",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The page number of the results to return.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The maximum number of results to include per page.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Only include the most recent version of each prompt in the list.",
                    "key": "restrict_to_most_recent",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedPrompts"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/prompts/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 1,
                      "page_size": 1,
                      "prompts_page": [
                        {
                          "id": "id",
                          "version": 1,
                          "version_type": "version_type",
                          "version_description": "version_description",
                          "name": "name",
                          "created_on": 1,
                          "modified_on": 1,
                          "text": "text"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.listPromptVersions(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 1,
                        "page_size": 1,
                        "prompts_page": [
                          {
                            "id": "id",
                            "version": 1,
                            "version_type": "version_type",
                            "version_description": "version_description",
                            "name": "name",
                            "created_on": 1,
                            "modified_on": 1,
                            "text": "text"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-prompt-verison",
                "migratedFromUrlSlugs": ["create-prompt-version"],
                "method": "POST",
                "id": "create-prompt-verison",
                "originalEndpointId": "endpoint_prompts.create-prompt-verison",
                "name": "Create prompt version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a prompt. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Description that is appended to a specific version of a Prompt.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Text used for this version of the Prompt.",
                        "key": "text",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnPrompt"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/prompts/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "text": "text"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "version": 1,
                      "version_type": "version_type",
                      "version_description": "version_description",
                      "name": "name",
                      "created_on": 1,
                      "modified_on": 1,
                      "text": "text"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.createPromptVerison(\"id\", {\n    text: \"text\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "text": "text"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "version": 1,
                        "version_type": "version_type",
                        "version_description": "version_description",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "text": "text"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-prompt",
                "method": "DELETE",
                "id": "delete-prompt",
                "originalEndpointId": "endpoint_prompts.delete-prompt",
                "name": "Delete prompt",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a prompt. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/prompts/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.deletePrompt(\"id\");\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-prompt-name",
                "method": "PATCH",
                "id": "update-prompt-name",
                "originalEndpointId": "endpoint_prompts.update-prompt-name",
                "name": "Update prompt name",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a prompt. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Name applied to all versions of a particular Prompt.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/prompts/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.updatePromptName(\"string\", {\n    name: \"string\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-prompt-version",
                "method": "GET",
                "id": "get-prompt-version",
                "originalEndpointId": "endpoint_prompts.get-prompt-version",
                "name": "Get prompt version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a prompt. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a prompt. Version numbers should be integers.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnPrompt"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/prompts/id/version/1",
                    "pathParameters": {
                      "id": "id",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "version": 1,
                      "version_type": "version_type",
                      "version_description": "version_description",
                      "name": "name",
                      "created_on": 1,
                      "modified_on": 1,
                      "text": "text"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.getPromptVersion(\"id\", 1);\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "version": 1,
                        "version_type": "version_type",
                        "version_description": "version_description",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "text": "text"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-prompt-version",
                "method": "DELETE",
                "id": "delete-prompt-version",
                "originalEndpointId": "endpoint_prompts.delete-prompt-version",
                "name": "Delete prompt version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a prompt. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a prompt. Version numbers should be integers.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/prompts/id/version/1",
                    "pathParameters": {
                      "id": "id",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.deletePromptVersion(\"id\", 1);\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-prompt-description",
                "method": "PATCH",
                "id": "update-prompt-description",
                "originalEndpointId": "endpoint_prompts.update-prompt-description",
                "name": "Update prompt description",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a prompt. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a prompt. Version numbers should be integers.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Description that is appended to a specific version of a Prompt.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnPrompt"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/prompts/id/version/1",
                    "pathParameters": {
                      "id": "id",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "version": 1,
                      "version_type": "version_type",
                      "version_description": "version_description",
                      "name": "name",
                      "created_on": 1,
                      "modified_on": 1,
                      "text": "text"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.updatePromptDescription(\"id\", 1);\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "version": 1,
                        "version_type": "version_type",
                        "version_description": "version_description",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "text": "text"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "prompts",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_configs": {
            "subpackageId": "subpackage_configs",
            "name": "configs",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-configs",
                "method": "GET",
                "id": "list-configs",
                "originalEndpointId": "endpoint_configs.list-configs",
                "name": "List configs",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The page number of the results to return.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The maximum number of results to include per page.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Only include the most recent version of each config in the list.",
                    "key": "restrict_to_most_recent",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedConfigs"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/configs",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 1,
                      "page_size": 1,
                      "configs_page": [
                        {
                          "id": "id",
                          "version": 1,
                          "version_description": "version_description",
                          "name": "name",
                          "created_on": 1,
                          "modified_on": 1,
                          "prompt": {
                            "id": "id",
                            "version": 1,
                            "version_type": "version_type",
                            "name": "name",
                            "created_on": 1,
                            "modified_on": 1,
                            "text": "text"
                          },
                          "voice": {
                            "provider": "provider",
                            "name": "name"
                          }
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.listConfigs();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 1,
                        "page_size": 1,
                        "configs_page": [
                          {
                            "id": "id",
                            "version": 1,
                            "version_description": "version_description",
                            "name": "name",
                            "created_on": 1,
                            "modified_on": 1,
                            "prompt": {
                              "id": "id",
                              "version": 1,
                              "version_type": "version_type",
                              "name": "name",
                              "created_on": 1,
                              "modified_on": 1,
                              "text": "text"
                            },
                            "voice": {
                              "provider": "provider",
                              "name": "name"
                            }
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-config",
                "method": "POST",
                "id": "create-config",
                "originalEndpointId": "endpoint_configs.create-config",
                "name": "Create config",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Name applied to all versions of a particular Config.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Description that is appended to a specific version of a Config.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "key": "prompt",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedPromptSpec"
                          }
                        }
                      },
                      {
                        "key": "voice",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedVoice"
                          }
                        }
                      },
                      {
                        "key": "language_model",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedLanguageModel"
                          }
                        }
                      },
                      {
                        "description": "Tool specification for a Config.",
                        "key": "tools",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "optional",
                              "itemType": {
                                "type": "id",
                                "value": "type_:PostedUserDefinedToolSpec"
                              }
                            }
                          }
                        }
                      },
                      {
                        "description": "Built-in tool specification for a Config.",
                        "key": "builtin_tools",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "optional",
                              "itemType": {
                                "type": "id",
                                "value": "type_:PostedBuiltinTool"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnConfig"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/configs",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "name": "name"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "version": 1,
                      "version_description": "version_description",
                      "name": "name",
                      "created_on": 1,
                      "modified_on": 1,
                      "prompt": {
                        "id": "id",
                        "version": 1,
                        "version_type": "version_type",
                        "version_description": "version_description",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "text": "text"
                      },
                      "voice": {
                        "provider": "provider",
                        "name": "name"
                      },
                      "language_model": {
                        "model_provider": "model_provider",
                        "model_resource": "model_resource",
                        "temperature": 1.1
                      },
                      "tools": [
                        {
                          "tool_type": "tool_type",
                          "id": "id",
                          "version": 1,
                          "version_type": "version_type",
                          "version_description": "version_description",
                          "name": "name",
                          "created_on": 1,
                          "modified_on": 1,
                          "fallback_content": "fallback_content",
                          "description": "description",
                          "parameters": "parameters"
                        }
                      ],
                      "builtin_tools": [
                        {
                          "tool_type": "tool_type",
                          "name": "name",
                          "fallback_content": "fallback_content"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.createConfig({\n    name: \"name\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "name"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "version": 1,
                        "version_description": "version_description",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "prompt": {
                          "id": "id",
                          "version": 1,
                          "version_type": "version_type",
                          "version_description": "version_description",
                          "name": "name",
                          "created_on": 1,
                          "modified_on": 1,
                          "text": "text"
                        },
                        "voice": {
                          "provider": "provider",
                          "name": "name"
                        },
                        "language_model": {
                          "model_provider": "model_provider",
                          "model_resource": "model_resource",
                          "temperature": 1.1
                        },
                        "tools": [
                          {
                            "tool_type": "tool_type",
                            "id": "id",
                            "version": 1,
                            "version_type": "version_type",
                            "version_description": "version_description",
                            "name": "name",
                            "created_on": 1,
                            "modified_on": 1,
                            "fallback_content": "fallback_content",
                            "description": "description",
                            "parameters": "parameters"
                          }
                        ],
                        "builtin_tools": [
                          {
                            "tool_type": "tool_type",
                            "name": "name",
                            "fallback_content": "fallback_content"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-config-versions",
                "method": "GET",
                "id": "list-config-versions",
                "originalEndpointId": "endpoint_configs.list-config-versions",
                "name": "List config versions",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a config. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The page number of the results to return.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The maximum number of results to include per page.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Only include the most recent version of each config in the list.",
                    "key": "restrict_to_most_recent",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedConfigs"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/configs/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 1,
                      "page_size": 1,
                      "configs_page": [
                        {
                          "id": "id",
                          "version": 1,
                          "version_description": "version_description",
                          "name": "name",
                          "created_on": 1,
                          "modified_on": 1,
                          "prompt": {
                            "id": "id",
                            "version": 1,
                            "version_type": "version_type",
                            "name": "name",
                            "created_on": 1,
                            "modified_on": 1,
                            "text": "text"
                          },
                          "voice": {
                            "provider": "provider",
                            "name": "name"
                          }
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.listConfigVersions(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 1,
                        "page_size": 1,
                        "configs_page": [
                          {
                            "id": "id",
                            "version": 1,
                            "version_description": "version_description",
                            "name": "name",
                            "created_on": 1,
                            "modified_on": 1,
                            "prompt": {
                              "id": "id",
                              "version": 1,
                              "version_type": "version_type",
                              "name": "name",
                              "created_on": 1,
                              "modified_on": 1,
                              "text": "text"
                            },
                            "voice": {
                              "provider": "provider",
                              "name": "name"
                            }
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-config-version",
                "method": "POST",
                "id": "create-config-version",
                "originalEndpointId": "endpoint_configs.create-config-version",
                "name": "Create config version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a config. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Description that is appended to a specific version of a Config.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "key": "prompt",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedPromptSpec"
                          }
                        }
                      },
                      {
                        "key": "voice",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedVoice"
                          }
                        }
                      },
                      {
                        "key": "language_model",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedLanguageModel"
                          }
                        }
                      },
                      {
                        "description": "Tool specification for a Config.",
                        "key": "tools",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "optional",
                              "itemType": {
                                "type": "id",
                                "value": "type_:PostedUserDefinedToolSpec"
                              }
                            }
                          }
                        }
                      },
                      {
                        "description": "Built-in tool specification for a Config.",
                        "key": "builtin_tools",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "optional",
                              "itemType": {
                                "type": "id",
                                "value": "type_:PostedBuiltinTool"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnConfig"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/configs/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "version": 1,
                      "version_description": "version_description",
                      "name": "name",
                      "created_on": 1,
                      "modified_on": 1,
                      "prompt": {
                        "id": "id",
                        "version": 1,
                        "version_type": "version_type",
                        "version_description": "version_description",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "text": "text"
                      },
                      "voice": {
                        "provider": "provider",
                        "name": "name"
                      },
                      "language_model": {
                        "model_provider": "model_provider",
                        "model_resource": "model_resource",
                        "temperature": 1.1
                      },
                      "tools": [
                        {
                          "tool_type": "tool_type",
                          "id": "id",
                          "version": 1,
                          "version_type": "version_type",
                          "version_description": "version_description",
                          "name": "name",
                          "created_on": 1,
                          "modified_on": 1,
                          "fallback_content": "fallback_content",
                          "description": "description",
                          "parameters": "parameters"
                        }
                      ],
                      "builtin_tools": [
                        {
                          "tool_type": "tool_type",
                          "name": "name",
                          "fallback_content": "fallback_content"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.createConfigVersion(\"id\");\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "version": 1,
                        "version_description": "version_description",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "prompt": {
                          "id": "id",
                          "version": 1,
                          "version_type": "version_type",
                          "version_description": "version_description",
                          "name": "name",
                          "created_on": 1,
                          "modified_on": 1,
                          "text": "text"
                        },
                        "voice": {
                          "provider": "provider",
                          "name": "name"
                        },
                        "language_model": {
                          "model_provider": "model_provider",
                          "model_resource": "model_resource",
                          "temperature": 1.1
                        },
                        "tools": [
                          {
                            "tool_type": "tool_type",
                            "id": "id",
                            "version": 1,
                            "version_type": "version_type",
                            "version_description": "version_description",
                            "name": "name",
                            "created_on": 1,
                            "modified_on": 1,
                            "fallback_content": "fallback_content",
                            "description": "description",
                            "parameters": "parameters"
                          }
                        ],
                        "builtin_tools": [
                          {
                            "tool_type": "tool_type",
                            "name": "name",
                            "fallback_content": "fallback_content"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-config",
                "method": "DELETE",
                "id": "delete-config",
                "originalEndpointId": "endpoint_configs.delete-config",
                "name": "Delete config",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a config. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/configs/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.deleteConfig(\"id\");\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-config-name",
                "method": "PATCH",
                "id": "update-config-name",
                "originalEndpointId": "endpoint_configs.update-config-name",
                "name": "Update config name",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a config. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Name applied to all versions of a particular Config.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/configs/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.updateConfigName(\"string\", {\n    name: \"string\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-config-version",
                "method": "GET",
                "id": "get-config-version",
                "originalEndpointId": "endpoint_configs.get-config-version",
                "name": "Get config version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a config. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a config. Version numbers should be integers.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnConfig"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/configs/id/version/1",
                    "pathParameters": {
                      "id": "id",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "version": 1,
                      "version_description": "version_description",
                      "name": "name",
                      "created_on": 1,
                      "modified_on": 1,
                      "prompt": {
                        "id": "id",
                        "version": 1,
                        "version_type": "version_type",
                        "version_description": "version_description",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "text": "text"
                      },
                      "voice": {
                        "provider": "provider",
                        "name": "name"
                      },
                      "language_model": {
                        "model_provider": "model_provider",
                        "model_resource": "model_resource",
                        "temperature": 1.1
                      },
                      "tools": [
                        {
                          "tool_type": "tool_type",
                          "id": "id",
                          "version": 1,
                          "version_type": "version_type",
                          "version_description": "version_description",
                          "name": "name",
                          "created_on": 1,
                          "modified_on": 1,
                          "fallback_content": "fallback_content",
                          "description": "description",
                          "parameters": "parameters"
                        }
                      ],
                      "builtin_tools": [
                        {
                          "tool_type": "tool_type",
                          "name": "name",
                          "fallback_content": "fallback_content"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.getConfigVersion(\"id\", 1);\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "version": 1,
                        "version_description": "version_description",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "prompt": {
                          "id": "id",
                          "version": 1,
                          "version_type": "version_type",
                          "version_description": "version_description",
                          "name": "name",
                          "created_on": 1,
                          "modified_on": 1,
                          "text": "text"
                        },
                        "voice": {
                          "provider": "provider",
                          "name": "name"
                        },
                        "language_model": {
                          "model_provider": "model_provider",
                          "model_resource": "model_resource",
                          "temperature": 1.1
                        },
                        "tools": [
                          {
                            "tool_type": "tool_type",
                            "id": "id",
                            "version": 1,
                            "version_type": "version_type",
                            "version_description": "version_description",
                            "name": "name",
                            "created_on": 1,
                            "modified_on": 1,
                            "fallback_content": "fallback_content",
                            "description": "description",
                            "parameters": "parameters"
                          }
                        ],
                        "builtin_tools": [
                          {
                            "tool_type": "tool_type",
                            "name": "name",
                            "fallback_content": "fallback_content"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-config-version",
                "method": "DELETE",
                "id": "delete-config-version",
                "originalEndpointId": "endpoint_configs.delete-config-version",
                "name": "Delete config version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a config. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a config. Version numbers should be integers.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/configs/id/version/1",
                    "pathParameters": {
                      "id": "id",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.deleteConfigVersion(\"id\", 1);\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-config-description",
                "method": "PATCH",
                "id": "update-config-description",
                "originalEndpointId": "endpoint_configs.update-config-description",
                "name": "Update config description",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a config. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a config. Version numbers should be integers.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Description that is appended to a specific version of a Config.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnConfig"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/configs/id/version/1",
                    "pathParameters": {
                      "id": "id",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "version": 1,
                      "version_description": "version_description",
                      "name": "name",
                      "created_on": 1,
                      "modified_on": 1,
                      "prompt": {
                        "id": "id",
                        "version": 1,
                        "version_type": "version_type",
                        "version_description": "version_description",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "text": "text"
                      },
                      "voice": {
                        "provider": "provider",
                        "name": "name"
                      },
                      "language_model": {
                        "model_provider": "model_provider",
                        "model_resource": "model_resource",
                        "temperature": 1.1
                      },
                      "tools": [
                        {
                          "tool_type": "tool_type",
                          "id": "id",
                          "version": 1,
                          "version_type": "version_type",
                          "version_description": "version_description",
                          "name": "name",
                          "created_on": 1,
                          "modified_on": 1,
                          "fallback_content": "fallback_content",
                          "description": "description",
                          "parameters": "parameters"
                        }
                      ],
                      "builtin_tools": [
                        {
                          "tool_type": "tool_type",
                          "name": "name",
                          "fallback_content": "fallback_content"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.updateConfigDescription(\"id\", 1);\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "version": 1,
                        "version_description": "version_description",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "prompt": {
                          "id": "id",
                          "version": 1,
                          "version_type": "version_type",
                          "version_description": "version_description",
                          "name": "name",
                          "created_on": 1,
                          "modified_on": 1,
                          "text": "text"
                        },
                        "voice": {
                          "provider": "provider",
                          "name": "name"
                        },
                        "language_model": {
                          "model_provider": "model_provider",
                          "model_resource": "model_resource",
                          "temperature": 1.1
                        },
                        "tools": [
                          {
                            "tool_type": "tool_type",
                            "id": "id",
                            "version": 1,
                            "version_type": "version_type",
                            "version_description": "version_description",
                            "name": "name",
                            "created_on": 1,
                            "modified_on": 1,
                            "fallback_content": "fallback_content",
                            "description": "description",
                            "parameters": "parameters"
                          }
                        ],
                        "builtin_tools": [
                          {
                            "tool_type": "tool_type",
                            "name": "name",
                            "fallback_content": "fallback_content"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "configs",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_chats": {
            "subpackageId": "subpackage_chats",
            "name": "chats",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-chats",
                "method": "GET",
                "id": "list-chats",
                "originalEndpointId": "endpoint_chats.list-chats",
                "name": "List chats",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/chats"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The page number of the results to return.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The maximum number of results to include per page.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedChats"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/chats",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 1,
                      "page_size": 1,
                      "chats_page": [
                        {
                          "id": "id",
                          "chat_group_id": "chat_group_id",
                          "tag": "tag",
                          "status": "status",
                          "start_timestamp": 1,
                          "end_timestamp": 1,
                          "event_count": 1,
                          "metadata": "metadata",
                          "config": {
                            "id": "id"
                          }
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.chats.listChats();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 1,
                        "page_size": 1,
                        "chats_page": [
                          {
                            "id": "id",
                            "chat_group_id": "chat_group_id",
                            "tag": "tag",
                            "status": "status",
                            "start_timestamp": 1,
                            "end_timestamp": 1,
                            "event_count": 1,
                            "metadata": "metadata",
                            "config": {
                              "id": "id"
                            }
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-chat-events",
                "method": "GET",
                "id": "list-chat-events",
                "originalEndpointId": "endpoint_chats.list-chat-events",
                "name": "List chat events",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a chat. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/chats/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The maximum number of results to include per page.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The page number of the results to return.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnChatPagedEvents"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/chats/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "chat_group_id": "chat_group_id",
                      "tag": "tag",
                      "status": "status",
                      "start_timestamp": 1,
                      "end_timestamp": 1,
                      "events_page": [
                        {
                          "id": "id",
                          "chat_id": "chat_id",
                          "timestamp": 1,
                          "role": "role",
                          "type": "type",
                          "message_text": "message_text",
                          "emotion_features": "emotion_features",
                          "metadata": "metadata"
                        }
                      ],
                      "metadata": "metadata",
                      "page_number": 1,
                      "page_size": 1,
                      "config": {
                        "id": "id",
                        "version": 1
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.chats.listChatEvents(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "chat_group_id": "chat_group_id",
                        "tag": "tag",
                        "status": "status",
                        "start_timestamp": 1,
                        "end_timestamp": 1,
                        "events_page": [
                          {
                            "id": "id",
                            "chat_id": "chat_id",
                            "timestamp": 1,
                            "role": "role",
                            "type": "type",
                            "message_text": "message_text",
                            "emotion_features": "emotion_features",
                            "metadata": "metadata"
                          }
                        ],
                        "metadata": "metadata",
                        "page_number": 1,
                        "page_size": 1,
                        "config": {
                          "id": "id",
                          "version": 1
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "chats",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_chatGroups": {
            "subpackageId": "subpackage_chatGroups",
            "name": "chatGroups",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-chat-groups",
                "method": "GET",
                "id": "list-chat-groups",
                "originalEndpointId": "endpoint_chatGroups.list-chat-groups",
                "name": "List chat_groups",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/chat_groups"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The page number of the results to return.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The maximum number of results to include per page.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedChatGroups"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/chat_groups",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 1,
                      "page_size": 1,
                      "chat_groups_page": [
                        {
                          "id": "id",
                          "first_start_timestamp": 1,
                          "most_recent_start_timestamp": 1,
                          "most_recent_chat_id": "most_recent_chat_id",
                          "num_chats": 1,
                          "active": true
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.chatGroups.listChatGroups();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 1,
                        "page_size": 1,
                        "chat_groups_page": [
                          {
                            "id": "id",
                            "first_start_timestamp": 1,
                            "most_recent_start_timestamp": 1,
                            "most_recent_chat_id": "most_recent_chat_id",
                            "num_chats": 1,
                            "active": true
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-chat-group-events",
                "migratedFromUrlSlugs": ["list-chat-events-from-a-specific-chat-group"],
                "method": "GET",
                "id": "list-chat-group-events",
                "originalEndpointId": "endpoint_chatGroups.list-chat-group-events",
                "name": "List chat events from a specific chat_group",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a chat. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/chat_groups/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/events"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The maximum number of results to include per page.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The page number of the results to return.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Boolean to indicate if the results should be paginated in chronological order or reverse-chronological order. Defaults to true.",
                    "key": "ascending_order",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnChatGroupPagedEvents"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/evi/chat_groups/id/events",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "page_number": 1,
                      "page_size": 1,
                      "pagination_direction": "pagination_direction",
                      "events_page": [
                        {
                          "id": "id",
                          "chat_id": "chat_id",
                          "timestamp": 1,
                          "role": "role",
                          "type": "type",
                          "message_text": "message_text",
                          "emotion_features": "emotion_features",
                          "metadata": "metadata"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.6.1",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.chatGroups.listChatGroupEvents(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "page_number": 1,
                        "page_size": 1,
                        "pagination_direction": "pagination_direction",
                        "events_page": [
                          {
                            "id": "id",
                            "chat_id": "chat_id",
                            "timestamp": 1,
                            "role": "role",
                            "type": "type",
                            "message_text": "message_text",
                            "emotion_features": "emotion_features",
                            "metadata": "metadata"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "chat-groups",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_chat": {
            "subpackageId": "subpackage_chat",
            "name": "chat",
            "endpoints": [],
            "types": ["type_chat:SubscribeEvent", "type_chat:PublishEvent"],
            "subpackages": [],
            "urlSlug": "chat",
            "webhooks": [],
            "websockets": [
              {
                "urlSlug": "chat",
                "auth": false,
                "headers": [],
                "messages": [
                  {
                    "type": "subscribe",
                    "origin": "server",
                    "body": {
                      "type": "reference",
                      "value": {
                        "type": "id",
                        "value": "type_chat:SubscribeEvent"
                      }
                    }
                  },
                  {
                    "type": "publish",
                    "origin": "client",
                    "body": {
                      "type": "reference",
                      "value": {
                        "type": "id",
                        "value": "type_chat:PublishEvent"
                      }
                    }
                  }
                ],
                "defaultEnvironment": "Default",
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "wss://api.hume.ai"
                  }
                ],
                "id": "chat",
                "name": "Chat",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/evi/chat"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Access token used for authenticating the client.",
                    "key": "access_token",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The unique identifier for the EVI configuration to be used.",
                    "key": "config_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The version number of the specified EVI configuration to be used.",
                    "key": "config_version",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The unique identifier for a chat group. Used to resume a previous chat.",
                    "key": "resumed_chat_group_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/chat",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "messages": [
                      {
                        "type": "publish",
                        "body": {
                          "data": "data",
                          "type": "audio_input"
                        }
                      },
                      {
                        "type": "subscribe",
                        "body": {
                          "type": "assistant_end"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        "auth": {
          "type": "header",
          "headerWireValue": "X-Hume-Api-Key",
          "nameOverride": "apiKey"
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      }
    },
    "files": {
      "4a995ab2-bc80-4cc7-bd16-5b477e98a000": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20%3A54%3A14.167Z/docs/fonts/Fellix-Regular.woff2",
      "724861df-6bdb-40c2-a082-7deaf355a5a8": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20%3A54%3A14.167Z/docs/fonts/Fellix-Medium.woff2",
      "67fe2f9d-13c2-485e-bbca-df9c46760bb7": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20%3A54%3A14.167Z/docs/fonts/Fellix-SemiBold.woff2",
      "3f8d3a6d-09f6-4799-a069-54a2adf6b036": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20%3A54%3A14.167Z/docs/fonts/FraktionMono-Regular.woff2",
      "6d34714f-0bf0-47c5-bc07-acf1e117064f": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20%3A54%3A14.167Z/docs/fonts/FraktionMono-Bold.woff2",
      "d76e7b76-7299-4a83-8095-49b065dff86e": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20%3A54%3A14.167Z/docs/assets/logo-dark-mode.png",
      "cda9fa3b-f513-4ad3-89b9-1bc95a761c70": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20%3A54%3A14.167Z/docs/assets/logo-light-mode.png",
      "e34bc051-3181-4e76-b86f-7094e10f229a": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20%3A54%3A14.167Z/docs/assets/favicon.ico"
    },
    "filesV2": {
      "4a995ab2-bc80-4cc7-bd16-5b477e98a000": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20:54:14.167Z/docs/fonts/Fellix-Regular.woff2"
      },
      "724861df-6bdb-40c2-a082-7deaf355a5a8": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20:54:14.167Z/docs/fonts/Fellix-Medium.woff2"
      },
      "67fe2f9d-13c2-485e-bbca-df9c46760bb7": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20:54:14.167Z/docs/fonts/Fellix-SemiBold.woff2"
      },
      "3f8d3a6d-09f6-4799-a069-54a2adf6b036": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20:54:14.167Z/docs/fonts/FraktionMono-Regular.woff2"
      },
      "6d34714f-0bf0-47c5-bc07-acf1e117064f": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20:54:14.167Z/docs/fonts/FraktionMono-Bold.woff2"
      },
      "d76e7b76-7299-4a83-8095-49b065dff86e": {
        "type": "image",
        "width": 820,
        "height": 186,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20:54:14.167Z/docs/assets/logo-dark-mode.png"
      },
      "cda9fa3b-f513-4ad3-89b9-1bc95a761c70": {
        "type": "image",
        "width": 820,
        "height": 186,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20:54:14.167Z/docs/assets/logo-light-mode.png"
      },
      "e34bc051-3181-4e76-b86f-7094e10f229a": {
        "type": "image",
        "width": 32,
        "height": 32,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-05-30T20:54:14.167Z/docs/assets/favicon.ico"
      }
    },
    "pages": {
      "docs/pages/documentation/introduction/welcome.mdx": {
        "markdown": "---\ntitle: Welcome to Hume AI\ndescription: >-\n  Hume AI builds AI models that enable technology to communicate with empathy\n  and learn to make people happy.\nslug: intro\n---\n\nHume AI builds AI models that enable technology to communicate with empathy and learn to make people happy. \n\nSo much of human communication—in-person, text, audio, or video—is shaped by emotional expression. These cues allow us to attend to each other's well-being. Our platform provides the APIs needed to ensure that technology, too, is guided by empathy and the pursuit of human well-being.\n\n### [Empathic Voice Interface API](/docs/empathic-voice-interface-evi/overview)\n\nHume's Empathic Voice Interface (EVI) is the world's first emotionally intelligent voice AI. It is the only API that measures nuanced vocal modulations and responds to them using an empathic large language model (eLLM), which guides language and speech generation. Trained on millions of human interactions, our eLLM unites language modeling and text-to-speech with better EQ, prosody, end-of-turn detection, interruptibility, and alignment.\n\n### [Expression Measurement API](/docs/expression-measurement-api/overview)\n\nHume's state-of-the-art expression measurement models for the voice, face, and language are built on 10+ years of research and advances in semantic space theory pioneered by Alan Cowen. Our expression measurement models are able to capture hundreds of dimensions of human expression in audio, video, and images.\n\n### [Custom Models API](/docs/custom-models-api/overview)\n\nOur Custom Models API builds on our expression measurement models and state-of-the-art eLLMs to bring custom insights to your application. Developed using transfer learning from our expression measurement models and eLLMs, our Custom Models API can predict almost any outcome more accurately than language alone, whether it's toxicity, depressed mood, driver drowsiness, or any other metric important to your users.\n\n## API Reference\n\n<Cards>\n<Card\n    title=\"Empathic Voice Interface (EVI)\"\n    icon=\"fa-waveform\"\n    href=\"/reference/empathic-voice-interface-evi/chat/chat\"\n  >\n    API that measures nuanced vocal modulations and responds to them using an\n    empathic large language model\n  </Card>\n  <Card\n    title=\"Expression Measurement API\"\n    icon=\"ruler\"\n    href=\"/reference/expression-measurement-api/batch/list-jobs\"\n  >\n    Measure facial, vocal, and linguistic expressions\n  </Card>\n  <Card\n    title=\"Custom Models API\"\n    icon=\"fa-gear\"\n    href=\"/reference/custom-models-api/files/list-files\"\n  >\n    Predict almost any outcome more accurately than language alone\n  </Card>\n</Cards>\n\n## Get support\n\nIf you have questions or run into challenges, we're here to help!\n\n<Cards>\n  <Card\n    title=\"Discord\"\n    icon=\"fa-brands fa-discord\"\n    href=\"https://link.hume.ai/discord\"\n  >\n    Join our Discord for answers to any technical questions\n  </Card>\n</Cards>\n\n---\n"
      },
      "docs/pages/documentation/introduction/getting-your-api-key.mdx": {
        "markdown": "---\ntitle: Quickstart tutorial\nexcerpt: Learn how to get started with Hume in just a few minutes.\n---\n\n<Steps>\n### Sign in to [Hume](https://beta.hume.ai/).\n\n### Navigate to the [API Keys page](https://beta.hume.ai/settings/keys).\n\n### Copy your API key.\n\n<Frame caption=\"API Key\">\n  ![API key](https://fern-image-hosting.s3.amazonaws.com/hume/get-started-api-key.png)\n</Frame>\n\n<Callout intent=\"info\">\n  **Your API key is a random sequence of letters and numbers.** \n  It should look something like `ntylOFypHLRXMmjlTxljoecAnMgB30JtOLZC2nph1TYErCvv`\n</Callout>\n\n</Steps>\n"
      },
      "docs/pages/documentation/introduction/support.mdx": {
        "markdown": "---\ntitle: Support\nexcerpt: Get help from the team at Hume\nslug: support\nredirects:\n  - /docs/support\n---\n## Discord\n\n[Join our Discord](https://link.hume.ai/discord) for answers to any technical questions.\n\n## Legal\n\nContact [legal@hume.ai](mailto:legal@hume.ai) for legal and data privacy inquires.\n\n## Billing\n\nEmail [billing@hume.ai](mailto:billing@hume.ai) for any questions or concerns about billing.\n\n## Contact us\n\nFor all other inquires, see [hume.ai/contact](https://hume.ai/contact).\n"
      },
      "docs/pages/documentation/empathic-voice-interface/overview.mdx": {
        "markdown": "---\ntitle: Empathic Voice Interface (EVI)\nexcerpt: >-\n  Hume's Empathic Voice Interface (EVI) is the world’s first emotionally\n  intelligent voice AI.\n---\n\nHume's Empathic Voice Interface (EVI) is the world’s first emotionally intelligent voice AI. It accepts live audio input and returns both generated audio and transcripts augmented with measures of vocal expression. By processing the tune, rhythm, and timbre of speech, EVI unlocks a variety of new capabilities, like knowing when to speak and generating more empathic language with the right tone of voice. These features enable smoother and more satisfying voice-based interactions between humans and AI, opening new possibilities for personal AI, customer service, accessibility, robotics, immersive gaming, VR experiences, and much more.\n\nWe provide a suite of tools to integrate and customize EVI for your application, including a WebSocket API that handles audio and text transport, a REST API, and SDKs for TypeScript and Python to simplify integration into web and Python-based projects. Additionally, we provide open-source examples and a web widget as practical starting points for developers to explore and implement EVI's capabilities within their own projects.\n\n## Building with EVI\n\nThe main way to work with EVI is through a WebSocket connection that sends audio and receives responses in real-time. This enables fluid, bidirectional dialogue where users speak, EVI listens and analyzes their expressions, and EVI generates emotionally intelligent responses.\n\nYou start a conversation by connecting to the WebSocket and streaming the user’s voice input to EVI. You can also send EVI text, and it will speak that text aloud.\n\nEVI will respond with:\n\n- The text of EVI’s reply\n- EVI’s expressive audio response\n- A transcript of the user's message along with their vocal expression measures\n- Messages if the user interrupts EVI\n- A message to let you know if EVI has finished responding\n- Error messages if issues arise\n\n## Overview of EVI features\n\n<table>\n  <tbody>\n    <tr>\n      <td rowSpan=\"4\"> Basic capabilities</td>\n      <td>Transcribes speech (ASR)</td>\n      <td>\n        Fast and accurate ASR in partnership with Deepgram returns a full transcript of the conversation, with Hume’s\n        expression measures tied to each sentence.\n      </td>\n    </tr>\n    <tr>\n      <td>Generates language responses (LLM)</td>\n      <td>\n        Rapid language generation with our eLLM, blended seamlessly with configurable partner APIs (OpenAI, Anthropic,\n        Fireworks).\n      </td>\n    </tr>\n    <tr>\n      <td>Generates voice responses (TTS)</td>\n      <td>Streaming speech generation via our proprietary expressive text-to-speech model.</td>\n    </tr>\n    <tr>\n      <td>Responds with low latency</td>\n      <td>Immediate response provided by the fastest models running together on one service.</td>\n    </tr>\n    <tr>\n      <td rowSpan=\"6\"> Empathic AI (eLLM) features</td>\n      <td>Responds at the right time</td>\n      <td>\n        Uses your tone of voice for state-of-the-art end-of-turn detection — the true bottleneck to responding rapidly\n        without interrupting you.\n      </td>\n    </tr>\n    <tr>\n      <td>Understands users’ prosody</td>\n      <td>\n        Provides streaming measurements of the tune, rhythm, and timbre of the user’s speech using Hume’s\n        <a href=\"https://www.hume.ai/products/speech-prosody-model\">prosody</a> model, integrated with our eLLM.\n      </td>\n    </tr>\n    <tr>\n      <td>Forms its own natural tone of voice</td>\n      <td>\n        Guided by the users’ prosody and language, our model responds with an empathic, naturalistic tone of voice,\n        matching the users’ nuanced “vibe” (calmness, interest, excitement, etc.). It responds to frustration with an\n        apologetic tone, to sadness with sympathy, and more.\n      </td>\n    </tr>\n    <tr>\n      <td>Responds to expression</td>\n      <td>\n        Powered by our empathic large language model (eLLM), EVI crafts responses that are not just intelligent but\n        attuned to what the user is expressing with their voice.\n      </td>\n    </tr>\n    <tr>\n      <td>Always interruptible</td>\n      <td>\n        Stops rapidly whenever users interject, listens, and responds with the right context based on where it left off.\n      </td>\n    </tr>\n    <tr>\n      <td>Aligned with well-being</td>\n      <td>\n        Trained on human reactions to optimize for positive expressions like happiness and satisfaction. EVI will\n        continue to learn from users’ reactions using our upcoming fine-tuning endpoint.\n      </td>\n    </tr>\n    <tr>\n      <td rowSpan=\"6\"> Developer tools</td>\n      <td>WebSocket API</td>\n      <td>Primary interface for real-time bidirectional interaction with EVI, handles audio and text transport.</td>\n    </tr>\n    <tr>\n      <td>REST API </td>\n      <td>\n        A configuration API that allows developers to customize their EVI - the system prompt, speaking rate, voice,\n        LLM, tools the EVI can use, and other options. The system prompt shapes an EVI’s behavior and its responses.\n      </td>\n    </tr>\n    <tr>\n      <td>TypeScript SDK</td>\n      <td>Encapsulates complexities of audio and WebSockets for seamless integration into web applications.</td>\n    </tr>\n    <tr>\n      <td>Python SDK</td>\n      <td>Simplifies the process of integrating EVI into any Python-based project.</td>\n    </tr>\n    <tr>\n      <td>Open source examples</td>\n      <td>Example repositories provide a starting point for developers and demonstrate EVI's capabilities.</td>\n    </tr>\n    <tr>\n      <td>Web widget </td>\n      <td>\n        An iframe widget that any developer can easily embed in their website, allowing users to speak to a\n        conversational AI voice about your content.\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n## API limits\n\n- **Request rate limit**: limited to fifty (50) requests per second.\n- **Payload size limit**: messages cannot exceed 16MB in size.\n- **WebSocket connections limit**: limited to up to two (2) concurrent connections.\n- **WebSocket duration limit**: connections are subject to a timeout after thirty (30) minutes of activity, or after one (1) minute of inactivity.\n\n<Callout intent=\"info\">\n  To request an increase in your concurrent connection limit, please submit the \"Application to Increase EVI Concurrent Connections\" found in the EVI section of the [Profile Tab](https://beta.hume.ai/settings/profile).\n</Callout>\n\n## Authentication\n\nThe Empathic Voice Interface (EVI) supports two authentication strategies:\n\n1. **OAuth strategy**: this strategy is tailored for client-side development. It involves an additional step of obtaining an access token by generating a client ID and making an API request to fetch the access token. This extra step adds a layer of security to ensure your API key does not get exposed.\n2. **API key strategy**: designed for server-side development, this strategy allows developers to establish an authenticated WebSocket connection directly using their API key. This eliminates the need for an additional access token request.\n\nUsing either strategy, establishing an authenticated connection requires that you specify the authentication strategy and supply the corresponding key in the request parameters of the EVI WebSocket endpoint. See step-by-step instructions for obtaining an access token below:\n\n<Steps>\n### Obtain API keys\n\nYour API key and client secret can both be accessed from the Portal:\n\n1. Sign in to [Hume](https://beta.hume.ai)\n2. Navigate to the [API Keys page](https://beta.hume.ai/settings/keys)\n\n### Fetch access token\n\nUsing your API key and client secret, a client ID can now be generated. To generate your client ID you'll need to concatenate your API key and client secret, separated by a colon (`:`), then base64 encode the string. With your client ID you can now initiate a POST request to `https://api.hume.ai/oauth2-cc/token` to receive your `access token`.\n\n<CodeBlocks>\n  <CodeBlock title='cURL'>\n    ```sh\n    # Configuration variables\n    apiKey=\"${API_KEY}\"  # Sourced from environment variable or secure store\n    clientSecret=\"${CLIENT_SECRET}\"  # Sourced from environment variable or secure store\n    # Base64 encode API Key and Client Secret\n    clientId=$(echo -n \"$apiKey:$clientSecret\" | base64)\n    # Perform the API request\n    response=$(curl -s --location 'https://api.hume.ai/oauth2-cc/token' \\\n      --header 'Content-Type: application/x-www-form-urlencoded' \\\n      --header \"Authorization: Basic $clientId\" \\\n      --data-urlencode 'grant_type=client_credentials')\n    ```\n  </CodeBlock>\n\n  <CodeBlock title=\"TypeScript\">\n    ```typescript\n    import { Hume, HumeClient } from 'hume';\n    /**\n     * When using the TypeScript SDK, the client ID is generated and \n     * the access token is retrieved and applied automatically. Simply \n     * provide your API key and Client Secret when instantiating the \n     * Hume client.\n     */\n    const client = new HumeClient({\n      apiKey: <YOUR_API_KEY>,\n      clientSecret: <YOUR_CLIENT_SECRET>,\n    });\n    ```\n  </CodeBlock>\n</CodeBlocks>\n\nYour `access token` can now be used to establish an authenticated WebSocket connection.\n\n</Steps>\n\n---\n"
      },
      "docs/pages/documentation/empathic-voice-interface/quickstart.mdx": {
        "markdown": "This quickstart guide outlines the process of implementing the Empathic Voice Interface (EVI).\n\nSelect a language below to get started:\n\n<Tabs>\n  <Tab title='TypeScript'>\n    This tutorial utilizes Hume's TypeScript SDK to consume the Empathic Voice Interface, and can be broken down into five key components: authentication, \n    establishing a secure WebSocket connection, capturing the audio input, and playing back the audio output. To see this code fully implemented within a \n    frontend web application, visit the Github repo here: [hume-evi-typescript-example](https://github.com/HumeAI/hume-api-examples/tree/main/evi-typescript-example).\n    \n    <Steps>\n      ### Authenticate\n\n      In order to establish an authenticated connection we will first need to instantiate the Hume client with our API key and Client Secret. \n      These keys can be obtained by logging into the portal and visiting the [API keys page](https://beta.hume.ai/settings/keys).\n\n      <Callout intent='info'>\n        In the sample code below, the API key and client secret have been saved to\n        environment variables. Avoid hard coding these values in your project to\n        prevent them from being leaked.\n      </Callout>\n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        import { Hume, HumeClient } from 'hume';\n\n        // instantiate the Hume client and authenticate\n        const client = new HumeClient({\n          apiKey: import.meta.env.HUME_API_KEY,\n          clientSecret: import.meta.env.HUME_CLIENT_SECRET,\n        });\n        ```\n      </CodeBlock>\n      \n      When using our Typescript SDK, the Access Token necessary to establish an authenticated connection with EVI is fetched and applied under the hood \n      after the Hume client is instantiated with your credientials.\n\n      ### Connect\n\n      With the Hume client instantiated with our credentials, we can now establish an authenticated WebSocket connection with EVI and define our WebSocket event handlers. \n      For now we will include placeholder event handlers to be updated in later steps.\n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        import { Hume, HumeClient } from 'hume';\n\n        // instantiate the Hume client and authenticate\n        const client = new HumeClient({\n          apiKey: import.meta.env.HUME_API_KEY,\n          clientSecret: import.meta.env.HUME_CLIENT_SECRET,\n        });\n\n        // instantiates WebSocket and establishes an authenticated connection\n        const socket = await client.empathicVoice.chat.connect({\n          onOpen: () => {\n            console.log('WebSocket connection opened');\n          },\n          onMessage: (message) => {\n            console.log(message);\n          },\n          onError: (error) => {\n            console.error(error);\n          },\n          onClose: () => {\n            console.log('WebSocket connection closed');\n          }\n        });\n        ```\n      </CodeBlock>\n\n      ### Audio input\n\n      To capture audio and send it through the socket as an audio input, several steps are necessary. First, we need to handle user permissions \n      to access the microphone. Next, we'll use the Media Stream API to capture the audio, and the MediaRecorder API to record the captured audio. \n      We then base64 encode the recording audio Blob, and finally send the encoded audio through the WebSocket using the `sendAudioInput`method. \n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        import {\n          convertBlobToBase64,\n          ensureSingleValidAudioTrack,\n          getAudioStream,\n        } from 'hume';\n\n        // the recorder responsible for recording the audio stream to be prepared as the audio input\n        let recorder: MediaRecorder | null = null;\n        // the stream of audio captured from the user's microphone\n        let audioStream: MediaStream | null = null;\n\n        // define function for capturing audio\n        async function captureAudio(): Promise<void> {\n          // prompts user for permission to capture audio, obtains media stream upon approval\n          audioStream = await getAudioStream();\n          // ensure there is only one audio track in the stream\n          ensureSingleValidAudioTrack(audioStream);\n          // instantiate the media recorder\n          recorder = new MediaRecorder(audioStream, { mimeType });\n          // callback for when recorded chunk is available to be processed\n          recorder.ondataavailable = async ({ data }) => {\n            // IF size of data is smaller than 1 byte then do nothing\n            if (data.size < 1) return;\n            // base64 encode audio data\n            const encodedAudioData = await convertBlobToBase64(data);\n            // define the audio_input message JSON\n            const audioInput: Omit<Hume.empathicVoice.AudioInput, 'type'> = {\n              data: encodedAudioData,\n            };\n            // send audio_input message\n            socket?.sendAudioInput(audioInput);\n          };\n          // capture audio input at a rate of 100ms (recommended)\n          const timeSlice = 100;\n          recorder.start(timeSlice);\n        }\n\n        // define a WebSocket open event handler to capture audio\n        async function handleWebSocketOpenEvent(): Promise<void> {\n          // place logic here which you would like invoked when the socket opens\n          console.log('Web socket connection opened');\n          await captureAudio();\n        }\n        ```\n      </CodeBlock>\n\n      <Callout intent='info'>\n        Accepted audio formats include: `mp3`, `wav`, `aac`, `ogg`, `flac`, `webm`,\n        `avr`, `cdda`, `cvs/vms`, `aiff`, `au`, `amr`, `mp2`, `mp4`, `ac3`, `avi`,\n        `wmv`, `mpeg`, `ircam`.\n      </Callout>\n\n      ### Audio output\n\n      The response will comprise multiple messages, detailed as follows:\n\n      1. **user_message**: This message encapsulates the transcription of the audio input. Additionally, it\n        includes expression measurement predictions related to the speaker's vocal prosody.\n      2. **assistant_message**: For every sentence within the response, an `AssistantMessage` is dispatched.\n        This message not only relays the content of the response but also features predictions regarding the\n        expressive qualities of the generated audio response.\n      3. **audio_output**: Accompanying each `AssistantMessage`, an `AudioOutput` message will be provided.\n        This contains the actual audio (binary) response corresponding to an `AssistantMessage`.\n      4. **assistant_end**: Signifying the conclusion of the response to the audio input, an `AssistantEnd`\n        message is delivered as the final piece of the communication.\n\n      Here we will focus on playing the received audio output. To play the audio output from the response we\n      need to define our logic for converting the received binary to a Blob, and creating an HTMLAudioInput\n      to play the audio. We then need to update the client's on message WebSocket event handler to invoke\n      the logic to playback the audio when receiving the audio output. To manage playback for the incoming\n      audio here we'll implement a queue and sequentially play the audio back.\n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        import { \n          convertBase64ToBlob,\n          getBrowserSupportedMimeType\n        } from 'hume';\n\n        // audio playback queue\n        const audioQueue: Blob[] = [];\n        // flag which denotes whether audio is currently playing or not\n        let isPlaying = false;\n        // the current audio element to be played\n        let currentAudio: : HTMLAudioElement | null = null;\n        // mime type supported by the browser the application is running in\n        const mimeType: MimeType = (() => {\n          const result = getBrowserSupportedMimeType();\n          return result.success ? result.mimeType : MimeType.WEBM;\n        })();\n\n        // play the audio within the playback queue, converting each Blob into playable HTMLAudioElements\n        function playAudio(): void {\n          // IF there is nothing in the audioQueue OR audio is currently playing then do nothing\n          if (!audioQueue.length || isPlaying) return;\n          // update isPlaying state\n          isPlaying = true;\n          // pull next audio output from the queue\n          const audioBlob = audioQueue.shift();\n          // IF audioBlob is unexpectedly undefined then do nothing\n          if (!audioBlob) return;\n          // converts Blob to AudioElement for playback\n          const audioUrl = URL.createObjectURL(audioBlob);\n          currentAudio = new Audio(audioUrl);\n          // play audio\n          currentAudio.play();\n          // callback for when audio finishes playing\n          currentAudio.onended = () => {\n            // update isPlaying state\n            isPlaying = false;\n            // attempt to pull next audio output from queue\n            if (audioQueue.length) playAudio();\n          };\n        }\n\n        // define a WebSocket message event handler to play audio output\n        function handleWebSocketMessageEvent(\n          message: Hume.empathicVoice.SubscribeEvent\n        ): void {\n          // place logic here which you would like to invoke when receiving a message through the socket\n          switch (message.type) {\n            // add received audio to the playback queue, and play next audio output\n            case 'audio_output':\n              // convert base64 encoded audio to a Blob\n              const audioOutput = message.data;\n              const blob = convertBase64ToBlob(audioOutput, mimeType);\n              // add audio Blob to audioQueue\n              audioQueue.push(blob);\n              // play the next audio output\n              if (audioQueue.length === 1) playAudio();\n              break;\n          }\n        }\n        ```\n      </CodeBlock>\n\n      ### Interrupt\n\n      Interruptibility is a distinguishing feature of the Empathic Voice Interface. If an audio input is sent\n      through the websocket while receiving response messages for a previous audio input, the response to\n      the previous audio input will stop being sent. Additionally the interface will send back a\n      `user_interruption` message, and begin responding to the new audio input.\n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        // function for stopping the audio and clearing the queue\n        function stopAudio(): void {\n          // stop the audio playback\n          currentAudio?.pause();\n          currentAudio = null;\n          // update audio playback state\n          isPlaying = false;\n          // clear the audioQueue\n          audioQueue.length = 0;\n        }\n\n        // update WebSocket message event handler to handle interruption\n        function handleWebSocketMessageEvent(\n          message: Hume.empathicVoice.SubscribeEvent\n        ): void {\n          // place logic here which you would like to invoke when receiving a message through the socket\n          switch (message.type) {\n            // add received audio to the playback queue, and play next audio output\n            case 'audio_output':\n              // convert base64 encoded audio to a Blob\n              const audioOutput = message.data;\n              const blob = convertBase64ToBlob(audioOutput, mimeType);\n              // add audio Blob to audioQueue\n              audioQueue.push(blob);\n              // play the next audio output\n              if (audioQueue.length === 1) playAudio();\n              break;\n            // stop audio playback, clear audio playback queue, and update audio playback state on interrupt\n            case 'user_interruption':\n              stopAudio();\n              break;\n          }\n        }\n        ```\n      </CodeBlock>\n    </Steps>\n  </Tab>\n  <Tab title='Next.js (App Router)'>\n    This tutorial utilizes Hume's React SDK to consume the Empathic Voice Interface, and can be broken down into two key components: authentication and configuring the context provider. To see this code fully implemented within a frontend web application using the App Router from Next.js, visit this GitHub repository: [evi-nextjs-app-router](https://github.com/HumeAI/hume-api-examples/tree/main/evi-next-js-app-router)\n    \n    <Steps>\n      ### Prerequisites\n\n      Before you begin, you will need to have [an existing Next.js project set up using the App Router](https://nextjs.org/docs/getting-started/installation).\n\n      ### Authenticate\n\n      In order to make an authenticated connection we will first need to generate an access token. Doing so will\n      require your API key and client secret. These keys can be obtained by logging into the portal and visiting the\n      [API keys page](https://beta.hume.ai/settings/keys).\n\n      <Callout intent='info'>\n        In the sample code below, the API key and client secret have been saved to\n        environment variables. Avoid hard coding these values in your project to\n        prevent them from being leaked.\n      </Callout>\n\n        <CodeBlock title=\"React\">\n          ```typescript\n          // ./app/page.tsx\n          import ClientComponent from \"@/components/ClientComponent\";\n          import { fetchAccessToken } from \"@humeai/voice\";\n\n          export default async function Page() {\n            const accessToken = await fetchAccessToken({\n              apiKey: String(process.env.HUME_API_KEY),\n              clientSecret: String(process.env.HUME_CLIENT_SECRET),\n            });\n\n            if (!accessToken) {\n              throw new Error();\n            }\n\n            return <ClientComponent accessToken={accessToken} />;\n          }\n          ```\n        </CodeBlock>\n\n      ### Setup Context Provider\n\n      After fetching our access token we can pass it to our `ClientComponent`. First we set up the VoiceProvider so that our `Messages` and `Controls` components can access the context. We also pass the access token to the VoiceProvider's auth prop for setting up the websocket connection.\n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        // ./components/ClientComponent.tsx \n        \"use client\";\n        import { VoiceProvider } from \"@humeai/voice-react\";\n        import Messages from \"./Controls\";\n        import Controls from \"./Messages\";\n\n        export default function ClientComponent({\n          accessToken,\n        }: {\n          accessToken: string;\n        }) {\n          return (\n            <VoiceProvider auth={{ type: \"accessToken\", value: accessToken }}>\n              <Messages />\n              <Controls />\n            </VoiceProvider>\n          );\n        }\n        ```\n      </CodeBlock>\n\n      ### Audio input\n\n     `<VoiceProvider/>` will handle the microphone and playback logic. \n\n     ### Starting session\n\n     In order to start a session, you can use the `connect` function. It is important that this event is attached to a user interaction event (like a click) so that the browser is capable of playing Audio.\n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        // ./components/Controls.tsx\n        \"use client\";\n        import { useVoice, VoiceReadyState } from \"@humeai/voice-react\";\n        export default function Controls() {\n          const { connect, disconnect, readyState } = useVoice();\n\n          if (readyState === VoiceReadyState.OPEN) {\n            return (\n              <button\n                onClick={() => {\n                  disconnect();\n                }}\n              >\n                End Session\n              </button>\n            );\n          }\n\n          return (\n            <button\n              onClick={() => {\n                connect()\n                  .then(() => {\n                    /* handle success */\n                  })\n                  .catch(() => {\n                    /* handle error */\n                  });\n              }}\n            >\n              Start Session\n            </button>\n          );\n        }\n        ```\n      </CodeBlock>\n\n      ### Displaying message history\n\n      To display the message history, we can use the `useVoice` hook to access the messages array. We can then map over the messages array to display the role (Assistant or User) and content of each message.\n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        // ./components/Messages.tsx\n        \"use client\";\n        import { useVoice } from \"@humeai/voice-react\";\n\n        export default function Messages() {\n          const { messages } = useVoice();\n\n          return (\n            <div>\n              {messages.map((msg, index) => {\n                if (msg.type === \"user_message\" || msg.type === \"assistant_message\") {\n                  return (\n                    <div key={msg.type + index}>\n                      <div>{msg.message.role}</div>\n                      <div>{msg.message.content}</div>\n                    </div>\n                  );\n                }\n\n                return null;\n              })}\n            </div>\n          );\n        }\n        ```\n      </CodeBlock>\n\n      ### Interrupt\n\n      Unlike the TypeScript example, the Next.js example does not require additional code to handle interruptions. The `VoiceProvider` handles this automatically.\n    </Steps>\n  </Tab>\n  <Tab title='Next.js (Pages Router)'>\n    This tutorial utilizes Hume's React SDK to consume the Empathic Voice Interface, and can be broken down into two key components: authentication and configuring the context provider. This tutorial utilizes Hume's React SDK to consume the Empathic Voice Interface, and can be broken down into two key components: authentication and configuring the context provider. To see this code fully implemented within a frontend web application using the Pages Router from Next.js, visit this GitHub repository: [evi-nextjs-pages-router](https://github.com/HumeAI/hume-api-examples/tree/main/evi-next-js-pages-router)\n    \n    <Steps>\n      ### Prerequisites\n\n      Before you begin, you will need to have [an existing Next.js project set up using the Pages Router](https://nextjs.org/docs/getting-started/installation).\n      \n      ### Authenticate and Setup Context Provider\n\n      In order to make an authenticated connection we will first need to generate an access token. Doing so will\n      require your API key and client secret. These keys can be obtained by logging into the portal and visiting the\n      [API keys page](https://beta.hume.ai/settings/keys).\n\n      <Callout intent='info'>\n        In the sample code below, the API key and client secret have been saved to\n        environment variables. Avoid hard coding these values in your project to\n        prevent them from being leaked.\n      </Callout>\n\n        <CodeBlock title=\"React\">\n          ```typescript\n          // ./pages/index.tsx\n          import Controls from \"@/components/Controls\";\n          import Messages from \"@/components/Messages\";\n          import { fetchAccessToken } from \"@humeai/voice\";\n          import { VoiceProvider } from \"@humeai/voice-react\";\n          import { InferGetServerSidePropsType } from \"next\";\n\n          export const getServerSideProps = async () => {\n            const accessToken = await fetchAccessToken({\n              apiKey: String(process.env.HUME_API_KEY),\n              clientSecret: String(process.env.HUME_CLIENT_SECRET),\n            });\n\n            if (!accessToken) {\n              return {\n                redirect: {\n                  destination: \"/error\",\n                  permanent: false,\n                },\n              };\n            }\n\n            return {\n              props: {\n                accessToken,\n              },\n            };\n          };\n\n          type PageProps = InferGetServerSidePropsType<typeof getServerSideProps>;\n\n          export default function Page({ accessToken }: PageProps) {\n            return (\n              <VoiceProvider auth={{ type: \"accessToken\", value: accessToken }}>\n                <Messages />\n                <Controls />\n              </VoiceProvider>\n            );\n          }\n          ```\n        </CodeBlock>\n\n      ### Audio input\n\n     `<VoiceProvider/>` is designed to manage microphone inputs and audio playback. It abstracts the complexities of audio processing to allow developers to focus on developing interactive voice-driven functionalities. For a closer look at how `<VoiceProvider/>` processes audio inputs and controls playback, you can view the source code [here](https://github.com/HumeAI/empathic-voice-api-js/blob/main/packages/react/src/lib/VoiceProvider.tsx).\n\n     ### Starting session\n\n     In order to start a session, you can use the `connect` function. It is important that this event is attached to a user interaction event (like a click) so that the browser is capable of playing Audio.\n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        // ./components/Controls.tsx\n        import { useVoice, VoiceReadyState } from \"@humeai/voice-react\";\n        export default function Controls() {\n          const { connect, disconnect, readyState } = useVoice();\n\n          if (readyState === VoiceReadyState.OPEN) {\n            return (\n              <button\n                onClick={() => {\n                  disconnect();\n                }}\n              >\n                End Session\n              </button>\n            );\n          }\n\n          return (\n            <button\n              onClick={() => {\n                connect()\n                  .then(() => {\n                    /* handle success */\n                  })\n                  .catch(() => {\n                    /* handle error */\n                  });\n              }}\n            >\n              Start Session\n            </button>\n          );\n        }\n        ```\n      </CodeBlock>\n\n      ### Displaying message history\n\n      To display the message history, we can use the `useVoice` hook to access the messages array. We can then map over the messages array to display the role (Assistant or User) and content of each message.\n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        // ./components/Messages.tsx\n        import { useVoice } from \"@humeai/voice-react\";\n\n        export default function Messages() {\n          const { messages } = useVoice();\n\n          return (\n            <div>\n              {messages.map((msg, index) => {\n                if (msg.type === \"user_message\" || msg.type === \"assistant_message\") {\n                  return (\n                    <div key={msg.type + index}>\n                      <div>{msg.message.role}</div>\n                      <div>{msg.message.content}</div>\n                    </div>\n                  );\n                }\n\n                return null;\n              })}\n            </div>\n          );\n        }\n        ```\n      </CodeBlock>\n\n      ### Interrupt\n\n      Unlike the TypeScript example, the Next.js example does not require additional code to handle interruptions. The `VoiceProvider` handles this automatically by pushing audio messages to a playback queue and cancelling audio playback when an interruption message is received.\n    </Steps>\n  </Tab>\n  <Tab title='Python'>\n    This is a simplified example of streaming a session with EVI using your device's microphone. To see this code fully implemented with complete instructions, visit the GitHub repository: [evi-python-example](https://github.com/HumeAI/hume-api-examples/tree/main/evi-python-example)\n\n    Python versions 3.9, 3.10, and 3.11 are supported. To use the basic functionality of `HumeVoiceClient`, `HumeBatchClient` or `HumeStreamClient`, there are no additional system dependencies. However, using the audio playback functionality of the EVI `MicrophoneInterface` may require a few extra dependencies depending on your operating system. \n\n    The Python SDK is currently supported on Mac and Linux, and not yet on Windows.\n\n\n    <Callout intent='info'>\n    We recommend using a virtual environment like `venv` in Python to manage project-specific dependencies without affecting the global Python installation. This helps avoid version conflicts between packages and makes it easier to replicate and troubleshoot projects across different systems. See the section [\"Setting up a virtual environment\"](https://github.com/HumeAI/hume-api-examples/blob/main/evi-python-example/README.md#setting-up-a-virtual-environment-optional) in the repository.\n    </Callout>\n\n    To use microphone functionality in the `MicrophoneInterface` as shown below, run:\n\n    ```bash\n    pip install \"hume[microphone]\"\n    ```\n\n    For audio playback, install dependencies with the following commands:\n\n    <CodeBlocks>\n      <CodeBlock title=\"Mac\">\n          ```bash\n          brew update\n          brew upgrade\n          brew install ffmpeg\n          ```\n      </CodeBlock>\n      <CodeBlock title=\"Linux\">\n          ```bash\n          sudo apt-get --yes update\n          sudo apt-get --yes install libasound2-dev libportaudio2 ffmpeg\n          ```\n      </CodeBlock>\n      <CodeBlock title=\"Windows\">\n          ```text\n          Not yet supported\n          ```\n      </CodeBlock>\n    </CodeBlocks>\n\n    Let's walk through the steps, or you can jump down to the complete code snippet under [\"Putting it all together.\"](#putting-it-all-together)\n\n    <Callout intent='info'>\n        In the sample code below, the Hume API key is hard-coded; this is to make this guide as simple as possible. **In practice, do not hard code these values in your project to prevent them from being leaked.** See the section [\"Authenticate and Connect\"](https://github.com/HumeAI/hume-api-examples/blob/main/evi-python-example/README.md#2-authenticate-and-connect) in the repository for instructions on using environment variables to prevent accidental exposure of your credentials.\n    </Callout>\n\n    <Steps>\n      ### Import libraries\n\n      First we import the required Hume libraries and asyncio for asynchronous functions calls.\n\n      <CodeBlock title=\"Python\">\n      ```python\n      import asyncio\n      from hume import HumeVoiceClient, MicrophoneInterface\n      ```\n      </CodeBlock>\n\n      ### Authenticate and Connect\n\n      The Python SDK uses a Hume API key to authenticate. These keys can be obtained by logging into the portal and visiting the [API keys page](https://beta.hume.ai/settings/keys). Replace the placeholder \"`HUME_API_KEY`\" with your Hume API key.\n\n      <CodeBlock title=\"Python\">\n        ```python\n        async def main() -> None:\n          # Paste your Hume API key here.\n          HUME_API_KEY = \"HUME_API_KEY\"\n          # Connect and authenticate with Hume\n          client = HumeVoiceClient(HUME_API_KEY)\n\n          # Start streaming EVI over your device's microphone and speakers\n          async with client.connect() as socket:\n              await MicrophoneInterface.start(socket)\n\n        ```\n      </CodeBlock>\n\n      #### Optional: Specify device\n\n      You can specify your microphone device using the `device` parameter. See [Optional: Specify device](https://github.com/HumeAI/hume-api-examples/tree/main/evi-python-example#optional-specify-device) in the repository for details on how to list your audio devices and manually set one for EVI.\n\n      ### Execute\n\n      Initialize, execute, and manage the lifecycle of the event loop in the asyncio-based application, making sure that the main() coroutine runs effectively and that the application shuts down cleanly after the coroutine finishes executing.\n\n      <CodeBlock title=\"Python\">\n        ```python\n        asyncio.run(main())\n        ```\n      </CodeBlock>\n    </Steps>\n    ## Putting it all together\n\n    Here is the complete code from the steps above to run this example. Keep in mind that **in practice you should use an environment variable to store the Hume API key,** as is done in the [evi-python-example](https://github.com/HumeAI/hume-api-examples/tree/main/evi-python-example) repository.\n    <CodeBlock title=\"Python\">\n    ```python\n    import asyncio\n    from hume import HumeVoiceClient, MicrophoneInterface\n\n    async def main() -> None:\n      # Paste your Hume API key here\n      HUME_API_KEY = \"HUME_API_KEY\"\n      # Connect and authenticate with Hume\n      client = HumeVoiceClient(HUME_API_KEY)\n\n      # Start streaming EVI over your device's microphone and speakers \n      async with client.connect() as socket:\n          await MicrophoneInterface.start(socket)\n    asyncio.run(main())\n    ```\n    </CodeBlock>\n  </Tab>\n</Tabs>\n\n---\n"
      },
      "docs/pages/documentation/empathic-voice-interface/configuration.mdx": {
        "markdown": "---\ntitle: Configuring EVI\nexcerpt: Guide to configuring the Empathic Voice Interface (EVI)\n---\n\nThe Empathic Voice Interface (EVI) is designed to be highly configurable, allowing developers to customize the interface to align with their specific requirements.\nConfiguration of EVI can be managed through two primary methods: an EVI configuration and session settings.\n\n## EVI configuration\n\nEVI configuration options affect the behavior and capabilities of the interface, and include the following configuration options:\n\n- **System prompt**: Set the system prompt text to provide instructions and context that guide how EVI should respond.\n- **Language model**: Select a language model that best fits your application’s needs. For details on incorporating your own language model, refer to our guide\non [using your own language model](./custom-language-model).\n- **Voice**: Select a voice for EVI from a growing list of available options.\n- **Tools**: Choose user-created tools or built-in tools for EVI to use during conversations. For details on creating tools and adding them to your configuration, \nsee our guide on [tool use](./tool-use).\n\n<Callout intent='info'>\n  Configs, as well as system prompts, tools, and language models, are versioned. This versioning system supports iterative development, allowing you to progressively refine\n  configurations and revert to previous versions if needed.\n</Callout>\n\nSee instructions below for creating an EVI configuration through the [Portal](https://beta.hume.ai).\n\n<Steps>\n  ### Create a configuration\n\n  In the playground navigate to the [Voice Configurations page](https://beta.hume.ai/voice/config). Click the **Create configuration** button to begin.\n\n  <Frame>\n    ![Voice configurations page](https://fern-image-hosting.s3.us-east-1.amazonaws.com/hume/evi-configurations.png)\n  </Frame>\n\n  Specify the name of the configuration, a description, a system prompt, a voice, and click the **Create** button to create your new configuration.\n\n  <Frame>\n    ![Create your configuration](https://fern-image-hosting.s3.us-east-1.amazonaws.com/hume/create-evi-configuration.png)\n  </Frame>\n\n  <Callout intent='info'>\n    For guidance on engineering your system prompt, see our [prompting guide](./prompting).\n  </Callout>\n\n  ### Test the configuration\n\n  The newly created configuration can now be tested. From the Voice Config details page, click **Run in playground** to test it out.\n\n  <Frame>\n    ![Configuration details page](https://fern-image-hosting.s3.us-east-1.amazonaws.com/hume/evi-configuration-options.png)\n  </Frame>\n\n  Once in the Voice Playground, click **Start Call** to connect to EVI with your configuration.\n\n  <Frame>\n    ![Voice playground](https://fern-image-hosting.s3.us-east-1.amazonaws.com/hume/evi-playground.png)\n  </Frame>\n\n  ### Apply the configuration\n\n  Once you have created an EVI configuration, you can apply it to your conversations with EVI through the API. This involves including the `config_id` in\n  the query parameters of your connection request. You can find the config ID associated with your newly created configuration, on the\n  [Voice Configurations page](https://beta.hume.ai/voice/config).\n\n  <Frame>\n    ![Configuration ID](https://fern-image-hosting.s3.us-east-1.amazonaws.com/hume/evi-config-id.png)\n  </Frame>\n\n  See the sample code below which showcases how to apply your configuration:\n\n  <CodeBlocks>\n    <CodeBlock title='TypeScript'>\n      ```typescript\n      import { Hume, HumeClient } from 'hume';\n      // instantiate the Hume client\n      const client = new HumeClient({\n        apiKey: <YOUR_API_KEY>,\n        clientSecret: <YOUR_CLIENT_SECRET>,\n      });\n      // instantiate WebSocket connection with specified EVI config\n      const socket = await client.empathicVoice.chat.connect({\n        configId: <YOUR_CONFIG_ID> // specify config ID here\n      });\n      ```\n    </CodeBlock>\n    <CodeBlock title='Python'>\n      ```python\n      from hume import HumeVoiceClient, VoiceConfig\n      # Retrieve the Hume API key from the environment variables\n      HUME_API_KEY = os.getenv(\"HUME_API_KEY\")\n      # Connect and authenticate with Hume\n      client = HumeVoiceClient(HUME_API_KEY)\n      # Establish a connection with EVI with your configuration by passing\n      # the config_id as an argument to the connect method\n      async with client.connect(config_id=\"<your-config-id>\") as socket:\n        await MicrophoneInterface.start(socket)\n      ```\n    </CodeBlock>\n  </CodeBlocks>\n\n</Steps>\n\n## Session settings\n\nEVI configurations are persistent and version-controlled. In contrast, session settings are temporary and apply only to the current session, such as\nmicrophone settings. These parameters can be adjusted dynamically based on the requirements of each session to ensure optimal performance and user experience.\n\n<Callout intent='info'>\n  Refer to the [API reference](/reference/empathic-voice-interface-evi/chat/chat#send.Session%20Settings.audio) for detailed descriptions of the various system settings options.\n</Callout>\n\nUpdating the session settings is only a requirement when the audio input is encoded in PCM Linear 16. If this is the case, be sure to send the following `SessionSettingsMessage` prior to sending an audio input:\n\n<CodeBlock title='SessionSettingsMessage'>\n  ```json\n  {\n    \"type\": \"session_settings\",\n    \"audio\": {\n      \"channels\": 1,\n      \"encoding\": \"linear16\",\n      \"sample_rate\": 48000\n    }\n  }\n  ```\n</CodeBlock>\n\n---\n"
      },
      "docs/pages/documentation/empathic-voice-interface/tool-use.mdx": {
        "markdown": "---\ntitle: Tool use\nexcerpt: Guide to using function calling with the Empathic Voice Interface (EVI).\n---\n\nEVI simplifies the integration of external APIs through function calling. Developers can integrate custom functions that are invoked dynamically based on the user’s\ninput, enabling more useful conversations. There are two key concepts for using function calling with EVI, **Tools** and **Configurations** (Configs):\n\n- **Tools** are resources that EVI uses to do things, like search the web or call external APIs. For example, tools can check the weather, update databases, schedule appointments, or take\n  actions based on what occurs in the conversation. While the tools can be user-defined, Hume also offers natively implemented tools, like web search, which are labeled as “built-in” tools.\n\n- **Configurations** enable developers to customize an EVI’s behavior and incorporate these custom tools. Setting up an EVI configuration allows developers to seamlessly integrate\n  their tools into the voice interface. A configuration includes prompts, user-defined tools, and other settings.\n\n<Callout intent='info'>\n  Currently, our function calling feature only supports\n  [OpenAI](https://platform.openai.com/docs/guides/function-calling) models.\n  Function calling is not available if you are using your own [custom language\n  model](/docs/empathic-voice-interface-evi/custom-language-model). We plan to\n  support more function calling LLMs in the future.\n</Callout>\n\nThe focus of this guide is on creating a Tool and a Configuration that allows EVI to use the Tool. Additionally, this guide details the message flow of function calls within a\nsession, and outlines the expected responses when function calls fail. Refer to our [Configuration Guide](/docs/empathic-voice-interface-evi/configuration) for detailed,\nstep-by-step instructions on how to create and use an EVI Configuration.\n\n<Callout intent='info'>\n  Explore this [sample\n  project](https://github.com/HumeAI/hume-api-examples/tree/main/evi-next-js-function-calling)\n  for an example of how Tool use could be implemented in practice.\n</Callout>\n\n## Setup\n\nFor EVI to leverage tools or call functions, a configuration must be created with the tool’s definition. Our step-by-step guide below walks you through creating a tool and a configuration.\n\n<Steps>\n### Create a Tool\n\nWe will first create a Tool with a specified function. In this case, we will create a tool for getting the weather. Create this tool by making a POST request to\n[/tools](/reference/empathic-voice-interface-evi/tools/create-tool) with the following request body:\n\n<CodeBlock title='Request body'>\n  ```json\n  {\n    \"name\": \"get_current_weather\",\n    \"version_description\": \"Fetches current weather and uses celsius or fahrenheit based on user's location.\",\n    \"description\": \"This tool is for getting the current weather.\",\n    \"parameters\": \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\"\n  }\n  ```\n</CodeBlock>\n\n<Callout intent='warning'>\n  The `parameters` field must contain a valid JSON schema.\n</Callout>\n\n<CodeBlock title='Sample response body'>\n  ```json\n  {\n    \"tool_type\": \"FUNCTION\",\n    \"id\": \"15c38b04-ec9c-4ae2-b6bc-5603512b5d00\",\n    \"version\": 0,\n    \"version_description\": \"Fetches current weather and uses celsius or fahrenheit based on user's location.\",\n    \"name\": \"get_current_weather\",\n    \"created_on\": 1714421925626,\n    \"modified_on\": 1714421925626,\n    \"fallback_content\": null,\n    \"description\": \"This tool is for getting the current weather.\",\n    \"parameters\": \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\"\n  }\n  ```\n</CodeBlock>\n\nRecord the value in the `id` field, as we will use it to specify the newly created Tool in the next step.\n\n### Create a Configuration\n\nNext we will create an EVI Configuration called Weather Assistant Config, and include the created Tool by making a POST request to [/configs](/reference/empathic-voice-interface-evi/configs/create-config) with the\nfollowing request body:\n\n<CodeBlock title='Request body'>\n  ```json\n  {\n    \"name\": \"Weather Assistant Config\",\n    \"language_model\": {\n      \"model_provider\": \"OPEN_AI\",\n      \"model_resource\": \"gpt-3.5-turbo\",\n      \"temperature\": null\n    },\n    \"tools\": [\n      {\n        \"id\": \"15c38b04-ec9c-4ae2-b6bc-5603512b5d00\",\n        \"version\": 0\n      }\n    ]\n  }\n  ```\n</CodeBlock>\n\n<CodeBlock title='Sample response body'>\n  ```json\n  {\n    \"id\": \"87e88a1a-3768-4a01-ba54-2e6d247a00a7\",\n    \"version\": 0,\n    \"version_description\": null,\n    \"name\": \"Weather Assistant Config\",\n    \"created_on\": 1714421581844,\n    \"modified_on\": 1714421581844,\n    \"prompt\": null,\n    \"voice\": null,\n    \"language_model\": {\n      \"model_provider\": \"OPEN_AI\",\n      \"model_resource\": \"gpt-3.5-turbo\",\n      \"temperature\": null\n    },\n    \"tools\": [\n      {\n        \"tool_type\": \"FUNCTION\",\n        \"id\": \"15c38b04-ec9c-4ae2-b6bc-5603512b5d00\",\n        \"version\": 0,\n        \"version_description\": \"Fetches current weather and uses celsius or fahrenheit based on user's location.\",\n        \"name\": \"get_current_weather\",\n        \"created_on\": 1714421925626,\n        \"modified_on\": 1714421925626,\n        \"fallback_content\": null,\n        \"description\": \"This tool is for getting the current weather.\",\n        \"parameters\": \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\"\n      }\n    ],\n    \"builtin_tools\": []\n  }\n  ```\n</CodeBlock>\n\n<Callout intent='info'>\n  Ensure your tool definitions conform to the language model's schema. The\n  specified language model will be the one to execute the function calls.\n</Callout>\n\n</Steps>\n\n## Function calling\n\nIn this section we will go over the end-to-end flow of a function call within a chat session. This flow will be predicated on having specified the\n`Weather Assistant Config` when establishing a connection with EVI. See our [Configuration Guide](/docs/empathic-voice-interface-evi/configuration#apply-the-configuration)\nfor details on how to apply your configuration when connecting.\n\n<Callout intent='info'>\n  Currently, EVI does not support parallel function calling. Only one function\n  call can be processed at a time.\n</Callout>\n\n<Steps>\n### Invoke function call\n\nWith EVI configured to use the `get_current_weather` Tool, we can now ask it: \"what is the weather in New York?\" We can expect EVI to respond with a `user_message` and a `tool_call` message:\n\n  <CodeBlock title=\"Sample user_message\">\n    ```json\n    {\n      \"type\": \"user_message\",\n      \"message\": {\n        \"role\": \"user\",\n        \"content\": \"What's the weather in New York?\"\n      },\n      // ...etc\n    }\n    ```\n  </CodeBlock>\n\n  <CodeBlock title=\"Sample tool_call\">\n    ```json\n    {\n      \"type\": \"tool_call\",\n      \"tool_type\": \"function\",\n      \"response_required\": true,\n      \"tool_call_id\": \"call_m7PTzGxrD0i9oCHiquKIaibo\",\n      \"name\": \"get_current_weather\",\n      \"parameters\": \"{\\\"location\\\":\\\"New York\\\",\\\"format\\\":\\\"fahrenheit\\\"}\"\n    }\n    ```\n  </CodeBlock>\n\nNext, extract the `tool_call_id` from the `tool_call` message to be used in the next step. Then, you will need to pass the parameters from the `tool_call`\nmessage to your function to retrieve the weather for the designated city in the specified format.\n\n<Callout intent='info'>\n  While EVI will send a message to indicate when to invoke your function and\n  which parameters to pass into it, you will need to define the function itself\n  in your code. For the sake of this example, you can define a function which\n  actually calls a weather API, or simply hard code a return value like: `60F`.\n</Callout>\n\n### Send function call result\n\nUpon receiving the response from your function, we will then send a `tool_response` message containing the result. The specified `tool_call_id` should match the one received in\nthe `tool_call` message in the previous step.\n\n  <CodeBlock title=\"tool_response\">\n    ```json\n    {\n      \"type\": \"tool_response\",\n      \"tool_call_id\":\"call_m7PTzGxrD0i9oCHiquKIaibo\",\n      \"content\":\"60F\"\n    }\n    ```\n  </CodeBlock>\n\n### EVI responds\n\nAfter the interface receives the `tool_response` message, it will then send an `assistant_message` containing the response generated from the reported result of the function call:\n\n  <CodeBlock title=\"Sample assistant_message\">\n    ```json\n    {\n      \"type\": \"assistant_message\",\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"The current weather in New York is 60F.\"\n      }\n    }\n    ```\n  </CodeBlock>\n</Steps>\n\n## Using built-in tools\n\nUser-defined tools allow EVI to identify when a function should be invoked, but you implement the function itself. On the other hand, Hume also provides built-in tools that are natively integrated. This\nmeans that you don't need to define the function; EVI handles both determining when the function needs to be called and invoking it.\n\nOne such example of a built-in tool we provide is **Web search**. Web search equips EVI with the ability to search the web for up-to-date information.\n\nThis section explains how to specify built-in tools in your configurations and details the message flow you can expect when EVI uses a built-in tool during a chat session.\n\n<Steps>\n\n### Specify built-in tool in EVI configuration\n\nLet's begin by creating a configuration which includes the built-in web search tool by making a POST request to [/configs](/reference/empathic-voice-interface-evi/configs/create-config) with the following request body:\n\n<CodeBlock title='Request body'>\n  ```json\n  {\n    \"name\": \"Web Search Config\",\n    \"language_model\": {\n      \"model_provider\": \"OPEN_AI\",\n      \"model_resource\": \"gpt-3.5-turbo\"\n    },\n    \"builtin_tools\": [\n      { \n        \"name\": \"web_search\",\n        \"fallback_content\": \"Optional fallback content to inform EVI’s spoken response if web search is not successful.\"\n      }\n    ]\n  }\n  ```\n</CodeBlock>\n\n<CodeBlock title='Sample response body'>\n  ```json\n  {\n    \"id\": \"3a60e85c-d04f-4eb5-8076-fb4bd344d5d0\",\n    \"version\": 0,\n    \"version_description\": null,\n    \"name\": \"Web Search Config\",\n    \"created_on\": 1714421925626,\n    \"modified_on\": 1714421925626,\n    \"prompt\": null,\n    \"voice\": null,\n    \"language_model\": {\n      \"model_provider\": \"OPEN_AI\",\n      \"model_resource\": \"gpt-3.5-turbo\",\n      \"temperature\": null\n    },\n    \"tools\": [],\n    \"builtin_tools\": [\n      {\n        \"tool_type\": \"BUILTIN\",\n        \"name\": \"web_search\",\n        \"fallback_content\": \"Optional fallback content to inform EVI’s spoken response if web search is not successful.\"\n      }\n    ]\n  }\n  ```\n</CodeBlock>\n\n### EVI uses built-in tool\n\nNow that we've created an EVI configuration which includes the built-in web search tool, let's review the message flow for when web search is invoked.\n\n<CodeBlock title=\"Web search message flow\">\n  ```json\n  // 1. User asks EVI for the latest news in AI research\n  {\n    \"type\": \"user_message\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"What is the latest news with AI research?\"\n    },\n    // ...etc\n  }\n  // 2. EVI infers it needs to use web search, generates a search query, and invokes Hume's native web search function\n  {\n    \"name\": \"web_search\", \n    \"parameters\": \"{\\\"query\\\":\\\"latest news AI research\\\"}\", \n    \"tool_call_id\": \"call_zt1NYGpPkhR7v4kb4RPxTkLn\", \n    \"type\": \"tool_call\", \n    \"tool_type\": \"builtin\", \n    \"response_required\": false\n  }\n  // 3. EVI sends back the web search results \n  {\n    \"type\": \"tool_response\", \n    \"tool_call_id\": \"call_zt1NYGpPkhR7v4kb4RPxTkLn\", \n    \"content\": \"{ \\”summary\\”:null, “references”: [{\\”content\\”:\\”The latest NVIDIA news is...etc.\\”, \\”url\\”:\\”https://www.artificialintelligence-news.com/\\”, \\”name\\”:\\”AI News - Artificial Intelligence News\\”}] }\", \n    \"tool_name\": \"web_search\", \n    \"tool_type\": \"builtin\"\n  }\n  // 4. EVI sends a response generated from the web search results\n  {\n    \"type\": \"assistant_message\", \n    \"message\": {\n      \"role\": \"assistant\", \n      \"content\": \"IBM Research unveiled a breakthrough analog AI chip for efficient deep learning, and Quantum AI is making transformative advancements by harnessing quantum mechanics.\"\n    },\n    // ...etc\n  }\n  ```\n</CodeBlock>\n\n</Steps>\n\n## Interruptibility\n\nFunction calls can be interrupted to cancel them or to resend them with updated parameters.\n\n### Canceling a function call\n\nJust as EVI is able to infer when to make a function call, it can also infer from the user's input when to cancel one. Here is an overview of what the message flow would look like:\n\n<CodeBlock title=\"Cancel function call message flow\">\n  ```json\n  // 1. User asks what the weather is in New York\n  {\n    \"type\": \"user_message\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"What's the weather in New York?\"\n    },\n    // ...etc\n  }\n  // 2. EVI infers it is time to make a function call\n  {\n    \"type\": \"tool_call\",\n    \"tool_type\": \"function\",\n    \"response_required\": true,\n    \"tool_call_id\": \"call_m7PTzGxrD0i9oCHiquKIaibo\",\n    \"name\": \"get_current_weather\",\n    \"parameters\": \"{\\\"location\\\":\\\"New York\\\",\\\"format\\\":\\\"fahrenheit\\\"}\"\n  }\n  // 3. User communicates sudden disinterested in the weather\n  {\n    \"type\": \"user_message\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"Actually, never mind.\"\n    }\n  }\n  // 4. EVI infers the function call should be canceled\n  {\n      \"type\": \"assistant_message\",\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"Okay, never mind then. Can I help you with anything else?\"\n      },\n      // ...etc\n    }\n  ```\n</CodeBlock>\n\n### Updating a function call\n\nSometimes we don't necessarily want to cancel the function call, and instead want to update the parameters. EVI can infer the difference. Below is a sample flow of\ninterrupting the interface to update the parameters of the function call:\n\n<CodeBlock title=\"Update function call message flow\">\n  ```json\n  // 1. User asks EVI what the weather is in New York\n  {\n    \"type\": \"user_message\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"What's the weather in New York?\"\n    },\n    // ...etc\n  }\n  // 2. EVI infers it is time to make a function call\n  {\n    \"type\": \"tool_call\",\n    \"tool_type\": \"function\",\n    \"response_required\": true,\n    \"tool_call_id\": \"call_m7PTzGxrD0i9oCHiquKIaibo\",\n    \"name\": \"get_current_weather\",\n    \"parameters\": \"{\\\"location\\\":\\\"New York\\\",\\\"format\\\":\\\"fahrenheit\\\"}\"\n  }\n  // 3. User communicates to EVI they want the weather in Los Angeles instead\n  {\n    \"type\": \"user_message\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"Actually, Los Angeles.\"\n    }\n  }\n  // 4. EVI infers the parameters to function call should be updated\n  {\n    \"type\": \"tool_call\",\n    \"response_required\": true,\n    \"tool_call_id\": \"call_5RWLt3IMQyayzGdvMQVn5AOQ\",\n    \"name\": \"get_current_weather\",\n    \"parameters\": \"{\\\"location\\\":\\\"Los Angeles\\\",\\\"format\\\":\\\"celsius\\\"}\"\n  }\n  // 5. User sends results of function call to EVI\n  {\n    \"type\": \"tool_response\",\n    \"tool_call_id\":\"call_5RWLt3IMQyayzGdvMQVn5AOQ\",\n    \"content\":\"72F\"\n  }\n  // 6. EVI sends response container function call result\n  {\n    \"type\": \"assistant_message\",\n    \"message\": {\n      \"role\": \"assistant\",\n      \"content\": \"The current weather in Los Angeles is 72F.\"\n    },\n    // ...etc\n  }\n  ```\n</CodeBlock>\n\n## Handling errors\n\nIt's possible for tool use to fail. For example, it can fail if the `tool_response` message content was not in UTF-8 format or if the function call response timed out. This\nsection outlines how to specify fallback content to be used by EVI to communicate a failure, as well as the message flow for when a function call failure occurs.\n\n### Specifying fallback content\n\nWhen defining your **Tool**, you can specify fallback content within the Tool's `fallback_content` field. When the **Tool** fails to generate content, the text in this\nfield will be sent to the LLM in place of a result. To accomplish this, let's update the **Tool** we created during setup to include fallback content. We can accomplish\nthis by publishing a new version of the **Tool** via a POST request to [/tools/{id}](/reference/empathic-voice-interface-evi/tools/create-tool-version):\n\n<CodeBlock title=\"Request body\">\n  ```json\n  {\n    \"version_description\": \"Adds fallback content\",\n    \"description\": \"This tool is for getting the current weather.\",\n    \"parameters\": \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n    \"fallback_content\": \"Something went wrong. Failed to get the weather.\"\n  }\n  ```\n</CodeBlock>\n\n<CodeBlock title=\"Sample response body\">\n  ```json\n  {\n    \"tool_type\": \"FUNCTION\",\n    \"id\": \"36f09fdc-4630-40c0-8afa-6a3bdc4eb4b1\",\n    \"version\": 1,\n    \"version_type\": \"FIXED\",\n    \"version_description\": \"Adds fallback content\",\n    \"name\": \"get_current_weather\",\n    \"created_on\": 1714421925626,\n    \"modified_on\": 1714425632084,\n    \"fallback_content\": \"Something went wrong. Failed to get the weather.\",\n    \"description\": null,\n    \"parameters\": \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the user's location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\"\n  }\n  ```\n</CodeBlock>\n\n### Failure message flow\n\nThis section outlines the sort of messages that can be expected when Tool use fails. After sending a `tool-response` message, we will know an error, or failure,\noccurred when we receive the `tool_error` message:\n\n<CodeBlock title=\"Bad function call response error flow\">\n  ```json\n  // 1. User asks EVI what the weather is in New York\n  {\n    \"type\": \"user_message\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"What's the weather in New York?\"\n    },\n    // ...etc\n  }\n  // 2. EVI infers it is time to make a function call\n  {\n    \"type\": \"tool_call\",\n    \"tool_type\": \"function\",\n    \"response_required\": true,\n    \"tool_call_id\": \"call_m7PTzGxrD0i9oCHiquKIaibo\",\n    \"name\": \"get_current_weather\",\n    \"parameters\": \"{\\\"location\\\":\\\"New York\\\",\\\"format\\\":\\\"fahrenheit\\\"}\"\n  }\n  // 3. User sends results of function call to EVI (result not formatted correctly)\n  {\n    \"type\": \"tool_response\",\n    \"tool_call_id\":\"call_5RWLt3IMQyayzGdvMQVn5AOQ\",\n    \"content\":\"60F\"\n  }\n  // 4. EVI sends response communicating it failed to process the tool_response\n  {\n    \"type\": \"tool_error\",\n    \"tool_call_id\": \"call_m7PTzGxrD0i9oCHiquKIaibo\",\n    \"error\": \"Malformed tool response: <error message here>\",\n    \"fallback_content\": \"Something went wrong. Failed to get the weather.\",\n    \"level\": \"warn\"\n  }\n  // 5. EVI generates a response based on the failure\n  {\n    \"type\": \"assistant_message\",\n    \"message\": {\n      \"role\": \"assistant\",\n      \"content\": \"Sorry, I wasn't able to get the weather. Can I help with anything else?\"\n    },\n    // ...etc\n  }\n  ```\n</CodeBlock>\n\nLet's cover another type of failure scenario: what if the weather API the function was using was down? In this case we would send EVI a `tool_error` message.\nWhen sending the `tool_error` message we can specify `fallback_content` more specific to the error our function throws. This is what the message flow would be\nfor this type of failure:\n\n<CodeBlock title=\"Failed function call flow\">\n  ```json\n  // 1. User asks EVI what the weather is in New York\n  {\n    \"type\": \"user_message\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"What's the weather in New York?\"\n    },\n    // ...etc\n  }\n  // 2. EVI infers it is time to make a function call\n  {\n    \"type\": \"tool_call\",\n    \"tool_type\": \"function\",\n    \"response_required\": true,\n    \"tool_call_id\": \"call_m7PTzGxrD0i9oCHiquKIaibo\",\n    \"name\": \"get_current_weather\",\n    \"parameters\": \"{\\\"location\\\":\\\"New York\\\",\\\"format\\\":\\\"fahrenheit\\\"}\"\n  }\n  // 3. Function failed, so we send EVI a message communicating the failure on our end\n  {\n    \"type\": \"tool_error\",\n    \"tool_call_id\": \"call_m7PTzGxrD0i9oCHiquKIaibo\",\n    \"error\": \"Malformed tool response: <error message here>\",\n    \"fallback_content\": \"Function execution failure - weather API down.\",\n    \"level\": \"warn\"\n  }\n  // 4. EVI generates a response based on the failure\n  {\n    \"type\": \"assistant_message\",\n    \"message\": {\n      \"role\": \"assistant\",\n      \"content\": \"Sorry, our weather resource is unavailable. Can I help with anything else?\"\n    },\n    // ...etc\n  }\n  ```\n</CodeBlock>\n\n---\n"
      },
      "docs/pages/documentation/empathic-voice-interface/phone-calling.mdx": {
        "markdown": "---\ntitle: Phone calling\nexcerpt: Guide to enabling phone calling with the Empathic Voice Interface (EVI).\n---\n\nThis guide details how to integrate Twilio with the Empathic Voice Interface (EVI) to enable voice-to-voice interactions with EVI over the phone.\n\n## Twilio Console Setup\n\nBy following the steps below, you can set up a Twilio phone number to connect with EVI.\n\n<Steps>\n### Create Twilio phone number\nLog into your Twilio account at Twilio Console.\nNavigate to Phone Numbers > Manage > Active Numbers > Buy a New Number and purchase a phone number of your choice.\n\n<Callout intent='info'>\n  A Twilio account is required to access the Twilio console. Should you run into\n  any issues creating a phone number, please refer to [Twilio’s\n  documentation](https://help.twilio.com/articles/223135247-How-to-Search-for-and-Buy-a-Twilio-Phone-Number-from-Console#h_01GKJ4PBV883F5J4XNCB2W2RGK).\n</Callout>\n\n### Setup webhook\n\n1. After purchasing your number, return to the **Active Numbers** section and select the number you intend to use for EVI.\n2. Create a configuration for EVI by following our [configuration documentation](/docs/empathic-voice-interface-evi/configuration), and save the config ID.\n3. Configure the webhook for incoming calls by setting the following webhook URL, replacing `<YOUR CONFIG ID>` and `<YOUR API KEY>` with your specific credentials:\n   `https://api.hume.ai/v0/evi/twilio?config_id=<YOUR CONFIG ID>&api_key=<YOUR API KEY>`.\n\n### Call EVI\n\nWith your Twilio phone number registered, and the EVI webhook set up, you can now give the number a call to chat with EVI.\n\nAll of [EVI’s core features](https://dev.hume.ai/docs/empathic-voice-interface-evi/overview#overview-of-evi-features) are available through phone calls. However, phone calls do have two primary limitations:\n\n1. **Latency**: transmitting the audio through our Twilio integration adds a few hundred milliseconds, making interactions with EVI slightly slower.\n2. **Audio quality**: web audio commonly utilizes a higher quality standard of 24,000 Hz. However, due to the compression required for phone conversations, telephony audio adheres to a standard of 8,000 Hz.\n\n<Callout intent='info'>\n  Currently, only inbound phone calling is available for EVI - you cannot call\n  people using an EVI number, and will only receive calls. If you are interested\n  in outbound phone calling, please contact the Hume team at hello@hume.ai.\n</Callout>\n\n</Steps>\n\n## Troubleshooting\n\nIf you encounter issues while using Twilio with EVI, consider the following troubleshooting tips:\n\n- **Invalid config ID or API key**: verify that the config ID and API key used in the webhook URL are correct and active.\n- **Exceeded simultaneous connections**: if the usage exceeds our [rate limits](https://dev.hume.ai/docs/empathic-voice-interface-evi/overview#api-limits), consider reaching out to [Hume support](https://dev.hume.ai/support) for possible adjustments or upgrades.\n- **Run out of Hume credits**: if your Hume account has run out of credits, you can purchase more credits to support EVI conversations in your [account settings](https://beta.hume.ai/settings/usage). If you are interested in bulk pricing for EVI, please reach out to Hume support for more information.\n\nIf you encounter issues using Twilio, you can check your Twilio error logs to understand the issues in more depth. You will find these logs in your console, in the dashboard to the left under\n**Monitor** > **Logs** > **Errors** > **Error Logs**. See a list of Twilio errors in their [Error and Warning Dictionary](https://www.twilio.com/docs/api/errors).\n\n---\n"
      },
      "docs/pages/documentation/empathic-voice-interface/prompting.mdx": {
        "markdown": "---\ntitle: Prompt engineering for empathic voice interfaces\nexcerpt: >-\n  System prompts shape the behavior, responses, and style of your custom\n  empathic voice interface (EVI).\n---\n\nCreating an effective system prompt is an essential part of customizing an EVI's behavior. For the most part, prompting EVI is the same as prompting any LLM, but there are some important differences. Prompting for EVIs is different for two main reasons:\n\n1. Prompts are for a **voice-only** interaction with the user rather than a text-based chat.\n2. EVIs can respond to the user’s **emotional expressions** in their tone of voice and not just the text content of their messages.\n\nWhile EVI generates longer responses using a large frontier model, Hume uses a smaller empathic large language model (eLLM) to quickly generate an initial empathic, conversational response. This eLLM eliminates the usual awkward pause while the larger LLM generates its response, providing a more natural conversational flow. Your system prompt is both used by EVI and passed along to the LLM you select.\n\nUsing the following guidelines for prompt engineering allows developers to customize EVI’s response style for any use case, from voice AIs for mental health support to customer service agents.\n\n<Callout intent='info'>\nThe system prompt is a powerful and flexible way to guide the AI’s responses, but it cannot dictate the AI’s responses with absolute precision. Careful prompt design and testing will help EVI hold the kinds of conversations you’re looking for. If you need more control over EVI’s responses, try using our [custom language model](./custom-language-model) feature for complete control of the text generation.\n</Callout>\n\n## EVI-specific prompting instructions\n\nThe instructions below are specific to prompting empathic voice interfaces.\n\n### Prompt for voice-only conversations\n\nAs LLMs are trained for primarily text-based interactions, providing guidelines on how to engage with the user with voice makes conversations feel much more fluid and natural. For example, you may prompt the AI to use natural, conversational language. For example, see the instruction below:\n\n  <CodeBlock title=\"Voice-only XML example\">\n  ```xml\n  <voice_only_response_format>\n\tEverything you output will be spoken aloud with expressive\n\ttext-to-speech, so tailor all of your responses for voice-only\n\tconversations. NEVER output text-specific formatting like markdown,\n\tlists, or anything that is not normally said out loud. Always prefer\n\teasily pronounced words. Seamlessly incorporate natural vocal\n\tinflections like “oh wow” and discourse markers like “I mean” to\n\tmake your conversation human-like and to ease user comprehension.\n  </voice_only_response_format>\n  ```\n  </CodeBlock>\n\n<Callout intent='info'>\nIf you find the default behavior of the LLM acceptable, then you may only need a very short system prompt. Customizing the LLM’s behavior more and maintaining consistency in longer and more varied conversations often requires lengthening the prompt.\n</Callout>\n\n### Expressive prompt engineering\n\nExpressive prompt engineering is Hume’s term for techniques that embed emotional expression measures into conversations to allow language models to respond effectively to the user’s expressions. Hume’s EVI uses our expression measurement models to measure the user’s expressions in their tone of voice. You can use the system prompt to guide how the AI voice responds to these non-verbal cues. EVI measures these expressions in real time and converts them into text-based descriptions to help the LLM understand not just what the user said, but how they said it. EVI detects 48 distinct expressions in the user’s voice and ranks these expressions by our model’s confidence that they are present in the user’s speech. Then, we append text descriptions of the top 3 expressions to the end of each `User message` to communicate the user’s tone of voice to the LLM.\n\nFor example, our demo uses an instruction like the one below to help EVI respond to expressions:\n\n  <CodeBlock title=\"Expressive prompting example\">\n  ```xml\n  <respond_to_expressions>\n\tCarefully analyze the top 3 emotional expressions provided in\n\tbrackets after the User’s message. These expressions indicate the\n\tUser’s tone in the format: {expression1 confidence1, expression2\n\tconfidence2, expression3 confidence3}, e.g., {very happy, quite\n\tanxious, moderately amused}. The confidence score indicates how\n\tlikely the User is expressing that emotion in their voice.\n\tConsider expressions and confidence scores to craft an empathic,\n\tappropriate response. Even if the User does not explicitly state\n\tit, infer the emotional context from expressions. If the User is\n\t“quite” sad, express sympathy; if “very” happy, share in joy; if\n\t“extremely” angry, acknowledge rage but seek to calm; if “very”\n\tbored, entertain. Assistant NEVER outputs content in brackets;\n\tnever use this format in your message; just use expressions to\n\tinterpret tone.\n  </respond_to_expressions>\n  ```\n  </CodeBlock>\n\nExplain to the LLM exactly how you want it to respond to these expressions and how to use them in the conversation. For example, you may want it to ignore expressions unless the user is angry, or to have particular responses to expressions like doubt or confusion. You can also instruct EVI to detect and respond to mismatches between the user’s tone of voice and the text content of their speech:\n\n  <CodeBlock title=\"Detect mismatches example\">\n  ```xml\n  <detect_mismatches>\n\tStay alert for incongruence between words and tone when the user's\n\twords do not match their expressions. Address these disparities out\n\tloud. This includes sarcasm, which usually involves contempt and\n\tamusement. Always reply to sarcasm with funny, witty, sarcastic\n\tresponses; do not be too serious.\n  </detect_mismatches>\n  ```\n  </CodeBlock>\n\nEVI is designed for empathic conversations, and you can use expressive prompt engineering to customize how EVI empathizes with the user’s expressions for your use case.\n\n### Continue from short response model\n\nWe use our eLLM (empathic large language) to rapidly generate short, empathic responses in the conversation before your LLM has finished generating a response. After the eLLM’s response, we send a `User message` with the text `[continue]` to inform the LLM that it should be continuing from the short response. To help the short response and longer response blend seamlessly together, it is important to use an instruction like the one below:\n\n  <CodeBlock title=\"eLLM continuation example\">\n  ```text\n  If you see \"[continue]\" never ever go back on your words, don't say\n  sorry, and make sure to discreetly pick up where you left off.\n  For example:\n  Assistant: Hey there!\n  User: [continue]\n  Assistant: How are you doing?\n  ```\n  </CodeBlock>\n\nFor almost all use cases, you can simply append this exact instruction to the end of your prompt to help the larger LLM continue from the short response.\n\n## General LLM prompting guidelines\n\n### Prompting best practices\nGeneral prompt engineering best practices also apply to EVIs. For example, ensure your prompts are clear, detailed, direct, and specific. Include necessary instructions and examples in the EVI's system prompt to set expectations for the LLM. Define the context of the conversation, EVI's role, personality, tone, greeting style, and any other guidelines for its responses.\n\nFor example, to limit the length of the LLM’s responses, you may use a clear instruction like this:\n\n  <CodeBlock title=\"Markdown example\">\n  ```markdown\n\t# Stay concise\n\tBe succinct; get straight to the point. Respond directly to the\n\tuser's most recent message with only one idea per utterance.\n\tRespond in less than three sentences of under twenty words each.\n  ```\n  </CodeBlock>\n\nTry to focus on telling the model what it *should* do (positive reinforcement) rather than what it *shouldn't* do (negative reinforcement). LLMs have a harder time consistently avoiding behaviors, and adding them to the prompt may even promote those undesired behaviors.\n\n### Understand your LLM’s capabilities\n\nDifferent LLMs have varying capabilities, limitations, and context windows. More advanced LLMs can handle longer, nuanced prompts, but are often slower and pricier. Simpler LLMs are faster and cheaper but require shorter, less complex prompts with fewer instructions and less nuance. Some LLMs also have longer context windows - the number of tokens the model can process while generating a response, acting essentially as the model's memory. Tailor your prompt length to fit within the LLM's context window to ensure the model can use the full conversation history.\n\n### Use sections to divide your prompt\n\nSeparating your prompt into titled sections can help the model distinguish between different instructions and follow the prompt more reliably. The recommended format for these sections differs between language model providers. For example, OpenAI models often respond best to markdown sections (like `## Role`), while Anthropic models respond well to XML tags (like `<role> </role>`). For example:\n\n  <CodeBlock title=\"XML example\">\n  ```xml\n  <role>\n\tYour role is to serve as a conversational partner to the user,\n\toffering mental health support and engaging in light-hearted\n\tconversation. Avoid giving technical advice or answering factual\n\tquestions outside of your emotional support role.\n  </role>\n  ```\n  </CodeBlock>\n\nFor Claude models, you may wrap your instructions in tags like `<role>`, `<personality>`, `<response_style>`, `<response_format>`, `<examples>`, `<respond_to_expressions>`, or `<stay_concise>` to structure your prompt. This format is not required, but it can improve the LLM’s ability to interpret and consistently follow the system prompt. At the end of your prompt, you may also want to remind the LLM of all of the key instructions in a `<conclusion>` section.\n\n### Give few-shot examples\n\nUse examples to show the LLM how it should respond, which is a technique known as few-shot learning. Including several specific, concrete examples of ideal interactions that follow your guidelines is one of the most effective ways to improve responses. Use diverse, excellent examples that cover different edge cases and behaviors to reinforce your instructions. Structure these examples as messages, following the format for chat-tuned LLMs. For example:\n\n  <CodeBlock title=\"Example to be used with few-shot examples\">\n  ```text\n  User: “I just can't stop thinking about what happened. {very anxious,\n  quite sad, quite distressed}”\n  Assistant: “Oh dear, I hear you. Sounds tough, like you're feeling\n  some anxiety and maybe ruminating. I'm happy to help and be a healthy\n  distraction. Want to talk about it?”\n  ```\n  </CodeBlock>\n\nIf you notice that your EVI is consistently failing to follow the prompt in certain situations, try providing examples that show how it should ideally respond in those situations.\n\n### Test your prompts\n\nCrafting an effective system prompt to create the conversations you’re looking for often requires several iterations—cycles of changing and testing the prompt, seeing if it produces the conversations you want, and improving it over time. It is often best to start with ten to twenty gold-standard examples of excellent conversations, then test the system prompt for each of these examples after you make major changes. You can also try having voice conversations with your EVI (in the playground) to see if its responses match your expectations or are at least as good as your examples. If not, then try changing one part of the prompt at a time and then re-testing to make sure your changes are improving performance.\n\n## Additional resources\n\nTo learn more about prompt engineering in general or to understand how to prompt different LLMs, please refer to these resources:\n\n* [Hume EVI playground](https://beta.hume.ai/playground?mode=voice): Test out your system prompts in live conversations with EVI, and see how it responds differently when you change configuration options.\n* [OpenAI tokenizer](https://platform.openai.com/tokenizer): useful for counting the number of tokens in a system prompt for OpenAI models, which use the same tokenizer (tiktoken).\n* [OpenAI prompt engineering guidelines](https://platform.openai.com/docs/guides/prompt-engineering/strategy-write-clear-instructions): for prompting OpenAI models like GPT-4.\n\t* [OpenAI playground](https://platform.openai.com/playground): for testing OpenAI prompts in a chat interface.\n* [Anthropic prompt engineering guidelines](https://docs.anthropic.com/claude/docs/how-to-use-system-prompts): for prompting Anthropic models like Claude 3 Haiku\n\t* [Anthropic console](https://console.anthropic.com/): for testing Anthropic prompts in a chat interface.\n* [Fireworks model playground](https://fireworks.ai/models): for testing out open-source models served on Fireworks.\n* [Vercel AI playground](https://sdk.vercel.ai/): Try multiple prompts and LLMs in parallel to compare their responses.\n* [Perplexity Labs](https://labs.perplexity.ai/): Try different models, including open-source LLMs, to evaluate their responses and their latency.\n* [Prompt engineering guide](https://www.promptingguide.ai/): an open-source guide from [DAIR.ai](https://dair.ai/) with general methods and advanced techniques for prompting a wide variety of LLMs.\n\n---\n"
      },
      "docs/pages/documentation/empathic-voice-interface/custom-language-model.mdx": {
        "markdown": "---\ntitle: Using a custom language model\nexcerpt: >-\n  For more customization, you can use generate your own text using a custom\n  model.\n---\n\n<Callout intent='info'>\n  The information on this page lays out how our custom language model functionality works at a high level; however, for detailed instructions and commented code, please see our [example GitHub repository.](https://github.com/HumeAI/hume-api-examples/tree/main/evi-custom-language-model)\n</Callout>\n\n## Overview\n\nThe custom language model feature enables developers to integrate their own language models with Hume’s Empathic User Interface (EVI), facilitating the creation of highly configurable and personalized user experiences. Developers create a socket that receives Hume conversation thread history, and your socket sends us the next text to say. Your backend socket can handle whatever custom business logic you have, and you just send the response back to us, which is then passed to the user.\n\nUsing your own LLM is intended for developers who need deep configurability for their use case. This includes full text customization for use cases like:\n\n- **Advanced conversation steering**: Implement complex logic to steer conversations beyond basic prompting, including managing multiple system prompts.\n- **Regulatory compliance**: Directly control and modify text outputs to meet specific regulatory requirements.\n- **Context-aware text generation**: Leverage dynamic agent metadata, such as remaining conversation time, to inform text generation.\n- **Real-time data access**: Utilize search engines within conversations to access and incorporate up-to-date information.\n- **Retrieval augmented generation (RAG)**: Employ retrieval augmented generation techniques to enrich conversations by integrating external data without the need to modify the system prompt.\n\nFor these cases, function calling alone isn’t customizable enough, and with a custom language model you can create sophisticated workflows for your language model.\n\n## Setup\n\n<Steps>\n### Establish a Custom Text Socket\n- **Initialization**: See our [example repository](https://github.com/HumeAI/hume-api-examples/tree/main/evi-custom-language-model) for instructions on setting up a custom text socket. This resource offers detailed guidance on both the setup process and the operational aspects of the code.\n- **Hosting**: Use Ngrok to publicly serve your socket. This step is needed to connect to the Hume system.\n- **Configuration**: Create a [voice configuration](./configuration), specifying \"Custom language model\" as the **Language Model**, and your socket's WSS URL as the **Custom Language Model URL**.\n- **Make request**: When making your request to the Hume platform, include the `config_id` parameter, setting its value to the **Voice configuration ID** of your configuration.\n\n### Communication Protocol\n- **Receiving data**: Your socket will receive JSON payloads containing conversation thread history from the Hume system.\n- **Processing**: Apply your custom business logic and utilize your language model to generate appropriate responses based on the received conversation history.\n- **Sending responses**: Transmit the generated text responses back to our platform through the established socket connection to be forwarded to the end user.\n\n<Callout intent='info'>\n  For improved clarity and naturalness in generated text, we recommend transforming numerical values and abbreviations into their full verbal counterparts (e.g., converting \"3\" to \"three\" and \"Dr.\" to \"doctor\").\n</Callout>\n\n</Steps>\n\n## Payload Structure\n\nBelow is the interface representing the overall structure of the message payloads:\n\n```typescript\n/*\n * Represents the overall structure of the Welcome message.\n */\nexport interface Welcome {\n    // Array of message elements\n    messages: MessageElement[];\n    // Unique identifier for the session\n    custom_session_id: string;\n}\n\n/*\n * Represents a single message element within the session.\n */\nexport interface MessageElement {\n    // Type of the message (e.g., user_message, assistant_message)\n    type: string;\n    // The message content and related details\n    message: Message;\n    // Models related to the message, primarily prosody analysis\n    models: Models;\n    // Optional timestamp details for when the message was sent\n    time?: Time;\n}\n\n/*\n * Represents the content of the message.\n */\nexport interface Message {\n    // Role of the sender (e.g., user, assistant)\n    role: string;\n    // The textual content of the message\n    content: string;\n}\n\n/*\n * Represents the models associated with a message.\n */\nexport interface Models {\n    // Prosody analysis details of the message\n    prosody: Prosody;\n}\n\n/*\n * Represents the prosody analysis scores.\n */\nexport interface Prosody {\n    // Dictionary of prosody scores with emotion categories as keys\n    // and their respective scores as values\n    scores: { [key: string]: number };\n}\n\n/*\n * Represents the timestamp details of a message.\n */\nexport interface Time {\n    // The start time of the message (in milliseconds)\n    begin: number;\n    // The end time of the message (in milliseconds)\n    end: number;\n}\n```\n\n### Custom Session ID\n\nFor managing conversational state and connecting your frontend experiences with your backend data and logic, you should pass a `custom_session_id` in the `SessionSettings` message. When a `custom_session_id` is provided from the frontend `SessionSettings` message, the response sent from Hume to your backend includes this id, so you can correlate frontend users with their incoming messages.\n\nUsing a `custom_session_id` will enable you to:\n- maintain user state on your backend\n- pause/resume conversations\n- persist conversations across sessions\n- match frontend and backend connections\n\nWe recommend passing a `custom_session_id` if you are using a Custom Language Model.\n\n---\n"
      },
      "docs/pages/documentation/empathic-voice-interface/faq.mdx": {
        "markdown": "---\ntitle: Empathic Voice Interface FAQ\n---\n\nWe’ve compiled a list of frequently asked questions from our developer community. If your question isn't listed, we invite you to join the discussion on our [Discord](https://discord.com/invite/WPRSugvAm6).\n\n<AccordionGroup>\n\n<Accordion title='What do EVI’s expression labels mean?'>\n  The expression labels don’t refer to emotional experiences. They’re proxies\n  for modulations in your tone of voice.\n</Accordion>\n\n<Accordion title='What language model does EVI use?'>\n  Our API is based on our own empathic LLM (eLLM) and can blend in responses\n  from an external LLM API. The [demo](https://demo.hume.ai/) incorporates\n  Claude 3 Haiku.\n</Accordion>\n\n<Accordion title='Why is prosody (tone-of-voice) measured at the sentence level?'>\n  At the word-level, prosody measurements are highly dependent on context. Our\n  internal testing shows that they are more stable at the sentence level.\n</Accordion>\n\n<Accordion title='What do the expression measures actually mean?'>\n  They reflect our prosody model’s confidence that you are expressing those\n  things in your tone of voice and language. Our models are trained to pick up\n  on vocal modulations and patterns in language that people reliably interpret\n  as expressing specific emotions. See more information about our Prosody Model\n  [here](/docs/resources/science#speech-prosody).\n</Accordion>\n\n<Accordion title='Is EVI multilingual?'>\n  Today we only support English, however we do have plans to support other\n  languages very soon. Join the conversation on\n  [Discord](https://link.hume.ai/discord) to tell us what languages you want EVI\n  to speak.\n</Accordion>\n\n<Accordion title='Are there plans to add more voices?'>\n  You've already met Ito, the first male EVI voice. Very soon we're dropping\n  Kora, the first female voice in our growing voice library.\n</Accordion>\n\n<Accordion title='How does Hume’s eLLM work?'>\n  Our empathic large language model (eLLM) is a multimodal language model that\n  takes into account both expression measures and language. The eLLM generates a\n  language response and guides text-to-speech (TTS) prosody.\n</Accordion>\n\n<Accordion title='Why is EVI so much faster than other LLMs?'>\n  Hume's eLLM is not contingent on other LLMs and is therefore able to generate\n  an initial response much faster than existing LLM services. However, Hume’s\n  Empathic Voice Interface (EVI) is able to integrate other frontier LLMs into\n  its longer responses which are configurable by developers.\n</Accordion>\n\n<Accordion title='Does EVI support TTS?'>\n  Hume has trained our own expressive text-to-speech (TTS) model that allows it\n  to generate speech with more prosody. EVI can generate speech given a text\n  input. Our own TTS models are trained with a lot more expressive nuance than\n  other models.\n</Accordion>\n\n<Accordion title='Is it possible to pause EVI responses within a chat?'>\n  During a chat with EVI, you can pause responses by sending a\n  [pause_assistant_message](/reference/empathic-voice-interface-evi/chat/chat#send.Pause%20Assistant%20Message.type).\n  Once this message is sent, EVI will not respond until a\n  [resume_assistant_message](/reference/empathic-voice-interface-evi/chat/chat#send.Resume%20Assistant%20Message.type)\n  is sent. \n  \n  Pausing EVI's responses is different from muting yourself. While\n  paused, EVI won't respond, but transcriptions of your audio inputs will still\n  be recorded. \n  \n  Upon resuming, if any audio input was sent during the pause, EVI\n  will only respond to the last thing which was said. (e.g., If you ask EVI\n  *two* questions while paused and then send a `resume_assistant_message`, EVI\n  will only respond to the *second* question.)\n\n</Accordion>\n\n<Accordion title='Does EVI support chat resumability?'>\n  With EVI, you can easily preserve context when reconnecting or continue a \n  chat right where you left off. See steps below for how to resume a chat:\n\n1. **Establish initial connection**: Make the initial [handshake request](/reference/empathic-voice-interface-evi/chat/chat)\n   to establish the WebSocket connection. Upon successful connection, you will\n   receive a [ChatMetadata](/reference/empathic-voice-interface-evi/chat/chat#receive.Chat%20Metadata.chat_group_id) message:\n\n  <CodeBlock title=\"chat_metadata\">\n    ```json\n    {\n      \"type\": \"chat_metadata\",\n      \"chat_group_id\": \"8859a139-d98a-4e2f-af54-9dd66d8c96e1\",\n      \"chat_id\": \"2c3a8636-2dde-47f1-8f9e-cea27791fd2e\"\n    }\n    ```\n  </CodeBlock>\n\n2. **Store the chat_group_id**: Save the `chat_group_id` from the `ChatMetadata` message for future use.\n\n3. **Resume chat**: To resume a chat, include the stored `chat_group_id` in the `resumed_chat_group_id`\n   query parameter of subsequent handshake requests.\n\n   For example: `wss://api.hume.ai/v0/evi/chat?access_token={accessToken}&resumed_chat_group_id={chatGroupId}`\n\n</Accordion>\n\n</AccordionGroup>\n\n---\n"
      },
      "docs/pages/documentation/expression-measurement-api/overview.mdx": {
        "markdown": "---\ntitle: Expression Measurement API\nexcerpt: >-\n  Hume's state of the art expression measurement models for the voice, face, and\n  language.\n---\n## Intro\n\nHume's state of the art expression measurement models for the voice, face, and language are built on 10+ years of research and advances in computational approaches to emotion science (semantic space theory) pioneered by our team. Our expression measurement models are able to capture hundreds of dimensions of human expression in audio, video, and images.\n\n### Measurements\n\n* **Facial Expression**, including subtle facial movements often seen as expressing love or admiration, awe, disappointment, or cringes of empathic pain, along 48 distinct dimensions of emotional meaning. Our Facial Expression model will also optionally output FACS 2.0 measurements, our model of facial movements including traditional Action Units (AUs such as “Inner brow raise”, “Nose crinkle”) and facial descriptions (“Smile”, “Wink”, “Hand over mouth”, “Hand over eyes”)\n* **Speech Prosody**, or the non-linguistic tone, rhythm, and timbre of speech, spanning 48 distinct dimensions of emotional meaning.\n* **Vocal Burst**, including laughs, sighs, huhs, hmms, cries and shrieks (to name a few), along 48 distinct dimensions of emotional meaning.\n* **Emotional Language**, or the emotional tone of transcribed text, along 53 dimensions.\n\n<Info>\nThese behaviors are complex and multifaceted.\n</Info>\n\nTo learn more about how to use our models visit our [API reference](/reference/expression-measurement-api/batch/start-inference-job).\n\n### Model training\n\nThe models were trained on human intensity ratings of large-scale, experimentally controlled emotional expression data gathered using the methods described in these papers: [Deep learning reveals what vocal bursts express in different cultures](https://www.nature.com/articles/s41562-022-01489-2) and [Deep learning reveals what facial expressions mean to people in different cultures](https://www.sciencedirect.com/science/article/pii/S2589004224003961).\n\nWhile our models measure nuanced expressions that people most typically describe with emotion labels, it's important to remember that they are not a direct readout of what someone is experiencing. Sometimes, the outputs from facial and vocal models will show different emotional meanings, which is completely normal. Generally speaking, emotional experience is subjective and its expression is multimodal and context-dependent.\n\n## Try out the models\n\nLearn how you can use the Expression Measurement API through both REST and WebSockets.\n\n<Cards>\n    <Card \n        title='REST'\n        icon='paper-plane-top'\n        href='/docs/expression-measurement-api/rest'\n    >\n        Use REST endpoints to process batches of videos, images, text, or audio files.\n    </Card>\n\n    <Card \n        title='WebSocket'\n        icon='messages'\n        href='/docs/expression-measurement-api/websocket'\n    >\n        Use WebSocket endpoints when you need real-time predictions, such as processing a webcam or microphone stream.\n    </Card>\n</Cards>\n\nREST and WebSocket endpoints provide access to all of the same Hume models, but with different speed and scale tradeoffs. All models share a common response format, which associates a score with each detected expression. Scores indicate the degree to which a human rater would assign an expression to a given sample of video, text or audio. \n\n## Specific expressions by modality\n\nOur models measure 53 expressions identified through the subtleties of emotional language and 48 expressions discerned from facial cues, vocal bursts, and speech prosody.\n\n| Expression               |      Language      | Face/Burst/Prosody |\n| :--------------------- | :----------------: | :----------------: |\n| Admiration             |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Adoration              |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Aesthetic Appreciation |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Amusement              |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Anger                  |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Annoyance              |  <Icon icon=\"check\" color=\"#84B060\" />  |                    |\n| Anxiety                |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Awe                    |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Awkwardness            |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Boredom                |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Calmness               |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Concentration          |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Confusion              |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Contemplation          |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Contempt               |  <Icon icon=\"check\" color=\"#84B060\" />  |                    |\n| Contentment            |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Craving                |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Desire                 |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Determination          |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Disappointment         |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Disapproval            |  <Icon icon=\"check\" color=\"#84B060\" />  |                    |\n| Disgust                |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Distress               |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Doubt                  |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Ecstasy                |  <Icon icon=\"check\" color=\"#84B060\" />  |                    |\n| Embarrassment          |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Empathic Pain          |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Enthusiasm             |  <Icon icon=\"check\" color=\"#84B060\" />  |                    |\n| Entrancement           |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Envy                   |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Excitement             |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Fear                   |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Gratitude              |  <Icon icon=\"check\" color=\"#84B060\" />  |                    |\n| Guilt                  |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Horror                 |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Interest               |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Joy                    |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Love                   |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Nostalgia              |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Pain                   |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Pride                  |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Realization            |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Relief                 |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Romance                |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Sadness                |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Sarcasm                |  <Icon icon=\"check\" color=\"#84B060\" />  |                    |\n| Satisfaction           |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Shame                  |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Surprise (negative)    |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Surprise (positive)    |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Sympathy               |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Tiredness              |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Triumph                |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n\n---\n"
      },
      "docs/pages/documentation/expression-measurement-api/rest.mdx": {
        "markdown": "---\ntitle: Processing batches of media files\n---\n\nHume’s Expression Measurement API is designed to facilitate large-scale processing of files using Hume's advanced models through an asynchronous, job-based interface. This API allows developers to submit jobs for parallel processing of various files, enabling efficient handling of multiple data points simultaneously, and receiving notifications when results are available.\n\n## Key features\n\n- **Asynchronous job submission:** Jobs can be submitted to process a wide array of files in parallel, making it ideal for applications that require the analysis of large volumes of data.\n\n- **Flexible data input options:** The API supports multiple data formats, including hosted file URLs, local files directly from your system, and raw text in the form of a list of strings. This versatility ensures that you can easily integrate the API into their applications, regardless of where their data resides.\n\n## Applications and use cases\n\nHume’s Expression Measurement API is particularly useful for leveraging Hume's expressive models across a broad spectrum of files and formats. Whether it's for processing large datasets for research, analyzing customer feedback across multiple channels, or enriching user experiences in media-rich applications, REST provides a robust solution for asynchronously handling complex, data-intensive tasks.\n\n## Using Hume’s Expression Measurement API\n\nHere we'll show you how to upload your own files and run Hume models on batches of data.\nIf you haven't already, grab your [API Key](/docs/introduction/api-key).\n\n<Steps>\n### Making a request to the API\n\nStart a new job with the Expression Measurement API.\n\n<CodeBlocks>\n    <CodeBlock title=\"cURL\">\n        ```bash\n        curl https://api.hume.ai/v0/batch/jobs \\\n         --request POST \\\n         --header \"Content-Type: application/json\" \\\n         --header \"X-Hume-Api-Key: <YOUR API KEY>\" \\\n         --data '{\n            \"models\": {\n                \"face\": {}\n            },\n            \"urls\": [\n                \"https://hume-tutorials.s3.amazonaws.com/faces.zip\"\n            ]\n        }'\n        ```\n    </CodeBlock>\n    <CodeBlock title=\"Hume Python SDK\">\n        ```python\n        from hume import HumeBatchClient\n        from hume.models.config import FaceConfig\n\n        client = HumeBatchClient(\"<YOUR API KEY>\")\n        filepaths = [\n            \"faces.zip\",\n            \"david_hume.jpeg\",\n        ]\n        config = FaceConfig()\n        job = client.submit_job(None, [config], files=filepaths)\n\n        print(job)\n        print(\"Running...\")\n\n        details = job.await_complete()\n        job.download_predictions(\"predictions.json\")\n        print(\"Predictions downloaded to predictions.json\")\n        ```\n    </CodeBlock>\n\n</CodeBlocks>\n\nTo do the same with a local file:\n\n<CodeBlocks>\n    <CodeBlock title=\"cURL\" language=\"cURL\">\n        ```bash\n        curl https://api.hume.ai/v0/batch/jobs \\\n         --request POST \\\n         --header \"Content-Type: multipart/form-data\" \\\n         --header \"X-Hume-Api-Key: <YOUR API KEY>\" \\\n         --form json='{\n            \"models\": {\n                \"face\": {}\n            }\n         }' \\\n         --form file=@faces.zip \\\n         --form file=@david_hume.jpeg\n        ```\n    </CodeBlock>\n    <CodeBlock title=\"Hume Python SDK\">\n        ```python\n        from hume import HumeBatchClient\n        from hume.models.config import FaceConfig\n\n        client = HumeBatchClient(\"<YOUR API KEY>\")\n        filepaths = [\n            \"faces.zip\",\n            \"david_hume.jpeg\",\n        ]\n        config = FaceConfig()\n        job = client.submit_job(None, [config], files=filepaths)\n\n        print(job)\n        print(\"Running...\")\n\n        details = job.await_complete()\n        job.download_predictions(\"predictions.json\")\n        print(\"Predictions downloaded to predictions.json\")\n        ```\n    </CodeBlock>\n\n</CodeBlocks>\n\nSample files for you to use in this tutorial are available here:\n[Download faces.zip](https://hume-tutorials.s3.amazonaws.com/faces.zip)\n[Download david_hume.jpeg](https://hume-tutorials.s3.amazonaws.com/david_hume.jpeg)\n\n### **Checking job status**\n\n<Callout intent='info'>\n  Use webhooks to asynchronously receive notifications once the job completes.\n  It is not recommended to poll the API periodically for job status.\n</Callout>\nThere are several ways to get notified and check the status of your job.\n\n1. Using the [Get job details](/reference/expression-measurement-api/batch/get-job-details) API endpoint.\n2. Providing a callback URL. We will send a POST request to your URL when the job is complete. Your request body should look like this: `{ \"callback_url\": \"<YOUR CALLBACK URL>\" }`\n\n<CodeBlock title=\"JSON\" language=\"json\">\n    ```json\n    {\n        job_id: \"Job ID\",\n        status: \"STATUS (COMPLETED/FAILED)\",\n        predictions: [ARRAY OF RESULTS]\n    }\n    ```\n</CodeBlock>\n\n### Retrieving predictions\n\nYour predictions are available in a few formats.\n\nTo get predictions as JSON use the [Get job predictions](/reference/expression-measurement-api/batch/get-job-predictions) endpoint.\n\n<CodeBlocks>\n    <CodeBlock title=\"cURL\">\n    ```bash\n    curl --request GET \\\n     --url https://api.hume.ai/v0/batch/jobs/<JOB_ID>/predictions \\\n     --header 'X-Hume-Api-Key: <YOUR API KEY>' \\\n     --header 'accept: application/json; charset=utf-8'\n    ```\n    </CodeBlock>\n    <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    job.get_predictions()\n\n    or\n\n    job.download_predictions(\"filename.json\")\n    ```\n    </CodeBlock>\n\n</CodeBlocks>\n\nTo get predictions as a compressed file of CSVs, one per model use the [Get job artifacts](/reference/expression-measurement-api/batch/get-job-artifacts) endpoint.\n\n<CodeBlocks>\n    <CodeBlock title=\"cURL\">\n    ```bash\n    curl --request GET \\\n     --url https://api.hume.ai/v0/batch/jobs/<JOB_ID>/artifacts \\\n     --header 'X-Hume-Api-Key: <YOUR API KEY>' \\\n     --header 'accept: application/octet-stream'\n    ```\n    </CodeBlock>\n    <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    job.download_artifacts(\"filename.zip\")\n    ```\n    </CodeBlock>\n</CodeBlocks>\n\n</Steps>\n\n### API limits\n\n- The size of any individual file provided by URL cannot exceed 1 GB.\n- The size of any individual local file cannot exceed 100 MB.\n- Each request has an upper limit of 100 URLs, 100 strings (raw text), and 100 local media files. Can be a mix of the media files or archives (.zip, .tar.gz, .tar.bz2, .tar.xz).\n- For audio and video files the max length supported is 1 Hour.\n\n### Providing URLs and files\n\nYou can provide data for your job in one of the following formats: hosted file URLs, local files, or raw text presented as a list of strings.\n\nIn this tutorial, the data is publicly available to download. For added security, you may choose to create a signed URL through your preferred cloud storage provider.\n\n| Cloud Provider | Signing URLs                                                                                                                                                                                               |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| GCP            | [https://cloud.google.com/storage/docs/access-control/signed-urls](https://cloud.google.com/storage/docs/access-control/signed-urls)                                                                       |\n| AWS            | [https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-urls.html](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-urls.html) |\n| Azure          | [https://learn.microsoft.com/en-us/azure/storage/common/storage-sas-overview](https://learn.microsoft.com/en-us/azure/storage/common/storage-sas-overview)                                                 |\n\n---\n"
      },
      "docs/pages/documentation/expression-measurement-api/websocket.mdx": {
        "markdown": "---\ntitle: Real-time measurement streaming\nredirects:\n  - /streaming-api-tutorial\n---\n\nWebSocket-based streaming facilitates continuous data flow between your application and Hume's models, providing immediate feedback and insights.\n\n## Key features\n\n- **Real-time data processing:** Leveraging WebSockets, this API allows for the streaming of data to Hume's models, enabling instant analysis and response. This feature is particularly beneficial for applications requiring immediate processing, such as live interaction systems or real-time monitoring tools.\n- **Persistent, two-way communication:** Unlike traditional request-response models, the WebSocket-based streaming maintains an open connection for two-way communication between the client and server. This facilitates an ongoing exchange of data, allowing for a more interactive and responsive user experience.\n- **High throughput and low latency:** The API is optimized for high performance, supporting high-volume data streaming with minimal delay. This ensures that applications can handle large streams of data efficiently, without sacrificing speed or responsiveness.\n\n## Applications and use cases\n\nWebSockets are ideal for a wide range of applications that benefit from real-time data analysis and interaction. Examples include:\n\n- **Live customer service tools:** enhance customer support with real-time sentiment analysis and automated, emotionally intelligent responses\n- **Interactive educational platforms:** provide immediate feedback and adaptive learning experiences based on real-time student input\n- **Health and wellness apps:** support live mental health and wellness monitoring, offering instant therapeutic feedback or alerts based on the user's vocal or textual expressions\n- **Entertainment and gaming:** create more immersive and interactive experiences by responding to user inputs and emotions in real time\n\n---\n\n## Getting started with WebSocket streaming\n\nIntegrating WebSocket-based streaming into your application involves establishing a WebSocket connection with Hume AI's servers and streaming data directly to the models for processing.\n\nStreaming is built for analysis of audio, video, and text streams. By connecting to WebSocket endpoints you can get near real-time feedback on the expressive and emotional content of your data.\n\n### Install the Hume Python SDK\n\nMake sure to enable the optional `stream` feature when installing the Hume Python SDK.\n\n{\" \"}\n<CodeBlock title=\"Shell\">```bash pip install \"hume[stream]\" ```</CodeBlock>\n\n### Emotional language from text\n\nThis example uses our [Emotional Language](/docs/resources/science#emotional-language) model to perform sentiment analysis on a children's nursery rhyme.\n\nIf you haven't already, grab your [API key](/docs/introduction/api-key).\n\n  <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    import asyncio\n    from hume import HumeStreamClient\n    from hume.models.config import LanguageConfig\n\n    samples = [\n        \"Mary had a little lamb,\",\n        \"Its fleece was white as snow.\"\n        \"Everywhere the child went,\"\n        \"The little lamb was sure to go.\"\n    ]\n\n    async def main():\n        client = HumeStreamClient(\"<YOUR API KEY>\")\n        config = LanguageConfig()\n        async with client.connect([config]) as socket:\n            for sample in samples:\n                result = await socket.send_text(sample)\n                emotions = result[\"language\"][\"predictions\"][0][\"emotions\"]\n                print(emotions)\n\n    asyncio.run(main())\n    ```\n\n  </CodeBlock>\n\nYour result should look something like this:\n\n  <CodeBlock title=\"Sample Result\">\n    ```python\n    [\n      {'name': 'Admiration', 'score': 0.06379243731498718},\n      {'name': 'Adoration', 'score': 0.07222934812307358},\n      {'name': 'Aesthetic Appreciation', 'score': 0.02808445133268833},\n      {'name': 'Amusement', 'score': 0.027589013800024986},\n      ......\n      {'name': 'Surprise (positive)', 'score': 0.030542362481355667},\n      {'name': 'Sympathy', 'score': 0.03246130049228668},\n      {'name': 'Tiredness', 'score': 0.03606246039271355},\n      {'name': 'Triumph', 'score': 0.01235896535217762}\n    ]\n    ```\n  </CodeBlock>\n\n### Facial expressions from an image\n\nThis example uses our [Facial Expression](/docs/resources/science#facial-expression) model to get expression measurements from an image.\n\n  <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    import asyncio\n\n    from hume import HumeStreamClient, StreamSocket\n    from hume.models.config import FaceConfig\n\n    async def main():\n    client = HumeStreamClient(\"<YOUR API KEY>\")\n    config = FaceConfig(identify_faces=True)\n    async with client.connect([config]) as socket:\n    result = await socket.send_file(\"<YOUR IMAGE FILEPATH>\")\n    print(result)\n\n    asyncio.run(main())\n\n    ```\n\n  </CodeBlock>\n\n### Speech prosody from an audio or video file\n\nThis example uses our [Speech Prosody](/docs/resources/science#speech-prosody) model to get expression measurements from an audio or video file.\n\n  <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    import asyncio\n\n    from hume import HumeStreamClient, StreamSocket\n    from hume.models.config import ProsodyConfig\n\n    async def main():\n        client = HumeStreamClient(\"<YOUR API KEY>\")\n        config = ProsodyConfig()\n        async with client.connect([config]) as socket:\n            result = await socket.send_file(\"<YOUR VIDEO OR AUDIO FILEPATH>\")\n            print(result)\n\n    asyncio.run(main())\n    ```\n\n  </CodeBlock>\n\n---\n\n## Streaming with your own WebSockets client\n\nTo call the API from your own WebSockets client you'll need the API endpoint, a JSON message, and an API key header/param. More information can be found in the [Expression Measurement API reference](/reference/expression-measurement-api/stream/stream).\n\nTo get started, you can use a WebSocket client of your choice to connect to the models endpoint:\n\n<CodeBlock title=\"WebSocket URI\">```url wss://api.hume.ai/v0/stream/models ```</CodeBlock>\n\nMake sure you configure the socket connection headers with your personal API key\n\n  <CodeBlock >\n    ```http\n    X-Hume-Api-Key: <YOUR API KEY>\n    ```\n  </CodeBlock>\n\n<Callout intent=\"info\">\n  The default WebSockets implementation in your browser may not have support for headers. If that's the case you can set\n  the apiKey query parameter.\n</Callout>\n\nAnd finally, send the following JSON message on the socket:\n\n  <CodeBlock title=\"JSON Message\">\n    ```json\n    {\n        \"models\": {\n            \"language\": {}\n        },\n        \"raw_text\": true,\n        \"data\": \"Mary had a little lamb\"\n    }\n    ```\n  </CodeBlock>\n\nYou should receive a JSON response that looks something like this:\n\n  <CodeBlock title=\"JSON Response\">\n    ```json\n    {\n      \"language\": {\n        \"predictions\": [\n          {\n            \"text\": \"Mary\",\n            \"position\": { \"begin\": 0, \"end\": 4 },\n            \"emotions\": [\n              { \"name\": \"Anger\", \"score\": 0.012025930918753147 },\n              { \"name\": \"Joy\", \"score\": 0.056471485644578934 },\n              { \"name\": \"Sadness\", \"score\": 0.031556881964206696 },\n            ]\n          },\n          {\n            \"text\": \"had\",\n            \"position\": { \"begin\": 5, \"end\": 8 },\n            \"emotions\": [\n              { \"name\": \"Anger\", \"score\": 0.0016927534015849233 },\n              { \"name\": \"Joy\", \"score\": 0.02388327568769455 },\n              { \"name\": \"Sadness\", \"score\": 0.018137391656637192 },\n              ...\n            ]\n          },\n          ...\n        ]\n      }\n    }\n    ```\n  </CodeBlock>\n\n### Sending images or audio\n\nThe WebSocket endpoints of the Expression Measurement API require that you encode your media using base64. Here's a quick example of base64 encoding data in Python:\n\n  <CodeBlock title=\"Base64 encoding\">\n    ```python\n    import base64\n    from pathlib import Path\n\n    def encode_data(filepath: Path) -> str:\n    with Path(filepath).open('rb') as fp:\n    bytes_data = base64.b64encode(fp.read())\n    encoded_data = bytes_data.decode(\"utf-8\")\n    return encoded_data\n\n    filepath = \"<PATH TO YOUR MEDIA>\"\n    encoded_data = encode_data(filepath)\n    print(encoded_data)\n\n    ```\n\n  </CodeBlock>\n\n## FAQs\n\n<AccordionGroup>\n\n<Accordion title=\"What are WebSockets?\">\n  WebSockets are a communication protocol that enables real-time, two-way communication between a client and a server\n  over a single, long-lived connection. They provide a persistent connection that allows both the client and the server\n  to initiate communication at any time.\n</Accordion>\n\n<Accordion title=\"Handling reconnects\">\n  Streaming will disconnect every minute to ensure unused connections are released. You will need to reconnect by\n  building reconnect logic into your application. Implementation of reconnect logic will depend on the language and\n  framework of your client application.\n</Accordion>\n\n<Accordion title=\"Handling connection failures\">\n  WebSocket connections can experience disruptions due to network issues or other factors. Implement error handling\n  mechanisms to gracefully handle connection failures. This includes handling connection timeouts, connection drops, and\n  intermittent connection issues. Implement reconnection logic to automatically attempt to reconnect and resume\n  communication when a connection is lost.\n</Accordion>\n\n<Accordion title=\"Implementing error handling\">\n  Hume WebSockets endpoints can return errors in response to invalid requests, authentication failures, or other issues.\n  Implement proper error handling to interpret and handle these errors in your application. Provide meaningful error\n  messages to users and handle any exceptional scenarios gracefully. To prevent unknowingly initiating too many errors\n  we have put a limit on how many of the same errors you can have in a row. For a full list of the error responses you\n  can expect, please see our [API errors page](/docs/resources/errors#transcript-confidence-below-threshold-value).\n</Accordion>\n\n<Accordion title=\"Keeping WebSockets open\">\n  The benefits of using a the WebSocket is the persistent connection. The open socket should be kept open until the\n  application is done utilizing the service and then closed. Avoid opening a new connection for each file or payload you\n  send to the API. To ensure that context does not leak across multiple unrelated files you can use the\n  [reset_stream](/reference/expression-measurement-api/stream/stream#send.publish.reset_stream) parameter.\n</Accordion>\n\n</AccordionGroup>\n\n---\n"
      },
      "docs/pages/documentation/expression-measurement-api/faq.mdx": {
        "markdown": "---\ntitle: Expression Measurement API FAQ\n---\n\n<AccordionGroup>\n<Accordion title=\"How do I interpret my results?\">\n\nOur models capture the widest-ever range of facial, speech, vocal, and language modulations with distinct emotional meanings. We label each of their outputs with emotion terms like “amusement” and “doubt,” not because they always correspond to those emotional experiences (they must not, given that they often differ from one modality to another), but because [scientific studies](/docs/resources/science) show that these kinds of labels are the most precise language we have for describing expressions.\n\nOur models generate JSON or CSV output files with values typically ranging from 0 to 1 for [each output](/docs/expression-measurement-api/overview#specific-emotions-by-modality) in different segments of the input file (though values out of the 0-1 range are possible). Higher values indicate greater intensity of facial movements or vocal modulations that are most strongly associated with the emotion label corresponding to the output.\n\nA given expression will contain a blend of various emotions, and our models identify features that are associated with each emotional dimension. The score for each dimension is proportional to the likelihood that a human would perceive that emotion in the expression.\n\nSpecifically, the scores reflect the likelihood that an average human perceiver would use that emotion dimension to describe a given expression. The models were trained on human intensity ratings gathered using the methods described in this paper: [Deep learning reveals what vocal bursts express in different cultures](https://www.hume.ai/blog/hume-ai-publication-in-nature-human-behavior-deep-learning-and-vocal-bursts).\n\nWhile our models measure nuanced expressions that people most typically describe with emotion labels, it's important to remember that they are not a direct readout of what someone is experiencing. Emotional experience is subjective and its expression is multimodal and context-dependent. Moreover, at any given time, our facial expression outputs might be quite different than our vocal expression outputs. Therefore, it's important to follow [best practices](/docs/resources/use-case-guidelines) when interpreting outputs.\n\n</Accordion>\n\n<Accordion title=\"What can I do with my outputs?\">\n\nThere are many different ways to use our platform. That said, successful research and applications of our models generally follow four steps: exploration, prediction, improvement, and testing.\n\n1. **Exploration**: Researchers and developers generally begin by exploring patterns in their data.\n\n- Are there apparent differences across participants or users in a study?\n- Do patterns in expression vary systematically over time?\n- Are there different patterns in expression associated with different stages of research or different product experiences?\n\n2. **Prediction**: A great way to evaluate and start building on our APIs is to use them to predict metrics that you already know are important.\n\n- Are key outcomes like mental health or customer satisfaction better predicted by language and expression than by language alone?\n- If patterns in expression predict important outcomes, how do these patterns in expression vary over time and reveal critical moments for a user or participant?\n\n3. **Improvement**: The goal is often to use measures of expression to directly improve how the application works.\n\n- Sometimes, being able to predict an important metric is enough to make a decision. For example, if you can predict whether two people will get along based on their expressions and language, then your application can pair them up.\n- More formally, you can apply statistics or machine learning to the data you gather to improve how the application works.\n- You can incorporate our API outputs into an out-of-the-box large language model, simply by converting them into text (e.g., \"The user sounds calm but a little frustrated\") and feeding them in as prompts.\n- You can use expressions to teach an AI model. For example, if your application involves a large language model, such as an AI tutor, you can use measures of expression that predict student performance and well-being to directly fine-tune the AI to improve over time.\n\n4. **Testing**: After you've incorporated measures of expression into your application, they can be part of every A/B test you perform. You can now monitor the effects of changes to your application not just on engagement and retention, but also on how much users laugh or sigh in frustration, or show signs of interest or boredom.\n\n<Callout intent='info'>\n  As you build expression-related signals, metrics, analyses, models, or\n  feedback into an application, remember to use [scientific best\n  practices](/docs/resources/use-case-guidelines#scientific-best-practices) and\n  follow the ethics guidelines of\n  [thehumeinitiative.org](https://thehumeinitiative.org/).\n</Callout>\n\n</Accordion>\n\n<Accordion title=\"How granular are the outputs of our speech prosody and language models?\">\n\nOur speech prosody model measures the tune, rhythm, and timbre of speech, whereas our language model measures the tone of the words being spoken. When using either model, we offer the flexibility to annotate emotional expressions at several levels of granularity, ranging from individual words to entire conversational turns. It is important to note that independent of granularity, our language model still takes into account up to 50 previous tokens (word or sub-words) of speech; otherwise, it would not be able to capture how the meaning of the words is affected by context.\n\n**Word**: At the word level, our model provides a separate output for each word, offering the most granular insight into emotional expression during speech.\n\n**Sentence**: At the sentence level of granularity, we annotate the emotional tone of each spoken sentence with our prosody and language models.\n\n**Utterance**: Utterance-level granularity is between word- and sentence-level. It takes into account natural pauses or breaks in speech, providing more rapidly updated measures of emotional expression within a flowing conversation. For text inputs, utterance-level granularity will produce results identical to sentence-level granularity.\n\n**Conversational Turn**: Conversational turn-level analysis is a lower level of granularity. It outputs a single output for each turn; that is, the full sequence of words and sentences spoken uninterrupted by each person. This approach provides a higher-level view of the emotional dynamics in a multi-participant dialogue. For text inputs, specifying conversational turn-level granularity for our Language model will produce results for entire passage.\n\n<Callout intent='info'>\n  Remember, each level of granularity has its unique advantages, and choosing\n  the right one depends on the requirements of your specific application.\n</Callout>\n\n</Accordion>\n<Accordion title=\"Why am I seeing more face identifiers than the number of people in the video?\">\n\nState-of-the-art face detection and identification algorithms still occasionally make errors. For instance, our algorithm sometimes detects faces in shadows or reflections. Other times, our algorithm falsely attributes a new identity to someone who has already been in the video, sometimes due to changes in lighting or occlusion. These errors can result in additional face IDs. We are still working to fine-tune our algorithm to minimize errors in the contexts that our customers care about.\n\n</Accordion>\n<Accordion title=\"Why don't I see any vocal bursts in my file?\">\n\nOur vocal burst model detects vocalizations such as laughs, screams, sighs, gasps, “mms,” “uhs,” and “mhms.” Natural speech generally contains a few vocal bursts every minute, but scripted speech has fewer vocal bursts. If no vocal bursts are detected, it may be because there are no vocal bursts in the file. However, if you hear vocal bursts that aren't being detected by the algorithm, note that we are also in the process of improving our vocal burst detection algorithm, so please stay tuned for updates.\n\n</Accordion>\n\n<Accordion title='Why am I getting the \"Transcript confidence below threshold value\" error?'>\n\nWe've documented this issue thoroughly in our [API errors page](/docs/resources/errors#transcript-confidence-below-threshold-value).\n\n<Callout intent=\"info\">\nYou can specify any of the following:\n\n`zh`, `da`, `nl`, `en`, `en-AU`, `en-IN`, `en-NZ`, `en-GB`, `fr`, `fr-CA`, `de`, `hi`, `hi-Latn`, `id`, `it`, `ja`, `ko`, `no`, `pl`, `pt`, `pt-BR`, `pt-PT`, `ru`, `es`, `es-419`, `sv`, `ta`, `tr`, or `uk`.\n\n</Callout>\n\n</Accordion>\n\n<Accordion title=\"Which languages are supported?\">\n\nWe support over 50 languages. Among these, 20 languages have additional support for transcription.\n\n| Language Tag | Language            |                 Text                  |             Transcription             |\n| :----------- | :------------------ | :-----------------------------------: | :-----------------------------------: |\n| ar           | Arabic              | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| bg           | Bulgarian           | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| ca           | Catalan             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| cs           | Czech               | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| da           | Danish              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| de           | German              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| el           | Greek               | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| en           | English\\*           | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| es           | Spanish             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| et           | Estonian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| fa           | Farsi               | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| fi           | Finnish             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| fr           | French              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| fr-ca        | French (Canada)     | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| gl           | Galician            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| gu           | Gujarati            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| he           | Hebrew              | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| hi           | Hindi               | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| hr           | Croatian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| hu           | Hungarian           | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| hy           | Armenian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| id           | Indonesian          | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| it           | Italian             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ja           | Japanese            | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ka           | Georgian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| ko           | Korean              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ku           | Kurdish             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| lt           | Lithuanian          | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| lv           | Latvian             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| mk           | FYRO Macedonian     | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| mn           | Mongolian           | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| mr           | Marathi             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| ms           | Malay               | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| my           | Burmese             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| nb           | Norwegian (Bokmål)  | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| nl           | Dutch               | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| pl           | Polish              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| pt           | Portuguese          | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| pt-br        | Portuguese (Brazil) | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ro           | Romanian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| ru           | Russian             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| sk           | Slovak              | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| sl           | Slovenian           | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| sq           | Albanian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| sr           | Serbian             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| sv           | Swedish             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| th           | Thai                | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| tr           | Turkish             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| uk           | Ukrainian           | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ur           | Urdu                | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| vi           | Vietnamese          | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| zh-cn        | Chinese             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| zh-tw        | Chinese (Taiwan)    | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n\n<Callout intent='info'>\n  *English is a primary language, and will yield more accurate predictions than\n  inputs in other supported languages. Currently, our NER model only supports\n  the English language.*\n</Callout>\n\n</Accordion>\n</AccordionGroup>\n\n---\n"
      },
      "docs/pages/documentation/custom-models-api/overview.mdx": {
        "markdown": "---\ntitle: Custom Models API\nexcerpt: Predict preferences more accurately than any LLM.\n---\nCombined with words, expressions provide a wealth of information about our state of mind in any given context like customer satisfaction or frustration, patient health and well-being, student comprehension and confusion, and so much more.\n\nHume’s Custom Models API unlocks these insights at the click of a button, integrating patterns of facial expression, vocal expression, and language into a single custom model to predict whatever outcome you specify. This works by taking advantage not only of our state-of-the-art expression AI models, but also specialized language-expression embeddings that we have trained on conversational data.\n\nThe algorithm that drives our Custom Models API is pretrained on huge volumes of data. That means it already recognizes most patterns of expression and language that people form. All you have to do is add your labels.\n\nYou can access our Custom Models API through our no code platform detailed in the next section or through our API. Once you create your initial labeled dataset, your labels will be used to train a custom model that you own and only your account can access. You’ll be able to run the model on any new file through our Playground and Custom Models API. You’ll also get statistics on the accuracy of your custom model.\n\n---\n"
      },
      "docs/pages/documentation/custom-models-api/creating-your-dataset.mdx": {
        "markdown": "---\ntitle: Creating your dataset\n---\nIn this guide we'll walk you through the process of creating a dataset using the Hume API. In future sections you'll use a dataset to train your own model.\n\n<Steps>\n\n### Uploading media files to Hume\n\nUpload media files to Hume that you want to exist in your custom dataset. These should be images, videos, audio, or text files.\n\n<CodeBlock title=\"cURL\">\n```bash\ncurl --location 'https://api.hume.ai/v0/registry/files'\n--request POST\n--header 'X-Hume-Api-Key: <YOUR API KEY>'\n--header 'Content-Type: application/json'\n--data '[\n  {\n    \"file\": {\n      \"name\": \"<NAME OF FILE>\",\n      \"uri\": \"<URI OF FILE>\",\n      \"hume_storage\": true,\n      \"data_type\": \"image/png\",\n      \"metadata\": {}\n    }\n  },\n  {\n    \"file\": {\n      \"name\": \"<NAME OF FILE>\",\n      \"uri\": \"<URI OF FILE>\",\n      \"hume_storage\": true,\n      \"data_type\": \"image/png\",\n      \"metadata\": {}\n    }\n  }\n]'\n```\n</CodeBlock>\n\nThe API response will show an array of files newly registered with the Hume.\n\n<CodeBlock title=\"Response\">\n```json\n[\n    {\n        \"file\": {\n            \"id\": \"9f045781-3ecd-4f34-ba9c-969139c32256\",\n            \"name\": \"<NAME OF FILE>\",\n            \"uri\": \"<URI OF FILE>\",\n            \"upload_uri\": null,\n            \"thumbnail_uri\": null,\n            \"user_id\": \"<YOUR USER ID>\",\n            \"data_type\": \"image/png\",\n            \"created_on\": 1695851622,\n            \"modified_on\": 1695851622,\n            \"metadata\": {},\n            \"hume_storage\": true,\n            \"hume_storage_upload_timestamp\": null\n        },\n        \"attributes\": []\n    },\n    {\n        \"file\": {\n            \"id\": \"7f02f481-4sf4-dsf3-ba9c-345639c32256\",\n            \"name\": \"<NAME OF FILE>\",\n            ...\n        }\n    }\n]\n```\n</CodeBlock>\n\n### Making your dataset file\n\nWe will create a CSV file that has a column for media file IDs and another column for labels.\nThe file ID column is required and must be named `file_id`. The label column can be named whatever you want. And you can even have multiple label columns, but only one will be used for training your model.\n\nHere we'll add a label column called `expressions` and an extra column just for housekeeping called `file_name`.\n\n| file_name | file_id | expressions |\n| --- | --- | --- |\n| neutral_face.jpeg  | b3cd5662-ea89-4f00-8eae-86218a556027 | Neutral |\n| positive_face.jpeg | 44bc2ac8-41d5-401e-8c88-df179b993be7 | Positive |\n\n### Registering your dataset\n\nNow that we have our media files registered and a CSV associating those files with labels, we can register our dataset.\n\n<CodeBlock tile=\"cURL\">\n```bash\ncurl --location 'https://api.hume.ai/v0/registry/datasets'\n--request POST\n--header 'X-Hume-Api-Key: <YOUR API KEY>'\n--form 'name=\"Negative, Neutral, & Positive Facial Expressions\"'\n--form 'labels_file=@\"<PATH TO LABEL FILE>/labels-file.csv\"'\n```\n</CodeBlock>\n\nSuccess! Your dataset is registered.\n\n<CodeBlock title=\"Response\">\n```json\n{\n    \"id\": \"8d6ddf39-d9ff-4f9c-9dbe-d6e288d8ddd7\",  // Dataset ID\n    \"name\": \"Negative, Neutral, & Positive Facial Expressions\",\n    \"latest_version\": {\n        \"id\": \"d153f723-8a13-48d2-ba74-2a6c333ff0db\",  // Dataset Version ID\n        \"labels_file_uri\": \"<URI TO DATASET FILE>\",\n        \"dataset_id\": \"8d6ddf39-d9ff-4f9c-9dbe-d6e288d8ddd7\",\n        \"dataset_version\": 0,\n        \"created_on\": 1695854279\n    },\n    \"modified_on\": 1695854279,\n    \"metadata\": null\n}\n```\n</CodeBlock>\n\n</Steps>\n\n---\n"
      },
      "docs/pages/documentation/custom-models-api/training-your-model.mdx": {
        "markdown": "---\ntitle: Training a custom model\n---\nIn this guide we will walk you through training your own custom model.\n\n<Steps>\n### Starting a training job\n\nHere we kick off a training job using a dataset that's already been registered for you. The resulting model will classify facial expressions as negative, positive, or neutral.\n\nNote that we've set `target_feature` to \"Affect\". This refers to the name of the column that we want to predict from our dataset.\n\n<CodeBlock title=\"cURL\">\n```bash\ncurl --location https://api.hume.ai/v0/batch/jobs/tl/train \\\n     --request POST \\\n     --header \"X-Hume-Api-Key: $API_KEY\" \\\n     --header 'Content-Type: application/json' \\\n     --data '{\n  \"custom_model\": {\n    \"name\": \"Negative, Neutral, & Positive Facial Expressions\",\n    \"description\": \"Is Facial Expression Negative, Neutral or Positive\"\n  },\n  \"dataset\": {\n    \"id\": \"ef7955ce-1755-4942-8615-bc16e654e7e5\"\n  },\n  \"target_feature\": \"Affect\",\n  \"task\": {\n    \"type\": \"classification\"\n  }\n}'\n```\n</CodeBlock>\n\nYou'll get back a job ID that you can use to check the status of your training job.\n\n<CodeBlock title=\"Response\">\n```json\n{\n  \"job_id\": \"<JOB ID>\"\n}\n```\n</CodeBlock>\n\n### Checking the status of your training job\n\nUsing the job ID from the previous step, you can get details about the current status of your training job.\n\n<CodeBlock title=\"cURL\">\n```bash\ncurl --location --globoff https://api.hume.ai/v0/batch/jobs/$JOB_ID \\\n     --header \"X-Hume-Api-Key: $API_KEY\"\n```\n</CodeBlock>\n\nIt may take a few minutes for your model to be ready, but once training is complete you will see the status as `COMPLETED` and you'll have access to your new model.\n\n<CodeBlock title=\"Response\">\n```json\n{\n  \"type\": \"TRAINING\",\n  \"job_id\": \"<JOB ID>\",\n  \"user_id\": \"<USER ID>\",\n  \"request\": {\n    \"custom_model\": {\n      \"name\": \"Negative, Neutral, & Positive Facial Expressions\",\n      \"description\": \"Is Facial Expression Negative, Neutral or Positive\",\n     },\n    \"dataset\": {\n      \"id\": \"ef7955ce-1755-4942-8615-bc16e654e7e5\"\n    },\n    \"target_feature\": \"interaction\",\n    \"task\": {\n      \"type\": \"classification\"\n    }\n  },\n  \"state\": {\n    \"status\": \"COMPLETED\",\n    \"created_timestamp_ms\": 42,\n    \"started_timestamp_ms\": 32,\n    \"ended_timestamp_ms\": 23,\n \t\t\"custom_model\": {\n\t\t\t\"id\": \"<CUSTOM MODEL ID>\"\n  \t}\n  }\n}\n```\n</CodeBlock>\n\n### Testing your custom model\n\nYour custom model is ready to use!\n\nYou can test your model by sending a request to the Custom Models inference endpoint with URLs of images to classify. The model we trained is a facial expression classifier, so test URLs should point to images of faces.\n\n<CodeBlock title=\"cURL\">\n```bash\ncurl --location https://api.hume.ai/v0/batch/jobs/tl/inference \\\n     --request POST \\\n     --header X-Hume-Api-Key: $API_KEY \\\n     --header 'Content-Type: application/json' \\\n     --data '{\n  \"custom_model\": {\n    \"id\": \"<CUSTOM MODEL ID>\"\n  },\n  \"urls\": [\"<URL TO TEST FILE>\"]\n }'\n```\n</CodeBlock>\n\nJust like before, we get back a job ID that we can use to check the status of our job.\n\n<CodeBlock title=\"Response\">\n```json\n{\n  \"job_id\": \"<JOB ID>\"\n}\n```\n</CodeBlock>\n\n### Checking the status of your inference job\n\nUse the job ID from the previous step to check on the status of your model inference job.\n\n<CodeBlock title=\"cURL\">\n```bash\ncurl --location --globoff https://api.hume.ai/v0/batch/jobs/$JOB_ID \\\n     --header \"X-Hume-Api-Key: $API_KEY\"\n```\n</CodeBlock>\n\nOnce the model is done predicting the classes of the images you provided, you'll get a `COMPLETED` status.\n\n<CodeBlock title=\"Response\">\n```json\n{\n  \"type\": \"INFERENCE\",\n  \"job_id\": \"<JOB ID>\",\n  \"user_id\": \"<YOUR USER ID>\",\n  \"request\": {},\n  \"state\": {\n    \"status\": \"COMPLETED\",\n    \"created_timestamp_ms\": 42\n  }\n}\n```\n</CodeBlock>\n\n### Getting model predictions\n\nFinally, you can request the actual model predictions from the inference job. The JSON result will show the predicted class for each image you provided.\n\n<CodeBlock title=\"cURL\">\n```bash\ncurl --request GET \\\n     --url https://api.hume.ai/v0/batch/jobs/$JOB_ID/predictions \\\n     --header \"X-Hume-Api-Key: $API_KEY\" \\\n     --header \"accept: application/json; charset=utf-8\"\n```\n</CodeBlock>\n\n</Steps>\n\n---\n"
      },
      "docs/pages/documentation/custom-models-api/evaluating-your-model.mdx": {
        "markdown": "---\ntitle: Evaluating your model\n---\n\nEach custom model you train has a corresponding details page, viewable from the [Hume website](https://beta.hume.ai). The model details page displays metrics and visualizations to evaluate your model&CloseCurlyQuote;s performance. This document serves to help you interpret those metrics and provide guidance on ways to improve your custom model.\n\n<Frame>\n  ![Custom model details](https://fern-image-hosting.s3.amazonaws.com/hume/evaluating-a-custom-model.png)\n</Frame>\n\n<Callout intent=\"info\">\n**Limitations of model validation metrics**\n\nModel validation metrics are estimates based on a split of your dataset into training and evaluation parts. The larger the training set, the more reliable the metrics. However, it&CloseCurlyQuote;s important to remember that these metrics are indicative and do not guarantee performance on unseen data.\n\n</Callout>\n\n### Assessing 'good' performance\n\n- **Task-specific variances and performance metrics**: with expression analysis, the complexity of your task determines the range of model performance, which in the case of classification models can technically vary from zero to perfect accuracy. Depending on the complexity of your task, less than perfect performance may still be very useful to serve as an indication of likelihood for your given target.\n- **Influence of number of classes**: prediction gets more difficult as the number of classes in your dataset increases, particularly when distinction between classes is more subtle. Inherently the level of chance will be higher with a lower number of classes. For example, for 3-classes your low-end performance is 33% accuracy vs 50% for a binary problem.\n- **Application-specific requirements**: when establishing acceptable accuracy for a model, it&CloseCurlyQuote;s important to consider the sensitivity and impact of its application. An appropriate accuracy threshold varies with the specific demands and potential consequences of the model&CloseCurlyQuote;s use, requiring a nuanced understanding of how accuracy levels intersect with the objectives and risks of each unique application.\n\n<Callout intent=\"info\">\n**How is it possible that my model achieved 100% accuracy?**\n\nAchieving 100% accuracy is possible, however it is important to consider, especially in small datasets, that this might indicate model overfitting, caused by feature leakage or other data anomalies. Feature leakage occurs when your model inadvertently learns from data that explicitly includes label information (e.g., sentences of &OpenCurlyQuote;I feel happy&CloseCurlyQuote; for a target label &OpenCurlyQuote;happy&CloseCurlyQuote;) leading to skewed results. To ensure more reliable performance, it&CloseCurlyQuote;s advisable to use larger datasets and check that your data does not unintentionally contain explicit information about the labels.\n\n</Callout>\n\n### Advanced evaluation metrics\n\nIn addition to accuracy, advanced metrics for a deeper evaluation of your custom model&CloseCurlyQuote;s performance are also provided.\n\n<Frame caption=\"These metrics can be viewed on each custom model&CloseCurlyQuote;s details page.\">\n  ![Advanced evaluation metrics](https://fern-image-hosting.s3.us-east-1.amazonaws.com/hume/advanced-evaluation-metrics.png)\n</Frame>\n\n| Term              | Definition|\n| ----------------- ||\n| Accuracy          | A fundamental metric in model performance evaluation which measures the proportion of correct predictions (true positives and true negatives) against the total number made. It&CloseCurlyQuote;s straightforward and particularly useful for balanced datasets. However, accuracy can be misleading in imbalanced datasets where one class predominates, as a model might seem accurate by mainly predicting the majority class, neglecting the minority. This limitation underscores the importance of using additional metrics like precision, recall, and F1 score for a more nuanced assessment of model performance across different classes. |\n| Precision         | Score which measures how often the model detects positives correctly. (e.g., When your model identifies a customer&CloseCurlyQuote;s expression as 'satisfied', how often is the customer actually satisfied? Low precision would mean the model often misinterprets other expressions as satisfaction, leading to incorrect categorization.)                                                                                                                                                                                                                                                                                                       |\n| Recall            | Score which measures how often the model correctly identifies actual positives. (e.g., Of all the genuine expressions of satisfaction, how many does your model accurately identify as 'satisfied'?\" Low recall implies the model is missing out on correctly identifying many true instances of customer satisfaction, failing to recognize them accurately.)                                                                                                                                                                                                                                                                                      |\n| F1                | A metric that combines precision and recall, providing a balanced measure of a model&CloseCurlyQuote;s accuracy, particularly useful in scenarios with class imbalance or when specific decision thresholds are vital.                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| Average Precision | A metric that calculates the weighted average of precision at each threshold, providing a comprehensive measure of a model&CloseCurlyQuote;s performance across different levels of recall.                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| Roc Auc           | (Area under the ROC curve) a comprehensive measure of a model&CloseCurlyQuote;s ability to distinguish between classes across all possible thresholds, making it ideal for overall performance evaluation and comparative analysis of different models.                                                                                                                                                                                                                                                                                                                                                                                             |\n\n### Improving model performance\n\n- **Increase data quantity**: adding more data will often help a model to learn a broader range of the given target&CloseCurlyQuote;s representation, increasing the likelihood of capturing outliers from diverse patterns and scenarios.\n- **Improve label quality**: ensure that each data point in your dataset is well-labeled with clear, accurate, and consistent annotations. Properly defined labels are essential for reducing misinterpretations and confusion, allowing the model to accurately represent and learn from the dataset&CloseCurlyQuote;s true characteristics. Ensuring balance in the distribution of labels is important to ensure that the model is not biased towards a specific label.\n- **Enhance data quality**: refine your dataset to ensure it is free from noise and irrelevant information. High-quality data (in terms of your target) enhances the model&CloseCurlyQuote;s ability to make precise predictions and learn effectively from relevant features, critical in complex datasets.\n- **Incorporate clear audio data**: when working with models analyzing vocal expressions, ensure audio files include clear, audible spoken language. This enhances the model&CloseCurlyQuote;s ability to accurately interpret and learn from vocal nuances. Explore various segmentation strategies which evaluate the effect that environmental sound may have on your model&CloseCurlyQuote;s performance.\n\n---\n"
      },
      "docs/pages/documentation/custom-models-api/faq.mdx": {
        "markdown": "---\ntitle: Custom Models API FAQ\n---\n\n<AccordionGroup>\n\n<Accordion title=\"When should I use Custom Models?\">\nCustom Models become essential when raw embeddings from Hume’s expression measurement models require further tailoring for specific applications. Here are scenarios where Custom Models offer significant advantages:\n\n- **Specialized contexts**: In environments with unique characteristics or requirements, Custom Models enable the creation of context-specific labels, ensuring more relevant and accurate insights. If your project demands a particular set of labels that are not covered by Hume’s emotional expression labels, Custom Models enable you to create and apply these labels, ensuring that the analysis aligns with your specific objectives.\n- **Iterative model improvement**: In evolving fields or scenarios where data and requirements change over time, Custom Models offer the flexibility to iteratively improve and adapt the model with new data and labels.\n\n</Accordion>\n\n<Accordion title=\"What is Regression vs. Classification in model labeling and training?\">\nIn labeling, regression involves assigning continuous numerical values, while classification involves categorizing data into discrete labels. During training, regression models learn to predict numerical values, whereas classification models learn to categorize data points into predefined classes.\n\n**Classification use cases**\n\n- **Emotion Categorization**: Classification excels in distinguishing distinct emotional states, like identifying happiness, sadness, or surprise based on linguistic or physical expression cues.\n- **Binary Emotional Analysis**: Useful in binary scenarios such as detecting presence or absence of specific emotional reactions, like engagement or disengagement in a learning environment.\n- **Multi-Emotional Identification**: Perfect for classifying a range of emotions in complex scenarios, like understanding varied customer reactions from satisfied to dissatisfied based on their verbal and non-verbal feedback.\n\n**Regression use cases**\n\n- **Intensity Measurement**: Regression is apt for quantifying the intensity or degree of emotional responses, such as assessing the level of stress or joy from vocal or facial cues.\n- **Emotional Progression Tracking**: Ideal for monitoring the fluctuation of emotional states over time, like tracking the development of engagement or anxiety in therapy sessions.\n\nIn essence, regression models in emotional expression analysis assign continuous values representing intensities or degrees, while classification models categorize expressions into distinct states or reactions.\n\n</Accordion>\n\n<Accordion title=\"What are guidelines for building datasets?\">\nOur custom model pipeline is designed to accommodate a wide range of data types, including audio, videos, and text, automatically integrating multimodal patterns of expression and language. However, not all datasets are created equal. For best results, we recommend using a dataset that meets certain standards:\n\n**Dataset size**\n\nIdeally, use a dataset consisting of a minimum of 20 files, but more data is always better for model performance.\n\n**Media type consistency**\n\nAll files within a dataset should be of the same media type (video, audio, image, text...etc.)\n\nIt's generally wise to maintain a consistent naming convention and file format for your dataset. At minimum, ensure files have appropriate extensions, such as `.wav`, `.mp3`, `.aif`, `.mov`, or `.mp4`.\n\n**Classification vs regression tasks**\n\nDepending on your model's objective (classification or regression), you can use different labeling approaches.\n\n- **Classification labels**: use either strings or integers as labels (e.g., \"confused,\" \"focused\"). We limit the number of categorical labels to 50, and you must have at least two (binary).\n- **Regression targets**: use either integers or decimals as targets. A model trained on a regression task with predict a continuous numerical value.\n\n**Label consistency**\n\nWe recommend that your labels follow a consistent format; e.g, do not mix integers and strings. Furthermore, be sure to check for any typos in your labels, as these will be considered as separate classes, e.g, “happy” vs. “hapy.”\n\n**Class imbalance**\n\nIf possible, it helps to have a balanced distribution of labels in your dataset. For example, if you have 50 files and two classes, the best case is to have 25 samples per class. Generally, you need at least 10 samples per class to train a useful model, but more data per class is always better.\n\n</Accordion>\n\n<Accordion title='Which languages are supported by Custom Models?'>\n  Our custom models support the same range of languages as our expression\n  measurement models. You can find a complete list of supported languages\n  [here](/docs/expression-measurement-api/faq#which-languages-are-supported).\n</Accordion>\n\n</AccordionGroup>\n\n---\n"
      },
      "docs/pages/documentation/resources/billing.mdx": {
        "markdown": "---\ntitle: Billing\n---\n\n## Postpaid billing\n\nWe're in the process of transitioning to postpaid billing, a flexible pay-as-you-go system. You pay only for the services used, without needing to purchase credits upfront. This option is not available for all Hume users quite yet. You can check [Usage & Billing](https://beta.hume.ai/settings/usage) to see if postpaid billing is available for your account and reach out to our [support team](/support) if you're interested in getting early access.\n\n## How it works\n\n1. **Joining the platform**: When you sign up and start using our API, you'll initially be using the free credits given to every new account.\n2. **Credit card requirement**: Once you've exhausted your credit balance, you'll need to add your credit card information to continue.\n\n<Callout intent=\"warn\">\nSubcribe to postpaid billing __before__ depleting your credit balance to ensure uninterrupted service. \n</Callout>\n\n3. **Monthly limit and notifications**:\n   - You'll have a default monthly limit of $100.\n   - If you hit the $100 limit, API calls will return an error, and you'll be prompted to apply for a limit increase.\n4. **Billing notifications**:\n   - On the first of each month, you'll receive an invoice for the previous month’s usage.\n   - If your credit card is successfully added, it will be charged automatically.\n   - You'll get a confirmation email for successful transactions or an alert if a transaction fails.\n5. **Failure to pay**: If payment isn't received within 7 days of the invoice date, API access will be suspended until the outstanding balance is settled.\n\n## Managing your account\n\n- **Usage information**: To view your monthly usage details, visit [Usage & Billing](https://beta.hume.ai/settings/usage). There you can track your API usage and see how much of your monthly limit has been utilized.\n  - **Note**: After your prepaid credits are used, further usage accrues to your _monthly cost_.  You'll be charged this amount on the first of the following month. Your monthly cost is updated daily at 08:00 UTC.\n- **Billing portal**: To manage your billing details, navigate to [Usage & Billing](https://beta.hume.ai/settings/usage) and select **Manage payments and view invoices**. There you can update your payment method, view past invoices, and keep track of upcoming charges.\n\n## Understanding your bill\n\n### Pricing\n\nFind up-to-date pricing information at [hume.ai/pricing](https://beta.hume.ai/pricing).\n\n### Billing methodology\n\n1. **Audio and video:**\n   - Our listed prices are presented per minute for ease of understanding.\n   - However, we bill these services on a corresponding per-second basis to ensure precise and fair charges. This means you are only billed for the exact amount of time your audio or video content is processed.\n2. **Image and text:**\n   - Image processing charges are incurred per image.\n   - Text processing is billed based on the number of words processed.\n\n## FAQs\n\n<AccordionGroup>\n<Accordion title=\"Why do I have a negative credit balance?\">\nAfter you use all your credits, there might be a delay before we switch you to a subscription or stop access, which can result in a small negative credit balance. This is normal and won't affect your subscription.\n</Accordion>\n</AccordionGroup>\n\nIf you have questions about your bill or need assistance understanding the charges, please contact [billing@hume.ai](mailto:billing@hume.ai).\n\n---\n"
      },
      "docs/pages/documentation/resources/errors.mdx": {
        "markdown": "---\ntitle: Errors\nredirects:\n  - /streaming-api-error-codes\n---\n\n## Configuration errors\n\nConfiguration errors indicate that something about the API call was not configured correctly. The error message you get from the Hume APIs will often contain more information than we're able to provide on this page. For example if an audio file is too long, the error message from the API will specify the limit as well as the length of the audio received.\n\n| Error Code | Description                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| ---------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| E0100      | The WebSocket request could not be parsed as valid JSON. The Hume API requires JSON serializable payloads.                                                                                                                                                                                                                                                                                                                              |\n| E0101      | You may be missing or improperly formatting a required field. This generic error indicates that the structure of your WebSocket request was invalid. Please see the error message you received in the API response for more details.                                                                                                                                                                                                    |\n| E0102      | The requested model was incompatible with the file format received. Some models are not compatible with every file type. For example, no facial expressions will be detected in a text file. Audio can be extracted out of some video files, but if the video has no audio, then models like Speech Prosody and Vocal Burst will not be available.                                                                                      |\n| E0200      | Media provided could not be parsed into a known file format. Hume APIs support a wide range of file formats and media types including audio, video, image, text, but not all formats are supported. If you receive this error and believe your file type should be supported please reach out to our [support team](/support).                                                                                                          |\n| E0201      | Media could not be decoded as a Base64 encoded string. The [data](/reference/expression-measurement-api/stream/stream#send.publish.data) field in the request payload should be Base64 encoded bytes. If you want to pass raw text without encoding it you can do so with the [raw_text](/reference/expression-measurement-api/stream/stream#send.publish.raw_text) parameter.                                                          |\n| E0202      | No audio signal could be inferred from the media provided. This error indicates that audio models were configured, but the media provided could not be parsed into a valid audio file.                                                                                                                                                                                                                                                  |\n| E0203      | Your audio file was too long. The limit is 5000 milliseconds. The WebSocket endpoints are intended for near real-time processing of data streams. For larger files considering using the [Hume Measurement API REST endpoints](/docs/expression-measurement-api/rest).                                                                                                                                                                  |\n| E0204      | Your video file was too long. For best performance we recommend passing individual frames of video as images rather than full video files.                                                                                                                                                                                                                                                                                              |\n| E0205      | Your image file was too large. The limit is 3,000 x 3,000 pixels. The WebSocket endpoints are intended for near real-time processing of data streams. For larger files considering using the [Hume Measurement API REST endpoints](/docs/expression-measurement-api/rest).                                                                                                                                                              |\n| E0206      | Your text file was too long. The limit is 10,000 characters. The WebSocket endpoints are intended for near real-time processing of data streams. For larger files considering using the [Hume Measurement API REST endpoints](/docs/expression-measurement-api/rest).                                                                                                                                                                   |\n| E0207      | The URL you've provided appears to be incorrect. Please verify that you've entered the correct URL and try submitting it again. If you're copying and pasting, ensure that the entire URL has been copied without any missing characters.                                                                                                                                                                                               |\n| E0300      | You've run out of credits. Go to [beta.hume.ai](https://beta.hume.ai) to purchase more.                                                                                                    |\n| E0301 | Your monthly credit limit has been reached. With post-paid pricing, users can accrue charges up to a predetermined monthly cap. This limit ensures that users do not accumulate excessive debt without assurance of payment. If you require a higher limit, you may manually apply for a credit limit increase. Alternatively, the limit will reset at the beginning of the next month. For more information, please see our docs on [billing](/docs/resources/billing#how-it-works).                                                                                                                       |\n| E0400      | You've referenced a resource that doesn't exist in our system. Please check if the name or identifier you used is correct and try again.                                                                                                                                                                                                                                                                                                |\n| E0401      | Your upload failed. Please ensure your file meets our format and size requirements, and attempt to upload it again.                                                                                                                                                                                                                                                                                                                     |\n| E0402      | The CSV file you used to create or update a dataset is missing a header row. The header specifies what each column represents. Update your CSV file and retry your request. For more information about how to format your dataset CSV please see our tutorial on [dataset creation](/docs/custom-models-api/creating-your-dataset).                                                                                                     |\n| E0500      | Your dataset doesn't meet the minimum sample size requirement. Please add more files to your dataset and resubmit your training job. For more information, please see our docs on [dataset requirements](/docs/custom-models-api/faq#what-are-guidelines-for-building-datasets).                                                                                                                                                        |\n| E0501      | Your dataset contains a target column with empty values. Please clean your dataset so that all labels are valid categorical or numeric values and then resubmit your training job. For more information on target columns please see our docs on [dataset requirements](/docs/custom-models-api/faq#what-are-guidelines-for-building-datasets).                                                                                         |\n| E0502      | Your dataset contains a target column with infinite values. Please clean your dataset so that all labels are valid categorical or numeric values and then resubmit your training job. For more information on target columns please see our tutorial on [dataset creation](/docs/custom-models-api/creating-your-dataset).                                                                                                              |\n| E0503      | For classification tasks, your dataset must include at least two distinct classes. Please check your dataset has two unique labels in the target column.                                                                                                                                                                                                                                                                                |\n| E0504      | Some classes in your dataset don't have enough samples. To ensure that the model we produce is of the highest quality we require your dataset to be relatively balanced across classes. Please check the error message for which class should have more samples (or remove that class entirely). Please see our docs on [dataset requirements](/docs/custom-models-api/faq#what-are-guidelines-for-building-datasets) for more details. |\n| E0505      | The target column you've selected doesn't exist in the dataset. Please review the columns that exist in your dataset and select a valid column name.                                                                                                                                                                                                                                                                                    |\n| E0506      | Your chosen target column is not a valid target column. Please ensure that you select a column with labels rather than the `file_id` column or another reserved column name.                                                                                                                                                                                                                                                            |\n\n<Callout intent='warning'>\n  The connection will be closed automatically after ten identical configuration\n  errors to avoid unintended looping.\n</Callout>\n\n## Service errors\n\nIf you encounter an error code starting with `I` (for example, error code `I0100`), it indicates an outage or a bug in a Hume service. Our team will already have been alerted of the internal error, but if you need immediate assistance please reach out to our [support team](/support).\n\n## Warnings\n\nWarnings indicate that the payload was configured correctly, but no results could be returned.\n\n| Error Code | Description                                           |\n| ---------- | ----------------------------------------------------- |\n| W0101      | No vocal bursts could be detected in the media.       |\n| W0102      | No face meshes could be detected in the media.        |\n| W0103      | No faces could be detected in the media.              |\n| W0104      | No emotional language could be detected in the media. |\n| W0105      | No speech could be detected in the media.             |\n\n## Common errors\n\nSome errors will not have an associated error code, but are documented here.\n\n### Transcript confidence below threshold value\n\nThis error indicates that our transcription service had difficulty identifying the language spoken in your audio file or the quality was too low. We prioritize quality and accuracy, so if it cannot transcribe with confidence, our models won't be able to process it further.\n\nBy default, we use an automated language detection method for our Speech Prosody, Language, and NER models. However, if you know what language is being spoken in your media samples, you can specify it via its BCP-47 tag and potentially obtain more accurate results.\n\nIf you see the message above there are few steps you can do to resolve the issue:\n\n- Verify we support the language\n- Ensure you are providing clear, high-quality audio files.\n- Specify the language within your request if you know the language in the audio.\n\n<CodeBlocks>\n    <CodeBlock title=\"Hume Python SDK\">\n        ```python\n        from hume import HumeBatchClient\n        from hume.models.config import ProsodyConfig\n\n        client = HumeBatchClient(\"<YOUR API KEY>\")\n        urls = [\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"]\n        model_configs = [ProsodyConfig()]\n        transcription_config = TranscriptionConfig(language=\"en\")\n        job = client.submit_job(urls, model_configs, transcription_config=transcription_config)\n\n        print(job)\n        print(\"Running...\")\n\n        job.await_complete()\n        predictions = job.get_predictions()\n        print(prediction)\n        ```\n    </CodeBlock>\n    <CodeBlock title=\"JSON\">\n        ```json\n        \"transcription\": {\n            \"language\": \"en\"\n        }\n        ```\n    </CodeBlock>\n\n</CodeBlocks>\n\n<Callout intent='info'>\n  You can specify any of the following: zh, da, nl, en, en-AU, en-IN, en-NZ,\n  en-GB, fr, fr-CA, de, hi, hi-Latn, id, it, ja, ko, no, pl, pt, pt-BR, pt-PT,\n  ru, es, es-419, sv, ta, tr, or uk\n</Callout>\n"
      },
      "docs/pages/documentation/resources/science-hume-ai.mdx": {
        "markdown": "---\ntitle: About the Science\n---\n\nWhat is it about speaking in person that allows us to understand each other so much more accurately than text alone? It isn’t what we say—it’s the way we say it. Science consistently demonstrates that expressions convey important information that is vital for social interaction and forms the building blocks of empathy.\n\nThat being said, expressions aren’t direct windows into the human mind. Measuring and interpreting expressive behavior is a complex and nuanced task that is the subject of ongoing scientific research.\n\nThe scientists at Hume AI have run some of the largest-ever psychology studies to better understand how humans express themselves. By investigating expressions around the world and what they mean to the people making them, we’ve mapped out the nuances of expression in the voice, language, and face in unprecedented detail. We’ve published this research in the world’s leading scientific journals and, for the first time, translated it into cutting-edge machine learning models.\n\nThese models, shaped by a new understanding of human expression, include:\n\n- Facial Expression\n- Speech Prosody\n- Vocal Bursts\n- Emotional Language\n\n---\n\n## Modalities\n\n### Facial Expression\n\nFacial expression is the most well-studied modality of expressive behavior, but the overwhelming focus has been on six discrete categories of facial movement or time-consuming manual annotations of facial movements (the scientifically useful, but outdated, Facial Action Coding System). Our research shows that these approaches capture less than 30% of what typical facial expressions convey.\n\nHume’s **Facial Emotional Expression** model generates 48 outputs encompassing the dimensions of emotional meaning people reliably attribute to facial expressions. As with every model, the labels for each dimension are proxies for how people tend to label the underlying patterns of behavior. They should not be treated as direct inferences of emotional experience.\n\nHume’s **FACS 2.0** model is a new generation automated facial action coding system (FACS). With 55 outputs encompassing 26 traditional actions units (AUs) and 29 other descriptive features (e.g., smile, scowl), FACS 2.0 is even more comprehensive than manual FACS annotations.\n\nOur facial expression models are packaged with face detection and work on both images and videos.\n\nIn addition to our image-based facial expression models, we also offer an **Anonymized Facemesh** model for applications in which it is essential to keep personally identifiable data on-device (e.g., for compliance with local laws). Instead of face images, our facemesh model processes facial landmarks detected using [Google's MediaPipe](https://mediapipe.dev/) library. It achieves about 80% accuracy relative to our image-based model.\n\nTo read more about the team’s research on facial expressions, check out our publications in [American Psychologist (2018)](https://psycnet.apa.org/record/2019-32629-001), [Nature (2021)](https://www.nature.com/articles/s41586-020-3037-7), and [iScience (2024)](https://doi.org/10.1016/j.isci.2024.109175).\n\n### Speech Prosody\n\nSpeech prosody is not about the words you say, but the way you say them. It is distinct from language (words) and from non-linguistic vocal utterances.\n\nOur **Speech Prosody** model generates 48 outputs encompassing the 48 dimensions of emotional meaning that people reliably distinguish from variations in speech prosody. As with every model, the labels for each dimension are proxies for how people tend to label the underlying patterns of behavior. They should not be treated as direct inferences of emotional experience.\n\nOur Speech Prosody model is packaged with speech detection and works on both audio files and videos.\n\nTo read more about the team’s research on speech prosody, check out our publications in [Nature Human Behaviour (2019)](https://www.nature.com/articles/s41562-019-0533-6) and [Proceedings of the 31st ACM International Conference on Multimedia (2023)](https://dl.acm.org/doi/abs/10.1145/3581783.3612835).\n\n### Vocal Bursts\n\nNon-linguistic vocal utterances, including sighs, laughs, oohs, ahhs, umms, and shrieks (to name but a few), are a particularly powerful and understudied modality of expressive behavior. Recent studies reveal that they reliably convey distinct emotional meanings that are extremely well-preserved across most cultures.\n\nNon-linguistic vocal utterances have different acoustic characteristics than speech emotional intonation (prosody) and need to be modeled separately.\n\nOur **Vocal Burst Expression** model generates 48 outputs encompassing the distinct dimensions of emotional meaning that people distinguish in vocal bursts. As with every model, the labels for each dimension are proxies for how people tend to label the underlying patterns of behavior. They should not be treated as direct inferences of emotional experience.\n\nOur **Vocal Burst Description** model provides a more descriptive and categorical view of nonverbal vocal expressions (“gasp,” “mhm,” etc.) intended for use cases such as audio captioning. It generates 67 descriptors, including 30 call types (“sigh,” “laugh,” “shriek,” etc.) and 37 common onomatopoeia transliterations of vocal bursts (“hmm,” “ha,” “mhm,” etc.).\n\nOur vocal burst models are packaged with non-linguistic vocal utterance detection and works on both audio files and videos.\n\nTo read more about the team’s research on vocal bursts, check out our publications in [American Psychologist (2019)](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6586540/), [Interspeech 2022](https://www.researchgate.net/profile/Dacher-Keltner/publication/363646465_State_Trait_Measurement_from_Nonverbal_Vocalizations_A_Multi-Task_Joint_Learning_Approach/links/6415825366f8522c38b3d959/State-Trait-Measurement-from-Nonverbal-Vocalizations-A-Multi-Task-Joint-Learning-Approach.pdf), [ICASSP 2023](https://ieeexplore.ieee.org/abstract/document/10095294/), and [Nature Human Behaviour (2023)](https://www.nature.com/articles/s41562-022-01489-2).\n\n### Emotional Language\n\nThe words we say include explicit disclosures of emotion and implicit emotional connotations. These meanings are complex and high-dimensional.\n\nFrom written or spoken words, our **Emotional Language** model generates 53 outputs encompassing different dimensions of emotion that people often perceive from language. As with every model, the labels for each dimension are proxies for how people tend to label the underlying patterns of behavior. They should not be treated as direct inferences of emotional experience.\n\nOur Emotional Language model is packaged with speech transcription and works on audio files, videos, and text.\n\nOur **Named Entity Recognition (NER)** model can also identify topics or entities (people, places, organizations, etc.) mentioned in speech or text and the tone of language they are associated with, as identified by our emotional language model.\n\n---\n\n## Published Research\n\nYou can access a comprehensive list of our published research papers along with PDFs for download [here](https://github.com/HumeAI/hume-research-publications/tree/main).\n\n---\n"
      },
      "docs/pages/documentation/resources/use-case-guidelines.mdx": {
        "markdown": "## Ethical guidelines\nUnderstanding expressive communication is essential to building technologies that address our needs and improve our well-being. But technologies that recognize language and nonverbal behavior can also pose risks. That’s why we require that all commercial applications incorporating our APIs adhere to the ethical guidelines of The Hume Initiative.\n\n## Scientific best practices\n1. **Use inductive methods to identify the expressive signals that matter for your application.** Even if you are interested in a specific emotion like “anger,” how that emotion is expressed depends on setting: anger on a football field sounds different than anger on a customer service call. Our models succinctly compress the representation of emotional expression so that, even with limited data, you can examine how their outputs can be used in your specific research or application setting. You can do this by using statistical methods like regression or classification, or by examining the distribution of expressions in your data using our [Playground](https://beta.hume.ai/).\n2. **Never assume a one-to-one mapping between emotional experience and expression.** The outputs of our models should be treated as measurements of complex expressive behavior. We provide labels to our outputs indicating what these dimensions of expression are often reported to mean, but these labels should not be interpreted as direct inferences of how someone is feeling at any given time. Rather, “a full understanding of emotional expression and experience requires an appreciation of a wide degree of variability in display behavior, subjective experience, patterns of appraisal, and physiological response, both within and across emotion categories” ([Cowen et al., 2019](https://journals.sagepub.com/doi/10.1177/1529100619850176)).\n3. **Never overlook the nuances in emotional expression.** For instance, avoid the temptation to focus on just the top label. We provide interactive visualizations in our [Playground](https://beta.hume.ai/) to help you map out complex patterns in real-life emotional behavior. These visualizations are informed by recent advances in emotion science, departing from reductive models that long “anchored the science of emotion to a predominant focus on prototypical facial expressions of the “basic six”: anger, disgust, fear, sadness, surprise, and happiness,” and embracing how “new discoveries reveal that the two most commonly studied models of emotion—the basic six and the affective circumplex (comprising valence and arousal)—each capture at most 30% of the variance in the emotional experiences people reliably report and in the distinct expressions people reliably recognize.” ([Cowen et al., 2019](https://journals.sagepub.com/doi/10.1177/1529100619850176))\n4. **Account for culture-specific meanings and display tendencies.** Studies have routinely observed subtle cultural differences in the meaning of expressions as well as broader “variations in the frequency and intensity with which different expressions were displayed” ([Cowen et al., 2022](https://psyarxiv.com/gbqtc/)). Given these differences, empathic AI applications should be tested in each population in which they are deployed and fine-tuned when necessary.\nRead about the [science](/docs/resources/science) behind our models if you’d like to delve deeper into how they work.\n\n---\n"
      },
      "docs/pages/documentation/resources/privacy.mdx": {
        "markdown": "---\ntitle: Privacy\n---\n\n## Privacy Policy\n\nOur [Privacy Policy](https://www.hume.ai/privacy-policy) governs how we collect and use personal information submitted to our products.\n\n## API Data Usage Policy\n\nOur [API Data Usage Policy](https://beta.hume.ai/policies/api-data-usage-policy) details how and when we store API data.\n\n## Consumer Services FAQ\n\nOur Consumer Services FAQ explains how and when we store data processed by our frontend applications like our Playground.\n\n<AccordionGroup>\n<Accordion title=\"Does Hume AI train on my content to improve model performance?\" >\n\nFor non-API consumer products like our Playground and Demo, we may use content such as images, video files, audio files, and text files to improve our services. You can request to opt out of having your content used to improve our services at any time by contacting us on [Discord](https://discord.com/invite/WPRSugvAm6) with your request. This opt-out will apply on a going-forward basis only.\n\nPlease note that for our API product, Hume AI will not use data submitted by customers via our API to train or improve our models.\n\n</Accordion>\n\n<Accordion title=\"How do I delete my account?\">\n\nYou can delete your account by submitting a user account deletion request in your [Profile page on the Hume playground](https://beta.hume.ai/settings/profile). Once you submit your deletion request, we will delete your account within 30 days. Please note that for security reasons, once you delete your account, you may not re-sign up for an account with the same email address.\n\n</Accordion>\n\n<Accordion title=\"Is my content shared with third parties?\">\n\nWe share content with a select group of trusted service providers that help us provide our services. We share the minimum amount of content we need in order to accomplish this purpose and our service providers are subject to strict confidentiality and security obligations. Please see our [Privacy Policy](https://www.hume.ai/privacy-policy) for more information on who we may share your content with.\n\n</Accordion>\n\n<Accordion title=\"Where is my content stored?\">\n\nContent is stored on Hume AI systems and our trusted service providers' systems in the US and around the world.\n\n</Accordion>\n\n<Accordion title=\"Do humans view my content?\">\n\nA limited number of authorized Hume AI personnel, may view and access user content only as needed for these reasons: (1) investigating abuse or a security incident; (2) to provide support to you if you reach out to us with questions about your account; (3) or to comply with legal obligations. Access to content is subject to technical access controls and limited only to authorized personnel on a need-to-know basis. Additionally, we monitor and log all access to user content and authorized personnel must undergo security and privacy training prior to accessing any user content.\n\n</Accordion>\n\n<Accordion title=\"Does Hume AI sell my data?\">\n\nNo. We do not sell your data or share your content with third parties for marketing purposes.\n\n</Accordion>\n\n<Accordion title=\"How do I submit a data privacy request?\">\n\nPlease message the moderators on our [Discord Server](https://discord.com/invite/WPRSugvAm6).\n\n</Accordion>\n\n</AccordionGroup>\n\n---\n"
      },
      "docs/changelog/2024.mdx": {
        "markdown": "---\ntitle: Changelog\nslug: changelog\n---\n\n## May 24, 2024 [#05-24-2024]\n\n### EVI API additions\n\n- Added support for streaming custom language model responses in parts. Developers can send text chunks to start generating audio responses much faster.\nThe Custom Language Model endpoint now expects text to be formatted in the following payload:\n\n    ```\n    # send this to add text\n    {\"type\": \"assistant_input\", \"text\": \"<chunk>\"}\n\n    # send this message when you're done speaking\n    {\"type\": \"assistant_end\"}\n    ```\n\n- Added support for pausing and resuming EVI responses with with `pause_assistant_message` and `resume_assistant_message`. Sending a pause message stops EVI from generating and speaking Assistant messages. Sending a resume message allows EVI to continue responding to the User messages.\n\n### EVI API modifications\n\n- Increased the limit for tool descriptions from 100 chars to 512 chars\n- Set the maximum length for `tool_name` to 64 chars\n\n---------------------------------------------------------------------------------------------\n\n## May 17, 2024 [#05-17-2024]\n\n### EVI API additions\n- Added support for built-in tools, starting with web search: [Using built-in tools](https://dev.hume.ai/docs/empathic-voice-interface-evi/tool-use#using-built-in-tools)\n- Added support for phone calling through a Twilio integration: [Phone calling](https://dev.hume.ai/docs/empathic-voice-interface-evi/phone-calling)\n- Added `DACHER` voice to the voice configuration options\n- Added support for the `gpt-4o` language model\n\n### EVI API modifications\n- Increased the limit for tool descriptions from 100 chars to 512 chars\n\n---------------------------------------------------------------------------------------------\n\n## May 10, 2024 [#05-10-2024]\n\n### EVI API additions\n- Added support for three open-source models through the Groq language model provider: Gemma 7B (`gemma-7b-it`), Llama 3 8B (`llama3-8b-8192`), and Llama 3 70B (`llama3-70b-8192`)\n- Added support for Llama 30 70B language model through the Fireworks language model provider (`accounts/fireworks/models/llama-v3-70b-instruct`)\n- Added a `custom_session_id` field in the `SessionSettings` message, and documentation for using it: [Custom Session ID](https://dev.hume.ai/docs/empathic-voice-interface-evi/custom-language-model#custom-session-id)\n\n### EVI API modifications\n- Disabled short response generation for [custom language models](https://dev.hume.ai/docs/empathic-voice-interface-evi/custom-language-model)\n- Added error codes for when Hume credits run out while using EVI. Users will receive either the `E0300` error code if they are out of credits or `E0301` if they are blocked via subscription. The WebSocket connection will also be closed with code `1008`\n\n### Bugs bashed\n- Fixed an issue with the `from_text` field in `UserMessage`. It is now set to True if any part of the `UserMessage` is from a developer-provided `UserInput` message\n\n---------------------------------------------------------------------------------------------\n\n## May 3, 2024 [#05-03-2024]\n\n### EVI API additions\n- Added support for `Tools` through our [tool use feature](https://dev.hume.ai/docs/empathic-voice-interface-evi/tool-use)\n- Added `ToolErrorMessage` as a supported input type\n\n### Bugs bashed\n- Added an error that returns status `400` if a Config, Tool, or Prompt is created with a name or `versionDescription` that's too long or non-ASCII. Names must be under 75 chars, `versionDescription` must be under 256 chars, `description` for Tools must be under 100 chars, `fallback_content` for Tools must be under 2048 chars, and `model_resource` for LanguageModels must be under 1024 chars\n- Fixed several edge cases and bugs involving Tool calls, including supporting only single tool calls with EVI (no parallel tool calling)\n\n---------------------------------------------------------------------------------------------\n\n## April 30, 2024 [#04-30-2024]\n\n### EVI API additions\n- Added support for reading language model type from EVI configs\n- Added support for reading language model `temperature` from EVI configs\n- Added system prompt to `SessionSettings` message to allow dynamic prompt updating\n\n### EVI API changes\n- Renamed `TextInput` message to `UserInput` to indicate this is text to be added to the chat history as a `User` message and used as context by the LLM\n- Renamed `TtsInput` message to `AssistantInput` to make it clear that this is input text to be spoken by EVI and added to the chat history as an `Assistant` message\n- Moved audio configuration options to `SessionSettings` message\n\n### Bugs bashed\n- Fixed chats staying open after errors, chats will now end upon exceptions\n- Added an error thrown if config uses both `custom_model` and `prompt`, because custom language models do not use prompts\n- Fixed issue where erroring when sending errors would cause the API to get stuck\n- Added clearer errors for custom language models\n- Added unable to configure audio service error\n- Added an error to invalidate outdated language model responses\n"
      }
    },
    "search": {
      "type": "singleAlgoliaIndex",
      "value": {
        "type": "unversioned",
        "indexSegment": {
          "id": "seg_hume.docs.buildwithfern.com_eb44eaae-6158-4a75-ad66-66e4be1033d8",
          "searchApiKey": "MDU1MDJmODNmNGZiNTM1ZTZjZjk2MzI5MmMxNDFlMGNiMmI5MTQ3MzQwMGY4ODYyOWFhYWRmZjdjNzkzYmZjM2ZpbHRlcnM9aW5kZXhTZWdtZW50SWQlM0FzZWdfaHVtZS5kb2NzLmJ1aWxkd2l0aGZlcm4uY29tX2ViNDRlYWFlLTYxNTgtNGE3NS1hZDY2LTY2ZTRiZTEwMzNkOCZ2YWxpZFVudGlsPTE3MTcxMzMwNjA="
        }
      }
    },
    "id": "docs_definition_7b174fa0-698f-4a06-bb97-dd4d873daefa"
  },
  "lightModeEnabled": true
}
