{
  "baseUrl": {
    "domain": "hume.docs.buildwithfern.com"
  },
  "definition": {
    "config": {
      "navigation": {
        "tabs": [
          {
            "type": "group",
            "title": "Documentation",
            "icon": "fa-solid fa-home",
            "items": [
              {
                "type": "section",
                "title": "Introduction",
                "urlSlug": "introduction",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/introduction/welcome.mdx",
                    "title": "Welcome to Hume AI",
                    "urlSlug": "welcome-to-hume-ai",
                    "fullSlug": ["intro"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/introduction/getting-your-api-key.mdx",
                    "title": "Getting your API keys",
                    "urlSlug": "api-key",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/introduction/support.mdx",
                    "title": "Support",
                    "urlSlug": "support",
                    "fullSlug": ["support"],
                    "hidden": false
                  },
                  {
                    "type": "link",
                    "title": "Pricing",
                    "url": "https://platform.hume.ai/pricing"
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Empathic Voice Interface (EVI)",
                "urlSlug": "empathic-voice-interface-evi",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/overview.mdx",
                    "title": "Overview",
                    "urlSlug": "overview",
                    "hidden": false
                  },
                  {
                    "type": "section",
                    "title": "Quickstart",
                    "urlSlug": "quickstart",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "docs/pages/documentation/empathic-voice-interface/quickstart/typescript.mdx",
                        "title": "TypeScript",
                        "urlSlug": "typescript",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/pages/documentation/empathic-voice-interface/quickstart/python.mdx",
                        "title": "Python",
                        "urlSlug": "python",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/evi-2.mdx",
                    "title": "EVI 2",
                    "urlSlug": "evi-2",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/configuration/configuration.mdx",
                    "title": "Configuration",
                    "urlSlug": "configuration",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/voices/voices.mdx",
                    "title": "Voices",
                    "urlSlug": "voices",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/tool-use/tool-use.mdx",
                    "title": "Tool use",
                    "urlSlug": "tool-use",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/phone-calling.mdx",
                    "title": "Phone calling",
                    "urlSlug": "phone-calling",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/prompting.mdx",
                    "title": "Prompting guide",
                    "urlSlug": "prompting",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/custom-language-model.mdx",
                    "title": "Custom language model",
                    "urlSlug": "custom-language-model",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/empathic-voice-interface/faq.mdx",
                    "title": "FAQ",
                    "urlSlug": "faq",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Expression Measurement",
                "urlSlug": "expression-measurement",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/expression-measurement-api/overview.mdx",
                    "title": "Overview",
                    "urlSlug": "overview",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/expression-measurement-api/rest.mdx",
                    "title": "Processing batches of media files",
                    "urlSlug": "rest",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/expression-measurement-api/websocket.mdx",
                    "title": "Real-time measurement streaming",
                    "urlSlug": "websocket",
                    "hidden": false
                  },
                  {
                    "type": "section",
                    "title": "Custom models",
                    "urlSlug": "custom-models",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "docs/pages/documentation/custom-models-api/overview.mdx",
                        "title": "Overview",
                        "urlSlug": "overview",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/pages/documentation/custom-models-api/creating-your-dataset.mdx",
                        "title": "Creating your dataset",
                        "urlSlug": "creating-your-dataset",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/pages/documentation/custom-models-api/training-your-model.mdx",
                        "title": "Training a custom model",
                        "urlSlug": "training-a-custom-model",
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/pages/documentation/custom-models-api/evaluating-your-model.mdx",
                        "title": "Evaluating your custom model",
                        "urlSlug": "evaluating-your-custom-model",
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/expression-measurement-api/faq.mdx",
                    "title": "FAQ",
                    "urlSlug": "faq",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Resources",
                "urlSlug": "resources",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/billing.mdx",
                    "title": "Billing",
                    "urlSlug": "billing",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/errors.mdx",
                    "title": "Errors",
                    "urlSlug": "errors",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/science-hume-ai.mdx",
                    "title": "About the science",
                    "urlSlug": "science",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/use-case-guidelines.mdx",
                    "title": "Use case guidelines",
                    "urlSlug": "use-case-guidelines",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/privacy.mdx",
                    "title": "Privacy",
                    "urlSlug": "privacy",
                    "hidden": false
                  },
                  {
                    "type": "link",
                    "title": "Status",
                    "url": "https://status.hume.ai"
                  },
                  {
                    "type": "link",
                    "title": "Roadmap",
                    "url": "https://hume.canny.io/"
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlugOverride": "docs",
            "urlSlug": "docs",
            "skipUrlSlug": false
          },
          {
            "type": "group",
            "title": "API Reference",
            "icon": "fa-solid fa-file-contract",
            "items": [
              {
                "type": "apiV2",
                "node": {
                  "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                  "type": "apiReference",
                  "title": "Empathic Voice Interface (EVI)",
                  "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                  "paginated": false,
                  "slug": "reference/empathic-voice-interface-evi",
                  "hideTitle": false,
                  "showErrors": false,
                  "children": [
                    {
                      "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:subpackage_tools",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_tools.list-tools",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_tools.list-tools",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "List tools",
                          "slug": "reference/empathic-voice-interface-evi/tools/list-tools"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_tools.create-tool",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_tools.create-tool",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Create tool",
                          "slug": "reference/empathic-voice-interface-evi/tools/create-tool"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_tools.list-tool-versions",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_tools.list-tool-versions",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "List tool versions",
                          "slug": "reference/empathic-voice-interface-evi/tools/list-tool-versions"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_tools.create-tool-version",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_tools.create-tool-version",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Create tool version",
                          "slug": "reference/empathic-voice-interface-evi/tools/create-tool-version"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_tools.delete-tool",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_tools.delete-tool",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Delete tool",
                          "slug": "reference/empathic-voice-interface-evi/tools/delete-tool"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_tools.update-tool-name",
                          "type": "endpoint",
                          "method": "PATCH",
                          "endpointId": "endpoint_tools.update-tool-name",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Update tool name",
                          "slug": "reference/empathic-voice-interface-evi/tools/update-tool-name"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_tools.get-tool-version",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_tools.get-tool-version",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Get tool version",
                          "slug": "reference/empathic-voice-interface-evi/tools/get-tool-version"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_tools.delete-tool-version",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_tools.delete-tool-version",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Delete tool version",
                          "slug": "reference/empathic-voice-interface-evi/tools/delete-tool-version"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_tools.update-tool-description",
                          "type": "endpoint",
                          "method": "PATCH",
                          "endpointId": "endpoint_tools.update-tool-description",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Update tool description",
                          "slug": "reference/empathic-voice-interface-evi/tools/update-tool-description"
                        }
                      ],
                      "title": "Tools",
                      "slug": "reference/empathic-voice-interface-evi/tools",
                      "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                      "pointsTo": "reference/empathic-voice-interface-evi/tools/list-tools"
                    },
                    {
                      "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:subpackage_prompts",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_prompts.list-prompts",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_prompts.list-prompts",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "List prompts",
                          "slug": "reference/empathic-voice-interface-evi/prompts/list-prompts"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_prompts.create-prompt",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_prompts.create-prompt",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Create prompt",
                          "slug": "reference/empathic-voice-interface-evi/prompts/create-prompt"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_prompts.list-prompt-versions",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_prompts.list-prompt-versions",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "List prompt versions",
                          "slug": "reference/empathic-voice-interface-evi/prompts/list-prompt-versions"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_prompts.create-prompt-verison",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_prompts.create-prompt-verison",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Create prompt version",
                          "slug": "reference/empathic-voice-interface-evi/prompts/create-prompt-verison"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_prompts.delete-prompt",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_prompts.delete-prompt",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Delete prompt",
                          "slug": "reference/empathic-voice-interface-evi/prompts/delete-prompt"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_prompts.update-prompt-name",
                          "type": "endpoint",
                          "method": "PATCH",
                          "endpointId": "endpoint_prompts.update-prompt-name",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Update prompt name",
                          "slug": "reference/empathic-voice-interface-evi/prompts/update-prompt-name"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_prompts.get-prompt-version",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_prompts.get-prompt-version",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Get prompt version",
                          "slug": "reference/empathic-voice-interface-evi/prompts/get-prompt-version"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_prompts.delete-prompt-version",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_prompts.delete-prompt-version",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Delete prompt version",
                          "slug": "reference/empathic-voice-interface-evi/prompts/delete-prompt-version"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_prompts.update-prompt-description",
                          "type": "endpoint",
                          "method": "PATCH",
                          "endpointId": "endpoint_prompts.update-prompt-description",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Update prompt description",
                          "slug": "reference/empathic-voice-interface-evi/prompts/update-prompt-description"
                        }
                      ],
                      "title": "Prompts",
                      "slug": "reference/empathic-voice-interface-evi/prompts",
                      "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                      "pointsTo": "reference/empathic-voice-interface-evi/prompts/list-prompts"
                    },
                    {
                      "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:subpackage_customVoices",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_customVoices.list-custom-voices",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_customVoices.list-custom-voices",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "List custom voices",
                          "slug": "reference/empathic-voice-interface-evi/custom-voices/list-custom-voices"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_customVoices.create-custom-voice",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_customVoices.create-custom-voice",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Create custom voice",
                          "slug": "reference/empathic-voice-interface-evi/custom-voices/create-custom-voice"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_customVoices.get-custom-voice",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_customVoices.get-custom-voice",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Get specific custom voice by ID",
                          "slug": "reference/empathic-voice-interface-evi/custom-voices/get-custom-voice"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_customVoices.create-custom-voice-version",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_customVoices.create-custom-voice-version",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Create new version of existing custom voice",
                          "slug": "reference/empathic-voice-interface-evi/custom-voices/create-custom-voice-version"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_customVoices.delete-custom-voice",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_customVoices.delete-custom-voice",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Delete a custom voice",
                          "slug": "reference/empathic-voice-interface-evi/custom-voices/delete-custom-voice"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_customVoices.update-custom-voice-name",
                          "type": "endpoint",
                          "method": "PATCH",
                          "endpointId": "endpoint_customVoices.update-custom-voice-name",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Update custom voice name",
                          "slug": "reference/empathic-voice-interface-evi/custom-voices/update-custom-voice-name"
                        }
                      ],
                      "title": "Custom Voices",
                      "slug": "reference/empathic-voice-interface-evi/custom-voices",
                      "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                      "pointsTo": "reference/empathic-voice-interface-evi/custom-voices/list-custom-voices"
                    },
                    {
                      "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:subpackage_configs",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_configs.list-configs",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_configs.list-configs",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "List configs",
                          "slug": "reference/empathic-voice-interface-evi/configs/list-configs"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_configs.create-config",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_configs.create-config",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Create config",
                          "slug": "reference/empathic-voice-interface-evi/configs/create-config"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_configs.list-config-versions",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_configs.list-config-versions",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "List config versions",
                          "slug": "reference/empathic-voice-interface-evi/configs/list-config-versions"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_configs.create-config-version",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_configs.create-config-version",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Create config version",
                          "slug": "reference/empathic-voice-interface-evi/configs/create-config-version"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_configs.delete-config",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_configs.delete-config",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Delete config",
                          "slug": "reference/empathic-voice-interface-evi/configs/delete-config"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_configs.update-config-name",
                          "type": "endpoint",
                          "method": "PATCH",
                          "endpointId": "endpoint_configs.update-config-name",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Update config name",
                          "slug": "reference/empathic-voice-interface-evi/configs/update-config-name"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_configs.get-config-version",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_configs.get-config-version",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Get config version",
                          "slug": "reference/empathic-voice-interface-evi/configs/get-config-version"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_configs.delete-config-version",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_configs.delete-config-version",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Delete config version",
                          "slug": "reference/empathic-voice-interface-evi/configs/delete-config-version"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_configs.update-config-description",
                          "type": "endpoint",
                          "method": "PATCH",
                          "endpointId": "endpoint_configs.update-config-description",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Update config description",
                          "slug": "reference/empathic-voice-interface-evi/configs/update-config-description"
                        }
                      ],
                      "title": "Configs",
                      "slug": "reference/empathic-voice-interface-evi/configs",
                      "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                      "pointsTo": "reference/empathic-voice-interface-evi/configs/list-configs"
                    },
                    {
                      "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:subpackage_chats",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_chats.list-chats",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_chats.list-chats",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "List chats",
                          "slug": "reference/empathic-voice-interface-evi/chats/list-chats"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_chats.list-chat-events",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_chats.list-chat-events",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "List chat events",
                          "slug": "reference/empathic-voice-interface-evi/chats/list-chat-events"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_chats.get-audio",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_chats.get-audio",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Get chat audio",
                          "slug": "reference/empathic-voice-interface-evi/chats/get-audio"
                        }
                      ],
                      "title": "Chats",
                      "slug": "reference/empathic-voice-interface-evi/chats",
                      "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                      "pointsTo": "reference/empathic-voice-interface-evi/chats/list-chats"
                    },
                    {
                      "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:subpackage_chatGroups",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_chatGroups.list-chat-groups",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_chatGroups.list-chat-groups",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "List chat_groups",
                          "slug": "reference/empathic-voice-interface-evi/chat-groups/list-chat-groups"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_chatGroups.get-chat-group",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_chatGroups.get-chat-group",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Get chat_group",
                          "slug": "reference/empathic-voice-interface-evi/chat-groups/get-chat-group"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_chatGroups.list-chat-group-events",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_chatGroups.list-chat-group-events",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "List chat events from a specific chat_group",
                          "slug": "reference/empathic-voice-interface-evi/chat-groups/list-chat-group-events"
                        },
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:endpoint_chatGroups.get-audio",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_chatGroups.get-audio",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                          "isResponseStream": false,
                          "title": "Get chat group audio",
                          "slug": "reference/empathic-voice-interface-evi/chat-groups/get-audio"
                        }
                      ],
                      "title": "Chat Groups",
                      "slug": "reference/empathic-voice-interface-evi/chat-groups",
                      "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                      "pointsTo": "reference/empathic-voice-interface-evi/chat-groups/list-chat-groups"
                    },
                    {
                      "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:subpackage_chat",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c:subpackage_chat.chat",
                          "type": "webSocket",
                          "webSocketId": "subpackage_chat.chat",
                          "title": "Chat",
                          "slug": "reference/empathic-voice-interface-evi/chat/chat",
                          "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c"
                        }
                      ],
                      "title": "Chat",
                      "slug": "reference/empathic-voice-interface-evi/chat",
                      "apiDefinitionId": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
                      "pointsTo": "reference/empathic-voice-interface-evi/chat/chat"
                    }
                  ],
                  "pointsTo": "reference/empathic-voice-interface-evi/tools/list-tools"
                }
              },
              {
                "type": "apiV2",
                "node": {
                  "id": "a14d3798-e567-4432-a6b3-2fa8a50954c7",
                  "type": "apiReference",
                  "title": "Expression Measurement API",
                  "apiDefinitionId": "a14d3798-e567-4432-a6b3-2fa8a50954c7",
                  "paginated": false,
                  "slug": "reference/expression-measurement-api",
                  "hideTitle": false,
                  "showErrors": false,
                  "children": [
                    {
                      "id": "a14d3798-e567-4432-a6b3-2fa8a50954c7:subpackage_batch",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "a14d3798-e567-4432-a6b3-2fa8a50954c7:endpoint_batch.list-jobs",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_batch.list-jobs",
                          "apiDefinitionId": "a14d3798-e567-4432-a6b3-2fa8a50954c7",
                          "isResponseStream": false,
                          "title": "List jobs",
                          "slug": "reference/expression-measurement-api/batch/list-jobs"
                        },
                        {
                          "id": "a14d3798-e567-4432-a6b3-2fa8a50954c7:endpoint_batch.start-inference-job",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_batch.start-inference-job",
                          "apiDefinitionId": "a14d3798-e567-4432-a6b3-2fa8a50954c7",
                          "isResponseStream": false,
                          "title": "Start inference job",
                          "slug": "reference/expression-measurement-api/batch/start-inference-job"
                        },
                        {
                          "id": "a14d3798-e567-4432-a6b3-2fa8a50954c7:endpoint_batch.get-job-details",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_batch.get-job-details",
                          "apiDefinitionId": "a14d3798-e567-4432-a6b3-2fa8a50954c7",
                          "isResponseStream": false,
                          "title": "Get job details",
                          "slug": "reference/expression-measurement-api/batch/get-job-details"
                        },
                        {
                          "id": "a14d3798-e567-4432-a6b3-2fa8a50954c7:endpoint_batch.get-job-predictions",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_batch.get-job-predictions",
                          "apiDefinitionId": "a14d3798-e567-4432-a6b3-2fa8a50954c7",
                          "isResponseStream": false,
                          "title": "Get job predictions",
                          "slug": "reference/expression-measurement-api/batch/get-job-predictions"
                        },
                        {
                          "id": "a14d3798-e567-4432-a6b3-2fa8a50954c7:endpoint_batch.get-job-artifacts",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_batch.get-job-artifacts",
                          "apiDefinitionId": "a14d3798-e567-4432-a6b3-2fa8a50954c7",
                          "isResponseStream": false,
                          "title": "Get job artifacts",
                          "slug": "reference/expression-measurement-api/batch/get-job-artifacts"
                        },
                        {
                          "id": "a14d3798-e567-4432-a6b3-2fa8a50954c7:endpoint_batch.start-inference-job-from-local-file",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_batch.start-inference-job-from-local-file",
                          "apiDefinitionId": "a14d3798-e567-4432-a6b3-2fa8a50954c7",
                          "isResponseStream": false,
                          "title": "Start inference job from local file",
                          "slug": "reference/expression-measurement-api/batch/start-inference-job-from-local-file"
                        }
                      ],
                      "title": "Batch",
                      "slug": "reference/expression-measurement-api/batch",
                      "apiDefinitionId": "a14d3798-e567-4432-a6b3-2fa8a50954c7",
                      "pointsTo": "reference/expression-measurement-api/batch/list-jobs"
                    },
                    {
                      "id": "a14d3798-e567-4432-a6b3-2fa8a50954c7:subpackage_stream",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "a14d3798-e567-4432-a6b3-2fa8a50954c7:subpackage_stream.Stream",
                          "type": "webSocket",
                          "webSocketId": "subpackage_stream.Stream",
                          "title": "Stream",
                          "slug": "reference/expression-measurement-api/stream/stream",
                          "apiDefinitionId": "a14d3798-e567-4432-a6b3-2fa8a50954c7"
                        }
                      ],
                      "title": "Stream",
                      "slug": "reference/expression-measurement-api/stream",
                      "apiDefinitionId": "a14d3798-e567-4432-a6b3-2fa8a50954c7",
                      "pointsTo": "reference/expression-measurement-api/stream/stream"
                    }
                  ],
                  "pointsTo": "reference/expression-measurement-api/batch/list-jobs"
                }
              },
              {
                "type": "apiV2",
                "node": {
                  "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                  "type": "apiReference",
                  "title": "Custom Models API",
                  "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                  "paginated": false,
                  "slug": "reference/custom-models-api",
                  "hideTitle": false,
                  "showErrors": false,
                  "children": [
                    {
                      "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:subpackage_files",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_files.list-files",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_files.list-files",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "List files",
                          "slug": "reference/custom-models-api/files/list-files"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_files.create-files",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_files.create-files",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Create files",
                          "slug": "reference/custom-models-api/files/create-files"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_files.upload-file",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_files.upload-file",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Upload file",
                          "slug": "reference/custom-models-api/files/upload-file"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_files.get-file",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_files.get-file",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Get file",
                          "slug": "reference/custom-models-api/files/get-file"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_files.delete-file",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_files.delete-file",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Delete file",
                          "slug": "reference/custom-models-api/files/delete-file"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_files.update-file-name",
                          "type": "endpoint",
                          "method": "PATCH",
                          "endpointId": "endpoint_files.update-file-name",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Update file name",
                          "slug": "reference/custom-models-api/files/update-file-name"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_files.get-file-predictions",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_files.get-file-predictions",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Get file predictions",
                          "slug": "reference/custom-models-api/files/get-file-predictions"
                        }
                      ],
                      "title": "Files",
                      "slug": "reference/custom-models-api/files",
                      "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                      "pointsTo": "reference/custom-models-api/files/list-files"
                    },
                    {
                      "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:subpackage_datasets",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_datasets.list-datasets",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_datasets.list-datasets",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "List datasets",
                          "slug": "reference/custom-models-api/datasets/list-datasets"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_datasets.create-dataset",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_datasets.create-dataset",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Create dataset",
                          "slug": "reference/custom-models-api/datasets/create-dataset"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_datasets.get-dataset",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_datasets.get-dataset",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Get dataset",
                          "slug": "reference/custom-models-api/datasets/get-dataset"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_datasets.create-dataset-version",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_datasets.create-dataset-version",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Create dataset version",
                          "slug": "reference/custom-models-api/datasets/create-dataset-version"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_datasets.delete-dataset",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_datasets.delete-dataset",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Delete dataset",
                          "slug": "reference/custom-models-api/datasets/delete-dataset"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_datasets.list-dataset-versions",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_datasets.list-dataset-versions",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "List dataset versions",
                          "slug": "reference/custom-models-api/datasets/list-dataset-versions"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_datasets.list-dataset-files",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_datasets.list-dataset-files",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "List dataset files",
                          "slug": "reference/custom-models-api/datasets/list-dataset-files"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_datasets.get-dataset-version",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_datasets.get-dataset-version",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Get dataset version",
                          "slug": "reference/custom-models-api/datasets/get-dataset-version"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_datasets.list-dataset-version-files",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_datasets.list-dataset-version-files",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "List dataset version files",
                          "slug": "reference/custom-models-api/datasets/list-dataset-version-files"
                        }
                      ],
                      "title": "Datasets",
                      "slug": "reference/custom-models-api/datasets",
                      "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                      "pointsTo": "reference/custom-models-api/datasets/list-datasets"
                    },
                    {
                      "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:subpackage_models",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_models.list-models",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_models.list-models",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "List models",
                          "slug": "reference/custom-models-api/models/list-models"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_models.get-model-details",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_models.get-model-details",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Get model details",
                          "slug": "reference/custom-models-api/models/get-model-details"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_models.update-model-name",
                          "type": "endpoint",
                          "method": "PATCH",
                          "endpointId": "endpoint_models.update-model-name",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Update model name",
                          "slug": "reference/custom-models-api/models/update-model-name"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_models.list-model-versions",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_models.list-model-versions",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "List model versions",
                          "slug": "reference/custom-models-api/models/list-model-versions"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_models.get-model-version",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_models.get-model-version",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Get model version",
                          "slug": "reference/custom-models-api/models/get-model-version"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_models.update-model-description",
                          "type": "endpoint",
                          "method": "PATCH",
                          "endpointId": "endpoint_models.update-model-description",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Update model description",
                          "slug": "reference/custom-models-api/models/update-model-description"
                        }
                      ],
                      "title": "Models",
                      "slug": "reference/custom-models-api/models",
                      "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                      "pointsTo": "reference/custom-models-api/models/list-models"
                    },
                    {
                      "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:subpackage_jobs",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_jobs.start-training-job",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_jobs.start-training-job",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Start training job",
                          "slug": "reference/custom-models-api/jobs/start-training-job"
                        },
                        {
                          "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256:endpoint_jobs.start-custom-models-inference-job",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_jobs.start-custom-models-inference-job",
                          "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                          "isResponseStream": false,
                          "title": "Start custom models inference job",
                          "slug": "reference/custom-models-api/jobs/start-custom-models-inference-job"
                        }
                      ],
                      "title": "Jobs",
                      "slug": "reference/custom-models-api/jobs",
                      "apiDefinitionId": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
                      "pointsTo": "reference/custom-models-api/jobs/start-training-job"
                    }
                  ],
                  "pointsTo": "reference/custom-models-api/files/list-files"
                }
              }
            ],
            "urlSlugOverride": "reference",
            "urlSlug": "reference",
            "skipUrlSlug": false
          },
          {
            "type": "group",
            "title": "Changelog",
            "icon": "fa-regular fa-clock",
            "items": [
              {
                "type": "page",
                "id": "docs/changelog/2024.mdx",
                "title": "Changelog",
                "urlSlug": "changelog",
                "fullSlug": ["changelog"],
                "hidden": false
              }
            ],
            "urlSlugOverride": "changelog",
            "urlSlug": "changelog",
            "skipUrlSlug": false
          },
          {
            "type": "link",
            "title": "Discord",
            "icon": "fa-brands fa-discord",
            "url": "https://discord.gg/humeai"
          }
        ]
      },
      "logoHeight": 30,
      "logoHref": "/intro",
      "colorsV3": {
        "type": "darkAndLight",
        "light": {
          "accentPrimary": {
            "r": 153,
            "g": 144,
            "b": 135,
            "a": 1
          },
          "logo": "788f49cc-c843-40d2-9823-96bf76cff63a",
          "background": {
            "type": "solid",
            "r": 255,
            "g": 244,
            "b": 232,
            "a": 1
          },
          "border": {
            "r": 229,
            "g": 218,
            "b": 206,
            "a": 1
          },
          "cardBackground": {
            "r": 255,
            "g": 249,
            "b": 242,
            "a": 1
          },
          "sidebarBackground": {
            "r": 255,
            "g": 249,
            "b": 242,
            "a": 1
          },
          "headerBackground": {
            "r": 255,
            "g": 249,
            "b": 242,
            "a": 1
          }
        },
        "dark": {
          "accentPrimary": {
            "r": 255,
            "g": 244,
            "b": 232,
            "a": 1
          },
          "logo": "edb7f379-635a-4178-8cc2-285e5b9cfa72",
          "background": {
            "type": "solid",
            "r": 53,
            "g": 53,
            "b": 53,
            "a": 1
          },
          "cardBackground": {
            "r": 35,
            "g": 35,
            "b": 35,
            "a": 1
          },
          "sidebarBackground": {
            "r": 35,
            "g": 35,
            "b": 35,
            "a": 1
          },
          "headerBackground": {
            "r": 35,
            "g": 35,
            "b": 35,
            "a": 1
          }
        }
      },
      "navbarLinks": [
        {
          "type": "secondary",
          "text": "Get support",
          "url": "/support"
        },
        {
          "type": "primary",
          "text": "Login",
          "url": "https://platform.hume.ai/log-in"
        }
      ],
      "title": "Hume API",
      "favicon": "e6f3e161-b538-44b2-802a-0fdae539fc59",
      "typographyV2": {
        "headingsFont": {
          "type": "custom",
          "name": "Fellix",
          "variants": [
            {
              "fontFile": "bd309bb6-6bf9-4c63-83f0-8889a34f84a3",
              "weight": ["500"],
              "style": ["normal"]
            }
          ]
        },
        "bodyFont": {
          "type": "custom",
          "name": "Fellix",
          "variants": [
            {
              "fontFile": "6ff560d9-33d8-4d91-9429-c1ac24d8e49a",
              "weight": ["400"]
            },
            {
              "fontFile": "bd309bb6-6bf9-4c63-83f0-8889a34f84a3",
              "weight": ["500"]
            },
            {
              "fontFile": "ae634f55-9d56-4bbc-a617-f4fb07f78023",
              "weight": ["600"]
            }
          ]
        },
        "codeFont": {
          "type": "custom",
          "name": "Fraktion",
          "variants": [
            {
              "fontFile": "eff7f3bd-a1a6-4d2c-aa0b-4ef43973b7bd",
              "weight": ["400"],
              "style": ["normal"]
            },
            {
              "fontFile": "f09f096b-a4f9-4206-962f-abd5cf5c9f89",
              "weight": ["500", "600"],
              "style": ["normal"]
            }
          ]
        }
      },
      "layout": {
        "pageWidth": {
          "type": "full"
        },
        "contentWidth": {
          "type": "rem",
          "value": 40
        },
        "searchbarPlacement": "SIDEBAR",
        "tabsPlacement": "SIDEBAR",
        "contentAlignment": "CENTER",
        "headerPosition": "FIXED",
        "disableHeader": true
      },
      "js": {
        "files": []
      },
      "redirects": [
        {
          "source": "/streaming-api-tutorial",
          "destination": "/docs/expression-measurement-api/websocket"
        },
        {
          "source": "/docs/support",
          "destination": "/support"
        },
        {
          "source": "/streaming-api-error-codes",
          "destination": "/docs/resources/errors"
        }
      ],
      "integrations": {},
      "analyticsConfig": {
        "posthog": {
          "apiKey": "phc_gyQAKFg45HN6MLywaNaDGJ5TNkByCVjX0PXBOoawh7Q",
          "endpoint": "https://us.i.posthog.com"
        }
      }
    },
    "apis": {
      "869ccf90-2c73-42af-9c3f-94ddd28c5256": {
        "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
        "rootPackage": {
          "endpoints": [],
          "subpackages": ["subpackage_files", "subpackage_datasets", "subpackage_models", "subpackage_jobs"],
          "types": [
            "type_:AttributeFilter",
            "type_:FileInput",
            "type_:FileWithAttributesInput",
            "type_:AuthorizedFile",
            "type_:FileWithAttributes",
            "type_:Unit",
            "type_:DatasetVersionFeatureTypesValue",
            "type_:DatasetVersion",
            "type_:ReturnDataset",
            "type_:DatasetLabelsFileUriInputFeatureTypesValue",
            "type_:DatasetLabelsFileUriInput",
            "type_:ExternalModel",
            "type_:ExternalModelVersionFileType",
            "type_:ExternalModelVersion",
            "type_:ExternalModelVersionTag",
            "type_:ModelPage",
            "type_:PageableObject",
            "type_:SortObject",
            "type_:JsonObject",
            "type_:FilePage",
            "type_:DatasetPage",
            "type_:DatasetVersionPage",
            "type_:DatasetLabels",
            "type_:Alternative",
            "type_:Bcp47Tag",
            "type_:BoundingBox",
            "type_:BurstPrediction",
            "type_:Classification",
            "type_:CompletedEmbeddingGeneration",
            "type_:CompletedInference",
            "type_:CompletedTlInference",
            "type_:CompletedTraining",
            "type_:CustomModelPrediction",
            "type_:CustomModelRequest",
            "type_:Dataset",
            "type_:DatasetId",
            "type_:DatasetVersionId",
            "type_:DescriptionsScore",
            "type_:Direction",
            "type_:EmbeddingGenerationBaseRequest",
            "type_:EmotionScore",
            "type_:Error",
            "type_:EvaluationArgs",
            "type_:Face",
            "type_:FacePrediction",
            "type_:FacemeshPrediction",
            "type_:FacsScore",
            "type_:Failed",
            "type_:File",
            "type_:Granularity",
            "type_:GroupedPredictionsBurstPrediction",
            "type_:GroupedPredictionsFacePrediction",
            "type_:GroupedPredictionsFacemeshPrediction",
            "type_:GroupedPredictionsLanguagePrediction",
            "type_:GroupedPredictionsNerPrediction",
            "type_:GroupedPredictionsProsodyPrediction",
            "type_:InProgress",
            "type_:InferenceBaseRequest",
            "type_:InferencePrediction",
            "type_:InferenceRequest",
            "type_:InferenceResults",
            "type_:InferenceSourcePredictResult",
            "type_:JobEmbeddingGeneration",
            "type_:JobInference",
            "type_:JobTlInference",
            "type_:JobTraining",
            "type_:JobId",
            "type_:Language",
            "type_:LanguagePrediction",
            "type_:Models",
            "type_:ModelsPredictions",
            "type_:Ner",
            "type_:NerPrediction",
            "type_:Null",
            "type_:PositionInterval",
            "type_:PredictionsOptionalNullBurstPrediction",
            "type_:PredictionsOptionalNullFacePrediction",
            "type_:PredictionsOptionalNullFacemeshPrediction",
            "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction",
            "type_:PredictionsOptionalTranscriptionMetadataNerPrediction",
            "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction",
            "type_:Prosody",
            "type_:ProsodyPrediction",
            "type_:Queued",
            "type_:RegistryFileDetail",
            "type_:Regression",
            "type_:SentimentScore",
            "type_:SortBy",
            "type_:Source",
            "type_:SourceFile",
            "type_:SourceTextSource",
            "type_:SourceUrl",
            "type_:Url",
            "type_:StateEmbeddingGeneration",
            "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration",
            "type_:StateEmbeddingGenerationFailed",
            "type_:StateEmbeddingGenerationInProgress",
            "type_:StateEmbeddingGenerationQueued",
            "type_:StateInference",
            "type_:StateInferenceCompletedInference",
            "type_:StateInferenceFailed",
            "type_:StateInferenceInProgress",
            "type_:StateInferenceQueued",
            "type_:StateTlInference",
            "type_:StateTlInferenceCompletedTlInference",
            "type_:StateTlInferenceFailed",
            "type_:StateTlInferenceInProgress",
            "type_:StateTlInferenceQueued",
            "type_:StateTraining",
            "type_:StateTrainingCompletedTraining",
            "type_:StateTrainingFailed",
            "type_:StateTrainingInProgress",
            "type_:StateTrainingQueued",
            "type_:Status",
            "type_:TlInferencePrediction",
            "type_:TlInferenceResults",
            "type_:TlInferenceSourcePredictResult",
            "type_:Tag",
            "type_:Target",
            "type_:Task",
            "type_:TaskClassification",
            "type_:TaskRegression",
            "type_:TextSource",
            "type_:TimeInterval",
            "type_:TlInferenceBaseRequest",
            "type_:CustomModel",
            "type_:CustomModelId",
            "type_:CustomModelVersionId",
            "type_:ToxicityScore",
            "type_:TrainingBaseRequest",
            "type_:TrainingCustomModel",
            "type_:Transcription",
            "type_:TranscriptionMetadata",
            "type_:Type",
            "type_:Unconfigurable",
            "type_:UnionJob",
            "type_:UnionJobJobEmbeddingGeneration",
            "type_:UnionJobJobInference",
            "type_:UnionJobJobTlInference",
            "type_:UnionJobJobTraining",
            "type_:UnionPredictResult",
            "type_:ValidationArgs",
            "type_:When",
            "type_:Window"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_:AttributeFilter": {
            "description": "List of Attributes",
            "name": "AttributeFilter",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Attribute name (key)",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Attribute description (value)",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:FileInput": {
            "description": "File details",
            "name": "FileInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File name",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File URI",
                  "key": "uri",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Flag which denotes whether the file is stored with Hume",
                  "key": "hume_storage",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                {
                  "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh",
                  "key": "data_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:FileWithAttributesInput": {
            "name": "FileWithAttributesInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "file",
                  "valueType": {
                    "type": "id",
                    "value": "type_:FileInput"
                  }
                },
                {
                  "description": "List of Attributes",
                  "key": "attributes",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:AttributeFilter"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:AuthorizedFile": {
            "description": "File details",
            "name": "AuthorizedFile",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated File ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File name",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "File URI",
                  "key": "uri",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "File upload URI",
                  "key": "upload_uri",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "File thumbnail URI",
                  "key": "thumbnail_uri",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Hume-generated User ID",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh",
                  "key": "data_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "description": "Updated date and time",
                  "key": "modified_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "description": "Additional details as key, value pairs",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "map",
                        "keyType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        },
                        "valueType": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Flag which denotes whether the file is stored with Hume",
                  "key": "hume_storage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "description": "Timestamp denoting when the file was uploaded to Hume",
                  "key": "hume_storage_upload_timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "description": "Indicates whether this file has been sanitized for sharing",
                  "key": "is_sanitized",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                {
                  "description": "Indicates whether this file is owned by the current file reader",
                  "key": "is_owned_by_reader",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                {
                  "description": "Indicates whether this file is linked to a model that is publicly shared",
                  "key": "is_linked_to_publicly_shared",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "description": "Indicates whether this file is linked to a Hume-owned model that is publicly shared",
                  "key": "is_linked_to_hume_model",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:FileWithAttributes": {
            "name": "FileWithAttributes",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "file",
                  "valueType": {
                    "type": "id",
                    "value": "type_:AuthorizedFile"
                  }
                },
                {
                  "description": "List of Attributes",
                  "key": "attributes",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:AttributeFilter"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Unit": {
            "name": "Unit",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:DatasetVersionFeatureTypesValue": {
            "description": "Feature types of label mapped to feature type",
            "name": "DatasetVersionFeatureTypesValue",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CATEGORICAL"
                },
                {
                  "value": "NUMERIC"
                },
                {
                  "value": "TEXT"
                },
                {
                  "value": "DATETIME"
                },
                {
                  "value": "UNDEFINED"
                }
              ]
            }
          },
          "type_:DatasetVersion": {
            "name": "DatasetVersion",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Dataset version ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated User ID",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Dataset Labels file URI",
                  "key": "labels_file_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Feature types of label mapped to feature type",
                  "key": "feature_types",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "id",
                      "value": "type_:DatasetVersionFeatureTypesValue"
                    }
                  }
                },
                {
                  "description": "Hume-generated Dataset ID of the parent Dataset",
                  "key": "dataset_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Dataset version number",
                  "key": "dataset_version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnDataset": {
            "name": "ReturnDataset",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Dataset ID",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Dataset name",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "latest_version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DatasetVersion"
                    }
                  }
                },
                {
                  "description": "Updated date and time",
                  "key": "modified_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Additional details as key, value pairs",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "map",
                        "keyType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        },
                        "valueType": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:DatasetLabelsFileUriInputFeatureTypesValue": {
            "description": "Feature types as key, value pairs",
            "name": "DatasetLabelsFileUriInputFeatureTypesValue",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CATEGORICAL"
                },
                {
                  "value": "NUMERIC"
                },
                {
                  "value": "TEXT"
                },
                {
                  "value": "DATETIME"
                },
                {
                  "value": "UNDEFINED"
                }
              ]
            }
          },
          "type_:DatasetLabelsFileUriInput": {
            "name": "DatasetLabelsFileUriInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Dataset name",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URI of a Labels File",
                  "key": "labels_file_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Feature types as key, value pairs",
                  "key": "feature_types",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "id",
                      "value": "type_:DatasetLabelsFileUriInputFeatureTypesValue"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ExternalModel": {
            "name": "ExternalModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Model ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Model name",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "Updated date and time",
                  "key": "modified_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "Total stars on this model",
                  "key": "total_stars",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "Model is starred by this user",
                  "key": "model_is_starred_by_user",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                {
                  "description": "Model is archived.",
                  "key": "archived",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                {
                  "key": "latest_version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ExternalModelVersion"
                    }
                  }
                },
                {
                  "description": "Model is shared publicly",
                  "key": "is_publicly_shared",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ExternalModelVersionFileType": {
            "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh",
            "name": "ExternalModelVersionFileType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "video"
                },
                {
                  "value": "audio"
                },
                {
                  "value": "video_no_audio"
                },
                {
                  "value": "image"
                },
                {
                  "value": "text"
                },
                {
                  "value": "mediapipe_facemesh"
                }
              ]
            }
          },
          "type_:ExternalModelVersion": {
            "description": "Latest Model version number",
            "name": "ExternalModelVersion",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Model version ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated Model ID of the parent Model",
                  "key": "model_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated User ID",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Model version number",
                  "key": "version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Model version's source file URI",
                  "key": "source_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated Dataset version ID for the Dataset version the Model version was trained on",
                  "key": "dataset_version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "Additional details as key, value pairs",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "map",
                        "keyType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        },
                        "valueType": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Model version description",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "List of Tags associated with the Model version",
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ExternalModelVersionTag"
                      }
                    }
                  }
                },
                {
                  "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh",
                  "key": "file_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ExternalModelVersionFileType"
                    }
                  }
                },
                {
                  "description": "Target feature, the feature the model was trained against",
                  "key": "target_feature",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Type of the task used to train",
                  "key": "task_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the batch training job",
                  "key": "training_job_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ExternalModelVersionTag": {
            "description": "List of Tags associated with the Model version",
            "name": "ExternalModelVersionTag",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Tag name (key)",
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Tag description (value)",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ModelPage": {
            "name": "ModelPage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ExternalModel"
                      }
                    }
                  }
                },
                {
                  "key": "pageable",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PageableObject"
                    }
                  }
                },
                {
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "key": "last",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "key": "total_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "key": "total_pages",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "first",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "key": "number_of_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PageableObject": {
            "name": "PageableObject",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "offset",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "paged",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "key": "unpaged",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "key": "page_number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "page_size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:SortObject": {
            "name": "SortObject",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "key": "sorted",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "key": "unsorted",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:JsonObject": {
            "name": "JsonObject",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:FilePage": {
            "name": "FilePage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FileWithAttributes"
                      }
                    }
                  }
                },
                {
                  "key": "pageable",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PageableObject"
                    }
                  }
                },
                {
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "key": "last",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "key": "total_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "key": "total_pages",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "first",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "key": "number_of_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:DatasetPage": {
            "name": "DatasetPage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnDataset"
                      }
                    }
                  }
                },
                {
                  "key": "pageable",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PageableObject"
                    }
                  }
                },
                {
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "key": "last",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "key": "total_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "key": "total_pages",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "first",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "key": "number_of_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:DatasetVersionPage": {
            "name": "DatasetVersionPage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DatasetVersion"
                      }
                    }
                  }
                },
                {
                  "key": "pageable",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PageableObject"
                    }
                  }
                },
                {
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "key": "last",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "key": "total_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "key": "total_pages",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "first",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "key": "number_of_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:DatasetLabels": {
            "name": "DatasetLabels",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Dataset version ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated User ID",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Dataset Labels file URI",
                  "key": "labels_file_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Feature types json file URI",
                  "key": "feature_type_json_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated Dataset ID",
                  "key": "dataset_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Dataset version number",
                  "key": "dataset_version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "Boolean indicating that this is the most recent version",
                  "key": "is_most_recent_version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Alternative": {
            "name": "Alternative",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "language_only"
                }
              }
            }
          },
          "type_:Bcp47Tag": {
            "name": "Bcp47Tag",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "zh"
                },
                {
                  "value": "da"
                },
                {
                  "value": "nl"
                },
                {
                  "value": "en"
                },
                {
                  "value": "en-AU"
                },
                {
                  "value": "en-IN"
                },
                {
                  "value": "en-NZ"
                },
                {
                  "value": "en-GB"
                },
                {
                  "value": "fr"
                },
                {
                  "value": "fr-CA"
                },
                {
                  "value": "de"
                },
                {
                  "value": "hi"
                },
                {
                  "value": "hi-Latn"
                },
                {
                  "value": "id"
                },
                {
                  "value": "it"
                },
                {
                  "value": "ja"
                },
                {
                  "value": "ko"
                },
                {
                  "value": "no"
                },
                {
                  "value": "pl"
                },
                {
                  "value": "pt"
                },
                {
                  "value": "pt-BR"
                },
                {
                  "value": "pt-PT"
                },
                {
                  "value": "ru"
                },
                {
                  "value": "es"
                },
                {
                  "value": "es-419"
                },
                {
                  "value": "sv"
                },
                {
                  "value": "ta"
                },
                {
                  "value": "tr"
                },
                {
                  "value": "uk"
                }
              ]
            }
          },
          "type_:BoundingBox": {
            "description": "A bounding box around a face.",
            "name": "BoundingBox",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "x-coordinate of bounding box top left corner.",
                  "key": "x",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "y-coordinate of bounding box top left corner.",
                  "key": "y",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Bounding box width.",
                  "key": "w",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Bounding box height.",
                  "key": "h",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:BurstPrediction": {
            "name": "BurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "time",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TimeInterval"
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "Modality-specific descriptive features and their scores.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DescriptionsScore"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Classification": {
            "name": "Classification",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:CompletedEmbeddingGeneration": {
            "name": "CompletedEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:CompletedInference": {
            "name": "CompletedInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "The number of predictions that were generated by this job.",
                  "key": "num_predictions",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uint64"
                    }
                  }
                },
                {
                  "description": "The number of errors that occurred while running this job.",
                  "key": "num_errors",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uint64"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:CompletedTlInference": {
            "name": "CompletedTlInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "The number of predictions that were generated by this job.",
                  "key": "num_predictions",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uint64"
                    }
                  }
                },
                {
                  "description": "The number of errors that occurred while running this job.",
                  "key": "num_errors",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uint64"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:CompletedTraining": {
            "name": "CompletedTraining",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TrainingCustomModel"
                  }
                },
                {
                  "key": "alternatives",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "id",
                        "value": "type_:TrainingCustomModel"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:CustomModelPrediction": {
            "name": "CustomModelPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "output",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "error",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "task_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:CustomModelRequest": {
            "name": "CustomModelRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Tag"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Dataset": {
            "name": "Dataset",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:DatasetId"
                  },
                  "displayName": "Dataset ID"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:DatasetVersionId"
                  },
                  "displayName": "Dataset Version ID"
                }
              ]
            }
          },
          "type_:DatasetId": {
            "name": "DatasetId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:DatasetVersionId": {
            "name": "DatasetVersionId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:DescriptionsScore": {
            "name": "DescriptionsScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the descriptive feature being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the descriptive feature being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Direction": {
            "name": "Direction",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "asc"
                },
                {
                  "value": "desc"
                }
              ]
            }
          },
          "type_:EmbeddingGenerationBaseRequest": {
            "name": "EmbeddingGenerationBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File ID and File URL pairs for an asset registry file",
                  "key": "registry_file_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:RegistryFileDetail"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:EmotionScore": {
            "name": "EmotionScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the emotion being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the emotion being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Error": {
            "name": "Error",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An error message.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:EvaluationArgs": {
            "name": "EvaluationArgs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "validation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ValidationArgs"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Face": {
            "name": "Face",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Number of frames per second to process. Other frames will be omitted from the response. Set to `0` to process every frame.",
                  "key": "fps_pred",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                },
                {
                  "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response.",
                  "key": "prob_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.99
                      }
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for faces across frames. If `true`, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If `false`, all faces will be tagged with an `unknown` ID.",
                  "key": "identify_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response.",
                  "key": "min_face_size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "uint64"
                      }
                    }
                  }
                },
                {
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "description": "Whether to extract and save the detected faces in the artifacts zip created by each job.",
                  "key": "save_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:FacePrediction": {
            "name": "FacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Frame number",
                  "key": "frame",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uint64"
                    }
                  }
                },
                {
                  "description": "Time in seconds when face detection occurred.",
                  "key": "time",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "The predicted probability that a detected face was actually a face.",
                  "key": "prob",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "box",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BoundingBox"
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "FACS 2.0 features and their scores.",
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FacsScore"
                      }
                    }
                  }
                },
                {
                  "description": "Modality-specific descriptive features and their scores.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DescriptionsScore"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:FacemeshPrediction": {
            "name": "FacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:FacsScore": {
            "name": "FacsScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the FACS 2.0 feature being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the FACS 2.0 feature being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Failed": {
            "name": "Failed",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:File": {
            "name": "File",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the file.",
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The content type of the file.",
                  "key": "content_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The MD5 checksum of the file.",
                  "key": "md5sum",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Granularity": {
            "description": "The granularity at which to generate predictions. `utterance` corresponds to a natural pause or break in conversation, while `conversational_turn` corresponds to a change in speaker.",
            "name": "Granularity",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "word"
                },
                {
                  "value": "sentence"
                },
                {
                  "value": "utterance"
                },
                {
                  "value": "conversational_turn"
                }
              ]
            }
          },
          "type_:GroupedPredictionsBurstPrediction": {
            "name": "GroupedPredictionsBurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BurstPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:GroupedPredictionsFacePrediction": {
            "name": "GroupedPredictionsFacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FacePrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:GroupedPredictionsFacemeshPrediction": {
            "name": "GroupedPredictionsFacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FacemeshPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:GroupedPredictionsLanguagePrediction": {
            "name": "GroupedPredictionsLanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:LanguagePrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:GroupedPredictionsNerPrediction": {
            "name": "GroupedPredictionsNerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NerPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:GroupedPredictionsProsodyPrediction": {
            "name": "GroupedPredictionsProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProsodyPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:InProgress": {
            "name": "InProgress",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:InferenceBaseRequest": {
            "name": "InferenceBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Models"
                    }
                  }
                },
                {
                  "key": "transcription",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Transcription"
                    }
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Text to supply directly to our language and NER models.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:InferencePrediction": {
            "name": "InferencePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "models",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ModelsPredictions"
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:InferenceRequest": {
            "name": "InferenceRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Models"
                    }
                  }
                },
                {
                  "key": "transcription",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Transcription"
                    }
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Text to supply directly to our language and NER models.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "key": "files",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:File"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:InferenceResults": {
            "name": "InferenceResults",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:InferencePrediction"
                    }
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Error"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:InferenceSourcePredictResult": {
            "name": "InferenceSourcePredictResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Source"
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:InferenceResults"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:JobEmbeddingGeneration": {
            "name": "JobEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EmbeddingGenerationBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateEmbeddingGeneration"
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:JobInference": {
            "name": "JobInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:InferenceRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateInference"
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:JobTlInference": {
            "name": "JobTlInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TlInferenceBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateTlInference"
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:JobTraining": {
            "name": "JobTraining",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TrainingBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateTraining"
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:JobId": {
            "name": "JobId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the started job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Language": {
            "name": "Language",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Granularity"
                    }
                  }
                },
                {
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:LanguagePrediction": {
            "name": "LanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PositionInterval"
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TimeInterval"
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from `1` (negative) to `9` (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of `5`. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of `5`. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level.",
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SentimentScore"
                      }
                    }
                  }
                },
                {
                  "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: `toxic`, `severe_toxic`, `obscene`, `threat`, `insult`, and `identity_hate`.",
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ToxicityScore"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Models": {
            "name": "Models",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Face"
                    }
                  }
                },
                {
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Prosody"
                    }
                  }
                },
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Language"
                    }
                  }
                },
                {
                  "key": "ner",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Ner"
                    }
                  }
                },
                {
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ModelsPredictions": {
            "name": "ModelsPredictions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullFacePrediction"
                    }
                  }
                },
                {
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullBurstPrediction"
                    }
                  }
                },
                {
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction"
                    }
                  }
                },
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction"
                    }
                  }
                },
                {
                  "key": "ner",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataNerPrediction"
                    }
                  }
                },
                {
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullFacemeshPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Ner": {
            "name": "Ner",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:NerPrediction": {
            "name": "NerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The recognized topic or entity.",
                  "key": "entity",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PositionInterval"
                  }
                },
                {
                  "description": "Our NER model's relative confidence in the recognized topic or entity.",
                  "key": "entity_confidence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "A measure of how often the entity is linked to by other entities.",
                  "key": "support",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "A URL which provides more information about the recognized topic or entity.",
                  "key": "uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The specific word to which the emotion predictions are linked.",
                  "key": "link_word",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TimeInterval"
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Null": {
            "description": "No associated metadata for this model. Value will be `null`.",
            "name": "Null",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:PositionInterval": {
            "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
            "name": "PositionInterval",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The index of the first character in the text segment, inclusive.",
                  "key": "begin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uint64"
                    }
                  }
                },
                {
                  "description": "The index of the last character in the text segment, exclusive.",
                  "key": "end",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uint64"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PredictionsOptionalNullBurstPrediction": {
            "name": "PredictionsOptionalNullBurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsBurstPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PredictionsOptionalNullFacePrediction": {
            "name": "PredictionsOptionalNullFacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsFacePrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PredictionsOptionalNullFacemeshPrediction": {
            "name": "PredictionsOptionalNullFacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsFacemeshPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataLanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsLanguagePrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataNerPrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataNerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsNerPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsProsodyPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Prosody": {
            "name": "Prosody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Granularity"
                    }
                  }
                },
                {
                  "key": "window",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Window"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ProsodyPrediction": {
            "name": "ProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TimeInterval"
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Queued": {
            "name": "Queued",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:RegistryFileDetail": {
            "name": "RegistryFileDetail",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File ID in the Asset Registry",
                  "key": "file_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL to the file in the Asset Registry",
                  "key": "file_url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Regression": {
            "name": "Regression",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:SentimentScore": {
            "name": "SentimentScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Level of sentiment, ranging from `1` (negative) to `9` (positive)",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Prediction for this level of sentiment",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:SortBy": {
            "name": "SortBy",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "created"
                },
                {
                  "value": "started"
                },
                {
                  "value": "ended"
                }
              ]
            }
          },
          "type_:Source": {
            "name": "Source",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "url",
                  "additionalProperties": {
                    "extends": ["type_:SourceUrl"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "file",
                  "additionalProperties": {
                    "extends": ["type_:SourceFile"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text",
                  "additionalProperties": {
                    "extends": ["type_:SourceTextSource"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:SourceFile": {
            "name": "SourceFile",
            "shape": {
              "type": "object",
              "extends": ["type_:File"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:SourceTextSource": {
            "name": "SourceTextSource",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:SourceUrl": {
            "name": "SourceUrl",
            "shape": {
              "type": "object",
              "extends": ["type_:Url"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Url": {
            "name": "Url",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The URL of the source media file.",
                  "key": "url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateEmbeddingGeneration": {
            "name": "StateEmbeddingGeneration",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationCompletedEmbeddingGeneration"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration": {
            "name": "StateEmbeddingGenerationCompletedEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedEmbeddingGeneration"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateEmbeddingGenerationFailed": {
            "name": "StateEmbeddingGenerationFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateEmbeddingGenerationInProgress": {
            "name": "StateEmbeddingGenerationInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateEmbeddingGenerationQueued": {
            "name": "StateEmbeddingGenerationQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateInference": {
            "name": "StateInference",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceCompletedInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateInferenceCompletedInference": {
            "name": "StateInferenceCompletedInference",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedInference"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateInferenceFailed": {
            "name": "StateInferenceFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateInferenceInProgress": {
            "name": "StateInferenceInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateInferenceQueued": {
            "name": "StateInferenceQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateTlInference": {
            "name": "StateTlInference",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceCompletedTlInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateTlInferenceCompletedTlInference": {
            "name": "StateTlInferenceCompletedTlInference",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedTlInference"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateTlInferenceFailed": {
            "name": "StateTlInferenceFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateTlInferenceInProgress": {
            "name": "StateTlInferenceInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateTlInferenceQueued": {
            "name": "StateTlInferenceQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateTraining": {
            "name": "StateTraining",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingCompletedTraining"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateTrainingCompletedTraining": {
            "name": "StateTrainingCompletedTraining",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedTraining"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateTrainingFailed": {
            "name": "StateTrainingFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateTrainingInProgress": {
            "name": "StateTrainingInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:StateTrainingQueued": {
            "name": "StateTrainingQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Status": {
            "name": "Status",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "QUEUED"
                },
                {
                  "value": "IN_PROGRESS"
                },
                {
                  "value": "COMPLETED"
                },
                {
                  "value": "FAILED"
                }
              ]
            }
          },
          "type_:TlInferencePrediction": {
            "name": "TlInferencePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "file_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "custom_models",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "id",
                      "value": "type_:CustomModelPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:TlInferenceResults": {
            "name": "TlInferenceResults",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TlInferencePrediction"
                    }
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Error"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:TlInferenceSourcePredictResult": {
            "name": "TlInferenceSourcePredictResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Source"
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TlInferenceResults"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Tag": {
            "name": "Tag",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Target": {
            "name": "Target",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Task": {
            "name": "Task",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "classification",
                  "additionalProperties": {
                    "extends": ["type_:TaskClassification"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "regression",
                  "additionalProperties": {
                    "extends": ["type_:TaskRegression"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:TaskClassification": {
            "name": "TaskClassification",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:TaskRegression": {
            "name": "TaskRegression",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:TextSource": {
            "name": "TextSource",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:TimeInterval": {
            "description": "A time range with a beginning and end, measured in seconds.",
            "name": "TimeInterval",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Beginning of time range in seconds.",
                  "key": "begin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "End of time range in seconds.",
                  "key": "end",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:TlInferenceBaseRequest": {
            "name": "TlInferenceBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CustomModel"
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:CustomModel": {
            "name": "CustomModel",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:CustomModelId"
                  },
                  "displayName": "Custom Model ID"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:CustomModelVersionId"
                  },
                  "displayName": "Custom Model Version ID"
                }
              ]
            }
          },
          "type_:CustomModelId": {
            "name": "CustomModelId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:CustomModelVersionId": {
            "name": "CustomModelVersionId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ToxicityScore": {
            "name": "ToxicityScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Category of toxicity.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Prediction for this category of toxicity",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:TrainingBaseRequest": {
            "name": "TrainingBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CustomModelRequest"
                  }
                },
                {
                  "key": "dataset",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Dataset"
                  }
                },
                {
                  "key": "target_feature",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "label"
                      }
                    }
                  }
                },
                {
                  "key": "task",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Task"
                    }
                  }
                },
                {
                  "key": "evaluation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EvaluationArgs"
                    }
                  }
                },
                {
                  "key": "alternatives",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Alternative"
                      }
                    }
                  }
                },
                {
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:TrainingCustomModel": {
            "name": "TrainingCustomModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Transcription": {
            "name": "Transcription",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Bcp47Tag"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "description": "Transcript confidence threshold. Transcripts generated with a confidence less than this threshold will be considered invalid and not used as an input for model inference.",
                  "key": "confidence_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:TranscriptionMetadata": {
            "description": "Transcription metadata for your media file.",
            "name": "TranscriptionMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Value between `0.0` and `1.0` indicating our transcription model's relative confidence in the transcription of your media file.",
                  "key": "confidence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "detected_language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Bcp47Tag"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Type": {
            "name": "Type",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "EMBEDDING_GENERATION"
                },
                {
                  "value": "INFERENCE"
                },
                {
                  "value": "TL_INFERENCE"
                },
                {
                  "value": "TRAINING"
                }
              ]
            }
          },
          "type_:Unconfigurable": {
            "description": "To include predictions for this model type, set this field to `{}`. It is currently not configurable further.",
            "name": "Unconfigurable",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:UnionJob": {
            "name": "UnionJob",
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "type_:UnionJobJobInference"
              }
            }
          },
          "type_:UnionJobJobEmbeddingGeneration": {
            "name": "UnionJobJobEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": ["type_:JobEmbeddingGeneration"],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:UnionJobJobInference": {
            "name": "UnionJobJobInference",
            "shape": {
              "type": "object",
              "extends": ["type_:JobInference"],
              "properties": [
                {
                  "description": "Denotes the job type.\n\nJobs created with the Expression Measurement API will have this field set to `INFERENCE`.",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:UnionJobJobTlInference": {
            "name": "UnionJobJobTlInference",
            "shape": {
              "type": "object",
              "extends": ["type_:JobTlInference"],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:UnionJobJobTraining": {
            "name": "UnionJobJobTraining",
            "shape": {
              "type": "object",
              "extends": ["type_:JobTraining"],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:UnionPredictResult": {
            "name": "UnionPredictResult",
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "type_:InferenceSourcePredictResult"
              }
            }
          },
          "type_:ValidationArgs": {
            "name": "ValidationArgs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "positive_label",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Target"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:When": {
            "name": "When",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "created_before"
                },
                {
                  "value": "created_after"
                }
              ]
            }
          },
          "type_:Window": {
            "name": "Window",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The length of the sliding window.",
                  "key": "length",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 4
                      }
                    }
                  }
                },
                {
                  "description": "The step size of the sliding window.",
                  "key": "step",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 1
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          }
        },
        "subpackages": {
          "subpackage_files": {
            "subpackageId": "subpackage_files",
            "name": "files",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-files",
                "method": "GET",
                "id": "list-files",
                "originalEndpointId": "endpoint_files.list-files",
                "name": "List files",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/files"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:FilePage"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/files",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "content": [
                        {
                          "file": {
                            "id": "id",
                            "user_id": "user_id",
                            "data_type": "data_type",
                            "is_sanitized": true,
                            "is_owned_by_reader": true
                          },
                          "attributes": [
                            {
                              "name": "name",
                              "value": "value"
                            }
                          ]
                        }
                      ],
                      "pageable": {
                        "offset": 1000000,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "paged": true,
                        "unpaged": true,
                        "page_number": 1,
                        "page_size": 1
                      },
                      "total": 1000000,
                      "last": true,
                      "total_elements": 1000000,
                      "total_pages": 1,
                      "size": 1,
                      "number": 1,
                      "sort": {
                        "empty": true,
                        "sorted": true,
                        "unsorted": true
                      },
                      "first": true,
                      "number_of_elements": 1,
                      "empty": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "content": [
                          {
                            "file": {
                              "id": "id",
                              "user_id": "user_id",
                              "data_type": "data_type",
                              "is_sanitized": true,
                              "is_owned_by_reader": true
                            },
                            "attributes": [
                              {
                                "name": "name",
                                "value": "value"
                              }
                            ]
                          }
                        ],
                        "pageable": {
                          "offset": 1000000,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1000000,
                        "last": true,
                        "total_elements": 1000000,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-files",
                "method": "POST",
                "id": "create-files",
                "originalEndpointId": "endpoint_files.create-files",
                "name": "Create files",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/files"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "description": "List of Files with Attributes to be created",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FileWithAttributesInput"
                      }
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FileWithAttributes"
                      }
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/files",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": [
                      {
                        "file": {
                          "name": "name",
                          "hume_storage": true,
                          "data_type": "data_type"
                        }
                      }
                    ],
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "file": {
                          "id": "id",
                          "name": "name",
                          "uri": "uri",
                          "upload_uri": "upload_uri",
                          "thumbnail_uri": "thumbnail_uri",
                          "user_id": "user_id",
                          "data_type": "data_type",
                          "created_on": 1000000,
                          "modified_on": 1000000,
                          "metadata": {
                            "key": {
                              "key": "value"
                            }
                          },
                          "hume_storage": true,
                          "hume_storage_upload_timestamp": 1000000,
                          "is_sanitized": true,
                          "is_owned_by_reader": true,
                          "is_linked_to_publicly_shared": true,
                          "is_linked_to_hume_model": true
                        },
                        "attributes": [
                          {
                            "name": "name",
                            "value": "value"
                          }
                        ]
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "file": {
                            "name": "name",
                            "hume_storage": true,
                            "data_type": "data_type"
                          }
                        }
                      ]
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "file": {
                            "id": "id",
                            "name": "name",
                            "uri": "uri",
                            "upload_uri": "upload_uri",
                            "thumbnail_uri": "thumbnail_uri",
                            "user_id": "user_id",
                            "data_type": "data_type",
                            "created_on": 1000000,
                            "modified_on": 1000000,
                            "metadata": {
                              "key": {
                                "key": "value"
                              }
                            },
                            "hume_storage": true,
                            "hume_storage_upload_timestamp": 1000000,
                            "is_sanitized": true,
                            "is_owned_by_reader": true,
                            "is_linked_to_publicly_shared": true,
                            "is_linked_to_hume_model": true
                          },
                          "attributes": [
                            {
                              "name": "name",
                              "value": "value"
                            }
                          ]
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 201 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "upload-file",
                "method": "POST",
                "id": "upload-file",
                "originalEndpointId": "endpoint_files.upload-file",
                "name": "Upload file",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/files/upload"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "FilesUploadFileRequest",
                      "properties": [
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "file",
                            "isOptional": false
                          }
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "attributes",
                            "isOptional": true
                          }
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:FileWithAttributes"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/files/upload",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "file": {
                          "type": "filename",
                          "value": "<filename1>"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "file": {
                          "id": "string",
                          "name": "string",
                          "uri": "string",
                          "upload_uri": "string",
                          "thumbnail_uri": "string",
                          "user_id": "string",
                          "data_type": "string",
                          "created_on": 99999,
                          "modified_on": 99999,
                          "metadata": {
                            "string": {
                              "string": {}
                            }
                          },
                          "hume_storage": true,
                          "hume_storage_upload_timestamp": 99999,
                          "is_sanitized": true,
                          "is_owned_by_reader": true,
                          "is_linked_to_publicly_shared": true,
                          "is_linked_to_hume_model": true
                        },
                        "attributes": [
                          {
                            "name": "string",
                            "value": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Upload a file synchronously. Returns 201 if successful. Files must have a name. Files must specify Content-Type. Request bodies, and therefore files, are limited to 100MB",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-file",
                "method": "GET",
                "id": "get-file",
                "originalEndpointId": "endpoint_files.get-file",
                "name": "Get file",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a File",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:FileWithAttributes"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/files/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "file": {
                        "id": "id",
                        "name": "name",
                        "uri": "uri",
                        "upload_uri": "upload_uri",
                        "thumbnail_uri": "thumbnail_uri",
                        "user_id": "user_id",
                        "data_type": "data_type",
                        "created_on": 1000000,
                        "modified_on": 1000000,
                        "metadata": {
                          "key": {
                            "key": "value"
                          }
                        },
                        "hume_storage": true,
                        "hume_storage_upload_timestamp": 1000000,
                        "is_sanitized": true,
                        "is_owned_by_reader": true,
                        "is_linked_to_publicly_shared": true,
                        "is_linked_to_hume_model": true
                      },
                      "attributes": [
                        {
                          "name": "name",
                          "value": "value"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "file": {
                          "id": "id",
                          "name": "name",
                          "uri": "uri",
                          "upload_uri": "upload_uri",
                          "thumbnail_uri": "thumbnail_uri",
                          "user_id": "user_id",
                          "data_type": "data_type",
                          "created_on": 1000000,
                          "modified_on": 1000000,
                          "metadata": {
                            "key": {
                              "key": "value"
                            }
                          },
                          "hume_storage": true,
                          "hume_storage_upload_timestamp": 1000000,
                          "is_sanitized": true,
                          "is_owned_by_reader": true,
                          "is_linked_to_publicly_shared": true,
                          "is_linked_to_hume_model": true
                        },
                        "attributes": [
                          {
                            "name": "name",
                            "value": "value"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-file",
                "method": "DELETE",
                "id": "delete-file",
                "originalEndpointId": "endpoint_files.delete-file",
                "name": "Delete file",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a File",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Unit"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/files/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "key": "value"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "key": "value"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 204 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-file-name",
                "method": "PATCH",
                "id": "update-file-name",
                "originalEndpointId": "endpoint_files.update-file-name",
                "name": "Update file name",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a File",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "New File name",
                    "key": "name",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:FileWithAttributes"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/files/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {
                      "name": "name"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "file": {
                        "id": "id",
                        "name": "name",
                        "uri": "uri",
                        "upload_uri": "upload_uri",
                        "thumbnail_uri": "thumbnail_uri",
                        "user_id": "user_id",
                        "data_type": "data_type",
                        "created_on": 1000000,
                        "modified_on": 1000000,
                        "metadata": {
                          "key": {
                            "key": "value"
                          }
                        },
                        "hume_storage": true,
                        "hume_storage_upload_timestamp": 1000000,
                        "is_sanitized": true,
                        "is_owned_by_reader": true,
                        "is_linked_to_publicly_shared": true,
                        "is_linked_to_hume_model": true
                      },
                      "attributes": [
                        {
                          "name": "name",
                          "value": "value"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "file": {
                          "id": "id",
                          "name": "name",
                          "uri": "uri",
                          "upload_uri": "upload_uri",
                          "thumbnail_uri": "thumbnail_uri",
                          "user_id": "user_id",
                          "data_type": "data_type",
                          "created_on": 1000000,
                          "modified_on": 1000000,
                          "metadata": {
                            "key": {
                              "key": "value"
                            }
                          },
                          "hume_storage": true,
                          "hume_storage_upload_timestamp": 1000000,
                          "is_sanitized": true,
                          "is_owned_by_reader": true,
                          "is_linked_to_publicly_shared": true,
                          "is_linked_to_hume_model": true
                        },
                        "attributes": [
                          {
                            "name": "name",
                            "value": "value"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-file-predictions",
                "method": "GET",
                "id": "get-file-predictions",
                "originalEndpointId": "endpoint_files.get-file-predictions",
                "name": "Get file predictions",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a File",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/predictions"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/files/id/predictions",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": "string",
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": "string"
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "files",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_datasets": {
            "subpackageId": "subpackage_datasets",
            "name": "datasets",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-datasets",
                "method": "GET",
                "id": "list-datasets",
                "originalEndpointId": "endpoint_datasets.list-datasets",
                "name": "List datasets",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Dataset name to be queried",
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DatasetPage"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "content": [
                        {
                          "id": "id",
                          "name": "name",
                          "latest_version": {
                            "id": "id",
                            "user_id": "user_id",
                            "labels_file_uri": "labels_file_uri",
                            "feature_types": {
                              "key": "CATEGORICAL"
                            },
                            "dataset_id": "dataset_id",
                            "dataset_version": 1,
                            "created_on": 1000000
                          },
                          "modified_on": 1,
                          "metadata": {
                            "key": {
                              "key": "value"
                            }
                          }
                        }
                      ],
                      "pageable": {
                        "offset": 1000000,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "paged": true,
                        "unpaged": true,
                        "page_number": 1,
                        "page_size": 1
                      },
                      "total": 1000000,
                      "last": true,
                      "total_elements": 1000000,
                      "total_pages": 1,
                      "size": 1,
                      "number": 1,
                      "sort": {
                        "empty": true,
                        "sorted": true,
                        "unsorted": true
                      },
                      "first": true,
                      "number_of_elements": 1,
                      "empty": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "content": [
                          {
                            "id": "id",
                            "name": "name",
                            "latest_version": {
                              "id": "id",
                              "user_id": "user_id",
                              "labels_file_uri": "labels_file_uri",
                              "feature_types": {
                                "key": "CATEGORICAL"
                              },
                              "dataset_id": "dataset_id",
                              "dataset_version": 1,
                              "created_on": 1000000
                            },
                            "modified_on": 1,
                            "metadata": {
                              "key": {
                                "key": "value"
                              }
                            }
                          }
                        ],
                        "pageable": {
                          "offset": 1000000,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1000000,
                        "last": true,
                        "total_elements": 1000000,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-dataset",
                "method": "POST",
                "id": "create-dataset",
                "originalEndpointId": "endpoint_datasets.create-dataset",
                "name": "Create dataset",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "DatasetsCreateDatasetRequest",
                      "properties": [
                        {
                          "type": "bodyProperty",
                          "key": "name",
                          "valueType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          },
                          "description": "Name of the Dataset to be created"
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "feature_types",
                            "isOptional": true
                          }
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "labels_file",
                            "isOptional": false
                          }
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnDataset"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "name": {
                          "type": "json",
                          "value": "string"
                        },
                        "labels_file": {
                          "type": "filename",
                          "value": "<filename1>"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "string",
                        "name": "string",
                        "latest_version": {
                          "id": "string",
                          "user_id": "string",
                          "labels_file_uri": "string",
                          "feature_types": {
                            "string": "CATEGORICAL"
                          },
                          "dataset_id": "string",
                          "dataset_version": 0,
                          "created_on": 99999
                        },
                        "modified_on": 0,
                        "metadata": {
                          "string": {
                            "string": {}
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 201 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-dataset",
                "method": "GET",
                "id": "get-dataset",
                "originalEndpointId": "endpoint_datasets.get-dataset",
                "name": "Get dataset",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnDataset"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "name": "name",
                      "latest_version": {
                        "id": "id",
                        "user_id": "user_id",
                        "labels_file_uri": "labels_file_uri",
                        "feature_types": {
                          "key": "CATEGORICAL"
                        },
                        "dataset_id": "dataset_id",
                        "dataset_version": 1,
                        "created_on": 1000000
                      },
                      "modified_on": 1,
                      "metadata": {
                        "key": {
                          "key": "value"
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "name": "name",
                        "latest_version": {
                          "id": "id",
                          "user_id": "user_id",
                          "labels_file_uri": "labels_file_uri",
                          "feature_types": {
                            "key": "CATEGORICAL"
                          },
                          "dataset_id": "dataset_id",
                          "dataset_version": 1,
                          "created_on": 1000000
                        },
                        "modified_on": 1,
                        "metadata": {
                          "key": {
                            "key": "value"
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-dataset-version",
                "method": "POST",
                "id": "create-dataset-version",
                "originalEndpointId": "endpoint_datasets.create-dataset-version",
                "name": "Create dataset version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "DatasetsCreateDatasetVersionRequest",
                      "properties": [
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "feature_types",
                            "isOptional": true
                          }
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "labels_file",
                            "isOptional": false
                          }
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnDataset"
                      }
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "labels_file": {
                          "type": "filename",
                          "value": "<filename1>"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "id": "string",
                          "name": "string",
                          "latest_version": {
                            "id": "string",
                            "user_id": "string",
                            "labels_file_uri": "string",
                            "feature_types": {
                              "string": "CATEGORICAL"
                            },
                            "dataset_id": "string",
                            "dataset_version": 0,
                            "created_on": 99999
                          },
                          "modified_on": 0,
                          "metadata": {
                            "string": {
                              "string": {}
                            }
                          }
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-dataset",
                "method": "DELETE",
                "id": "delete-dataset",
                "originalEndpointId": "endpoint_datasets.delete-dataset",
                "name": "Delete dataset",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Unit"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "key": "value"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "key": "value"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 204 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-dataset-versions",
                "method": "GET",
                "id": "list-dataset-versions",
                "originalEndpointId": "endpoint_datasets.list-dataset-versions",
                "name": "List dataset versions",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/versions"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DatasetVersionPage"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets/id/versions",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "content": [
                        {
                          "id": "id",
                          "user_id": "user_id",
                          "labels_file_uri": "labels_file_uri",
                          "feature_types": {
                            "key": "CATEGORICAL"
                          },
                          "dataset_id": "dataset_id",
                          "dataset_version": 1,
                          "created_on": 1000000
                        }
                      ],
                      "pageable": {
                        "offset": 1000000,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "paged": true,
                        "unpaged": true,
                        "page_number": 1,
                        "page_size": 1
                      },
                      "total": 1000000,
                      "last": true,
                      "total_elements": 1000000,
                      "total_pages": 1,
                      "size": 1,
                      "number": 1,
                      "sort": {
                        "empty": true,
                        "sorted": true,
                        "unsorted": true
                      },
                      "first": true,
                      "number_of_elements": 1,
                      "empty": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "content": [
                          {
                            "id": "id",
                            "user_id": "user_id",
                            "labels_file_uri": "labels_file_uri",
                            "feature_types": {
                              "key": "CATEGORICAL"
                            },
                            "dataset_id": "dataset_id",
                            "dataset_version": 1,
                            "created_on": 1000000
                          }
                        ],
                        "pageable": {
                          "offset": 1000000,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1000000,
                        "last": true,
                        "total_elements": 1000000,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-dataset-files",
                "method": "GET",
                "id": "list-dataset-files",
                "originalEndpointId": "endpoint_datasets.list-dataset-files",
                "name": "List dataset files",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/files"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FilePage"
                      }
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets/id/files",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "content": [
                          {
                            "file": {
                              "id": "id",
                              "user_id": "user_id",
                              "data_type": "data_type",
                              "is_sanitized": true,
                              "is_owned_by_reader": true
                            }
                          }
                        ],
                        "pageable": {
                          "offset": 1000000,
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1000000,
                        "last": true,
                        "total_elements": 1000000,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "content": [
                            {
                              "file": {
                                "id": "id",
                                "user_id": "user_id",
                                "data_type": "data_type",
                                "is_sanitized": true,
                                "is_owned_by_reader": true
                              }
                            }
                          ],
                          "pageable": {
                            "offset": 1000000,
                            "paged": true,
                            "unpaged": true,
                            "page_number": 1,
                            "page_size": 1
                          },
                          "total": 1000000,
                          "last": true,
                          "total_elements": 1000000,
                          "total_pages": 1,
                          "size": 1,
                          "number": 1,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "first": true,
                          "number_of_elements": 1,
                          "empty": true
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-dataset-version",
                "method": "GET",
                "id": "get-dataset-version",
                "originalEndpointId": "endpoint_datasets.get-dataset-version",
                "name": "Get dataset version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset version",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DatasetLabels"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets/version/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "user_id": "user_id",
                      "labels_file_uri": "labels_file_uri",
                      "feature_type_json_uri": "feature_type_json_uri",
                      "dataset_id": "dataset_id",
                      "dataset_version": 1,
                      "created_on": 1000000,
                      "is_most_recent_version": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "user_id": "user_id",
                        "labels_file_uri": "labels_file_uri",
                        "feature_type_json_uri": "feature_type_json_uri",
                        "dataset_id": "dataset_id",
                        "dataset_version": 1,
                        "created_on": 1000000,
                        "is_most_recent_version": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-dataset-version-files",
                "method": "GET",
                "id": "list-dataset-version-files",
                "originalEndpointId": "endpoint_datasets.list-dataset-version-files",
                "name": "List dataset version files",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset version",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/datasets/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/files"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FilePage"
                      }
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/datasets/version/id/files",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "content": [
                          {
                            "file": {
                              "id": "id",
                              "user_id": "user_id",
                              "data_type": "data_type",
                              "is_sanitized": true,
                              "is_owned_by_reader": true
                            }
                          }
                        ],
                        "pageable": {
                          "offset": 1000000,
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1000000,
                        "last": true,
                        "total_elements": 1000000,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "content": [
                            {
                              "file": {
                                "id": "id",
                                "user_id": "user_id",
                                "data_type": "data_type",
                                "is_sanitized": true,
                                "is_owned_by_reader": true
                              }
                            }
                          ],
                          "pageable": {
                            "offset": 1000000,
                            "paged": true,
                            "unpaged": true,
                            "page_number": 1,
                            "page_size": 1
                          },
                          "total": 1000000,
                          "last": true,
                          "total_elements": 1000000,
                          "total_pages": 1,
                          "size": 1,
                          "number": 1,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "first": true,
                          "number_of_elements": 1,
                          "empty": true
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "datasets",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_models": {
            "subpackageId": "subpackage_models",
            "name": "models",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-models",
                "method": "GET",
                "id": "list-models",
                "originalEndpointId": "endpoint_models.list-models",
                "name": "List models",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/models"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Model name to be queried",
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ModelPage"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/models",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "content": [
                        {
                          "id": "id",
                          "name": "name",
                          "created_on": 1000000,
                          "modified_on": 1000000,
                          "total_stars": 1000000,
                          "model_is_starred_by_user": true,
                          "archived": true,
                          "latest_version": {
                            "id": "id",
                            "model_id": "model_id",
                            "user_id": "user_id",
                            "version": "version",
                            "source_uri": "source_uri",
                            "dataset_version_id": "dataset_version_id",
                            "created_on": 1000000
                          },
                          "is_publicly_shared": true
                        }
                      ],
                      "pageable": {
                        "offset": 1000000,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "paged": true,
                        "unpaged": true,
                        "page_number": 1,
                        "page_size": 1
                      },
                      "total": 1000000,
                      "last": true,
                      "total_elements": 1000000,
                      "total_pages": 1,
                      "size": 1,
                      "number": 1,
                      "sort": {
                        "empty": true,
                        "sorted": true,
                        "unsorted": true
                      },
                      "first": true,
                      "number_of_elements": 1,
                      "empty": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "content": [
                          {
                            "id": "id",
                            "name": "name",
                            "created_on": 1000000,
                            "modified_on": 1000000,
                            "total_stars": 1000000,
                            "model_is_starred_by_user": true,
                            "archived": true,
                            "latest_version": {
                              "id": "id",
                              "model_id": "model_id",
                              "user_id": "user_id",
                              "version": "version",
                              "source_uri": "source_uri",
                              "dataset_version_id": "dataset_version_id",
                              "created_on": 1000000
                            },
                            "is_publicly_shared": true
                          }
                        ],
                        "pageable": {
                          "offset": 1000000,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1000000,
                        "last": true,
                        "total_elements": 1000000,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-model-details",
                "method": "GET",
                "id": "get-model-details",
                "originalEndpointId": "endpoint_models.get-model-details",
                "name": "Get model details",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Model",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/models/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ExternalModel"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/models/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "name": "name",
                      "created_on": 1000000,
                      "modified_on": 1000000,
                      "total_stars": 1000000,
                      "model_is_starred_by_user": true,
                      "archived": true,
                      "latest_version": {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1000000,
                        "metadata": {
                          "key": {
                            "key": "value"
                          }
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      },
                      "is_publicly_shared": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "name": "name",
                        "created_on": 1000000,
                        "modified_on": 1000000,
                        "total_stars": 1000000,
                        "model_is_starred_by_user": true,
                        "archived": true,
                        "latest_version": {
                          "id": "id",
                          "model_id": "model_id",
                          "user_id": "user_id",
                          "version": "version",
                          "source_uri": "source_uri",
                          "dataset_version_id": "dataset_version_id",
                          "created_on": 1000000,
                          "metadata": {
                            "key": {
                              "key": "value"
                            }
                          },
                          "description": "description",
                          "tags": [
                            {
                              "key": "key",
                              "value": "value"
                            }
                          ],
                          "file_type": "video",
                          "target_feature": "target_feature",
                          "task_type": "task_type",
                          "training_job_id": "training_job_id"
                        },
                        "is_publicly_shared": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-model-name",
                "method": "PATCH",
                "id": "update-model-name",
                "originalEndpointId": "endpoint_models.update-model-name",
                "name": "Update model name",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Model",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/models/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "New Model name",
                    "key": "name",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ExternalModel"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/models/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {
                      "name": "name"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "name": "name",
                      "created_on": 1000000,
                      "modified_on": 1000000,
                      "total_stars": 1000000,
                      "model_is_starred_by_user": true,
                      "archived": true,
                      "latest_version": {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1000000,
                        "metadata": {
                          "key": {
                            "key": "value"
                          }
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      },
                      "is_publicly_shared": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "name": "name",
                        "created_on": 1000000,
                        "modified_on": 1000000,
                        "total_stars": 1000000,
                        "model_is_starred_by_user": true,
                        "archived": true,
                        "latest_version": {
                          "id": "id",
                          "model_id": "model_id",
                          "user_id": "user_id",
                          "version": "version",
                          "source_uri": "source_uri",
                          "dataset_version_id": "dataset_version_id",
                          "created_on": 1000000,
                          "metadata": {
                            "key": {
                              "key": "value"
                            }
                          },
                          "description": "description",
                          "tags": [
                            {
                              "key": "key",
                              "value": "value"
                            }
                          ],
                          "file_type": "video",
                          "target_feature": "target_feature",
                          "task_type": "task_type",
                          "training_job_id": "training_job_id"
                        },
                        "is_publicly_shared": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-model-versions",
                "method": "GET",
                "id": "list-model-versions",
                "originalEndpointId": "endpoint_models.list-model-versions",
                "name": "List model versions",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/models/version"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Hume-generated Model Version IDs to be queried",
                    "key": "id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Model version name to be queried",
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Model version number to be queried",
                    "key": "version",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ExternalModelVersion"
                      }
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/models/version",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1000000,
                        "metadata": {
                          "key": {
                            "key": "value"
                          }
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "id": "id",
                          "model_id": "model_id",
                          "user_id": "user_id",
                          "version": "version",
                          "source_uri": "source_uri",
                          "dataset_version_id": "dataset_version_id",
                          "created_on": 1000000,
                          "metadata": {
                            "key": {
                              "key": "value"
                            }
                          },
                          "description": "description",
                          "tags": [
                            {
                              "key": "key",
                              "value": "value"
                            }
                          ],
                          "file_type": "video",
                          "target_feature": "target_feature",
                          "task_type": "task_type",
                          "training_job_id": "training_job_id"
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-model-version",
                "method": "GET",
                "id": "get-model-version",
                "originalEndpointId": "endpoint_models.get-model-version",
                "name": "Get model version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Model version",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/models/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ExternalModelVersion"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/models/version/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "model_id": "model_id",
                      "user_id": "user_id",
                      "version": "version",
                      "source_uri": "source_uri",
                      "dataset_version_id": "dataset_version_id",
                      "created_on": 1000000,
                      "metadata": {
                        "key": {
                          "key": "value"
                        }
                      },
                      "description": "description",
                      "tags": [
                        {
                          "key": "key",
                          "value": "value"
                        }
                      ],
                      "file_type": "video",
                      "target_feature": "target_feature",
                      "task_type": "task_type",
                      "training_job_id": "training_job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1000000,
                        "metadata": {
                          "key": {
                            "key": "value"
                          }
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-model-description",
                "method": "PATCH",
                "id": "update-model-description",
                "originalEndpointId": "endpoint_models.update-model-description",
                "name": "Update model description",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Model Version",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/models/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ExternalModelVersion"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/models/version/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": "string",
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "model_id": "model_id",
                      "user_id": "user_id",
                      "version": "version",
                      "source_uri": "source_uri",
                      "dataset_version_id": "dataset_version_id",
                      "created_on": 1000000,
                      "metadata": {
                        "key": {
                          "key": "value"
                        }
                      },
                      "description": "description",
                      "tags": [
                        {
                          "key": "key",
                          "value": "value"
                        }
                      ],
                      "file_type": "video",
                      "target_feature": "target_feature",
                      "task_type": "task_type",
                      "training_job_id": "training_job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": "string"
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1000000,
                        "metadata": {
                          "key": {
                            "key": "value"
                          }
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "models",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_jobs": {
            "subpackageId": "subpackage_jobs",
            "name": "jobs",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "start-training-job",
                "method": "POST",
                "id": "start-training-job",
                "originalEndpointId": "endpoint_jobs.start-training-job",
                "name": "Start training job",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/v0/batch/jobs/tl/train"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json; charset=utf-8",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:TrainingBaseRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:JobId"
                    }
                  },
                  "description": ""
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/v0/batch/jobs/tl/train",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "custom_model": {
                        "name": "name"
                      },
                      "dataset": {
                        "id": "id"
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "job_id": "job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "custom_model": {
                          "name": "name"
                        },
                        "dataset": {
                          "id": "id"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "job_id": "job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Start a new custom models training job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "start-custom-models-inference-job",
                "method": "POST",
                "id": "start-custom-models-inference-job",
                "originalEndpointId": "endpoint_jobs.start-custom-models-inference-job",
                "name": "Start custom models inference job",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/registry/v0/batch/jobs/tl/inference"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json; charset=utf-8",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:TlInferenceBaseRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:JobId"
                    }
                  },
                  "description": ""
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/registry/v0/batch/jobs/tl/inference",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "custom_model": {
                        "id": "id"
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "job_id": "job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "custom_model": {
                          "id": "id"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "job_id": "job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Start a new custom models inference job.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "jobs",
            "webhooks": [],
            "websockets": []
          }
        },
        "auth": {
          "type": "header",
          "headerWireValue": "X-Hume-Api-Key",
          "nameOverride": "apiKey"
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      },
      "a14d3798-e567-4432-a6b3-2fa8a50954c7": {
        "id": "a14d3798-e567-4432-a6b3-2fa8a50954c7",
        "rootPackage": {
          "endpoints": [],
          "subpackages": ["subpackage_batch", "subpackage_stream"],
          "types": [],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_batch:Alternative": {
            "name": "Alternative",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "language_only"
                }
              }
            }
          },
          "type_batch:Bcp47Tag": {
            "name": "Bcp47Tag",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "zh"
                },
                {
                  "value": "da"
                },
                {
                  "value": "nl"
                },
                {
                  "value": "en"
                },
                {
                  "value": "en-AU"
                },
                {
                  "value": "en-IN"
                },
                {
                  "value": "en-NZ"
                },
                {
                  "value": "en-GB"
                },
                {
                  "value": "fr"
                },
                {
                  "value": "fr-CA"
                },
                {
                  "value": "de"
                },
                {
                  "value": "hi"
                },
                {
                  "value": "hi-Latn"
                },
                {
                  "value": "id"
                },
                {
                  "value": "it"
                },
                {
                  "value": "ja"
                },
                {
                  "value": "ko"
                },
                {
                  "value": "no"
                },
                {
                  "value": "pl"
                },
                {
                  "value": "pt"
                },
                {
                  "value": "pt-BR"
                },
                {
                  "value": "pt-PT"
                },
                {
                  "value": "ru"
                },
                {
                  "value": "es"
                },
                {
                  "value": "es-419"
                },
                {
                  "value": "sv"
                },
                {
                  "value": "ta"
                },
                {
                  "value": "tr"
                },
                {
                  "value": "uk"
                }
              ]
            }
          },
          "type_batch:BoundingBox": {
            "description": "A bounding box around a face.",
            "name": "BoundingBox",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "x-coordinate of bounding box top left corner.",
                  "key": "x",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "y-coordinate of bounding box top left corner.",
                  "key": "y",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Bounding box width.",
                  "key": "w",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Bounding box height.",
                  "key": "h",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:BurstPrediction": {
            "name": "BurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "time",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:TimeInterval"
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:EmotionScore"
                    }
                  }
                },
                {
                  "description": "Modality-specific descriptive features and their scores.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:DescriptionsScore"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Classification": {
            "name": "Classification",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_batch:CompletedEmbeddingGeneration": {
            "name": "CompletedEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:CompletedInference": {
            "name": "CompletedInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "The number of predictions that were generated by this job.",
                  "key": "num_predictions",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uint64"
                    }
                  }
                },
                {
                  "description": "The number of errors that occurred while running this job.",
                  "key": "num_errors",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uint64"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:CompletedTlInference": {
            "name": "CompletedTlInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "The number of predictions that were generated by this job.",
                  "key": "num_predictions",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uint64"
                    }
                  }
                },
                {
                  "description": "The number of errors that occurred while running this job.",
                  "key": "num_errors",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uint64"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:CompletedTraining": {
            "name": "CompletedTraining",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:TrainingCustomModel"
                  }
                },
                {
                  "key": "alternatives",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "id",
                        "value": "type_batch:TrainingCustomModel"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:CustomModelPrediction": {
            "name": "CustomModelPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "output",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "error",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "task_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:CustomModelRequest": {
            "name": "CustomModelRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_batch:Tag"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Dataset": {
            "name": "Dataset",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_batch:DatasetId"
                  },
                  "displayName": "Dataset ID"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_batch:DatasetVersionId"
                  },
                  "displayName": "Dataset Version ID"
                }
              ]
            }
          },
          "type_batch:DatasetId": {
            "name": "DatasetId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:DatasetVersionId": {
            "name": "DatasetVersionId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:DescriptionsScore": {
            "name": "DescriptionsScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the descriptive feature being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the descriptive feature being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double",
                      "minimum": 2.2250738585072014e-308,
                      "maximum": 1.7976931348623157e308,
                      "default": 0
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Direction": {
            "name": "Direction",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "asc"
                },
                {
                  "value": "desc"
                }
              ]
            }
          },
          "type_batch:EmbeddingGenerationBaseRequest": {
            "name": "EmbeddingGenerationBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File ID and File URL pairs for an asset registry file",
                  "key": "registry_file_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_batch:RegistryFileDetail"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:EmotionScore": {
            "name": "EmotionScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the emotion being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the emotion being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double",
                      "minimum": 2.2250738585072014e-308,
                      "maximum": 1.7976931348623157e308,
                      "default": 0
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Error": {
            "name": "Error",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An error message.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:EvaluationArgs": {
            "name": "EvaluationArgs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "validation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:ValidationArgs"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Face": {
            "description": "The Facial Emotional Expression model analyzes human facial expressions in images and videos. Results will be provided per frame for video files.\n\nRecommended input file types: `.png`, `.jpeg`, `.mp4`",
            "name": "Face",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Number of frames per second to process. Other frames will be omitted from the response. Set to `0` to process every frame.",
                  "key": "fps_pred",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                },
                {
                  "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response.",
                  "key": "prob_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.99
                      }
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for faces across frames. If `true`, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If `false`, all faces will be tagged with an `unknown` ID.",
                  "key": "identify_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response.",
                  "key": "min_face_size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "uint64"
                      }
                    }
                  }
                },
                {
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Unconfigurable"
                    }
                  }
                },
                {
                  "description": "Whether to extract and save the detected faces in the artifacts zip created by each job.",
                  "key": "save_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:FacePrediction": {
            "name": "FacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Frame number",
                  "key": "frame",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uint64"
                    }
                  }
                },
                {
                  "description": "Time in seconds when face detection occurred.",
                  "key": "time",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "The predicted probability that a detected face was actually a face.",
                  "key": "prob",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "box",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:BoundingBox"
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:EmotionScore"
                    }
                  }
                },
                {
                  "description": "FACS 2.0 features and their scores.",
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_batch:FacsScore"
                      }
                    }
                  }
                },
                {
                  "description": "Modality-specific descriptive features and their scores.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_batch:DescriptionsScore"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:FacemeshPrediction": {
            "name": "FacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:EmotionScore"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:FacsScore": {
            "name": "FacsScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the FACS 2.0 feature being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the FACS 2.0 feature being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double",
                      "minimum": 2.2250738585072014e-308,
                      "maximum": 1.7976931348623157e308,
                      "default": 0
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Failed": {
            "name": "Failed",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:File": {
            "description": "The list of files submitted for analysis.",
            "name": "File",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the file.",
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The content type of the file.",
                  "key": "content_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The MD5 checksum of the file.",
                  "key": "md5sum",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Granularity": {
            "description": "The granularity at which to generate predictions. The `granularity` field is ignored if transcription is not enabled or if the `window` field has been set.\n\n- `word`: At the word level, our model provides a separate output for each word, offering the most granular insight into emotional expression during speech.\n\n- `sentence`: At the sentence level of granularity, we annotate the emotional tone of each spoken sentence with our Prosody and Emotional Language models.\n\n- `utterance`: Utterance-level granularity is between word- and sentence-level. It takes into account natural pauses or breaks in speech, providing more rapidly updated measures of emotional expression within a flowing conversation. For text inputs, utterance-level granularity will produce results identical to sentence-level granularity.\n\n- `conversational_turn`: Conversational turn-level granularity provides a distinct output for each change in speaker. It captures the full sequence of words and sentences spoken uninterrupted by each person. This approach provides a higher-level view of the emotional dynamics in a multi-participant dialogue. For text inputs, specifying conversational turn-level granularity for our Emotional Language model will produce results for the entire passage.",
            "name": "Granularity",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "word"
                },
                {
                  "value": "sentence"
                },
                {
                  "value": "utterance"
                },
                {
                  "value": "conversational_turn"
                }
              ]
            }
          },
          "type_batch:GroupedPredictionsBurstPrediction": {
            "name": "GroupedPredictionsBurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:BurstPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:GroupedPredictionsFacePrediction": {
            "name": "GroupedPredictionsFacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:FacePrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:GroupedPredictionsFacemeshPrediction": {
            "name": "GroupedPredictionsFacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:FacemeshPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:GroupedPredictionsLanguagePrediction": {
            "name": "GroupedPredictionsLanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:LanguagePrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:GroupedPredictionsNerPrediction": {
            "name": "GroupedPredictionsNerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:NerPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:GroupedPredictionsProsodyPrediction": {
            "name": "GroupedPredictionsProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:ProsodyPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:InProgress": {
            "name": "InProgress",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:InferenceBaseRequest": {
            "name": "InferenceBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Specify the models to use for inference.\n\nIf this field is not explicitly set, then all models will run by default.",
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Models"
                    }
                  }
                },
                {
                  "key": "transcription",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Transcription"
                    }
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Text supplied directly to our Emotional Language and NER models for analysis.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:InferencePrediction": {
            "name": "InferencePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "models",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:ModelsPredictions"
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:InferenceRequest": {
            "name": "InferenceRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Models"
                    }
                  }
                },
                {
                  "key": "transcription",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Transcription"
                    }
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Text to supply directly to our language and NER models.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "key": "files",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:File"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:InferenceResults": {
            "name": "InferenceResults",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:InferencePrediction"
                    }
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Error"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:InferenceSourcePredictResult": {
            "name": "InferenceSourcePredictResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:Source"
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:InferenceResults"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:JobEmbeddingGeneration": {
            "name": "JobEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:EmbeddingGenerationBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:StateEmbeddingGeneration"
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:JobInference": {
            "name": "JobInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The request that initiated the job.",
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:InferenceRequest"
                  }
                },
                {
                  "description": "The current state of the job.",
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:StateInference"
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:JobTlInference": {
            "name": "JobTlInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:TlInferenceBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:StateTlInference"
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:JobTraining": {
            "name": "JobTraining",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:TrainingBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:StateTraining"
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:JobId": {
            "name": "JobId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the started job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Language": {
            "description": "The Emotional Language model analyzes passages of text. This also supports audio and video files by transcribing and then directly analyzing the transcribed text.\n\nRecommended input filetypes: `.txt`, `.mp3`, `.wav`, `.mp4`",
            "name": "Language",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Granularity"
                    }
                  }
                },
                {
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Unconfigurable"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:LanguagePrediction": {
            "name": "LanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:PositionInterval"
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:TimeInterval"
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:EmotionScore"
                    }
                  }
                },
                {
                  "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from `1` (negative) to `9` (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of `5`. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of `5`. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level.",
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_batch:SentimentScore"
                      }
                    }
                  }
                },
                {
                  "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: `toxic`, `severe_toxic`, `obscene`, `threat`, `insult`, and `identity_hate`.",
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_batch:ToxicityScore"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Models": {
            "description": "The models used for inference.",
            "name": "Models",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Face"
                    }
                  }
                },
                {
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Prosody"
                    }
                  }
                },
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Language"
                    }
                  }
                },
                {
                  "key": "ner",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Ner"
                    }
                  }
                },
                {
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Unconfigurable"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:ModelsPredictions": {
            "name": "ModelsPredictions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:PredictionsOptionalNullFacePrediction"
                    }
                  }
                },
                {
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:PredictionsOptionalNullBurstPrediction"
                    }
                  }
                },
                {
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:PredictionsOptionalTranscriptionMetadataProsodyPrediction"
                    }
                  }
                },
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:PredictionsOptionalTranscriptionMetadataLanguagePrediction"
                    }
                  }
                },
                {
                  "key": "ner",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:PredictionsOptionalTranscriptionMetadataNerPrediction"
                    }
                  }
                },
                {
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:PredictionsOptionalNullFacemeshPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Ner": {
            "description": "The NER (Named-entity Recognition) model identifies real-world objects and concepts in passages of text. This also supports audio and video files by transcribing and then directly analyzing the transcribed text.\n\nRecommended input filetypes: `.txt`, `.mp3`, `.wav`, `.mp4`",
            "name": "Ner",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:NerPrediction": {
            "name": "NerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The recognized topic or entity.",
                  "key": "entity",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:PositionInterval"
                  }
                },
                {
                  "description": "Our NER model's relative confidence in the recognized topic or entity.",
                  "key": "entity_confidence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "A measure of how often the entity is linked to by other entities.",
                  "key": "support",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "A URL which provides more information about the recognized topic or entity.",
                  "key": "uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The specific word to which the emotion predictions are linked.",
                  "key": "link_word",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:TimeInterval"
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:EmotionScore"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Null": {
            "description": "No associated metadata for this model. Value will be `null`.",
            "name": "Null",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_batch:PositionInterval": {
            "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
            "name": "PositionInterval",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The index of the first character in the text segment, inclusive.",
                  "key": "begin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uint64"
                    }
                  }
                },
                {
                  "description": "The index of the last character in the text segment, exclusive.",
                  "key": "end",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uint64"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:PredictionsOptionalNullBurstPrediction": {
            "name": "PredictionsOptionalNullBurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:GroupedPredictionsBurstPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:PredictionsOptionalNullFacePrediction": {
            "name": "PredictionsOptionalNullFacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:GroupedPredictionsFacePrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:PredictionsOptionalNullFacemeshPrediction": {
            "name": "PredictionsOptionalNullFacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:GroupedPredictionsFacemeshPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:PredictionsOptionalTranscriptionMetadataLanguagePrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataLanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:GroupedPredictionsLanguagePrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:PredictionsOptionalTranscriptionMetadataNerPrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataNerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:GroupedPredictionsNerPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:PredictionsOptionalTranscriptionMetadataProsodyPrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:GroupedPredictionsProsodyPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Prosody": {
            "description": "The Speech Prosody model analyzes the intonation, stress, and rhythm of spoken word.\n\nRecommended input file types: `.wav`, `.mp3`, `.mp4`",
            "name": "Prosody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Granularity"
                    }
                  }
                },
                {
                  "key": "window",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Window"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:ProsodyPrediction": {
            "name": "ProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:TimeInterval"
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:EmotionScore"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Queued": {
            "name": "Queued",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:RegistryFileDetail": {
            "name": "RegistryFileDetail",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File ID in the Asset Registry",
                  "key": "file_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL to the file in the Asset Registry",
                  "key": "file_url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Regression": {
            "name": "Regression",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_batch:SentimentScore": {
            "name": "SentimentScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Level of sentiment, ranging from `1` (negative) to `9` (positive)",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Prediction for this level of sentiment",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double",
                      "minimum": 2.2250738585072014e-308,
                      "maximum": 1.7976931348623157e308,
                      "default": 0
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:SortBy": {
            "name": "SortBy",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "created"
                },
                {
                  "value": "started"
                },
                {
                  "value": "ended"
                }
              ]
            }
          },
          "type_batch:Source": {
            "name": "Source",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "url",
                  "additionalProperties": {
                    "extends": ["type_batch:SourceUrl"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "file",
                  "additionalProperties": {
                    "extends": ["type_batch:SourceFile"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text",
                  "additionalProperties": {
                    "extends": ["type_batch:SourceTextSource"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_batch:SourceFile": {
            "name": "SourceFile",
            "shape": {
              "type": "object",
              "extends": ["type_batch:File"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:SourceTextSource": {
            "name": "SourceTextSource",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:SourceUrl": {
            "name": "SourceUrl",
            "shape": {
              "type": "object",
              "extends": ["type_batch:Url"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Url": {
            "name": "Url",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The URL of the source media file.",
                  "key": "url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:StateEmbeddingGeneration": {
            "name": "StateEmbeddingGeneration",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_batch:StateEmbeddingGenerationQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_batch:StateEmbeddingGenerationInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_batch:StateEmbeddingGenerationCompletedEmbeddingGeneration"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_batch:StateEmbeddingGenerationFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_batch:StateEmbeddingGenerationCompletedEmbeddingGeneration": {
            "name": "StateEmbeddingGenerationCompletedEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": ["type_batch:CompletedEmbeddingGeneration"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:StateEmbeddingGenerationFailed": {
            "name": "StateEmbeddingGenerationFailed",
            "shape": {
              "type": "object",
              "extends": ["type_batch:Failed"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:StateEmbeddingGenerationInProgress": {
            "name": "StateEmbeddingGenerationInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_batch:InProgress"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:StateEmbeddingGenerationQueued": {
            "name": "StateEmbeddingGenerationQueued",
            "shape": {
              "type": "object",
              "extends": ["type_batch:Queued"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:StateInference": {
            "name": "StateInference",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_batch:QueuedState"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_batch:InProgressState"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_batch:CompletedState"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_batch:FailedState"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_batch:CompletedState": {
            "name": "CompletedState",
            "shape": {
              "type": "object",
              "extends": ["type_batch:CompletedInference"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:FailedState": {
            "name": "FailedState",
            "shape": {
              "type": "object",
              "extends": ["type_batch:Failed"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:InProgressState": {
            "name": "InProgressState",
            "shape": {
              "type": "object",
              "extends": ["type_batch:InProgress"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:QueuedState": {
            "name": "QueuedState",
            "shape": {
              "type": "object",
              "extends": ["type_batch:Queued"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:StateTlInference": {
            "name": "StateTlInference",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_batch:StateTlInferenceQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_batch:StateTlInferenceInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_batch:StateTlInferenceCompletedTlInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_batch:StateTlInferenceFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_batch:StateTlInferenceCompletedTlInference": {
            "name": "StateTlInferenceCompletedTlInference",
            "shape": {
              "type": "object",
              "extends": ["type_batch:CompletedTlInference"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:StateTlInferenceFailed": {
            "name": "StateTlInferenceFailed",
            "shape": {
              "type": "object",
              "extends": ["type_batch:Failed"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:StateTlInferenceInProgress": {
            "name": "StateTlInferenceInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_batch:InProgress"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:StateTlInferenceQueued": {
            "name": "StateTlInferenceQueued",
            "shape": {
              "type": "object",
              "extends": ["type_batch:Queued"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:StateTraining": {
            "name": "StateTraining",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_batch:StateTrainingQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_batch:StateTrainingInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_batch:StateTrainingCompletedTraining"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_batch:StateTrainingFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_batch:StateTrainingCompletedTraining": {
            "name": "StateTrainingCompletedTraining",
            "shape": {
              "type": "object",
              "extends": ["type_batch:CompletedTraining"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:StateTrainingFailed": {
            "name": "StateTrainingFailed",
            "shape": {
              "type": "object",
              "extends": ["type_batch:Failed"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:StateTrainingInProgress": {
            "name": "StateTrainingInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_batch:InProgress"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:StateTrainingQueued": {
            "name": "StateTrainingQueued",
            "shape": {
              "type": "object",
              "extends": ["type_batch:Queued"],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Status": {
            "name": "Status",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "QUEUED"
                },
                {
                  "value": "IN_PROGRESS"
                },
                {
                  "value": "COMPLETED"
                },
                {
                  "value": "FAILED"
                }
              ]
            }
          },
          "type_batch:TlInferencePrediction": {
            "name": "TlInferencePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "file_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "custom_models",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "id",
                      "value": "type_batch:CustomModelPrediction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:TlInferenceResults": {
            "name": "TlInferenceResults",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:TlInferencePrediction"
                    }
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Error"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:TlInferenceSourcePredictResult": {
            "name": "TlInferenceSourcePredictResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:Source"
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:TlInferenceResults"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Tag": {
            "name": "Tag",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Target": {
            "name": "Target",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_batch:Task": {
            "name": "Task",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "classification",
                  "additionalProperties": {
                    "extends": ["type_batch:TaskClassification"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "regression",
                  "additionalProperties": {
                    "extends": ["type_batch:TaskRegression"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_batch:TaskClassification": {
            "name": "TaskClassification",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:TaskRegression": {
            "name": "TaskRegression",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:TextSource": {
            "name": "TextSource",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_batch:TimeInterval": {
            "description": "A time range with a beginning and end, measured in seconds.",
            "name": "TimeInterval",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Beginning of time range in seconds.",
                  "key": "begin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "End of time range in seconds.",
                  "key": "end",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:TlInferenceBaseRequest": {
            "name": "TlInferenceBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:CustomModel"
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:CustomModel": {
            "name": "CustomModel",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_batch:CustomModelId"
                  },
                  "displayName": "Custom Model ID"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_batch:CustomModelVersionId"
                  },
                  "displayName": "Custom Model Version ID"
                }
              ]
            }
          },
          "type_batch:CustomModelId": {
            "name": "CustomModelId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:CustomModelVersionId": {
            "name": "CustomModelVersionId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:ToxicityScore": {
            "name": "ToxicityScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Category of toxicity.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Prediction for this category of toxicity",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double",
                      "minimum": 2.2250738585072014e-308,
                      "maximum": 1.7976931348623157e308,
                      "default": 0
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:TrainingBaseRequest": {
            "name": "TrainingBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:CustomModelRequest"
                  }
                },
                {
                  "key": "dataset",
                  "valueType": {
                    "type": "id",
                    "value": "type_batch:Dataset"
                  }
                },
                {
                  "key": "target_feature",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "label"
                      }
                    }
                  }
                },
                {
                  "key": "task",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Task"
                    }
                  }
                },
                {
                  "key": "evaluation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:EvaluationArgs"
                    }
                  }
                },
                {
                  "key": "alternatives",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_batch:Alternative"
                      }
                    }
                  }
                },
                {
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:TrainingCustomModel": {
            "name": "TrainingCustomModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Transcription": {
            "description": "Transcription-related configuration options.\n\nTo disable transcription, explicitly set this field to `null`.",
            "name": "Transcription",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "By default, we use an automated language detection method for our Speech Prosody, Language, and NER models. However, if you know what language is being spoken in your media samples, you can specify it via its BCP-47 tag and potentially obtain more accurate results.\n\nYou can specify any of the following languages:\n\n- Chinese: `zh`\n- Danish: `da`\n- Dutch: `nl`\n- English: `en`\n- English (Australia): `en-AU`\n- English (India): `en-IN`\n- English (New Zealand): `en-NZ`\n- English (United Kingdom): `en-GB`\n- French: `fr`\n- French (Canada): `fr-CA`\n- German: `de`\n- Hindi: `hi`\n- Hindi (Roman Script): `hi-Latn`\n- Indonesian: `id`\n- Italian: `it`\n- Japanese: `ja`\n- Korean: `ko`\n- Norwegian: `no`\n- Polish: `pl`\n- Portuguese: `pt`\n- Portuguese (Brazil): `pt-BR`\n- Portuguese (Portugal): `pt-PT`\n- Russian: `ru`\n- Spanish: `es`\n- Spanish (Latin America): `es-419`\n- Swedish: `sv`\n- Tamil: `ta`\n- Turkish: `tr`\n- Ukrainian: `uk`",
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Bcp47Tag"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "description": "Transcript confidence threshold. Transcripts generated with a confidence less than this threshold will be considered invalid and not used as an input for model inference.",
                  "key": "confidence_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:TranscriptionMetadata": {
            "description": "Transcription metadata for your media file.",
            "name": "TranscriptionMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Value between `0.0` and `1.0` indicating our transcription model's relative confidence in the transcription of your media file.",
                  "key": "confidence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "detected_language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Bcp47Tag"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:Type": {
            "name": "Type",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "EMBEDDING_GENERATION"
                },
                {
                  "value": "INFERENCE"
                },
                {
                  "value": "TL_INFERENCE"
                },
                {
                  "value": "TRAINING"
                }
              ]
            }
          },
          "type_batch:Unconfigurable": {
            "description": "To include predictions for this model type, set this field to `{}`. It is currently not configurable further.",
            "name": "Unconfigurable",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_batch:UnionJob": {
            "name": "UnionJob",
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "type_batch:InferenceJob"
              }
            }
          },
          "type_batch:EmbeddingGenerationJob": {
            "name": "EmbeddingGenerationJob",
            "shape": {
              "type": "object",
              "extends": ["type_batch:JobEmbeddingGeneration"],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:InferenceJob": {
            "name": "InferenceJob",
            "shape": {
              "type": "object",
              "extends": ["type_batch:JobInference"],
              "properties": [
                {
                  "description": "Denotes the job type.\n\nJobs created with the Expression Measurement API will have this field set to `INFERENCE`.",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:CustomModelsInferenceJob": {
            "name": "CustomModelsInferenceJob",
            "shape": {
              "type": "object",
              "extends": ["type_batch:JobTlInference"],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:CustomModelsTrainingJob": {
            "name": "CustomModelsTrainingJob",
            "shape": {
              "type": "object",
              "extends": ["type_batch:JobTraining"],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:UnionPredictResult": {
            "name": "UnionPredictResult",
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "type_batch:InferenceSourcePredictResult"
              }
            }
          },
          "type_batch:ValidationArgs": {
            "name": "ValidationArgs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "positive_label",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_batch:Target"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_batch:When": {
            "name": "When",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "created_before"
                },
                {
                  "value": "created_after"
                }
              ]
            }
          },
          "type_batch:Window": {
            "description": "Generate predictions based on time.\n\nSetting the `window` field allows for a 'sliding window' approach, where a fixed-size window moves across the audio or video file in defined steps. This enables continuous analysis of prosody within subsets of the file, providing dynamic and localized insights into emotional expression.",
            "name": "Window",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The length of the sliding window.",
                  "key": "length",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 4
                      }
                    }
                  }
                },
                {
                  "description": "The step size of the sliding window.",
                  "key": "step",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 1
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamModelPredictionsJobDetails": {
            "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
            "name": "StreamModelPredictionsJobDetails",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "ID of the current streaming job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamModelPredictionsBurstPredictionsItem": {
            "name": "StreamModelPredictionsBurstPredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:TimeRange"
                    }
                  }
                },
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:EmotionEmbedding"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamModelPredictionsBurst": {
            "description": "Response for the vocal burst emotion model.",
            "name": "StreamModelPredictionsBurst",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamModelPredictionsBurstPredictionsItem"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamModelPredictionsFacePredictionsItem": {
            "name": "StreamModelPredictionsFacePredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Frame number",
                  "key": "frame",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Time in seconds when face detection occurred.",
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "bbox",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamBoundingBox"
                    }
                  }
                },
                {
                  "description": "The predicted probability that a detected face was actually a face.",
                  "key": "prob",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Identifier for a face. Not that this defaults to `unknown` unless face identification is enabled in the face model configuration.",
                  "key": "face_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:EmotionEmbedding"
                    }
                  }
                },
                {
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:EmotionEmbedding"
                    }
                  }
                },
                {
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:EmotionEmbedding"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamModelPredictionsFace": {
            "description": "Response for the facial expression emotion model.",
            "name": "StreamModelPredictionsFace",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamModelPredictionsFacePredictionsItem"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamModelPredictionsFacemeshPredictionsItem": {
            "name": "StreamModelPredictionsFacemeshPredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:EmotionEmbedding"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamModelPredictionsFacemesh": {
            "description": "Response for the facemesh emotion model.",
            "name": "StreamModelPredictionsFacemesh",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamModelPredictionsFacemeshPredictionsItem"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamModelPredictionsLanguagePredictionsItem": {
            "name": "StreamModelPredictionsLanguagePredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:TextPosition"
                    }
                  }
                },
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:EmotionEmbedding"
                    }
                  }
                },
                {
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:Sentiment"
                    }
                  }
                },
                {
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:Toxicity"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamModelPredictionsLanguage": {
            "description": "Response for the language emotion model.",
            "name": "StreamModelPredictionsLanguage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamModelPredictionsLanguagePredictionsItem"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamModelPredictionsProsodyPredictionsItem": {
            "name": "StreamModelPredictionsProsodyPredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:TimeRange"
                    }
                  }
                },
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:EmotionEmbedding"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamModelPredictionsProsody": {
            "description": "Response for the speech prosody emotion model.",
            "name": "StreamModelPredictionsProsody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamModelPredictionsProsodyPredictionsItem"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamModelPredictions": {
            "description": "Model predictions",
            "name": "StreamModelPredictions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body.",
                  "key": "payload_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
                  "key": "job_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamModelPredictionsJobDetails"
                    }
                  }
                },
                {
                  "description": "Response for the vocal burst emotion model.",
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamModelPredictionsBurst"
                    }
                  }
                },
                {
                  "description": "Response for the facial expression emotion model.",
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamModelPredictionsFace"
                    }
                  }
                },
                {
                  "description": "Response for the facemesh emotion model.",
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamModelPredictionsFacemesh"
                    }
                  }
                },
                {
                  "description": "Response for the language emotion model.",
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamModelPredictionsLanguage"
                    }
                  }
                },
                {
                  "description": "Response for the speech prosody emotion model.",
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamModelPredictionsProsody"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:JobDetails": {
            "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
            "name": "JobDetails",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "ID of the current streaming job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamErrorMessage": {
            "description": "Error message",
            "name": "StreamErrorMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Error message text.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique identifier for the error.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body.",
                  "key": "payload_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
                  "key": "job_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:JobDetails"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamWarningMessageJobDetails": {
            "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
            "name": "StreamWarningMessageJobDetails",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "ID of the current streaming job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamWarningMessage": {
            "description": "Warning message",
            "name": "StreamWarningMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Warning message text.",
                  "key": "warning",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique identifier for the error.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body.",
                  "key": "payload_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
                  "key": "job_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamWarningMessageJobDetails"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:SubscribeEvent": {
            "name": "SubscribeEvent",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "description": "Model predictions",
                  "type": {
                    "type": "id",
                    "value": "type_stream:StreamModelPredictions"
                  },
                  "displayName": "Stream Model Predictions"
                },
                {
                  "description": "Error message",
                  "type": {
                    "type": "id",
                    "value": "type_stream:StreamErrorMessage"
                  },
                  "displayName": "Stream Error Message"
                },
                {
                  "description": "Warning message",
                  "type": {
                    "type": "id",
                    "value": "type_stream:StreamWarningMessage"
                  },
                  "displayName": "Stream Warning Message"
                }
              ]
            }
          },
          "type_stream:StreamFace": {
            "description": "Configuration for the facial expression emotion model.\n\nNote: Using the `reset_stream` parameter does not have any effect on face identification. A single face identifier cache is maintained over a full session whether `reset_stream` is used or not.",
            "name": "StreamFace",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Configuration for FACS predictions. If missing or null, no FACS predictions will be generated.",
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration for Descriptions predictions. If missing or null, no Descriptions predictions will be generated.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for faces across frames. If true, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If false, all faces will be tagged with an \"unknown\" ID.",
                  "key": "identify_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "description": "Number of frames per second to process. Other frames will be omitted from the response.",
                  "key": "fps_pred",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                },
                {
                  "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response.",
                  "key": "prob_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                },
                {
                  "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response.",
                  "key": "min_face_size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamLanguage": {
            "description": "Configuration for the language emotion model.",
            "name": "StreamLanguage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Configuration for sentiment predictions. If missing or null, no sentiment predictions will be generated.",
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration for toxicity predictions. If missing or null, no toxicity predictions will be generated.",
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The granularity at which to generate predictions. Values are `word`, `sentence`, `utterance`, or `passage`. To get a single prediction for the entire text of your streaming payload use `passage`. Default value is `word`.",
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:Config": {
            "description": "Configuration used to specify which models should be used and with what settings.",
            "name": "Config",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Configuration for the vocal burst emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`.",
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration for the facial expression emotion model.\n\nNote: Using the `reset_stream` parameter does not have any effect on face identification. A single face identifier cache is maintained over a full session whether `reset_stream` is used or not.",
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamFace"
                    }
                  }
                },
                {
                  "description": "Configuration for the facemesh emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`.",
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration for the language emotion model.",
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamLanguage"
                    }
                  }
                },
                {
                  "description": "Configuration for the speech prosody emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`.",
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:StreamModelsEndpointPayload": {
            "description": "Models endpoint payload",
            "name": "StreamModelsEndpointPayload",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration used to specify which models should be used and with what settings.",
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:Config"
                    }
                  }
                },
                {
                  "description": "Length in milliseconds of streaming sliding window.\n\nExtending the length of this window will prepend media context from past payloads into the current payload.\n\nFor example, if on the first payload you send 500ms of data and on the second payload you send an additional 500ms of data, a window of at least 1000ms will allow the model to process all 1000ms of stream data.\n\nA window of 600ms would append the full 500ms of the second payload to the last 100ms of the first payload.\n\nNote: This feature is currently only supported for audio data and audio models. For other file types and models this parameter will be ignored.",
                  "key": "stream_window_ms",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 500,
                        "maximum": 10000,
                        "default": 5000
                      }
                    }
                  }
                },
                {
                  "description": "Whether to reset the streaming sliding window before processing the current payload.\n\nIf this parameter is set to `true` then past context will be deleted before processing the current payload.\n\nUse reset_stream when one audio file is done being processed and you do not want context to leak across files.",
                  "key": "reset_stream",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "description": "Set to `true` to enable the data parameter to be parsed as raw text rather than base64 encoded bytes.\nThis parameter is useful if you want to send text to be processed by the language model, but it cannot be used with other file types like audio, image, or video.",
                  "key": "raw_text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "description": "Set to `true` to get details about the job.\n\nThis parameter can be set in the same payload as data or it can be set without data and models configuration to get the job details between payloads.\n\nThis parameter is useful to get the unique job ID.",
                  "key": "job_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                },
                {
                  "description": "Pass an arbitrary string as the payload ID and get it back at the top level of the socket response.\n\nThis can be useful if you have multiple requests running asynchronously and want to disambiguate responses as they are received.",
                  "key": "payload_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:EmotionEmbeddingItem": {
            "name": "EmotionEmbeddingItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the emotion being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Embedding value for the emotion being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:EmotionEmbedding": {
            "description": "A high-dimensional embedding in emotion space.",
            "name": "EmotionEmbedding",
            "shape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_stream:EmotionEmbeddingItem"
                }
              }
            }
          },
          "type_stream:StreamBoundingBox": {
            "description": "A bounding box around a face.",
            "name": "StreamBoundingBox",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "x-coordinate of bounding box top left corner.",
                  "key": "x",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                },
                {
                  "description": "y-coordinate of bounding box top left corner.",
                  "key": "y",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                },
                {
                  "description": "Bounding box width.",
                  "key": "w",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                },
                {
                  "description": "Bounding box height.",
                  "key": "h",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:TimeRange": {
            "description": "A time range with a beginning and end, measured in seconds.",
            "name": "TimeRange",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Beginning of time range in seconds.",
                  "key": "begin",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                },
                {
                  "description": "End of time range in seconds.",
                  "key": "end",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:TextPosition": {
            "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
            "name": "TextPosition",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The index of the first character in the text segment, inclusive.",
                  "key": "begin",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                },
                {
                  "description": "The index of the last character in the text segment, exclusive.",
                  "key": "end",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:SentimentItem": {
            "name": "SentimentItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Level of sentiment, ranging from 1 (negative) to 9 (positive)",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Prediction for this level of sentiment",
                  "key": "score",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:Sentiment": {
            "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from 1 (negative) to 9 (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of 5. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of 5. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level.",
            "name": "Sentiment",
            "shape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_stream:SentimentItem"
                }
              }
            }
          },
          "type_stream:ToxicityItem": {
            "name": "ToxicityItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Category of toxicity.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Prediction for this category of toxicity",
                  "key": "score",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_stream:Toxicity": {
            "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: toxic, severe_toxic, obscene, threat, insult, and identity_hate.",
            "name": "Toxicity",
            "shape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_stream:ToxicityItem"
                }
              }
            }
          }
        },
        "subpackages": {
          "subpackage_batch": {
            "subpackageId": "subpackage_batch",
            "name": "batch",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-jobs",
                "method": "GET",
                "id": "list-jobs",
                "originalEndpointId": "endpoint_batch.list-jobs",
                "name": "List jobs",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The maximum number of jobs to include in the response.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Include only jobs of this status in the response. There are four possible statuses:\n\n- `QUEUED`: The job has been received and is waiting to be processed.\n\n- `IN_PROGRESS`: The job is currently being processed.\n\n- `COMPLETED`: The job has finished processing.\n\n- `FAILED`: The job encountered an error and could not be completed successfully.",
                    "key": "status",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_batch:Status"
                      }
                    }
                  },
                  {
                    "description": "Specify whether to include jobs created before or after a given `timestamp_ms`.",
                    "key": "when",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_batch:When"
                      }
                    }
                  },
                  {
                    "description": "Provide a timestamp in milliseconds to filter jobs.\n\nWhen combined with the `when` parameter, you can filter jobs before or after the given timestamp. Defaults to the current Unix timestamp if one is not provided.",
                    "key": "timestamp_ms",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "long",
                          "default": 0
                        }
                      }
                    }
                  },
                  {
                    "description": "Specify which timestamp to sort the jobs by.\n\n- `created`: Sort jobs by the time of creation, indicated by `created_timestamp_ms`.\n\n- `started`: Sort jobs by the time processing started, indicated by `started_timestamp_ms`.\n\n- `ended`: Sort jobs by the time processing ended, indicated by `ended_timestamp_ms`.",
                    "key": "sort_by",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_batch:SortBy"
                      }
                    }
                  },
                  {
                    "description": "Specify the order in which to sort the jobs. Defaults to descending order.\n\n- `asc`: Sort in ascending order (chronological, with the oldest records first).\n\n- `desc`: Sort in descending order (reverse-chronological, with the newest records first).",
                    "key": "direction",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_batch:Direction"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_batch:UnionJob"
                      }
                    }
                  },
                  "description": ""
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "job_id": "job_id",
                        "request": {
                          "files": [
                            {
                              "filename": "filename",
                              "md5sum": "md5sum",
                              "content_type": "content_type"
                            }
                          ],
                          "models": {
                            "burst": {},
                            "face": {
                              "fps_pred": 3,
                              "identify_faces": false,
                              "min_face_size": 60,
                              "prob_threshold": 0.99,
                              "save_faces": false
                            },
                            "facemesh": {},
                            "language": {
                              "granularity": "word",
                              "identify_speakers": false
                            },
                            "ner": {
                              "identify_speakers": false
                            },
                            "prosody": {
                              "granularity": "utterance",
                              "identify_speakers": false
                            }
                          },
                          "notify": true,
                          "text": [],
                          "urls": ["https://hume-tutorials.s3.amazonaws.com/faces.zip"]
                        },
                        "state": {
                          "created_timestamp_ms": 1712587158717,
                          "ended_timestamp_ms": 1712587159274,
                          "num_errors": 0,
                          "num_predictions": 10,
                          "started_timestamp_ms": 1712587158800,
                          "status": "COMPLETED"
                        },
                        "type": "INFERENCE"
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.expression_measurement.batch.list_jobs()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.list_jobs()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.expressionMeasurement.batch.listJobs();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "job_id": "job_id",
                          "request": {
                            "files": [
                              {
                                "filename": "filename",
                                "md5sum": "md5sum",
                                "content_type": "content_type"
                              }
                            ],
                            "models": {
                              "burst": {},
                              "face": {
                                "fps_pred": 3,
                                "identify_faces": false,
                                "min_face_size": 60,
                                "prob_threshold": 0.99,
                                "save_faces": false
                              },
                              "facemesh": {},
                              "language": {
                                "granularity": "word",
                                "identify_speakers": false
                              },
                              "ner": {
                                "identify_speakers": false
                              },
                              "prosody": {
                                "granularity": "utterance",
                                "identify_speakers": false
                              }
                            },
                            "notify": true,
                            "text": [],
                            "urls": ["https://hume-tutorials.s3.amazonaws.com/faces.zip"]
                          },
                          "state": {
                            "created_timestamp_ms": 1712587158717,
                            "ended_timestamp_ms": 1712587159274,
                            "num_errors": 0,
                            "num_predictions": 10,
                            "started_timestamp_ms": 1712587158800,
                            "status": "COMPLETED"
                          },
                          "type": "INFERENCE"
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Sort and filter jobs.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "start-inference-job",
                "method": "POST",
                "id": "start-inference-job",
                "originalEndpointId": "endpoint_batch.start-inference-job",
                "name": "Start inference job",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_batch:InferenceBaseRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_batch:JobId"
                    }
                  },
                  "description": ""
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "urls": ["https://hume-tutorials.s3.amazonaws.com/faces.zip"],
                      "notify": true
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "job_id": "job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.expression_measurement.batch.start_inference_job(\n        urls=[\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n        notify=True,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.start_inference_job(\n    urls=[\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n    notify=True,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.expressionMeasurement.batch.startInferenceJob({\n    urls: [\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n    notify: true\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "urls": ["https://hume-tutorials.s3.amazonaws.com/faces.zip"],
                        "notify": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "job_id": "job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Start a new measurement inference job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-job-details",
                "method": "GET",
                "id": "get-job-details",
                "originalEndpointId": "endpoint_batch.get-job-details",
                "name": "Get job details",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The unique identifier for the job.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_batch:UnionJob"
                    }
                  },
                  "description": ""
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Inference",
                    "path": "/v0/batch/jobs/job_id",
                    "pathParameters": {
                      "id": "job_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "type": "INFERENCE",
                      "job_id": "job_id",
                      "request": {
                        "files": [],
                        "models": {
                          "burst": {},
                          "face": {
                            "fps_pred": 3,
                            "identify_faces": false,
                            "min_face_size": 60,
                            "prob_threshold": 0.99,
                            "save_faces": false
                          },
                          "facemesh": {},
                          "language": {
                            "granularity": "word",
                            "identify_speakers": false
                          },
                          "ner": {
                            "identify_speakers": false
                          },
                          "prosody": {
                            "granularity": "utterance",
                            "identify_speakers": false
                          }
                        },
                        "notify": true,
                        "text": [],
                        "urls": ["https://hume-tutorials.s3.amazonaws.com/faces.zip"]
                      },
                      "state": {
                        "created_timestamp_ms": 1712590457884,
                        "ended_timestamp_ms": 1712590462252,
                        "num_errors": 0,
                        "num_predictions": 10,
                        "started_timestamp_ms": 1712590457995,
                        "status": "COMPLETED"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.expression_measurement.batch.get_job_details(\n        id=\"job_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.get_job_details(\n    id=\"job_id\",\n)\n",
                        "exampleIdentifier": "Inference"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.expressionMeasurement.batch.getJobDetails(\"job_id\");\n",
                        "exampleIdentifier": "Inference"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "type": "INFERENCE",
                        "job_id": "job_id",
                        "request": {
                          "files": [],
                          "models": {
                            "burst": {},
                            "face": {
                              "fps_pred": 3,
                              "identify_faces": false,
                              "min_face_size": 60,
                              "prob_threshold": 0.99,
                              "save_faces": false
                            },
                            "facemesh": {},
                            "language": {
                              "granularity": "word",
                              "identify_speakers": false
                            },
                            "ner": {
                              "identify_speakers": false
                            },
                            "prosody": {
                              "granularity": "utterance",
                              "identify_speakers": false
                            }
                          },
                          "notify": true,
                          "text": [],
                          "urls": ["https://hume-tutorials.s3.amazonaws.com/faces.zip"]
                        },
                        "state": {
                          "created_timestamp_ms": 1712590457884,
                          "ended_timestamp_ms": 1712590462252,
                          "num_errors": 0,
                          "num_predictions": 10,
                          "started_timestamp_ms": 1712590457995,
                          "status": "COMPLETED"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get the request details and state of a given job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-job-predictions",
                "method": "GET",
                "id": "get-job-predictions",
                "originalEndpointId": "endpoint_batch.get-job-predictions",
                "name": "Get job predictions",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The unique identifier for the job.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/predictions"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_batch:UnionPredictResult"
                      }
                    }
                  },
                  "description": ""
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs/job_id/predictions",
                    "pathParameters": {
                      "id": "job_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "source": {
                          "type": "url",
                          "url": "https://hume-tutorials.s3.amazonaws.com/faces.zip"
                        },
                        "results": {
                          "predictions": [
                            {
                              "file": "faces/100.jpg",
                              "models": {
                                "face": {
                                  "grouped_predictions": [
                                    {
                                      "id": "unknown",
                                      "predictions": [
                                        {
                                          "frame": 0,
                                          "time": 0,
                                          "prob": 0.9994111061096191,
                                          "box": {
                                            "x": 1187.885986328125,
                                            "y": 1397.697509765625,
                                            "w": 1401.668701171875,
                                            "h": 1961.424560546875
                                          },
                                          "emotions": [
                                            {
                                              "name": "Admiration",
                                              "score": 0.10722749680280685
                                            },
                                            {
                                              "name": "Adoration",
                                              "score": 0.06395940482616425
                                            },
                                            {
                                              "name": "Aesthetic Appreciation",
                                              "score": 0.05811462551355362
                                            },
                                            {
                                              "name": "Amusement",
                                              "score": 0.14187128841876984
                                            },
                                            {
                                              "name": "Anger",
                                              "score": 0.02804684266448021
                                            },
                                            {
                                              "name": "Anxiety",
                                              "score": 0.2713485360145569
                                            },
                                            {
                                              "name": "Awe",
                                              "score": 0.33812594413757324
                                            },
                                            {
                                              "name": "Awkwardness",
                                              "score": 0.1745193600654602
                                            },
                                            {
                                              "name": "Boredom",
                                              "score": 0.23600080609321594
                                            },
                                            {
                                              "name": "Calmness",
                                              "score": 0.18988418579101562
                                            },
                                            {
                                              "name": "Concentration",
                                              "score": 0.44288986921310425
                                            },
                                            {
                                              "name": "Confusion",
                                              "score": 0.39346569776535034
                                            },
                                            {
                                              "name": "Contemplation",
                                              "score": 0.31002455949783325
                                            },
                                            {
                                              "name": "Contempt",
                                              "score": 0.048870109021663666
                                            },
                                            {
                                              "name": "Contentment",
                                              "score": 0.0579497292637825
                                            },
                                            {
                                              "name": "Craving",
                                              "score": 0.06544201076030731
                                            },
                                            {
                                              "name": "Desire",
                                              "score": 0.05526508390903473
                                            },
                                            {
                                              "name": "Determination",
                                              "score": 0.08590991795063019
                                            },
                                            {
                                              "name": "Disappointment",
                                              "score": 0.19508258998394012
                                            },
                                            {
                                              "name": "Disgust",
                                              "score": 0.031529419124126434
                                            },
                                            {
                                              "name": "Distress",
                                              "score": 0.23210826516151428
                                            },
                                            {
                                              "name": "Doubt",
                                              "score": 0.3284550905227661
                                            },
                                            {
                                              "name": "Ecstasy",
                                              "score": 0.040716782212257385
                                            },
                                            {
                                              "name": "Embarrassment",
                                              "score": 0.1467227339744568
                                            },
                                            {
                                              "name": "Empathic Pain",
                                              "score": 0.07633581757545471
                                            },
                                            {
                                              "name": "Entrancement",
                                              "score": 0.16245244443416595
                                            },
                                            {
                                              "name": "Envy",
                                              "score": 0.03267110139131546
                                            },
                                            {
                                              "name": "Excitement",
                                              "score": 0.10656816512346268
                                            },
                                            {
                                              "name": "Fear",
                                              "score": 0.3115977346897125
                                            },
                                            {
                                              "name": "Guilt",
                                              "score": 0.11615975946187973
                                            },
                                            {
                                              "name": "Horror",
                                              "score": 0.19795553386211395
                                            },
                                            {
                                              "name": "Interest",
                                              "score": 0.3136432468891144
                                            },
                                            {
                                              "name": "Joy",
                                              "score": 0.06285581737756729
                                            },
                                            {
                                              "name": "Love",
                                              "score": 0.06339752674102783
                                            },
                                            {
                                              "name": "Nostalgia",
                                              "score": 0.05866732448339462
                                            },
                                            {
                                              "name": "Pain",
                                              "score": 0.07684041559696198
                                            },
                                            {
                                              "name": "Pride",
                                              "score": 0.026822954416275024
                                            },
                                            {
                                              "name": "Realization",
                                              "score": 0.30000734329223633
                                            },
                                            {
                                              "name": "Relief",
                                              "score": 0.04414166510105133
                                            },
                                            {
                                              "name": "Romance",
                                              "score": 0.042728863656520844
                                            },
                                            {
                                              "name": "Sadness",
                                              "score": 0.14773206412792206
                                            },
                                            {
                                              "name": "Satisfaction",
                                              "score": 0.05902980640530586
                                            },
                                            {
                                              "name": "Shame",
                                              "score": 0.08103451132774353
                                            },
                                            {
                                              "name": "Surprise (negative)",
                                              "score": 0.25518184900283813
                                            },
                                            {
                                              "name": "Surprise (positive)",
                                              "score": 0.28845661878585815
                                            },
                                            {
                                              "name": "Sympathy",
                                              "score": 0.062488824129104614
                                            },
                                            {
                                              "name": "Tiredness",
                                              "score": 0.1559651643037796
                                            },
                                            {
                                              "name": "Triumph",
                                              "score": 0.01955239288508892
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          ],
                          "errors": []
                        }
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.expression_measurement.batch.get_job_predictions(\n        id=\"job_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.get_job_predictions(\n    id=\"job_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.expressionMeasurement.batch.getJobPredictions(\"job_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "source": {
                            "type": "url",
                            "url": "https://hume-tutorials.s3.amazonaws.com/faces.zip"
                          },
                          "results": {
                            "predictions": [
                              {
                                "file": "faces/100.jpg",
                                "models": {
                                  "face": {
                                    "grouped_predictions": [
                                      {
                                        "id": "unknown",
                                        "predictions": [
                                          {
                                            "frame": 0,
                                            "time": 0,
                                            "prob": 0.9994111061096191,
                                            "box": {
                                              "x": 1187.885986328125,
                                              "y": 1397.697509765625,
                                              "w": 1401.668701171875,
                                              "h": 1961.424560546875
                                            },
                                            "emotions": [
                                              {
                                                "name": "Admiration",
                                                "score": 0.10722749680280685
                                              },
                                              {
                                                "name": "Adoration",
                                                "score": 0.06395940482616425
                                              },
                                              {
                                                "name": "Aesthetic Appreciation",
                                                "score": 0.05811462551355362
                                              },
                                              {
                                                "name": "Amusement",
                                                "score": 0.14187128841876984
                                              },
                                              {
                                                "name": "Anger",
                                                "score": 0.02804684266448021
                                              },
                                              {
                                                "name": "Anxiety",
                                                "score": 0.2713485360145569
                                              },
                                              {
                                                "name": "Awe",
                                                "score": 0.33812594413757324
                                              },
                                              {
                                                "name": "Awkwardness",
                                                "score": 0.1745193600654602
                                              },
                                              {
                                                "name": "Boredom",
                                                "score": 0.23600080609321594
                                              },
                                              {
                                                "name": "Calmness",
                                                "score": 0.18988418579101562
                                              },
                                              {
                                                "name": "Concentration",
                                                "score": 0.44288986921310425
                                              },
                                              {
                                                "name": "Confusion",
                                                "score": 0.39346569776535034
                                              },
                                              {
                                                "name": "Contemplation",
                                                "score": 0.31002455949783325
                                              },
                                              {
                                                "name": "Contempt",
                                                "score": 0.048870109021663666
                                              },
                                              {
                                                "name": "Contentment",
                                                "score": 0.0579497292637825
                                              },
                                              {
                                                "name": "Craving",
                                                "score": 0.06544201076030731
                                              },
                                              {
                                                "name": "Desire",
                                                "score": 0.05526508390903473
                                              },
                                              {
                                                "name": "Determination",
                                                "score": 0.08590991795063019
                                              },
                                              {
                                                "name": "Disappointment",
                                                "score": 0.19508258998394012
                                              },
                                              {
                                                "name": "Disgust",
                                                "score": 0.031529419124126434
                                              },
                                              {
                                                "name": "Distress",
                                                "score": 0.23210826516151428
                                              },
                                              {
                                                "name": "Doubt",
                                                "score": 0.3284550905227661
                                              },
                                              {
                                                "name": "Ecstasy",
                                                "score": 0.040716782212257385
                                              },
                                              {
                                                "name": "Embarrassment",
                                                "score": 0.1467227339744568
                                              },
                                              {
                                                "name": "Empathic Pain",
                                                "score": 0.07633581757545471
                                              },
                                              {
                                                "name": "Entrancement",
                                                "score": 0.16245244443416595
                                              },
                                              {
                                                "name": "Envy",
                                                "score": 0.03267110139131546
                                              },
                                              {
                                                "name": "Excitement",
                                                "score": 0.10656816512346268
                                              },
                                              {
                                                "name": "Fear",
                                                "score": 0.3115977346897125
                                              },
                                              {
                                                "name": "Guilt",
                                                "score": 0.11615975946187973
                                              },
                                              {
                                                "name": "Horror",
                                                "score": 0.19795553386211395
                                              },
                                              {
                                                "name": "Interest",
                                                "score": 0.3136432468891144
                                              },
                                              {
                                                "name": "Joy",
                                                "score": 0.06285581737756729
                                              },
                                              {
                                                "name": "Love",
                                                "score": 0.06339752674102783
                                              },
                                              {
                                                "name": "Nostalgia",
                                                "score": 0.05866732448339462
                                              },
                                              {
                                                "name": "Pain",
                                                "score": 0.07684041559696198
                                              },
                                              {
                                                "name": "Pride",
                                                "score": 0.026822954416275024
                                              },
                                              {
                                                "name": "Realization",
                                                "score": 0.30000734329223633
                                              },
                                              {
                                                "name": "Relief",
                                                "score": 0.04414166510105133
                                              },
                                              {
                                                "name": "Romance",
                                                "score": 0.042728863656520844
                                              },
                                              {
                                                "name": "Sadness",
                                                "score": 0.14773206412792206
                                              },
                                              {
                                                "name": "Satisfaction",
                                                "score": 0.05902980640530586
                                              },
                                              {
                                                "name": "Shame",
                                                "score": 0.08103451132774353
                                              },
                                              {
                                                "name": "Surprise (negative)",
                                                "score": 0.25518184900283813
                                              },
                                              {
                                                "name": "Surprise (positive)",
                                                "score": 0.28845661878585815
                                              },
                                              {
                                                "name": "Sympathy",
                                                "score": 0.062488824129104614
                                              },
                                              {
                                                "name": "Tiredness",
                                                "score": 0.1559651643037796
                                              },
                                              {
                                                "name": "Triumph",
                                                "score": 0.01955239288508892
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            ],
                            "errors": []
                          }
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get the JSON predictions of a completed inference job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-job-artifacts",
                "method": "GET",
                "id": "get-job-artifacts",
                "originalEndpointId": "endpoint_batch.get-job-artifacts",
                "name": "Get job artifacts",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The unique identifier for the job.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/artifacts"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "fileDownload"
                  },
                  "description": ""
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs/id/artifacts",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "filename",
                      "value": "<bytes>"
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get the artifacts ZIP of a completed inference job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "start-inference-job-from-local-file",
                "method": "POST",
                "id": "start-inference-job-from-local-file",
                "originalEndpointId": "endpoint_batch.start-inference-job-from-local-file",
                "name": "Start inference job from local file",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "BatchStartInferenceJobFromLocalFileRequest",
                      "properties": [
                        {
                          "type": "bodyProperty",
                          "key": "json",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "id",
                              "value": "type_batch:InferenceBaseRequest"
                            }
                          },
                          "description": "Stringified JSON object containing the inference job configuration."
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "fileArray",
                            "key": "file",
                            "isOptional": false
                          }
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_batch:JobId"
                    }
                  },
                  "description": ""
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.expression_measurement.batch.start_inference_job(\n        urls=[\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n        notify=True,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.start_inference_job(\n    urls=[\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n    notify=True,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.expressionMeasurement.batch.startInferenceJob({\n    urls: [\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n    notify: true\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "json": {
                          "type": "json"
                        },
                        "file": {
                          "type": "filenames",
                          "value": ["<filename1>", "<filename2>"]
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "job_id": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Start a new batch inference job.",
                "authed": true
              }
            ],
            "types": [
              "type_batch:Alternative",
              "type_batch:Bcp47Tag",
              "type_batch:BoundingBox",
              "type_batch:BurstPrediction",
              "type_batch:Classification",
              "type_batch:CompletedEmbeddingGeneration",
              "type_batch:CompletedInference",
              "type_batch:CompletedTlInference",
              "type_batch:CompletedTraining",
              "type_batch:CustomModelPrediction",
              "type_batch:CustomModelRequest",
              "type_batch:Dataset",
              "type_batch:DatasetId",
              "type_batch:DatasetVersionId",
              "type_batch:DescriptionsScore",
              "type_batch:Direction",
              "type_batch:EmbeddingGenerationBaseRequest",
              "type_batch:EmotionScore",
              "type_batch:Error",
              "type_batch:EvaluationArgs",
              "type_batch:Face",
              "type_batch:FacePrediction",
              "type_batch:FacemeshPrediction",
              "type_batch:FacsScore",
              "type_batch:Failed",
              "type_batch:File",
              "type_batch:Granularity",
              "type_batch:GroupedPredictionsBurstPrediction",
              "type_batch:GroupedPredictionsFacePrediction",
              "type_batch:GroupedPredictionsFacemeshPrediction",
              "type_batch:GroupedPredictionsLanguagePrediction",
              "type_batch:GroupedPredictionsNerPrediction",
              "type_batch:GroupedPredictionsProsodyPrediction",
              "type_batch:InProgress",
              "type_batch:InferenceBaseRequest",
              "type_batch:InferencePrediction",
              "type_batch:InferenceRequest",
              "type_batch:InferenceResults",
              "type_batch:InferenceSourcePredictResult",
              "type_batch:JobEmbeddingGeneration",
              "type_batch:JobInference",
              "type_batch:JobTlInference",
              "type_batch:JobTraining",
              "type_batch:JobId",
              "type_batch:Language",
              "type_batch:LanguagePrediction",
              "type_batch:Models",
              "type_batch:ModelsPredictions",
              "type_batch:Ner",
              "type_batch:NerPrediction",
              "type_batch:Null",
              "type_batch:PositionInterval",
              "type_batch:PredictionsOptionalNullBurstPrediction",
              "type_batch:PredictionsOptionalNullFacePrediction",
              "type_batch:PredictionsOptionalNullFacemeshPrediction",
              "type_batch:PredictionsOptionalTranscriptionMetadataLanguagePrediction",
              "type_batch:PredictionsOptionalTranscriptionMetadataNerPrediction",
              "type_batch:PredictionsOptionalTranscriptionMetadataProsodyPrediction",
              "type_batch:Prosody",
              "type_batch:ProsodyPrediction",
              "type_batch:Queued",
              "type_batch:RegistryFileDetail",
              "type_batch:Regression",
              "type_batch:SentimentScore",
              "type_batch:SortBy",
              "type_batch:Source",
              "type_batch:SourceFile",
              "type_batch:SourceTextSource",
              "type_batch:SourceUrl",
              "type_batch:Url",
              "type_batch:StateEmbeddingGeneration",
              "type_batch:StateEmbeddingGenerationCompletedEmbeddingGeneration",
              "type_batch:StateEmbeddingGenerationFailed",
              "type_batch:StateEmbeddingGenerationInProgress",
              "type_batch:StateEmbeddingGenerationQueued",
              "type_batch:StateInference",
              "type_batch:CompletedState",
              "type_batch:FailedState",
              "type_batch:InProgressState",
              "type_batch:QueuedState",
              "type_batch:StateTlInference",
              "type_batch:StateTlInferenceCompletedTlInference",
              "type_batch:StateTlInferenceFailed",
              "type_batch:StateTlInferenceInProgress",
              "type_batch:StateTlInferenceQueued",
              "type_batch:StateTraining",
              "type_batch:StateTrainingCompletedTraining",
              "type_batch:StateTrainingFailed",
              "type_batch:StateTrainingInProgress",
              "type_batch:StateTrainingQueued",
              "type_batch:Status",
              "type_batch:TlInferencePrediction",
              "type_batch:TlInferenceResults",
              "type_batch:TlInferenceSourcePredictResult",
              "type_batch:Tag",
              "type_batch:Target",
              "type_batch:Task",
              "type_batch:TaskClassification",
              "type_batch:TaskRegression",
              "type_batch:TextSource",
              "type_batch:TimeInterval",
              "type_batch:TlInferenceBaseRequest",
              "type_batch:CustomModel",
              "type_batch:CustomModelId",
              "type_batch:CustomModelVersionId",
              "type_batch:ToxicityScore",
              "type_batch:TrainingBaseRequest",
              "type_batch:TrainingCustomModel",
              "type_batch:Transcription",
              "type_batch:TranscriptionMetadata",
              "type_batch:Type",
              "type_batch:Unconfigurable",
              "type_batch:UnionJob",
              "type_batch:EmbeddingGenerationJob",
              "type_batch:InferenceJob",
              "type_batch:CustomModelsInferenceJob",
              "type_batch:CustomModelsTrainingJob",
              "type_batch:UnionPredictResult",
              "type_batch:ValidationArgs",
              "type_batch:When",
              "type_batch:Window"
            ],
            "subpackages": [],
            "urlSlug": "batch",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_stream": {
            "subpackageId": "subpackage_stream",
            "name": "stream",
            "endpoints": [],
            "types": [
              "type_stream:StreamModelPredictionsJobDetails",
              "type_stream:StreamModelPredictionsBurstPredictionsItem",
              "type_stream:StreamModelPredictionsBurst",
              "type_stream:StreamModelPredictionsFacePredictionsItem",
              "type_stream:StreamModelPredictionsFace",
              "type_stream:StreamModelPredictionsFacemeshPredictionsItem",
              "type_stream:StreamModelPredictionsFacemesh",
              "type_stream:StreamModelPredictionsLanguagePredictionsItem",
              "type_stream:StreamModelPredictionsLanguage",
              "type_stream:StreamModelPredictionsProsodyPredictionsItem",
              "type_stream:StreamModelPredictionsProsody",
              "type_stream:StreamModelPredictions",
              "type_stream:JobDetails",
              "type_stream:StreamErrorMessage",
              "type_stream:StreamWarningMessageJobDetails",
              "type_stream:StreamWarningMessage",
              "type_stream:SubscribeEvent",
              "type_stream:StreamFace",
              "type_stream:StreamLanguage",
              "type_stream:Config",
              "type_stream:StreamModelsEndpointPayload",
              "type_stream:EmotionEmbeddingItem",
              "type_stream:EmotionEmbedding",
              "type_stream:StreamBoundingBox",
              "type_stream:TimeRange",
              "type_stream:TextPosition",
              "type_stream:SentimentItem",
              "type_stream:Sentiment",
              "type_stream:ToxicityItem",
              "type_stream:Toxicity"
            ],
            "subpackages": [],
            "urlSlug": "stream",
            "webhooks": [],
            "websockets": [
              {
                "urlSlug": "stream",
                "auth": false,
                "headers": [
                  {
                    "key": "X-Hume-Api-Key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "messages": [
                  {
                    "type": "subscribe",
                    "origin": "server",
                    "body": {
                      "type": "reference",
                      "value": {
                        "type": "id",
                        "value": "type_stream:SubscribeEvent"
                      }
                    }
                  },
                  {
                    "type": "publish",
                    "origin": "client",
                    "body": {
                      "type": "reference",
                      "value": {
                        "type": "id",
                        "value": "type_stream:StreamModelsEndpointPayload"
                      }
                    }
                  }
                ],
                "defaultEnvironment": "Default",
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "wss://api.hume.ai"
                  }
                ],
                "id": "Stream",
                "name": "Stream",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/stream/models"
                    }
                  ]
                },
                "queryParameters": [],
                "examples": [
                  {
                    "path": "/v0/stream/models",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "messages": [
                      {
                        "type": "publish",
                        "body": {}
                      },
                      {
                        "type": "subscribe",
                        "body": {}
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        "auth": {
          "type": "header",
          "headerWireValue": "X-Hume-Api-Key",
          "nameOverride": "apiKey"
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      },
      "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c": {
        "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
        "rootPackage": {
          "endpoints": [],
          "subpackages": [
            "subpackage_tools",
            "subpackage_prompts",
            "subpackage_customVoices",
            "subpackage_configs",
            "subpackage_chats",
            "subpackage_chatGroups",
            "subpackage_chat"
          ],
          "types": [
            "type_:ErrorResponse",
            "type_:ReturnUserDefinedToolToolType",
            "type_:ReturnUserDefinedToolVersionType",
            "type_:ReturnUserDefinedTool",
            "type_:ReturnPromptVersionType",
            "type_:ReturnPrompt",
            "type_:PostedCustomVoiceBaseVoice",
            "type_:PostedCustomVoiceParameters",
            "type_:PostedCustomVoice",
            "type_:ReturnCustomVoiceBaseVoice",
            "type_:ReturnCustomVoiceParameters",
            "type_:ReturnCustomVoice",
            "type_:PostedBuiltinToolName",
            "type_:PostedBuiltinTool",
            "type_:PostedConfigPromptSpec",
            "type_:PostedEllmModel",
            "type_:PostedEventMessageSpec",
            "type_:PostedEventMessageSpecs",
            "type_:PostedLanguageModelModelProvider",
            "type_:PostedLanguageModelModelResource",
            "type_:PostedLanguageModel",
            "type_:PostedTimeoutSpec",
            "type_:PostedTimeoutSpecsInactivity",
            "type_:PostedTimeoutSpecsMaxDuration",
            "type_:PostedTimeoutSpecs",
            "type_:PostedUserDefinedToolSpec",
            "type_:PostedVoiceProvider",
            "type_:PostedVoice",
            "type_:ReturnBuiltinToolToolType",
            "type_:ReturnBuiltinTool",
            "type_:ReturnConfig",
            "type_:ReturnEllmModel",
            "type_:ReturnEventMessageSpec",
            "type_:ReturnEventMessageSpecs",
            "type_:ReturnLanguageModelModelProvider",
            "type_:ReturnLanguageModelModelResource",
            "type_:ReturnLanguageModel",
            "type_:ReturnTimeoutSpec",
            "type_:ReturnTimeoutSpecs",
            "type_:ReturnVoiceProvider",
            "type_:ReturnVoice",
            "type_:ReturnPagedUserDefinedTools",
            "type_:ReturnPagedPrompts",
            "type_:ReturnPagedCustomVoices",
            "type_:ReturnPagedConfigs",
            "type_:ReturnChatStatus",
            "type_:ReturnChat",
            "type_:ReturnConfigSpec",
            "type_:ReturnPagedChatsPaginationDirection",
            "type_:ReturnPagedChats",
            "type_:ReturnChatEventRole",
            "type_:ReturnChatEventType",
            "type_:ReturnChatEvent",
            "type_:ReturnChatPagedEventsStatus",
            "type_:ReturnChatPagedEventsPaginationDirection",
            "type_:ReturnChatPagedEvents",
            "type_:ReturnChatAudioReconstructionStatus",
            "type_:ReturnChatAudioReconstruction",
            "type_:ReturnActiveChatCount",
            "type_:ReturnActiveChatCountPerTag",
            "type_:ReturnChatGroup",
            "type_:ReturnPagedChatGroupsPaginationDirection",
            "type_:ReturnPagedChatGroups",
            "type_:ReturnChatGroupPagedChatsPaginationDirection",
            "type_:ReturnChatGroupPagedChats",
            "type_:ReturnChatGroupPagedEventsPaginationDirection",
            "type_:ReturnChatGroupPagedEvents",
            "type_:ReturnChatGroupPagedAudioReconstructionsPaginationDirection",
            "type_:ReturnChatGroupPagedAudioReconstructions",
            "type_:PostedPromptSpec",
            "type_:AssistantInput",
            "type_:AudioConfiguration",
            "type_:AudioInput",
            "type_:BuiltInTool",
            "type_:BuiltinToolConfig",
            "type_:Context",
            "type_:ContextType",
            "type_:Encoding",
            "type_:ErrorLevel",
            "type_:PauseAssistantMessage",
            "type_:ResumeAssistantMessage",
            "type_:SessionSettings",
            "type_:Tool",
            "type_:ToolErrorMessage",
            "type_:ToolResponseMessage",
            "type_:ToolType",
            "type_:UserInput",
            "type_:AssistantEnd",
            "type_:AssistantMessage",
            "type_:AudioOutput",
            "type_:ChatMessageToolResult",
            "type_:ChatMessage",
            "type_:ChatMetadata",
            "type_:EmotionScores",
            "type_:WebSocketError",
            "type_:Inference",
            "type_:MillisecondInterval",
            "type_:ProsodyInference",
            "type_:Role",
            "type_:ToolCallMessage",
            "type_:UserInterruption",
            "type_:UserMessage",
            "type_:JsonMessage",
            "type_:TtsInput",
            "type_:TextInput",
            "type_:FunctionCallResponseInput",
            "type_:HTTPValidationError",
            "type_:ValidationErrorLocItem",
            "type_:ValidationError",
            "type_:VoiceNameEnum"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_chat:SubscribeEvent": {
            "name": "SubscribeEvent",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:AssistantEnd"
                  },
                  "displayName": "Assistant End"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:AssistantMessage"
                  },
                  "displayName": "Assistant Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:AudioOutput"
                  },
                  "displayName": "Audio Output"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ChatMetadata"
                  },
                  "displayName": "Chat Metadata"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:WebSocketError"
                  },
                  "displayName": "Web Socket Error"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:UserInterruption"
                  },
                  "displayName": "User Interruption"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:UserMessage"
                  },
                  "displayName": "User Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolCallMessage"
                  },
                  "displayName": "Tool Call Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolResponseMessage"
                  },
                  "displayName": "Tool Response Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolErrorMessage"
                  },
                  "displayName": "Tool Error Message"
                }
              ]
            }
          },
          "type_chat:PublishEvent": {
            "name": "PublishEvent",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:AudioInput"
                  },
                  "displayName": "Audio Input"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:SessionSettings"
                  },
                  "displayName": "Session Settings"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:UserInput"
                  },
                  "displayName": "User Input"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:AssistantInput"
                  },
                  "displayName": "Assistant Input"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolResponseMessage"
                  },
                  "displayName": "Tool Response Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolErrorMessage"
                  },
                  "displayName": "Tool Error Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:PauseAssistantMessage"
                  },
                  "displayName": "Pause Assistant Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ResumeAssistantMessage"
                  },
                  "displayName": "Resume Assistant Message"
                }
              ]
            }
          },
          "type_:ErrorResponse": {
            "name": "ErrorResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnUserDefinedToolToolType": {
            "description": "Type of Tool. Either `BUILTIN` for natively implemented tools, like web search, or `FUNCTION` for user-defined tools.",
            "name": "ReturnUserDefinedToolToolType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "BUILTIN"
                },
                {
                  "value": "FUNCTION"
                }
              ]
            }
          },
          "type_:ReturnUserDefinedToolVersionType": {
            "description": "Versioning method for a Tool. Either `FIXED` for using a fixed version number or `LATEST` for auto-updating to the latest version.",
            "name": "ReturnUserDefinedToolVersionType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "FIXED"
                },
                {
                  "value": "LATEST"
                }
              ]
            }
          },
          "type_:ReturnUserDefinedTool": {
            "description": "A specific tool version returned from the server",
            "name": "ReturnUserDefinedTool",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Type of Tool. Either `BUILTIN` for natively implemented tools, like web search, or `FUNCTION` for user-defined tools.",
                  "key": "tool_type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnUserDefinedToolToolType"
                  }
                },
                {
                  "description": "Identifier for a Tool. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Version number for a Tool.\n\nTools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number.",
                  "key": "version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Versioning method for a Tool. Either `FIXED` for using a fixed version number or `LATEST` for auto-updating to the latest version.",
                  "key": "version_type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnUserDefinedToolVersionType"
                  }
                },
                {
                  "description": "An optional description of the Tool version.",
                  "key": "version_description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Name applied to all versions of a particular Tool.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Time at which the Tool was created. Measured in seconds since the Unix epoch.",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "Time at which the Tool was last modified. Measured in seconds since the Unix epoch.",
                  "key": "modified_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "Optional text passed to the supplemental LLM in place of the tool call result. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation if the Tool errors.",
                  "key": "fallback_content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An optional description of what the Tool does, used by the supplemental LLM to choose when and how to call the function.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Stringified JSON defining the parameters used by this version of the Tool.\n\nThese parameters define the inputs needed for the Tool’s execution, including the expected data type and description for each input field. Structured as a stringified JSON schema, this format ensures the tool receives data in the expected format.",
                  "key": "parameters",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnPromptVersionType": {
            "description": "Versioning method for a Prompt. Either `FIXED` for using a fixed version number or `LATEST` for auto-updating to the latest version.",
            "name": "ReturnPromptVersionType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "FIXED"
                },
                {
                  "value": "LATEST"
                }
              ]
            }
          },
          "type_:ReturnPrompt": {
            "description": "A Prompt associated with this Config.",
            "name": "ReturnPrompt",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a Prompt. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Version number for a Prompt.\n\nPrompts, Configs, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine prompts and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Prompt. Each update to the Prompt increments its version number.",
                  "key": "version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Versioning method for a Prompt. Either `FIXED` for using a fixed version number or `LATEST` for auto-updating to the latest version.",
                  "key": "version_type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnPromptVersionType"
                  }
                },
                {
                  "description": "An optional description of the Prompt version.",
                  "key": "version_description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Name applied to all versions of a particular Prompt.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Time at which the Prompt was created. Measured in seconds since the Unix epoch.",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "Time at which the Prompt was last modified. Measured in seconds since the Unix epoch.",
                  "key": "modified_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "Instructions used to shape EVI’s behavior, responses, and style.\n\nYou can use the Prompt to define a specific goal or role for EVI, specifying how it should act or what it should focus on during the conversation. For example, EVI can be instructed to act as a customer support representative, a fitness coach, or a travel advisor, each with its own set of behaviors and response styles.\n\nFor help writing a system prompt, see our [Prompting Guide](/docs/empathic-voice-interface-evi/prompting).",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedCustomVoiceBaseVoice": {
            "description": "Specifies the base voice used to create the Custom Voice.",
            "name": "PostedCustomVoiceBaseVoice",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ITO"
                },
                {
                  "value": "KORA"
                },
                {
                  "value": "DACHER"
                },
                {
                  "value": "AURA"
                },
                {
                  "value": "FINN"
                },
                {
                  "value": "WHIMSY"
                },
                {
                  "value": "STELLA"
                },
                {
                  "value": "SUNNY"
                }
              ]
            }
          },
          "type_:PostedCustomVoiceParameters": {
            "description": "The specified attributes of a Custom Voice.\n\nIf no parameters are specified then all attributes will be set to their defaults, meaning no modfications will be made to the base voice.",
            "name": "PostedCustomVoiceParameters",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The vocalization of gender, ranging between more masculine and more feminine.\n\nThe default value is `0`, with a minimum of `-100` (more masculine) and a maximum of `100` (more feminine). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "gender",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The clarity of the voice, ranging between mumbled and articulate.\n\nThe default value is `0`, with a minimum of `-100` (mumbled) and a maximum of `100` (articulate). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "articulation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The firmness of the voice, ranging between whiny and bold.\n\nThe default value is `0`, with a minimum of `-100` (whiny) and a maximum of `100` (bold). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "assertiveness",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The density of the voice, ranging between deflated and buoyant.\n\nThe default value is `0`, with a minimum of `-100` (deflated) and a maximum of `100` (buoyant). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "buoyancy",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The assuredness of the voice, ranging between shy and confident.\n\nThe default value is `0`, with a minimum of `-100` (shy) and a maximum of `100` (confident). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The excitement within the voice, ranging between calm and enthusiastic.\n\nThe default value is `0`, with a minimum of `-100` (calm) and a maximum of `100` (enthusiastic). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "enthusiasm",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The openness of the voice, ranging between clear and nasal.\n\nThe default value is `0`, with a minimum of `-100` (clear) and a maximum of `100` (nasal). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "nasality",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The stress within the voice, ranging between tense and relaxed.\n\nThe default value is `0`, with a minimum of `-100` (tense) and a maximum of `100` (relaxed). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "relaxedness",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The texture of the voice, ranging between smooth and staccato.\n\nThe default value is `0`, with a minimum of `-100` (smooth) and a maximum of `100` (staccato). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "smoothness",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The liveliness behind the voice, ranging between tepid and vigorous.\n\nThe default value is `0`, with a minimum of `-100` (tepid) and a maximum of `100` (vigorous). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "tepidity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The containment of the voice, ranging between tight and breathy.\n\nThe default value is `0`, with a minimum of `-100` (tight) and a maximum of `100` (breathy). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "tightness",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedCustomVoice": {
            "description": "A Custom Voice specification to be associated with this Config.\n\nIf a Custom Voice specification is not provided then the [name](/reference/empathic-voice-interface-evi/configs/create-config#request.body.voice.name) of a base voice or previously created Custom Voice must be provided.\n\nSee our [Voices guide](/docs/empathic-voice-interface-evi/voices) for a tutorial on how to craft a Custom Voice.",
            "name": "PostedCustomVoice",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the Custom Voice. Maximum length of 75 characters. Will be converted to all-uppercase. (e.g., \"sample voice\" becomes \"SAMPLE VOICE\")",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Specifies the base voice used to create the Custom Voice.",
                  "key": "base_voice",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PostedCustomVoiceBaseVoice"
                  }
                },
                {
                  "description": "The name of the parameter model used to define which attributes are used by the `parameters` field. Currently, only `20241004-11parameter` is supported as the parameter model.",
                  "key": "parameter_model",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "20241004-11parameter"
                    }
                  }
                },
                {
                  "description": "The specified attributes of a Custom Voice.\n\nIf no parameters are specified then all attributes will be set to their defaults, meaning no modfications will be made to the base voice.",
                  "key": "parameters",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PostedCustomVoiceParameters"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnCustomVoiceBaseVoice": {
            "description": "The base voice used to create the Custom Voice.",
            "name": "ReturnCustomVoiceBaseVoice",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ITO"
                },
                {
                  "value": "KORA"
                },
                {
                  "value": "DACHER"
                },
                {
                  "value": "AURA"
                },
                {
                  "value": "FINN"
                },
                {
                  "value": "WHIMSY"
                },
                {
                  "value": "STELLA"
                },
                {
                  "value": "SUNNY"
                }
              ]
            }
          },
          "type_:ReturnCustomVoiceParameters": {
            "description": "The specified attributes of a Custom Voice. If a parameter's value is `0` (default), it will not be included in the response.",
            "name": "ReturnCustomVoiceParameters",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The vocalization of gender, ranging between more masculine and more feminine.\n\nThe default value is `0`, with a minimum of `-100` (more masculine) and a maximum of `100` (more feminine). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "gender",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The clarity of the voice, ranging between mumbled and articulate.\n\nThe default value is `0`, with a minimum of `-100` (mumbled) and a maximum of `100` (articulate). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "articulation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The firmness of the voice, ranging between whiny and bold.\n\nThe default value is `0`, with a minimum of `-100` (whiny) and a maximum of `100` (bold). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "assertiveness",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The density of the voice, ranging between deflated and buoyant.\n\nThe default value is `0`, with a minimum of `-100` (deflated) and a maximum of `100` (buoyant). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "buoyancy",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The assuredness of the voice, ranging between shy and confident.\n\nThe default value is `0`, with a minimum of `-100` (shy) and a maximum of `100` (confident). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The excitement within the voice, ranging between calm and enthusiastic.\n\nThe default value is `0`, with a minimum of `-100` (calm) and a maximum of `100` (enthusiastic). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "enthusiasm",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The openness of the voice, ranging between clear and nasal.\n\nThe default value is `0`, with a minimum of `-100` (clear) and a maximum of `100` (nasal). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "nasality",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The stress within the voice, ranging between tense and relaxed.\n\nThe default value is `0`, with a minimum of `-100` (tense) and a maximum of `100` (relaxed). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "relaxedness",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The texture of the voice, ranging between smooth and staccato.\n\nThe default value is `0`, with a minimum of `-100` (smooth) and a maximum of `100` (staccato). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "smoothness",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The liveliness behind the voice, ranging between tepid and vigorous.\n\nThe default value is `0`, with a minimum of `-100` (tepid) and a maximum of `100` (vigorous). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "tepidity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The containment of the voice, ranging between tight and breathy.\n\nThe default value is `0`, with a minimum of `-100` (tight) and a maximum of `100` (breathy). A value of `0` leaves this parameter unchanged from the base voice.",
                  "key": "tightness",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnCustomVoice": {
            "description": "A Custom Voice specification associated with this Config.",
            "name": "ReturnCustomVoice",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a Custom Voice. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Version number for a Custom Voice.\n\nCustom Voices, Prompts, Configs, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Custom Voice. Each update to the Custom Voice increments its version number.",
                  "key": "version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The name of the Custom Voice. Maximum length of 75 characters.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Time at which the Custom Voice was created. Measured in seconds since the Unix epoch.",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "Time at which the Custom Voice was last modified. Measured in seconds since the Unix epoch.",
                  "key": "modified_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "The base voice used to create the Custom Voice.",
                  "key": "base_voice",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnCustomVoiceBaseVoice"
                  }
                },
                {
                  "description": "The name of the parameter model used to define which attributes are used by the `parameters` field. Currently, only `20241004-11parameter` is supported as the parameter model.",
                  "key": "parameter_model",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "20241004-11parameter"
                    }
                  }
                },
                {
                  "description": "The specified attributes of a Custom Voice. If a parameter's value is `0` (default), it will not be included in the response.",
                  "key": "parameters",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnCustomVoiceParameters"
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedBuiltinToolName": {
            "description": "Name of the built-in tool to use. Hume supports the following built-in tools:\n\n- **web_search:** enables EVI to search the web for up-to-date information when applicable.\n- **hang_up:** closes the WebSocket connection when appropriate (e.g., after detecting a farewell in the conversation).\n\nFor more information, see our guide on [using built-in tools](/docs/empathic-voice-interface-evi/tool-use#using-built-in-tools).",
            "name": "PostedBuiltinToolName",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "web_search"
                },
                {
                  "value": "hang_up"
                }
              ]
            }
          },
          "type_:PostedBuiltinTool": {
            "description": "A configuration of a built-in tool to be posted to the server",
            "name": "PostedBuiltinTool",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the built-in tool to use. Hume supports the following built-in tools:\n\n- **web_search:** enables EVI to search the web for up-to-date information when applicable.\n- **hang_up:** closes the WebSocket connection when appropriate (e.g., after detecting a farewell in the conversation).\n\nFor more information, see our guide on [using built-in tools](/docs/empathic-voice-interface-evi/tool-use#using-built-in-tools).",
                  "key": "name",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PostedBuiltinToolName"
                  }
                },
                {
                  "description": "Optional text passed to the supplemental LLM in place of the tool call result. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation if the Tool errors.",
                  "key": "fallback_content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedConfigPromptSpec": {
            "description": "Identifies which prompt to use in a a config OR how to create a new prompt to use in the config",
            "name": "PostedConfigPromptSpec",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a Prompt. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Version number for a Prompt. Version numbers should be integers. The combination of configId and version number is unique.",
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Text used to create a new prompt for a particular config.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedEllmModel": {
            "description": "A eLLM model configuration to be posted to the server",
            "name": "PostedEllmModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Boolean indicating if the eLLM is allowed to generate short responses.\n\nIf omitted, short responses from the eLLM are enabled by default.",
                  "key": "allow_short_responses",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedEventMessageSpec": {
            "description": "Settings for a specific event_message to be posted to the server",
            "name": "PostedEventMessageSpec",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Boolean indicating if this event message is enabled.\n\nIf set to `true`, a message will be sent when the circumstances for the specific event are met.",
                  "key": "enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                {
                  "description": "Text to use as the event message when the corresponding event occurs. If no text is specified, EVI will generate an appropriate message based on its current context and the system prompt.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedEventMessageSpecs": {
            "description": "Collection of event messages returned by the server.\n\nEvent messages are sent by the server when specific events occur during a chat session. These messages are used to configure behaviors for EVI, such as controlling how EVI starts a new conversation.",
            "name": "PostedEventMessageSpecs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Specifies the initial message EVI provides when a new chat is started, such as a greeting or welcome message.",
                  "key": "on_new_chat",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PostedEventMessageSpec"
                    }
                  }
                },
                {
                  "description": "Specifies the message EVI provides when the chat is about to be disconnected due to a user inactivity timeout, such as a message mentioning a lack of user input for a period of time.\n\nEnabling an inactivity message allows developers to use this message event for \"checking in\" with the user if they are not responding to see if they are still active.\n\nIf the user does not respond in the number of seconds specified in the `inactivity_timeout` field, then EVI will say the message and the user has 15 seconds to respond. If they respond in time, the conversation will continue; if not, the conversation will end.\n\nHowever, if the inactivity message is not enabled, then reaching the inactivity timeout will immediately end the connection.",
                  "key": "on_inactivity_timeout",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PostedEventMessageSpec"
                    }
                  }
                },
                {
                  "description": "Specifies the message EVI provides when the chat is disconnected due to reaching the maximum chat duration, such as a message mentioning the time limit for the chat has been reached.",
                  "key": "on_max_duration_timeout",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PostedEventMessageSpec"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedLanguageModelModelProvider": {
            "description": "The provider of the supplemental language model.",
            "name": "PostedLanguageModelModelProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "OPEN_AI"
                },
                {
                  "value": "CUSTOM_LANGUAGE_MODEL"
                },
                {
                  "value": "ANTHROPIC"
                },
                {
                  "value": "FIREWORKS"
                },
                {
                  "value": "GROQ"
                },
                {
                  "value": "GOOGLE"
                }
              ]
            }
          },
          "type_:PostedLanguageModelModelResource": {
            "description": "String that specifies the language model to use with `model_provider`.",
            "name": "PostedLanguageModelModelResource",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "claude-3-5-sonnet-latest"
                },
                {
                  "value": "claude-3-5-sonnet-20240620"
                },
                {
                  "value": "claude-3-opus-20240229"
                },
                {
                  "value": "claude-3-sonnet-20240229"
                },
                {
                  "value": "claude-3-haiku-20240307"
                },
                {
                  "value": "claude-2.1"
                },
                {
                  "value": "claude-instant-1.2"
                },
                {
                  "value": "gemini-1.5-pro"
                },
                {
                  "value": "gemini-1.5-flash"
                },
                {
                  "value": "gemini-1.5-pro-002"
                },
                {
                  "value": "gemini-1.5-flash-002"
                },
                {
                  "value": "gpt-4-turbo-preview"
                },
                {
                  "value": "gpt-3.5-turbo-0125"
                },
                {
                  "value": "gpt-3.5-turbo"
                },
                {
                  "value": "gpt-4o"
                },
                {
                  "value": "gpt-4o-mini"
                },
                {
                  "value": "gemma-7b-it"
                },
                {
                  "value": "llama3-8b-8192"
                },
                {
                  "value": "llama3-70b-8192"
                },
                {
                  "value": "llama-3.1-70b-versatile"
                },
                {
                  "value": "llama-3.1-8b-instant"
                },
                {
                  "value": "accounts/fireworks/models/mixtral-8x7b-instruct"
                },
                {
                  "value": "accounts/fireworks/models/llama-v3p1-405b-instruct"
                },
                {
                  "value": "accounts/fireworks/models/llama-v3p1-70b-instruct"
                },
                {
                  "value": "accounts/fireworks/models/llama-v3p1-8b-instruct"
                },
                {
                  "value": "ellm"
                }
              ]
            }
          },
          "type_:PostedLanguageModel": {
            "description": "A LanguageModel to be posted to the server",
            "name": "PostedLanguageModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The provider of the supplemental language model.",
                  "key": "model_provider",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PostedLanguageModelModelProvider"
                    }
                  }
                },
                {
                  "description": "String that specifies the language model to use with `model_provider`.",
                  "key": "model_resource",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PostedLanguageModelModelResource"
                    }
                  }
                },
                {
                  "description": "The model temperature, with values between 0 to 1 (inclusive).\n\nControls the randomness of the LLM’s output, with values closer to 0 yielding focused, deterministic responses and values closer to 1 producing more creative, diverse responses.",
                  "key": "temperature",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 2.2250738585072014e-308,
                        "maximum": 1.7976931348623157e308,
                        "default": 0
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedTimeoutSpec": {
            "description": "Settings for a specific timeout to be posted to the server",
            "name": "PostedTimeoutSpec",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Boolean indicating if this event message is enabled.",
                  "key": "enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                {
                  "description": "Duration in seconds for the timeout.",
                  "key": "duration_secs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedTimeoutSpecsInactivity": {
            "description": "Specifies the duration of user inactivity (in seconds) after which the EVI WebSocket connection will be automatically disconnected. Default is 600 seconds (10 minutes).\n\nAccepts a minimum value of 30 seconds and a maximum value of 1,800 seconds.",
            "name": "PostedTimeoutSpecsInactivity",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Boolean indicating if this timeout is enabled.\n\nIf set to false, EVI will not timeout due to a specified duration of user inactivity being reached. However, the conversation will eventually disconnect after 1,800 seconds (30 minutes), which is the maximum WebSocket duration limit for EVI.",
                  "key": "enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                {
                  "description": "Duration in seconds for the timeout (e.g. 600 seconds represents 10 minutes).",
                  "key": "duration_secs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedTimeoutSpecsMaxDuration": {
            "description": "Specifies the maximum allowed duration (in seconds) for an EVI WebSocket connection before it is automatically disconnected. Default is 1,800 seconds (30 minutes).\n\nAccepts a minimum value of 30 seconds and a maximum value of 1,800 seconds.",
            "name": "PostedTimeoutSpecsMaxDuration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Boolean indicating if this timeout is enabled.\n\nIf set to false, EVI will not timeout due to a specified maximum duration being reached. However, the conversation will eventually disconnect after 1,800 seconds (30 minutes), which is the maximum WebSocket duration limit for EVI.",
                  "key": "enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                {
                  "description": "Duration in seconds for the timeout (e.g. 600 seconds represents 10 minutes).",
                  "key": "duration_secs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedTimeoutSpecs": {
            "description": "Collection of timeout specifications returned by the server.\n\nTimeouts are sent by the server when specific time-based events occur during a chat session. These specifications set the inactivity timeout and the maximum duration an EVI WebSocket connection can stay open before it is automatically disconnected.",
            "name": "PostedTimeoutSpecs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Specifies the duration of user inactivity (in seconds) after which the EVI WebSocket connection will be automatically disconnected. Default is 600 seconds (10 minutes).\n\nAccepts a minimum value of 30 seconds and a maximum value of 1,800 seconds.",
                  "key": "inactivity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PostedTimeoutSpecsInactivity"
                    }
                  }
                },
                {
                  "description": "Specifies the maximum allowed duration (in seconds) for an EVI WebSocket connection before it is automatically disconnected. Default is 1,800 seconds (30 minutes).\n\nAccepts a minimum value of 30 seconds and a maximum value of 1,800 seconds.",
                  "key": "max_duration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PostedTimeoutSpecsMaxDuration"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedUserDefinedToolSpec": {
            "description": "A specific tool identifier to be posted to the server",
            "name": "PostedUserDefinedToolSpec",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a Tool. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Version number for a Tool.\n\nTools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number.",
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedVoiceProvider": {
            "description": "The provider of the voice to use. Supported values are `HUME_AI` and `CUSTOM_VOICE`.",
            "name": "PostedVoiceProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "HUME_AI"
                },
                {
                  "value": "CUSTOM_VOICE"
                }
              ]
            }
          },
          "type_:PostedVoice": {
            "description": "A Voice specification posted to the server",
            "name": "PostedVoice",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The provider of the voice to use. Supported values are `HUME_AI` and `CUSTOM_VOICE`.",
                  "key": "provider",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PostedVoiceProvider"
                  }
                },
                {
                  "description": "Specifies the name of the voice to use.\n\nThis can be either the name of a previously created Custom Voice or one of our 8 base voices: `ITO`, `KORA`, `DACHER`, `AURA`, `FINN`, `WHIMSY`, `STELLA`, or `SUNNY`.\n\nThe name will be automatically converted to uppercase (e.g., \"Ito\" becomes \"ITO\"). If a name is not specified, then a [Custom Voice](/reference/empathic-voice-interface-evi/configs/create-config#request.body.voice.custom_voice) specification must be provided.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "custom_voice",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PostedCustomVoice"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnBuiltinToolToolType": {
            "description": "Type of Tool. Either `BUILTIN` for natively implemented tools, like web search, or `FUNCTION` for user-defined tools.",
            "name": "ReturnBuiltinToolToolType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "BUILTIN"
                },
                {
                  "value": "FUNCTION"
                }
              ]
            }
          },
          "type_:ReturnBuiltinTool": {
            "description": "A specific builtin tool version returned from the server",
            "name": "ReturnBuiltinTool",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Type of Tool. Either `BUILTIN` for natively implemented tools, like web search, or `FUNCTION` for user-defined tools.",
                  "key": "tool_type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnBuiltinToolToolType"
                  }
                },
                {
                  "description": "Name applied to all versions of a particular Tool.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Optional text passed to the supplemental LLM in place of the tool call result. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation if the Tool errors.",
                  "key": "fallback_content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnConfig": {
            "description": "A specific config version returned from the server",
            "name": "ReturnConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a Config. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Version number for a Config.\n\nConfigs, Prompts, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number.",
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Specifies the EVI version to use. Use `\"1\"` for version 1, or `\"2\"` for the latest enhanced version. For a detailed comparison of the two versions, refer to our [guide](/docs/empathic-voice-interface-evi/evi-2).",
                  "key": "evi_version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An optional description of the Config version.",
                  "key": "version_description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Name applied to all versions of a particular Config.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Time at which the Config was created. Measured in seconds since the Unix epoch.",
                  "key": "created_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "description": "Time at which the Config was last modified. Measured in seconds since the Unix epoch.",
                  "key": "modified_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "key": "prompt",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnPrompt"
                    }
                  }
                },
                {
                  "description": "A voice specification associated with this Config.",
                  "key": "voice",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnVoice"
                    }
                  }
                },
                {
                  "description": "The supplemental language model associated with this Config.\n\nThis model is used to generate longer, more detailed responses from EVI. Choosing an appropriate supplemental language model for your use case is crucial for generating fast, high-quality responses from EVI.",
                  "key": "language_model",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnLanguageModel"
                    }
                  }
                },
                {
                  "description": "The eLLM setup associated with this Config.\n\nHume's eLLM (empathic Large Language Model) is a multimodal language model that takes into account both expression measures and language. The eLLM generates short, empathic language responses and guides text-to-speech (TTS) prosody.",
                  "key": "ellm_model",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnEllmModel"
                    }
                  }
                },
                {
                  "description": "List of user-defined tools associated with this Config.",
                  "key": "tools",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:ReturnUserDefinedTool"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of built-in tools associated with this Config.",
                  "key": "builtin_tools",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:ReturnBuiltinTool"
                        }
                      }
                    }
                  }
                },
                {
                  "key": "event_messages",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnEventMessageSpecs"
                    }
                  }
                },
                {
                  "key": "timeouts",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnTimeoutSpecs"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnEllmModel": {
            "description": "A specific eLLM Model configuration",
            "name": "ReturnEllmModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Boolean indicating if the eLLM is allowed to generate short responses.\n\nIf omitted, short responses from the eLLM are enabled by default.",
                  "key": "allow_short_responses",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnEventMessageSpec": {
            "description": "A specific event message configuration to be returned from the server",
            "name": "ReturnEventMessageSpec",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Boolean indicating if this event message is enabled.\n\nIf set to `true`, a message will be sent when the circumstances for the specific event are met.",
                  "key": "enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                {
                  "description": "Text to use as the event message when the corresponding event occurs. If no text is specified, EVI will generate an appropriate message based on its current context and the system prompt.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnEventMessageSpecs": {
            "description": "Collection of event messages returned by the server.\n\nEvent messages are sent by the server when specific events occur during a chat session. These messages are used to configure behaviors for EVI, such as controlling how EVI starts a new conversation.",
            "name": "ReturnEventMessageSpecs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Specifies the initial message EVI provides when a new chat is started, such as a greeting or welcome message.",
                  "key": "on_new_chat",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnEventMessageSpec"
                    }
                  }
                },
                {
                  "description": "Specifies the message EVI provides when the chat is about to be disconnected due to a user inactivity timeout, such as a message mentioning a lack of user input for a period of time.\n\nEnabling an inactivity message allows developers to use this message event for \"checking in\" with the user if they are not responding to see if they are still active.\n\nIf the user does not respond in the number of seconds specified in the `inactivity_timeout` field, then EVI will say the message and the user has 15 seconds to respond. If they respond in time, the conversation will continue; if not, the conversation will end.\n\nHowever, if the inactivity message is not enabled, then reaching the inactivity timeout will immediately end the connection.",
                  "key": "on_inactivity_timeout",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnEventMessageSpec"
                    }
                  }
                },
                {
                  "description": "Specifies the message EVI provides when the chat is disconnected due to reaching the maximum chat duration, such as a message mentioning the time limit for the chat has been reached.",
                  "key": "on_max_duration_timeout",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnEventMessageSpec"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnLanguageModelModelProvider": {
            "description": "The provider of the supplemental language model.",
            "name": "ReturnLanguageModelModelProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "OPEN_AI"
                },
                {
                  "value": "CUSTOM_LANGUAGE_MODEL"
                },
                {
                  "value": "ANTHROPIC"
                },
                {
                  "value": "FIREWORKS"
                },
                {
                  "value": "GROQ"
                },
                {
                  "value": "GOOGLE"
                }
              ]
            }
          },
          "type_:ReturnLanguageModelModelResource": {
            "description": "String that specifies the language model to use with `model_provider`.",
            "name": "ReturnLanguageModelModelResource",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "claude-3-5-sonnet-latest"
                },
                {
                  "value": "claude-3-5-sonnet-20240620"
                },
                {
                  "value": "claude-3-opus-20240229"
                },
                {
                  "value": "claude-3-sonnet-20240229"
                },
                {
                  "value": "claude-3-haiku-20240307"
                },
                {
                  "value": "claude-2.1"
                },
                {
                  "value": "claude-instant-1.2"
                },
                {
                  "value": "gemini-1.5-pro"
                },
                {
                  "value": "gemini-1.5-flash"
                },
                {
                  "value": "gemini-1.5-pro-002"
                },
                {
                  "value": "gemini-1.5-flash-002"
                },
                {
                  "value": "gpt-4-turbo-preview"
                },
                {
                  "value": "gpt-3.5-turbo-0125"
                },
                {
                  "value": "gpt-3.5-turbo"
                },
                {
                  "value": "gpt-4o"
                },
                {
                  "value": "gpt-4o-mini"
                },
                {
                  "value": "gemma-7b-it"
                },
                {
                  "value": "llama3-8b-8192"
                },
                {
                  "value": "llama3-70b-8192"
                },
                {
                  "value": "llama-3.1-70b-versatile"
                },
                {
                  "value": "llama-3.1-8b-instant"
                },
                {
                  "value": "accounts/fireworks/models/mixtral-8x7b-instruct"
                },
                {
                  "value": "accounts/fireworks/models/llama-v3p1-405b-instruct"
                },
                {
                  "value": "accounts/fireworks/models/llama-v3p1-70b-instruct"
                },
                {
                  "value": "accounts/fireworks/models/llama-v3p1-8b-instruct"
                },
                {
                  "value": "ellm"
                }
              ]
            }
          },
          "type_:ReturnLanguageModel": {
            "description": "A specific LanguageModel",
            "name": "ReturnLanguageModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The provider of the supplemental language model.",
                  "key": "model_provider",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnLanguageModelModelProvider"
                    }
                  }
                },
                {
                  "description": "String that specifies the language model to use with `model_provider`.",
                  "key": "model_resource",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnLanguageModelModelResource"
                    }
                  }
                },
                {
                  "description": "The model temperature, with values between 0 to 1 (inclusive).\n\nControls the randomness of the LLM’s output, with values closer to 0 yielding focused, deterministic responses and values closer to 1 producing more creative, diverse responses.",
                  "key": "temperature",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 2.2250738585072014e-308,
                        "maximum": 1.7976931348623157e308,
                        "default": 0
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnTimeoutSpec": {
            "description": "A specific timeout configuration to be returned from the server",
            "name": "ReturnTimeoutSpec",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Boolean indicating if this timeout is enabled.\n\nIf set to false, EVI will not timeout due to a specified duration being reached. However, the conversation will eventually disconnect after 1,800 seconds (30 minutes), which is the maximum WebSocket duration limit for EVI.",
                  "key": "enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                {
                  "description": "Duration in seconds for the timeout (e.g. 600 seconds represents 10 minutes).",
                  "key": "duration_secs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnTimeoutSpecs": {
            "description": "Collection of timeout specifications returned by the server.\n\nTimeouts are sent by the server when specific time-based events occur during a chat session. These specifications set the inactivity timeout and the maximum duration an EVI WebSocket connection can stay open before it is automatically disconnected.",
            "name": "ReturnTimeoutSpecs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Specifies the duration of user inactivity (in seconds) after which the EVI WebSocket connection will be automatically disconnected. Default is 600 seconds (10 minutes).\n\nAccepts a minimum value of 30 seconds and a maximum value of 1,800 seconds.",
                  "key": "inactivity",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnTimeoutSpec"
                  }
                },
                {
                  "description": "Specifies the maximum allowed duration (in seconds) for an EVI WebSocket connection before it is automatically disconnected. Default is 1,800 seconds (30 minutes).\n\nAccepts a minimum value of 30 seconds and a maximum value of 1,800 seconds.",
                  "key": "max_duration",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnTimeoutSpec"
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnVoiceProvider": {
            "description": "The provider of the voice to use. Supported values are `HUME_AI` and `CUSTOM_VOICE`.",
            "name": "ReturnVoiceProvider",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "HUME_AI"
                },
                {
                  "value": "CUSTOM_VOICE"
                }
              ]
            }
          },
          "type_:ReturnVoice": {
            "description": "A specific voice specification",
            "name": "ReturnVoice",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The provider of the voice to use. Supported values are `HUME_AI` and `CUSTOM_VOICE`.",
                  "key": "provider",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnVoiceProvider"
                  }
                },
                {
                  "description": "The name of the specified voice.\n\nThis will either be the name of a previously created Custom Voice or one of our 8 base voices: `ITO`, `KORA`, `DACHER`, `AURA`, `FINN`, `WHIMSY`, `STELLA`, or `SUNNY`.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "custom_voice",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnCustomVoice"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnPagedUserDefinedTools": {
            "description": "A paginated list of user defined tool versions returned from the server",
            "name": "ReturnPagedUserDefinedTools",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of pages in the collection.",
                  "key": "total_pages",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "List of tools returned for the specified `page_number` and `page_size`.",
                  "key": "tools_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnUserDefinedTool"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnPagedPrompts": {
            "description": "A paginated list of prompt versions returned from the server",
            "name": "ReturnPagedPrompts",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of pages in the collection.",
                  "key": "total_pages",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "List of prompts returned for the specified `page_number` and `page_size`.",
                  "key": "prompts_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnPrompt"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnPagedCustomVoices": {
            "description": "A paginated list of custom voices returned from the server",
            "name": "ReturnPagedCustomVoices",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of pages in the collection.",
                  "key": "total_pages",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "List of Custom Voices for the specified `page_number` and `page_size`.",
                  "key": "custom_voices_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnCustomVoice"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnPagedConfigs": {
            "description": "A paginated list of config versions returned from the server",
            "name": "ReturnPagedConfigs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing.",
                  "key": "page_number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request.",
                  "key": "page_size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The total number of pages in the collection.",
                  "key": "total_pages",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "List of configs returned for the specified `page_number` and `page_size`.",
                  "key": "configs_page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnConfig"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnChatStatus": {
            "description": "Indicates the current state of the chat. There are six possible statuses:\n\n- `ACTIVE`: The chat is currently active and ongoing.\n\n- `USER_ENDED`: The chat was manually ended by the user.\n\n- `USER_TIMEOUT`: The chat ended due to a user-defined timeout.\n\n- `MAX_DURATION_TIMEOUT`: The chat ended because it reached the maximum allowed duration.\n\n- `INACTIVITY_TIMEOUT`: The chat ended due to an inactivity timeout.\n\n- `ERROR`: The chat ended unexpectedly due to an error.",
            "name": "ReturnChatStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ACTIVE"
                },
                {
                  "value": "USER_ENDED"
                },
                {
                  "value": "USER_TIMEOUT"
                },
                {
                  "value": "MAX_DURATION_TIMEOUT"
                },
                {
                  "value": "INACTIVITY_TIMEOUT"
                },
                {
                  "value": "ERROR"
                }
              ]
            }
          },
          "type_:ReturnChat": {
            "description": "A description of chat and its status",
            "name": "ReturnChat",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a Chat. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Identifier for the Chat Group. Any chat resumed from this Chat will have the same `chat_group_id`. Formatted as a UUID.",
                  "key": "chat_group_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Indicates the current state of the chat. There are six possible statuses:\n\n- `ACTIVE`: The chat is currently active and ongoing.\n\n- `USER_ENDED`: The chat was manually ended by the user.\n\n- `USER_TIMEOUT`: The chat ended due to a user-defined timeout.\n\n- `MAX_DURATION_TIMEOUT`: The chat ended because it reached the maximum allowed duration.\n\n- `INACTIVITY_TIMEOUT`: The chat ended due to an inactivity timeout.\n\n- `ERROR`: The chat ended unexpectedly due to an error.",
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnChatStatus"
                  }
                },
                {
                  "description": "Time at which the Chat started. Measured in seconds since the Unix epoch.",
                  "key": "start_timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "Time at which the Chat ended. Measured in seconds since the Unix epoch.",
                  "key": "end_timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "description": "The total number of events currently in this chat.",
                  "key": "event_count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "description": "Stringified JSON with additional metadata about the chat.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnConfigSpec"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnConfigSpec": {
            "description": "The Config associated with this Chat.",
            "name": "ReturnConfigSpec",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a Config. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Version number for a Config.\n\nConfigs, Prompts, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number.",
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnPagedChatsPaginationDirection": {
            "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
            "name": "ReturnPagedChatsPaginationDirection",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ASC"
                },
                {
                  "value": "DESC"
                }
              ]
            }
          },
          "type_:ReturnPagedChats": {
            "description": "A paginated list of chats returned from the server",
            "name": "ReturnPagedChats",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of pages in the collection.",
                  "key": "total_pages",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
                  "key": "pagination_direction",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnPagedChatsPaginationDirection"
                  }
                },
                {
                  "description": "List of Chats and their metadata returned for the specified `page_number` and `page_size`.",
                  "key": "chats_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnChat"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnChatEventRole": {
            "description": "The role of the entity which generated the Chat Event. There are four possible values:\n\n- `USER`: The user, capable of sending user messages and interruptions.\n\n- `AGENT`: The assistant, capable of sending agent messages.\n\n- `SYSTEM`: The backend server, capable of transmitting errors.\n\n- `TOOL`: The function calling mechanism.",
            "name": "ReturnChatEventRole",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "USER"
                },
                {
                  "value": "AGENT"
                },
                {
                  "value": "SYSTEM"
                },
                {
                  "value": "TOOL"
                }
              ]
            }
          },
          "type_:ReturnChatEventType": {
            "description": "Type of Chat Event. There are six possible values:\n\n- `SYSTEM_PROMPT`: Contains the system prompt for use in the session.\n\n- `USER_MESSAGE`: Contains the message sent by the user.\n\n- `USER_INTERRUPTION`: Contains an interruption made by the user while the agent is speaking.\n\n- `AGENT_MESSAGE`: Contains the assistant’s message, generated by Hume’s eLLM and supplemental LLM.\n\n- `FUNCTION_CALL`: Contains the invocation of a tool.\n\n- `FUNCTION_CALL_RESPONSE`: Contains the tool response.",
            "name": "ReturnChatEventType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "SYSTEM_PROMPT"
                },
                {
                  "value": "USER_MESSAGE"
                },
                {
                  "value": "USER_INTERRUPTION"
                },
                {
                  "value": "AGENT_MESSAGE"
                },
                {
                  "value": "FUNCTION_CALL"
                },
                {
                  "value": "FUNCTION_CALL_RESPONSE"
                }
              ]
            }
          },
          "type_:ReturnChatEvent": {
            "description": "A description of a single event in a chat returned from the server",
            "name": "ReturnChatEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a Chat Event. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Identifier for the Chat this event occurred in. Formatted as a UUID.",
                  "key": "chat_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Time at which the Chat Event occurred. Measured in seconds since the Unix epoch.",
                  "key": "timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "The role of the entity which generated the Chat Event. There are four possible values:\n\n- `USER`: The user, capable of sending user messages and interruptions.\n\n- `AGENT`: The assistant, capable of sending agent messages.\n\n- `SYSTEM`: The backend server, capable of transmitting errors.\n\n- `TOOL`: The function calling mechanism.",
                  "key": "role",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnChatEventRole"
                  }
                },
                {
                  "description": "Type of Chat Event. There are six possible values:\n\n- `SYSTEM_PROMPT`: Contains the system prompt for use in the session.\n\n- `USER_MESSAGE`: Contains the message sent by the user.\n\n- `USER_INTERRUPTION`: Contains an interruption made by the user while the agent is speaking.\n\n- `AGENT_MESSAGE`: Contains the assistant’s message, generated by Hume’s eLLM and supplemental LLM.\n\n- `FUNCTION_CALL`: Contains the invocation of a tool.\n\n- `FUNCTION_CALL_RESPONSE`: Contains the tool response.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnChatEventType"
                  }
                },
                {
                  "description": "The text of the Chat Event. This field contains the message content for each event type listed in the `type` field.",
                  "key": "message_text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Stringified JSON containing the prosody model inference results.\n\nEVI uses the prosody model to measure 48 expressions related to speech and vocal characteristics. These results contain a detailed emotional and tonal analysis of the audio. Scores typically range from 0 to 1, with higher values indicating a stronger confidence level in the measured attribute.",
                  "key": "emotion_features",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Stringified JSON with additional metadata about the chat event.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnChatPagedEventsStatus": {
            "description": "Indicates the current state of the chat. There are six possible statuses:\n\n- `ACTIVE`: The chat is currently active and ongoing.\n\n- `USER_ENDED`: The chat was manually ended by the user.\n\n- `USER_TIMEOUT`: The chat ended due to a user-defined timeout.\n\n- `MAX_DURATION_TIMEOUT`: The chat ended because it reached the maximum allowed duration.\n\n- `INACTIVITY_TIMEOUT`: The chat ended due to an inactivity timeout.\n\n- `ERROR`: The chat ended unexpectedly due to an error.",
            "name": "ReturnChatPagedEventsStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ACTIVE"
                },
                {
                  "value": "USER_ENDED"
                },
                {
                  "value": "USER_TIMEOUT"
                },
                {
                  "value": "MAX_DURATION_TIMEOUT"
                },
                {
                  "value": "INACTIVITY_TIMEOUT"
                },
                {
                  "value": "ERROR"
                }
              ]
            }
          },
          "type_:ReturnChatPagedEventsPaginationDirection": {
            "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
            "name": "ReturnChatPagedEventsPaginationDirection",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ASC"
                },
                {
                  "value": "DESC"
                }
              ]
            }
          },
          "type_:ReturnChatPagedEvents": {
            "description": "A description of chat status with a paginated list of chat events returned from the server",
            "name": "ReturnChatPagedEvents",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for a Chat. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Identifier for the Chat Group. Any chat resumed from this Chat will have the same `chat_group_id`. Formatted as a UUID.",
                  "key": "chat_group_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Indicates the current state of the chat. There are six possible statuses:\n\n- `ACTIVE`: The chat is currently active and ongoing.\n\n- `USER_ENDED`: The chat was manually ended by the user.\n\n- `USER_TIMEOUT`: The chat ended due to a user-defined timeout.\n\n- `MAX_DURATION_TIMEOUT`: The chat ended because it reached the maximum allowed duration.\n\n- `INACTIVITY_TIMEOUT`: The chat ended due to an inactivity timeout.\n\n- `ERROR`: The chat ended unexpectedly due to an error.",
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnChatPagedEventsStatus"
                  }
                },
                {
                  "description": "Time at which the Chat started. Measured in seconds since the Unix epoch.",
                  "key": "start_timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "Time at which the Chat ended. Measured in seconds since the Unix epoch.",
                  "key": "end_timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
                  "key": "pagination_direction",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnChatPagedEventsPaginationDirection"
                  }
                },
                {
                  "description": "List of Chat Events for the specified `page_number` and `page_size`.",
                  "key": "events_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnChatEvent"
                    }
                  }
                },
                {
                  "description": "Stringified JSON with additional metadata about the chat.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of pages in the collection.",
                  "key": "total_pages",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnConfigSpec"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnChatAudioReconstructionStatus": {
            "description": "Indicates the current state of the audio reconstruction job. There are five possible statuses:\n\n- `QUEUED`: The reconstruction job is waiting to be processed.\n\n- `IN_PROGRESS`: The reconstruction is currently being processed.\n\n- `COMPLETE`: The audio reconstruction is finished and ready for download.\n\n- `ERROR`: An error occurred during the reconstruction process.\n\n- `CANCELED`: The reconstruction job has been canceled.",
            "name": "ReturnChatAudioReconstructionStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "QUEUED"
                },
                {
                  "value": "IN_PROGRESS"
                },
                {
                  "value": "COMPLETE"
                },
                {
                  "value": "ERROR"
                },
                {
                  "value": "CANCELLED"
                }
              ]
            }
          },
          "type_:ReturnChatAudioReconstruction": {
            "description": "List of chat audio reconstructions returned for the specified page number and page size.",
            "name": "ReturnChatAudioReconstruction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for the chat. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Identifier for the user that owns this chat. Formatted as a UUID.",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Indicates the current state of the audio reconstruction job. There are five possible statuses:\n\n- `QUEUED`: The reconstruction job is waiting to be processed.\n\n- `IN_PROGRESS`: The reconstruction is currently being processed.\n\n- `COMPLETE`: The audio reconstruction is finished and ready for download.\n\n- `ERROR`: An error occurred during the reconstruction process.\n\n- `CANCELED`: The reconstruction job has been canceled.",
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnChatAudioReconstructionStatus"
                  }
                },
                {
                  "description": "Name of the chat audio reconstruction file.",
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The timestamp of the most recent status change for this audio reconstruction, formatted milliseconds since the Unix epoch.",
                  "key": "modified_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "description": "Signed URL used to download the chat audio reconstruction file.",
                  "key": "signed_audio_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The timestamp when the signed URL will expire, formatted as a Unix epoch milliseconds.",
                  "key": "signed_url_expiration_timestamp_millis",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnActiveChatCount": {
            "description": "A description of current chat chat sessions for a user",
            "name": "ReturnActiveChatCount",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The timestamp for when chat status was measured. Formatted as a Unix epoch milliseconds.",
                  "key": "timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "The total number of active chats for this user.",
                  "key": "total_user_active_chats",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The maximum number of concurrent active chats for this user.",
                  "key": "max_allowed_active_chats",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Boolean indicating if the user is allowed to start more chats.",
                  "key": "more_active_chats_allowed",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                {
                  "description": "Optional List of chat counts per tag.",
                  "key": "per_tag",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:ReturnActiveChatCountPerTag"
                        }
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnActiveChatCountPerTag": {
            "description": "A description of current chat chat sessions per tag",
            "name": "ReturnActiveChatCountPerTag",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "User tag applied to a chat.",
                  "key": "tag",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The total number of active chats for this user with the specified tag.",
                  "key": "total_tag_active_chats",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnChatGroup": {
            "description": "A description of chat_group and its status",
            "name": "ReturnChatGroup",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for the Chat Group. Any Chat resumed from this Chat Group will have the same `chat_group_id`. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Time at which the first Chat in this Chat Group was created. Measured in seconds since the Unix epoch.",
                  "key": "first_start_timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "Time at which the most recent Chat in this Chat Group was created. Measured in seconds since the Unix epoch.",
                  "key": "most_recent_start_timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "The `chat_id` of the most recent Chat in this Chat Group. Formatted as a UUID.",
                  "key": "most_recent_chat_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The total number of Chats in this Chat Group.",
                  "key": "num_chats",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Denotes whether there is an active Chat associated with this Chat Group.",
                  "key": "active",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnPagedChatGroupsPaginationDirection": {
            "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
            "name": "ReturnPagedChatGroupsPaginationDirection",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ASC"
                },
                {
                  "value": "DESC"
                }
              ]
            }
          },
          "type_:ReturnPagedChatGroups": {
            "description": "A paginated list of chat_groups returned from the server",
            "name": "ReturnPagedChatGroups",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of pages in the collection.",
                  "key": "total_pages",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
                  "key": "pagination_direction",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnPagedChatGroupsPaginationDirection"
                  }
                },
                {
                  "description": "List of Chat Groups and their metadata returned for the specified `page_number` and `page_size`.",
                  "key": "chat_groups_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnChatGroup"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnChatGroupPagedChatsPaginationDirection": {
            "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
            "name": "ReturnChatGroupPagedChatsPaginationDirection",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ASC"
                },
                {
                  "value": "DESC"
                }
              ]
            }
          },
          "type_:ReturnChatGroupPagedChats": {
            "description": "A description of chat_group and its status with a paginated list of each chat in the chat_group",
            "name": "ReturnChatGroupPagedChats",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for the Chat Group. Any Chat resumed from this Chat Group will have the same `chat_group_id`. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Time at which the first Chat in this Chat Group was created. Measured in seconds since the Unix epoch.",
                  "key": "first_start_timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "Time at which the most recent Chat in this Chat Group was created. Measured in seconds since the Unix epoch.",
                  "key": "most_recent_start_timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                },
                {
                  "description": "The total number of Chats associated with this Chat Group.",
                  "key": "num_chats",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of pages in the collection.",
                  "key": "total_pages",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
                  "key": "pagination_direction",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnChatGroupPagedChatsPaginationDirection"
                  }
                },
                {
                  "description": "List of Chats for the specified `page_number` and `page_size`.",
                  "key": "chats_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnChat"
                    }
                  }
                },
                {
                  "description": "Denotes whether there is an active Chat associated with this Chat Group.",
                  "key": "active",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnChatGroupPagedEventsPaginationDirection": {
            "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
            "name": "ReturnChatGroupPagedEventsPaginationDirection",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ASC"
                },
                {
                  "value": "DESC"
                }
              ]
            }
          },
          "type_:ReturnChatGroupPagedEvents": {
            "description": "A paginated list of chat events that occurred across chats in this chat_group from the server",
            "name": "ReturnChatGroupPagedEvents",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for the Chat Group. Any Chat resumed from this Chat Group will have the same `chat_group_id`. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of pages in the collection.",
                  "key": "total_pages",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
                  "key": "pagination_direction",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnChatGroupPagedEventsPaginationDirection"
                  }
                },
                {
                  "description": "List of Chat Events for the specified `page_number` and `page_size`.",
                  "key": "events_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnChatEvent"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ReturnChatGroupPagedAudioReconstructionsPaginationDirection": {
            "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
            "name": "ReturnChatGroupPagedAudioReconstructionsPaginationDirection",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ASC"
                },
                {
                  "value": "DESC"
                }
              ]
            }
          },
          "type_:ReturnChatGroupPagedAudioReconstructions": {
            "description": "A paginated list of chat reconstructions for a particular chatgroup",
            "name": "ReturnChatGroupPagedAudioReconstructions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Identifier for the chat group. Formatted as a UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Identifier for the user that owns this chat. Formatted as a UUID.",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Total number of chats in this chatgroup",
                  "key": "num_chats",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing.",
                  "key": "page_number",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request.",
                  "key": "page_size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The total number of pages in the collection.",
                  "key": "total_pages",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
                  "key": "pagination_direction",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReturnChatGroupPagedAudioReconstructionsPaginationDirection"
                  }
                },
                {
                  "description": "List of chat audio reconstructions returned for the specified page number and page size.",
                  "key": "audio_reconstructions_page",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReturnChatAudioReconstruction"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:PostedPromptSpec": {
            "description": "A Prompt associated with this Config.",
            "name": "PostedPromptSpec",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "unknown"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:AssistantInput": {
            "description": "When provided, the input is spoken by EVI.",
            "name": "AssistantInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; must be `assistant_input` for our server to correctly identify and process it as an Assistant Input message.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "assistant_input"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Assistant text to synthesize into spoken audio and insert into the conversation.\n\nEVI uses this text to generate spoken audio using our proprietary expressive text-to-speech model. Our model adds appropriate emotional inflections and tones to the text based on the user’s expressions and the context of the conversation. The synthesized audio is streamed back to the user as an [Assistant Message](/reference/empathic-voice-interface-evi/chat/chat#receive.Assistant%20Message.type).",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:AudioConfiguration": {
            "name": "AudioConfiguration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Encoding format of the audio input, such as `linear16`.",
                  "key": "encoding",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Encoding"
                  }
                },
                {
                  "description": "Number of audio channels.",
                  "key": "channels",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Audio sample rate. Number of samples per second in the audio input, measured in Hertz.",
                  "key": "sample_rate",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:AudioInput": {
            "description": "When provided, the input is audio.",
            "name": "AudioInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; must be `audio_input` for our server to correctly identify and process it as an Audio Input message.\n\nThis message is used for sending audio input data to EVI for processing and expression measurement. Audio data should be sent as a continuous stream, encoded in Base64.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "audio_input"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Base64 encoded audio input to insert into the conversation.\n\nThe content of an Audio Input message is treated as the user’s speech to EVI and must be streamed continuously. Pre-recorded audio files are not supported.\n\nFor optimal transcription quality, the audio data should be transmitted in small chunks.\n\nHume recommends streaming audio with a buffer window of 20 milliseconds (ms), or 100 milliseconds (ms) for web applications.",
                  "key": "data",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:BuiltInTool": {
            "description": "Name of the built-in tool. Set to `web_search` to equip EVI with the built-in Web Search tool.",
            "name": "BuiltInTool",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "web_search"
                },
                {
                  "value": "hang_up"
                }
              ]
            }
          },
          "type_:BuiltinToolConfig": {
            "name": "BuiltinToolConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BuiltInTool"
                  }
                },
                {
                  "description": "Optional text passed to the supplemental LLM if the tool call fails. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation.",
                  "key": "fallback_content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Context": {
            "name": "Context",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The persistence level of the injected context. Specifies how long the injected context will remain active in the session.\n\nThere are three possible context types:\n\n- **Persistent**: The context is appended to all user messages for the duration of the session.\n\n- **Temporary**: The context is appended only to the next user message.\n\n- **Editable**: The original context is updated to reflect the new context.\n\nIf the type is not specified, it will default to `temporary`.",
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ContextType"
                    }
                  }
                },
                {
                  "description": "The context to be injected into the conversation. Helps inform the LLM's response by providing relevant information about the ongoing conversation.\n\nThis text will be appended to the end of user messages based on the chosen persistence level. For example, if you want to remind EVI of its role as a helpful weather assistant, the context you insert will be appended to the end of user messages as `{Context: You are a helpful weather assistant}`.",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ContextType": {
            "name": "ContextType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "editable"
                },
                {
                  "value": "persistent"
                },
                {
                  "value": "temporary"
                }
              ]
            }
          },
          "type_:Encoding": {
            "name": "Encoding",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "linear16"
                }
              }
            }
          },
          "type_:ErrorLevel": {
            "name": "ErrorLevel",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "warn"
                }
              }
            }
          },
          "type_:PauseAssistantMessage": {
            "description": "Pause responses from EVI. Chat history is still saved and sent after resuming.",
            "name": "PauseAssistantMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; must be `pause_assistant_message` for our server to correctly identify and process it as a Pause Assistant message.\n\nOnce this message is sent, EVI will not respond until a [Resume Assistant message](/reference/empathic-voice-interface-evi/chat/chat#send.Resume%20Assistant%20Message.type) is sent. When paused, EVI won’t respond, but transcriptions of your audio inputs will still be recorded.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "pause_assistant_message"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ResumeAssistantMessage": {
            "description": "Resume responses from EVI. Chat history sent while paused will now be sent.",
            "name": "ResumeAssistantMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; must be `resume_assistant_message` for our server to correctly identify and process it as a Resume Assistant message.\n\nUpon resuming, if any audio input was sent during the pause, EVI will retain context from all messages sent but only respond to the last user message. (e.g., If you ask EVI two questions while paused and then send a `resume_assistant_message`, EVI will respond to the second question and have added the first question to its conversation context.)",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "resume_assistant_message"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:SessionSettings": {
            "description": "Settings for this chat session.",
            "name": "SessionSettings",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; must be `session_settings` for our server to correctly identify and process it as a Session Settings message.\n\nSession settings are temporary and apply only to the current Chat session. These settings can be adjusted dynamically based on the requirements of each session to ensure optimal performance and user experience.\n\nFor more information, please refer to the [Session Settings section](/docs/empathic-voice-interface-evi/configuration#session-settings) on the EVI Configuration page.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "session_settings"
                    }
                  }
                },
                {
                  "description": "Unique identifier for the session. Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.\n\nIf included, the response sent from Hume to your backend will include this ID. This allows you to correlate frontend users with their incoming messages.\n\nIt is recommended to pass a `custom_session_id` if you are using a Custom Language Model. Please see our guide to [using a custom language model](/docs/empathic-voice-interface-evi/custom-language-model) with EVI to learn more.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Instructions used to shape EVI’s behavior, responses, and style for the session.\n\nWhen included in a Session Settings message, the provided Prompt overrides the existing one specified in the EVI configuration. If no Prompt was defined in the configuration, this Prompt will be the one used for the session.\n\nYou can use the Prompt to define a specific goal or role for EVI, specifying how it should act or what it should focus on during the conversation. For example, EVI can be instructed to act as a customer support representative, a fitness coach, or a travel advisor, each with its own set of behaviors and response styles.\n\nFor help writing a system prompt, see our [Prompting Guide](/docs/empathic-voice-interface-evi/prompting).",
                  "key": "system_prompt",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Allows developers to inject additional context into the conversation, which is appended to the end of user messages for the session.\n\nWhen included in a Session Settings message, the provided context can be used to remind the LLM of its role in every user message, prevent it from forgetting important details, or add new relevant information to the conversation.\n\nSet to `null` to disable context injection.",
                  "key": "context",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Context"
                    }
                  }
                },
                {
                  "description": "Configuration details for the audio input used during the session. Ensures the audio is being correctly set up for processing.\n\nThis optional field is only required when the audio input is encoded in PCM Linear 16 (16-bit, little-endian, signed PCM WAV data). For detailed instructions on how to configure session settings for PCM Linear 16 audio, please refer to the [Session Settings section](/docs/empathic-voice-interface-evi/configuration#session-settings) on the EVI Configuration page.",
                  "key": "audio",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AudioConfiguration"
                    }
                  }
                },
                {
                  "description": "Third party API key for the supplemental language model.\n\nWhen provided, EVI will use this key instead of Hume’s API key for the supplemental LLM. This allows you to bypass rate limits and utilize your own API key as needed.",
                  "key": "language_model_api_key",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "List of user-defined tools to enable for the session.\n\nTools are resources used by EVI to perform various tasks, such as searching the web or calling external APIs. Built-in tools, like web search, are natively integrated, while user-defined tools are created and invoked by the user. To learn more, see our [Tool Use Guide](/docs/empathic-voice-interface-evi/tool-use).",
                  "key": "tools",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Tool"
                      }
                    }
                  }
                },
                {
                  "description": "List of built-in tools to enable for the session.\n\nTools are resources used by EVI to perform various tasks, such as searching the web or calling external APIs. Built-in tools, like web search, are natively integrated, while user-defined tools are created and invoked by the user. To learn more, see our [Tool Use Guide](/docs/empathic-voice-interface-evi/tool-use).\n\nCurrently, the only built-in tool Hume provides is **Web Search**. When enabled, Web Search equips EVI with the ability to search the web for up-to-date information.",
                  "key": "builtin_tools",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:BuiltinToolConfig"
                      }
                    }
                  }
                },
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Dynamic values that can be used to populate EVI prompts.",
                  "key": "variables",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Tool": {
            "name": "Tool",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Type of tool. Set to `function` for user-defined tools.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ToolType"
                  }
                },
                {
                  "description": "Name of the user-defined tool to be enabled.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Parameters of the tool. Is a stringified JSON schema.\n\nThese parameters define the inputs needed for the tool’s execution, including the expected data type and description for each input field. Structured as a JSON schema, this format ensures the tool receives data in the expected format.",
                  "key": "parameters",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "An optional description of what the tool does, used by the supplemental LLM to choose when and how to call the function.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Optional text passed to the supplemental LLM if the tool call fails. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation.",
                  "key": "fallback_content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ToolErrorMessage": {
            "description": "When provided, the output is a function call error.",
            "name": "ToolErrorMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; for a Tool Error message, this must be `tool_error`.\n\nUpon receiving a [Tool Call message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.type) and failing to invoke the function, this message is sent to notify EVI of the tool's failure.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "tool_error"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Type of tool called. Either `builtin` for natively implemented tools, like web search, or `function` for user-defined tools.",
                  "key": "tool_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ToolType"
                    }
                  }
                },
                {
                  "description": "The unique identifier for a specific tool call instance.\n\nThis ID is used to track the request and response of a particular tool invocation, ensuring that the Tool Error message is linked to the appropriate tool call request. The specified `tool_call_id` must match the one received in the [Tool Call message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.type).",
                  "key": "tool_call_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Optional text passed to the supplemental LLM in place of the tool call result. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation if the tool errors.",
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Error message from the tool call, not exposed to the LLM or user.",
                  "key": "error",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Error code. Identifies the type of error encountered.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Indicates the severity of an error; for a Tool Error message, this must be `warn` to signal an unexpected event.",
                  "key": "level",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ErrorLevel"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ToolResponseMessage": {
            "description": "When provided, the output is a function call response.",
            "name": "ToolResponseMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; for a Tool Response message, this must be `tool_response`.\n\nUpon receiving a [Tool Call message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.type) and successfully invoking the function, this message is sent to convey the result of the function call back to EVI.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "tool_response"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier for a specific tool call instance.\n\nThis ID is used to track the request and response of a particular tool invocation, ensuring that the correct response is linked to the appropriate request. The specified `tool_call_id` must match the one received in the [Tool Call message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.tool_call_id).",
                  "key": "tool_call_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Return value of the tool call. Contains the output generated by the tool to pass back to EVI.",
                  "key": "content",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Name of the tool.\n\nInclude this optional field to help the supplemental LLM identify which tool generated the response. The specified `tool_name` must match the one received in the [Tool Call message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.type).",
                  "key": "tool_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Type of tool called. Either `builtin` for natively implemented tools, like web search, or `function` for user-defined tools.",
                  "key": "tool_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ToolType"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ToolType": {
            "name": "ToolType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "builtin"
                },
                {
                  "value": "function"
                }
              ]
            }
          },
          "type_:UserInput": {
            "description": "User text to insert into the conversation. Text sent through a User Input message is treated as the user’s speech to EVI. EVI processes this input and provides a corresponding response.\n\nExpression measurement results are not available for User Input messages, as the prosody model relies on audio input and cannot process text alone.",
            "name": "UserInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; must be `user_input` for our server to correctly identify and process it as a User Input message.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "user_input"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "User text to insert into the conversation. Text sent through a User Input message is treated as the user’s speech to EVI. EVI processes this input and provides a corresponding response.\n\nExpression measurement results are not available for User Input messages, as the prosody model relies on audio input and cannot process text alone.",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:AssistantEnd": {
            "description": "When provided, the output is an assistant end message.",
            "name": "AssistantEnd",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; for an Assistant End message, this must be `assistant_end`.\n\nThis message indicates the conclusion of the assistant’s response, signaling that the assistant has finished speaking for the current conversational turn.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "assistant_end"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:AssistantMessage": {
            "description": "When provided, the output is an assistant message.",
            "name": "AssistantMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; for an Assistant Message, this must be `assistant_message`.\n\nThis message contains both a transcript of the assistant’s response and the expression measurement predictions of the assistant’s audio output.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "assistant_message"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the assistant message. Allows the Assistant Message to be tracked and referenced.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Transcript of the message.",
                  "key": "message",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ChatMessage"
                  }
                },
                {
                  "description": "Inference model results.",
                  "key": "models",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Inference"
                  }
                },
                {
                  "description": "Indicates if this message was inserted into the conversation as text from an [Assistant Input message](/reference/empathic-voice-interface-evi/chat/chat#send.Assistant%20Input.text).",
                  "key": "from_text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:AudioOutput": {
            "description": "The type of message sent through the socket; for an Audio Output message, this must be `audio_output`.",
            "name": "AudioOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; for an Audio Output message, this must be `audio_output`.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "audio_output"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the audio output. Allows the Audio Output message to be tracked and referenced.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Index of the chunk of audio relative to the whole audio segment.",
                  "key": "index",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Base64 encoded audio output. This encoded audio is transmitted to the client, where it can be decoded and played back as part of the user interaction.",
                  "key": "data",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ChatMessageToolResult": {
            "description": "Function call response from client.",
            "name": "ChatMessageToolResult",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolResponseMessage"
                  },
                  "displayName": "Tool Response Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolErrorMessage"
                  },
                  "displayName": "Tool Error Message"
                }
              ]
            }
          },
          "type_:ChatMessage": {
            "name": "ChatMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Role of who is providing the message.",
                  "key": "role",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Role"
                  }
                },
                {
                  "description": "Transcript of the message.",
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Function call name and arguments.",
                  "key": "tool_call",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ToolCallMessage"
                    }
                  }
                },
                {
                  "description": "Function call response from client.",
                  "key": "tool_result",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ChatMessageToolResult"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ChatMetadata": {
            "description": "When provided, the output is a chat metadata message.",
            "name": "ChatMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; for a Chat Metadata message, this must be `chat_metadata`.\n\nThe Chat Metadata message is the first message you receive after establishing a connection with EVI and contains important identifiers for the current Chat session.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "chat_metadata"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the Chat Group.\n\nUsed to resume a Chat when passed in the [resumed_chat_group_id](/reference/empathic-voice-interface-evi/chat/chat#request.query.resumed_chat_group_id) query parameter of a subsequent connection request. This allows EVI to continue the conversation from where it left off within the Chat Group.\n\nLearn more about [supporting chat resumability](/docs/empathic-voice-interface-evi/faq#does-evi-support-chat-resumability) from the EVI FAQ.",
                  "key": "chat_group_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "ID of the Chat session. Allows the Chat session to be tracked and referenced.",
                  "key": "chat_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "ID of the initiating request.",
                  "key": "request_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:EmotionScores": {
            "name": "EmotionScores",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "Admiration",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Adoration",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Aesthetic Appreciation",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Amusement",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Anger",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Anxiety",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Awe",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Awkwardness",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Boredom",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Calmness",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Concentration",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Confusion",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Contemplation",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Contempt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Contentment",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Craving",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Desire",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Determination",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Disappointment",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Disgust",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Distress",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Doubt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Ecstasy",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Embarrassment",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Empathic Pain",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Entrancement",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Envy",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Excitement",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Fear",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Guilt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Horror",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Interest",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Joy",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Love",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Nostalgia",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Pain",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Pride",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Realization",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Relief",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Romance",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Sadness",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Satisfaction",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Shame",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Surprise (negative)",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Surprise (positive)",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Sympathy",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Tiredness",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Triumph",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:WebSocketError": {
            "description": "When provided, the output is an error message.",
            "name": "WebSocketError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; for a Web Socket Error message, this must be `error`.\n\nThis message indicates a disruption in the WebSocket connection, such as an unexpected disconnection, protocol error, or data transmission issue.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "error"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Error code. Identifies the type of error encountered.",
                  "key": "code",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Short, human-readable identifier and description for the error. See a complete list of error slugs on the [Errors page](/docs/resources/errors).",
                  "key": "slug",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Detailed description of the error.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Inference": {
            "name": "Inference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Prosody model inference results.\n\nEVI uses the prosody model to measure 48 emotions related to speech and vocal characteristics within a given expression.",
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProsodyInference"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:MillisecondInterval": {
            "name": "MillisecondInterval",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Start time of the interval in milliseconds.",
                  "key": "begin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "End time of the interval in milliseconds.",
                  "key": "end",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ProsodyInference": {
            "name": "ProsodyInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The confidence scores for 48 emotions within the detected expression of an audio sample.\n\nScores typically range from 0 to 1, with higher values indicating a stronger confidence level in the measured attribute.\n\nSee our guide on [interpreting expression measurement results](/docs/expression-measurement/faq#how-do-i-interpret-my-results) to learn more.",
                  "key": "scores",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EmotionScores"
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:Role": {
            "name": "Role",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "assistant"
                },
                {
                  "value": "system"
                },
                {
                  "value": "user"
                },
                {
                  "value": "all"
                },
                {
                  "value": "tool"
                }
              ]
            }
          },
          "type_:ToolCallMessage": {
            "description": "When provided, the output is a tool call.",
            "name": "ToolCallMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the tool called.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Parameters of the tool.\n\nThese parameters define the inputs needed for the tool’s execution, including the expected data type and description for each input field. Structured as a stringified JSON schema, this format ensures the tool receives data in the expected format.",
                  "key": "parameters",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier for a specific tool call instance.\n\nThis ID is used to track the request and response of a particular tool invocation, ensuring that the correct response is linked to the appropriate request.",
                  "key": "tool_call_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of message sent through the socket; for a Tool Call message, this must be `tool_call`.\n\nThis message indicates that the supplemental LLM has detected a need to invoke the specified tool.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "tool_call"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Type of tool called. Either `builtin` for natively implemented tools, like web search, or `function` for user-defined tools.",
                  "key": "tool_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ToolType"
                    }
                  }
                },
                {
                  "description": "Indicates whether a response to the tool call is required from the developer, either in the form of a [Tool Response message](/reference/empathic-voice-interface-evi/chat/chat#send.Tool%20Response%20Message.type) or a [Tool Error message](/reference/empathic-voice-interface-evi/chat/chat#send.Tool%20Error%20Message.type).",
                  "key": "response_required",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:UserInterruption": {
            "description": "When provided, the output is an interruption.",
            "name": "UserInterruption",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; for a User Interruption message, this must be `user_interruption`.\n\nThis message indicates the user has interrupted the assistant’s response. EVI detects the interruption in real-time and sends this message to signal the interruption event. This message allows the system to stop the current audio playback, clear the audio queue, and prepare to handle new user input.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "user_interruption"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unix timestamp of the detected user interruption.",
                  "key": "time",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:UserMessage": {
            "description": "When provided, the output is a user message.",
            "name": "UserMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of message sent through the socket; for a User Message, this must be `user_message`.\n\nThis message contains both a transcript of the user’s input and the expression measurement predictions if the input was sent as an [Audio Input message](/reference/empathic-voice-interface-evi/chat/chat#send.Audio%20Input.type). Expression measurement predictions are not provided for a [User Input message](/reference/empathic-voice-interface-evi/chat/chat#send.User%20Input.type), as the prosody model relies on audio input and cannot process text alone.",
                  "key": "type",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "user_message"
                    }
                  }
                },
                {
                  "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.",
                  "key": "custom_session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Transcript of the message.",
                  "key": "message",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ChatMessage"
                  }
                },
                {
                  "description": "Inference model results.",
                  "key": "models",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Inference"
                  }
                },
                {
                  "description": "Start and End time of user message.",
                  "key": "time",
                  "valueType": {
                    "type": "id",
                    "value": "type_:MillisecondInterval"
                  }
                },
                {
                  "description": "Indicates if this message was inserted into the conversation as text from a [User Input](/reference/empathic-voice-interface-evi/chat/chat#send.User%20Input.text) message.",
                  "key": "from_text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:JsonMessage": {
            "name": "JsonMessage",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:AssistantEnd"
                  },
                  "displayName": "Assistant End"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:AssistantMessage"
                  },
                  "displayName": "Assistant Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ChatMetadata"
                  },
                  "displayName": "Chat Metadata"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:WebSocketError"
                  },
                  "displayName": "Web Socket Error"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:UserInterruption"
                  },
                  "displayName": "User Interruption"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:UserMessage"
                  },
                  "displayName": "User Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolCallMessage"
                  },
                  "displayName": "Tool Call Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolResponseMessage"
                  },
                  "displayName": "Tool Response Message"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:ToolErrorMessage"
                  },
                  "displayName": "Tool Error Message"
                }
              ]
            }
          },
          "type_:TtsInput": {
            "name": "TtsInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "tts"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:TextInput": {
            "name": "TextInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "text_input"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:FunctionCallResponseInput": {
            "name": "FunctionCallResponseInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "function_call_response"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:HTTPValidationError": {
            "name": "HTTPValidationError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ValidationError"
                      }
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:ValidationErrorLocItem": {
            "name": "ValidationErrorLocItem",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:ValidationError": {
            "name": "ValidationError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "loc",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ValidationErrorLocItem"
                    }
                  }
                },
                {
                  "key": "msg",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ],
              "extraProperties": {
                "type": "unknown"
              }
            }
          },
          "type_:VoiceNameEnum": {
            "name": "VoiceNameEnum",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ITO"
                },
                {
                  "value": "KORA"
                },
                {
                  "value": "DACHER"
                },
                {
                  "value": "AURA"
                },
                {
                  "value": "FINN"
                },
                {
                  "value": "SIENNA"
                },
                {
                  "value": "WILLOW"
                },
                {
                  "value": "SCOUT"
                },
                {
                  "value": "WHIMSY"
                },
                {
                  "value": "ACE"
                },
                {
                  "value": "JUNO"
                },
                {
                  "value": "STELLA"
                },
                {
                  "value": "HIRO"
                },
                {
                  "value": "SUNNY"
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_tools": {
            "subpackageId": "subpackage_tools",
            "name": "tools",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-tools",
                "method": "GET",
                "id": "list-tools",
                "originalEndpointId": "endpoint_tools.list-tools",
                "name": "List tools",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "By default, `restrict_to_most_recent` is set to true, returning only the latest version of each tool. To include all versions of each tool in the list, set `restrict_to_most_recent` to false.",
                    "key": "restrict_to_most_recent",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter to only include tools with name.",
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedUserDefinedTools"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Tools List Tools Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/tools",
                    "pathParameters": {},
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 2
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 0,
                      "page_size": 2,
                      "total_pages": 1,
                      "tools_page": [
                        {
                          "tool_type": "FUNCTION",
                          "id": "d20827af-5d8d-4f66-b6b9-ce2e3e1ea2b2",
                          "version": 0,
                          "version_type": "FIXED",
                          "version_description": "Fetches user's current location.",
                          "name": "get_current_location",
                          "created_on": 1715267200693,
                          "modified_on": 1715267200693,
                          "fallback_content": "Unable to fetch location.",
                          "description": "Fetches user's current location.",
                          "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }}, \"required\": [\"location\"] }"
                        },
                        {
                          "tool_type": "FUNCTION",
                          "id": "4442f3ea-9038-40e3-a2ce-1522b7de770f",
                          "version": 0,
                          "version_type": "FIXED",
                          "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                          "name": "get_current_weather",
                          "created_on": 1715266126705,
                          "modified_on": 1715266126705,
                          "fallback_content": "Unable to fetch location.",
                          "description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                          "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.empathic_voice.tools.list_tools(\n        page_number=0,\n        page_size=2,\n    )\n    async for item in response:\n        yield item\n    # alternatively, you can paginate page-by-page\n    async for page in response.iter_pages():\n        yield page\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.tools.list_tools(\n    page_number=0,\n    page_size=2,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.listTools({\n    pageNumber: 0,\n    pageSize: 2\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 0,
                        "page_size": 2,
                        "total_pages": 1,
                        "tools_page": [
                          {
                            "tool_type": "FUNCTION",
                            "id": "d20827af-5d8d-4f66-b6b9-ce2e3e1ea2b2",
                            "version": 0,
                            "version_type": "FIXED",
                            "version_description": "Fetches user's current location.",
                            "name": "get_current_location",
                            "created_on": 1715267200693,
                            "modified_on": 1715267200693,
                            "fallback_content": "Unable to fetch location.",
                            "description": "Fetches user's current location.",
                            "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }}, \"required\": [\"location\"] }"
                          },
                          {
                            "tool_type": "FUNCTION",
                            "id": "4442f3ea-9038-40e3-a2ce-1522b7de770f",
                            "version": 0,
                            "version_type": "FIXED",
                            "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                            "name": "get_current_weather",
                            "created_on": 1715266126705,
                            "modified_on": 1715266126705,
                            "fallback_content": "Unable to fetch location.",
                            "description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                            "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/tools",
                    "pathParameters": {},
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.empathic_voice.tools.list_tools(\n        page_number=0,\n        page_size=2,\n    )\n    async for item in response:\n        yield item\n    # alternatively, you can paginate page-by-page\n    async for page in response.iter_pages():\n        yield page\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.tools.list_tools(\n    page_number=0,\n    page_size=2,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.listTools({\n    pageNumber: 0,\n    pageSize: 2\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a paginated list of **Tools**.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-tool",
                "method": "POST",
                "id": "create-tool",
                "originalEndpointId": "endpoint_tools.create-tool",
                "name": "Create tool",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Name applied to all versions of a particular Tool.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "An optional description of the Tool version.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "An optional description of what the Tool does, used by the supplemental LLM to choose when and how to call the function.",
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Stringified JSON defining the parameters used by this version of the Tool.\n\nThese parameters define the inputs needed for the Tool’s execution, including the expected data type and description for each input field. Structured as a stringified JSON schema, this format ensures the Tool receives data in the expected format.",
                        "key": "parameters",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Optional text passed to the supplemental LLM in place of the tool call result. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation if the Tool errors.",
                        "key": "fallback_content",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnUserDefinedTool"
                      }
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Tools Create Tool Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/tools",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "name": "get_current_weather",
                      "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                      "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                      "description": "This tool is for getting the current weather.",
                      "fallback_content": "Unable to fetch current weather."
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "tool_type": "FUNCTION",
                      "id": "aa9b71c4-723c-47ff-9f83-1a1829e74376",
                      "version": 0,
                      "version_type": "FIXED",
                      "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                      "name": "get_current_weather",
                      "created_on": 1715275452390,
                      "modified_on": 1715275452390,
                      "fallback_content": "Unable to fetch current weather.",
                      "description": "This tool is for getting the current weather.",
                      "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.create_tool(\n        name=\"get_current_weather\",\n        parameters='{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }',\n        version_description=\"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n        description=\"This tool is for getting the current weather.\",\n        fallback_content=\"Unable to fetch current weather.\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.create_tool(\n    name=\"get_current_weather\",\n    parameters='{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }',\n    version_description=\"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n    description=\"This tool is for getting the current weather.\",\n    fallback_content=\"Unable to fetch current weather.\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.createTool({\n    name: \"get_current_weather\",\n    parameters: \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n    versionDescription: \"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n    description: \"This tool is for getting the current weather.\",\n    fallbackContent: \"Unable to fetch current weather.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "get_current_weather",
                        "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                        "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                        "description": "This tool is for getting the current weather.",
                        "fallback_content": "Unable to fetch current weather."
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "tool_type": "FUNCTION",
                        "id": "aa9b71c4-723c-47ff-9f83-1a1829e74376",
                        "version": 0,
                        "version_type": "FIXED",
                        "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                        "name": "get_current_weather",
                        "created_on": 1715275452390,
                        "modified_on": 1715275452390,
                        "fallback_content": "Unable to fetch current weather.",
                        "description": "This tool is for getting the current weather.",
                        "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/tools",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.create_tool(\n        name=\"get_current_weather\",\n        parameters='{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }',\n        version_description=\"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n        description=\"This tool is for getting the current weather.\",\n        fallback_content=\"Unable to fetch current weather.\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.create_tool(\n    name=\"get_current_weather\",\n    parameters='{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }',\n    version_description=\"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n    description=\"This tool is for getting the current weather.\",\n    fallback_content=\"Unable to fetch current weather.\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.createTool({\n    name: \"get_current_weather\",\n    parameters: \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n    versionDescription: \"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n    description: \"This tool is for getting the current weather.\",\n    fallbackContent: \"Unable to fetch current weather.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "parameters": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Creates a **Tool** that can be added to an [EVI configuration](/reference/empathic-voice-interface-evi/configs/create-config).\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-tool-versions",
                "method": "GET",
                "id": "list-tool-versions",
                "originalEndpointId": "endpoint_tools.list-tool-versions",
                "name": "List tool versions",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "By default, `restrict_to_most_recent` is set to true, returning only the latest version of each tool. To include all versions of each tool in the list, set `restrict_to_most_recent` to false.",
                    "key": "restrict_to_most_recent",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedUserDefinedTools"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Tools List Tool Versions Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
                    "pathParameters": {
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 0,
                      "page_size": 10,
                      "total_pages": 1,
                      "tools_page": [
                        {
                          "tool_type": "FUNCTION",
                          "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                          "version": 1,
                          "version_type": "FIXED",
                          "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                          "name": "get_current_weather",
                          "created_on": 1715277014228,
                          "modified_on": 1715277602313,
                          "fallback_content": "Unable to fetch current weather.",
                          "description": "This tool is for getting the current weather.",
                          "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.list_tool_versions(\n        id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.list_tool_versions(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.listToolVersions(\"00183a3f-79ba-413d-9f3b-609864268bea\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 0,
                        "page_size": 10,
                        "total_pages": 1,
                        "tools_page": [
                          {
                            "tool_type": "FUNCTION",
                            "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                            "version": 1,
                            "version_type": "FIXED",
                            "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                            "name": "get_current_weather",
                            "created_on": 1715277014228,
                            "modified_on": 1715277602313,
                            "fallback_content": "Unable to fetch current weather.",
                            "description": "This tool is for getting the current weather.",
                            "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/tools/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.list_tool_versions(\n        id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.list_tool_versions(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.listToolVersions(\"00183a3f-79ba-413d-9f3b-609864268bea\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a list of a **Tool's** versions.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-tool-version",
                "method": "POST",
                "id": "create-tool-version",
                "originalEndpointId": "endpoint_tools.create-tool-version",
                "name": "Create tool version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "An optional description of the Tool version.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "An optional description of what the Tool does, used by the supplemental LLM to choose when and how to call the function.",
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Stringified JSON defining the parameters used by this version of the Tool.\n\nThese parameters define the inputs needed for the Tool’s execution, including the expected data type and description for each input field. Structured as a stringified JSON schema, this format ensures the Tool receives data in the expected format.",
                        "key": "parameters",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Optional text passed to the supplemental LLM in place of the tool call result. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation if the Tool errors.",
                        "key": "fallback_content",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnUserDefinedTool"
                      }
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Tools Create Tool Version Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
                    "pathParameters": {
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                      "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                      "fallback_content": "Unable to fetch current weather.",
                      "description": "This tool is for getting the current weather."
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "tool_type": "FUNCTION",
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                      "version": 1,
                      "version_type": "FIXED",
                      "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                      "name": "get_current_weather",
                      "created_on": 1715277014228,
                      "modified_on": 1715277602313,
                      "fallback_content": "Unable to fetch current weather.",
                      "description": "This tool is for getting the current weather.",
                      "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.create_tool_version(\n        id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n        parameters='{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }',\n        version_description=\"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n        fallback_content=\"Unable to fetch current weather.\",\n        description=\"This tool is for getting the current weather.\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.create_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    parameters='{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }',\n    version_description=\"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n    fallback_content=\"Unable to fetch current weather.\",\n    description=\"This tool is for getting the current weather.\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.createToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", {\n    parameters: \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\", \\\"kelvin\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n    versionDescription: \"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n    fallbackContent: \"Unable to fetch current weather.\",\n    description: \"This tool is for getting the current weather.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                        "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                        "fallback_content": "Unable to fetch current weather.",
                        "description": "This tool is for getting the current weather."
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "tool_type": "FUNCTION",
                        "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                        "version": 1,
                        "version_type": "FIXED",
                        "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                        "name": "get_current_weather",
                        "created_on": 1715277014228,
                        "modified_on": 1715277602313,
                        "fallback_content": "Unable to fetch current weather.",
                        "description": "This tool is for getting the current weather.",
                        "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/tools/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.create_tool_version(\n        id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n        parameters='{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }',\n        version_description=\"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n        fallback_content=\"Unable to fetch current weather.\",\n        description=\"This tool is for getting the current weather.\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.create_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    parameters='{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }',\n    version_description=\"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n    fallback_content=\"Unable to fetch current weather.\",\n    description=\"This tool is for getting the current weather.\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.createToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", {\n    parameters: \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\", \\\"kelvin\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n    versionDescription: \"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n    fallbackContent: \"Unable to fetch current weather.\",\n    description: \"This tool is for getting the current weather.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "parameters": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates a **Tool** by creating a new version of the **Tool**.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-tool",
                "method": "DELETE",
                "id": "delete-tool",
                "originalEndpointId": "endpoint_tools.delete-tool",
                "name": "Delete tool",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Tools Delete Tool Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
                    "pathParameters": {
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.delete_tool(\n        id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.delete_tool(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.deleteTool(\"00183a3f-79ba-413d-9f3b-609864268bea\");\n"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/tools/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.delete_tool(\n        id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.delete_tool(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.deleteTool(\"00183a3f-79ba-413d-9f3b-609864268bea\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Deletes a **Tool** and its versions.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-tool-name",
                "method": "PATCH",
                "id": "update-tool-name",
                "originalEndpointId": "endpoint_tools.update-tool-name",
                "name": "Update tool name",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Name applied to all versions of a particular Tool.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Tools Update Tool Name Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/tools/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.update_tool_name(\n        id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n        name=\"get_current_temperature\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.update_tool_name(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    name=\"get_current_temperature\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.updateToolName(\"00183a3f-79ba-413d-9f3b-609864268bea\", {\n    name: \"get_current_temperature\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/tools/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.update_tool_name(\n        id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n        name=\"get_current_temperature\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.update_tool_name(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    name=\"get_current_temperature\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.updateToolName(\"00183a3f-79ba-413d-9f3b-609864268bea\", {\n    name: \"get_current_temperature\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates the name of a **Tool**.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-tool-version",
                "method": "GET",
                "id": "get-tool-version",
                "originalEndpointId": "endpoint_tools.get-tool-version",
                "name": "Get tool version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a Tool.\n\nTools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnUserDefinedTool"
                      }
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Tools Get Tool Version Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1",
                    "pathParameters": {
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "tool_type": "FUNCTION",
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                      "version": 1,
                      "version_type": "FIXED",
                      "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                      "name": "string",
                      "created_on": 1715277014228,
                      "modified_on": 1715277602313,
                      "fallback_content": "Unable to fetch current weather.",
                      "description": "This tool is for getting the current weather.",
                      "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.get_tool_version(\n        id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n        version=1,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.get_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.getToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1);\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "tool_type": "FUNCTION",
                        "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                        "version": 1,
                        "version_type": "FIXED",
                        "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                        "name": "string",
                        "created_on": 1715277014228,
                        "modified_on": 1715277602313,
                        "fallback_content": "Unable to fetch current weather.",
                        "description": "This tool is for getting the current weather.",
                        "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/tools/:id/version/0",
                    "pathParameters": {
                      "id": ":id",
                      "version": 0
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.get_tool_version(\n        id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n        version=1,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.get_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.getToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1);\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a specified version of a **Tool**.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-tool-version",
                "method": "DELETE",
                "id": "delete-tool-version",
                "originalEndpointId": "endpoint_tools.delete-tool-version",
                "name": "Delete tool version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a Tool.\n\nTools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Tools Delete Tool Version Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1",
                    "pathParameters": {
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.delete_tool_version(\n        id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n        version=1,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.delete_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.deleteToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1);\n"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/tools/:id/version/0",
                    "pathParameters": {
                      "id": ":id",
                      "version": 0
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.delete_tool_version(\n        id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n        version=1,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.delete_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.deleteToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1);\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Deletes a specified version of a **Tool**.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-tool-description",
                "method": "PATCH",
                "id": "update-tool-description",
                "originalEndpointId": "endpoint_tools.update-tool-description",
                "name": "Update tool description",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Tool. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a Tool.\n\nTools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/tools/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "An optional description of the Tool version.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnUserDefinedTool"
                      }
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Tools Update Tool Description Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1",
                    "pathParameters": {
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "version_description": "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region."
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "tool_type": "FUNCTION",
                      "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                      "version": 1,
                      "version_type": "FIXED",
                      "version_description": "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.",
                      "name": "string",
                      "created_on": 1715277014228,
                      "modified_on": 1715277602313,
                      "fallback_content": "Unable to fetch current weather.",
                      "description": "This tool is for getting the current weather.",
                      "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.update_tool_description(\n        id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n        version=1,\n        version_description=\"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.update_tool_description(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n    version_description=\"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.updateToolDescription(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1, {\n    versionDescription: \"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "version_description": "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region."
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "tool_type": "FUNCTION",
                        "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                        "version": 1,
                        "version_type": "FIXED",
                        "version_description": "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.",
                        "name": "string",
                        "created_on": 1715277014228,
                        "modified_on": 1715277602313,
                        "fallback_content": "Unable to fetch current weather.",
                        "description": "This tool is for getting the current weather.",
                        "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/tools/:id/version/0",
                    "pathParameters": {
                      "id": ":id",
                      "version": 0
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.tools.update_tool_description(\n        id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n        version=1,\n        version_description=\"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.update_tool_description(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n    version_description=\"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.updateToolDescription(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1, {\n    versionDescription: \"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates the description of a specified **Tool** version.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "tools",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_prompts": {
            "subpackageId": "subpackage_prompts",
            "name": "prompts",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-prompts",
                "method": "GET",
                "id": "list-prompts",
                "originalEndpointId": "endpoint_prompts.list-prompts",
                "name": "List prompts",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Only include the most recent version of each prompt in the list.",
                    "key": "restrict_to_most_recent",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter to only include prompts with name.",
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedPrompts"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Prompts List Prompts Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/prompts",
                    "pathParameters": {},
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 2
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 0,
                      "page_size": 2,
                      "total_pages": 1,
                      "prompts_page": [
                        {
                          "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                          "version": 0,
                          "version_type": "FIXED",
                          "version_description": "",
                          "name": "Weather Assistant Prompt",
                          "created_on": 1715267200693,
                          "modified_on": 1715267200693,
                          "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                        },
                        {
                          "id": "616b2b4c-a096-4445-9c23-64058b564fc2",
                          "version": 0,
                          "version_type": "FIXED",
                          "version_description": "",
                          "name": "Web Search Assistant Prompt",
                          "created_on": 1715267200693,
                          "modified_on": 1715267200693,
                          "text": "<role>You are an AI web search assistant designed to help users find accurate and relevant information on the web. Respond to user queries promptly, using the built-in web search tool to retrieve up-to-date results. Present information clearly and concisely, summarizing key points where necessary. Use simple language and avoid technical jargon. If needed, provide helpful tips for refining search queries to obtain better results.</role>"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.empathic_voice.prompts.list_prompts(\n        page_number=0,\n        page_size=2,\n    )\n    async for item in response:\n        yield item\n    # alternatively, you can paginate page-by-page\n    async for page in response.iter_pages():\n        yield page\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.prompts.list_prompts(\n    page_number=0,\n    page_size=2,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.listPrompts({\n    pageNumber: 0,\n    pageSize: 2\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 0,
                        "page_size": 2,
                        "total_pages": 1,
                        "prompts_page": [
                          {
                            "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                            "version": 0,
                            "version_type": "FIXED",
                            "version_description": "",
                            "name": "Weather Assistant Prompt",
                            "created_on": 1715267200693,
                            "modified_on": 1715267200693,
                            "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                          },
                          {
                            "id": "616b2b4c-a096-4445-9c23-64058b564fc2",
                            "version": 0,
                            "version_type": "FIXED",
                            "version_description": "",
                            "name": "Web Search Assistant Prompt",
                            "created_on": 1715267200693,
                            "modified_on": 1715267200693,
                            "text": "<role>You are an AI web search assistant designed to help users find accurate and relevant information on the web. Respond to user queries promptly, using the built-in web search tool to retrieve up-to-date results. Present information clearly and concisely, summarizing key points where necessary. Use simple language and avoid technical jargon. If needed, provide helpful tips for refining search queries to obtain better results.</role>"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/prompts",
                    "pathParameters": {},
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.empathic_voice.prompts.list_prompts(\n        page_number=0,\n        page_size=2,\n    )\n    async for item in response:\n        yield item\n    # alternatively, you can paginate page-by-page\n    async for page in response.iter_pages():\n        yield page\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.prompts.list_prompts(\n    page_number=0,\n    page_size=2,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.listPrompts({\n    pageNumber: 0,\n    pageSize: 2\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a paginated list of **Prompts**.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-prompt",
                "method": "POST",
                "id": "create-prompt",
                "originalEndpointId": "endpoint_prompts.create-prompt",
                "name": "Create prompt",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Name applied to all versions of a particular Prompt.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "An optional description of the Prompt version.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Instructions used to shape EVI’s behavior, responses, and style.\n\nYou can use the Prompt to define a specific goal or role for EVI, specifying how it should act or what it should focus on during the conversation. For example, EVI can be instructed to act as a customer support representative, a fitness coach, or a travel advisor, each with its own set of behaviors and response styles.\n\nFor help writing a system prompt, see our [Prompting Guide](/docs/empathic-voice-interface-evi/prompting).",
                        "key": "text",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnPrompt"
                      }
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Prompts Create Prompt Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/prompts",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "name": "Weather Assistant Prompt",
                      "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                      "version": 0,
                      "version_type": "FIXED",
                      "name": "Weather Assistant Prompt",
                      "created_on": 1722633247488,
                      "modified_on": 1722633247488,
                      "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.create_prompt(\n        name=\"Weather Assistant Prompt\",\n        text=\"<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.create_prompt(\n    name=\"Weather Assistant Prompt\",\n    text=\"<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.createPrompt({\n    name: \"Weather Assistant Prompt\",\n    text: \"<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "Weather Assistant Prompt",
                        "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                        "version": 0,
                        "version_type": "FIXED",
                        "name": "Weather Assistant Prompt",
                        "created_on": 1722633247488,
                        "modified_on": 1722633247488,
                        "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/prompts",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.create_prompt(\n        name=\"Weather Assistant Prompt\",\n        text=\"<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.create_prompt(\n    name=\"Weather Assistant Prompt\",\n    text=\"<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.createPrompt({\n    name: \"Weather Assistant Prompt\",\n    text: \"<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "text": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Creates a **Prompt** that can be added to an [EVI configuration](/reference/empathic-voice-interface-evi/configs/create-config).\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-prompt-versions",
                "method": "GET",
                "id": "list-prompt-versions",
                "originalEndpointId": "endpoint_prompts.list-prompt-versions",
                "name": "List prompt versions",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Prompt. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "By default, `restrict_to_most_recent` is set to true, returning only the latest version of each prompt. To include all versions of each prompt in the list, set `restrict_to_most_recent` to false.",
                    "key": "restrict_to_most_recent",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedPrompts"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Prompts List Prompt Versions Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5",
                    "pathParameters": {
                      "id": "af699d45-2985-42cc-91b9-af9e5da3bac5"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 0,
                      "page_size": 10,
                      "total_pages": 1,
                      "prompts_page": [
                        {
                          "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                          "version": 0,
                          "version_type": "FIXED",
                          "version_description": "",
                          "name": "Weather Assistant Prompt",
                          "created_on": 1722633247488,
                          "modified_on": 1722633247488,
                          "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.list_prompt_versions(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.list_prompt_versions(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.listPromptVersions(\"af699d45-2985-42cc-91b9-af9e5da3bac5\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 0,
                        "page_size": 10,
                        "total_pages": 1,
                        "prompts_page": [
                          {
                            "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                            "version": 0,
                            "version_type": "FIXED",
                            "version_description": "",
                            "name": "Weather Assistant Prompt",
                            "created_on": 1722633247488,
                            "modified_on": 1722633247488,
                            "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/prompts/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.list_prompt_versions(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.list_prompt_versions(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.listPromptVersions(\"af699d45-2985-42cc-91b9-af9e5da3bac5\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a list of a **Prompt's** versions.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-prompt-verison",
                "migratedFromUrlSlugs": ["create-prompt-version"],
                "method": "POST",
                "id": "create-prompt-verison",
                "originalEndpointId": "endpoint_prompts.create-prompt-verison",
                "name": "Create prompt version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Prompt. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "An optional description of the Prompt version.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Instructions used to shape EVI’s behavior, responses, and style for this version of the Prompt.\n\nYou can use the Prompt to define a specific goal or role for EVI, specifying how it should act or what it should focus on during the conversation. For example, EVI can be instructed to act as a customer support representative, a fitness coach, or a travel advisor, each with its own set of behaviors and response styles.\n\nFor help writing a system prompt, see our [Prompting Guide](/docs/empathic-voice-interface-evi/prompting).",
                        "key": "text",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnPrompt"
                      }
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Prompts Create Prompt Verison Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5",
                    "pathParameters": {
                      "id": "af699d45-2985-42cc-91b9-af9e5da3bac5"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "text": "<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                      "version_description": "This is an updated version of the Weather Assistant Prompt."
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                      "version": 1,
                      "version_type": "FIXED",
                      "version_description": "This is an updated version of the Weather Assistant Prompt.",
                      "name": "Weather Assistant Prompt",
                      "created_on": 1722633247488,
                      "modified_on": 1722635140150,
                      "text": "<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.create_prompt_verison(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        text=\"<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n        version_description=\"This is an updated version of the Weather Assistant Prompt.\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.create_prompt_verison(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    text=\"<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n    version_description=\"This is an updated version of the Weather Assistant Prompt.\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.createPromptVerison(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", {\n    text: \"<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n    versionDescription: \"This is an updated version of the Weather Assistant Prompt.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "text": "<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                        "version_description": "This is an updated version of the Weather Assistant Prompt."
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                        "version": 1,
                        "version_type": "FIXED",
                        "version_description": "This is an updated version of the Weather Assistant Prompt.",
                        "name": "Weather Assistant Prompt",
                        "created_on": 1722633247488,
                        "modified_on": 1722635140150,
                        "text": "<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/prompts/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.create_prompt_verison(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        text=\"<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n        version_description=\"This is an updated version of the Weather Assistant Prompt.\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.create_prompt_verison(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    text=\"<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n    version_description=\"This is an updated version of the Weather Assistant Prompt.\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.createPromptVerison(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", {\n    text: \"<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n    versionDescription: \"This is an updated version of the Weather Assistant Prompt.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "text": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates a **Prompt** by creating a new version of the **Prompt**.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-prompt",
                "method": "DELETE",
                "id": "delete-prompt",
                "originalEndpointId": "endpoint_prompts.delete-prompt",
                "name": "Delete prompt",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Prompt. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Prompts Delete Prompt Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5",
                    "pathParameters": {
                      "id": "af699d45-2985-42cc-91b9-af9e5da3bac5"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.delete_prompt(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.delete_prompt(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.deletePrompt(\"af699d45-2985-42cc-91b9-af9e5da3bac5\");\n"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/prompts/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.delete_prompt(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.delete_prompt(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.deletePrompt(\"af699d45-2985-42cc-91b9-af9e5da3bac5\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Deletes a **Prompt** and its versions.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-prompt-name",
                "method": "PATCH",
                "id": "update-prompt-name",
                "originalEndpointId": "endpoint_prompts.update-prompt-name",
                "name": "Update prompt name",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Prompt. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Name applied to all versions of a particular Prompt.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Prompts Update Prompt Name Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/prompts/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.update_prompt_name(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        name=\"Updated Weather Assistant Prompt Name\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.update_prompt_name(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    name=\"Updated Weather Assistant Prompt Name\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.updatePromptName(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", {\n    name: \"Updated Weather Assistant Prompt Name\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/prompts/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.update_prompt_name(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        name=\"Updated Weather Assistant Prompt Name\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.update_prompt_name(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    name=\"Updated Weather Assistant Prompt Name\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.updatePromptName(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", {\n    name: \"Updated Weather Assistant Prompt Name\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates the name of a **Prompt**.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-prompt-version",
                "method": "GET",
                "id": "get-prompt-version",
                "originalEndpointId": "endpoint_prompts.get-prompt-version",
                "name": "Get prompt version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Prompt. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a Prompt.\n\nPrompts, Configs, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine prompts and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Prompt. Each update to the Prompt increments its version number.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnPrompt"
                      }
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Prompts Get Prompt Version Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5/version/0",
                    "pathParameters": {
                      "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                      "version": 0
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                      "version": 0,
                      "version_type": "FIXED",
                      "version_description": "",
                      "name": "Weather Assistant Prompt",
                      "created_on": 1722633247488,
                      "modified_on": 1722633247488,
                      "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.get_prompt_version(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=0,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.get_prompt_version(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=0,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.getPromptVersion(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", 0);\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                        "version": 0,
                        "version_type": "FIXED",
                        "version_description": "",
                        "name": "Weather Assistant Prompt",
                        "created_on": 1722633247488,
                        "modified_on": 1722633247488,
                        "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/prompts/:id/version/0",
                    "pathParameters": {
                      "id": ":id",
                      "version": 0
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.get_prompt_version(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=0,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.get_prompt_version(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=0,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.getPromptVersion(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", 0);\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a specified version of a **Prompt**.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-prompt-version",
                "method": "DELETE",
                "id": "delete-prompt-version",
                "originalEndpointId": "endpoint_prompts.delete-prompt-version",
                "name": "Delete prompt version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Prompt. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a Prompt.\n\nPrompts, Configs, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine prompts and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Prompt. Each update to the Prompt increments its version number.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Prompts Delete Prompt Version Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5/version/1",
                    "pathParameters": {
                      "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.delete_prompt_version(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=1,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.delete_prompt_version(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=1,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.deletePromptVersion(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", 1);\n"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/prompts/:id/version/0",
                    "pathParameters": {
                      "id": ":id",
                      "version": 0
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.delete_prompt_version(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=1,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.delete_prompt_version(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=1,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.deletePromptVersion(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", 1);\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Deletes a specified version of a **Prompt**.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-prompt-description",
                "method": "PATCH",
                "id": "update-prompt-description",
                "originalEndpointId": "endpoint_prompts.update-prompt-description",
                "name": "Update prompt description",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Prompt. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a Prompt.\n\nPrompts, Configs, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine prompts and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Prompt. Each update to the Prompt increments its version number.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "An optional description of the Prompt version.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnPrompt"
                      }
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Prompts Update Prompt Description Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5/version/1",
                    "pathParameters": {
                      "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "version_description": "This is an updated version_description."
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                      "version": 1,
                      "version_type": "FIXED",
                      "version_description": "This is an updated version_description.",
                      "name": "string",
                      "created_on": 1722633247488,
                      "modified_on": 1722634770585,
                      "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.update_prompt_description(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=1,\n        version_description=\"This is an updated version_description.\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.update_prompt_description(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=1,\n    version_description=\"This is an updated version_description.\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.updatePromptDescription(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", 1, {\n    versionDescription: \"This is an updated version_description.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "version_description": "This is an updated version_description."
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                        "version": 1,
                        "version_type": "FIXED",
                        "version_description": "This is an updated version_description.",
                        "name": "string",
                        "created_on": 1722633247488,
                        "modified_on": 1722634770585,
                        "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/prompts/:id/version/0",
                    "pathParameters": {
                      "id": ":id",
                      "version": 0
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.prompts.update_prompt_description(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=1,\n        version_description=\"This is an updated version_description.\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.update_prompt_description(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=1,\n    version_description=\"This is an updated version_description.\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.updatePromptDescription(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", 1, {\n    versionDescription: \"This is an updated version_description.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates the description of a **Prompt**.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "prompts",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_customVoices": {
            "subpackageId": "subpackage_customVoices",
            "name": "customVoices",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-custom-voices",
                "method": "GET",
                "id": "list-custom-voices",
                "originalEndpointId": "endpoint_customVoices.list-custom-voices",
                "name": "List custom voices",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/custom_voices"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter to only include custom voices with name.",
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedCustomVoices"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Custom Voices List Custom Voices Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/custom_voices",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 1,
                      "page_size": 1,
                      "total_pages": 1,
                      "custom_voices_page": [
                        {
                          "id": "id",
                          "version": 1,
                          "name": "name",
                          "created_on": 1000000,
                          "modified_on": 1000000,
                          "base_voice": "ITO",
                          "parameter_model": "20241004-11parameter",
                          "parameters": {}
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.custom_voices.list_custom_voices()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.list_custom_voices()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.listCustomVoices();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 1,
                        "page_size": 1,
                        "total_pages": 1,
                        "custom_voices_page": [
                          {
                            "id": "id",
                            "version": 1,
                            "name": "name",
                            "created_on": 1000000,
                            "modified_on": 1000000,
                            "base_voice": "ITO",
                            "parameter_model": "20241004-11parameter",
                            "parameters": {}
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/custom_voices",
                    "pathParameters": {},
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.custom_voices.list_custom_voices()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.list_custom_voices()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.listCustomVoices();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a paginated list of **Custom Voices**.\n\nRefer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-custom-voice",
                "method": "POST",
                "id": "create-custom-voice",
                "originalEndpointId": "endpoint_customVoices.create-custom-voice",
                "name": "Create custom voice",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/custom_voices"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:PostedCustomVoice"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnCustomVoice"
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Custom Voices Create Custom Voice Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/custom_voices",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "name": "name",
                      "base_voice": "ITO",
                      "parameter_model": "20241004-11parameter"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "version": 1,
                      "name": "name",
                      "created_on": 1000000,
                      "modified_on": 1000000,
                      "base_voice": "ITO",
                      "parameter_model": "20241004-11parameter",
                      "parameters": {
                        "gender": 1,
                        "articulation": 1,
                        "assertiveness": 1,
                        "buoyancy": 1,
                        "confidence": 1,
                        "enthusiasm": 1,
                        "nasality": 1,
                        "relaxedness": 1,
                        "smoothness": 1,
                        "tepidity": 1,
                        "tightness": 1
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.custom_voices.create_custom_voice(\n        name=\"name\",\n        base_voice=\"ITO\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.create_custom_voice(\n    name=\"name\",\n    base_voice=\"ITO\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.createCustomVoice({\n    name: \"name\",\n    baseVoice: Hume.PostedCustomVoiceBaseVoice.Ito,\n    parameterModel: \"20241004-11parameter\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "name",
                        "base_voice": "ITO",
                        "parameter_model": "20241004-11parameter"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "version": 1,
                        "name": "name",
                        "created_on": 1000000,
                        "modified_on": 1000000,
                        "base_voice": "ITO",
                        "parameter_model": "20241004-11parameter",
                        "parameters": {
                          "gender": 1,
                          "articulation": 1,
                          "assertiveness": 1,
                          "buoyancy": 1,
                          "confidence": 1,
                          "enthusiasm": 1,
                          "nasality": 1,
                          "relaxedness": 1,
                          "smoothness": 1,
                          "tepidity": 1,
                          "tightness": 1
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/custom_voices",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.custom_voices.create_custom_voice(\n        name=\"name\",\n        base_voice=\"ITO\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.create_custom_voice(\n    name=\"name\",\n    base_voice=\"ITO\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.createCustomVoice({\n    name: \"name\",\n    baseVoice: Hume.PostedCustomVoiceBaseVoice.Ito,\n    parameterModel: \"20241004-11parameter\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "base_voice": "ITO",
                        "parameter_model": "20241004-11parameter"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Creates a **Custom Voice** that can be added to an [EVI configuration](/reference/empathic-voice-interface-evi/configs/create-config).\n\nRefer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-custom-voice",
                "migratedFromUrlSlugs": ["get-specific-custom-voice-by-id"],
                "method": "GET",
                "id": "get-custom-voice",
                "originalEndpointId": "endpoint_customVoices.get-custom-voice",
                "name": "Get specific custom voice by ID",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Custom Voice. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/custom_voices/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnCustomVoice"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Custom Voices Get Custom Voice Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/custom_voices/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "version": 1,
                      "name": "name",
                      "created_on": 1000000,
                      "modified_on": 1000000,
                      "base_voice": "ITO",
                      "parameter_model": "20241004-11parameter",
                      "parameters": {
                        "gender": 1,
                        "articulation": 1,
                        "assertiveness": 1,
                        "buoyancy": 1,
                        "confidence": 1,
                        "enthusiasm": 1,
                        "nasality": 1,
                        "relaxedness": 1,
                        "smoothness": 1,
                        "tepidity": 1,
                        "tightness": 1
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.custom_voices.get_custom_voice(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.get_custom_voice(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.getCustomVoice(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "version": 1,
                        "name": "name",
                        "created_on": 1000000,
                        "modified_on": 1000000,
                        "base_voice": "ITO",
                        "parameter_model": "20241004-11parameter",
                        "parameters": {
                          "gender": 1,
                          "articulation": 1,
                          "assertiveness": 1,
                          "buoyancy": 1,
                          "confidence": 1,
                          "enthusiasm": 1,
                          "nasality": 1,
                          "relaxedness": 1,
                          "smoothness": 1,
                          "tepidity": 1,
                          "tightness": 1
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/custom_voices/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.custom_voices.get_custom_voice(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.get_custom_voice(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.getCustomVoice(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a specific **Custom Voice** by ID.\n\nRefer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-custom-voice-version",
                "migratedFromUrlSlugs": ["create-new-version-of-existing-custom-voice"],
                "method": "POST",
                "id": "create-custom-voice-version",
                "originalEndpointId": "endpoint_customVoices.create-custom-voice-version",
                "name": "Create new version of existing custom voice",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Custom Voice. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/custom_voices/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:PostedCustomVoice"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnCustomVoice"
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Custom Voices Create Custom Voice Version Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/custom_voices/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "name": "name",
                      "base_voice": "ITO",
                      "parameter_model": "20241004-11parameter"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "version": 1,
                      "name": "name",
                      "created_on": 1000000,
                      "modified_on": 1000000,
                      "base_voice": "ITO",
                      "parameter_model": "20241004-11parameter",
                      "parameters": {
                        "gender": 1,
                        "articulation": 1,
                        "assertiveness": 1,
                        "buoyancy": 1,
                        "confidence": 1,
                        "enthusiasm": 1,
                        "nasality": 1,
                        "relaxedness": 1,
                        "smoothness": 1,
                        "tepidity": 1,
                        "tightness": 1
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.custom_voices.create_custom_voice_version(\n        id=\"id\",\n        name=\"name\",\n        base_voice=\"ITO\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.create_custom_voice_version(\n    id=\"id\",\n    name=\"name\",\n    base_voice=\"ITO\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.createCustomVoiceVersion(\"id\", {\n    name: \"name\",\n    baseVoice: Hume.PostedCustomVoiceBaseVoice.Ito,\n    parameterModel: \"20241004-11parameter\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "name",
                        "base_voice": "ITO",
                        "parameter_model": "20241004-11parameter"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "version": 1,
                        "name": "name",
                        "created_on": 1000000,
                        "modified_on": 1000000,
                        "base_voice": "ITO",
                        "parameter_model": "20241004-11parameter",
                        "parameters": {
                          "gender": 1,
                          "articulation": 1,
                          "assertiveness": 1,
                          "buoyancy": 1,
                          "confidence": 1,
                          "enthusiasm": 1,
                          "nasality": 1,
                          "relaxedness": 1,
                          "smoothness": 1,
                          "tepidity": 1,
                          "tightness": 1
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/custom_voices/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.custom_voices.create_custom_voice_version(\n        id=\"id\",\n        name=\"name\",\n        base_voice=\"ITO\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.create_custom_voice_version(\n    id=\"id\",\n    name=\"name\",\n    base_voice=\"ITO\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.createCustomVoiceVersion(\"id\", {\n    name: \"name\",\n    baseVoice: Hume.PostedCustomVoiceBaseVoice.Ito,\n    parameterModel: \"20241004-11parameter\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "base_voice": "ITO",
                        "parameter_model": "20241004-11parameter"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates a **Custom Voice** by creating a new version of the **Custom Voice**.\n\nRefer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-custom-voice",
                "migratedFromUrlSlugs": ["delete-a-custom-voice"],
                "method": "DELETE",
                "id": "delete-custom-voice",
                "originalEndpointId": "endpoint_customVoices.delete-custom-voice",
                "name": "Delete a custom voice",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Custom Voice. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/custom_voices/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Custom Voices Delete Custom Voice Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/custom_voices/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.custom_voices.delete_custom_voice(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.delete_custom_voice(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.deleteCustomVoice(\"id\");\n"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/custom_voices/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.custom_voices.delete_custom_voice(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.delete_custom_voice(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.deleteCustomVoice(\"id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Deletes a **Custom Voice** and its versions.\n\nRefer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-custom-voice-name",
                "method": "PATCH",
                "id": "update-custom-voice-name",
                "originalEndpointId": "endpoint_customVoices.update-custom-voice-name",
                "name": "Update custom voice name",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Custom Voice. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/custom_voices/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The name of the Custom Voice. Maximum length of 75 characters. Will be converted to all-uppercase. (e.g., \"sample voice\" becomes \"SAMPLE VOICE\")",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Custom Voices Update Custom Voice Name Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/custom_voices/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/custom_voices/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates the name of a **Custom Voice**.\n\nRefer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "custom-voices",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_configs": {
            "subpackageId": "subpackage_configs",
            "name": "configs",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-configs",
                "method": "GET",
                "id": "list-configs",
                "originalEndpointId": "endpoint_configs.list-configs",
                "name": "List configs",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "By default, `restrict_to_most_recent` is set to true, returning only the latest version of each tool. To include all versions of each tool in the list, set `restrict_to_most_recent` to false.",
                    "key": "restrict_to_most_recent",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter to only include configs with this name.",
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedConfigs"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Configs List Configs Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/configs",
                    "pathParameters": {},
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 1
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 0,
                      "page_size": 1,
                      "total_pages": 1,
                      "configs_page": [
                        {
                          "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                          "version": 0,
                          "version_description": "",
                          "name": "Weather Assistant Config",
                          "created_on": 1715267200693,
                          "modified_on": 1715267200693,
                          "evi_version": "2",
                          "prompt": {
                            "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                            "version": 0,
                            "version_type": "FIXED",
                            "version_description": "",
                            "name": "Weather Assistant Prompt",
                            "created_on": 1715267200693,
                            "modified_on": 1715267200693,
                            "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                          },
                          "voice": {
                            "provider": "HUME_AI",
                            "name": "SAMPLE VOICE",
                            "custom_voice": {
                              "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                              "version": 1,
                              "name": "SAMPLE VOICE",
                              "created_on": 1724704587367,
                              "modified_on": 1725489961583,
                              "base_voice": "KORA",
                              "parameter_model": "20241004-11parameter",
                              "parameters": {
                                "gender": 0,
                                "articulation": -10,
                                "assertiveness": 20,
                                "buoyancy": -30,
                                "confidence": -40,
                                "enthusiasm": 50,
                                "nasality": 45,
                                "relaxedness": -35,
                                "smoothness": 25,
                                "tepidity": 15,
                                "tightness": 5
                              }
                            }
                          },
                          "language_model": {
                            "model_provider": "ANTHROPIC",
                            "model_resource": "claude-3-5-sonnet-20240620",
                            "temperature": 1
                          },
                          "ellm_model": {
                            "allow_short_responses": false
                          },
                          "tools": [],
                          "builtin_tools": [],
                          "event_messages": {
                            "on_new_chat": {
                              "enabled": false,
                              "text": ""
                            },
                            "on_inactivity_timeout": {
                              "enabled": false,
                              "text": ""
                            },
                            "on_max_duration_timeout": {
                              "enabled": false,
                              "text": ""
                            }
                          },
                          "timeouts": {
                            "inactivity": {
                              "enabled": true,
                              "duration_secs": 600
                            },
                            "max_duration": {
                              "enabled": true,
                              "duration_secs": 1800
                            }
                          }
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.list_configs(\n        page_number=0,\n        page_size=1,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.list_configs(\n    page_number=0,\n    page_size=1,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.listConfigs({\n    pageNumber: 0,\n    pageSize: 1\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 0,
                        "page_size": 1,
                        "total_pages": 1,
                        "configs_page": [
                          {
                            "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                            "version": 0,
                            "version_description": "",
                            "name": "Weather Assistant Config",
                            "created_on": 1715267200693,
                            "modified_on": 1715267200693,
                            "evi_version": "2",
                            "prompt": {
                              "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                              "version": 0,
                              "version_type": "FIXED",
                              "version_description": "",
                              "name": "Weather Assistant Prompt",
                              "created_on": 1715267200693,
                              "modified_on": 1715267200693,
                              "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                            },
                            "voice": {
                              "provider": "HUME_AI",
                              "name": "SAMPLE VOICE",
                              "custom_voice": {
                                "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                                "version": 1,
                                "name": "SAMPLE VOICE",
                                "created_on": 1724704587367,
                                "modified_on": 1725489961583,
                                "base_voice": "KORA",
                                "parameter_model": "20241004-11parameter",
                                "parameters": {
                                  "gender": 0,
                                  "articulation": -10,
                                  "assertiveness": 20,
                                  "buoyancy": -30,
                                  "confidence": -40,
                                  "enthusiasm": 50,
                                  "nasality": 45,
                                  "relaxedness": -35,
                                  "smoothness": 25,
                                  "tepidity": 15,
                                  "tightness": 5
                                }
                              }
                            },
                            "language_model": {
                              "model_provider": "ANTHROPIC",
                              "model_resource": "claude-3-5-sonnet-20240620",
                              "temperature": 1
                            },
                            "ellm_model": {
                              "allow_short_responses": false
                            },
                            "tools": [],
                            "builtin_tools": [],
                            "event_messages": {
                              "on_new_chat": {
                                "enabled": false,
                                "text": ""
                              },
                              "on_inactivity_timeout": {
                                "enabled": false,
                                "text": ""
                              },
                              "on_max_duration_timeout": {
                                "enabled": false,
                                "text": ""
                              }
                            },
                            "timeouts": {
                              "inactivity": {
                                "enabled": true,
                                "duration_secs": 600
                              },
                              "max_duration": {
                                "enabled": true,
                                "duration_secs": 1800
                              }
                            }
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/configs",
                    "pathParameters": {},
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.list_configs(\n        page_number=0,\n        page_size=1,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.list_configs(\n    page_number=0,\n    page_size=1,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.listConfigs({\n    pageNumber: 0,\n    pageSize: 1\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a paginated list of **Configs**.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-config",
                "method": "POST",
                "id": "create-config",
                "originalEndpointId": "endpoint_configs.create-config",
                "name": "Create config",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Specifies the EVI version to use. Use `\"1\"` for version 1, or `\"2\"` for the latest enhanced version. For a detailed comparison of the two versions, refer to our [guide](/docs/empathic-voice-interface-evi/evi-2).",
                        "key": "evi_version",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Name applied to all versions of a particular Config.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "An optional description of the Config version.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "key": "prompt",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedConfigPromptSpec"
                          }
                        }
                      },
                      {
                        "description": "A voice specification associated with this Config.",
                        "key": "voice",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedVoice"
                          }
                        }
                      },
                      {
                        "description": "The supplemental language model associated with this Config.\n\nThis model is used to generate longer, more detailed responses from EVI. Choosing an appropriate supplemental language model for your use case is crucial for generating fast, high-quality responses from EVI.",
                        "key": "language_model",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedLanguageModel"
                          }
                        }
                      },
                      {
                        "description": "The eLLM setup associated with this Config.\n\nHume's eLLM (empathic Large Language Model) is a multimodal language model that takes into account both expression measures and language. The eLLM generates short, empathic language responses and guides text-to-speech (TTS) prosody.",
                        "key": "ellm_model",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedEllmModel"
                          }
                        }
                      },
                      {
                        "description": "List of user-defined tools associated with this Config.",
                        "key": "tools",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "optional",
                              "itemType": {
                                "type": "id",
                                "value": "type_:PostedUserDefinedToolSpec"
                              }
                            }
                          }
                        }
                      },
                      {
                        "description": "List of built-in tools associated with this Config.",
                        "key": "builtin_tools",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "optional",
                              "itemType": {
                                "type": "id",
                                "value": "type_:PostedBuiltinTool"
                              }
                            }
                          }
                        }
                      },
                      {
                        "key": "event_messages",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedEventMessageSpecs"
                          }
                        }
                      },
                      {
                        "key": "timeouts",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedTimeoutSpecs"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnConfig"
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Configs Create Config Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/configs",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "name": "Weather Assistant Config",
                      "prompt": {
                        "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                        "version": 0
                      },
                      "evi_version": "2",
                      "voice": {
                        "provider": "HUME_AI",
                        "name": "SAMPLE VOICE"
                      },
                      "language_model": {
                        "model_provider": "ANTHROPIC",
                        "model_resource": "claude-3-5-sonnet-20240620",
                        "temperature": 1
                      },
                      "event_messages": {
                        "on_new_chat": {
                          "enabled": false,
                          "text": ""
                        },
                        "on_inactivity_timeout": {
                          "enabled": false,
                          "text": ""
                        },
                        "on_max_duration_timeout": {
                          "enabled": false,
                          "text": ""
                        }
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                      "version": 0,
                      "version_description": "",
                      "name": "Weather Assistant Config",
                      "created_on": 1715275452390,
                      "modified_on": 1715275452390,
                      "evi_version": "2",
                      "prompt": {
                        "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                        "version": 0,
                        "version_type": "FIXED",
                        "version_description": "",
                        "name": "Weather Assistant Prompt",
                        "created_on": 1715267200693,
                        "modified_on": 1715267200693,
                        "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                      },
                      "voice": {
                        "provider": "HUME_AI",
                        "name": "SAMPLE VOICE",
                        "custom_voice": {
                          "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                          "version": 1,
                          "name": "SAMPLE VOICE",
                          "created_on": 1724704587367,
                          "modified_on": 1725489961583,
                          "base_voice": "KORA",
                          "parameter_model": "20241004-11parameter",
                          "parameters": {
                            "gender": 0,
                            "articulation": -10,
                            "assertiveness": 20,
                            "buoyancy": -30,
                            "confidence": -40,
                            "enthusiasm": 50,
                            "nasality": 45,
                            "relaxedness": -35,
                            "smoothness": 25,
                            "tepidity": 15,
                            "tightness": 5
                          }
                        }
                      },
                      "language_model": {
                        "model_provider": "ANTHROPIC",
                        "model_resource": "claude-3-5-sonnet-20240620",
                        "temperature": 1
                      },
                      "ellm_model": {
                        "allow_short_responses": false
                      },
                      "tools": [],
                      "builtin_tools": [],
                      "event_messages": {
                        "on_new_chat": {
                          "enabled": false,
                          "text": ""
                        },
                        "on_inactivity_timeout": {
                          "enabled": false,
                          "text": ""
                        },
                        "on_max_duration_timeout": {
                          "enabled": false,
                          "text": ""
                        }
                      },
                      "timeouts": {
                        "inactivity": {
                          "enabled": true,
                          "duration_secs": 600
                        },
                        "max_duration": {
                          "enabled": true,
                          "duration_secs": 1800
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\nfrom hume.empathic_voice import (\n    PostedConfigPromptSpec,\n    PostedEventMessageSpec,\n    PostedEventMessageSpecs,\n    PostedLanguageModel,\n    PostedVoice,\n)\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.create_config(\n        name=\"Weather Assistant Config\",\n        prompt=PostedConfigPromptSpec(\n            id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n            version=0,\n        ),\n        evi_version=\"2\",\n        voice=PostedVoice(\n            provider=\"HUME_AI\",\n            name=\"SAMPLE VOICE\",\n        ),\n        language_model=PostedLanguageModel(\n            model_provider=\"ANTHROPIC\",\n            model_resource=\"claude-3-5-sonnet-20240620\",\n            temperature=1.0,\n        ),\n        event_messages=PostedEventMessageSpecs(\n            on_new_chat=PostedEventMessageSpec(\n                enabled=False,\n                text=\"\",\n            ),\n            on_inactivity_timeout=PostedEventMessageSpec(\n                enabled=False,\n                text=\"\",\n            ),\n            on_max_duration_timeout=PostedEventMessageSpec(\n                enabled=False,\n                text=\"\",\n            ),\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\nfrom hume.empathic_voice import (\n    PostedConfigPromptSpec,\n    PostedEventMessageSpec,\n    PostedEventMessageSpecs,\n    PostedLanguageModel,\n    PostedVoice,\n)\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.create_config(\n    name=\"Weather Assistant Config\",\n    prompt=PostedConfigPromptSpec(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=0,\n    ),\n    evi_version=\"2\",\n    voice=PostedVoice(\n        provider=\"HUME_AI\",\n        name=\"SAMPLE VOICE\",\n    ),\n    language_model=PostedLanguageModel(\n        model_provider=\"ANTHROPIC\",\n        model_resource=\"claude-3-5-sonnet-20240620\",\n        temperature=1.0,\n    ),\n    event_messages=PostedEventMessageSpecs(\n        on_new_chat=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_inactivity_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_max_duration_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n    ),\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.createConfig({\n    name: \"Weather Assistant Config\",\n    prompt: {\n        id: \"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version: 0\n    },\n    eviVersion: \"2\",\n    voice: {\n        provider: Hume.PostedVoiceProvider.HumeAi,\n        name: \"SAMPLE VOICE\"\n    },\n    languageModel: {\n        modelProvider: Hume.PostedLanguageModelModelProvider.Anthropic,\n        modelResource: Hume.PostedLanguageModelModelResource.Claude35Sonnet20240620,\n        temperature: 1\n    },\n    eventMessages: {\n        onNewChat: {\n            enabled: false,\n            text: \"\"\n        },\n        onInactivityTimeout: {\n            enabled: false,\n            text: \"\"\n        },\n        onMaxDurationTimeout: {\n            enabled: false,\n            text: \"\"\n        }\n    }\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "Weather Assistant Config",
                        "prompt": {
                          "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                          "version": 0
                        },
                        "evi_version": "2",
                        "voice": {
                          "provider": "HUME_AI",
                          "name": "SAMPLE VOICE"
                        },
                        "language_model": {
                          "model_provider": "ANTHROPIC",
                          "model_resource": "claude-3-5-sonnet-20240620",
                          "temperature": 1
                        },
                        "event_messages": {
                          "on_new_chat": {
                            "enabled": false,
                            "text": ""
                          },
                          "on_inactivity_timeout": {
                            "enabled": false,
                            "text": ""
                          },
                          "on_max_duration_timeout": {
                            "enabled": false,
                            "text": ""
                          }
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                        "version": 0,
                        "version_description": "",
                        "name": "Weather Assistant Config",
                        "created_on": 1715275452390,
                        "modified_on": 1715275452390,
                        "evi_version": "2",
                        "prompt": {
                          "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                          "version": 0,
                          "version_type": "FIXED",
                          "version_description": "",
                          "name": "Weather Assistant Prompt",
                          "created_on": 1715267200693,
                          "modified_on": 1715267200693,
                          "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                        },
                        "voice": {
                          "provider": "HUME_AI",
                          "name": "SAMPLE VOICE",
                          "custom_voice": {
                            "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                            "version": 1,
                            "name": "SAMPLE VOICE",
                            "created_on": 1724704587367,
                            "modified_on": 1725489961583,
                            "base_voice": "KORA",
                            "parameter_model": "20241004-11parameter",
                            "parameters": {
                              "gender": 0,
                              "articulation": -10,
                              "assertiveness": 20,
                              "buoyancy": -30,
                              "confidence": -40,
                              "enthusiasm": 50,
                              "nasality": 45,
                              "relaxedness": -35,
                              "smoothness": 25,
                              "tepidity": 15,
                              "tightness": 5
                            }
                          }
                        },
                        "language_model": {
                          "model_provider": "ANTHROPIC",
                          "model_resource": "claude-3-5-sonnet-20240620",
                          "temperature": 1
                        },
                        "ellm_model": {
                          "allow_short_responses": false
                        },
                        "tools": [],
                        "builtin_tools": [],
                        "event_messages": {
                          "on_new_chat": {
                            "enabled": false,
                            "text": ""
                          },
                          "on_inactivity_timeout": {
                            "enabled": false,
                            "text": ""
                          },
                          "on_max_duration_timeout": {
                            "enabled": false,
                            "text": ""
                          }
                        },
                        "timeouts": {
                          "inactivity": {
                            "enabled": true,
                            "duration_secs": 600
                          },
                          "max_duration": {
                            "enabled": true,
                            "duration_secs": 1800
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/configs",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\nfrom hume.empathic_voice import (\n    PostedConfigPromptSpec,\n    PostedEventMessageSpec,\n    PostedEventMessageSpecs,\n    PostedLanguageModel,\n    PostedVoice,\n)\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.create_config(\n        name=\"Weather Assistant Config\",\n        prompt=PostedConfigPromptSpec(\n            id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n            version=0,\n        ),\n        evi_version=\"2\",\n        voice=PostedVoice(\n            provider=\"HUME_AI\",\n            name=\"SAMPLE VOICE\",\n        ),\n        language_model=PostedLanguageModel(\n            model_provider=\"ANTHROPIC\",\n            model_resource=\"claude-3-5-sonnet-20240620\",\n            temperature=1.0,\n        ),\n        event_messages=PostedEventMessageSpecs(\n            on_new_chat=PostedEventMessageSpec(\n                enabled=False,\n                text=\"\",\n            ),\n            on_inactivity_timeout=PostedEventMessageSpec(\n                enabled=False,\n                text=\"\",\n            ),\n            on_max_duration_timeout=PostedEventMessageSpec(\n                enabled=False,\n                text=\"\",\n            ),\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\nfrom hume.empathic_voice import (\n    PostedConfigPromptSpec,\n    PostedEventMessageSpec,\n    PostedEventMessageSpecs,\n    PostedLanguageModel,\n    PostedVoice,\n)\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.create_config(\n    name=\"Weather Assistant Config\",\n    prompt=PostedConfigPromptSpec(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=0,\n    ),\n    evi_version=\"2\",\n    voice=PostedVoice(\n        provider=\"HUME_AI\",\n        name=\"SAMPLE VOICE\",\n    ),\n    language_model=PostedLanguageModel(\n        model_provider=\"ANTHROPIC\",\n        model_resource=\"claude-3-5-sonnet-20240620\",\n        temperature=1.0,\n    ),\n    event_messages=PostedEventMessageSpecs(\n        on_new_chat=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_inactivity_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_max_duration_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n    ),\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.createConfig({\n    name: \"Weather Assistant Config\",\n    prompt: {\n        id: \"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version: 0\n    },\n    eviVersion: \"2\",\n    voice: {\n        provider: Hume.PostedVoiceProvider.HumeAi,\n        name: \"SAMPLE VOICE\"\n    },\n    languageModel: {\n        modelProvider: Hume.PostedLanguageModelModelProvider.Anthropic,\n        modelResource: Hume.PostedLanguageModelModelResource.Claude35Sonnet20240620,\n        temperature: 1\n    },\n    eventMessages: {\n        onNewChat: {\n            enabled: false,\n            text: \"\"\n        },\n        onInactivityTimeout: {\n            enabled: false,\n            text: \"\"\n        },\n        onMaxDurationTimeout: {\n            enabled: false,\n            text: \"\"\n        }\n    }\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "evi_version": "string",
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Creates a **Config** which can be applied to EVI.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-config-versions",
                "method": "GET",
                "id": "list-config-versions",
                "originalEndpointId": "endpoint_configs.list-config-versions",
                "name": "List config versions",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Config. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "By default, `restrict_to_most_recent` is set to true, returning only the latest version of each config. To include all versions of each config in the list, set `restrict_to_most_recent` to false.",
                    "key": "restrict_to_most_recent",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedConfigs"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Configs List Config Versions Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                    "pathParameters": {
                      "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 0,
                      "page_size": 10,
                      "total_pages": 1,
                      "configs_page": [
                        {
                          "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                          "version": 0,
                          "version_description": "",
                          "name": "Weather Assistant Config",
                          "created_on": 1715275452390,
                          "modified_on": 1715275452390,
                          "evi_version": "2",
                          "prompt": {
                            "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                            "version": 0,
                            "version_type": "FIXED",
                            "version_description": "",
                            "name": "Weather Assistant Prompt",
                            "created_on": 1715267200693,
                            "modified_on": 1715267200693,
                            "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                          },
                          "voice": {
                            "provider": "HUME_AI",
                            "name": "SAMPLE VOICE",
                            "custom_voice": {
                              "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                              "version": 1,
                              "name": "SAMPLE VOICE",
                              "created_on": 1724704587367,
                              "modified_on": 1725489961583,
                              "base_voice": "KORA",
                              "parameter_model": "20241004-11parameter",
                              "parameters": {
                                "gender": 0,
                                "articulation": -10,
                                "assertiveness": 20,
                                "buoyancy": -30,
                                "confidence": -40,
                                "enthusiasm": 50,
                                "nasality": 45,
                                "relaxedness": -35,
                                "smoothness": 25,
                                "tepidity": 15,
                                "tightness": 5
                              }
                            }
                          },
                          "language_model": {
                            "model_provider": "ANTHROPIC",
                            "model_resource": "claude-3-5-sonnet-20240620",
                            "temperature": 1
                          },
                          "ellm_model": {
                            "allow_short_responses": false
                          },
                          "tools": [],
                          "builtin_tools": [],
                          "event_messages": {
                            "on_new_chat": {
                              "enabled": false,
                              "text": ""
                            },
                            "on_inactivity_timeout": {
                              "enabled": false,
                              "text": ""
                            },
                            "on_max_duration_timeout": {
                              "enabled": false,
                              "text": ""
                            }
                          },
                          "timeouts": {
                            "inactivity": {
                              "enabled": true,
                              "duration_secs": 600
                            },
                            "max_duration": {
                              "enabled": true,
                              "duration_secs": 1800
                            }
                          }
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.list_config_versions(\n        id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.list_config_versions(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.listConfigVersions(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 0,
                        "page_size": 10,
                        "total_pages": 1,
                        "configs_page": [
                          {
                            "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                            "version": 0,
                            "version_description": "",
                            "name": "Weather Assistant Config",
                            "created_on": 1715275452390,
                            "modified_on": 1715275452390,
                            "evi_version": "2",
                            "prompt": {
                              "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                              "version": 0,
                              "version_type": "FIXED",
                              "version_description": "",
                              "name": "Weather Assistant Prompt",
                              "created_on": 1715267200693,
                              "modified_on": 1715267200693,
                              "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                            },
                            "voice": {
                              "provider": "HUME_AI",
                              "name": "SAMPLE VOICE",
                              "custom_voice": {
                                "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                                "version": 1,
                                "name": "SAMPLE VOICE",
                                "created_on": 1724704587367,
                                "modified_on": 1725489961583,
                                "base_voice": "KORA",
                                "parameter_model": "20241004-11parameter",
                                "parameters": {
                                  "gender": 0,
                                  "articulation": -10,
                                  "assertiveness": 20,
                                  "buoyancy": -30,
                                  "confidence": -40,
                                  "enthusiasm": 50,
                                  "nasality": 45,
                                  "relaxedness": -35,
                                  "smoothness": 25,
                                  "tepidity": 15,
                                  "tightness": 5
                                }
                              }
                            },
                            "language_model": {
                              "model_provider": "ANTHROPIC",
                              "model_resource": "claude-3-5-sonnet-20240620",
                              "temperature": 1
                            },
                            "ellm_model": {
                              "allow_short_responses": false
                            },
                            "tools": [],
                            "builtin_tools": [],
                            "event_messages": {
                              "on_new_chat": {
                                "enabled": false,
                                "text": ""
                              },
                              "on_inactivity_timeout": {
                                "enabled": false,
                                "text": ""
                              },
                              "on_max_duration_timeout": {
                                "enabled": false,
                                "text": ""
                              }
                            },
                            "timeouts": {
                              "inactivity": {
                                "enabled": true,
                                "duration_secs": 600
                              },
                              "max_duration": {
                                "enabled": true,
                                "duration_secs": 1800
                              }
                            }
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/configs/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.list_config_versions(\n        id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.list_config_versions(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.listConfigVersions(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a list of a **Config's** versions.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-config-version",
                "method": "POST",
                "id": "create-config-version",
                "originalEndpointId": "endpoint_configs.create-config-version",
                "name": "Create config version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Config. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The version of the EVI used with this config.",
                        "key": "evi_version",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "An optional description of the Config version.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "key": "prompt",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedConfigPromptSpec"
                          }
                        }
                      },
                      {
                        "description": "A voice specification associated with this Config version.",
                        "key": "voice",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedVoice"
                          }
                        }
                      },
                      {
                        "description": "The supplemental language model associated with this Config version.\n\nThis model is used to generate longer, more detailed responses from EVI. Choosing an appropriate supplemental language model for your use case is crucial for generating fast, high-quality responses from EVI.",
                        "key": "language_model",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedLanguageModel"
                          }
                        }
                      },
                      {
                        "description": "The eLLM setup associated with this Config version.\n\nHume's eLLM (empathic Large Language Model) is a multimodal language model that takes into account both expression measures and language. The eLLM generates short, empathic language responses and guides text-to-speech (TTS) prosody.",
                        "key": "ellm_model",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedEllmModel"
                          }
                        }
                      },
                      {
                        "description": "List of user-defined tools associated with this Config version.",
                        "key": "tools",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "optional",
                              "itemType": {
                                "type": "id",
                                "value": "type_:PostedUserDefinedToolSpec"
                              }
                            }
                          }
                        }
                      },
                      {
                        "description": "List of built-in tools associated with this Config version.",
                        "key": "builtin_tools",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "optional",
                              "itemType": {
                                "type": "id",
                                "value": "type_:PostedBuiltinTool"
                              }
                            }
                          }
                        }
                      },
                      {
                        "key": "event_messages",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedEventMessageSpecs"
                          }
                        }
                      },
                      {
                        "key": "timeouts",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PostedTimeoutSpecs"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnConfig"
                    }
                  },
                  "description": "Created"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Configs Create Config Version Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                    "pathParameters": {
                      "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "version_description": "This is an updated version of the Weather Assistant Config.",
                      "evi_version": "2",
                      "prompt": {
                        "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                        "version": 0
                      },
                      "voice": {
                        "provider": "HUME_AI",
                        "name": "ITO"
                      },
                      "language_model": {
                        "model_provider": "ANTHROPIC",
                        "model_resource": "claude-3-5-sonnet-20240620",
                        "temperature": 1
                      },
                      "ellm_model": {
                        "allow_short_responses": true
                      },
                      "event_messages": {
                        "on_new_chat": {
                          "enabled": false,
                          "text": ""
                        },
                        "on_inactivity_timeout": {
                          "enabled": false,
                          "text": ""
                        },
                        "on_max_duration_timeout": {
                          "enabled": false,
                          "text": ""
                        }
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                      "version": 1,
                      "version_description": "This is an updated version of the Weather Assistant Config.",
                      "name": "Weather Assistant Config",
                      "created_on": 1715275452390,
                      "modified_on": 1722642242998,
                      "evi_version": "2",
                      "prompt": {
                        "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                        "version": 0,
                        "version_type": "FIXED",
                        "version_description": "",
                        "name": "Weather Assistant Prompt",
                        "created_on": 1715267200693,
                        "modified_on": 1715267200693,
                        "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                      },
                      "voice": {
                        "provider": "HUME_AI",
                        "name": "ITO",
                        "custom_voice": {
                          "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                          "version": 1,
                          "name": "SAMPLE VOICE",
                          "created_on": 1724704587367,
                          "modified_on": 1725489961583,
                          "base_voice": "KORA",
                          "parameter_model": "20241004-11parameter",
                          "parameters": {
                            "gender": 0,
                            "articulation": -10,
                            "assertiveness": 20,
                            "buoyancy": -30,
                            "confidence": -40,
                            "enthusiasm": 50,
                            "nasality": 45,
                            "relaxedness": -35,
                            "smoothness": 25,
                            "tepidity": 15,
                            "tightness": 5
                          }
                        }
                      },
                      "language_model": {
                        "model_provider": "ANTHROPIC",
                        "model_resource": "claude-3-5-sonnet-20240620",
                        "temperature": 1
                      },
                      "ellm_model": {
                        "allow_short_responses": true
                      },
                      "tools": [],
                      "builtin_tools": [],
                      "event_messages": {
                        "on_new_chat": {
                          "enabled": false,
                          "text": ""
                        },
                        "on_inactivity_timeout": {
                          "enabled": false,
                          "text": ""
                        },
                        "on_max_duration_timeout": {
                          "enabled": false,
                          "text": ""
                        }
                      },
                      "timeouts": {
                        "inactivity": {
                          "enabled": true,
                          "duration_secs": 600
                        },
                        "max_duration": {
                          "enabled": true,
                          "duration_secs": 1800
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\nfrom hume.empathic_voice import (\n    PostedConfigPromptSpec,\n    PostedEllmModel,\n    PostedEventMessageSpec,\n    PostedEventMessageSpecs,\n    PostedLanguageModel,\n    PostedVoice,\n)\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.create_config_version(\n        id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n        version_description=\"This is an updated version of the Weather Assistant Config.\",\n        evi_version=\"2\",\n        prompt=PostedConfigPromptSpec(\n            id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n            version=0,\n        ),\n        voice=PostedVoice(\n            provider=\"HUME_AI\",\n            name=\"ITO\",\n        ),\n        language_model=PostedLanguageModel(\n            model_provider=\"ANTHROPIC\",\n            model_resource=\"claude-3-5-sonnet-20240620\",\n            temperature=1.0,\n        ),\n        ellm_model=PostedEllmModel(\n            allow_short_responses=True,\n        ),\n        event_messages=PostedEventMessageSpecs(\n            on_new_chat=PostedEventMessageSpec(\n                enabled=False,\n                text=\"\",\n            ),\n            on_inactivity_timeout=PostedEventMessageSpec(\n                enabled=False,\n                text=\"\",\n            ),\n            on_max_duration_timeout=PostedEventMessageSpec(\n                enabled=False,\n                text=\"\",\n            ),\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\nfrom hume.empathic_voice import (\n    PostedConfigPromptSpec,\n    PostedEllmModel,\n    PostedEventMessageSpec,\n    PostedEventMessageSpecs,\n    PostedLanguageModel,\n    PostedVoice,\n)\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.create_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version_description=\"This is an updated version of the Weather Assistant Config.\",\n    evi_version=\"2\",\n    prompt=PostedConfigPromptSpec(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=0,\n    ),\n    voice=PostedVoice(\n        provider=\"HUME_AI\",\n        name=\"ITO\",\n    ),\n    language_model=PostedLanguageModel(\n        model_provider=\"ANTHROPIC\",\n        model_resource=\"claude-3-5-sonnet-20240620\",\n        temperature=1.0,\n    ),\n    ellm_model=PostedEllmModel(\n        allow_short_responses=True,\n    ),\n    event_messages=PostedEventMessageSpecs(\n        on_new_chat=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_inactivity_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_max_duration_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n    ),\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.createConfigVersion(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", {\n    versionDescription: \"This is an updated version of the Weather Assistant Config.\",\n    eviVersion: \"2\",\n    prompt: {\n        id: \"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version: 0\n    },\n    voice: {\n        provider: Hume.PostedVoiceProvider.HumeAi,\n        name: \"ITO\"\n    },\n    languageModel: {\n        modelProvider: Hume.PostedLanguageModelModelProvider.Anthropic,\n        modelResource: Hume.PostedLanguageModelModelResource.Claude35Sonnet20240620,\n        temperature: 1\n    },\n    ellmModel: {\n        allowShortResponses: true\n    },\n    eventMessages: {\n        onNewChat: {\n            enabled: false,\n            text: \"\"\n        },\n        onInactivityTimeout: {\n            enabled: false,\n            text: \"\"\n        },\n        onMaxDurationTimeout: {\n            enabled: false,\n            text: \"\"\n        }\n    }\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "version_description": "This is an updated version of the Weather Assistant Config.",
                        "evi_version": "2",
                        "prompt": {
                          "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                          "version": 0
                        },
                        "voice": {
                          "provider": "HUME_AI",
                          "name": "ITO"
                        },
                        "language_model": {
                          "model_provider": "ANTHROPIC",
                          "model_resource": "claude-3-5-sonnet-20240620",
                          "temperature": 1
                        },
                        "ellm_model": {
                          "allow_short_responses": true
                        },
                        "event_messages": {
                          "on_new_chat": {
                            "enabled": false,
                            "text": ""
                          },
                          "on_inactivity_timeout": {
                            "enabled": false,
                            "text": ""
                          },
                          "on_max_duration_timeout": {
                            "enabled": false,
                            "text": ""
                          }
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                        "version": 1,
                        "version_description": "This is an updated version of the Weather Assistant Config.",
                        "name": "Weather Assistant Config",
                        "created_on": 1715275452390,
                        "modified_on": 1722642242998,
                        "evi_version": "2",
                        "prompt": {
                          "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                          "version": 0,
                          "version_type": "FIXED",
                          "version_description": "",
                          "name": "Weather Assistant Prompt",
                          "created_on": 1715267200693,
                          "modified_on": 1715267200693,
                          "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                        },
                        "voice": {
                          "provider": "HUME_AI",
                          "name": "ITO",
                          "custom_voice": {
                            "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                            "version": 1,
                            "name": "SAMPLE VOICE",
                            "created_on": 1724704587367,
                            "modified_on": 1725489961583,
                            "base_voice": "KORA",
                            "parameter_model": "20241004-11parameter",
                            "parameters": {
                              "gender": 0,
                              "articulation": -10,
                              "assertiveness": 20,
                              "buoyancy": -30,
                              "confidence": -40,
                              "enthusiasm": 50,
                              "nasality": 45,
                              "relaxedness": -35,
                              "smoothness": 25,
                              "tepidity": 15,
                              "tightness": 5
                            }
                          }
                        },
                        "language_model": {
                          "model_provider": "ANTHROPIC",
                          "model_resource": "claude-3-5-sonnet-20240620",
                          "temperature": 1
                        },
                        "ellm_model": {
                          "allow_short_responses": true
                        },
                        "tools": [],
                        "builtin_tools": [],
                        "event_messages": {
                          "on_new_chat": {
                            "enabled": false,
                            "text": ""
                          },
                          "on_inactivity_timeout": {
                            "enabled": false,
                            "text": ""
                          },
                          "on_max_duration_timeout": {
                            "enabled": false,
                            "text": ""
                          }
                        },
                        "timeouts": {
                          "inactivity": {
                            "enabled": true,
                            "duration_secs": 600
                          },
                          "max_duration": {
                            "enabled": true,
                            "duration_secs": 1800
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/configs/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\nfrom hume.empathic_voice import (\n    PostedConfigPromptSpec,\n    PostedEllmModel,\n    PostedEventMessageSpec,\n    PostedEventMessageSpecs,\n    PostedLanguageModel,\n    PostedVoice,\n)\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.create_config_version(\n        id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n        version_description=\"This is an updated version of the Weather Assistant Config.\",\n        evi_version=\"2\",\n        prompt=PostedConfigPromptSpec(\n            id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n            version=0,\n        ),\n        voice=PostedVoice(\n            provider=\"HUME_AI\",\n            name=\"ITO\",\n        ),\n        language_model=PostedLanguageModel(\n            model_provider=\"ANTHROPIC\",\n            model_resource=\"claude-3-5-sonnet-20240620\",\n            temperature=1.0,\n        ),\n        ellm_model=PostedEllmModel(\n            allow_short_responses=True,\n        ),\n        event_messages=PostedEventMessageSpecs(\n            on_new_chat=PostedEventMessageSpec(\n                enabled=False,\n                text=\"\",\n            ),\n            on_inactivity_timeout=PostedEventMessageSpec(\n                enabled=False,\n                text=\"\",\n            ),\n            on_max_duration_timeout=PostedEventMessageSpec(\n                enabled=False,\n                text=\"\",\n            ),\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\nfrom hume.empathic_voice import (\n    PostedConfigPromptSpec,\n    PostedEllmModel,\n    PostedEventMessageSpec,\n    PostedEventMessageSpecs,\n    PostedLanguageModel,\n    PostedVoice,\n)\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.create_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version_description=\"This is an updated version of the Weather Assistant Config.\",\n    evi_version=\"2\",\n    prompt=PostedConfigPromptSpec(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=0,\n    ),\n    voice=PostedVoice(\n        provider=\"HUME_AI\",\n        name=\"ITO\",\n    ),\n    language_model=PostedLanguageModel(\n        model_provider=\"ANTHROPIC\",\n        model_resource=\"claude-3-5-sonnet-20240620\",\n        temperature=1.0,\n    ),\n    ellm_model=PostedEllmModel(\n        allow_short_responses=True,\n    ),\n    event_messages=PostedEventMessageSpecs(\n        on_new_chat=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_inactivity_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_max_duration_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n    ),\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.createConfigVersion(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", {\n    versionDescription: \"This is an updated version of the Weather Assistant Config.\",\n    eviVersion: \"2\",\n    prompt: {\n        id: \"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version: 0\n    },\n    voice: {\n        provider: Hume.PostedVoiceProvider.HumeAi,\n        name: \"ITO\"\n    },\n    languageModel: {\n        modelProvider: Hume.PostedLanguageModelModelProvider.Anthropic,\n        modelResource: Hume.PostedLanguageModelModelResource.Claude35Sonnet20240620,\n        temperature: 1\n    },\n    ellmModel: {\n        allowShortResponses: true\n    },\n    eventMessages: {\n        onNewChat: {\n            enabled: false,\n            text: \"\"\n        },\n        onInactivityTimeout: {\n            enabled: false,\n            text: \"\"\n        },\n        onMaxDurationTimeout: {\n            enabled: false,\n            text: \"\"\n        }\n    }\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "evi_version": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates a **Config** by creating a new version of the **Config**.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-config",
                "method": "DELETE",
                "id": "delete-config",
                "originalEndpointId": "endpoint_configs.delete-config",
                "name": "Delete config",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Config. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Configs Delete Config Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                    "pathParameters": {
                      "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.delete_config(\n        id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.delete_config(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.deleteConfig(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\");\n"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/configs/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.delete_config(\n        id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.delete_config(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.deleteConfig(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Deletes a **Config** and its versions.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-config-name",
                "method": "PATCH",
                "id": "update-config-name",
                "originalEndpointId": "endpoint_configs.update-config-name",
                "name": "Update config name",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Config. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Name applied to all versions of a particular Config.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Configs Update Config Name Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/configs/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.update_config_name(\n        id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n        name=\"Updated Weather Assistant Config Name\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.update_config_name(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    name=\"Updated Weather Assistant Config Name\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.updateConfigName(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", {\n    name: \"Updated Weather Assistant Config Name\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/configs/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.update_config_name(\n        id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n        name=\"Updated Weather Assistant Config Name\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.update_config_name(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    name=\"Updated Weather Assistant Config Name\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.updateConfigName(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", {\n    name: \"Updated Weather Assistant Config Name\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates the name of a **Config**.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-config-version",
                "method": "GET",
                "id": "get-config-version",
                "originalEndpointId": "endpoint_configs.get-config-version",
                "name": "Get config version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Config. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a Config.\n\nConfigs, Prompts, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnConfig"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Configs Get Config Version Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3/version/1",
                    "pathParameters": {
                      "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                      "version": 1,
                      "version_description": "",
                      "name": "Weather Assistant Config",
                      "created_on": 1715275452390,
                      "modified_on": 1715275452390,
                      "evi_version": "2",
                      "prompt": {
                        "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                        "version": 0,
                        "version_type": "FIXED",
                        "version_description": "",
                        "name": "Weather Assistant Prompt",
                        "created_on": 1715267200693,
                        "modified_on": 1715267200693,
                        "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                      },
                      "voice": {
                        "provider": "HUME_AI",
                        "name": "SAMPLE VOICE",
                        "custom_voice": {
                          "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                          "version": 1,
                          "name": "SAMPLE VOICE",
                          "created_on": 1724704587367,
                          "modified_on": 1725489961583,
                          "base_voice": "KORA",
                          "parameter_model": "20241004-11parameter",
                          "parameters": {
                            "gender": 0,
                            "articulation": -10,
                            "assertiveness": 20,
                            "buoyancy": -30,
                            "confidence": -40,
                            "enthusiasm": 50,
                            "nasality": 45,
                            "relaxedness": -35,
                            "smoothness": 25,
                            "tepidity": 15,
                            "tightness": 5
                          }
                        }
                      },
                      "language_model": {
                        "model_provider": "ANTHROPIC",
                        "model_resource": "claude-3-5-sonnet-20240620",
                        "temperature": 1
                      },
                      "ellm_model": {
                        "allow_short_responses": false
                      },
                      "tools": [],
                      "builtin_tools": [],
                      "event_messages": {
                        "on_new_chat": {
                          "enabled": false,
                          "text": ""
                        },
                        "on_inactivity_timeout": {
                          "enabled": false,
                          "text": ""
                        },
                        "on_max_duration_timeout": {
                          "enabled": false,
                          "text": ""
                        }
                      },
                      "timeouts": {
                        "inactivity": {
                          "enabled": true,
                          "duration_secs": 600
                        },
                        "max_duration": {
                          "enabled": true,
                          "duration_secs": 1800
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.get_config_version(\n        id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n        version=1,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.get_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.getConfigVersion(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", 1);\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                        "version": 1,
                        "version_description": "",
                        "name": "Weather Assistant Config",
                        "created_on": 1715275452390,
                        "modified_on": 1715275452390,
                        "evi_version": "2",
                        "prompt": {
                          "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                          "version": 0,
                          "version_type": "FIXED",
                          "version_description": "",
                          "name": "Weather Assistant Prompt",
                          "created_on": 1715267200693,
                          "modified_on": 1715267200693,
                          "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                        },
                        "voice": {
                          "provider": "HUME_AI",
                          "name": "SAMPLE VOICE",
                          "custom_voice": {
                            "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                            "version": 1,
                            "name": "SAMPLE VOICE",
                            "created_on": 1724704587367,
                            "modified_on": 1725489961583,
                            "base_voice": "KORA",
                            "parameter_model": "20241004-11parameter",
                            "parameters": {
                              "gender": 0,
                              "articulation": -10,
                              "assertiveness": 20,
                              "buoyancy": -30,
                              "confidence": -40,
                              "enthusiasm": 50,
                              "nasality": 45,
                              "relaxedness": -35,
                              "smoothness": 25,
                              "tepidity": 15,
                              "tightness": 5
                            }
                          }
                        },
                        "language_model": {
                          "model_provider": "ANTHROPIC",
                          "model_resource": "claude-3-5-sonnet-20240620",
                          "temperature": 1
                        },
                        "ellm_model": {
                          "allow_short_responses": false
                        },
                        "tools": [],
                        "builtin_tools": [],
                        "event_messages": {
                          "on_new_chat": {
                            "enabled": false,
                            "text": ""
                          },
                          "on_inactivity_timeout": {
                            "enabled": false,
                            "text": ""
                          },
                          "on_max_duration_timeout": {
                            "enabled": false,
                            "text": ""
                          }
                        },
                        "timeouts": {
                          "inactivity": {
                            "enabled": true,
                            "duration_secs": 600
                          },
                          "max_duration": {
                            "enabled": true,
                            "duration_secs": 1800
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/configs/:id/version/0",
                    "pathParameters": {
                      "id": ":id",
                      "version": 0
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.get_config_version(\n        id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n        version=1,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.get_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.getConfigVersion(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", 1);\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a specified version of a **Config**.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-config-version",
                "method": "DELETE",
                "id": "delete-config-version",
                "originalEndpointId": "endpoint_configs.delete-config-version",
                "name": "Delete config version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Config. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a Config.\n\nConfigs, Prompts, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Configs Delete Config Version Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3/version/1",
                    "pathParameters": {
                      "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.delete_config_version(\n        id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n        version=1,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.delete_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.deleteConfigVersion(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", 1);\n"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/configs/:id/version/0",
                    "pathParameters": {
                      "id": ":id",
                      "version": 0
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.delete_config_version(\n        id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n        version=1,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.delete_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.deleteConfigVersion(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", 1);\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Deletes a specified version of a **Config**.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-config-description",
                "method": "PATCH",
                "id": "update-config-description",
                "originalEndpointId": "endpoint_configs.update-config-description",
                "name": "Update config description",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Config. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Version number for a Config.\n\nConfigs, Prompts, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number.",
                      "key": "version",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/configs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "version"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "An optional description of the Config version.",
                        "key": "version_description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnConfig"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Configs Update Config Description Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3/version/1",
                    "pathParameters": {
                      "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                      "version": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "version_description": "This is an updated version_description."
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                      "version": 1,
                      "version_description": "This is an updated version_description.",
                      "name": "Weather Assistant Config",
                      "created_on": 1715275452390,
                      "modified_on": 1715275452390,
                      "evi_version": "2",
                      "prompt": {
                        "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                        "version": 0,
                        "version_type": "FIXED",
                        "version_description": "",
                        "name": "Weather Assistant Prompt",
                        "created_on": 1715267200693,
                        "modified_on": 1715267200693,
                        "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                      },
                      "voice": {
                        "provider": "HUME_AI",
                        "name": "SAMPLE VOICE",
                        "custom_voice": {
                          "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                          "version": 1,
                          "name": "SAMPLE VOICE",
                          "created_on": 1724704587367,
                          "modified_on": 1725489961583,
                          "base_voice": "KORA",
                          "parameter_model": "20241004-11parameter",
                          "parameters": {
                            "gender": 0,
                            "articulation": -10,
                            "assertiveness": 20,
                            "buoyancy": -30,
                            "confidence": -40,
                            "enthusiasm": 50,
                            "nasality": 45,
                            "relaxedness": -35,
                            "smoothness": 25,
                            "tepidity": 15,
                            "tightness": 5
                          }
                        }
                      },
                      "language_model": {
                        "model_provider": "ANTHROPIC",
                        "model_resource": "claude-3-5-sonnet-20240620",
                        "temperature": 1
                      },
                      "ellm_model": {
                        "allow_short_responses": false
                      },
                      "tools": [],
                      "builtin_tools": [],
                      "event_messages": {
                        "on_new_chat": {
                          "enabled": false,
                          "text": ""
                        },
                        "on_inactivity_timeout": {
                          "enabled": false,
                          "text": ""
                        },
                        "on_max_duration_timeout": {
                          "enabled": false,
                          "text": ""
                        }
                      },
                      "timeouts": {
                        "inactivity": {
                          "enabled": true,
                          "duration_secs": 600
                        },
                        "max_duration": {
                          "enabled": true,
                          "duration_secs": 1800
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.update_config_description(\n        id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n        version=1,\n        version_description=\"This is an updated version_description.\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.update_config_description(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n    version_description=\"This is an updated version_description.\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.updateConfigDescription(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", 1, {\n    versionDescription: \"This is an updated version_description.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "version_description": "This is an updated version_description."
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                        "version": 1,
                        "version_description": "This is an updated version_description.",
                        "name": "Weather Assistant Config",
                        "created_on": 1715275452390,
                        "modified_on": 1715275452390,
                        "evi_version": "2",
                        "prompt": {
                          "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                          "version": 0,
                          "version_type": "FIXED",
                          "version_description": "",
                          "name": "Weather Assistant Prompt",
                          "created_on": 1715267200693,
                          "modified_on": 1715267200693,
                          "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
                        },
                        "voice": {
                          "provider": "HUME_AI",
                          "name": "SAMPLE VOICE",
                          "custom_voice": {
                            "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                            "version": 1,
                            "name": "SAMPLE VOICE",
                            "created_on": 1724704587367,
                            "modified_on": 1725489961583,
                            "base_voice": "KORA",
                            "parameter_model": "20241004-11parameter",
                            "parameters": {
                              "gender": 0,
                              "articulation": -10,
                              "assertiveness": 20,
                              "buoyancy": -30,
                              "confidence": -40,
                              "enthusiasm": 50,
                              "nasality": 45,
                              "relaxedness": -35,
                              "smoothness": 25,
                              "tepidity": 15,
                              "tightness": 5
                            }
                          }
                        },
                        "language_model": {
                          "model_provider": "ANTHROPIC",
                          "model_resource": "claude-3-5-sonnet-20240620",
                          "temperature": 1
                        },
                        "ellm_model": {
                          "allow_short_responses": false
                        },
                        "tools": [],
                        "builtin_tools": [],
                        "event_messages": {
                          "on_new_chat": {
                            "enabled": false,
                            "text": ""
                          },
                          "on_inactivity_timeout": {
                            "enabled": false,
                            "text": ""
                          },
                          "on_max_duration_timeout": {
                            "enabled": false,
                            "text": ""
                          }
                        },
                        "timeouts": {
                          "inactivity": {
                            "enabled": true,
                            "duration_secs": 600
                          },
                          "max_duration": {
                            "enabled": true,
                            "duration_secs": 1800
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/configs/:id/version/0",
                    "pathParameters": {
                      "id": ":id",
                      "version": 0
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.configs.update_config_description(\n        id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n        version=1,\n        version_description=\"This is an updated version_description.\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.update_config_description(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n    version_description=\"This is an updated version_description.\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.updateConfigDescription(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", 1, {\n    versionDescription: \"This is an updated version_description.\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates the description of a **Config**.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "configs",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_chats": {
            "subpackageId": "subpackage_chats",
            "name": "chats",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-chats",
                "method": "GET",
                "id": "list-chats",
                "originalEndpointId": "endpoint_chats.list-chats",
                "name": "List chats",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/chats"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the sorting order of the results based on their creation date. Set to true for ascending order (chronological, with the oldest records first) and false for descending order (reverse-chronological, with the newest records first). Defaults to true.",
                    "key": "ascending_order",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedChats"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Chats List Chats Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/chats",
                    "pathParameters": {},
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 1,
                      "ascending_order": true
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 0,
                      "page_size": 1,
                      "total_pages": 1,
                      "pagination_direction": "ASC",
                      "chats_page": [
                        {
                          "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                          "chat_group_id": "9fc18597-3567-42d5-94d6-935bde84bf2f",
                          "status": "USER_ENDED",
                          "start_timestamp": 1716244940648,
                          "end_timestamp": 1716244958546,
                          "event_count": 3,
                          "metadata": "",
                          "config": {
                            "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                            "version": 0
                          }
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.empathic_voice.chats.list_chats(\n        page_number=0,\n        page_size=1,\n        ascending_order=True,\n    )\n    async for item in response:\n        yield item\n    # alternatively, you can paginate page-by-page\n    async for page in response.iter_pages():\n        yield page\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.chats.list_chats(\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chats.listChats({\n    pageNumber: 0,\n    pageSize: 1,\n    ascendingOrder: true\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 0,
                        "page_size": 1,
                        "total_pages": 1,
                        "pagination_direction": "ASC",
                        "chats_page": [
                          {
                            "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                            "chat_group_id": "9fc18597-3567-42d5-94d6-935bde84bf2f",
                            "status": "USER_ENDED",
                            "start_timestamp": 1716244940648,
                            "end_timestamp": 1716244958546,
                            "event_count": 3,
                            "metadata": "",
                            "config": {
                              "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                              "version": 0
                            }
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/chats",
                    "pathParameters": {},
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.empathic_voice.chats.list_chats(\n        page_number=0,\n        page_size=1,\n        ascending_order=True,\n    )\n    async for item in response:\n        yield item\n    # alternatively, you can paginate page-by-page\n    async for page in response.iter_pages():\n        yield page\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.chats.list_chats(\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chats.listChats({\n    pageNumber: 0,\n    pageSize: 1,\n    ascendingOrder: true\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a paginated list of **Chats**.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-chat-events",
                "method": "GET",
                "id": "list-chat-events",
                "originalEndpointId": "endpoint_chats.list-chat-events",
                "name": "List chat events",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Chat. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/chats/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the sorting order of the results based on their creation date. Set to true for ascending order (chronological, with the oldest records first) and false for descending order (reverse-chronological, with the newest records first). Defaults to true.",
                    "key": "ascending_order",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnChatPagedEvents"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Chats List Chat Events Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/chats/470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                    "pathParameters": {
                      "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0"
                    },
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 3,
                      "ascending_order": true
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                      "chat_group_id": "9fc18597-3567-42d5-94d6-935bde84bf2f",
                      "status": "USER_ENDED",
                      "start_timestamp": 1716244940648,
                      "pagination_direction": "ASC",
                      "events_page": [
                        {
                          "id": "5d44bdbb-49a3-40fb-871d-32bf7e76efe7",
                          "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                          "timestamp": 1716244940762,
                          "role": "SYSTEM",
                          "type": "SYSTEM_PROMPT",
                          "message_text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                          "emotion_features": "",
                          "metadata": ""
                        },
                        {
                          "id": "5976ddf6-d093-4bb9-ba60-8f6c25832dde",
                          "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                          "timestamp": 1716244956278,
                          "role": "USER",
                          "type": "USER_MESSAGE",
                          "message_text": "Hello.",
                          "emotion_features": "{\"Admiration\": 0.09906005859375, \"Adoration\": 0.12213134765625, \"Aesthetic Appreciation\": 0.05035400390625, \"Amusement\": 0.16552734375, \"Anger\": 0.0037384033203125, \"Anxiety\": 0.010101318359375, \"Awe\": 0.058197021484375, \"Awkwardness\": 0.10552978515625, \"Boredom\": 0.1141357421875, \"Calmness\": 0.115234375, \"Concentration\": 0.00444793701171875, \"Confusion\": 0.0343017578125, \"Contemplation\": 0.00812530517578125, \"Contempt\": 0.009002685546875, \"Contentment\": 0.087158203125, \"Craving\": 0.00818634033203125, \"Desire\": 0.018310546875, \"Determination\": 0.003238677978515625, \"Disappointment\": 0.024169921875, \"Disgust\": 0.00702667236328125, \"Distress\": 0.00936126708984375, \"Doubt\": 0.00632476806640625, \"Ecstasy\": 0.0293731689453125, \"Embarrassment\": 0.01800537109375, \"Empathic Pain\": 0.0088348388671875, \"Entrancement\": 0.013397216796875, \"Envy\": 0.02557373046875, \"Excitement\": 0.12109375, \"Fear\": 0.004413604736328125, \"Guilt\": 0.016571044921875, \"Horror\": 0.00274658203125, \"Interest\": 0.2142333984375, \"Joy\": 0.29638671875, \"Love\": 0.16015625, \"Nostalgia\": 0.007843017578125, \"Pain\": 0.007160186767578125, \"Pride\": 0.00508880615234375, \"Realization\": 0.054229736328125, \"Relief\": 0.048736572265625, \"Romance\": 0.026397705078125, \"Sadness\": 0.0265350341796875, \"Satisfaction\": 0.051361083984375, \"Shame\": 0.00974273681640625, \"Surprise (negative)\": 0.0218963623046875, \"Surprise (positive)\": 0.216064453125, \"Sympathy\": 0.021728515625, \"Tiredness\": 0.0173797607421875, \"Triumph\": 0.004520416259765625}",
                          "metadata": "{\"segments\": [{\"content\": \"Hello.\", \"embedding\": [0.6181640625, 0.1763916015625, -30.921875, 1.2705078125, 0.927734375, 0.63720703125, 2.865234375, 0.1080322265625, 0.2978515625, 1.0107421875, 1.34375, 0.74560546875, 0.416259765625, 0.99462890625, -0.333740234375, 0.361083984375, -1.388671875, 1.0107421875, 1.3173828125, 0.55615234375, 0.541015625, -0.1837158203125, 1.697265625, 0.228515625, 2.087890625, -0.311767578125, 0.053680419921875, 1.3349609375, 0.95068359375, 0.00441741943359375, 0.705078125, 1.8916015625, -0.939453125, 0.93701171875, -0.28955078125, 1.513671875, 0.5595703125, 1.0126953125, -0.1624755859375, 1.4072265625, -0.28857421875, -0.4560546875, -0.1500244140625, -0.1102294921875, -0.222412109375, 0.8779296875, 1.275390625, 1.6689453125, 0.80712890625, -0.34814453125, -0.325439453125, 0.412841796875, 0.81689453125, 0.55126953125, 1.671875, 0.6611328125, 0.7451171875, 1.50390625, 1.0224609375, -1.671875, 0.7373046875, 2.1328125, 2.166015625, 0.41015625, -0.127685546875, 1.9345703125, -4.2734375, 0.332275390625, 0.26171875, 0.76708984375, 0.2685546875, 0.468017578125, 1.208984375, -1.517578125, 1.083984375, 0.84814453125, 1.0244140625, -0.0072174072265625, 1.34375, 1.0712890625, 1.517578125, -0.52001953125, 0.59228515625, 0.8154296875, -0.951171875, -0.07757568359375, 1.3330078125, 1.125, 0.61181640625, 1.494140625, 0.357421875, 1.1796875, 1.482421875, 0.8046875, 0.1536865234375, 1.8076171875, 0.68115234375, -15.171875, 1.2294921875, 0.319091796875, 0.499755859375, 1.5771484375, 0.94677734375, -0.2490234375, 0.88525390625, 3.47265625, 0.75927734375, 0.71044921875, 1.2333984375, 1.4169921875, -0.56640625, -1.8095703125, 1.37109375, 0.428955078125, 1.89453125, -0.39013671875, 0.1734619140625, 1.5595703125, -1.2294921875, 2.552734375, 0.58349609375, 0.2156982421875, -0.00984954833984375, -0.6865234375, -0.0272979736328125, -0.2264404296875, 2.853515625, 1.3896484375, 0.52978515625, 0.783203125, 3.0390625, 0.75537109375, 0.219970703125, 0.384521484375, 0.385986328125, 2.0546875, -0.10443115234375, 1.5146484375, 1.4296875, 1.9716796875, 1.1318359375, 0.31591796875, 0.338623046875, 1.654296875, -0.88037109375, -0.21484375, 1.45703125, 1.0380859375, -0.52294921875, -0.47802734375, 0.1650390625, 1.2392578125, -1.138671875, 0.56787109375, 1.318359375, 0.4287109375, 0.1981201171875, 2.4375, 0.281005859375, 0.89404296875, -0.1552734375, 0.6474609375, -0.08331298828125, 0.00740814208984375, -0.045501708984375, -0.578125, 2.02734375, 0.59228515625, 0.35693359375, 1.2919921875, 1.22265625, 1.0537109375, 0.145263671875, 1.05859375, -0.369140625, 0.207275390625, 0.78857421875, 0.599609375, 0.99072265625, 0.24462890625, 1.26953125, 0.08404541015625, 1.349609375, 0.73291015625, 1.3212890625, 0.388916015625, 1.0869140625, 0.9931640625, -1.5673828125, 0.0462646484375, 0.650390625, 0.253662109375, 0.58251953125, 1.8134765625, 0.8642578125, 2.591796875, 0.7314453125, 0.85986328125, 0.5615234375, 0.9296875, 0.04144287109375, 1.66015625, 1.99609375, 1.171875, 1.181640625, 1.5126953125, 0.0224456787109375, 0.58349609375, -1.4931640625, 0.81884765625, 0.732421875, -0.6455078125, -0.62451171875, 1.7802734375, 0.01526641845703125, -0.423095703125, 0.461669921875, 4.87890625, 1.2392578125, -0.6953125, 0.6689453125, 0.62451171875, -1.521484375, 1.7685546875, 0.810546875, 0.65478515625, 0.26123046875, 1.6396484375, 0.87548828125, 1.7353515625, 2.046875, 1.5634765625, 0.69384765625, 1.375, 0.8916015625, 1.0107421875, 0.1304931640625, 2.009765625, 0.06402587890625, -0.08428955078125, 0.04351806640625, -1.7529296875, 2.02734375, 3.521484375, 0.404541015625, 1.6337890625, -0.276611328125, 0.8837890625, -0.1287841796875, 0.91064453125, 0.8193359375, 0.701171875, 0.036529541015625, 1.26171875, 1.0478515625, -0.1422119140625, 1.0634765625, 0.61083984375, 1.3505859375, 1.208984375, 0.57275390625, 1.3623046875, 2.267578125, 0.484375, 0.9150390625, 0.56787109375, -0.70068359375, 0.27587890625, -0.70654296875, 0.8466796875, 0.57568359375, 1.6162109375, 0.87939453125, 2.248046875, -0.5458984375, 1.7744140625, 1.328125, 1.232421875, 0.6806640625, 0.9365234375, 1.052734375, -1.08984375, 1.8330078125, -0.4033203125, 1.0673828125, 0.297607421875, 1.5703125, 1.67578125, 1.34765625, 2.8203125, 2.025390625, -0.48583984375, 0.7626953125, 0.01007843017578125, 1.435546875, 0.007205963134765625, 0.05157470703125, -0.9853515625, 0.26708984375, 1.16796875, 1.2041015625, 1.99609375, -0.07916259765625, 1.244140625, -0.32080078125, 0.6748046875, 0.419921875, 1.3212890625, 1.291015625, 0.599609375, 0.0550537109375, 0.9599609375, 0.93505859375, 0.111083984375, 1.302734375, 0.0833740234375, 2.244140625, 1.25390625, 1.6015625, 0.58349609375, 1.7568359375, -0.263427734375, -0.019866943359375, -0.24658203125, -0.1871337890625, 0.927734375, 0.62255859375, 0.275146484375, 0.79541015625, 1.1796875, 1.1767578125, -0.26123046875, -0.268310546875, 1.8994140625, 1.318359375, 2.1875, 0.2469482421875, 1.41015625, 0.03973388671875, 1.2685546875, 1.1025390625, 0.9560546875, 0.865234375, -1.92578125, 1.154296875, 0.389892578125, 1.130859375, 0.95947265625, 0.72314453125, 2.244140625, 0.048553466796875, 0.626953125, 0.42919921875, 0.82275390625, 0.311767578125, -0.320556640625, 0.01041412353515625, 0.1483154296875, 0.10809326171875, -0.3173828125, 1.1337890625, -0.8642578125, 1.4033203125, 0.048828125, 1.1787109375, 0.98779296875, 1.818359375, 1.1552734375, 0.6015625, 1.2392578125, -1.2685546875, 0.39208984375, 0.83251953125, 0.224365234375, 0.0019989013671875, 0.87548828125, 1.6572265625, 1.107421875, 0.434814453125, 1.8251953125, 0.442626953125, 1.2587890625, 0.09320068359375, -0.896484375, 1.8017578125, 1.451171875, -0.0755615234375, 0.6083984375, 2.06640625, 0.673828125, -0.33740234375, 0.192138671875, 0.21435546875, 0.80224609375, -1.490234375, 0.9501953125, 0.86083984375, -0.40283203125, 4.109375, 2.533203125, 1.2529296875, 0.8271484375, 0.225830078125, 1.0478515625, -1.9755859375, 0.841796875, 0.392822265625, 0.525390625, 0.33935546875, -0.79443359375, 0.71630859375, 0.97998046875, -0.175537109375, 0.97705078125, 1.705078125, 0.29638671875, 0.68359375, 0.54150390625, 0.435791015625, 0.99755859375, -0.369140625, 1.009765625, -0.140380859375, 0.426513671875, 0.189697265625, 1.8193359375, 1.1201171875, -0.5009765625, -0.331298828125, 0.759765625, -0.09442138671875, 0.74609375, -1.947265625, 1.3544921875, -3.935546875, 2.544921875, 1.359375, 0.1363525390625, 0.79296875, 0.79931640625, -0.3466796875, 1.1396484375, -0.33447265625, 2.0078125, -0.241455078125, 0.6318359375, 0.365234375, 0.296142578125, 0.830078125, 1.0458984375, 0.5830078125, 0.61572265625, 14.0703125, -2.0078125, -0.381591796875, 1.228515625, 0.08282470703125, -0.67822265625, -0.04339599609375, 0.397216796875, 0.1656494140625, 0.137451171875, 0.244873046875, 1.1611328125, -1.3818359375, 0.8447265625, 1.171875, 0.36328125, 0.252685546875, 0.1197509765625, 0.232177734375, -0.020172119140625, 0.64404296875, -0.01100921630859375, -1.9267578125, 0.222412109375, 0.56005859375, 1.3046875, 1.1630859375, 1.197265625, 1.02734375, 1.6806640625, -0.043731689453125, 1.4697265625, 0.81201171875, 1.5390625, 1.240234375, -0.7353515625, 1.828125, 1.115234375, 1.931640625, -0.517578125, 0.77880859375, 1.0546875, 0.95361328125, 3.42578125, 0.0160369873046875, 0.875, 0.56005859375, 1.2421875, 1.986328125, 1.4814453125, 0.0948486328125, 1.115234375, 0.00665283203125, 2.09375, 0.3544921875, -0.52783203125, 1.2099609375, 0.45068359375, 0.65625, 0.1112060546875, 1.0751953125, -0.9521484375, -0.30029296875, 1.4462890625, 2.046875, 3.212890625, 1.68359375, 1.07421875, -0.5263671875, 0.74560546875, 1.37890625, 0.15283203125, 0.2440185546875, 0.62646484375, -0.1280517578125, 0.7646484375, -0.515625, -0.35693359375, 1.2958984375, 0.96923828125, 0.58935546875, 1.3701171875, 1.0673828125, 0.2337646484375, 0.93115234375, 0.66357421875, 6.0, 1.1025390625, -0.51708984375, -0.38330078125, 0.7197265625, 0.246826171875, -0.45166015625, 1.9521484375, 0.5546875, 0.08807373046875, 0.18505859375, 0.8857421875, -0.57177734375, 0.251708984375, 0.234375, 2.57421875, 0.9599609375, 0.5029296875, 0.10382080078125, 0.08331298828125, 0.66748046875, -0.349609375, 1.287109375, 0.259765625, 2.015625, 2.828125, -0.3095703125, -0.164306640625, -0.3408203125, 0.486572265625, 0.8466796875, 1.9130859375, 0.09088134765625, 0.66552734375, 0.00972747802734375, -0.83154296875, 1.755859375, 0.654296875, 0.173828125, 0.27587890625, -0.47607421875, -0.264404296875, 0.7529296875, 0.6533203125, 0.7275390625, 0.499755859375, 0.833984375, -0.44775390625, -0.05078125, -0.454833984375, 0.75439453125, 0.68505859375, 0.210693359375, -0.283935546875, -0.53564453125, 0.96826171875, 0.861328125, -3.33984375, -0.26171875, 0.77734375, 0.26513671875, -0.14111328125, -0.042236328125, -0.84814453125, 0.2137451171875, 0.94921875, 0.65185546875, -0.5380859375, 0.1529541015625, -0.360595703125, -0.0333251953125, -0.69189453125, 0.8974609375, 0.7109375, 0.81494140625, -0.259521484375, 1.1904296875, 0.62158203125, 1.345703125, 0.89404296875, 0.70556640625, 1.0673828125, 1.392578125, 0.5068359375, 0.962890625, 0.736328125, 1.55078125, 0.50390625, -0.398681640625, 2.361328125, 0.345947265625, -0.61962890625, 0.330078125, 0.75439453125, -0.673828125, -0.2379150390625, 1.5673828125, 1.369140625, 0.1119384765625, -0.1834716796875, 1.4599609375, -0.77587890625, 0.5556640625, 0.09954833984375, 0.0285186767578125, 0.58935546875, -0.501953125, 0.212890625, 0.02679443359375, 0.1715087890625, 0.03466796875, -0.564453125, 2.029296875, 2.45703125, -0.72216796875, 2.138671875, 0.50830078125, -0.09356689453125, 0.230224609375, 1.6943359375, 1.5126953125, 0.39453125, 0.411376953125, 1.07421875, -0.8046875, 0.51416015625, 0.2271728515625, -0.283447265625, 0.38427734375, 0.73388671875, 0.6962890625, 1.4990234375, 0.02813720703125, 0.40478515625, 1.2451171875, 1.1162109375, -5.5703125, 0.76171875, 0.322021484375, 1.0361328125, 1.197265625, 0.1163330078125, 0.2425537109375, 1.5595703125, 1.5791015625, -0.0921630859375, 0.484619140625, 1.9052734375, 5.31640625, 1.6337890625, 0.95947265625, -0.1751708984375, 0.466552734375, 0.8330078125, 1.03125, 0.2044677734375, 0.31298828125, -1.1220703125, 0.5517578125, 0.93505859375, 0.45166015625, 1.951171875, 0.65478515625, 1.30859375, 1.0859375, 0.56494140625, 2.322265625, 0.242919921875, 1.81640625, -0.469970703125, -0.841796875, 0.90869140625, 1.5361328125, 0.923828125, 1.0595703125, 0.356689453125, -0.46142578125, 2.134765625, 1.3037109375, -0.32373046875, -9.2265625, 0.4521484375, 0.88037109375, -0.53955078125, 0.96484375, 0.7705078125, 0.84521484375, 1.580078125, -0.1448974609375, 0.7607421875, 1.0166015625, -0.086669921875, 1.611328125, 0.05938720703125, 0.5078125, 0.8427734375, 2.431640625, 0.66357421875, 3.203125, 0.132080078125, 0.461181640625, 0.779296875, 1.9482421875, 1.8720703125, 0.845703125, -1.3837890625, -0.138916015625, 0.35546875, 0.2457275390625, 0.75341796875, 1.828125, 1.4169921875, 0.60791015625, 1.0068359375, 1.109375, 0.484130859375, -0.302001953125, 0.4951171875, 0.802734375, 1.9482421875, 0.916015625, 0.1646728515625, 2.599609375, 1.7177734375, -0.2374267578125, 0.98046875, 0.39306640625, -1.1396484375, 1.6533203125, 0.375244140625], \"scores\": [0.09906005859375, 0.12213134765625, 0.05035400390625, 0.16552734375, 0.0037384033203125, 0.010101318359375, 0.058197021484375, 0.10552978515625, 0.1141357421875, 0.115234375, 0.00444793701171875, 0.00812530517578125, 0.0343017578125, 0.009002685546875, 0.087158203125, 0.00818634033203125, 0.003238677978515625, 0.024169921875, 0.00702667236328125, 0.00936126708984375, 0.00632476806640625, 0.0293731689453125, 0.01800537109375, 0.0088348388671875, 0.013397216796875, 0.02557373046875, 0.12109375, 0.004413604736328125, 0.016571044921875, 0.00274658203125, 0.2142333984375, 0.29638671875, 0.16015625, 0.007843017578125, 0.007160186767578125, 0.00508880615234375, 0.054229736328125, 0.048736572265625, 0.026397705078125, 0.0265350341796875, 0.051361083984375, 0.018310546875, 0.00974273681640625, 0.0218963623046875, 0.216064453125, 0.021728515625, 0.0173797607421875, 0.004520416259765625], \"stoks\": [52, 52, 52, 52, 52, 41, 41, 374, 303, 303, 303, 427], \"time\": {\"begin_ms\": 640, \"end_ms\": 1140}}]}"
                        },
                        {
                          "id": "7645a0d1-2e64-410d-83a8-b96040432e9a",
                          "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                          "timestamp": 1716244957031,
                          "role": "AGENT",
                          "type": "AGENT_MESSAGE",
                          "message_text": "Hello!",
                          "emotion_features": "{\"Admiration\": 0.044921875, \"Adoration\": 0.0253753662109375, \"Aesthetic Appreciation\": 0.03265380859375, \"Amusement\": 0.118408203125, \"Anger\": 0.06719970703125, \"Anxiety\": 0.0411376953125, \"Awe\": 0.03802490234375, \"Awkwardness\": 0.056549072265625, \"Boredom\": 0.04217529296875, \"Calmness\": 0.08709716796875, \"Concentration\": 0.070556640625, \"Confusion\": 0.06964111328125, \"Contemplation\": 0.0343017578125, \"Contempt\": 0.037689208984375, \"Contentment\": 0.059417724609375, \"Craving\": 0.01132965087890625, \"Desire\": 0.01406097412109375, \"Determination\": 0.1143798828125, \"Disappointment\": 0.051177978515625, \"Disgust\": 0.028594970703125, \"Distress\": 0.054901123046875, \"Doubt\": 0.04638671875, \"Ecstasy\": 0.0258026123046875, \"Embarrassment\": 0.0222015380859375, \"Empathic Pain\": 0.015777587890625, \"Entrancement\": 0.0160980224609375, \"Envy\": 0.0163421630859375, \"Excitement\": 0.129638671875, \"Fear\": 0.03125, \"Guilt\": 0.01483917236328125, \"Horror\": 0.0194549560546875, \"Interest\": 0.1341552734375, \"Joy\": 0.0738525390625, \"Love\": 0.0216522216796875, \"Nostalgia\": 0.0210418701171875, \"Pain\": 0.020721435546875, \"Pride\": 0.05499267578125, \"Realization\": 0.0728759765625, \"Relief\": 0.04052734375, \"Romance\": 0.0129241943359375, \"Sadness\": 0.0254669189453125, \"Satisfaction\": 0.07159423828125, \"Shame\": 0.01495361328125, \"Surprise (negative)\": 0.05560302734375, \"Surprise (positive)\": 0.07965087890625, \"Sympathy\": 0.022247314453125, \"Tiredness\": 0.0194549560546875, \"Triumph\": 0.04107666015625}",
                          "metadata": ""
                        }
                      ],
                      "page_number": 0,
                      "page_size": 3,
                      "total_pages": 1,
                      "end_timestamp": 1716244958546,
                      "metadata": "",
                      "config": {
                        "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                        "version": 0
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.empathic_voice.chats.list_chat_events(\n        id=\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n        page_number=0,\n        page_size=3,\n        ascending_order=True,\n    )\n    async for item in response:\n        yield item\n    # alternatively, you can paginate page-by-page\n    async for page in response.iter_pages():\n        yield page\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.chats.list_chat_events(\n    id=\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n    page_number=0,\n    page_size=3,\n    ascending_order=True,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chats.listChatEvents(\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\", {\n    pageNumber: 0,\n    pageSize: 3,\n    ascendingOrder: true\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                        "chat_group_id": "9fc18597-3567-42d5-94d6-935bde84bf2f",
                        "status": "USER_ENDED",
                        "start_timestamp": 1716244940648,
                        "pagination_direction": "ASC",
                        "events_page": [
                          {
                            "id": "5d44bdbb-49a3-40fb-871d-32bf7e76efe7",
                            "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                            "timestamp": 1716244940762,
                            "role": "SYSTEM",
                            "type": "SYSTEM_PROMPT",
                            "message_text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                            "emotion_features": "",
                            "metadata": ""
                          },
                          {
                            "id": "5976ddf6-d093-4bb9-ba60-8f6c25832dde",
                            "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                            "timestamp": 1716244956278,
                            "role": "USER",
                            "type": "USER_MESSAGE",
                            "message_text": "Hello.",
                            "emotion_features": "{\"Admiration\": 0.09906005859375, \"Adoration\": 0.12213134765625, \"Aesthetic Appreciation\": 0.05035400390625, \"Amusement\": 0.16552734375, \"Anger\": 0.0037384033203125, \"Anxiety\": 0.010101318359375, \"Awe\": 0.058197021484375, \"Awkwardness\": 0.10552978515625, \"Boredom\": 0.1141357421875, \"Calmness\": 0.115234375, \"Concentration\": 0.00444793701171875, \"Confusion\": 0.0343017578125, \"Contemplation\": 0.00812530517578125, \"Contempt\": 0.009002685546875, \"Contentment\": 0.087158203125, \"Craving\": 0.00818634033203125, \"Desire\": 0.018310546875, \"Determination\": 0.003238677978515625, \"Disappointment\": 0.024169921875, \"Disgust\": 0.00702667236328125, \"Distress\": 0.00936126708984375, \"Doubt\": 0.00632476806640625, \"Ecstasy\": 0.0293731689453125, \"Embarrassment\": 0.01800537109375, \"Empathic Pain\": 0.0088348388671875, \"Entrancement\": 0.013397216796875, \"Envy\": 0.02557373046875, \"Excitement\": 0.12109375, \"Fear\": 0.004413604736328125, \"Guilt\": 0.016571044921875, \"Horror\": 0.00274658203125, \"Interest\": 0.2142333984375, \"Joy\": 0.29638671875, \"Love\": 0.16015625, \"Nostalgia\": 0.007843017578125, \"Pain\": 0.007160186767578125, \"Pride\": 0.00508880615234375, \"Realization\": 0.054229736328125, \"Relief\": 0.048736572265625, \"Romance\": 0.026397705078125, \"Sadness\": 0.0265350341796875, \"Satisfaction\": 0.051361083984375, \"Shame\": 0.00974273681640625, \"Surprise (negative)\": 0.0218963623046875, \"Surprise (positive)\": 0.216064453125, \"Sympathy\": 0.021728515625, \"Tiredness\": 0.0173797607421875, \"Triumph\": 0.004520416259765625}",
                            "metadata": "{\"segments\": [{\"content\": \"Hello.\", \"embedding\": [0.6181640625, 0.1763916015625, -30.921875, 1.2705078125, 0.927734375, 0.63720703125, 2.865234375, 0.1080322265625, 0.2978515625, 1.0107421875, 1.34375, 0.74560546875, 0.416259765625, 0.99462890625, -0.333740234375, 0.361083984375, -1.388671875, 1.0107421875, 1.3173828125, 0.55615234375, 0.541015625, -0.1837158203125, 1.697265625, 0.228515625, 2.087890625, -0.311767578125, 0.053680419921875, 1.3349609375, 0.95068359375, 0.00441741943359375, 0.705078125, 1.8916015625, -0.939453125, 0.93701171875, -0.28955078125, 1.513671875, 0.5595703125, 1.0126953125, -0.1624755859375, 1.4072265625, -0.28857421875, -0.4560546875, -0.1500244140625, -0.1102294921875, -0.222412109375, 0.8779296875, 1.275390625, 1.6689453125, 0.80712890625, -0.34814453125, -0.325439453125, 0.412841796875, 0.81689453125, 0.55126953125, 1.671875, 0.6611328125, 0.7451171875, 1.50390625, 1.0224609375, -1.671875, 0.7373046875, 2.1328125, 2.166015625, 0.41015625, -0.127685546875, 1.9345703125, -4.2734375, 0.332275390625, 0.26171875, 0.76708984375, 0.2685546875, 0.468017578125, 1.208984375, -1.517578125, 1.083984375, 0.84814453125, 1.0244140625, -0.0072174072265625, 1.34375, 1.0712890625, 1.517578125, -0.52001953125, 0.59228515625, 0.8154296875, -0.951171875, -0.07757568359375, 1.3330078125, 1.125, 0.61181640625, 1.494140625, 0.357421875, 1.1796875, 1.482421875, 0.8046875, 0.1536865234375, 1.8076171875, 0.68115234375, -15.171875, 1.2294921875, 0.319091796875, 0.499755859375, 1.5771484375, 0.94677734375, -0.2490234375, 0.88525390625, 3.47265625, 0.75927734375, 0.71044921875, 1.2333984375, 1.4169921875, -0.56640625, -1.8095703125, 1.37109375, 0.428955078125, 1.89453125, -0.39013671875, 0.1734619140625, 1.5595703125, -1.2294921875, 2.552734375, 0.58349609375, 0.2156982421875, -0.00984954833984375, -0.6865234375, -0.0272979736328125, -0.2264404296875, 2.853515625, 1.3896484375, 0.52978515625, 0.783203125, 3.0390625, 0.75537109375, 0.219970703125, 0.384521484375, 0.385986328125, 2.0546875, -0.10443115234375, 1.5146484375, 1.4296875, 1.9716796875, 1.1318359375, 0.31591796875, 0.338623046875, 1.654296875, -0.88037109375, -0.21484375, 1.45703125, 1.0380859375, -0.52294921875, -0.47802734375, 0.1650390625, 1.2392578125, -1.138671875, 0.56787109375, 1.318359375, 0.4287109375, 0.1981201171875, 2.4375, 0.281005859375, 0.89404296875, -0.1552734375, 0.6474609375, -0.08331298828125, 0.00740814208984375, -0.045501708984375, -0.578125, 2.02734375, 0.59228515625, 0.35693359375, 1.2919921875, 1.22265625, 1.0537109375, 0.145263671875, 1.05859375, -0.369140625, 0.207275390625, 0.78857421875, 0.599609375, 0.99072265625, 0.24462890625, 1.26953125, 0.08404541015625, 1.349609375, 0.73291015625, 1.3212890625, 0.388916015625, 1.0869140625, 0.9931640625, -1.5673828125, 0.0462646484375, 0.650390625, 0.253662109375, 0.58251953125, 1.8134765625, 0.8642578125, 2.591796875, 0.7314453125, 0.85986328125, 0.5615234375, 0.9296875, 0.04144287109375, 1.66015625, 1.99609375, 1.171875, 1.181640625, 1.5126953125, 0.0224456787109375, 0.58349609375, -1.4931640625, 0.81884765625, 0.732421875, -0.6455078125, -0.62451171875, 1.7802734375, 0.01526641845703125, -0.423095703125, 0.461669921875, 4.87890625, 1.2392578125, -0.6953125, 0.6689453125, 0.62451171875, -1.521484375, 1.7685546875, 0.810546875, 0.65478515625, 0.26123046875, 1.6396484375, 0.87548828125, 1.7353515625, 2.046875, 1.5634765625, 0.69384765625, 1.375, 0.8916015625, 1.0107421875, 0.1304931640625, 2.009765625, 0.06402587890625, -0.08428955078125, 0.04351806640625, -1.7529296875, 2.02734375, 3.521484375, 0.404541015625, 1.6337890625, -0.276611328125, 0.8837890625, -0.1287841796875, 0.91064453125, 0.8193359375, 0.701171875, 0.036529541015625, 1.26171875, 1.0478515625, -0.1422119140625, 1.0634765625, 0.61083984375, 1.3505859375, 1.208984375, 0.57275390625, 1.3623046875, 2.267578125, 0.484375, 0.9150390625, 0.56787109375, -0.70068359375, 0.27587890625, -0.70654296875, 0.8466796875, 0.57568359375, 1.6162109375, 0.87939453125, 2.248046875, -0.5458984375, 1.7744140625, 1.328125, 1.232421875, 0.6806640625, 0.9365234375, 1.052734375, -1.08984375, 1.8330078125, -0.4033203125, 1.0673828125, 0.297607421875, 1.5703125, 1.67578125, 1.34765625, 2.8203125, 2.025390625, -0.48583984375, 0.7626953125, 0.01007843017578125, 1.435546875, 0.007205963134765625, 0.05157470703125, -0.9853515625, 0.26708984375, 1.16796875, 1.2041015625, 1.99609375, -0.07916259765625, 1.244140625, -0.32080078125, 0.6748046875, 0.419921875, 1.3212890625, 1.291015625, 0.599609375, 0.0550537109375, 0.9599609375, 0.93505859375, 0.111083984375, 1.302734375, 0.0833740234375, 2.244140625, 1.25390625, 1.6015625, 0.58349609375, 1.7568359375, -0.263427734375, -0.019866943359375, -0.24658203125, -0.1871337890625, 0.927734375, 0.62255859375, 0.275146484375, 0.79541015625, 1.1796875, 1.1767578125, -0.26123046875, -0.268310546875, 1.8994140625, 1.318359375, 2.1875, 0.2469482421875, 1.41015625, 0.03973388671875, 1.2685546875, 1.1025390625, 0.9560546875, 0.865234375, -1.92578125, 1.154296875, 0.389892578125, 1.130859375, 0.95947265625, 0.72314453125, 2.244140625, 0.048553466796875, 0.626953125, 0.42919921875, 0.82275390625, 0.311767578125, -0.320556640625, 0.01041412353515625, 0.1483154296875, 0.10809326171875, -0.3173828125, 1.1337890625, -0.8642578125, 1.4033203125, 0.048828125, 1.1787109375, 0.98779296875, 1.818359375, 1.1552734375, 0.6015625, 1.2392578125, -1.2685546875, 0.39208984375, 0.83251953125, 0.224365234375, 0.0019989013671875, 0.87548828125, 1.6572265625, 1.107421875, 0.434814453125, 1.8251953125, 0.442626953125, 1.2587890625, 0.09320068359375, -0.896484375, 1.8017578125, 1.451171875, -0.0755615234375, 0.6083984375, 2.06640625, 0.673828125, -0.33740234375, 0.192138671875, 0.21435546875, 0.80224609375, -1.490234375, 0.9501953125, 0.86083984375, -0.40283203125, 4.109375, 2.533203125, 1.2529296875, 0.8271484375, 0.225830078125, 1.0478515625, -1.9755859375, 0.841796875, 0.392822265625, 0.525390625, 0.33935546875, -0.79443359375, 0.71630859375, 0.97998046875, -0.175537109375, 0.97705078125, 1.705078125, 0.29638671875, 0.68359375, 0.54150390625, 0.435791015625, 0.99755859375, -0.369140625, 1.009765625, -0.140380859375, 0.426513671875, 0.189697265625, 1.8193359375, 1.1201171875, -0.5009765625, -0.331298828125, 0.759765625, -0.09442138671875, 0.74609375, -1.947265625, 1.3544921875, -3.935546875, 2.544921875, 1.359375, 0.1363525390625, 0.79296875, 0.79931640625, -0.3466796875, 1.1396484375, -0.33447265625, 2.0078125, -0.241455078125, 0.6318359375, 0.365234375, 0.296142578125, 0.830078125, 1.0458984375, 0.5830078125, 0.61572265625, 14.0703125, -2.0078125, -0.381591796875, 1.228515625, 0.08282470703125, -0.67822265625, -0.04339599609375, 0.397216796875, 0.1656494140625, 0.137451171875, 0.244873046875, 1.1611328125, -1.3818359375, 0.8447265625, 1.171875, 0.36328125, 0.252685546875, 0.1197509765625, 0.232177734375, -0.020172119140625, 0.64404296875, -0.01100921630859375, -1.9267578125, 0.222412109375, 0.56005859375, 1.3046875, 1.1630859375, 1.197265625, 1.02734375, 1.6806640625, -0.043731689453125, 1.4697265625, 0.81201171875, 1.5390625, 1.240234375, -0.7353515625, 1.828125, 1.115234375, 1.931640625, -0.517578125, 0.77880859375, 1.0546875, 0.95361328125, 3.42578125, 0.0160369873046875, 0.875, 0.56005859375, 1.2421875, 1.986328125, 1.4814453125, 0.0948486328125, 1.115234375, 0.00665283203125, 2.09375, 0.3544921875, -0.52783203125, 1.2099609375, 0.45068359375, 0.65625, 0.1112060546875, 1.0751953125, -0.9521484375, -0.30029296875, 1.4462890625, 2.046875, 3.212890625, 1.68359375, 1.07421875, -0.5263671875, 0.74560546875, 1.37890625, 0.15283203125, 0.2440185546875, 0.62646484375, -0.1280517578125, 0.7646484375, -0.515625, -0.35693359375, 1.2958984375, 0.96923828125, 0.58935546875, 1.3701171875, 1.0673828125, 0.2337646484375, 0.93115234375, 0.66357421875, 6.0, 1.1025390625, -0.51708984375, -0.38330078125, 0.7197265625, 0.246826171875, -0.45166015625, 1.9521484375, 0.5546875, 0.08807373046875, 0.18505859375, 0.8857421875, -0.57177734375, 0.251708984375, 0.234375, 2.57421875, 0.9599609375, 0.5029296875, 0.10382080078125, 0.08331298828125, 0.66748046875, -0.349609375, 1.287109375, 0.259765625, 2.015625, 2.828125, -0.3095703125, -0.164306640625, -0.3408203125, 0.486572265625, 0.8466796875, 1.9130859375, 0.09088134765625, 0.66552734375, 0.00972747802734375, -0.83154296875, 1.755859375, 0.654296875, 0.173828125, 0.27587890625, -0.47607421875, -0.264404296875, 0.7529296875, 0.6533203125, 0.7275390625, 0.499755859375, 0.833984375, -0.44775390625, -0.05078125, -0.454833984375, 0.75439453125, 0.68505859375, 0.210693359375, -0.283935546875, -0.53564453125, 0.96826171875, 0.861328125, -3.33984375, -0.26171875, 0.77734375, 0.26513671875, -0.14111328125, -0.042236328125, -0.84814453125, 0.2137451171875, 0.94921875, 0.65185546875, -0.5380859375, 0.1529541015625, -0.360595703125, -0.0333251953125, -0.69189453125, 0.8974609375, 0.7109375, 0.81494140625, -0.259521484375, 1.1904296875, 0.62158203125, 1.345703125, 0.89404296875, 0.70556640625, 1.0673828125, 1.392578125, 0.5068359375, 0.962890625, 0.736328125, 1.55078125, 0.50390625, -0.398681640625, 2.361328125, 0.345947265625, -0.61962890625, 0.330078125, 0.75439453125, -0.673828125, -0.2379150390625, 1.5673828125, 1.369140625, 0.1119384765625, -0.1834716796875, 1.4599609375, -0.77587890625, 0.5556640625, 0.09954833984375, 0.0285186767578125, 0.58935546875, -0.501953125, 0.212890625, 0.02679443359375, 0.1715087890625, 0.03466796875, -0.564453125, 2.029296875, 2.45703125, -0.72216796875, 2.138671875, 0.50830078125, -0.09356689453125, 0.230224609375, 1.6943359375, 1.5126953125, 0.39453125, 0.411376953125, 1.07421875, -0.8046875, 0.51416015625, 0.2271728515625, -0.283447265625, 0.38427734375, 0.73388671875, 0.6962890625, 1.4990234375, 0.02813720703125, 0.40478515625, 1.2451171875, 1.1162109375, -5.5703125, 0.76171875, 0.322021484375, 1.0361328125, 1.197265625, 0.1163330078125, 0.2425537109375, 1.5595703125, 1.5791015625, -0.0921630859375, 0.484619140625, 1.9052734375, 5.31640625, 1.6337890625, 0.95947265625, -0.1751708984375, 0.466552734375, 0.8330078125, 1.03125, 0.2044677734375, 0.31298828125, -1.1220703125, 0.5517578125, 0.93505859375, 0.45166015625, 1.951171875, 0.65478515625, 1.30859375, 1.0859375, 0.56494140625, 2.322265625, 0.242919921875, 1.81640625, -0.469970703125, -0.841796875, 0.90869140625, 1.5361328125, 0.923828125, 1.0595703125, 0.356689453125, -0.46142578125, 2.134765625, 1.3037109375, -0.32373046875, -9.2265625, 0.4521484375, 0.88037109375, -0.53955078125, 0.96484375, 0.7705078125, 0.84521484375, 1.580078125, -0.1448974609375, 0.7607421875, 1.0166015625, -0.086669921875, 1.611328125, 0.05938720703125, 0.5078125, 0.8427734375, 2.431640625, 0.66357421875, 3.203125, 0.132080078125, 0.461181640625, 0.779296875, 1.9482421875, 1.8720703125, 0.845703125, -1.3837890625, -0.138916015625, 0.35546875, 0.2457275390625, 0.75341796875, 1.828125, 1.4169921875, 0.60791015625, 1.0068359375, 1.109375, 0.484130859375, -0.302001953125, 0.4951171875, 0.802734375, 1.9482421875, 0.916015625, 0.1646728515625, 2.599609375, 1.7177734375, -0.2374267578125, 0.98046875, 0.39306640625, -1.1396484375, 1.6533203125, 0.375244140625], \"scores\": [0.09906005859375, 0.12213134765625, 0.05035400390625, 0.16552734375, 0.0037384033203125, 0.010101318359375, 0.058197021484375, 0.10552978515625, 0.1141357421875, 0.115234375, 0.00444793701171875, 0.00812530517578125, 0.0343017578125, 0.009002685546875, 0.087158203125, 0.00818634033203125, 0.003238677978515625, 0.024169921875, 0.00702667236328125, 0.00936126708984375, 0.00632476806640625, 0.0293731689453125, 0.01800537109375, 0.0088348388671875, 0.013397216796875, 0.02557373046875, 0.12109375, 0.004413604736328125, 0.016571044921875, 0.00274658203125, 0.2142333984375, 0.29638671875, 0.16015625, 0.007843017578125, 0.007160186767578125, 0.00508880615234375, 0.054229736328125, 0.048736572265625, 0.026397705078125, 0.0265350341796875, 0.051361083984375, 0.018310546875, 0.00974273681640625, 0.0218963623046875, 0.216064453125, 0.021728515625, 0.0173797607421875, 0.004520416259765625], \"stoks\": [52, 52, 52, 52, 52, 41, 41, 374, 303, 303, 303, 427], \"time\": {\"begin_ms\": 640, \"end_ms\": 1140}}]}"
                          },
                          {
                            "id": "7645a0d1-2e64-410d-83a8-b96040432e9a",
                            "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                            "timestamp": 1716244957031,
                            "role": "AGENT",
                            "type": "AGENT_MESSAGE",
                            "message_text": "Hello!",
                            "emotion_features": "{\"Admiration\": 0.044921875, \"Adoration\": 0.0253753662109375, \"Aesthetic Appreciation\": 0.03265380859375, \"Amusement\": 0.118408203125, \"Anger\": 0.06719970703125, \"Anxiety\": 0.0411376953125, \"Awe\": 0.03802490234375, \"Awkwardness\": 0.056549072265625, \"Boredom\": 0.04217529296875, \"Calmness\": 0.08709716796875, \"Concentration\": 0.070556640625, \"Confusion\": 0.06964111328125, \"Contemplation\": 0.0343017578125, \"Contempt\": 0.037689208984375, \"Contentment\": 0.059417724609375, \"Craving\": 0.01132965087890625, \"Desire\": 0.01406097412109375, \"Determination\": 0.1143798828125, \"Disappointment\": 0.051177978515625, \"Disgust\": 0.028594970703125, \"Distress\": 0.054901123046875, \"Doubt\": 0.04638671875, \"Ecstasy\": 0.0258026123046875, \"Embarrassment\": 0.0222015380859375, \"Empathic Pain\": 0.015777587890625, \"Entrancement\": 0.0160980224609375, \"Envy\": 0.0163421630859375, \"Excitement\": 0.129638671875, \"Fear\": 0.03125, \"Guilt\": 0.01483917236328125, \"Horror\": 0.0194549560546875, \"Interest\": 0.1341552734375, \"Joy\": 0.0738525390625, \"Love\": 0.0216522216796875, \"Nostalgia\": 0.0210418701171875, \"Pain\": 0.020721435546875, \"Pride\": 0.05499267578125, \"Realization\": 0.0728759765625, \"Relief\": 0.04052734375, \"Romance\": 0.0129241943359375, \"Sadness\": 0.0254669189453125, \"Satisfaction\": 0.07159423828125, \"Shame\": 0.01495361328125, \"Surprise (negative)\": 0.05560302734375, \"Surprise (positive)\": 0.07965087890625, \"Sympathy\": 0.022247314453125, \"Tiredness\": 0.0194549560546875, \"Triumph\": 0.04107666015625}",
                            "metadata": ""
                          }
                        ],
                        "page_number": 0,
                        "page_size": 3,
                        "total_pages": 1,
                        "end_timestamp": 1716244958546,
                        "metadata": "",
                        "config": {
                          "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                          "version": 0
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/chats/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {
                      "page_size": 0,
                      "page_number": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.empathic_voice.chats.list_chat_events(\n        id=\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n        page_number=0,\n        page_size=3,\n        ascending_order=True,\n    )\n    async for item in response:\n        yield item\n    # alternatively, you can paginate page-by-page\n    async for page in response.iter_pages():\n        yield page\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.chats.list_chat_events(\n    id=\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n    page_number=0,\n    page_size=3,\n    ascending_order=True,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chats.listChatEvents(\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\", {\n    pageNumber: 0,\n    pageSize: 3,\n    ascendingOrder: true\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a paginated list of **Chat** events.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-audio",
                "migratedFromUrlSlugs": ["get-chat-audio"],
                "method": "GET",
                "id": "get-audio",
                "originalEndpointId": "endpoint_chats.get-audio",
                "name": "Get chat audio",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a chat. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/chats/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/audio"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnChatAudioReconstruction"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Chats Get Audio Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/chats/470a49f6-1dec-4afe-8b61-035d3b2d63b0/audio",
                    "pathParameters": {
                      "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                      "user_id": "e6235940-cfda-3988-9147-ff531627cf42",
                      "status": "COMPLETE",
                      "filename": "e6235940-cfda-3988-9147-ff531627cf42/470a49f6-1dec-4afe-8b61-035d3b2d63b0/reconstructed_audio.mp4",
                      "modified_at": 1729875432555,
                      "signed_audio_url": "https://storage.googleapis.com/...etc.",
                      "signed_url_expiration_timestamp_millis": 1730232816964
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.chats.get_audio(\n        id=\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chats.get_audio(\n    id=\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chats.getAudio(\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                        "user_id": "e6235940-cfda-3988-9147-ff531627cf42",
                        "status": "COMPLETE",
                        "filename": "e6235940-cfda-3988-9147-ff531627cf42/470a49f6-1dec-4afe-8b61-035d3b2d63b0/reconstructed_audio.mp4",
                        "modified_at": 1729875432555,
                        "signed_audio_url": "https://storage.googleapis.com/...etc.",
                        "signed_url_expiration_timestamp_millis": 1730232816964
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/chats/:id/audio",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.chats.get_audio(\n        id=\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chats.get_audio(\n    id=\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chats.getAudio(\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches the audio of a previous **Chat**. For more details, see our guide on audio reconstruction [here](/docs/empathic-voice-interface-evi/faq#can-i-access-the-audio-of-previous-conversations-with-evi).",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "chats",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_chatGroups": {
            "subpackageId": "subpackage_chatGroups",
            "name": "chatGroups",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-chat-groups",
                "method": "GET",
                "id": "list-chat-groups",
                "originalEndpointId": "endpoint_chatGroups.list-chat-groups",
                "name": "List chat_groups",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/chat_groups"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the sorting order of the results based on their creation date. Set to true for ascending order (chronological, with the oldest records first) and false for descending order (reverse-chronological, with the newest records first). Defaults to true.",
                    "key": "ascending_order",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  },
                  {
                    "description": "The unique identifier for an EVI configuration.\n\nFilter Chat Groups to only include Chats that used this `config_id` in their most recent Chat.",
                    "key": "config_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnPagedChatGroups"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Chat Groups List Chat Groups Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/chat_groups",
                    "pathParameters": {},
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 1,
                      "ascending_order": true,
                      "config_id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "page_number": 0,
                      "page_size": 1,
                      "total_pages": 1,
                      "pagination_direction": "ASC",
                      "chat_groups_page": [
                        {
                          "id": "697056f0-6c7e-487d-9bd8-9c19df79f05f",
                          "first_start_timestamp": 1721844196397,
                          "most_recent_start_timestamp": 1721861821717,
                          "active": false,
                          "most_recent_chat_id": "dfdbdd4d-0ddf-418b-8fc4-80a266579d36",
                          "num_chats": 5
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.chat_groups.list_chat_groups(\n        page_number=0,\n        page_size=1,\n        ascending_order=True,\n        config_id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.list_chat_groups(\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n    config_id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.listChatGroups({\n    pageNumber: 0,\n    pageSize: 1,\n    ascendingOrder: true,\n    configId: \"1b60e1a0-cc59-424a-8d2c-189d354db3f3\"\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "page_number": 0,
                        "page_size": 1,
                        "total_pages": 1,
                        "pagination_direction": "ASC",
                        "chat_groups_page": [
                          {
                            "id": "697056f0-6c7e-487d-9bd8-9c19df79f05f",
                            "first_start_timestamp": 1721844196397,
                            "most_recent_start_timestamp": 1721861821717,
                            "active": false,
                            "most_recent_chat_id": "dfdbdd4d-0ddf-418b-8fc4-80a266579d36",
                            "num_chats": 5
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/chat_groups",
                    "pathParameters": {},
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.chat_groups.list_chat_groups(\n        page_number=0,\n        page_size=1,\n        ascending_order=True,\n        config_id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.list_chat_groups(\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n    config_id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.listChatGroups({\n    pageNumber: 0,\n    pageSize: 1,\n    ascendingOrder: true,\n    configId: \"1b60e1a0-cc59-424a-8d2c-189d354db3f3\"\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a paginated list of **Chat Groups**.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-chat-group",
                "method": "GET",
                "id": "get-chat-group",
                "originalEndpointId": "endpoint_chatGroups.get-chat-group",
                "name": "Get chat_group",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Chat Group. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/chat_groups/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the sorting order of the results based on their creation date. Set to true for ascending order (chronological, with the oldest records first) and false for descending order (reverse-chronological, with the newest records first). Defaults to true.",
                    "key": "ascending_order",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnChatGroupPagedChats"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Chat Groups Get Chat Group Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/chat_groups/697056f0-6c7e-487d-9bd8-9c19df79f05f",
                    "pathParameters": {
                      "id": "697056f0-6c7e-487d-9bd8-9c19df79f05f"
                    },
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 1,
                      "ascending_order": true
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "369846cf-6ad5-404d-905e-a8acb5cdfc78",
                      "first_start_timestamp": 1712334213647,
                      "most_recent_start_timestamp": 1712334213647,
                      "num_chats": 1,
                      "page_number": 0,
                      "page_size": 1,
                      "total_pages": 1,
                      "pagination_direction": "ASC",
                      "chats_page": [
                        {
                          "id": "6375d4f8-cd3e-4d6b-b13b-ace66b7c8aaa",
                          "chat_group_id": "369846cf-6ad5-404d-905e-a8acb5cdfc78",
                          "status": "USER_ENDED",
                          "start_timestamp": 1712334213647,
                          "end_timestamp": 1712334332571,
                          "event_count": 0
                        }
                      ],
                      "active": false
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.chat_groups.get_chat_group(\n        id=\"697056f0-6c7e-487d-9bd8-9c19df79f05f\",\n        page_number=0,\n        page_size=1,\n        ascending_order=True,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.get_chat_group(\n    id=\"697056f0-6c7e-487d-9bd8-9c19df79f05f\",\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.getChatGroup(\"697056f0-6c7e-487d-9bd8-9c19df79f05f\", {\n    pageNumber: 0,\n    pageSize: 1,\n    ascendingOrder: true\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "369846cf-6ad5-404d-905e-a8acb5cdfc78",
                        "first_start_timestamp": 1712334213647,
                        "most_recent_start_timestamp": 1712334213647,
                        "num_chats": 1,
                        "page_number": 0,
                        "page_size": 1,
                        "total_pages": 1,
                        "pagination_direction": "ASC",
                        "chats_page": [
                          {
                            "id": "6375d4f8-cd3e-4d6b-b13b-ace66b7c8aaa",
                            "chat_group_id": "369846cf-6ad5-404d-905e-a8acb5cdfc78",
                            "status": "USER_ENDED",
                            "start_timestamp": 1712334213647,
                            "end_timestamp": 1712334332571,
                            "event_count": 0
                          }
                        ],
                        "active": false
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/chat_groups/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {
                      "page_size": 0,
                      "page_number": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.chat_groups.get_chat_group(\n        id=\"697056f0-6c7e-487d-9bd8-9c19df79f05f\",\n        page_number=0,\n        page_size=1,\n        ascending_order=True,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.get_chat_group(\n    id=\"697056f0-6c7e-487d-9bd8-9c19df79f05f\",\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.getChatGroup(\"697056f0-6c7e-487d-9bd8-9c19df79f05f\", {\n    pageNumber: 0,\n    pageSize: 1,\n    ascendingOrder: true\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a **ChatGroup** by ID, including a paginated list of **Chats** associated with the **ChatGroup**.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-chat-group-events",
                "migratedFromUrlSlugs": ["list-chat-events-from-a-specific-chat-group"],
                "method": "GET",
                "id": "list-chat-group-events",
                "originalEndpointId": "endpoint_chatGroups.list-chat-group-events",
                "name": "List chat events from a specific chat_group",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a Chat Group. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/chat_groups/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/events"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the sorting order of the results based on their creation date. Set to true for ascending order (chronological, with the oldest records first) and false for descending order (reverse-chronological, with the newest records first). Defaults to true.",
                    "key": "ascending_order",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnChatGroupPagedEvents"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Chat Groups List Chat Group Events Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/chat_groups/697056f0-6c7e-487d-9bd8-9c19df79f05f/events",
                    "pathParameters": {
                      "id": "697056f0-6c7e-487d-9bd8-9c19df79f05f"
                    },
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 3,
                      "ascending_order": true
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "697056f0-6c7e-487d-9bd8-9c19df79f05f",
                      "page_number": 0,
                      "page_size": 3,
                      "total_pages": 1,
                      "pagination_direction": "ASC",
                      "events_page": [
                        {
                          "id": "5d44bdbb-49a3-40fb-871d-32bf7e76efe7",
                          "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                          "timestamp": 1716244940762,
                          "role": "SYSTEM",
                          "type": "SYSTEM_PROMPT",
                          "message_text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                          "emotion_features": "",
                          "metadata": ""
                        },
                        {
                          "id": "5976ddf6-d093-4bb9-ba60-8f6c25832dde",
                          "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                          "timestamp": 1716244956278,
                          "role": "USER",
                          "type": "USER_MESSAGE",
                          "message_text": "Hello.",
                          "emotion_features": "{\"Admiration\": 0.09906005859375, \"Adoration\": 0.12213134765625, \"Aesthetic Appreciation\": 0.05035400390625, \"Amusement\": 0.16552734375, \"Anger\": 0.0037384033203125, \"Anxiety\": 0.010101318359375, \"Awe\": 0.058197021484375, \"Awkwardness\": 0.10552978515625, \"Boredom\": 0.1141357421875, \"Calmness\": 0.115234375, \"Concentration\": 0.00444793701171875, \"Confusion\": 0.0343017578125, \"Contemplation\": 0.00812530517578125, \"Contempt\": 0.009002685546875, \"Contentment\": 0.087158203125, \"Craving\": 0.00818634033203125, \"Desire\": 0.018310546875, \"Determination\": 0.003238677978515625, \"Disappointment\": 0.024169921875, \"Disgust\": 0.00702667236328125, \"Distress\": 0.00936126708984375, \"Doubt\": 0.00632476806640625, \"Ecstasy\": 0.0293731689453125, \"Embarrassment\": 0.01800537109375, \"Empathic Pain\": 0.0088348388671875, \"Entrancement\": 0.013397216796875, \"Envy\": 0.02557373046875, \"Excitement\": 0.12109375, \"Fear\": 0.004413604736328125, \"Guilt\": 0.016571044921875, \"Horror\": 0.00274658203125, \"Interest\": 0.2142333984375, \"Joy\": 0.29638671875, \"Love\": 0.16015625, \"Nostalgia\": 0.007843017578125, \"Pain\": 0.007160186767578125, \"Pride\": 0.00508880615234375, \"Realization\": 0.054229736328125, \"Relief\": 0.048736572265625, \"Romance\": 0.026397705078125, \"Sadness\": 0.0265350341796875, \"Satisfaction\": 0.051361083984375, \"Shame\": 0.00974273681640625, \"Surprise (negative)\": 0.0218963623046875, \"Surprise (positive)\": 0.216064453125, \"Sympathy\": 0.021728515625, \"Tiredness\": 0.0173797607421875, \"Triumph\": 0.004520416259765625}",
                          "metadata": "{\"segments\": [{\"content\": \"Hello.\", \"embedding\": [0.6181640625, 0.1763916015625, -30.921875, 1.2705078125, 0.927734375, 0.63720703125, 2.865234375, 0.1080322265625, 0.2978515625, 1.0107421875, 1.34375, 0.74560546875, 0.416259765625, 0.99462890625, -0.333740234375, 0.361083984375, -1.388671875, 1.0107421875, 1.3173828125, 0.55615234375, 0.541015625, -0.1837158203125, 1.697265625, 0.228515625, 2.087890625, -0.311767578125, 0.053680419921875, 1.3349609375, 0.95068359375, 0.00441741943359375, 0.705078125, 1.8916015625, -0.939453125, 0.93701171875, -0.28955078125, 1.513671875, 0.5595703125, 1.0126953125, -0.1624755859375, 1.4072265625, -0.28857421875, -0.4560546875, -0.1500244140625, -0.1102294921875, -0.222412109375, 0.8779296875, 1.275390625, 1.6689453125, 0.80712890625, -0.34814453125, -0.325439453125, 0.412841796875, 0.81689453125, 0.55126953125, 1.671875, 0.6611328125, 0.7451171875, 1.50390625, 1.0224609375, -1.671875, 0.7373046875, 2.1328125, 2.166015625, 0.41015625, -0.127685546875, 1.9345703125, -4.2734375, 0.332275390625, 0.26171875, 0.76708984375, 0.2685546875, 0.468017578125, 1.208984375, -1.517578125, 1.083984375, 0.84814453125, 1.0244140625, -0.0072174072265625, 1.34375, 1.0712890625, 1.517578125, -0.52001953125, 0.59228515625, 0.8154296875, -0.951171875, -0.07757568359375, 1.3330078125, 1.125, 0.61181640625, 1.494140625, 0.357421875, 1.1796875, 1.482421875, 0.8046875, 0.1536865234375, 1.8076171875, 0.68115234375, -15.171875, 1.2294921875, 0.319091796875, 0.499755859375, 1.5771484375, 0.94677734375, -0.2490234375, 0.88525390625, 3.47265625, 0.75927734375, 0.71044921875, 1.2333984375, 1.4169921875, -0.56640625, -1.8095703125, 1.37109375, 0.428955078125, 1.89453125, -0.39013671875, 0.1734619140625, 1.5595703125, -1.2294921875, 2.552734375, 0.58349609375, 0.2156982421875, -0.00984954833984375, -0.6865234375, -0.0272979736328125, -0.2264404296875, 2.853515625, 1.3896484375, 0.52978515625, 0.783203125, 3.0390625, 0.75537109375, 0.219970703125, 0.384521484375, 0.385986328125, 2.0546875, -0.10443115234375, 1.5146484375, 1.4296875, 1.9716796875, 1.1318359375, 0.31591796875, 0.338623046875, 1.654296875, -0.88037109375, -0.21484375, 1.45703125, 1.0380859375, -0.52294921875, -0.47802734375, 0.1650390625, 1.2392578125, -1.138671875, 0.56787109375, 1.318359375, 0.4287109375, 0.1981201171875, 2.4375, 0.281005859375, 0.89404296875, -0.1552734375, 0.6474609375, -0.08331298828125, 0.00740814208984375, -0.045501708984375, -0.578125, 2.02734375, 0.59228515625, 0.35693359375, 1.2919921875, 1.22265625, 1.0537109375, 0.145263671875, 1.05859375, -0.369140625, 0.207275390625, 0.78857421875, 0.599609375, 0.99072265625, 0.24462890625, 1.26953125, 0.08404541015625, 1.349609375, 0.73291015625, 1.3212890625, 0.388916015625, 1.0869140625, 0.9931640625, -1.5673828125, 0.0462646484375, 0.650390625, 0.253662109375, 0.58251953125, 1.8134765625, 0.8642578125, 2.591796875, 0.7314453125, 0.85986328125, 0.5615234375, 0.9296875, 0.04144287109375, 1.66015625, 1.99609375, 1.171875, 1.181640625, 1.5126953125, 0.0224456787109375, 0.58349609375, -1.4931640625, 0.81884765625, 0.732421875, -0.6455078125, -0.62451171875, 1.7802734375, 0.01526641845703125, -0.423095703125, 0.461669921875, 4.87890625, 1.2392578125, -0.6953125, 0.6689453125, 0.62451171875, -1.521484375, 1.7685546875, 0.810546875, 0.65478515625, 0.26123046875, 1.6396484375, 0.87548828125, 1.7353515625, 2.046875, 1.5634765625, 0.69384765625, 1.375, 0.8916015625, 1.0107421875, 0.1304931640625, 2.009765625, 0.06402587890625, -0.08428955078125, 0.04351806640625, -1.7529296875, 2.02734375, 3.521484375, 0.404541015625, 1.6337890625, -0.276611328125, 0.8837890625, -0.1287841796875, 0.91064453125, 0.8193359375, 0.701171875, 0.036529541015625, 1.26171875, 1.0478515625, -0.1422119140625, 1.0634765625, 0.61083984375, 1.3505859375, 1.208984375, 0.57275390625, 1.3623046875, 2.267578125, 0.484375, 0.9150390625, 0.56787109375, -0.70068359375, 0.27587890625, -0.70654296875, 0.8466796875, 0.57568359375, 1.6162109375, 0.87939453125, 2.248046875, -0.5458984375, 1.7744140625, 1.328125, 1.232421875, 0.6806640625, 0.9365234375, 1.052734375, -1.08984375, 1.8330078125, -0.4033203125, 1.0673828125, 0.297607421875, 1.5703125, 1.67578125, 1.34765625, 2.8203125, 2.025390625, -0.48583984375, 0.7626953125, 0.01007843017578125, 1.435546875, 0.007205963134765625, 0.05157470703125, -0.9853515625, 0.26708984375, 1.16796875, 1.2041015625, 1.99609375, -0.07916259765625, 1.244140625, -0.32080078125, 0.6748046875, 0.419921875, 1.3212890625, 1.291015625, 0.599609375, 0.0550537109375, 0.9599609375, 0.93505859375, 0.111083984375, 1.302734375, 0.0833740234375, 2.244140625, 1.25390625, 1.6015625, 0.58349609375, 1.7568359375, -0.263427734375, -0.019866943359375, -0.24658203125, -0.1871337890625, 0.927734375, 0.62255859375, 0.275146484375, 0.79541015625, 1.1796875, 1.1767578125, -0.26123046875, -0.268310546875, 1.8994140625, 1.318359375, 2.1875, 0.2469482421875, 1.41015625, 0.03973388671875, 1.2685546875, 1.1025390625, 0.9560546875, 0.865234375, -1.92578125, 1.154296875, 0.389892578125, 1.130859375, 0.95947265625, 0.72314453125, 2.244140625, 0.048553466796875, 0.626953125, 0.42919921875, 0.82275390625, 0.311767578125, -0.320556640625, 0.01041412353515625, 0.1483154296875, 0.10809326171875, -0.3173828125, 1.1337890625, -0.8642578125, 1.4033203125, 0.048828125, 1.1787109375, 0.98779296875, 1.818359375, 1.1552734375, 0.6015625, 1.2392578125, -1.2685546875, 0.39208984375, 0.83251953125, 0.224365234375, 0.0019989013671875, 0.87548828125, 1.6572265625, 1.107421875, 0.434814453125, 1.8251953125, 0.442626953125, 1.2587890625, 0.09320068359375, -0.896484375, 1.8017578125, 1.451171875, -0.0755615234375, 0.6083984375, 2.06640625, 0.673828125, -0.33740234375, 0.192138671875, 0.21435546875, 0.80224609375, -1.490234375, 0.9501953125, 0.86083984375, -0.40283203125, 4.109375, 2.533203125, 1.2529296875, 0.8271484375, 0.225830078125, 1.0478515625, -1.9755859375, 0.841796875, 0.392822265625, 0.525390625, 0.33935546875, -0.79443359375, 0.71630859375, 0.97998046875, -0.175537109375, 0.97705078125, 1.705078125, 0.29638671875, 0.68359375, 0.54150390625, 0.435791015625, 0.99755859375, -0.369140625, 1.009765625, -0.140380859375, 0.426513671875, 0.189697265625, 1.8193359375, 1.1201171875, -0.5009765625, -0.331298828125, 0.759765625, -0.09442138671875, 0.74609375, -1.947265625, 1.3544921875, -3.935546875, 2.544921875, 1.359375, 0.1363525390625, 0.79296875, 0.79931640625, -0.3466796875, 1.1396484375, -0.33447265625, 2.0078125, -0.241455078125, 0.6318359375, 0.365234375, 0.296142578125, 0.830078125, 1.0458984375, 0.5830078125, 0.61572265625, 14.0703125, -2.0078125, -0.381591796875, 1.228515625, 0.08282470703125, -0.67822265625, -0.04339599609375, 0.397216796875, 0.1656494140625, 0.137451171875, 0.244873046875, 1.1611328125, -1.3818359375, 0.8447265625, 1.171875, 0.36328125, 0.252685546875, 0.1197509765625, 0.232177734375, -0.020172119140625, 0.64404296875, -0.01100921630859375, -1.9267578125, 0.222412109375, 0.56005859375, 1.3046875, 1.1630859375, 1.197265625, 1.02734375, 1.6806640625, -0.043731689453125, 1.4697265625, 0.81201171875, 1.5390625, 1.240234375, -0.7353515625, 1.828125, 1.115234375, 1.931640625, -0.517578125, 0.77880859375, 1.0546875, 0.95361328125, 3.42578125, 0.0160369873046875, 0.875, 0.56005859375, 1.2421875, 1.986328125, 1.4814453125, 0.0948486328125, 1.115234375, 0.00665283203125, 2.09375, 0.3544921875, -0.52783203125, 1.2099609375, 0.45068359375, 0.65625, 0.1112060546875, 1.0751953125, -0.9521484375, -0.30029296875, 1.4462890625, 2.046875, 3.212890625, 1.68359375, 1.07421875, -0.5263671875, 0.74560546875, 1.37890625, 0.15283203125, 0.2440185546875, 0.62646484375, -0.1280517578125, 0.7646484375, -0.515625, -0.35693359375, 1.2958984375, 0.96923828125, 0.58935546875, 1.3701171875, 1.0673828125, 0.2337646484375, 0.93115234375, 0.66357421875, 6.0, 1.1025390625, -0.51708984375, -0.38330078125, 0.7197265625, 0.246826171875, -0.45166015625, 1.9521484375, 0.5546875, 0.08807373046875, 0.18505859375, 0.8857421875, -0.57177734375, 0.251708984375, 0.234375, 2.57421875, 0.9599609375, 0.5029296875, 0.10382080078125, 0.08331298828125, 0.66748046875, -0.349609375, 1.287109375, 0.259765625, 2.015625, 2.828125, -0.3095703125, -0.164306640625, -0.3408203125, 0.486572265625, 0.8466796875, 1.9130859375, 0.09088134765625, 0.66552734375, 0.00972747802734375, -0.83154296875, 1.755859375, 0.654296875, 0.173828125, 0.27587890625, -0.47607421875, -0.264404296875, 0.7529296875, 0.6533203125, 0.7275390625, 0.499755859375, 0.833984375, -0.44775390625, -0.05078125, -0.454833984375, 0.75439453125, 0.68505859375, 0.210693359375, -0.283935546875, -0.53564453125, 0.96826171875, 0.861328125, -3.33984375, -0.26171875, 0.77734375, 0.26513671875, -0.14111328125, -0.042236328125, -0.84814453125, 0.2137451171875, 0.94921875, 0.65185546875, -0.5380859375, 0.1529541015625, -0.360595703125, -0.0333251953125, -0.69189453125, 0.8974609375, 0.7109375, 0.81494140625, -0.259521484375, 1.1904296875, 0.62158203125, 1.345703125, 0.89404296875, 0.70556640625, 1.0673828125, 1.392578125, 0.5068359375, 0.962890625, 0.736328125, 1.55078125, 0.50390625, -0.398681640625, 2.361328125, 0.345947265625, -0.61962890625, 0.330078125, 0.75439453125, -0.673828125, -0.2379150390625, 1.5673828125, 1.369140625, 0.1119384765625, -0.1834716796875, 1.4599609375, -0.77587890625, 0.5556640625, 0.09954833984375, 0.0285186767578125, 0.58935546875, -0.501953125, 0.212890625, 0.02679443359375, 0.1715087890625, 0.03466796875, -0.564453125, 2.029296875, 2.45703125, -0.72216796875, 2.138671875, 0.50830078125, -0.09356689453125, 0.230224609375, 1.6943359375, 1.5126953125, 0.39453125, 0.411376953125, 1.07421875, -0.8046875, 0.51416015625, 0.2271728515625, -0.283447265625, 0.38427734375, 0.73388671875, 0.6962890625, 1.4990234375, 0.02813720703125, 0.40478515625, 1.2451171875, 1.1162109375, -5.5703125, 0.76171875, 0.322021484375, 1.0361328125, 1.197265625, 0.1163330078125, 0.2425537109375, 1.5595703125, 1.5791015625, -0.0921630859375, 0.484619140625, 1.9052734375, 5.31640625, 1.6337890625, 0.95947265625, -0.1751708984375, 0.466552734375, 0.8330078125, 1.03125, 0.2044677734375, 0.31298828125, -1.1220703125, 0.5517578125, 0.93505859375, 0.45166015625, 1.951171875, 0.65478515625, 1.30859375, 1.0859375, 0.56494140625, 2.322265625, 0.242919921875, 1.81640625, -0.469970703125, -0.841796875, 0.90869140625, 1.5361328125, 0.923828125, 1.0595703125, 0.356689453125, -0.46142578125, 2.134765625, 1.3037109375, -0.32373046875, -9.2265625, 0.4521484375, 0.88037109375, -0.53955078125, 0.96484375, 0.7705078125, 0.84521484375, 1.580078125, -0.1448974609375, 0.7607421875, 1.0166015625, -0.086669921875, 1.611328125, 0.05938720703125, 0.5078125, 0.8427734375, 2.431640625, 0.66357421875, 3.203125, 0.132080078125, 0.461181640625, 0.779296875, 1.9482421875, 1.8720703125, 0.845703125, -1.3837890625, -0.138916015625, 0.35546875, 0.2457275390625, 0.75341796875, 1.828125, 1.4169921875, 0.60791015625, 1.0068359375, 1.109375, 0.484130859375, -0.302001953125, 0.4951171875, 0.802734375, 1.9482421875, 0.916015625, 0.1646728515625, 2.599609375, 1.7177734375, -0.2374267578125, 0.98046875, 0.39306640625, -1.1396484375, 1.6533203125, 0.375244140625], \"scores\": [0.09906005859375, 0.12213134765625, 0.05035400390625, 0.16552734375, 0.0037384033203125, 0.010101318359375, 0.058197021484375, 0.10552978515625, 0.1141357421875, 0.115234375, 0.00444793701171875, 0.00812530517578125, 0.0343017578125, 0.009002685546875, 0.087158203125, 0.00818634033203125, 0.003238677978515625, 0.024169921875, 0.00702667236328125, 0.00936126708984375, 0.00632476806640625, 0.0293731689453125, 0.01800537109375, 0.0088348388671875, 0.013397216796875, 0.02557373046875, 0.12109375, 0.004413604736328125, 0.016571044921875, 0.00274658203125, 0.2142333984375, 0.29638671875, 0.16015625, 0.007843017578125, 0.007160186767578125, 0.00508880615234375, 0.054229736328125, 0.048736572265625, 0.026397705078125, 0.0265350341796875, 0.051361083984375, 0.018310546875, 0.00974273681640625, 0.0218963623046875, 0.216064453125, 0.021728515625, 0.0173797607421875, 0.004520416259765625], \"stoks\": [52, 52, 52, 52, 52, 41, 41, 374, 303, 303, 303, 427], \"time\": {\"begin_ms\": 640, \"end_ms\": 1140}}]}"
                        },
                        {
                          "id": "7645a0d1-2e64-410d-83a8-b96040432e9a",
                          "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                          "timestamp": 1716244957031,
                          "role": "AGENT",
                          "type": "AGENT_MESSAGE",
                          "message_text": "Hello!",
                          "emotion_features": "{\"Admiration\": 0.044921875, \"Adoration\": 0.0253753662109375, \"Aesthetic Appreciation\": 0.03265380859375, \"Amusement\": 0.118408203125, \"Anger\": 0.06719970703125, \"Anxiety\": 0.0411376953125, \"Awe\": 0.03802490234375, \"Awkwardness\": 0.056549072265625, \"Boredom\": 0.04217529296875, \"Calmness\": 0.08709716796875, \"Concentration\": 0.070556640625, \"Confusion\": 0.06964111328125, \"Contemplation\": 0.0343017578125, \"Contempt\": 0.037689208984375, \"Contentment\": 0.059417724609375, \"Craving\": 0.01132965087890625, \"Desire\": 0.01406097412109375, \"Determination\": 0.1143798828125, \"Disappointment\": 0.051177978515625, \"Disgust\": 0.028594970703125, \"Distress\": 0.054901123046875, \"Doubt\": 0.04638671875, \"Ecstasy\": 0.0258026123046875, \"Embarrassment\": 0.0222015380859375, \"Empathic Pain\": 0.015777587890625, \"Entrancement\": 0.0160980224609375, \"Envy\": 0.0163421630859375, \"Excitement\": 0.129638671875, \"Fear\": 0.03125, \"Guilt\": 0.01483917236328125, \"Horror\": 0.0194549560546875, \"Interest\": 0.1341552734375, \"Joy\": 0.0738525390625, \"Love\": 0.0216522216796875, \"Nostalgia\": 0.0210418701171875, \"Pain\": 0.020721435546875, \"Pride\": 0.05499267578125, \"Realization\": 0.0728759765625, \"Relief\": 0.04052734375, \"Romance\": 0.0129241943359375, \"Sadness\": 0.0254669189453125, \"Satisfaction\": 0.07159423828125, \"Shame\": 0.01495361328125, \"Surprise (negative)\": 0.05560302734375, \"Surprise (positive)\": 0.07965087890625, \"Sympathy\": 0.022247314453125, \"Tiredness\": 0.0194549560546875, \"Triumph\": 0.04107666015625}",
                          "metadata": ""
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.chat_groups.list_chat_group_events(\n        id=\"697056f0-6c7e-487d-9bd8-9c19df79f05f\",\n        page_number=0,\n        page_size=3,\n        ascending_order=True,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.list_chat_group_events(\n    id=\"697056f0-6c7e-487d-9bd8-9c19df79f05f\",\n    page_number=0,\n    page_size=3,\n    ascending_order=True,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.listChatGroupEvents(\"697056f0-6c7e-487d-9bd8-9c19df79f05f\", {\n    pageNumber: 0,\n    pageSize: 3,\n    ascendingOrder: true\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "697056f0-6c7e-487d-9bd8-9c19df79f05f",
                        "page_number": 0,
                        "page_size": 3,
                        "total_pages": 1,
                        "pagination_direction": "ASC",
                        "events_page": [
                          {
                            "id": "5d44bdbb-49a3-40fb-871d-32bf7e76efe7",
                            "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                            "timestamp": 1716244940762,
                            "role": "SYSTEM",
                            "type": "SYSTEM_PROMPT",
                            "message_text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                            "emotion_features": "",
                            "metadata": ""
                          },
                          {
                            "id": "5976ddf6-d093-4bb9-ba60-8f6c25832dde",
                            "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                            "timestamp": 1716244956278,
                            "role": "USER",
                            "type": "USER_MESSAGE",
                            "message_text": "Hello.",
                            "emotion_features": "{\"Admiration\": 0.09906005859375, \"Adoration\": 0.12213134765625, \"Aesthetic Appreciation\": 0.05035400390625, \"Amusement\": 0.16552734375, \"Anger\": 0.0037384033203125, \"Anxiety\": 0.010101318359375, \"Awe\": 0.058197021484375, \"Awkwardness\": 0.10552978515625, \"Boredom\": 0.1141357421875, \"Calmness\": 0.115234375, \"Concentration\": 0.00444793701171875, \"Confusion\": 0.0343017578125, \"Contemplation\": 0.00812530517578125, \"Contempt\": 0.009002685546875, \"Contentment\": 0.087158203125, \"Craving\": 0.00818634033203125, \"Desire\": 0.018310546875, \"Determination\": 0.003238677978515625, \"Disappointment\": 0.024169921875, \"Disgust\": 0.00702667236328125, \"Distress\": 0.00936126708984375, \"Doubt\": 0.00632476806640625, \"Ecstasy\": 0.0293731689453125, \"Embarrassment\": 0.01800537109375, \"Empathic Pain\": 0.0088348388671875, \"Entrancement\": 0.013397216796875, \"Envy\": 0.02557373046875, \"Excitement\": 0.12109375, \"Fear\": 0.004413604736328125, \"Guilt\": 0.016571044921875, \"Horror\": 0.00274658203125, \"Interest\": 0.2142333984375, \"Joy\": 0.29638671875, \"Love\": 0.16015625, \"Nostalgia\": 0.007843017578125, \"Pain\": 0.007160186767578125, \"Pride\": 0.00508880615234375, \"Realization\": 0.054229736328125, \"Relief\": 0.048736572265625, \"Romance\": 0.026397705078125, \"Sadness\": 0.0265350341796875, \"Satisfaction\": 0.051361083984375, \"Shame\": 0.00974273681640625, \"Surprise (negative)\": 0.0218963623046875, \"Surprise (positive)\": 0.216064453125, \"Sympathy\": 0.021728515625, \"Tiredness\": 0.0173797607421875, \"Triumph\": 0.004520416259765625}",
                            "metadata": "{\"segments\": [{\"content\": \"Hello.\", \"embedding\": [0.6181640625, 0.1763916015625, -30.921875, 1.2705078125, 0.927734375, 0.63720703125, 2.865234375, 0.1080322265625, 0.2978515625, 1.0107421875, 1.34375, 0.74560546875, 0.416259765625, 0.99462890625, -0.333740234375, 0.361083984375, -1.388671875, 1.0107421875, 1.3173828125, 0.55615234375, 0.541015625, -0.1837158203125, 1.697265625, 0.228515625, 2.087890625, -0.311767578125, 0.053680419921875, 1.3349609375, 0.95068359375, 0.00441741943359375, 0.705078125, 1.8916015625, -0.939453125, 0.93701171875, -0.28955078125, 1.513671875, 0.5595703125, 1.0126953125, -0.1624755859375, 1.4072265625, -0.28857421875, -0.4560546875, -0.1500244140625, -0.1102294921875, -0.222412109375, 0.8779296875, 1.275390625, 1.6689453125, 0.80712890625, -0.34814453125, -0.325439453125, 0.412841796875, 0.81689453125, 0.55126953125, 1.671875, 0.6611328125, 0.7451171875, 1.50390625, 1.0224609375, -1.671875, 0.7373046875, 2.1328125, 2.166015625, 0.41015625, -0.127685546875, 1.9345703125, -4.2734375, 0.332275390625, 0.26171875, 0.76708984375, 0.2685546875, 0.468017578125, 1.208984375, -1.517578125, 1.083984375, 0.84814453125, 1.0244140625, -0.0072174072265625, 1.34375, 1.0712890625, 1.517578125, -0.52001953125, 0.59228515625, 0.8154296875, -0.951171875, -0.07757568359375, 1.3330078125, 1.125, 0.61181640625, 1.494140625, 0.357421875, 1.1796875, 1.482421875, 0.8046875, 0.1536865234375, 1.8076171875, 0.68115234375, -15.171875, 1.2294921875, 0.319091796875, 0.499755859375, 1.5771484375, 0.94677734375, -0.2490234375, 0.88525390625, 3.47265625, 0.75927734375, 0.71044921875, 1.2333984375, 1.4169921875, -0.56640625, -1.8095703125, 1.37109375, 0.428955078125, 1.89453125, -0.39013671875, 0.1734619140625, 1.5595703125, -1.2294921875, 2.552734375, 0.58349609375, 0.2156982421875, -0.00984954833984375, -0.6865234375, -0.0272979736328125, -0.2264404296875, 2.853515625, 1.3896484375, 0.52978515625, 0.783203125, 3.0390625, 0.75537109375, 0.219970703125, 0.384521484375, 0.385986328125, 2.0546875, -0.10443115234375, 1.5146484375, 1.4296875, 1.9716796875, 1.1318359375, 0.31591796875, 0.338623046875, 1.654296875, -0.88037109375, -0.21484375, 1.45703125, 1.0380859375, -0.52294921875, -0.47802734375, 0.1650390625, 1.2392578125, -1.138671875, 0.56787109375, 1.318359375, 0.4287109375, 0.1981201171875, 2.4375, 0.281005859375, 0.89404296875, -0.1552734375, 0.6474609375, -0.08331298828125, 0.00740814208984375, -0.045501708984375, -0.578125, 2.02734375, 0.59228515625, 0.35693359375, 1.2919921875, 1.22265625, 1.0537109375, 0.145263671875, 1.05859375, -0.369140625, 0.207275390625, 0.78857421875, 0.599609375, 0.99072265625, 0.24462890625, 1.26953125, 0.08404541015625, 1.349609375, 0.73291015625, 1.3212890625, 0.388916015625, 1.0869140625, 0.9931640625, -1.5673828125, 0.0462646484375, 0.650390625, 0.253662109375, 0.58251953125, 1.8134765625, 0.8642578125, 2.591796875, 0.7314453125, 0.85986328125, 0.5615234375, 0.9296875, 0.04144287109375, 1.66015625, 1.99609375, 1.171875, 1.181640625, 1.5126953125, 0.0224456787109375, 0.58349609375, -1.4931640625, 0.81884765625, 0.732421875, -0.6455078125, -0.62451171875, 1.7802734375, 0.01526641845703125, -0.423095703125, 0.461669921875, 4.87890625, 1.2392578125, -0.6953125, 0.6689453125, 0.62451171875, -1.521484375, 1.7685546875, 0.810546875, 0.65478515625, 0.26123046875, 1.6396484375, 0.87548828125, 1.7353515625, 2.046875, 1.5634765625, 0.69384765625, 1.375, 0.8916015625, 1.0107421875, 0.1304931640625, 2.009765625, 0.06402587890625, -0.08428955078125, 0.04351806640625, -1.7529296875, 2.02734375, 3.521484375, 0.404541015625, 1.6337890625, -0.276611328125, 0.8837890625, -0.1287841796875, 0.91064453125, 0.8193359375, 0.701171875, 0.036529541015625, 1.26171875, 1.0478515625, -0.1422119140625, 1.0634765625, 0.61083984375, 1.3505859375, 1.208984375, 0.57275390625, 1.3623046875, 2.267578125, 0.484375, 0.9150390625, 0.56787109375, -0.70068359375, 0.27587890625, -0.70654296875, 0.8466796875, 0.57568359375, 1.6162109375, 0.87939453125, 2.248046875, -0.5458984375, 1.7744140625, 1.328125, 1.232421875, 0.6806640625, 0.9365234375, 1.052734375, -1.08984375, 1.8330078125, -0.4033203125, 1.0673828125, 0.297607421875, 1.5703125, 1.67578125, 1.34765625, 2.8203125, 2.025390625, -0.48583984375, 0.7626953125, 0.01007843017578125, 1.435546875, 0.007205963134765625, 0.05157470703125, -0.9853515625, 0.26708984375, 1.16796875, 1.2041015625, 1.99609375, -0.07916259765625, 1.244140625, -0.32080078125, 0.6748046875, 0.419921875, 1.3212890625, 1.291015625, 0.599609375, 0.0550537109375, 0.9599609375, 0.93505859375, 0.111083984375, 1.302734375, 0.0833740234375, 2.244140625, 1.25390625, 1.6015625, 0.58349609375, 1.7568359375, -0.263427734375, -0.019866943359375, -0.24658203125, -0.1871337890625, 0.927734375, 0.62255859375, 0.275146484375, 0.79541015625, 1.1796875, 1.1767578125, -0.26123046875, -0.268310546875, 1.8994140625, 1.318359375, 2.1875, 0.2469482421875, 1.41015625, 0.03973388671875, 1.2685546875, 1.1025390625, 0.9560546875, 0.865234375, -1.92578125, 1.154296875, 0.389892578125, 1.130859375, 0.95947265625, 0.72314453125, 2.244140625, 0.048553466796875, 0.626953125, 0.42919921875, 0.82275390625, 0.311767578125, -0.320556640625, 0.01041412353515625, 0.1483154296875, 0.10809326171875, -0.3173828125, 1.1337890625, -0.8642578125, 1.4033203125, 0.048828125, 1.1787109375, 0.98779296875, 1.818359375, 1.1552734375, 0.6015625, 1.2392578125, -1.2685546875, 0.39208984375, 0.83251953125, 0.224365234375, 0.0019989013671875, 0.87548828125, 1.6572265625, 1.107421875, 0.434814453125, 1.8251953125, 0.442626953125, 1.2587890625, 0.09320068359375, -0.896484375, 1.8017578125, 1.451171875, -0.0755615234375, 0.6083984375, 2.06640625, 0.673828125, -0.33740234375, 0.192138671875, 0.21435546875, 0.80224609375, -1.490234375, 0.9501953125, 0.86083984375, -0.40283203125, 4.109375, 2.533203125, 1.2529296875, 0.8271484375, 0.225830078125, 1.0478515625, -1.9755859375, 0.841796875, 0.392822265625, 0.525390625, 0.33935546875, -0.79443359375, 0.71630859375, 0.97998046875, -0.175537109375, 0.97705078125, 1.705078125, 0.29638671875, 0.68359375, 0.54150390625, 0.435791015625, 0.99755859375, -0.369140625, 1.009765625, -0.140380859375, 0.426513671875, 0.189697265625, 1.8193359375, 1.1201171875, -0.5009765625, -0.331298828125, 0.759765625, -0.09442138671875, 0.74609375, -1.947265625, 1.3544921875, -3.935546875, 2.544921875, 1.359375, 0.1363525390625, 0.79296875, 0.79931640625, -0.3466796875, 1.1396484375, -0.33447265625, 2.0078125, -0.241455078125, 0.6318359375, 0.365234375, 0.296142578125, 0.830078125, 1.0458984375, 0.5830078125, 0.61572265625, 14.0703125, -2.0078125, -0.381591796875, 1.228515625, 0.08282470703125, -0.67822265625, -0.04339599609375, 0.397216796875, 0.1656494140625, 0.137451171875, 0.244873046875, 1.1611328125, -1.3818359375, 0.8447265625, 1.171875, 0.36328125, 0.252685546875, 0.1197509765625, 0.232177734375, -0.020172119140625, 0.64404296875, -0.01100921630859375, -1.9267578125, 0.222412109375, 0.56005859375, 1.3046875, 1.1630859375, 1.197265625, 1.02734375, 1.6806640625, -0.043731689453125, 1.4697265625, 0.81201171875, 1.5390625, 1.240234375, -0.7353515625, 1.828125, 1.115234375, 1.931640625, -0.517578125, 0.77880859375, 1.0546875, 0.95361328125, 3.42578125, 0.0160369873046875, 0.875, 0.56005859375, 1.2421875, 1.986328125, 1.4814453125, 0.0948486328125, 1.115234375, 0.00665283203125, 2.09375, 0.3544921875, -0.52783203125, 1.2099609375, 0.45068359375, 0.65625, 0.1112060546875, 1.0751953125, -0.9521484375, -0.30029296875, 1.4462890625, 2.046875, 3.212890625, 1.68359375, 1.07421875, -0.5263671875, 0.74560546875, 1.37890625, 0.15283203125, 0.2440185546875, 0.62646484375, -0.1280517578125, 0.7646484375, -0.515625, -0.35693359375, 1.2958984375, 0.96923828125, 0.58935546875, 1.3701171875, 1.0673828125, 0.2337646484375, 0.93115234375, 0.66357421875, 6.0, 1.1025390625, -0.51708984375, -0.38330078125, 0.7197265625, 0.246826171875, -0.45166015625, 1.9521484375, 0.5546875, 0.08807373046875, 0.18505859375, 0.8857421875, -0.57177734375, 0.251708984375, 0.234375, 2.57421875, 0.9599609375, 0.5029296875, 0.10382080078125, 0.08331298828125, 0.66748046875, -0.349609375, 1.287109375, 0.259765625, 2.015625, 2.828125, -0.3095703125, -0.164306640625, -0.3408203125, 0.486572265625, 0.8466796875, 1.9130859375, 0.09088134765625, 0.66552734375, 0.00972747802734375, -0.83154296875, 1.755859375, 0.654296875, 0.173828125, 0.27587890625, -0.47607421875, -0.264404296875, 0.7529296875, 0.6533203125, 0.7275390625, 0.499755859375, 0.833984375, -0.44775390625, -0.05078125, -0.454833984375, 0.75439453125, 0.68505859375, 0.210693359375, -0.283935546875, -0.53564453125, 0.96826171875, 0.861328125, -3.33984375, -0.26171875, 0.77734375, 0.26513671875, -0.14111328125, -0.042236328125, -0.84814453125, 0.2137451171875, 0.94921875, 0.65185546875, -0.5380859375, 0.1529541015625, -0.360595703125, -0.0333251953125, -0.69189453125, 0.8974609375, 0.7109375, 0.81494140625, -0.259521484375, 1.1904296875, 0.62158203125, 1.345703125, 0.89404296875, 0.70556640625, 1.0673828125, 1.392578125, 0.5068359375, 0.962890625, 0.736328125, 1.55078125, 0.50390625, -0.398681640625, 2.361328125, 0.345947265625, -0.61962890625, 0.330078125, 0.75439453125, -0.673828125, -0.2379150390625, 1.5673828125, 1.369140625, 0.1119384765625, -0.1834716796875, 1.4599609375, -0.77587890625, 0.5556640625, 0.09954833984375, 0.0285186767578125, 0.58935546875, -0.501953125, 0.212890625, 0.02679443359375, 0.1715087890625, 0.03466796875, -0.564453125, 2.029296875, 2.45703125, -0.72216796875, 2.138671875, 0.50830078125, -0.09356689453125, 0.230224609375, 1.6943359375, 1.5126953125, 0.39453125, 0.411376953125, 1.07421875, -0.8046875, 0.51416015625, 0.2271728515625, -0.283447265625, 0.38427734375, 0.73388671875, 0.6962890625, 1.4990234375, 0.02813720703125, 0.40478515625, 1.2451171875, 1.1162109375, -5.5703125, 0.76171875, 0.322021484375, 1.0361328125, 1.197265625, 0.1163330078125, 0.2425537109375, 1.5595703125, 1.5791015625, -0.0921630859375, 0.484619140625, 1.9052734375, 5.31640625, 1.6337890625, 0.95947265625, -0.1751708984375, 0.466552734375, 0.8330078125, 1.03125, 0.2044677734375, 0.31298828125, -1.1220703125, 0.5517578125, 0.93505859375, 0.45166015625, 1.951171875, 0.65478515625, 1.30859375, 1.0859375, 0.56494140625, 2.322265625, 0.242919921875, 1.81640625, -0.469970703125, -0.841796875, 0.90869140625, 1.5361328125, 0.923828125, 1.0595703125, 0.356689453125, -0.46142578125, 2.134765625, 1.3037109375, -0.32373046875, -9.2265625, 0.4521484375, 0.88037109375, -0.53955078125, 0.96484375, 0.7705078125, 0.84521484375, 1.580078125, -0.1448974609375, 0.7607421875, 1.0166015625, -0.086669921875, 1.611328125, 0.05938720703125, 0.5078125, 0.8427734375, 2.431640625, 0.66357421875, 3.203125, 0.132080078125, 0.461181640625, 0.779296875, 1.9482421875, 1.8720703125, 0.845703125, -1.3837890625, -0.138916015625, 0.35546875, 0.2457275390625, 0.75341796875, 1.828125, 1.4169921875, 0.60791015625, 1.0068359375, 1.109375, 0.484130859375, -0.302001953125, 0.4951171875, 0.802734375, 1.9482421875, 0.916015625, 0.1646728515625, 2.599609375, 1.7177734375, -0.2374267578125, 0.98046875, 0.39306640625, -1.1396484375, 1.6533203125, 0.375244140625], \"scores\": [0.09906005859375, 0.12213134765625, 0.05035400390625, 0.16552734375, 0.0037384033203125, 0.010101318359375, 0.058197021484375, 0.10552978515625, 0.1141357421875, 0.115234375, 0.00444793701171875, 0.00812530517578125, 0.0343017578125, 0.009002685546875, 0.087158203125, 0.00818634033203125, 0.003238677978515625, 0.024169921875, 0.00702667236328125, 0.00936126708984375, 0.00632476806640625, 0.0293731689453125, 0.01800537109375, 0.0088348388671875, 0.013397216796875, 0.02557373046875, 0.12109375, 0.004413604736328125, 0.016571044921875, 0.00274658203125, 0.2142333984375, 0.29638671875, 0.16015625, 0.007843017578125, 0.007160186767578125, 0.00508880615234375, 0.054229736328125, 0.048736572265625, 0.026397705078125, 0.0265350341796875, 0.051361083984375, 0.018310546875, 0.00974273681640625, 0.0218963623046875, 0.216064453125, 0.021728515625, 0.0173797607421875, 0.004520416259765625], \"stoks\": [52, 52, 52, 52, 52, 41, 41, 374, 303, 303, 303, 427], \"time\": {\"begin_ms\": 640, \"end_ms\": 1140}}]}"
                          },
                          {
                            "id": "7645a0d1-2e64-410d-83a8-b96040432e9a",
                            "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                            "timestamp": 1716244957031,
                            "role": "AGENT",
                            "type": "AGENT_MESSAGE",
                            "message_text": "Hello!",
                            "emotion_features": "{\"Admiration\": 0.044921875, \"Adoration\": 0.0253753662109375, \"Aesthetic Appreciation\": 0.03265380859375, \"Amusement\": 0.118408203125, \"Anger\": 0.06719970703125, \"Anxiety\": 0.0411376953125, \"Awe\": 0.03802490234375, \"Awkwardness\": 0.056549072265625, \"Boredom\": 0.04217529296875, \"Calmness\": 0.08709716796875, \"Concentration\": 0.070556640625, \"Confusion\": 0.06964111328125, \"Contemplation\": 0.0343017578125, \"Contempt\": 0.037689208984375, \"Contentment\": 0.059417724609375, \"Craving\": 0.01132965087890625, \"Desire\": 0.01406097412109375, \"Determination\": 0.1143798828125, \"Disappointment\": 0.051177978515625, \"Disgust\": 0.028594970703125, \"Distress\": 0.054901123046875, \"Doubt\": 0.04638671875, \"Ecstasy\": 0.0258026123046875, \"Embarrassment\": 0.0222015380859375, \"Empathic Pain\": 0.015777587890625, \"Entrancement\": 0.0160980224609375, \"Envy\": 0.0163421630859375, \"Excitement\": 0.129638671875, \"Fear\": 0.03125, \"Guilt\": 0.01483917236328125, \"Horror\": 0.0194549560546875, \"Interest\": 0.1341552734375, \"Joy\": 0.0738525390625, \"Love\": 0.0216522216796875, \"Nostalgia\": 0.0210418701171875, \"Pain\": 0.020721435546875, \"Pride\": 0.05499267578125, \"Realization\": 0.0728759765625, \"Relief\": 0.04052734375, \"Romance\": 0.0129241943359375, \"Sadness\": 0.0254669189453125, \"Satisfaction\": 0.07159423828125, \"Shame\": 0.01495361328125, \"Surprise (negative)\": 0.05560302734375, \"Surprise (positive)\": 0.07965087890625, \"Sympathy\": 0.022247314453125, \"Tiredness\": 0.0194549560546875, \"Triumph\": 0.04107666015625}",
                            "metadata": ""
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/chat_groups/:id/events",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {
                      "page_size": 0,
                      "page_number": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.chat_groups.list_chat_group_events(\n        id=\"697056f0-6c7e-487d-9bd8-9c19df79f05f\",\n        page_number=0,\n        page_size=3,\n        ascending_order=True,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.list_chat_group_events(\n    id=\"697056f0-6c7e-487d-9bd8-9c19df79f05f\",\n    page_number=0,\n    page_size=3,\n    ascending_order=True,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.listChatGroupEvents(\"697056f0-6c7e-487d-9bd8-9c19df79f05f\", {\n    pageNumber: 0,\n    pageSize: 3,\n    ascendingOrder: true\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a paginated list of **Chat** events associated with a **Chat Group**.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-audio",
                "migratedFromUrlSlugs": ["get-chat-group-audio"],
                "method": "GET",
                "id": "get-audio",
                "originalEndpointId": "endpoint_chatGroups.get-audio",
                "name": "Get chat group audio",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Identifier for a chat. Formatted as a UUID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/evi/chat_groups/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/audio"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page.",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10.",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Boolean to indicate if the results should be paginated in chronological order or reverse-chronological order. Defaults to true.",
                    "key": "ascending_order",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnChatGroupPagedAudioReconstructions"
                    }
                  },
                  "description": "Success"
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "Bad Request",
                    "name": "Chat Groups Get Audio Request Bad Request Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {}
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/chat_groups/369846cf-6ad5-404d-905e-a8acb5cdfc78/audio",
                    "pathParameters": {
                      "id": "369846cf-6ad5-404d-905e-a8acb5cdfc78"
                    },
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 10,
                      "ascending_order": true
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "369846cf-6ad5-404d-905e-a8acb5cdfc78",
                      "user_id": "e6235940-cfda-3988-9147-ff531627cf42",
                      "num_chats": 1,
                      "page_number": 0,
                      "page_size": 10,
                      "total_pages": 1,
                      "pagination_direction": "ASC",
                      "audio_reconstructions_page": [
                        {
                          "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                          "user_id": "e6235940-cfda-3988-9147-ff531627cf42",
                          "status": "COMPLETE",
                          "filename": "e6235940-cfda-3988-9147-ff531627cf42/470a49f6-1dec-4afe-8b61-035d3b2d63b0/reconstructed_audio.mp4",
                          "modified_at": 1729875432555,
                          "signed_audio_url": "https://storage.googleapis.com/...etc.",
                          "signed_url_expiration_timestamp_millis": 1730232816964
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.chat_groups.get_audio(\n        id=\"369846cf-6ad5-404d-905e-a8acb5cdfc78\",\n        page_number=0,\n        page_size=10,\n        ascending_order=True,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.get_audio(\n    id=\"369846cf-6ad5-404d-905e-a8acb5cdfc78\",\n    page_number=0,\n    page_size=10,\n    ascending_order=True,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.getAudio(\"369846cf-6ad5-404d-905e-a8acb5cdfc78\", {\n    pageNumber: 0,\n    pageSize: 10,\n    ascendingOrder: true\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "369846cf-6ad5-404d-905e-a8acb5cdfc78",
                        "user_id": "e6235940-cfda-3988-9147-ff531627cf42",
                        "num_chats": 1,
                        "page_number": 0,
                        "page_size": 10,
                        "total_pages": 1,
                        "pagination_direction": "ASC",
                        "audio_reconstructions_page": [
                          {
                            "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                            "user_id": "e6235940-cfda-3988-9147-ff531627cf42",
                            "status": "COMPLETE",
                            "filename": "e6235940-cfda-3988-9147-ff531627cf42/470a49f6-1dec-4afe-8b61-035d3b2d63b0/reconstructed_audio.mp4",
                            "modified_at": 1729875432555,
                            "signed_audio_url": "https://storage.googleapis.com/...etc.",
                            "signed_url_expiration_timestamp_millis": 1730232816964
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v0/evi/chat_groups/:id/audio",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {
                      "page_number": 0,
                      "page_size": 0
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.7.4",
                          "package": "hume"
                        },
                        "async_client": "import asyncio\n\nfrom hume import AsyncHumeClient\n\nclient = AsyncHumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.empathic_voice.chat_groups.get_audio(\n        id=\"369846cf-6ad5-404d-905e-a8acb5cdfc78\",\n        page_number=0,\n        page_size=10,\n        ascending_order=True,\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.get_audio(\n    id=\"369846cf-6ad5-404d-905e-a8acb5cdfc78\",\n    page_number=0,\n    page_size=10,\n    ascending_order=True,\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.4",
                          "package": "hume"
                        },
                        "client": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.getAudio(\"369846cf-6ad5-404d-905e-a8acb5cdfc78\", {\n    pageNumber: 0,\n    pageSize: 10,\n    ascendingOrder: true\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "string",
                        "message": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Fetches a paginated list of audio for each **Chat** within the specified **Chat Group**. For more details, see our guide on audio reconstruction [here](/docs/empathic-voice-interface-evi/faq#can-i-access-the-audio-of-previous-conversations-with-evi).",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "chat-groups",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_chat": {
            "subpackageId": "subpackage_chat",
            "name": "chat",
            "endpoints": [],
            "types": ["type_chat:SubscribeEvent", "type_chat:PublishEvent"],
            "subpackages": [],
            "urlSlug": "chat",
            "webhooks": [],
            "websockets": [
              {
                "urlSlug": "chat",
                "auth": false,
                "headers": [],
                "messages": [
                  {
                    "type": "subscribe",
                    "origin": "server",
                    "body": {
                      "type": "reference",
                      "value": {
                        "type": "id",
                        "value": "type_chat:SubscribeEvent"
                      }
                    }
                  },
                  {
                    "type": "publish",
                    "origin": "client",
                    "body": {
                      "type": "reference",
                      "value": {
                        "type": "id",
                        "value": "type_chat:PublishEvent"
                      }
                    }
                  }
                ],
                "defaultEnvironment": "Default",
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "wss://api.hume.ai"
                  }
                ],
                "id": "chat",
                "name": "Chat",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/evi/chat"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The unique identifier for an EVI configuration.\n\nInclude this ID in your connection request to equip EVI with the Prompt, Language Model, Voice, and Tools associated with the specified configuration. If omitted, EVI will apply [default configuration settings](/docs/empathic-voice-interface-evi/configuration#default-configuration).\n\nFor help obtaining this ID, see our [Configuration Guide](/docs/empathic-voice-interface-evi/configuration).",
                    "key": "config_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The version number of the EVI configuration specified by the `config_id`.\n\nConfigs, as well as Prompts and Tools, are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nInclude this parameter to apply a specific version of an EVI configuration. If omitted, the latest version will be applied.",
                    "key": "config_version",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The unique identifier for a Chat Group. Use this field to preserve context from a previous Chat session.\n\nA Chat represents a single session from opening to closing a WebSocket connection. In contrast, a Chat Group is a series of resumed Chats that collectively represent a single conversation spanning multiple sessions. Each Chat includes a Chat Group ID, which is used to preserve the context of previous Chat sessions when starting a new one.\n\nIncluding the Chat Group ID in the `resumed_chat_group_id` query parameter is useful for seamlessly resuming a Chat after unexpected network disconnections and for picking up conversations exactly where you left off at a later time. This ensures preserved context across multiple sessions.\n\nThere are three ways to obtain the Chat Group ID:\n\n- [Chat Metadata](/reference/empathic-voice-interface-evi/chat/chat#receive.Chat%20Metadata.type): Upon establishing a WebSocket connection with EVI, the user receives a Chat Metadata message. This message contains a `chat_group_id`, which can be used to resume conversations within this chat group in future sessions.\n\n- [List Chats endpoint](/reference/empathic-voice-interface-evi/chats/list-chats): Use the GET `/v0/evi/chats` endpoint to obtain the Chat Group ID of individual Chat sessions. This endpoint lists all available Chat sessions and their associated Chat Group ID.\n\n- [List Chat Groups endpoint](/reference/empathic-voice-interface-evi/chat-groups/list-chat-groups): Use the GET `/v0/evi/chat_groups` endpoint to obtain the Chat Group IDs of all Chat Groups associated with an API key. This endpoint returns a list of all available chat groups.",
                    "key": "resumed_chat_group_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Access token used for authenticating the client. If not provided, an `api_key` must be provided to authenticate.\n\nThe access token is generated using both an API key and a Secret key, which provides an additional layer of security compared to using just an API key.\n\nFor more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).",
                    "key": "access_token",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "API key used for authenticating the client. If not provided, an `access_token` must be provided to authenticate.\n\nFor more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies).",
                    "key": "api_key",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "examples": [
                  {
                    "path": "/v0/evi/chat",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "messages": [
                      {
                        "type": "publish",
                        "body": {
                          "type": "audio_input",
                          "data": "data"
                        }
                      },
                      {
                        "type": "subscribe",
                        "body": {
                          "type": "assistant_end"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        "auth": {
          "type": "header",
          "headerWireValue": "X-Hume-Api-Key",
          "nameOverride": "apiKey"
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      }
    },
    "files": {
      "6ff560d9-33d8-4d91-9429-c1ac24d8e49a": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/fonts/Fellix-Regular.woff2",
      "bd309bb6-6bf9-4c63-83f0-8889a34f84a3": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/fonts/Fellix-Medium.woff2",
      "ae634f55-9d56-4bbc-a617-f4fb07f78023": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/fonts/Fellix-SemiBold.woff2",
      "eff7f3bd-a1a6-4d2c-aa0b-4ef43973b7bd": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/fonts/FraktionMono-Regular.woff2",
      "f09f096b-a4f9-4206-962f-abd5cf5c9f89": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/fonts/FraktionMono-Bold.woff2",
      "edb7f379-635a-4178-8cc2-285e5b9cfa72": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/assets/logo-dark-mode.png",
      "788f49cc-c843-40d2-9823-96bf76cff63a": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/assets/logo-light-mode.png",
      "e6f3e161-b538-44b2-802a-0fdae539fc59": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/assets/favicon.ico",
      "9a5f7f00-7394-4275-ac29-80df1a316720": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/introduction/img/portal-api-keys-page.png",
      "95cfb7c7-101b-49ae-b152-d05def227f40": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/introduction/img/portal-regenerate-api-keys.png",
      "c66ebe5c-4741-4da0-a1cc-89b56d4cb3ee": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/img/EVI-diagram.jpg",
      "d1ff67f5-c930-48a9-bd93-69cee461a3aa": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-from-scratch.png",
      "14ef76cd-deb6-4570-8747-2d160da7a05b": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-step1.png",
      "fe1dd673-d9cb-40ee-a8cc-3cfa16295cd5": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-step2.png",
      "ca3b55cb-65e4-41b7-a8de-cb0fde8a660a": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-step3.png",
      "e13463e2-af26-4184-8c3b-1a1d26c904f1": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-step4.png",
      "7db43fcf-097c-4eef-8bd3-57a478e6f053": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-step5.png",
      "4a84351a-527f-4242-892a-ceda0eac4543": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-success.png",
      "160f9852-b698-42dc-9a81-eb8bc51fc95c": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-playground.png",
      "476141d9-de6f-41e5-9e82-ef273f546a67": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-playground-event-message-and-timeout-options.png",
      "be0e15c9-c609-4d7e-a387-9b7f80e0a39f": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-edit.png",
      "a3672980-1b76-4be8-80d0-3199b434ffc1": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-id.png",
      "4e8278cf-7cdd-4def-94cd-8bd382a314c7": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/voices/img/create-voice-step1.png",
      "44511f30-44b5-487c-84c0-f514331e885a": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/voices/img/create-voice-step2.png",
      "79ee9311-4092-468b-ba50-f540c68b5c87": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/voices/img/create-voice-step3.png",
      "840559bc-630b-495c-b784-d9a9f4ae7278": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/voices/img/create-voice-step4.png",
      "ea93e491-4b21-4424-b117-05298ef968e7": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/voices/img/use-voice-in-config.png",
      "86296715-6e31-4d0f-ab26-e50ddc3f5937": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/tool-call-diagram.jpg",
      "b766cb81-fda1-4dcd-9e89-a14873599be8": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/evi-tools-view.png",
      "5b77ab77-1977-4e4b-bb1c-73c619514841": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/tool-creation-view.png",
      "b53edd71-c647-472f-8f09-0d6760f7b715": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/create-config-view.png",
      "8a2fd7bc-237b-4c45-8778-ff6c581c1865": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/add-tool-view.png",
      "6c4b7e2f-bbaa-41a6-a117-4eccfccc5f14": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/add-weather-tool-view.png",
      "df010803-6b9b-4d5c-9653-f77984541fe2": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/invoke-weather-tool-view.png",
      "5229a458-92b9-4a88-befe-61ebfefde475": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/send-tool-response-view.png",
      "381cf624-cadd-4b23-b362-681b3a21d742": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/response-to-tool-call-view.png",
      "fb900efe-a052-41dd-ab04-1ec62e5fb4a5": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/web-search-config.png",
      "fc3dcfc4-5c54-443e-8f6b-a560c3c23b79": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/playground-web-search-1.png",
      "577ff3fb-b78f-43b9-8146-9790327b6de3": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/playground-web-search-2.png",
      "cbe4de6a-b30a-4ac7-86d2-d3e03a3a2f17": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/cancelling-function-call-1.png",
      "5a657dbb-088e-4153-a76c-b642876bd52a": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/cancelling-function-call-2.png",
      "c2f11656-1a45-4bb0-a549-1ec4b6d548a7": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/update-function-call-1.png",
      "4a57b472-a17c-49fe-b1a1-6624b7e4882d": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/update-function-call-2.png",
      "5b79312c-1bde-4511-8182-8468964ef5d3": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/tool-error-response.png",
      "7460059e-e05f-4bb6-8c72-718f3bac444a": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/empathic-voice-interface/img/CLM-diagram.jpg",
      "96cc2400-8ccf-421e-b1ff-ac588773fbeb": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/expression-measurement-api/img/measurement-diagram.jpg",
      "1348b7b3-d3ff-40a4-942d-d62095da42af": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/example-dataset-files.png",
      "96c60fce-4a5e-4f21-933f-860fc2f239b2": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/custom-models-page.png",
      "6f905df5-defa-4815-828d-f147cfbfdebe": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/custom-models-dataset-page.png",
      "b82f41cc-09c1-4f49-8d58-c9e8871ca5fe": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/create-dataset.png",
      "525eb0db-9ccc-43d5-bf14-9949bfc17280": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/upload-files-to-dataset.png",
      "9a266864-2bd3-4f05-920f-f919348978fd": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/confirm-labels.png",
      "680493d2-68be-46fc-b97b-fe180beacb3f": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/verify-uploads.png",
      "5f86dc8b-93e5-430c-8d62-914409a83771": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/select-training-dataset.png",
      "fc0807f2-5640-4049-9dd0-f738583f14bb": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/select-dataset-column.png",
      "4d11fa95-2998-40b0-ac17-e6b667ac2579": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/select-task-type.png",
      "5f75bf0d-2c68-4652-8a1c-2fea5d43f985": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/fill-in-custom-model-name-description.png",
      "dd8bf34b-5454-42e0-936d-d473c066e71f": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/training-confirmation-screen.png",
      "f2bd6a4a-a930-49f2-af73-15f0b80d2004": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/check-job-status.png",
      "320922f4-522c-432f-8543-b98a8b8859ae": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/expression-measurement-file-analysis.png",
      "cb4ed83a-6568-4af3-9655-9f81e79eeb70": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/select-custom-model.png",
      "7abf13c0-c766-499b-8a58-d86bf20a4a9a": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/select-image-for-analysis-by-custom-model.png",
      "6d903e07-e8f7-4dc0-a53d-28be360ed20e": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/custom-models-api/img/custom-model-job-summary.png",
      "99f7dba8-9bee-4697-86e0-6734a2755164": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18%3A35%3A07.088Z/docs/pages/documentation/resources/img/privacy.jpg"
    },
    "jsFiles": {},
    "filesV2": {
      "6ff560d9-33d8-4d91-9429-c1ac24d8e49a": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/fonts/Fellix-Regular.woff2"
      },
      "bd309bb6-6bf9-4c63-83f0-8889a34f84a3": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/fonts/Fellix-Medium.woff2"
      },
      "ae634f55-9d56-4bbc-a617-f4fb07f78023": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/fonts/Fellix-SemiBold.woff2"
      },
      "eff7f3bd-a1a6-4d2c-aa0b-4ef43973b7bd": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/fonts/FraktionMono-Regular.woff2"
      },
      "f09f096b-a4f9-4206-962f-abd5cf5c9f89": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/fonts/FraktionMono-Bold.woff2"
      },
      "edb7f379-635a-4178-8cc2-285e5b9cfa72": {
        "type": "image",
        "width": 820,
        "height": 186,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/assets/logo-dark-mode.png"
      },
      "788f49cc-c843-40d2-9823-96bf76cff63a": {
        "type": "image",
        "width": 820,
        "height": 186,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/assets/logo-light-mode.png"
      },
      "e6f3e161-b538-44b2-802a-0fdae539fc59": {
        "type": "image",
        "width": 32,
        "height": 32,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/assets/favicon.ico"
      },
      "9a5f7f00-7394-4275-ac29-80df1a316720": {
        "type": "image",
        "width": 3022,
        "height": 1888,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/introduction/img/portal-api-keys-page.png"
      },
      "95cfb7c7-101b-49ae-b152-d05def227f40": {
        "type": "image",
        "width": 3020,
        "height": 1886,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/introduction/img/portal-regenerate-api-keys.png"
      },
      "c66ebe5c-4741-4da0-a1cc-89b56d4cb3ee": {
        "type": "image",
        "width": 2166,
        "height": 2043,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/img/EVI-diagram.jpg"
      },
      "d1ff67f5-c930-48a9-bd93-69cee461a3aa": {
        "type": "image",
        "width": 3024,
        "height": 1886,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-from-scratch.png"
      },
      "14ef76cd-deb6-4570-8747-2d160da7a05b": {
        "type": "image",
        "width": 3024,
        "height": 1888,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-step1.png"
      },
      "fe1dd673-d9cb-40ee-a8cc-3cfa16295cd5": {
        "type": "image",
        "width": 3024,
        "height": 1888,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-step2.png"
      },
      "ca3b55cb-65e4-41b7-a8de-cb0fde8a660a": {
        "type": "image",
        "width": 3024,
        "height": 1888,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-step3.png"
      },
      "e13463e2-af26-4184-8c3b-1a1d26c904f1": {
        "type": "image",
        "width": 3024,
        "height": 1888,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-step4.png"
      },
      "7db43fcf-097c-4eef-8bd3-57a478e6f053": {
        "type": "image",
        "width": 3024,
        "height": 1888,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-step5.png"
      },
      "4a84351a-527f-4242-892a-ceda0eac4543": {
        "type": "image",
        "width": 3022,
        "height": 1888,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-success.png"
      },
      "160f9852-b698-42dc-9a81-eb8bc51fc95c": {
        "type": "image",
        "width": 3024,
        "height": 1888,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-playground.png"
      },
      "476141d9-de6f-41e5-9e82-ef273f546a67": {
        "type": "image",
        "width": 3024,
        "height": 1716,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-playground-event-message-and-timeout-options.png"
      },
      "be0e15c9-c609-4d7e-a387-9b7f80e0a39f": {
        "type": "image",
        "width": 3024,
        "height": 1716,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-edit.png"
      },
      "a3672980-1b76-4be8-80d0-3199b434ffc1": {
        "type": "image",
        "width": 3024,
        "height": 1888,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/configuration/img/evi-config-id.png"
      },
      "4e8278cf-7cdd-4def-94cd-8bd382a314c7": {
        "type": "image",
        "width": 3022,
        "height": 1886,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/voices/img/create-voice-step1.png"
      },
      "44511f30-44b5-487c-84c0-f514331e885a": {
        "type": "image",
        "width": 3022,
        "height": 1886,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/voices/img/create-voice-step2.png"
      },
      "79ee9311-4092-468b-ba50-f540c68b5c87": {
        "type": "image",
        "width": 3020,
        "height": 1886,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/voices/img/create-voice-step3.png"
      },
      "840559bc-630b-495c-b784-d9a9f4ae7278": {
        "type": "image",
        "width": 3022,
        "height": 1886,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/voices/img/create-voice-step4.png"
      },
      "ea93e491-4b21-4424-b117-05298ef968e7": {
        "type": "image",
        "width": 3020,
        "height": 1886,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/voices/img/use-voice-in-config.png"
      },
      "86296715-6e31-4d0f-ab26-e50ddc3f5937": {
        "type": "image",
        "width": 2412,
        "height": 1870,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/tool-call-diagram.jpg"
      },
      "b766cb81-fda1-4dcd-9e89-a14873599be8": {
        "type": "image",
        "width": 3024,
        "height": 1648,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/evi-tools-view.png"
      },
      "5b77ab77-1977-4e4b-bb1c-73c619514841": {
        "type": "image",
        "width": 3024,
        "height": 1648,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/tool-creation-view.png"
      },
      "b53edd71-c647-472f-8f09-0d6760f7b715": {
        "type": "image",
        "width": 3024,
        "height": 1646,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/create-config-view.png"
      },
      "8a2fd7bc-237b-4c45-8778-ff6c581c1865": {
        "type": "image",
        "width": 3024,
        "height": 1646,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/add-tool-view.png"
      },
      "6c4b7e2f-bbaa-41a6-a117-4eccfccc5f14": {
        "type": "image",
        "width": 3024,
        "height": 1646,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/add-weather-tool-view.png"
      },
      "df010803-6b9b-4d5c-9653-f77984541fe2": {
        "type": "image",
        "width": 3024,
        "height": 1648,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/invoke-weather-tool-view.png"
      },
      "5229a458-92b9-4a88-befe-61ebfefde475": {
        "type": "image",
        "width": 3024,
        "height": 1648,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/send-tool-response-view.png"
      },
      "381cf624-cadd-4b23-b362-681b3a21d742": {
        "type": "image",
        "width": 3024,
        "height": 1646,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/response-to-tool-call-view.png"
      },
      "fb900efe-a052-41dd-ab04-1ec62e5fb4a5": {
        "type": "image",
        "width": 3024,
        "height": 1646,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/web-search-config.png"
      },
      "fc3dcfc4-5c54-443e-8f6b-a560c3c23b79": {
        "type": "image",
        "width": 3024,
        "height": 1648,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/playground-web-search-1.png"
      },
      "577ff3fb-b78f-43b9-8146-9790327b6de3": {
        "type": "image",
        "width": 3024,
        "height": 1648,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/playground-web-search-2.png"
      },
      "cbe4de6a-b30a-4ac7-86d2-d3e03a3a2f17": {
        "type": "image",
        "width": 3024,
        "height": 1648,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/cancelling-function-call-1.png"
      },
      "5a657dbb-088e-4153-a76c-b642876bd52a": {
        "type": "image",
        "width": 3024,
        "height": 1648,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/cancelling-function-call-2.png"
      },
      "c2f11656-1a45-4bb0-a549-1ec4b6d548a7": {
        "type": "image",
        "width": 3024,
        "height": 1650,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/update-function-call-1.png"
      },
      "4a57b472-a17c-49fe-b1a1-6624b7e4882d": {
        "type": "image",
        "width": 3022,
        "height": 1632,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/update-function-call-2.png"
      },
      "5b79312c-1bde-4511-8182-8468964ef5d3": {
        "type": "image",
        "width": 3024,
        "height": 1648,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/tool-use/img/tool-error-response.png"
      },
      "7460059e-e05f-4bb6-8c72-718f3bac444a": {
        "type": "image",
        "width": 2413,
        "height": 1815,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/empathic-voice-interface/img/CLM-diagram.jpg"
      },
      "96cc2400-8ccf-421e-b1ff-ac588773fbeb": {
        "type": "image",
        "width": 2390,
        "height": 2043,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/expression-measurement-api/img/measurement-diagram.jpg"
      },
      "1348b7b3-d3ff-40a4-942d-d62095da42af": {
        "type": "image",
        "width": 848,
        "height": 404,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/example-dataset-files.png"
      },
      "96c60fce-4a5e-4f21-933f-860fc2f239b2": {
        "type": "image",
        "width": 2918,
        "height": 1524,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/custom-models-page.png"
      },
      "6f905df5-defa-4815-828d-f147cfbfdebe": {
        "type": "image",
        "width": 2934,
        "height": 1524,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/custom-models-dataset-page.png"
      },
      "b82f41cc-09c1-4f49-8d58-c9e8871ca5fe": {
        "type": "image",
        "width": 2938,
        "height": 1520,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/create-dataset.png"
      },
      "525eb0db-9ccc-43d5-bf14-9949bfc17280": {
        "type": "image",
        "width": 2936,
        "height": 1526,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/upload-files-to-dataset.png"
      },
      "9a266864-2bd3-4f05-920f-f919348978fd": {
        "type": "image",
        "width": 2938,
        "height": 1520,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/confirm-labels.png"
      },
      "680493d2-68be-46fc-b97b-fe180beacb3f": {
        "type": "image",
        "width": 2936,
        "height": 1524,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/verify-uploads.png"
      },
      "5f86dc8b-93e5-430c-8d62-914409a83771": {
        "type": "image",
        "width": 2936,
        "height": 1538,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/select-training-dataset.png"
      },
      "fc0807f2-5640-4049-9dd0-f738583f14bb": {
        "type": "image",
        "width": 2938,
        "height": 1536,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/select-dataset-column.png"
      },
      "4d11fa95-2998-40b0-ac17-e6b667ac2579": {
        "type": "image",
        "width": 2918,
        "height": 1538,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/select-task-type.png"
      },
      "5f75bf0d-2c68-4652-8a1c-2fea5d43f985": {
        "type": "image",
        "width": 2936,
        "height": 1540,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/fill-in-custom-model-name-description.png"
      },
      "dd8bf34b-5454-42e0-936d-d473c066e71f": {
        "type": "image",
        "width": 2936,
        "height": 1540,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/training-confirmation-screen.png"
      },
      "f2bd6a4a-a930-49f2-af73-15f0b80d2004": {
        "type": "image",
        "width": 2930,
        "height": 1534,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/check-job-status.png"
      },
      "320922f4-522c-432f-8543-b98a8b8859ae": {
        "type": "image",
        "width": 2932,
        "height": 1534,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/expression-measurement-file-analysis.png"
      },
      "cb4ed83a-6568-4af3-9655-9f81e79eeb70": {
        "type": "image",
        "width": 2936,
        "height": 1534,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/select-custom-model.png"
      },
      "7abf13c0-c766-499b-8a58-d86bf20a4a9a": {
        "type": "image",
        "width": 2936,
        "height": 1528,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/select-image-for-analysis-by-custom-model.png"
      },
      "6d903e07-e8f7-4dc0-a53d-28be360ed20e": {
        "type": "image",
        "width": 2938,
        "height": 1536,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/custom-models-api/img/custom-model-job-summary.png"
      },
      "99f7dba8-9bee-4697-86e0-6734a2755164": {
        "type": "image",
        "width": 1938,
        "height": 794,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/hume.docs.buildwithfern.com/2024-11-04T18:35:07.088Z/docs/pages/documentation/resources/img/privacy.jpg"
      }
    },
    "pages": {
      "docs/pages/documentation/introduction/welcome.mdx": {
        "markdown": "---\ntitle: Welcome to Hume AI\ndescription: >-\n  Hume AI builds AI models that enable technology to communicate with empathy\n  and learn to make people happy.\nslug: intro\n---\n\n<Callout intent='info'>\n  **EVI 2** is now available! Visit [platform.hume.ai](https://platform.hume.ai/) to chat with Hume's new voice-language foundation model and craft a custom empathic voice for your application.\n</Callout>\n\nHume AI builds AI models that enable technology to communicate with empathy and learn to make people happy.\n\nSo much of human communication—in-person, text, audio, or video—is shaped by emotional expression. These cues allow us to attend to each other's well-being. Our platform provides the APIs needed to ensure that technology, too, is guided by empathy and the pursuit of human well-being.\n\n### [Empathic Voice Interface](/docs/empathic-voice-interface-evi/overview)\n\nHume's Empathic Voice Interface (EVI) is the world's first emotionally intelligent voice AI. It is the only API that measures nuanced vocal modulations and responds to them using an empathic large language model (eLLM), which guides language and speech generation. Trained on millions of human interactions, our eLLM unites language modeling and text-to-speech with better EQ, prosody, end-of-turn detection, interruptibility, and alignment.\n\n### [Expression Measurement](/docs/expression-measurement/overview)\n\nHume's state-of-the-art expression measurement models for the voice, face, and language are built on 10+ years of research and advances in semantic space theory pioneered by Alan Cowen. Our expression measurement models are able to capture hundreds of dimensions of human expression in audio, video, and images.\n\n## API Reference\nAlongside our documentation, we provide a detailed API reference to help you integrate and use our products. It includes descriptions of all our REST and WebSocket endpoints, as well as request and response formats and usage examples.\n\n<Cards>\n<Card\n    title=\"Empathic Voice Interface (EVI)\"\n    icon=\"fa-waveform\"\n    href=\"/reference/empathic-voice-interface-evi/chat/chat\"\n  >\n    API that measures nuanced vocal modulations and responds to them using an\n    empathic large language model\n  </Card>\n  <Card\n    title=\"Expression Measurement\"\n    icon=\"ruler\"\n    href=\"/reference/expression-measurement-api/batch/list-jobs\"\n  >\n    Measure facial, vocal, and linguistic expressions\n  </Card>\n</Cards>\n\n## Example Code\n\nExplore our step-by-step guides for integrating Hume APIs. Our GitHub repositories include straightforward projects to help you get started quickly, with code snippets for specific functionalities. Additionally, you'll find open-source SDKs for popular languages and frameworks to support your development process across various environments.\n<Cards>\n<Card\n    title=\"hume-api-examples\"\n    icon=\"fa-brands fa-github\"\n    href=\"https://github.com/HumeAI/hume-api-examples\"\n  >\n    Discover sample code and projects to help you integrate our products quickly and efficiently\n  </Card>\n  <Card\n    title=\"GitHub Organization\"\n    icon=\"fa-solid fa-landmark-magnifying-glass\"\n    href=\"https://github.com/HumeAI/\"\n  >\n    Home to all our public-facing code, including Hume's open-source SDKs and examples\n  </Card>\n</Cards>\n\n## Get Support\n\nIf you have questions or run into challenges, we're here to help!\n\n<Cards>\n  <Card\n    title=\"Discord\"\n    icon=\"fa-brands fa-discord\"\n    href=\"https://link.hume.ai/discord\"\n  >\n    Join our Discord for answers to any technical questions\n  </Card>\n</Cards>\n\n---\n"
      },
      "docs/pages/documentation/introduction/getting-your-api-key.mdx": {
        "markdown": "---\ntitle: Getting your API keys\nexcerpt: >-\n  Learn how to obtain your API keys and understand the supported authentication\n  strategies for securely accessing Hume APIs.\n---\n\n## API keys\nEach Hume account is provisioned with an **API key** and **Secret key**. These keys are accessible from the Hume Portal.\n\n1. **Sign in**: Visit the [Hume Portal](https://platform.hume.ai/) and log in, or create an account.\n2. **View your API keys**: Navigate to the [API keys page](https://platform.hume.ai/settings/keys) to view your keys.\n\n<Frame caption=\"Open the API keys page from the left sidebar\">\n  <img src=\"file:9a5f7f00-7394-4275-ac29-80df1a316720\" alt=\"API keys view within the Hume portal\"/>\n</Frame>\n\n## Authentication strategies\n\nHume APIs support two authentication strategies:\n\n1. [**API key strategy**](/docs/introduction/api-key#api-key-authentication): Use API key authentication for making **server-side requests**. API key authentication allows you to make authenticated requests by supplying a single secret using the `X-Hume-Api-Key` header. Do not expose your API key in client-side code. All Hume APIs support this authentication strategy.\n\n2. [**Token strategy**](/docs/introduction/api-key#token-authentication):  Use Token authentication for making **client-side** requests. With Token authentication you first obtain a temporary **access token** by making a server-side request first, and use the access token when making client-side requests. This allows you to avoid exposing the API key to the client. Access tokens expire after 30 minutes, and you must obtain a new one. Today, only our [Empathic Voice Interface](https://dev.hume.ai/docs/empathic-voice-interface-evi/overview) (EVI) supports this authentication strategy.\n\n### API key authentication\n\nTo use API key authentication on **REST API** endpoints, include the API key in the `X-Hume-Api-Key` request header.\n<CodeBlocks>\n  <CodeBlock title=\"EVI\">\n    ```bash\n    curl https://api.hume.ai/v0/evi/{path} \\\n      --header 'Accept: application/json; charset=utf-8' \\\n      --header \"X-Hume-Api-Key: <YOUR API KEY>\"\n    ```\n  </CodeBlock>\n  <CodeBlock title=\"Expression Measurement\">\n    ```bash\n    curl https://api.hume.ai/v0/batch/jobs/{path} \\\n      --header 'Accept: application/json; charset=utf-8' \\\n      --header \"X-Hume-Api-Key: <YOUR API KEY>\"\n    ```\n  </CodeBlock>\n</CodeBlocks>\n\nFor **WebSocket** endpoints, include the API key as a query parameter in the URL.\n<CodeBlocks>\n  <CodeBlock title=\"EVI\">\n    ```TypeScript\n    const ws = new WebSocket(`wss://api.hume.ai/v0/evi/chat?api_key=${apiKey}`);\n    ```\n  </CodeBlock>\n  <CodeBlock title=\"Expression Measurement\">\n    ```TypeScript\n    const ws = new WebSocket(`wss://api.hume.ai/v0/stream/models?api_key=${apiKey}`);\n    ```\n  </CodeBlock>\n</CodeBlocks>\n\n### Token authentication\n\nTo use Token authentication you must first obtain an Access Token from the `POST /oauth2-cc/token` endpoint.\n\nThis is a unique endpoint that uses the [\"Basic\" authentication scheme](https://en.wikipedia.org/wiki/Basic_access_authentication), with your API key as the username and the Secret key as the password. This means you must concatenate your API key and Secret key, separated by a colon (`:`), base64 encode this value, and then put the result in the `Authorization` header of the request, prefixed with `Basic `.\n\nYou must also supply the `grant_type=client_credentials` parameter in the request body.\n\n<CodeBlocks>\n  <CodeBlock title='cURL'>\n    ```sh\n    # Assumes `HUME_API_KEY` and `HUME_SECRET_KEY` are defined as environment variables\n    response=$(curl -s 'https://api.hume.ai/oauth2-cc/token' \\\n      -u \"${HUME_API_KEY}:${HUME_SECRET_KEY}\" \\\n      -d 'grant_type=client_credentials')\n\n    # Uses `jq` to extract the access token from the JSON response body\n    accessToken=$(echo $response | jq -r '.access_token')\n    ```\n  </CodeBlock>\n  <CodeBlock title='TypeScript'>\n    ```typescript\n    import {fetchAccessToken} from 'hume';\n\n    // Reads `HUME_API_KEY` and `HUME_SECRET_KEY` from environment variables\n    const HUME_API_KEY = process.env.HUME_API_KEY;\n    const HUME_SECRET_KEY = process.env.HUME_SECRET_KEY;\n\n    const accessToken = await fetchAccessToken({\n      apiKey: HUME_API_KEY,\n      secretKey: HUME_SECRET_KEY\n    });\n    ```\n  </CodeBlock>\n  <CodeBlock title='Python'>\n    ```python\n    import os\n    import httpx\n    import base64\n    \n    # Reads `HUME_API_KEY` and `HUME_SECRET_KEY` from environment variables\n    HUME_API_KEY = os.getenv('HUME_API_KEY')\n    HUME_SECRET_KEY = os.getenv('HUME_SECRET_KEY');\n    \n    auth = f\"{HUME_API_KEY}:{HUME_SECRET_KEY}\"\n    encoded_auth = base64.b64encode(auth.encode()).decode()\n    resp = httpx.request(\n        method=\"POST\",\n        url=\"https://api.hume.ai/oauth2-cc/token\",\n        headers={\"Authorization\": f\"Basic {encoded_auth}\"},\n        data={\"grant_type\": \"client_credentials\"},\n    )\n    \n    access_token = resp.json()['access_token']\n    ```\n  </CodeBlock>\n</CodeBlocks>\n\nOn the client side, open an authenticated websocket by including the access token as a query parameter in the URL.\n\n<CodeBlock title=\"EVI\">\n  ```typescript\n  const ws = new WebSocket(`wss://api.hume.ai/v0/evi/chat?access_token=${accessToken}`);\n  ```\n</CodeBlock>\n\nOr, make a REST request by including the access token in the `Authorization` header.\n\n<CodeBlock title=\"EVI\">\n  ```typescript\n  fetch('https://api.hume.ai/v0/evi/chats', {\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n  ```\n</CodeBlock>\n\n<Callout intent='info'>\nThe Hume [Python](https://github.com/HumeAI/hume-python-sdk) and [TypeScript](https://github.com/HumeAI/hume-typescript-sdk) SDKs will use the API key authentication strategy if you provide only the API key, but will use the Token authentication strategy if you provide both the API key and Secret key.\n</Callout>\n\n### Regenerating API keys\n\nAPI keys can be regenerated by clicking the **Regenerate keys** button on the API keys page. This permanently invalidates the current keys, requiring you to update any applications using them.\n\n<Frame caption=\"Regenerate API keys confirmation message\">\n  <img src=\"file:95cfb7c7-101b-49ae-b152-d05def227f40\" alt=\"Regenerate API keys view within the Hume portal\"/>\n</Frame>\n\n---\n"
      },
      "docs/pages/documentation/introduction/support.mdx": {
        "markdown": "---\ntitle: Support\nexcerpt: Get help from the team at Hume\nslug: support\nredirects:\n  - /docs/support\n---\n## Discord\n\n[Join our Discord](https://link.hume.ai/discord) for answers to any technical questions.\n\n## Legal\n\nContact [legal@hume.ai](mailto:legal@hume.ai) for legal and data privacy inquires.\n\n## Billing\n\nEmail [billing@hume.ai](mailto:billing@hume.ai) for any questions or concerns about billing.\n\n## Contact us\n\nFor all other inquires, see [hume.ai/contact](https://hume.ai/contact).\n"
      },
      "docs/pages/documentation/empathic-voice-interface/overview.mdx": {
        "markdown": "---\ntitle: Empathic Voice Interface (EVI)\nexcerpt: >-\n  Hume's Empathic Voice Interface (EVI) is the world’s first emotionally\n  intelligent voice AI.\n---\n\n<Callout intent='info'>\n  **EVI 2** is now available! See the [EVI 2 page](/docs/empathic-voice-interface-evi/evi-2) to learn more and visit [platform.hume.ai](https://platform.hume.ai/) to start building with the latest features today.\n</Callout>\n\nHume's Empathic Voice Interface (EVI) is the world’s first emotionally intelligent voice AI. It accepts live audio input and returns both generated audio and transcripts augmented with measures of vocal expression. By processing the tune, rhythm, and timbre of speech, EVI unlocks a variety of new capabilities, like knowing when to speak and generating more empathic language with the right tone of voice. These features enable smoother and more satisfying voice-based interactions between humans and AI, opening new possibilities for personal AI, customer service, accessibility, robotics, immersive gaming, VR experiences, and much more.\n\nWe provide a suite of tools to integrate and customize EVI for your application, including a WebSocket API that handles audio and text transport, a REST API, and SDKs for TypeScript and Python to simplify integration into web and Python-based projects. Additionally, we provide open-source examples and a web widget as practical starting points for developers to explore and implement EVI's capabilities within their own projects.\n\n<Frame>\n  <img\n    src='file:c66ebe5c-4741-4da0-a1cc-89b56d4cb3ee'\n    alt='EVI communications flow diagram'\n  />\n</Frame>\n\n## Building with EVI\n\nThe main way to work with EVI is through a WebSocket connection that sends audio and receives responses in real-time. This enables fluid, bidirectional dialogue where users speak, EVI listens and analyzes their expressions, and EVI generates emotionally intelligent responses.\n\nEVI supports two authentication strategies. Learn more about them at the links below:\n- [API key authentication](/docs/introduction/api-key#api-key-authentication)\n- [Token authentication](/docs/introduction/api-key#token-authentication)\n\n<Callout type=\"info\">\nBoth methods require specifying the chosen authentication strategy and providing the corresponding key in the request parameters of the EVI WebSocket endpoint.\nLearn more about Hume's authentication strategies [here](/docs/introduction/api-key#authentication-strategies).\n</Callout>\n\nYou start a conversation by connecting to the WebSocket and streaming the user’s voice input to EVI. You can also send EVI text, and it will speak that text aloud.\n\nEVI will respond with:\n\n- The text of EVI’s reply\n- EVI’s expressive audio response\n- A transcript of the user's message along with their vocal expression measures\n- Messages if the user interrupts EVI\n- A message to let you know if EVI has finished responding\n- Error messages if issues arise\n\n## Overview of EVI features\n\n<table>\n  <tbody>\n    <tr>\n      <td rowSpan=\"4\"> Basic capabilities</td>\n      <td>Transcribes speech (ASR)</td>\n      <td>\n        Fast and accurate ASR in partnership with Deepgram returns a full transcript of the conversation, with Hume’s\n        expression measures tied to each sentence.\n      </td>\n    </tr>\n    <tr>\n      <td>Generates language responses (LLM)</td>\n      <td>\n        Rapid language generation with our eLLM, blended seamlessly with configurable partner APIs (OpenAI, Anthropic,\n        Fireworks).\n      </td>\n    </tr>\n    <tr>\n      <td>Generates voice responses (TTS)</td>\n      <td>Streaming speech generation via our proprietary expressive text-to-speech model.</td>\n    </tr>\n    <tr>\n      <td>Responds with low latency</td>\n      <td>Immediate response provided by the fastest models running together on one service.</td>\n    </tr>\n    <tr>\n      <td rowSpan=\"6\"> Empathic AI (eLLM) features</td>\n      <td>Responds at the right time</td>\n      <td>\n        Uses your tone of voice for state-of-the-art end-of-turn detection — the true bottleneck to responding rapidly\n        without interrupting you.\n      </td>\n    </tr>\n    <tr>\n      <td>Understands users’ prosody</td>\n      <td>\n        Provides streaming measurements of the tune, rhythm, and timbre of the user’s speech using Hume’s\n        <a href=\"https://www.hume.ai/products/speech-prosody-model\">prosody</a> model, integrated with our eLLM.\n      </td>\n    </tr>\n    <tr>\n      <td>Forms its own natural tone of voice</td>\n      <td>\n        Guided by the users’ prosody and language, our model responds with an empathic, naturalistic tone of voice,\n        matching the users’ nuanced “vibe” (calmness, interest, excitement, etc.). It responds to frustration with an\n        apologetic tone, to sadness with sympathy, and more.\n      </td>\n    </tr>\n    <tr>\n      <td>Responds to expression</td>\n      <td>\n        Powered by our empathic large language model (eLLM), EVI crafts responses that are not just intelligent but\n        attuned to what the user is expressing with their voice.\n      </td>\n    </tr>\n    <tr>\n      <td>Always interruptible</td>\n      <td>\n        Stops rapidly whenever users interject, listens, and responds with the right context based on where it left off.\n      </td>\n    </tr>\n    <tr>\n      <td>Aligned with well-being</td>\n      <td>\n        Trained on human reactions to optimize for positive expressions like happiness and satisfaction. EVI will\n        continue to learn from users’ reactions using our upcoming fine-tuning endpoint.\n      </td>\n    </tr>\n    <tr>\n      <td rowSpan=\"6\"> Developer tools</td>\n      <td>WebSocket API</td>\n      <td>Primary interface for real-time bidirectional interaction with EVI, handles audio and text transport.</td>\n    </tr>\n    <tr>\n      <td>REST API </td>\n      <td>\n        A configuration API that allows developers to customize their EVI - the system prompt, speaking rate, voice,\n        LLM, tools the EVI can use, and other options. The system prompt shapes an EVI’s behavior and its responses.\n      </td>\n    </tr>\n    <tr>\n      <td>TypeScript SDK</td>\n      <td>Encapsulates complexities of audio and WebSockets for seamless integration into web applications.</td>\n    </tr>\n    <tr>\n      <td>Python SDK</td>\n      <td>Simplifies the process of integrating EVI into any Python-based project.</td>\n    </tr>\n    <tr>\n      <td>Open source examples</td>\n      <td>Example repositories provide a starting point for developers and demonstrate EVI's capabilities.</td>\n    </tr>\n    <tr>\n      <td>Web widget </td>\n      <td>\n        An iframe widget that any developer can easily embed in their website, allowing users to speak to a\n        conversational AI voice about your content.\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n## API limits\n\n- **WebSocket connections limit**: limited to up to five (5) concurrent connections.\n- **WebSocket duration limit**: connections are subject to a default timeout after thirty (30) minutes, or after ten (10) minutes of user inactivity. Duration limits may be adjusted by specifying the [max_duration](/reference/empathic-voice-interface-evi/configs/create-config#request.body.timeouts.max_duration) and [inactivity](/reference/empathic-voice-interface-evi/configs/create-config#request.body.timeouts.inactivity) fields in your EVI configuration.\n- **WebSocket message payload size limit**: messages cannot exceed 16MB in size.\n- **Request rate limit**: HTTP requests (e.g. [configs endpoints](/reference/empathic-voice-interface-evi/configs/create-config)) are limited to fifty (50) requests per second.\n\n<Callout intent=\"info\">\n  To request an increase in your concurrent connection limit, please submit the \"Application to Increase EVI Concurrent Connections\" found in the EVI section of the [Profile Tab](https://platform.hume.ai/settings/profile).\n</Callout>\n\n---\n"
      },
      "docs/pages/documentation/empathic-voice-interface/quickstart/typescript.mdx": {
        "markdown": "---\ntitle: EVI TypeScript Quickstart Guide\nexcerpt: >-\n  A quickstart guide for implementing the Empathic Voice Interface (EVI) with\n  TypeScript.\n---\n\nThis guide provides instructions for integrating EVI into your TypeScript projects. It includes detailed steps for using EVI with Next.js (App Router),\nNext.js (Pages Router), and a standalone setup without any framework.\n\n<Callout intent='info'>\n  Kickstart your project with our pre-configured [Vercel template for the Empathic Voice\n  Interface](https://vercel.com/templates/next.js/empathic-voice-interface-starter). Install\n  with one click to instantly set up a ready-to-use project and start building with\n  TypeScript right away!\n</Callout>\n\n<Tabs>\n  <Tab title='Next.js (App Router)'>\n    This tutorial utilizes Hume’s React SDK to interact with EVI. It includes detailed steps for both the\n    **App Router** in Next.js and is broken down into four key components:\n\n    1. **Authentication**: Generate and use an access token to authenticate with EVI.\n    2. **Setting up context provider**: Set up the `<VoiceProvider/>`.\n    3. **Starting a chat and display messages**: Implement the functionality to start a chat with EVI and display messages.\n    4. **That's it!**: Audio playback and interruptions are handled for you.\n\n    <Callout intent='info'>\n      The Hume React SDK abstracts much of the logic for managing the WebSocket connection, as\n      well as capturing and preparing audio for processing. For a closer look at how the React\n      package manages these aspects of the integration, we invite you to explore the source code\n      here: [@humeai/voice-react](https://github.com/HumeAI/empathic-voice-api-js/tree/main/packages/react)\n    </Callout>\n\n    To see this code fully implemented within a frontend web application using the App Router from Next.js, visit this GitHub repository:\n    [evi-nextjs-app-router](https://github.com/HumeAI/hume-api-examples/tree/main/evi-next-js-app-router).\n\n    <Steps>\n      ### Prerequisites\n\n        Before you begin, you will need to have [an existing Next.js project set up using the App Router](https://nextjs.org/docs/getting-started/installation).\n\n      ### Authenticate\n\n      In order to make an authenticated connection we will first need to generate an access token. Doing so will\n      require your API key and Secret key. These keys can be obtained by logging into the portal and visiting the\n      [API keys page](https://platform.hume.ai/settings/keys).\n\n      <Callout intent='info'>\n        In the sample code below, the API key and Secret key have been saved to\n        environment variables. Avoid hard coding these values in your project to\n        prevent them from being leaked.\n      </Callout>\n\n      <CodeBlock title=\"React\">\n        ```tsx\n        // ./app/page.tsx\n        import ClientComponent from \"@/components/ClientComponent\";\n        import { fetchAccessToken } from \"hume\";\n\n        export default async function Page() {\n          const accessToken = await fetchAccessToken({\n            apiKey: String(process.env.HUME_API_KEY),\n            secretKey: String(process.env.HUME_SECRET_KEY),\n          });\n\n          if (!accessToken) {\n            throw new Error();\n          }\n\n          return <ClientComponent accessToken={accessToken} />;\n        }\n        ```\n      </CodeBlock>\n\n      ### Setup Context Provider\n\n      After fetching our access token we can pass it to our `ClientComponent`. First we set up the `<VoiceProvider/>` so that our `Messages` and `Controls` components can access the context. We also pass the access token to the `auth` prop of the `<VoiceProvider/>` for setting up the WebSocket connection.\n\n      <CodeBlock title=\"TypeScript\">\n        ```tsx\n        // ./components/ClientComponent.tsx\n        \"use client\";\n        import { VoiceProvider } from \"@humeai/voice-react\";\n        import Messages from \"./Messages\";\n        import Controls from \"./Controls\";\n\n        export default function ClientComponent({\n          accessToken,\n        }: {\n          accessToken: string;\n        }) {\n          return (\n            <VoiceProvider auth={{ type: \"accessToken\", value: accessToken }}>\n              <Messages />\n              <Controls />\n            </VoiceProvider>\n          );\n        }\n        ```\n      </CodeBlock>\n\n      ### Audio input\n\n     `<VoiceProvider/>` will handle the microphone and playback logic.\n\n      ### Starting session\n\n      In order to start a session, you can use the `connect` function. It is important that this event is attached to a user interaction event (like a click) so that the browser is capable of playing Audio.\n\n      <CodeBlock title=\"TypeScript\">\n        ```tsx\n        // ./components/Controls.tsx\n        \"use client\";\n        import { useVoice, VoiceReadyState } from \"@humeai/voice-react\";\n        export default function Controls() {\n          const { connect, disconnect, readyState } = useVoice();\n\n          if (readyState === VoiceReadyState.OPEN) {\n            return (\n              <button\n                onClick={() => {\n                  disconnect();\n                }}\n              >\n                End Session\n              </button>\n            );\n          }\n\n          return (\n            <button\n              onClick={() => {\n                connect()\n                  .then(() => {\n                    /* handle success */\n                  })\n                  .catch(() => {\n                    /* handle error */\n                  });\n              }}\n            >\n              Start Session\n            </button>\n          );\n        }\n        ```\n      </CodeBlock>\n\n      ### Displaying message history\n\n      To display the message history, we can use the `useVoice` hook to access the `messages` array. We can then map over the `messages` array to display the role (`Assistant` or `User`) and content of each message.\n\n      <CodeBlock title=\"TypeScript\">\n        ```tsx\n        // ./components/Messages.tsx\n        \"use client\";\n        import { useVoice } from \"@humeai/voice-react\";\n\n        export default function Messages() {\n          const { messages } = useVoice();\n\n          return (\n            <div>\n              {messages.map((msg, index) => {\n                if (msg.type === \"user_message\" || msg.type === \"assistant_message\") {\n                  return (\n                    <div key={msg.type + index}>\n                      <div>{msg.message.role}</div>\n                      <div>{msg.message.content}</div>\n                    </div>\n                  );\n                }\n\n                return null;\n              })}\n            </div>\n          );\n        }\n        ```\n      </CodeBlock>\n\n      ### Interrupt\n\n      This [Next.js example](https://github.com/HumeAI/hume-api-examples/tree/main/evi-next-js-app-router) will handle interruption events automatically!\n    </Steps>\n\n  </Tab>\n  <Tab title='Next.js (Pages Router)'>\n    This tutorial utilizes Hume’s React SDK to interact with EVI. It includes detailed steps for both the\n    **Pages Router** in Next.js and is broken down into four key components:\n\n    1. **Authentication**: Generate and use an access token to authenticate with EVI.\n    2. **Setting up context provider**: Set up the `<VoiceProvider/>`.\n    3. **Starting a chat and display messages**: Implement the functionality to start a chat with EVI and display messages.\n    4. **That's it!**: Audio playback and interruptions are handled for you.\n\n    <Callout intent='info'>\n      The Hume React SDK abstracts much of the logic for managing the WebSocket connection, as\n      well as capturing and preparing audio for processing. For a closer look at how the React\n      package manages these aspects of the integration, we invite you to explore the source code\n      here: [@humeai/voice-react](https://github.com/HumeAI/empathic-voice-api-js/tree/main/packages/react)\n    </Callout>\n\n    To see this code fully implemented within a frontend web application using the Pages Router from Next.js, visit this GitHub repository: [evi-nextjs-pages-router](https://github.com/HumeAI/hume-api-examples/tree/main/evi-next-js-pages-router).\n\n    <Steps>\n      ### Prerequisites\n\n      Before you begin, you will need to have [an existing Next.js project set up using the Pages Router](https://nextjs.org/docs/getting-started/installation).\n\n      ### Authenticate and Setup Context Provider\n\n      In order to make an authenticated connection we will first need to generate an access token. Doing so will\n      require your API key and Secret key. These keys can be obtained by logging into the portal and visiting the\n      [API keys page](https://platform.hume.ai/settings/keys).\n\n      <Callout intent='info'>\n        In the sample code below, the API key and Secret key have been saved to\n        environment variables. Avoid hard coding these values in your project to\n        prevent them from being leaked.\n      </Callout>\n\n        <CodeBlock title=\"React\">\n          ```tsx\n          // ./pages/index.tsx\n          import Controls from \"@/components/Controls\";\n          import Messages from \"@/components/Messages\";\n          import { fetchAccessToken } from \"hume\";\n          import { VoiceProvider } from \"@humeai/voice-react\";\n          import { InferGetServerSidePropsType } from \"next\";\n\n          export const getServerSideProps = async () => {\n            const accessToken = await fetchAccessToken({\n              apiKey: String(process.env.HUME_API_KEY),\n              secretKey: String(process.env.HUME_SECRET_KEY),\n            });\n\n            if (!accessToken) {\n              return {\n                redirect: {\n                  destination: \"/error\",\n                  permanent: false,\n                },\n              };\n            }\n\n            return {\n              props: {\n                accessToken,\n              },\n            };\n          };\n\n          type PageProps = InferGetServerSidePropsType<typeof getServerSideProps>;\n\n          export default function Page({ accessToken }: PageProps) {\n            return (\n              <VoiceProvider auth={{ type: \"accessToken\", value: accessToken }}>\n                <Messages />\n                <Controls />\n              </VoiceProvider>\n            );\n          }\n          ```\n        </CodeBlock>\n\n      ### Audio input\n\n     `<VoiceProvider/>` is designed to manage microphone inputs and audio playback. It abstracts the complexities of audio processing to allow developers to focus on developing interactive voice-driven functionalities.\n\n     For a closer look at how `<VoiceProvider/>` processes audio inputs and controls playback, you can view the source code [here](https://github.com/HumeAI/empathic-voice-api-js/blob/main/packages/react/src/lib/VoiceProvider.tsx).\n\n     ### Starting session\n\n     In order to start a session, you can use the `connect` function. It is important that this event is attached to a user interaction event (like a click) so that the browser is capable of playing Audio.\n\n      <CodeBlock title=\"TypeScript\">\n        ```tsx\n        // ./components/Controls.tsx\n        import { useVoice, VoiceReadyState } from \"@humeai/voice-react\";\n        export default function Controls() {\n          const { connect, disconnect, readyState } = useVoice();\n\n          if (readyState === VoiceReadyState.OPEN) {\n            return (\n              <button\n                onClick={() => {\n                  disconnect();\n                }}\n              >\n                End Session\n              </button>\n            );\n          }\n\n          return (\n            <button\n              onClick={() => {\n                connect()\n                  .then(() => {\n                    /* handle success */\n                  })\n                  .catch(() => {\n                    /* handle error */\n                  });\n              }}\n            >\n              Start Session\n            </button>\n          );\n        }\n        ```\n      </CodeBlock>\n\n      ### Displaying message history\n\n      To display the message history, we can use the `useVoice` hook to access the `messages` array. We can then map over the `messages` array to display the role (`Assistant` or `User`) and content of each message.\n\n      <CodeBlock title=\"TypeScript\">\n        ```tsx\n        // ./components/Messages.tsx\n        import { useVoice } from \"@humeai/voice-react\";\n\n        export default function Messages() {\n          const { messages } = useVoice();\n\n          return (\n            <div>\n              {messages.map((msg, index) => {\n                if (msg.type === \"user_message\" || msg.type === \"assistant_message\") {\n                  return (\n                    <div key={msg.type + index}>\n                      <div>{msg.message.role}</div>\n                      <div>{msg.message.content}</div>\n                    </div>\n                  );\n                }\n\n                return null;\n              })}\n            </div>\n          );\n        }\n        ```\n      </CodeBlock>\n\n      ### Interrupt\n\n      This [Next.js example](https://github.com/HumeAI/hume-api-examples/tree/main/evi-next-js-app-router) will handle interruption events automatically!\n    </Steps>\n\n  </Tab>\n  <Tab title='No Framework'>\n    This tutorial provides step-by-step instructions for implementing EVI using Hume’s\n    [TypeScript SDK](https://github.com/HumeAI/hume-typescript-sdk). This guide is divided into five key components:\n\n    1. **Authentication**: Authenticate your application with EVI using your credentials.\n    2. **Connecting to EVI**: Set up a secure WebSocket connection to interact with EVI.\n    3. **Capturing & recording audio**: Capture audio input and prepare it for processing.\n    4. **Audio playback**: Play back the processed audio output to the user.\n    5. **Interruption**: Manage and handle interruptions during the chat.\n\n    To see the full implementation within a frontend web application, visit our API examples repository on GitHub: [hume-evi-typescript-example](https://github.com/HumeAI/hume-api-examples/tree/main/evi-typescript-example).\n\n    <Steps>\n      ### Authenticate\n\n      In order to establish an authenticated connection we will first need to instantiate the Hume client with our API key and Secret key.\n      These keys can be obtained by logging into the portal and visiting the [API keys page](https://platform.hume.ai/settings/keys).\n\n      <Callout intent='info'>\n        In the sample code below, the API key and Secret key have been saved to environment\n        variables. Avoid hard coding these values in your project to prevent them from being\n        leaked.\n      </Callout>\n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        import { Hume, HumeClient } from 'hume';\n\n        // instantiate the Hume client and authenticate\n        const client = new HumeClient({\n          apiKey: import.meta.env.HUME_API_KEY || '',\n          secretKey: import.meta.env.HUME_SECRET_KEY || '',\n        });\n\n        ```\n\n      </CodeBlock>\n\n      When using our TypeScript SDK, the Access Token necessary to establish an authenticated connection with EVI is fetched and applied under the hood\n      after the Hume client is instantiated with your credientials.\n\n      ### Connect\n\n      With the Hume client instantiated with our credentials, we can now establish an authenticated WebSocket connection with EVI and define our WebSocket event handlers.\n      For now we will include placeholder event handlers to be updated in later steps.\n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        import { Hume, HumeClient } from 'hume';\n\n        // instantiate the Hume client and authenticate\n        const client = new HumeClient({\n          apiKey: import.meta.env.HUME_API_KEY || '',\n          secretKey: import.meta.env.HUME_SECRET_KEY || '',\n        });\n\n        // instantiates WebSocket and establishes an authenticated connection\n        const socket = await client.empathicVoice.chat.connect({\n          configId: import.meta.env.HUME_CONFIG_ID || null,\n        });\n\n        // define handler functions and assign them to the corresponding WebSocket event handlers\n        socket.on('open', handleWebSocketOpenEvent);\n        socket.on('message', handleWebSocketMessageEvent);\n        socket.on('error', handleWebSocketErrorEvent);\n        socket.on('close', handleWebSocketCloseEvent);\n        ```\n\n      </CodeBlock>\n\n      ### Audio input\n\n      To capture audio and send it through the socket as an audio input, several steps are necessary. First, we need to handle user permissions\n      to access the microphone. Next, we'll use the Media Stream API to capture the audio, and the MediaRecorder API to record the captured audio.\n      We then base64 encode the recording audio Blob, and finally send the encoded audio through the WebSocket using the `sendAudioInput`method.\n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        import {\n          convertBlobToBase64,\n          ensureSingleValidAudioTrack,\n          getAudioStream,\n          getBrowserSupportedMimeType,\n        } from 'hume';\n\n        // the recorder responsible for recording the audio stream to be prepared as the audio input\n        let recorder: MediaRecorder | null = null;\n\n        // the stream of audio captured from the user's microphone\n        let audioStream: MediaStream | null = null;\n\n        // mime type supported by the browser the application is running in\n        const mimeType: MimeType = (() => {\n          const result = getBrowserSupportedMimeType();\n          return result.success ? result.mimeType : MimeType.WEBM;\n        })();\n\n        // define function for capturing audio\n        async function captureAudio(): Promise<void> {\n          // prompts user for permission to capture audio, obtains media stream upon approval\n          audioStream = await getAudioStream();\n\n          // ensure there is only one audio track in the stream\n          ensureSingleValidAudioTrack(audioStream);\n\n          // instantiate the media recorder\n          recorder = new MediaRecorder(audioStream, { mimeType });\n\n          // callback for when recorded chunk is available to be processed\n          recorder.ondataavailable = async ({ data }) => {\n            // IF size of data is smaller than 1 byte then do nothing\n            if (data.size < 1) return;\n\n            // base64 encode audio data\n            const encodedAudioData = await convertBlobToBase64(data);\n\n            // define the audio_input message JSON\n            const audioInput: Omit<Hume.empathicVoice.AudioInput, 'type'> = {\n              data: encodedAudioData,\n            };\n\n            // send audio_input message\n            socket?.sendAudioInput(audioInput);\n          };\n\n          // capture audio input at a rate of 100ms (recommended for web)\n          const timeSlice = 100;\n          recorder.start(timeSlice);\n        }\n\n        // define a WebSocket open event handler to capture audio\n        async function handleWebSocketOpenEvent(): Promise<void> {\n          // place logic here which you would like invoked when the socket opens\n          console.log('Web socket connection opened');\n          await captureAudio();\n        }\n\n        ```\n\n      </CodeBlock>\n\n      <Callout intent='info'>\n        Accepted audio formats include: `mp3`, `wav`, `aac`, `ogg`, `flac`, `webm`, `avr`, `cdda`,\n        `cvs/vms`, `aiff`, `au`, `amr`, `mp2`, `mp4`, `ac3`, `avi`, `wmv`, `mpeg`, `ircam`.\n      </Callout>\n\n      ### Audio output\n\n      The response will comprise multiple messages, detailed as follows:\n\n      1. **user_message**: This message encapsulates the transcription of the audio input. Additionally, it\n        includes expression measurement predictions related to the speaker's vocal prosody.\n      2. **assistant_message**: For every sentence within the response, an `AssistantMessage` is dispatched.\n        This message not only relays the content of the response but also features predictions regarding the\n        expressive qualities of the generated audio response.\n      3. **audio_output**: Accompanying each `AssistantMessage`, an `AudioOutput` message will be provided.\n        This contains the actual audio (binary) response corresponding to an `AssistantMessage`.\n      4. **assistant_end**: Signifying the conclusion of the response to the audio input, an `AssistantEnd`\n        message is delivered as the final piece of the communication.\n\n      Here we'll focus on playing the received audio output. To play the audio output from the response we\n      need to define our logic for converting the received binary to a Blob, and creating an HTMLAudioInput\n      to play the audio.\n\n      We then need to update the client's on message WebSocket event handler to invoke\n      the logic to playback the audio when receiving the audio output. To manage playback for the incoming\n      audio here we'll implement a queue and sequentially play the audio back.\n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        import {\n          convertBase64ToBlob,\n          getBrowserSupportedMimeType\n        } from 'hume';\n\n        // audio playback queue\n        const audioQueue: Blob[] = [];\n\n        // flag which denotes whether audio is currently playing or not\n        let isPlaying = false;\n\n        // the current audio element to be played\n        let currentAudio: : HTMLAudioElement | null = null;\n\n        // mime type supported by the browser the application is running in\n        const mimeType: MimeType = (() => {\n          const result = getBrowserSupportedMimeType();\n          return result.success ? result.mimeType : MimeType.WEBM;\n        })();\n\n        // play the audio within the playback queue, converting each Blob into playable HTMLAudioElements\n        function playAudio(): void {\n          // IF there is nothing in the audioQueue OR audio is currently playing then do nothing\n          if (!audioQueue.length || isPlaying) return;\n\n          // update isPlaying state\n          isPlaying = true;\n\n          // pull next audio output from the queue\n          const audioBlob = audioQueue.shift();\n\n          // IF audioBlob is unexpectedly undefined then do nothing\n          if (!audioBlob) return;\n\n          // converts Blob to AudioElement for playback\n          const audioUrl = URL.createObjectURL(audioBlob);\n          currentAudio = new Audio(audioUrl);\n\n          // play audio\n          currentAudio.play();\n\n          // callback for when audio finishes playing\n          currentAudio.onended = () => {\n            // update isPlaying state\n            isPlaying = false;\n\n            // attempt to pull next audio output from queue\n            if (audioQueue.length) playAudio();\n          };\n        }\n\n        // define a WebSocket message event handler to play audio output\n        function handleWebSocketMessageEvent(\n          message: Hume.empathicVoice.SubscribeEvent\n        ): void {\n          // place logic here which you would like to invoke when receiving a message through the socket\n          switch (message.type) {\n            // add received audio to the playback queue, and play next audio output\n            case 'audio_output':\n              // convert base64 encoded audio to a Blob\n              const audioOutput = message.data;\n              const blob = convertBase64ToBlob(audioOutput, mimeType);\n\n              // add audio Blob to audioQueue\n              audioQueue.push(blob);\n\n              // play the next audio output\n              if (audioQueue.length === 1) playAudio();\n              break;\n          }\n        }\n        ```\n\n      </CodeBlock>\n\n      ### Interrupt\n\n      Interruptibility is a distinguishing feature of the Empathic Voice Interface. If an audio input is sent\n      through the WebSocket while receiving response messages for a previous audio input, the response to\n      the previous audio input will stop being sent. Additionally the interface will send back a\n      `user_interruption` message, and begin responding to the new audio input.\n\n      <CodeBlock title=\"TypeScript\">\n        ```typescript\n        // function for stopping the audio and clearing the queue\n        function stopAudio(): void {\n          // stop the audio playback\n          currentAudio?.pause();\n          currentAudio = null;\n\n          // update audio playback state\n          isPlaying = false;\n\n          // clear the audioQueue\n          audioQueue.length = 0;\n        }\n\n        // update WebSocket message event handler to handle interruption\n        function handleWebSocketMessageEvent(\n          message: Hume.empathicVoice.SubscribeEvent\n        ): void {\n          // place logic here which you would like to invoke when receiving a message through the socket\n          switch (message.type) {\n            // add received audio to the playback queue, and play next audio output\n            case 'audio_output':\n              // convert base64 encoded audio to a Blob\n              const audioOutput = message.data;\n              const blob = convertBase64ToBlob(audioOutput, mimeType);\n\n              // add audio Blob to audioQueue\n              audioQueue.push(blob);\n\n              // play the next audio output\n              if (audioQueue.length === 1) playAudio();\n              break;\n\n            // stop audio playback, clear audio playback queue, and update audio playback state on interrupt\n            case 'user_interruption':\n              stopAudio();\n              break;\n          }\n        }\n\n        ```\n\n      </CodeBlock>\n\n    </Steps>\n\n  </Tab>\n</Tabs>\n\n---\n"
      },
      "docs/pages/documentation/empathic-voice-interface/quickstart/python.mdx": {
        "markdown": "---\ntitle: EVI Python Quickstart Guide\nexcerpt: >-\n  A quickstart guide for implementing the Empathic Voice Interface (EVI) with\n  Python.\n---\n\nThis guide provides detailed instructions for integrating EVI into your Python projects using Hume's [Python SDK](https://github.com/HumeAI/hume-python-sdk). It is divided into seven key components:\n1. **Environment setup**: Download package and system dependencies to run EVI.\n2. **Dependency imports**: Import all necessary dependencies into your script.\n3. **Defining a WebSocketHandler class**: Create a class to manage the WebSocket connection.\n4. **Authentication**: Use your API credentials to authenticate your EVI application.\n5. **Connecting to EVI**: Set up a secure WebSocket connection to interact with EVI.\n6. **Handling audio**: Capture audio data from an input device, and play audio produced by EVI.\n7. **Asynchronous event loop**: Initiate and manage an asynchronous event loop that handles simultaneous, real-time execution of message processing and audio playback.\n\nTo see a full implementation within a terminal application, visit our API examples repository on GitHub: [evi-python-example](https://github.com/HumeAI/hume-api-examples/tree/main/evi-python-example)\n\n<Callout intent=\"warning\">\n  Hume's Python SDK supports EVI using Python versions 3.9, 3.10, and 3.11 on macOS and Linux platforms. The full specification be found on the [Python SDK GitHub page](https://github.com/HumeAI/hume-python-sdk).\n</Callout>\n\n<Steps>\n\n### Environment setup\n\nBefore starting the project, it is essential to set up the development environment.\n\n#### Creating a virtual environment (optional)\nSetting up a virtual environment is a best practice to isolate your project's dependencies from your global Python installation, avoiding potential conflicts.\n\nYou can create a virtual environment using either Python's built-in `venv` module or the `conda` environment manager. See instructions for both below:\n\n<Tabs>\n  <Tab title=\"venv\">\n    1. **Create** the virtual environment.\n\n    Note that when you create a virtual environment using Python's built-in `venv` tool, the virtual environment will use the same Python version as the global Python installation that you used to create it.\n\n    <CodeBlock title=\"Creating the virtual environment with venv\">\n      ```bash\n      python -m venv evi-env\n      ```\n    </CodeBlock>\n\n    2. **Activate** the virtual environment using the appropriate command for your system platform.\n    <CodeBlock title=\"Activating the virtual environment with venv\">\n      ```bash\n      source evi-env/bin/activate\n      ```\n    </CodeBlock>\n\n    <Callout intent='info'>\n      The code above demonstrates virtual environment activation on a POSIX platform with a bash/zsh shell. Visit the [venv documentation](https://docs.python.org/3/library/venv.html) to learn more about using `venv` on your platform. \n    </Callout>\n  </Tab>\n\n  <Tab title=\"conda\">\n\n    1. **Install** `conda` from [Miniconda](https://docs.anaconda.com/miniconda/miniconda-install/) or [Anaconda Distribution](https://docs.anaconda.com/anaconda/install/).\n\n    2. **Create** the virtual environment.\n\n    `conda` allows developers to set the version of their Python interpreter when creating a virtual environment. In the example below, Python version 3.11 is specified:\n\n    <CodeBlock title=\"Creating the virtual environment with conda\">\n      ```bash\n      conda create --name evi-env python=3.11\n      ```\n    </CodeBlock>\n\n    2. **Activate** the virtual environment using the appropriate command for your system platform.\n    <CodeBlock title=\"Activating the virtual environment with conda\">\n      ```bash\n      conda activate evi-env\n      ```\n    </CodeBlock>\n\n    <Callout intent='info'>\n      Visit the [conda documentation](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#) to learn more about managing Python environments with `conda`. \n    </Callout>\n\n  </Tab>\n</Tabs>\n\n#### Package dependenices\n\nThere are two package dependencies for using EVI:\n1. Hume Python SDK (**required**)\n\nThe `hume[microphone]` package contains the Hume Python SDK. This guide employs EVI's WebSocket and message handling infrastructure as well as various asynchronous programming and audio utilities.\n\n<CodeBlock title=\"Installing the Hume Python SDK package\">\n  ```bash\n  pip install \"hume[microphone]\"\n  ```\n</CodeBlock>\n\n2. Environment variables (**recommended**)\n\nThe `python-dotenv` package contains the logic for using environment variables to store and load sensitive variables such as API credentials from a `.env` file.\n\n<CodeBlock title=\"Installing the environment variable package\">\n  ```bash\n  pip install python-dotenv\n  ```\n</CodeBlock>\n\nIn sample code snippets below, the API key, Secret key, and an EVI configuration id have been saved to environment variables.\n\n<Callout intent='info'>\n  While not strictly required, using environment variables is considered best practice because it keeps sensitive information like API keys and configuration settings separate from your codebase. This not only enhances security but also makes your application more flexible and easier to manage across different environments.\n</Callout>\n\n#### System dependencies\n\nFor audio playback and processing, additional system-level dependencies are required. Below are download instructions for each supported operating system:\n\n<Tabs>\n  <Tab title=\"macOS\">\n    To ensure audio playback functionality, macOS users will need to install `ffmpeg`, a powerful multimedia framework that handles audio and video processing.\n\n    A common way to install `ffmpeg` on macOS is by using a package manager such as [Homebrew](https://brew.sh). To do so, follow these steps:\n\n    1. Install Homebrew onto your system according to the instructions on the [Homebrew website](https://brew.sh/).\n\n    2. Once Homebrew is installed, you can install `ffmpeg` with `brew`:\n\n    <CodeBlock title=\"Installing ffmpeg with Homebrew\">\n      ```bash\n      brew install ffmpeg\n      ```\n    </CodeBlock>\n\n  <Callout intent='info'>\n  If you prefer not to use Homebrew, you can download a pre-built `ffmpeg` binary from the [ffmpeg website](https://ffmpeg.org/download.html) or use other package managers like [MacPorts](https://www.macports.org/).\n  </Callout>\n  </Tab>\n\n  <Tab title=\"Linux\">\n\n    Linux users will need to install the following packages to support audio input/output and playback:\n    - `libasound2-dev`: This package contains development files for the ALSA (Advanced Linux Sound Architecture) sound system.\n    - `libportaudio2`: PortAudio is a cross-platform audio I/O library that is essential for handling audio streams.\n    - `ffmpeg`: Required for processing audio and video files.\n\n    To install these dependencies, use the following commands:\n\n    <CodeBlock title=\"Installing Linux system dependencies\">\n    ```bash\n    sudo apt-get --yes update\n    sudo apt-get --yes install libasound2-dev libportaudio2 ffmpeg\n    ```\n    </CodeBlock>\n  </Tab>\n</Tabs>\n\n### Dependency imports\n\nThe following import statements are used in the example project to handle asynchronous operations, environment variables, audio processing, and communication with the Hume API:\n\n<Tabs>\n  <Tab title=\"Import statements\">\n    <CodeBlock title=\"Imports\">\n    ```py\n    import asyncio\n    import base64\n    import datetime\n    import os\n    from dotenv import load_dotenv\n    from hume.client import AsyncHumeClient\n    from hume.empathic_voice.chat.socket_client import ChatConnectOptions, ChatWebsocketConnection\n    from hume.empathic_voice.chat.types import SubscribeEvent\n    from hume.empathic_voice.types import UserInput\n    from hume.core.api_error import ApiError\n    from hume import MicrophoneInterface, Stream\n    ```\n    </CodeBlock>\n  </Tab>\n\n  <Tab title=\"Statement explanations\">\n    | Module/Class/Method                                 | Description                                                                                                                   |\n    |-------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|\n    | `asyncio`                                             | Provides support for asynchronous programming, allowing the code to handle multiple tasks concurrently.                       |\n    | `base64`                                              | Used to encode and decode audio data in base64 format, essential for processing audio streams.                                |\n    | `os`                                                  | Allows interaction with the operating system, particularly for accessing environment variables.                               |\n    | `datetime`                                            | Used to generate timestamps for logging events.                                                                               |\n    | `load_dotenv`                                         | Loads environment variables from a `.env` file, which are used for API key management and EVI configuration.                  |\n    | `AsyncHumeClient`                                     | Provides an asynchronous client for connecting to the Hume API, which powers the empathic voice interface.                    |\n    | `ChatConnectOptions`, `ChatWebsocketConnection`       | These classes manage WebSocket connections and configuration options for the Hume Empathic Voice Interface (EVI).             |\n    | `SubscribeEvent`                                      | Represents different types of messages received through the WebSocket connection.                                             |\n    | `UserInput`, `AudioConfiguration`, `SessionSettings`  | These types define the structure of messages and settings sent to the Hume API, such as user input and audio configurations.  |\n    | `Stream`                                              | Manages streams of asynchronous data, particularly useful for handling audio streams.                                         |\n    | `MicrophoneInterface`                                 | Manages audio capture and playback from a specified input and output device.                                                  |\n    | `ApiError`                                            | Defines custom error handling for API-related issues, ensuring graceful error management within the application.              |\n\n  </Tab>\n\n</Tabs>\n\n### Defining a WebSocketHandler class\nNext, we define a `WebSocketHandler` class to encapsulate WebSocket functionality in one organized component. The handler allows us to implement application-specific behavior upon the socket opening, closing, receiving messages, and handling errors. It also manages the continuous audio stream from a microphone.\n\nBy using a class, you can maintain the WebSocket connection and audio stream state in one place, making it simpler to manage both real-time communication and audio processing.\n\nBelow are the key methods:\n\n| Method                                        | Description                                                                                                                                                           |\n|-----------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `__init__()`                                  | Initializes the handler, setting up placeholders for the WebSocket connection.                                                                                      |\n| `set_socket(socket: ChatWebsocketConnection)` | Associates the WebSocket connection with the handler.                                                                                                               |\n| `on_open()`                                   | Called when the WebSocket connection is established, enabling any necessary initialization.                                                                           |\n| `on_message(data: SubscribeEvent)`            | Handles incoming messages from the WebSocket, processing [different types of messages](https://dev.hume.ai/reference/empathic-voice-interface-evi/chat/chat#receive). |\n| `on_close()`                                  | Invoked when the WebSocket connection is closed, allowing for cleanup operations.                                                                                     |\n| `on_error(error: Exception)`                  | Manages errors that occur during WebSocket communication, providing basic error logging.                                                                              |\n\n<Accordion title='Example WebSocketHandler Structure'>\n  Below is an example of what the `WebSocketHandler` class may look like.\n  \n  Refer to the [evi-python-example](https://github.com/HumeAI/hume-api-examples/blob/main/evi-python-example/quickstart.py) for a complete example implementation.\n  <CodeBlock>\n    ```python\n    import asyncio\n    import base64\n    from hume.empathic_voice.chat.socket_client import ChatWebsocketConnection\n    from hume.empathic_voice.chat.types import SubscribeEvent\n    from hume.core.api_error import ApiError\n    from hume import Stream\n\n    class WebSocketHandler:\n      \"\"\"Interface for containing the EVI WebSocket and associated socket handling behavior.\"\"\"\n\n      def __init__(self):\n        \"\"\"Construct the WebSocketHandler, initially assigning the socket to None and the byte stream to a new Stream object.\"\"\"\n        self.socket = None\n        self.byte_strs = Stream.new()\n\n      def set_socket(self, socket: ChatWebsocketConnection):\n        \"\"\"Set the socket.\"\"\"\n        self.socket = socket\n\n      async def on_open(self):\n        \"\"\"Logic invoked when the WebSocket connection is opened.\"\"\"\n        print(\"WebSocket connection opened.\")\n\n      async def on_message(self, message: SubscribeEvent):\n        \"\"\"Callback function to handle a WebSocket message event.\n        \n        This asynchronous method decodes the message, determines its type, and \n        handles it accordingly. Depending on the type of message, it \n        might log metadata, handle user or assistant messages, process\n        audio data, raise an error if the message type is \"error\", and more.\n\n        See the full list of \"Receive\" messages in the API Reference.\n        \"\"\"\n\n        if message.type == \"chat_metadata\":\n          chat_id = message.chat_id\n          chat_group_id = message.chat_group_id\n          # ...\n        elif message.type in [\"user_message\", \"assistant_message\"]:\n          role = message.message.role.upper()\n          message_text = message.message.content\n          # ...\n        elif message.type == \"audio_output\":\n          message_str: str = message.data\n          message_bytes = base64.b64decode(message_str.encode(\"utf-8\"))\n          await self.byte_strs.put(message_bytes)\n          return\n        elif message.type == \"error\":\n          error_message = message.message\n          error_code = message.code\n          raise ApiError(f\"Error ({error_code}): {error_message}\")\n        \n        # Print timestamp and message\n        # ...\n          \n      async def on_close(self):\n        \"\"\"Logic invoked when the WebSocket connection is closed.\"\"\"\n        print(\"WebSocket connection closed.\")\n\n      async def on_error(self, error):\n        \"\"\"Logic invoked when an error occurs in the WebSocket connection.\"\"\"\n        print(f\"Error: {error}\")\n    ```\n  </CodeBlock>\n\n</Accordion>\n\n### Authentication\n\nIn order to establish an authenticated connection, we instantiate the Hume client with our API key and include our Secret key in the query parameters passed into the WebSocket connection.\n\n<Callout intent='note'>\nYou can obtain your API credentials by logging into the Hume Platform and visiting the [API keys page](https://platform.hume.ai/settings/keys).\n</Callout>\n\n<CodeBlock title=\"Authenticating EVI\">\n```py\nasync def main() -> None:\n  # Retrieve any environment variables stored in the .env file\n  load_dotenv()\n\n  # Retrieve the API key, Secret key, and EVI config id from the environment variables\n  HUME_API_KEY = os.getenv(\"HUME_API_KEY\")\n  HUME_SECRET_KEY = os.getenv(\"HUME_SECRET_KEY\")\n  HUME_CONFIG_ID = os.getenv(\"HUME_CONFIG_ID\")\n\n  # Initialize the asynchronous client, authenticating with your API key\n  client = AsyncHumeClient(api_key=HUME_API_KEY)\n\n  # Define options for the WebSocket connection, such as an EVI config id and a secret key for token authentication\n  options = ChatConnectOptions(config_id=HUME_CONFIG_ID, secret_key=HUME_SECRET_KEY)\n  \n  # ...\n```\n</CodeBlock>\n\n### Connecting to EVI\n\nWith the Hume client instantiated with our credentials, we can now establish an authenticated WebSocket connection with EVI and pass in our handlers.\n\n<CodeBlock title=\"Connecting to EVI\">\n```py {6-16}\nasync def main() -> None:\n  # ...\n  # Define options for the WebSocket connection, such as an EVI config id and a secret key for token authentication\n  options = ChatConnectOptions(config_id=HUME_CONFIG_ID, secret_key=HUME_SECRET_KEY)\n\n  # Instantiate the WebSocketHandler\n  websocket_handler = WebSocketHandler()\n\n  # Open the WebSocket connection with the configuration options and the handler's functions\n    async with client.empathic_voice.chat.connect_with_callbacks(\n      options=options,\n      on_open=websocket_handler.on_open,\n      on_message=websocket_handler.on_message,\n      on_close=websocket_handler.on_close,\n      on_error=websocket_handler.on_error\n    ) as socket:\n    \n      # Set the socket instance in the handler\n      websocket_handler.set_socket(socket)\n      # ...\n```\n</CodeBlock>\n\n### Handling audio\n\nThe `MicrophoneInterface` class captures audio input from the user's device and streams it over the WebSocket connection.\n\nAudio playback occurs when the `WebSocketHandler` receives audio data over the WebSocket connection in its asynchronous byte stream from an `audio_output` message.\n\nIn this example, `byte_strs` is a stream of audio data that the WebSocket connection populates.\n\n<CodeBlock title=\"Capturing and sending audio to EVI\">\n```py {7-11}\nasync def main() -> None:\n  # Open the WebSocket connection with the configuration options and the handler's functions\n  async with client.empathic_voice.chat.connect_with_callbacks(...) as socket:\n    # Set the socket instance in the handler\n    websocket_handler.set_socket(socket)\n\n    # Create an asynchronous task to continuously detect and process input from the microphone, as well as play audio\n    microphone_task = asyncio.create_task(\n      MicrophoneInterface.start(\n        socket,\n        byte_stream=websocket_handler.byte_strs\n      )\n    )\n    \n    # Await the microphone task\n    await microphone_task\n\n```\n</CodeBlock>\n\n#### Specifying a microphone device\n\nYou can specify your microphone device using the `device` parameter in the `MicrophoneInterface` object's `start` method.\n\nTo view a list of available audio devices, run the following command:\n<CodeBlock title=\"List available audio devices\">\n`python -c \"import sounddevice; print(sounddevice.query_devices())\"`\n</CodeBlock>\n\nBelow is an example output:\n<CodeBlock title=\"Example audio device list\">\n```bash\n   0 DELL U2720QM, Core Audio (0 in, 2 out)\n   1 I, Phone 15 Pro Max Microphone, Core Audio (1 in, 0 out)\n>  2 Studio Display Microphone, Core Audio (1 in, 0 out)\n   3 Studio Display Speakers, Core Audio (0 in, 8 out)\n   4 MacBook Pro Microphone, Core Audio (1 in, 0 out)\n<  5 MacBook Pro Speakers, Core Audio (0 in, 2 out)\n   6 Pro Tools Audio Bridge 16, Core Audio (16 in, 16 out)\n   7 Pro Tools Audio Bridge 2-A, Core Audio (2 in, 2 out)\n   8 Pro Tools Audio Bridge 2-B, Core Audio (2 in, 2 out)\n   9 Pro Tools Audio Bridge 32, Core Audio (32 in, 32 out)\n  10 Pro Tools Audio Bridge 64, Core Audio (64 in, 64 out)\n  11 Pro Tools Audio Bridge 6, Core Audio (6 in, 6 out)\n  12 Apowersoft Audio Device, Core Audio (2 in, 2 out)\n  13 ZoomAudioDevice, Core Audio (2 in, 2 out)\n```\n</CodeBlock>\n\nIf the `MacBook Pro Microphone` is the desired device, specify device 4 in the Microphone context. For example:\n\n<CodeBlock title=\"Python\">\n```python\n# Specify device 4 in MicrophoneInterface\nMicrophoneInterface.start(\n  socket,\n  device=4,\n  allow_user_interrupt=True,\n  byte_stream=websocket_handler.byte_strs\n)\n```\n</CodeBlock>\n\nFor troubleshooting faulty device detection - particularly with systems using ALSA, the Advanced Linux Sound Architecture, the device may also be directly specified using the `sounddevice` library: \n\n<CodeBlock title=\"Setting default sounddevice library device\">\n  ```python\n  # Directly import the sounddevice library\n  import sounddevice as sd\n\n  # Set the default device prior to scheduling audio input task\n  sd.default.device = 4\n  ```\n</CodeBlock>\n\n#### Allowing interruption\nThe `allow_interrupt` parameter in the `MicrophoneInterface` class allows control over whether the user can send a message while the assistant is speaking:\n\n<CodeBlock title=\"Allowing an interrupt\">\n```python\n# Specify allowing interruption\nMicrophoneInterface.start(\n  socket,\n  allow_user_interrupt=True,\n  byte_stream=websocket_handler.byte_strs\n)\n```\n</CodeBlock>\n\n- `allow_interrupt=True`: Allows the user to send microphone input even when the assistant is speaking. This enables more fluid, overlapping conversation.\n- `allow_interrupt=False`: Prevents the user from sending microphone input while the assistant is speaking, ensuring that the user does not interrupt the assistant. This is useful in scenarios where clear, uninterrupted communication is important.\n\n### Asynchronous event loop\n\nInitialize, execute, and manage the lifecycle of the asynchronous event loop, making sure that the `main()` coroutine and its runs effectively and that the application shuts down cleanly after the coroutine finishes executing.\n\n<CodeBlock title=\"Initialize the async event loop in global scope\">\n```py\nasyncio.run(main())\n```\n</CodeBlock>\n\n</Steps>\n\n---\n"
      },
      "docs/pages/documentation/empathic-voice-interface/evi-2.mdx": {
        "markdown": "---\ntitle: Empathic Voice Interface 2 (EVI 2)\nexcerpt: >-\n  Introducing EVI 2, our new voice-language foundation model, enabling\n  human-like conversations with enhanced naturalness, emotional responsiveness,\n  adaptability, and rich customization options for the voice and personality.\n---\n\nThe **Empathic Voice Interface 2 (EVI 2)** introduces a new architecture that seamlessly integrates voice and language processing. This multimodal approach allows EVI 2 to understand and generate both language and voice, dramatically enhancing key features over EVI 1 while also enabling new capabilities.\n\nEVI 2 can converse rapidly and fluently with users, understand a user's tone of voice, generate any tone of voice, and can even handle niche requests like rapping, changing its style, or speeding up its speech. The model specifically excels at emulating a wide range of personalities, including their accents and speaking styles. It is exceptional at maintaining personalities that are fun and interesting to interact with. Ultimately, EVI 2 is capable of emulating the ideal personality for every application and user.\n\nIn addition, EVI 2 allows developers to create custom voices by using a new voice modulation method. Developers can adjust EVI 2's base voices along a number of continuous scales, including gender, nasality, and pitch. This first-of-its-kind feature enables creating voices that are unique to an application or even a single user. Further, this feature does not rely on voice cloning, which currently invokes more risks than any other capability of this technology.\n\n<Note>\n  **The EVI 2 API is currently in beta.** We are still making ongoing\n  improvements to the model. In the coming weeks and months, EVI 2 will sound\n  better, speak more languages, follow more complex instructions, and use a\n  wider range of tools.\n</Note>\n\n### Key improvements\n\n<CardGroup cols={2}>\n  <Card title=\"Improved voice quality\" icon=\"circle-1\">\n    EVI 2 uses an advanced voice generation model connected to our eLLM, which can process and generate both text and audio. This results in more natural-sounding speech with better word emphasis, higher expressiveness, and more consistent vocal output.\n  </Card>\n  <Card title=\"Faster responses\" icon=\"circle-2\">\n    The integrated architecture of EVI 2 reduces end-to-end latency by 40% vs EVI 1, now averaging around 500ms. This significant speed improvement enables more responsive and human-like conversations.\n  </Card>\n  <Card title=\"Enhanced emotional intelligence\" icon=\"circle-3\">\n    By processing voice and language in the same model, EVI 2 can better understand the emotional context of user inputs and generate more empathic responses, both in terms of content and vocal tone.\n  </Card>\n  <Card title=\"Custom voices and personality\" icon=\"circle-4\">\n    EVI 2 offers new control over the AI's voice characteristics. Developers can adjust various parameters to tailor EVI 2's voice to their specific application needs. EVI 2 also supports in-conversation voice prompting, allowing users to dynamically modify EVI's speaking style (e.g., \"speak faster\", \"sound excited\") during interactions.\n  </Card>\n  <Card title=\"Cost-effectiveness\" icon=\"circle-5\">\n    Despite its advanced capabilities, EVI 2 is 30% more cost-effective than its predecessor, with pricing reduced from \\$0.1020 to \\$0.0714 per minute.\n  </Card>\n</CardGroup>\n\nBeyond these improvements, EVI 2 also exhibits promising emerging capabilities including speech output in multiple languages. We will make these improvements available to developers as we scale up and improve the model.\n\nWe provide the same suite of tools to integrate and customize EVI 2 for your application as we do for EVI 1, and existing EVI developers can easily switch to the new system.\n\n## Building with EVI 2\n\nDevelopers can start testing EVI 2 by simply [creating an EVI config on the Hume platform](https://platform.hume.ai/evi/configs/create). Just select EVI 2 as the version when creating your config.\n\nTo use EVI 2, simply create a configuration using the [/v0/evi/configs](/reference/empathic-voice-interface-evi/configs/create-config) endpoint and specify `\"evi_version\": \"2\"`. Then, use this config in a conversation with EVI using the [/v0/evi/chat](/reference/empathic-voice-interface-evi/chat/chat) endpoint. Most aspects of using EVI, including authentication strategies, remain the same as described in the [EVI documentation](/docs/empathic-voice-interface-evi/overview).\n\n1. In your configuration JSON, set the `evi_version` parameter to `\"2\"`. Here's an example of an EVI 2 config:\n\n```json\n{\n  \"evi_version\": \"2\",\n  \"name\": \"EVI 2 config\",\n  \"voice\": {\n    \"provider\": \"HUME_AI\",\n    \"name\": \"DACHER\"\n  }\n}\n```\n\n2. Using a config like the above, make a POST request to the [/v0/evi/configs](/reference/empathic-voice-interface-evi/configs/create-config) endpoint to save the config.\n3. Specify any other custom settings you need.\n\n## EVI 2 timeline\n\nEVI 2 is available now, with full feature parity with EVI 1, including support for supplemental LLMs, [custom language models](./custom-language-model), [tool use](./tool-use), built-in tools like web search, and all [configuration options](/docs/empathic-voice-interface-evi/configuration).\n\nFrom September to December 2024, the Hume team will focus on improving the reliability and quality of EVI 2. The team will ensure that all the features of the EVI 1 API work consistently in EVI 2.\n\nIn late December 2024, the EVI 1 API will be sunsetted and deprecated. Developers will need to migrate from EVI 1 to EVI 2 for ongoing support and new features.\n\n<Callout type=\"info\">\n  Clear migration guidelines will be provided ahead of time, and our team will\n  ensure only minor changes will be required to make applications work with EVI\n  2.\n</Callout>\n\n## Feature comparison: EVI 1 vs EVI 2\n\nThis table provides a comprehensive comparison of features between EVI 1 and EVI 2, highlighting the new capabilities introduced in the latest version.\n\n| Feature                             | EVI 1                                                          | EVI 2                                                                                                                |\n| ----------------------------------- | -------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |\n| **Voice quality**                   | Similar to best TTS solutions                                  | Significantly improved naturalness, clarity, and expressiveness                                                      |\n| **Response latency**                | ~900ms-2000ms                                                  | ~500-800ms (about 2x faster)                                                                                         |\n| **Emotional intelligence**          | Empathic responses informed by expression measures             | End-to-end understanding of voice augmented with emotional intelligence training                                     |\n| **Base voices**                     | 3 core voice options (Kora, Dacher, Ito)                       | 5 new high-quality base voice options with expressive personalities (8 total)                                        |\n| **Voice customizability**           | Supported - can select base voices and adjust voice parameters | Supported - extensive customization with parameter adjustments (e.g. pitch, huskiness, nasality)                     |\n| **In-conversation voice prompting** | Not supported                                                  | Supported (e.g., \"speak faster\", \"sound more excited\", change accents)                                               |\n| **Multimodal processing**           | Transcription augmented with high-dimensional voice measures   | Fully integrated voice and language processing within a single model, along with transcripts and expression measures |\n| **Supplemental LLMs**               | Supported                                                      | Supported                                                                                                            |\n| **Tool use and web search**         | Supported                                                      | Supported                                                                                                            |\n| **Custom language model (CLM)**     | Supported                                                      | Supported                                                                                                            |\n| **Configuration options**           | Extensive support                                              | Extensive support (same options as EVI 1)                                                                            |\n| **Typescript SDK support**          | Supported                                                      | Supported                                                                                                            |\n| **Python SDK support**              | Supported                                                      | Supported                                                                                                            |\n| **Multilingual support**            | English only                                                   | Expanded support for multiple languages planned for Q4 2024                                                          |\n| **Cost**                            | $0.102 per minute                                              | $0.0714 per minute (30% reduction)                                                                                   |\n\n## Frequently Asked Questions\n\n<AccordionGroup>\n\n<Accordion title=\"Can I use my existing EVI 1 configs with EVI 2?\">\n  Yes, for most configs, you will be able to update to EVI 2 simply by setting\n  the `evi_version` to `2` in the configuration. If your config uses a\n  supplemental LLM, we recommend that you select the same supplemental LLM for\n  EVI 2. This will ensure stability and support for the same tools.\n</Accordion>\n\n<Accordion title=\"Is EVI 2 ready for production deployment?\">\n  EVI 2 is a beta API, and is still in progress as of September 2024. Our team has released the API to allow developers to experiment with EVI 2.\n\nOur developer platform team is available to assist with integration challenges to ensure smooth\ndeployment across various applications - join our\n[Discord](https://discord.com/invite/WPRSugvAm6) for assistance.\n\nFor companies that are interested in using EVI 2 in production, please [contact our partnerships team ](https://link.hume.ai/sales-partnerships-form).\n\n</Accordion>\n\n<Accordion title=\"What updates can developers expect for EVI 2 in the near future?\">\nAfter launch, we will make ongoing enhancements to naturalness, expressiveness, latency, consistency and reliability, and EVI's overall output quality.\n\nWe plan to add more granular options for tailoring EVI's personality and creating custom EVIs, including style references and audio prompts. We plan to make EVI multi-lingual and continuously add support for new major languages in Q4 2024.\n\nLater this year, we will likely integrate EVI with image and/or video modalities, allowing it to respond to the user's facial expressions using Hume's proprietary models of facial expressions.\n\n</Accordion>\n\n<Accordion title=\"How does EVI 2's multimodal processing improve conversations?\">\n  EVI 2's multimodal processing integrates voice and text in a single voice-language foundation model. This allows EVI 2 to understand and\n  generate both language and voice in the same latent space, resulting in more\n  coherent and contextually aware responses. EVI 2's integrated voice-language architecture also offers\nunprecedented control over both the AI's personality and voice\ncharacteristics. Further, it allows prompting the\nmodel to change its speaking style or to follow a personality.\n\n</Accordion>\n\n<Accordion title=\"What safety measures has Hume implemented for EVI 2?\">\n  Hume has implemented several key safety measures for EVI 2:\n\n- **Architectural safeguards**: EVI 2's core architecture prevents unauthorized voice cloning by representing voice characteristics as abstract semantic tokens, not raw audio data. This allows personality imitation without enabling direct voice replication. Importantly, EVI 2 is incapable of voice cloning without access to its code. By controlling EVI 2's identity-related voice characteristics at the architecture level, we force the model to adopt one identity at a time, maintaining a consistent vocal register across sessions. We believe voice cloning currently invokes more risks than any other capability of voice AI, which is why we've implemented these architectural safeguards as a core feature of EVI 2.\n\n- **Customizable language control**: Developers can use their own LLMs or modify the supplemental LLM, enabling custom content filtering and safeguards tailored to their specific use cases.\n\n- **Continuous testing**: Our team regularly red-teams and tests EVI 2 to identify and address potential vulnerabilities.\n\n- **Usage monitoring**: We actively monitor API usage, classify major use cases, and can swiftly intervene if we detect misuse.\n\n- **Clear guidelines**: Our [terms of use](https://platform.hume.ai/policies/terms-of-use) and the [Hume Initiative](https://thehumeinitiative.org/) guidelines prohibit malicious applications of our technology.\n\nThese measures ensure responsible deployment while providing developers the necessary control and transparency for their specific applications.\n\n</Accordion>\n\n<Accordion title=\"Are there plans to support other languages?\">\n  Yes, we plan to make EVI multilingual and support other languages in Q4 2024, in the following order:\n  1. Multiple English accents (e.g. Australian, British)\n  2. Common European languages (Spanish, German, Italian, French, Portuguese)\n  3. Additional languages based on customer demand (including Arabic, Japanese, Korean, Hindi, Dutch, Swedish, Turkish, Russian, Mandarin)\n\nEVI 2's ability to learn new languages efficiently with minimal data will facilitate this expansion to more languages.\n\n</Accordion>\n\n<Accordion title=\"How does EVI's speech recognition accuracy compare in various environments?\">\n  EVI 2's speech recognition capabilities are robust across a wide range of\n  scenarios. It is highly accurate across a wide range of accents, breathing\n  patterns, and individual speaking patterns. Performance may degrade in\n  environments with significant background noise, or when multiple speakers\n  overlap. We continue to work on improving performance in challenging acoustic\n  environments.\n</Accordion>\n\n</AccordionGroup>\n"
      },
      "docs/pages/documentation/empathic-voice-interface/configuration/configuration.mdx": {
        "markdown": "---\ntitle: Configuring EVI\nexcerpt: Guide to configuring the Empathic Voice Interface (EVI).\n---\n\nThe Empathic Voice Interface (EVI) is designed to be highly configurable, allowing developers to customize the interface to align with their specific requirements.\nConfiguration of EVI can be managed through two primary methods: an EVI configuration and session settings.\n\n## Configuration options\n\nEVI configuration options affect the behavior and capabilities of the interface, and include the following configuration options:\n\n| Option             | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| -------------------| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Voice**          | Select a voice from a list of 8 preset options or create a custom voice. For further details, see our [guide on creating custom voices](/docs/empathic-voice-interface-evi/voices).                                                                                                                                                                                                                                                                                                                             |\n| **EVI version**    | Select the version of EVI you would like to use. For details on similarities and differences between EVI versions 1 and 2, refer to our [feature comparison](/docs/empathic-voice-interface-evi/evi-2#feature-comparison-evi-1-vs-evi-2).                                                                                                                                                                                                                                                                       |\n| **System prompt**  | Provide a system prompt to guide how EVI should respond. For details on expressive prompt engineering, refer to our [prompting guide](/docs/empathic-voice-interface-evi/prompting).                                                                                                                                                                                                                                                                                                                            |\n| **Language model** | Select a language model that best fits your application’s needs. For details on selecting a supplementary language model to meet your needs, such as optimizing for lowest latency, refer to our [EVI FAQ](/docs/empathic-voice-interface-evi/faq#which-supplemental-llm-for-evi-has-the-lowest-latency-1aa3db3b-06d4-4d77-890b-22535d1f92e8). To incorporate your own language model, refer to our guide on [using your own language model](/docs/empathic-voice-interface-evi/custom-language-model).         |\n| **Tools**          | Choose user-created or built-in tools for EVI to use during conversations. For details on creating tools and adding them to your configuration, see our [tool use guide](/docs/empathic-voice-interface-evi/tool-use).                                                                                                                                                                                                                                                                                          |\n| **Event messages** | Configure messages that EVI will send in specific situations. For details on configuring event messages, see our [API Reference](/reference/empathic-voice-interface-evi/configs/create-config#request.body.event_messages).                                                                                                                                                                                                                                                                                    |\n| **Timeouts**       | Define limits on a chat with EVI to manage conversation flow. For details on specifying timeouts, see our [API Reference](/reference/empathic-voice-interface-evi/configs/create-config#request.body.timeouts).                                                                                                                                                                                                                                                                                                 |\n\n<Callout intent='info'>\n  Configs, as well as system prompts and tools, are versioned.\n  This versioning system supports iterative development, allowing you to\n  progressively refine configurations and revert to previous versions if needed.\n</Callout>\n\n## Default configuration options\nEVI is pre-configured with a set of default values, which are automatically applied if you do not specify a configuration.\nThe default configuration includes a preset voice and language model, but does not include a system prompt or tools.\nTo customize these options, you will need to create and specify your own EVI configuration.\n\nThe default configuration settings are as follows:\n\n| EVI 1                                 | EVI 2                           |\n|---------------------------------------|---------------------------------|\n| **Language model**: Claude 3.5 Sonnet | **Language model**: hume-evi-2  |\n| **Voice**: Ito                        | **Voice**: Ito                  |\n| **System prompt**: Hume default       | **System prompt**: Hume default |\n| **Tools**: None                       | **Tools**: None                 |\n\n<Callout intent='info'>\n  Default configuration settings are subject to change. To ensure your setup remains consistent should changes occur, we recommend choosing explicit options when defining your EVI configuration.\n</Callout>\n\n## Create a configuration\n\nSee instructions below for creating an EVI configuration through the Portal. In the Portal, navigate to the [EVI Configurations page](https://platform.hume.ai/evi/config). Click the **Create configuration** button to begin.\n\n<Frame>\n  <img src=\"file:d1ff67f5-c930-48a9-bd93-69cee461a3aa\" alt=\"EVI configurations page without existing configs\"/>\n</Frame>\n\n<Steps>\n  ### Choose EVI version\n\n  To learn more about the differences between EVI versions 1 and 2, please see the [feature comparison](/docs/empathic-voice-interface-evi/evi-2#feature-comparison-evi-1-vs-evi-2) guide.\n\n  <Frame>\n    <img src='file:14ef76cd-deb6-4570-8747-2d160da7a05b' alt='Version selection, the first step of EVI configuration'/>\n  </Frame>\n\n  ### Choose voice\n\n  Select a voice from Hume's 8 presets, or create your own custom voice. To learn more about voice customization options on the Hume Platform, please visit the [Voices page](/docs/empathic-voice-interface-evi/voices).\n\n  <Frame>\n    <img src='file:fe1dd673-d9cb-40ee-a8cc-3cfa16295cd5' alt='Voice selection, the second step of EVI configuration'/>\n  </Frame>\n\n  ### Set up the LLM\n\n  Select a supported language model and specify a system prompt.\n\n  <Frame>\n    <img src='file:ca3b55cb-65e4-41b7-a8de-cb0fde8a660a' alt='Supplemental LLM setup, the third step of EVI configuration'/>\n  </Frame>\n\n  ### Add tools\n\n  Equip EVI with built-in tools, like web search, or custom user-defined tools. Click the **+ Add** button to select an existing tool or create a new one.\n\n  <Frame>\n    <img src='file:e13463e2-af26-4184-8c3b-1a1d26c904f1' alt='Tool use addition, the fourth step of EVI configuration'/>\n  </Frame>\n\n  ### Name config\n\n  Name your EVI configuration and add an optional description.\n\n  <Frame>\n    <img src='file:7db43fcf-097c-4eef-8bd3-57a478e6f053' alt='Providing a name and description, the fifth and final step of EVI configuration'/>\n  </Frame>\n\n  ### Test the configuration\n\n  The newly created configuration can now be tested. From the EVI Config details page, click **Run in playground** to test it out.\n\n  <Frame caption=\"Successful EVI config creation\">\n    <img src='file:4a84351a-527f-4242-892a-ceda0eac4543' alt='The page shown after a successful EVI configuration; the ID and name are displayed, and two buttons appear (\"Run in playground\" and \"Edit configuration\")'/>\n  </Frame>\n\n  Once in the EVI Playground, click **Start call** to connect to EVI with your configuration.\n\n  <Frame caption=\"Using an EVI configuration in the Playground\">\n    <img src=\"file:160f9852-b698-42dc-9a81-eb8bc51fc95c\" alt=\"EVI playground\" />\n  </Frame>\n\n  The [event message](/reference/empathic-voice-interface-evi/configs/create-config#request.body.event_messages) and [timeout](/reference/empathic-voice-interface-evi/configs/create-config#request.body.timeouts)\n  configuration options are not part of the initial config creation flow. However, you can set these options at any time in the playground or from the configuration's edit page after your configuration has been created.\n\n  <Frame caption=\"Event message and timeout options in the Playground\">\n    <img src=\"file:476141d9-de6f-41e5-9e82-ef273f546a67\" alt=\"Event message and timeout options in playground\" />\n  </Frame>\n\n  <Frame caption=\"Event message and timeout options in the Config edit page\">\n    <img src=\"file:be0e15c9-c609-4d7e-a387-9b7f80e0a39f\" alt=\"Event message and timeout options on edit page\" />\n  </Frame>\n\n  ### Apply the configuration\n\n  After creating an EVI configuration, you can use it in your conversations with EVI by including the [config_id](/reference/empathic-voice-interface-evi/chat/chat#request.query.config_id)\n  in the query parameters of your connection request. You can find the `config_id` on the configuration's edit page. To access this page, first navigate to the [configurations page](https://platform.hume.ai/evi/configs)\n  and then click the **Edit** button for the desired configuration.\n\n  <Frame>\n    <img src='file:a3672980-1b76-4be8-80d0-3199b434ffc1' alt='Configuration ID' />\n  </Frame>\n\n  See the sample code below which showcases how to apply your configuration:\n\n  <CodeBlocks>\n    <CodeBlock title='TypeScript'>\n      ```typescript\n      import { Hume, HumeClient } from 'hume';\n      // instantiate the HumeClient with credentials\n      // avoid hard coding your API key, retrieve from environment variables\n      const client = new HumeClient({\n        apiKey: <YOUR_API_KEY>,\n        secretKey: <YOUR_SECRET_KEY>,\n      });\n      // instantiate WebSocket connection with specified EVI config\n      const socket = await client.empathicVoice.chat.connect({\n        configId: <YOUR_CONFIG_ID> // specify config ID here\n      });\n      ```\n    </CodeBlock>\n    <CodeBlock title='Python'>\n      ```python\n      from hume import HumeVoiceClient, MicrophoneInterface\n      # avoid hard coding your API key, retrieve from environment variables\n      HUME_API_KEY = <YOUR_API_KEY>\n      # Connect and authenticate with Hume\n      client = HumeVoiceClient(HUME_API_KEY)\n      # establish a connection with EVI with your configuration by passing\n      # the config_id as an argument to the connect method\n      async with client.connect(config_id=\"<your-config-id>\") as socket:\n        await MicrophoneInterface.start(socket)\n      ```\n    </CodeBlock>\n  </CodeBlocks>\n\n</Steps>\n\n## Session settings\n\nEVI configurations are persistent and version-controlled. In contrast, session settings are temporary and apply only to the current session, such as\nmicrophone settings. These parameters can be adjusted dynamically based on the requirements of each session to ensure optimal performance and user experience.\n\n<Callout intent='info'>\n  Refer to the [API reference](/reference/empathic-voice-interface-evi/chat/chat#send.Session%20Settings.audio) for detailed descriptions of the various session settings options.\n</Callout>\n\nUpdating the session settings is only a requirement when the audio input is encoded in PCM Linear 16. If this is the case, be sure to send the following [Session Settings](/reference/empathic-voice-interface-evi/chat/chat#send.Session%20Settings.type) message prior to sending an audio input:\n\n<CodeBlock title='SessionSettings'>\n  ```json\n  {\n    \"type\": \"session_settings\",\n    \"audio\": {\n      \"channels\": 1,\n      \"encoding\": \"linear16\",\n      \"sample_rate\": 48000\n    }\n  }\n  ```\n</CodeBlock>\n\n### Dynamic variables\n\nEVI can reference and update session-specific values as a conversation progresses. By including dynamic variables in the [system prompt](/reference/empathic-voice-interface-evi/prompts/create-prompt), you can personalize conversations with EVI.\n\n<Callout intent='info'>\n  Visit our [prompting guide](/docs/empathic-voice-interface-evi/prompting#using-dynamic-variables-in-your-prompt) for more details on adding dynamic variables to your prompt.\n</Callout>\n\nTo use this feature, first define a [variables parameter](/reference/empathic-voice-interface-evi/chat/chat#send.Session%20Settings.variables) within a Session Settings message containing one or more dynamic variables.\n\nEach key-value pair in `\"variables\"` must have a string key representing the variable name and a string value.\n\nFor example, you can define the user's `name` and set it to a default value:\n\n<CodeBlock title='SessionSettings'>\n  ```json\n  {\n    \"type\": \"session_settings\",\n    \"variables\": {\n      \"name\": \"David Hume\",\n      \"age\": \"65\",\n      \"is_philosopher\": \"True\"\n    }\n  }\n  ```\n</CodeBlock>\n\nThen, include the variable surrounded by two pairs of curly braces, such as `{{name}}`, as a placeholder value in your system prompt:\n\n<CodeBlock title=\"System Prompt\">\n  ```text\n  Address the user by their name, {{name}}.\n  If relevant, reference their age: {{age}}.\n  It is {{is_philosopher}} that this user is a philosopher.\n  ```\n</CodeBlock>\n\nTo ensure your dynamic variables are recognized properly, confirm the following:\n1. **If you have defined a dynamic variable, reference it.**: If the variable is defined but not referenced in the system prompt, then it will not be included in the conversation and EVI will not be able to refer to the variable.\n2. **If you have referenced a dynamic variable, make sure it is defined.**: If the variable is referenced in the system prompt, but it is not defined in the `\"variables\"` field, then the [warning](/docs/resources/errors#warnings) `W0106` will be raised: *\"No values have been specified for the variables [variable_name] which can lead to incorrect text formatting. Please assign them values.\"* For example, this error can occur when there are spelling mistakes or differences between the variable defined in the `\"variables\"` field and the variable referenced in the system prompt (i.e. `{{firstName}}` instead of `{{name}}`).\n\n---\n"
      },
      "docs/pages/documentation/empathic-voice-interface/voices/voices.mdx": {
        "markdown": "---\ntitle: Voices\nexcerpt: Guide to customizing the voice of the Empathic Voice Interface (EVI).\n---\n\nThe Empathic Voice Interface (EVI) can be configured with any of our 8 base voices. You can also customize these voices by adjusting specific attributes. This guide explains each attribute and provides a tutorial for creating a custom voice.\nVisit the [Playground](https://platform.hume.ai/evi/playground) to test the base voices.\n\n<Callout intent=\"info\">\n  The custom voices feature is experimental and under active development. Regular updates will focus on improving stability and expanding attribute options.\n</Callout>\n\n## Voice attributes\n\nThe following attributes can be modified to personalize any of the base voices:\n\n| Attribute                   | Description                                                                                               |\n|-----------------------------|-----------------------------------------------------------------------------------------------------------|\n| **Gender**                  | The vocalization of gender, ranging between more masculine and more feminine.                             |\n| **Articulation**            | The clarity of the voice, ranging between mumbled and articulate.                                         |\n| **Assertiveness**           | The firmness of the voice, ranging between whiny and bold.                                                |\n| **Buoyancy**                | The density of the voice, ranging between deflated and buoyant.                                           |\n| **Confidence**              | The assuredness of the voice, ranging between shy and confident.                                          |\n| **Enthusiasm**              | The excitement within the voice, ranging between calm and enthusiastic.                                   |\n| **Nasality**                | The openness of the voice, ranging between clear and nasal.                                               |\n| **Relaxedness**             | The stress within the voice, ranging between tense and relaxed.                                           |\n| **Smoothness**              | The texture of the voice, ranging between smooth and staccato.                                            |\n| **Tepidity**                | The liveliness behind the voice, ranging between tepid and vigorous.                                      |\n| **Tightness**               | The containment of the voice, ranging between tight and breathy.                                          |\n\nEach voice attribute can be adjusted relative to the base voice’s characteristics. Values range from `-100` to `100`, with `0` as the default.\nSetting all attributes to their default values will keep the base voice unchanged.\n\n## Crafting custom voices\n\nSee instructions below for customizing a voice through the [Portal](https://platform.hume.ai).\n\n<Steps>\n  ### Navigate to the Voices page\n\n  In the Portal, find the [EVI Voices page](https://platform.hume.ai/evi/voices). Click the **Create voice** button to begin.\n\n  <Frame>\n    <img\n      src=\"file:4e8278cf-7cdd-4def-94cd-8bd382a314c7\"\n      alt=\"Navigating to the voices page, step 1 of EVI custom voice creation\"\n    />\n  </Frame>\n\n  ### Create a new custom voice\n\n  Enter a name for your custom voice and select a base voice. Then, adjust the attributes.\n\n  <Frame>\n    <img\n      src=\"file:44511f30-44b5-487c-84c0-f514331e885a\"\n      alt=\"Create voice menu with voice attribute options, step 2 of EVI custom voice creation\"\n    />\n  </Frame>\n\n  ### Test your custom voice\n\n  As you make tweaks to the attributes, sample audio can be generated by clicking the \"▶\" button in the **Voice sample** section at the bottom of the form.\n\n  <Frame>\n    <img\n      src=\"file:79ee9311-4092-468b-ba50-f540c68b5c87\"\n      alt=\"Testing a custom voice with audio playback, step 3 of EVI custom voice creation\"\n    />\n  </Frame>\n\n  ### Use your custom voice\n\n  The newly created voice can now be deployed. From the Voices page, click **Use** to create an EVI configuration with it.\n\n  <Frame caption=\"Successful voice creation\">\n    <img\n      src=\"file:840559bc-630b-495c-b784-d9a9f4ae7278\"\n      alt=\"Accessing a custom voice for use with an EVI, step 4 of EVI custom voice creation\"\n    />\n  </Frame>\n\n  When [creating an EVI configuration](/docs/empathic-voice-interface-evi/configuration#choose-voice), choose **Custom voice** and press the **+ Select** button. Then, press **Select existing custom voice...** and confirm the custom voice you would like to use.\n\n  <Frame caption=\"Selecting a custom voice in an EVI configuration\">\n    <img\n      src=\"file:ea93e491-4b21-4424-b117-05298ef968e7\"\n      alt=\"Selecting a custom voice in an EVI configuration\"\n    />\n  </Frame>\n\n</Steps>\n---\n"
      },
      "docs/pages/documentation/empathic-voice-interface/tool-use/tool-use.mdx": {
        "markdown": "---\ntitle: Tool use\nexcerpt: Guide to using function calling with the Empathic Voice Interface (EVI).\n---\n\nEVI simplifies the integration of external APIs through function calling. Developers can integrate custom functions that are invoked dynamically based on the user’s\ninput, enabling more useful conversations. There are two key concepts for using function calling with EVI: **Tools** and **Configurations** (Configs):\n\n- **Tools** are resources that EVI uses to do things, like search the web or call external APIs. For example, tools can check the weather, update databases, schedule appointments, or take\n  actions based on what occurs in the conversation. While the tools can be user-defined, Hume also offers natively implemented tools, like web search, which are labeled as “built-in” tools.\n\n- **Configurations** enable developers to customize an EVI’s behavior and incorporate these custom tools. Setting up an EVI configuration allows developers to seamlessly integrate\n  their tools into the voice interface. A configuration includes prompts, user-defined tools, and other settings.\n\n<Frame>\n  <img\n    src='file:86296715-6e31-4d0f-ab26-e50ddc3f5937'\n    alt='Tool use flow diagram'\n  />\n</Frame>\n\n<Callout intent='info'>\n  Currently, our function calling feature only supports\n  [OpenAI](https://platform.openai.com/docs/guides/function-calling) and [Anthropic](https://docs.anthropic.com/en/docs/tool-use) models.\n  For the best results, we suggest choosing a fast and intelligent LLM that performs well on function calling benchmarks.\n  On account of its speed and intelligence, we recommend [Claude 3.5 Haiku](https://www.anthropic.com/news/claude-3-haiku) as the supplemental LLM in your EVI configuration when using tools.\n  Function calling is not available if you are using your own [custom language\n  model](/docs/empathic-voice-interface-evi/custom-language-model). We plan to\n  support more function calling LLMs in the future.\n</Callout>\n\nThe focus of this guide is on creating a Tool and a Configuration that allows EVI to use the Tool. Additionally, this guide details the message flow of function calls within a\nsession, and outlines the expected responses when function calls fail. Refer to our [Configuration Guide](/docs/empathic-voice-interface-evi/configuration) for detailed,\nstep-by-step instructions on how to create and use an EVI Configuration.\n\n<Callout intent='info'>\n  Explore these sample projects to see how Tool use can be implemented in [TypeScript](https://github.com/HumeAI/hume-api-examples/tree/main/evi-typescript-function-calling),\n  [Next.js](https://github.com/HumeAI/hume-api-examples/tree/main/evi-next-js-function-calling), and [Python](https://github.com/HumeAI/hume-api-examples/tree/main/evi-python-function-calling).\n</Callout>\n\n## Setup\n\nFor EVI to leverage tools or call functions, a configuration must be created with the tool’s definition. Our step-by-step guide below walks you through creating a tool and adding it to a configuration, using either a no-code approach through our [Portal](https://platform.hume.ai) or a full-code approach through our API.\n\n<Tabs>\n  <Tab title='No code'>\n    <Steps>\n    ### Create a Tool\n\n    We will first create a Tool with a specified function. In this example, we will create a tool for getting the weather. In the [Portal](https://platform.hume.ai), navigate to the [EVI Tools page](https://platform.hume.ai/evi/tools). Click the **Create tool** button to begin.\n    \n    <Frame>\n      <img \n        src=\"file:b766cb81-fda1-4dcd-9e89-a14873599be8\"\n        alt=\"EVI Tools page\"\n      />\n    </Frame>\n\n    ### Fill in Tool details\n\n    Next, we will fill in the details for a weather tool named `get_current_weather`. This tool fetches the current weather conditions in a specified location and reports the temperature in either Celsius or Fahrenheit. We can establish the tool's behavior by completing the following fields:\n    - **Name**: Specify the name of the function that the language model will invoke. Ensure it begins with a lowercase letter and only contains letters, numbers, or underscores.\n    - **Description**: Provide a brief description of what the function does.\n    - **Parameters**: Define the function's input parameters using a JSON schema.\n\n    <Frame>\n      <img \n        src=\"file:5b77ab77-1977-4e4b-bb1c-73c619514841\"\n        alt=\"EVI Create function interface\"\n      />\n    </Frame>\n\n    The JSON schema defines the expected structure of a function's input parameters. Here's an example JSON schema we can use for the [parameters](/reference/empathic-voice-interface-evi/tools/create-tool#request.body.parameters) field of a weather function:\n    <CodeBlock title='parameters'>\n      ```json\n      {\n        \"type\": \"object\",\n        \"required\": [\"location\", \"format\"],\n        \"properties\": {\n          \"location\": {\n            \"type\": \"string\",\n            \"description\": \"The city and state, e.g. San Francisco, CA\"\n          },\n          \"format\": {\n            \"type\": \"string\",\n            \"enum\": [\"celsius\", \"fahrenheit\"],\n            \"description\": \"The temperature unit to use. Infer this from the user's location.\"\n          }\n        }\n      }\n      ```\n    </CodeBlock>\n\n    ### Create a Configuration\n    Next, we will create an EVI Configuration called Weather Assistant Config. This configuration will utilize the `get_current_weather` Tool created in the previous step. See our [Configuration guide](https://dev.hume.ai/docs/empathic-voice-interface-evi/configuration) for step-by-step instructions on how to create a configuration.\n    During the **Set up LLM** step, remember to select an Anthropic or OpenAI model for tool use support.\n\n    <Frame>\n      <img \n        src=\"file:b53edd71-c647-472f-8f09-0d6760f7b715\" \n        alt=\"Create a configuration called Weather Assistant Config in the Hume portal\"\n      />\n    </Frame>\n\n    ### Add Tool to Configuration\n    Finally, we will specify the `get_current_weather` Tool in the Weather Assistant Config. Navigate to the **Tools** section of the EVI Config details page. Click the **Add** button to add a function to your configuration. \n    Since we have already created a `get_current_weather` Tool in previous steps, we can simply select **Add existing tool...** from the dropdown to specify it. \n\n    <Frame>\n      <img \n        src=\"file:8a2fd7bc-237b-4c45-8778-ff6c581c1865\" \n        alt=\"Add tool to configuration within the Hume portal\"\n      />\n    </Frame>\n\n    Select the tool to add `get_current_weather` to your configuration, then complete the remaining steps to create the configuration.\n\n    <Frame>\n      <img \n        src=\"file:6c4b7e2f-bbaa-41a6-a117-4eccfccc5f14\" \n        alt=\"Add get_current_weather to configuration within the Hume portal\"\n      />\n    </Frame>\n\n    </Steps>\n  </Tab>\n  <Tab title='Full code'>\n\n    <Steps>\n    ### Create a Tool\n\n    We will first create a Tool with a specified function. In this example, we will create a tool for getting the weather. Create this tool by making a POST request to\n    [/tools](/reference/empathic-voice-interface-evi/tools/create-tool) using the following request body:\n\n    <CodeBlock title='Request body'>\n      ```json\n      {\n        \"name\": \"get_current_weather\",\n        \"version_description\": \"Fetches current weather and uses celsius or fahrenheit based on user's location.\",\n        \"description\": \"This tool is for getting the current weather.\",\n        \"parameters\": \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\"\n      }\n      ```\n    </CodeBlock>\n\n    <Callout intent='warning'>\n      The `parameters` field must contain a valid JSON schema.\n    </Callout>\n\n    <CodeBlock title='Sample response body'>\n      ```json\n      {\n        \"tool_type\": \"FUNCTION\",\n        \"id\": \"15c38b04-ec9c-4ae2-b6bc-5603512b5d00\",\n        \"version\": 0,\n        \"version_description\": \"Fetches current weather and uses celsius or fahrenheit based on user's location.\",\n        \"name\": \"get_current_weather\",\n        \"created_on\": 1714421925626,\n        \"modified_on\": 1714421925626,\n        \"fallback_content\": null,\n        \"description\": \"This tool is for getting the current weather.\",\n        \"parameters\": \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\"\n      }\n      ```\n    </CodeBlock>\n\n    Record the value in the `id` field, as we will use it to specify the newly created Tool in the next step.\n\n    ### Create a Configuration\n\n    Next, we will create an EVI Configuration called Weather Assistant Config, and include the created Tool by making a POST request to [/configs](/reference/empathic-voice-interface-evi/configs/create-config) with the\n    following request body:\n\n    <CodeBlock title='Request body'>\n      ```json\n      {\n        \"name\": \"Weather Assistant Config\",\n        \"language_model\": {\n          \"model_provider\": \"OPEN_AI\",\n          \"model_resource\": \"gpt-3.5-turbo\",\n          \"temperature\": null\n        },\n        \"tools\": [\n          {\n            \"id\": \"15c38b04-ec9c-4ae2-b6bc-5603512b5d00\",\n            \"version\": 0\n          }\n        ]\n      }\n      ```\n    </CodeBlock>\n\n    <CodeBlock title='Sample response body'>\n      ```json\n      {\n        \"id\": \"87e88a1a-3768-4a01-ba54-2e6d247a00a7\",\n        \"version\": 0,\n        \"version_description\": null,\n        \"name\": \"Weather Assistant Config\",\n        \"created_on\": 1714421581844,\n        \"modified_on\": 1714421581844,\n        \"prompt\": null,\n        \"voice\": null,\n        \"language_model\": {\n          \"model_provider\": \"OPEN_AI\",\n          \"model_resource\": \"gpt-3.5-turbo\",\n          \"temperature\": null\n        },\n        \"tools\": [\n          {\n            \"tool_type\": \"FUNCTION\",\n            \"id\": \"15c38b04-ec9c-4ae2-b6bc-5603512b5d00\",\n            \"version\": 0,\n            \"version_description\": \"Fetches current weather and uses celsius or fahrenheit based on user's location.\",\n            \"name\": \"get_current_weather\",\n            \"created_on\": 1714421925626,\n            \"modified_on\": 1714421925626,\n            \"fallback_content\": null,\n            \"description\": \"This tool is for getting the current weather.\",\n            \"parameters\": \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\"\n          }\n        ],\n        \"builtin_tools\": []\n      }\n      ```\n    </CodeBlock>\n\n    <Callout intent='info'>\n      Ensure your tool definitions conform to the language model's schema. The\n      specified language model will be the one to execute the function calls.\n    </Callout>\n\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Function calling\n\nIn this section, we will go over the end-to-end flow of a function call within a chat session. This flow will be predicated on having specified the\n**Weather Assistant Config** when establishing a connection with EVI. See our [Configuration Guide](/docs/empathic-voice-interface-evi/configuration#apply-the-configuration)\nfor details on how to apply your configuration when connecting.\n\n<Callout intent='info'>\nCheck out the [TypeScript](https://github.com/HumeAI/hume-api-examples/blob/main/evi-typescript-function-calling/src/handleToolCall.ts) and [Python](https://github.com/HumeAI/hume-api-examples/blob/main/evi-python-function-calling/main.py)\nexample projects for complete implementations of the weather Tool you'll build in this tutorial.\n</Callout>\n\n<Steps>\n### Define a function\nWe must first define a function for your Tool. This function will take the\nsame [parameters](/reference/empathic-voice-interface-evi/tools/create-tool#request.body.parameters) as those specified during your Tool's creation.\n\nFor this tutorial, we will define a function that calls a weather API (e.g., the [Geocoding API](https://geocode.maps.co/)) to retrieve the weather for a designated city in a specified format. This weather function will accept `location` and `format` as its parameters.\n\nSee the code below for a sample implementation:\n\n<CodeBlocks>\n  <CodeBlock title=\"TypeScript\">\n    ```ts\n    async function fetchWeather(location: string, format: string): Promise<string> {\n      // Fetch the location's geographic coordinates using Geocoding API\n      const locationApiURL = `https://geocode.maps.co/search?q=${location}&api_key=${YOUR_WEATHER_API_KEY}`;\n      const locationResponse = await fetch(locationApiURL);\n      const locationData = await locationResponse.json();\n\n      // Extract latitude and longitude from fetched location data\n      const { lat, lon } = locationData[0];\n\n      // Fetch point metadata using the extracted location coordinates\n      const pointMetadataEndpoint = `https://api.weather.gov/points/${parseFloat(\n        lat\n      ).toFixed(3)},${parseFloat(lon).toFixed(3)}`;\n      const pointMetadataResponse = await fetch(pointMetadataEndpoint);\n      const pointMetadata = await pointMetadataResponse.json();\n\n      // Extract weather forecast URL from point metadata\n      const forecastUrl = pointMetadata.properties.forecast;\n\n      // Fetch the weather forecast using the forecast URL\n      const forecastResponse = await fetch(forecastUrl);\n      const forecastData = await forecastResponse.json();\n      const forecast = JSON.stringify(forecastData.properties.periods);\n\n      // Return the temperature in the specified format\n      return `${forecast} in ${format}`;\n    }\n    ```\n  </CodeBlock>\n\n  <CodeBlock title=\"Python\">\n    ```python\n    async def fetch_weather(location: str, format: str) -> str:\n        # Construct the URL for the Weather API request\n        location_api_url = f\"https://geocode.maps.co/search?q={location}&api_key={YOUR_WEATHER_API_KEY}\"\n\n        # Create an HTTP client that automatically follows redirects\n        async with httpx.AsyncClient(follow_redirects=True) as client:\n            try:\n                # Step 1: Fetch location data\n                location_response = await client.get(location_api_url)\n                location_response.raise_for_status()\n                location_data = location_response.json()\n            except httpx.HTTPError as e:\n                return f\"ERROR: Failed to fetch location data. {str(e)}\"\n\n            if not location_data:\n                return \"ERROR: No location data found.\"\n\n            try:\n                # Extract latitude and longitude from the location data\n                lat = location_data[0]['lat']\n                lon = location_data[0]['lon']\n            except (IndexError, KeyError):\n                return \"ERROR: Unable to extract latitude and longitude.\"\n\n            # Construct the URL for the Weather.gov API points endpoint\n            point_metadata_endpoint = f\"https://api.weather.gov/points/{float(lat):.4f},{float(lon):.4f}\"\n\n            try:\n                # Step 2: Fetch point metadata\n                point_metadata_response = await client.get(point_metadata_endpoint)\n                point_metadata_response.raise_for_status()\n                point_metadata = point_metadata_response.json()\n            except httpx.HTTPError as e:\n                return f\"ERROR: Failed to fetch point metadata. {str(e)}\"\n\n            try:\n                # Extract the forecast URL from the point metadata\n                forecast_url = point_metadata['properties']['forecast']\n            except KeyError:\n                return \"ERROR: Unable to extract forecast URL from point metadata.\"\n\n            try:\n                # Step 3: Fetch the weather forecast\n                forecast_response = await client.get(forecast_url)\n                forecast_response.raise_for_status()\n                forecast_data = forecast_response.json()\n            except httpx.HTTPError as e:\n                return f\"ERROR: Failed to fetch weather forecast. {str(e)}\"\n\n            try:\n                # Extract the forecast periods from the response\n                periods = forecast_data['properties']['periods']\n            except KeyError:\n                return \"ERROR: Unable to extract forecast periods.\"\n\n            # Validate the desired temperature format\n            desired_unit = format.lower()\n            if desired_unit not in ['fahrenheit', 'celsius']:\n                return \"ERROR: Invalid format specified. Please use 'fahrenheit' or 'celsius'.\"\n\n            # Convert temperatures for all periods to the desired unit\n            for period in periods:\n                temperature = period.get('temperature')\n                temperature_unit = period.get('temperatureUnit')\n\n                if temperature is not None and temperature_unit is not None:\n                    if desired_unit == 'celsius' and temperature_unit == 'F':\n                        # Convert Fahrenheit to Celsius\n                        converted_temp = round((temperature - 32) * 5 / 9)\n                        period['temperature'] = converted_temp\n                        period['temperatureUnit'] = 'C'\n                    elif desired_unit == 'fahrenheit' and temperature_unit == 'C':\n                        # Convert Celsius to Fahrenheit\n                        converted_temp = round((temperature * 9 / 5) + 32)\n                        period['temperature'] = converted_temp\n                        period['temperatureUnit'] = 'F'\n\n            # Return the forecast data as a JSON-formatted string\n            forecast = json.dumps(periods, indent=2)\n            return forecast\n    ```\n  </CodeBlock>\n</CodeBlocks>\n\n<Callout intent='info'>\n  Instead of calling a weather API, you can hard code a return value like `75F` as a means to quickly test for the sake of this tutorial.\n</Callout>\n\n### EVI signals function call\n\nOnce EVI is configured with your Tool, it will automatically infer when to signal a function call within a chat session. With EVI configured to use the `get_current_weather` Tool, we can now ask it: \"what is the weather in New York?\"\n\nLet's try it out in the [EVI Playground](https://platform.hume.ai/evi/playground). \n  <Frame>\n    <img \n      src=\"file:df010803-6b9b-4d5c-9653-f77984541fe2\" \n      alt=\"Ask EVI what is the weather in New York\"\n    />\n  </Frame>\n\n  We can expect EVI to respond with a [User Message](/reference/empathic-voice-interface-evi/chat/chat#receive.User%20Message.type) and a [Tool Call](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.name) message:\n\n  <CodeBlock title=\"Sample User Message\">\n    ```json\n    {\n      \"type\": \"user_message\",\n      \"message\": {\n        \"role\": \"user\",\n        \"content\": \"What's the weather in New York?\"\n      },\n      // ...etc\n    }\n    ```\n  </CodeBlock>\n\n  <CodeBlock title=\"Sample Tool Call message\">\n    ```json\n    {\n      \"type\": \"tool_call\",\n      \"tool_type\": \"function\",\n      \"response_required\": true,\n      \"tool_call_id\": \"call_m7PTzGxrD0i9oCHiquKIaibo\",\n      \"name\": \"get_current_weather\",\n      \"parameters\": \"{\\\"location\\\":\\\"New York\\\",\\\"format\\\":\\\"fahrenheit\\\"}\"\n    }\n    ```\n  </CodeBlock>\n\n<Callout intent='info'>\n  Currently, EVI does not support parallel function calling. Only one function call can be processed at a time.\n</Callout>\n\n### Extract arguments from Tool Call message\nUpon receiving a [Tool Call](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.name) message from EVI, we will parse the [parameters](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.parameters) and extract the arguments.\n\nThe code below demonstrates how to extract the `location` and `format` arguments, which the user-defined fetch weather function is expecting, from a received **Tool Call** message.\n\n<CodeBlocks>\n  <CodeBlock title=\"TypeScript\">\n      ```ts\n      import { Hume } from 'hume';\n\n      async function handleToolCallMessage(\n        toolCallMessage: Hume.empathicVoice.ToolCallMessage,\n        socket: Hume.empathicVoice.chat.ChatSocket): Promise<void> {\n        if (toolCallMessage.name === \"get_current_weather\") {\n          // 1. Parse the parameters from the Tool Call message\n          const args = JSON.parse(toolCallMessage.parameters) as {\n            location: string;\n            format: string;\n          };\n          // 2. Extract the individual arguments\n          const { location, format } = args;\n          // ...etc.\n        }\n      }\n      ```\n  </CodeBlock>\n  <CodeBlock title=\"Python\">\n    ```python\n    import asyncio\n    from hume.client import AsyncHumeClient\n    from hume.empathic_voice import ToolCallMessage, ToolResponseMessage\n    from typing import Optional\n\n    async def handle_tool_call(self, message: ToolCallMessage) -> Optional[ToolResponseMessage]:\n        # Extract the tool name and ID from the message\n        tool_name = message.name\n        tool_call_id = message.tool_call_id\n        \n        # 1. Parse the parameters from the Tool Call message\n        tool_parameters = json.loads(message.parameters)\n\n        if tool_name == \"get_current_weather\":\n            # 2. Extract the individual arguments\n            obtained_location = tool_parameters.get('location')\n            obtained_format = tool_parameters.get('format', 'text')\n\n            # ...etc.\n    ```\n  </CodeBlock>\n</CodeBlocks>\n\n### Invoke function call\nNext, we will pass the extracted arguments into the previously defined fetch weather function. We will capture the return value to send back to EVI: \n\n<CodeBlocks>\n  <CodeBlock title=\"TypeScript\">\n      ```ts\n      import { Hume } from 'hume';\n\n      async function handleToolCallMessage(\n        toolCallMessage: Hume.empathicVoice.ToolCallMessage,\n        socket: Hume.empathicVoice.chat.ChatSocket): Promise<void> {\n        if (toolCallMessage.name === \"get_current_weather\") {\n          // 1. Parse the parameters from the Tool Call message\n          const args = JSON.parse(toolCallMessage.parameters) as {\n            location: string;\n            format: string;\n          };\n          // 2. Extract the individual arguments\n          const { location, format } = args;\n          // 3. Call fetch weather function with extracted arguments\n          const weather = await fetchWeather(location, format);\n          // ...etc.\n        }\n      }\n      ```\n  </CodeBlock>\n  <CodeBlock title=\"Python\">\n    ```python\n    import asyncio\n    from hume.client import AsyncHumeClient\n    from hume.empathic_voice import ToolCallMessage, ToolResponseMessage\n    from typing import Optional\n\n    async def handle_tool_call(self, message: ToolCallMessage) -> Optional[ToolResponseMessage]:\n        # Extract the tool name and ID from the message\n        tool_name = message.name\n        tool_call_id = message.tool_call_id\n        \n        # 1. Parse the parameters from the Tool Call message\n        tool_parameters = json.loads(message.parameters)\n\n        if tool_name == \"get_current_weather\":\n            # 2. Extract the individual arguments\n            obtained_location = tool_parameters.get('location')\n            obtained_format = tool_parameters.get('format', 'text')\n\n            if obtained_location:\n                # 3. Call fetch weather function with extracted arguments\n                weather = await fetch_weather(location=obtained_location, format=obtained_format)\n                \n                # ...etc.\n    ```\n  </CodeBlock>\n</CodeBlocks>\n\n### Send function call result\n\nUpon receiving the return value of your function, we will send a [Tool Response](/reference/empathic-voice-interface-evi/chat/chat#send.Tool%20Response%20Message.content) message containing the result. The specified `tool_call_id` must match the one received in\nthe [Tool Call](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.tool_call_id) message from EVI:\n\n<CodeBlocks>\n  <CodeBlock title=\"TypeScript\">\n    ```ts\n    import { Hume } from 'hume';\n\n    async function handleToolCallMessage(\n      toolCallMessage: Hume.empathicVoice.ToolCallMessage,\n      socket: Hume.empathicVoice.chat.ChatSocket): Promise<void> {\n      if (toolCallMessage.name === \"get_current_weather\") {\n        // 1. Parse the parameters from the Tool Call message\n        const args = JSON.parse(toolCallMessage.parameters) as {\n          location: string;\n          format: string;\n        };\n        // 2. Extract the individual arguments\n        const { location, format } = args;\n        // 3. Call fetch weather function with extracted arguments\n        const weather = await fetchWeather(location, format);\n        // 4. Construct a Tool Response message containing the result\n        const toolResponseMessage = {\n          type: \"tool_response\",\n          toolCallId: toolCallMessage.toolCallId,\n          content: weather,\n        };\n        // 5. Send Tool Response message to the WebSocket\n        socket.sendToolResponseMessage(toolResponseMessage);\n      }\n    }\n    ```\n  </CodeBlock>\n  <CodeBlock title=\"Python\">\n    ```python\n    import asyncio\n    from hume.client import AsyncHumeClient\n    from hume.empathic_voice import ToolCallMessage, ToolResponseMessage\n    from typing import Optional\n\n    async def handle_tool_call(self, message: ToolCallMessage) -> Optional[ToolResponseMessage]:\n        # Extract the tool name and ID from the message\n        tool_name = message.name\n        tool_call_id = message.tool_call_id\n        \n        # 1. Parse the parameters from the Tool Call message\n        tool_parameters = json.loads(message.parameters)\n\n        if tool_name == \"get_current_weather\":\n            # 2. Extract the individual arguments\n            obtained_location = tool_parameters.get('location')\n            obtained_format = tool_parameters.get('format', 'text')\n\n            if obtained_location:\n                # 3. Call fetch weather function with extracted arguments\n                weather = await fetch_weather(location=obtained_location, format=obtained_format)\n                \n                if not weather.startswith(\"ERROR\"):\n                    # 4. Construct a Tool Response message containing the result\n                    resp = ToolResponseMessage(\n                        tool_call_id=tool_call_id,\n                        content=weather\n                    )\n                    # 5. Send Tool Response message to the WebSocket\n                    await self.socket.send_tool_response(resp)\n                    print(f\"(Sent ToolResponseMessage for tool_call_id {tool_call_id}: {weather})\\n\")\n                    return resp\n\n        # Return None if the tool is not recognized or if there's an error\n        return None\n    ```\n  </CodeBlock>\n</CodeBlocks>\n\nLet's try it in the [EVI Playground](https://platform.hume.ai/evi/playground). Enter the return value of your function in the input field below the **Tool Call** message, and click **Send Response**. In practice, you will use the actual return value from your function call. However, for demonstration purposes, we will assume a return value of \"75F\".\n\n  <Frame>\n    <img \n      src=\"file:5229a458-92b9-4a88-befe-61ebfefde475\" \n      alt=\"Send EVI function result\"\n    />\n  </Frame>\n\n### EVI responds\n\nAfter the interface receives the [Tool Response](/reference/empathic-voice-interface-evi/chat/chat#send.Tool%20Response%20Message.content) message, it will then send an [Assistant Message](/reference/empathic-voice-interface-evi/chat/chat#receive.Assistant%20Message.message) containing the response generated from the reported result of the function call:\n\n  <CodeBlock title=\"Sample assistant_message\">\n    ```json\n    {\n      \"type\": \"assistant_message\",\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"The current temperature in New York, NY is 75F.\"\n      }\n    }\n    ```\n  </CodeBlock>\n\n  See how it works in the [EVI Playground](https://platform.hume.ai/evi/playground). \n\n  <Frame>\n    <img src=\"file:381cf624-cadd-4b23-b362-681b3a21d742\" alt=\"EVI responds with function call result\"/>\n  </Frame>\n</Steps>\n\nTo summarize, **Tool Call** serves as a programmatic tool for intelligently signaling when you should invoke your function. EVI does not invoke the function for you. You will need to define a function, invoke the function, and pass the return value of your function to EVI via a [Tool Response](/reference/empathic-voice-interface-evi/chat/chat#send.Tool%20Response%20Message.content) message. EVI will generate a response based on the content of your message.\n\n## Using built-in tools\n\nUser-defined tools allow EVI to identify when a function should be invoked, but you will need to invoke the function itself. On the other hand, Hume also provides built-in tools that are natively integrated. This\nmeans that you don't need to define the function; EVI handles both determining when the function needs to be called and invoking it.\n\nHume supports the following built-in tools:\n\n- **web_search:** Enables EVI to search the web for real-time information when needed.\n- **hang_up:** Closes the WebSocket connection with status code `1000` when appropriate (e.g., after detecting a farewell, signaling the end of the conversation).\n\nThis section explains how to specify built-in tools in your configurations and details the message flow you can expect when EVI uses a built-in tool during a chat session.\n\n<Steps>\n\n### Specify built-in tool in EVI configuration\n\nLet's begin by creating a configuration which includes the built-in web search tool. To specify the web search tool in your EVI configuration, during the **Add tools** step, \nensure **Web search** is enabled. Refer to our [Configuration Guide](/docs/empathic-voice-interface-evi/configuration#create-a-configuration) for more details on creating a configuration. \n\n<Frame>\n  <img \n    src=\"file:fb900efe-a052-41dd-ab04-1ec62e5fb4a5\" \n    alt=\"Create a configuration with a built-in web search tool\"\n  />\n</Frame>\n\nAlternatively, you can specify the built-in tool by making a POST request to [/configs](/reference/empathic-voice-interface-evi/configs/create-config) with the following request body:\n\n<CodeBlock title='Request body'>\n  ```json\n  {\n    \"name\": \"Web Search Config\",\n    \"language_model\": {\n      \"model_provider\": \"OPEN_AI\",\n      \"model_resource\": \"gpt-3.5-turbo\"\n    },\n    \"builtin_tools\": [\n      { \n        \"name\": \"web_search\",\n        \"fallback_content\": \"Optional fallback content to inform EVI’s spoken response if web search is not successful.\"\n      }\n    ]\n  }\n  ```\n</CodeBlock>\n\nUpon success, expect EVI to return a response similar to this example:\n\n<CodeBlock title='Sample response body'>\n  ```json\n  {\n    \"id\": \"3a60e85c-d04f-4eb5-8076-fb4bd344d5d0\",\n    \"version\": 0,\n    \"version_description\": null,\n    \"name\": \"Web Search Config\",\n    \"created_on\": 1714421925626,\n    \"modified_on\": 1714421925626,\n    \"prompt\": null,\n    \"voice\": null,\n    \"language_model\": {\n      \"model_provider\": \"OPEN_AI\",\n      \"model_resource\": \"gpt-3.5-turbo\",\n      \"temperature\": null\n    },\n    \"tools\": [],\n    \"builtin_tools\": [\n      {\n        \"tool_type\": \"BUILTIN\",\n        \"name\": \"web_search\",\n        \"fallback_content\": \"Optional fallback content to inform EVI’s spoken response if web search is not successful.\"\n      }\n    ]\n  }\n  ```\n</CodeBlock>\n\n### EVI uses built-in tool\n\nNow that we've created an EVI configuration which includes the built-in web search tool, let's test it out in the [EVI Playground](https://platform.hume.ai/evi/playground).\nTry asking EVI a question that requires web search, like \"what is the latest news with AI research?\"\n\n<Frame>\n    <img src=\"file:fc3dcfc4-5c54-443e-8f6b-a560c3c23b79\" alt=\"Ask EVI what is the latest news with AI research\"/>\n</Frame>\n\nEVI will send a response generated from the web search results:\n\n<Frame>\n    <img src=\"file:577ff3fb-b78f-43b9-8146-9790327b6de3\" alt=\"EVI sends a response generated from web search results\"/>\n</Frame>\n\nLet's review the message flow for when web search is invoked.\n\n<CodeBlock title=\"Web search message flow\">\n  ```json\n  // 1. User asks EVI for the latest news in AI research\n  {\n    \"type\": \"user_message\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"What is the latest news with AI research?\"\n    },\n    // ...etc\n  }\n  // 2. EVI infers it needs to use web search, generates a search query, and invokes Hume's native web search function\n  {\n    \"name\": \"web_search\", \n    \"parameters\": \"{\\\"query\\\":\\\"latest news AI research\\\"}\", \n    \"tool_call_id\": \"call_zt1NYGpPkhR7v4kb4RPxTkLn\", \n    \"type\": \"tool_call\", \n    \"tool_type\": \"builtin\", \n    \"response_required\": false\n  }\n  // 3. EVI sends back the web search results \n  {\n    \"type\": \"tool_response\", \n    \"tool_call_id\": \"call_zt1NYGpPkhR7v4kb4RPxTkLn\", \n    \"content\": \"{ \\”summary\\”:null, “references”: [{\\”content\\”:\\”Researchers have demonstrated a new method...etc.\\”, \\”url\\”:\\”https://www.sciencedaily.com/news/computers_math/artificial_intelligence/\\”, \\”name\\”:\\”Artificial Intelligence News -- ScienceDaily\\”}] }\", \n    \"tool_name\": \"web_search\", \n    \"tool_type\": \"builtin\"\n  }\n  // 4. EVI sends a response generated from the web search results\n  {\n    \"type\": \"assistant_message\", \n    \"message\": {\n      \"role\": \"assistant\", \n      \"content\": \"Oh, there's some interesting stuff happening in AI research right now.\"\n    },\n    // ...etc\n  }\n  {\n    \"type\": \"assistant_message\", \n    \"message\": {\n      \"role\": \"assistant\", \n      \"content\": \"Just a few hours ago, researchers demonstrated a new method using AI and computer simulations to train robotic exoskeletons.\"\n    },\n    // ...etc\n  }\n  ```\n</CodeBlock>\n\n</Steps>\n\n## Interruptibility\n\nFunction calls can be interrupted to cancel them or to resend them with updated parameters.\n\n### Canceling a function call\n\nJust as EVI is able to infer when to make a function call, it can also infer from the user's input when to cancel one. Here is an overview of what the message flow would look like:\n\n<Frame>\n  <img \n    src=\"file:cbe4de6a-b30a-4ac7-86d2-d3e03a3a2f17\" \n    alt=\"User signals they want to cancel a function call\"\n  />\n</Frame>\n\n<Frame>\n  <img \n    src=\"file:5a657dbb-088e-4153-a76c-b642876bd52a\" \n    alt=\"EVI infers from user input to cancel function call\"\n  />\n</Frame>\n\n<CodeBlock title=\"Cancel function call message flow\">\n  ```json\n  // 1. User asks what the weather is in New York\n  {\n    \"type\": \"user_message\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"What's the weather in New York?\"\n    },\n    // ...etc\n  }\n  // 2. EVI infers it is time to make a function call\n  {\n    \"type\": \"tool_call\",\n    \"tool_type\": \"function\",\n    \"response_required\": true,\n    \"tool_call_id\": \"call_m7PTzGxrD0i9oCHiquKIaibo\",\n    \"name\": \"get_current_weather\",\n    \"parameters\": \"{\\\"location\\\":\\\"New York\\\",\\\"format\\\":\\\"fahrenheit\\\"}\"\n  }\n  // 3. User communicates sudden disinterested in the weather\n  {\n    \"type\": \"user_message\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"Actually, never mind.\"\n    }\n  }\n  // 4. EVI infers the function call should be canceled\n  {\n      \"type\": \"assistant_message\",\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"If you change your mind or need any weather information in the future, feel free to let me know.\"\n      },\n      // ...etc\n    }\n  ```\n</CodeBlock>\n\n### Updating a function call\n\nSometimes we don't necessarily want to cancel the function call, and instead want to update the parameters. EVI can infer the difference. Below is a sample flow of\ninterrupting the interface to update the parameters of the function call:\n\n<Frame>\n  <img \n    src=\"file:c2f11656-1a45-4bb0-a549-1ec4b6d548a7\" \n    alt=\"User asks EVI the weather in New York\"\n  />\n</Frame>\n\n<Frame>\n  <img \n    src=\"file:4a57b472-a17c-49fe-b1a1-6624b7e4882d\" \n    alt=\"EVI updates function call to get weather in Los Angeles\"\n  />\n</Frame>\n\n<CodeBlock title=\"Update function call message flow\">\n  ```json\n  // 1. User asks EVI what the weather is in New York\n  {\n    \"type\": \"user_message\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"What's the weather in New York?\"\n    },\n    // ...etc\n  }\n  // 2. EVI infers it is time to make a function call\n  {\n    \"type\": \"tool_call\",\n    \"tool_type\": \"function\",\n    \"response_required\": true,\n    \"tool_call_id\": \"call_m7PTzGxrD0i9oCHiquKIaibo\",\n    \"name\": \"get_current_weather\",\n    \"parameters\": \"{\\\"location\\\":\\\"New York\\\",\\\"format\\\":\\\"fahrenheit\\\"}\"\n  }\n  // 3. User communicates to EVI they want the weather in Los Angeles instead\n  {\n    \"type\": \"user_message\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"Actually, Los Angeles.\"\n    }\n  }\n  // 4. EVI infers the parameters to function call should be updated\n  {\n    \"type\": \"tool_call\",\n    \"response_required\": true,\n    \"tool_call_id\": \"call_5RWLt3IMQyayzGdvMQVn5AOQ\",\n    \"name\": \"get_current_weather\",\n    \"parameters\": \"{\\\"location\\\":\\\"Los Angeles\\\",\\\"format\\\":\\\"celsius\\\"}\"\n  }\n  // 5. User sends results of function call to EVI\n  {\n    \"type\": \"tool_response\",\n    \"tool_call_id\":\"call_5RWLt3IMQyayzGdvMQVn5AOQ\",\n    \"content\":\"72F\"\n  }\n  // 6. EVI sends response container function call result\n  {\n    \"type\": \"assistant_message\",\n    \"message\": {\n      \"role\": \"assistant\",\n      \"content\": \"The current weather in Los Angeles is 72F.\"\n    },\n    // ...etc\n  }\n  ```\n</CodeBlock>\n\n## Handling errors\n\nIt's possible for tool use to fail. For example, it can fail if the [Tool Response](/reference/empathic-voice-interface-evi/chat/chat#send.Tool%20Response%20Message.content) message content was not in UTF-8 format or if the function call response timed out. This\nsection outlines how to specify fallback content to be used by EVI to communicate a failure, as well as the message flow for when a function call failure occurs.\n\n### Specifying fallback content\n\nWhen defining your Tool, you can specify fallback content within the Tool's `fallback_content` field. When the Tool fails to generate content, the text in this\nfield will be sent to the LLM in place of a result. To accomplish this, let's update the Tool we created during setup to include fallback content. We can accomplish\nthis by publishing a new version of the Tool via a POST request to [/tools/{id}](/reference/empathic-voice-interface-evi/tools/create-tool-version):\n\n<CodeBlock title='Request body'>\n    ```json\n    {\n      \"version_description\": \"Adds fallback content\",\n      \"description\": \"This tool is for getting the current weather.\",\n      \"parameters\": \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n      \"fallback_content\": \"Something went wrong. Failed to get the weather.\"\n    }\n    ```\n</CodeBlock>\n\n<CodeBlock title=\"Sample response body\">\n  ```json\n  {\n    \"tool_type\": \"FUNCTION\",\n    \"id\": \"36f09fdc-4630-40c0-8afa-6a3bdc4eb4b1\",\n    \"version\": 1,\n    \"version_type\": \"FIXED\",\n    \"version_description\": \"Adds fallback content\",\n    \"name\": \"get_current_weather\",\n    \"created_on\": 1714421925626,\n    \"modified_on\": 1714425632084,\n    \"fallback_content\": \"Something went wrong. Failed to get the weather.\",\n    \"description\": null,\n    \"parameters\": \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the user's location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\"\n  }\n  ```\n</CodeBlock>\n\n### Failure message flow\n\nThis section outlines the sort of messages that can be expected when Tool use fails. After sending a **Tool Response** message, we will know an error, or failure,\noccurred when we receive the [Tool Error](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Error%20Message.type) message:\n\n<Frame>\n  <img src=\"file:5b79312c-1bde-4511-8182-8468964ef5d3\" alt=\"EVI responds with a tool_error message\"/>\n</Frame>\n\n<CodeBlock title=\"Bad function call response error flow\">\n  ```json\n  // 1. User asks EVI what the weather is in New York\n  {\n    \"type\": \"user_message\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"What's the weather in New York?\"\n    },\n    // ...etc\n  }\n  // 2. EVI infers it is time to make a function call\n  {\n    \"type\": \"tool_call\",\n    \"tool_type\": \"function\",\n    \"response_required\": true,\n    \"tool_call_id\": \"call_m7PTzGxrD0i9oCHiquKIaibo\",\n    \"name\": \"get_current_weather\",\n    \"parameters\": \"{\\\"location\\\":\\\"New York\\\",\\\"format\\\":\\\"fahrenheit\\\"}\"\n  }\n  // 3. User sends results of function call to EVI (result not formatted correctly)\n  {\n    \"type\": \"tool_response\",\n    \"tool_call_id\":\"call_5RWLt3IMQyayzGdvMQVn5AOQ\",\n    \"content\":\"MALFORMED RESPONSE\"\n  }\n  // 4. EVI sends response communicating it failed to process the tool_response\n  {\n    \"type\": \"tool_error\",\n    \"tool_call_id\": \"call_m7PTzGxrD0i9oCHiquKIaibo\",\n    \"error\": \"Malformed tool response: <error message here>\",\n    \"fallback_content\": \"Something went wrong. Failed to get the weather.\",\n    \"level\": \"warn\"\n  }\n  // 5. EVI generates a response based on the failure\n  {\n    \"type\": \"assistant_message\",\n    \"message\": {\n      \"role\": \"assistant\",\n      \"content\": \"It looks like there was an issue retrieving the weather information for New York.\"\n    },\n    // ...etc\n  }\n  ```\n</CodeBlock>\n\nLet's cover another type of failure scenario: what if the weather API the function was using was down? In this case, we would send EVI a [Tool Error](/reference/empathic-voice-interface-evi/chat/chat#send.Tool%20Error%20Message.type) message.\nWhen sending the **Tool Error** message, we can specify `fallback_content` to be more specific to the error our function throws. This is what the message flow would be\nfor this type of failure:\n\n<CodeBlock title=\"Failed function call flow\">\n  ```json\n  // 1. User asks EVI what the weather is in New York\n  {\n    \"type\": \"user_message\",\n    \"message\": {\n      \"role\": \"user\",\n      \"content\": \"What's the weather in New York?\"\n    },\n    // ...etc\n  }\n  // 2. EVI infers it is time to make a function call\n  {\n    \"type\": \"tool_call\",\n    \"tool_type\": \"function\",\n    \"response_required\": true,\n    \"tool_call_id\": \"call_m7PTzGxrD0i9oCHiquKIaibo\",\n    \"name\": \"get_current_weather\",\n    \"parameters\": \"{\\\"location\\\":\\\"New York\\\",\\\"format\\\":\\\"fahrenheit\\\"}\"\n  }\n  // 3. Function failed, so we send EVI a message communicating the failure on our end\n  {\n    \"type\": \"tool_error\",\n    \"tool_call_id\": \"call_m7PTzGxrD0i9oCHiquKIaibo\",\n    \"error\": \"Malformed tool response: <error message here>\",\n    \"fallback_content\": \"Function execution failure - weather API down.\",\n    \"level\": \"warn\"\n  }\n  // 4. EVI generates a response based on the failure\n  {\n    \"type\": \"assistant_message\",\n    \"message\": {\n      \"role\": \"assistant\",\n      \"content\": \"Sorry, our weather resource is unavailable. Can I help with anything else?\"\n    },\n    // ...etc\n  }\n  ```\n</CodeBlock>\n\nLet's revisit our function for handling **Tool Call** messages from the [Function Calling](/docs/empathic-voice-interface-evi/tool-use#function-calling) section.\nWe can now add support for error handling by sending **Tool Error** messages to EVI.\nThis will enable our function to handle cases where fetching the weather fails or the requested tool is not found:\n\n<CodeBlocks>\n  <CodeBlock title=\"TypeScript\">\n    ```ts\n    import { Hume } from 'hume';\n\n    async function handleToolCallMessage(\n      toolCallMessage: Hume.empathicVoice.ToolCallMessage,\n      socket: Hume.empathicVoice.chat.ChatSocket): Promise<void> {\n      if (toolCallMessage.name === \"get_current_weather\") {\n        try{\n          // parse the parameters from the Tool Call message\n          const args = JSON.parse(toolCallMessage.parameters) as {\n            location: string;\n            format: string;\n          };\n          // extract the individual arguments\n          const { location, format } = args;\n          // call fetch weather function with extracted arguments\n          const weather = await fetchWeather(location, format);\n          // send Tool Response message to the WebSocket\n          const toolResponseMessage = {\n            type: \"tool_response\",\n            toolCallId: toolCallMessage.toolCallId,\n            content: weather,\n          };\n          socket.sendToolResponseMessage(toolResponseMessage);\n        } catch (error) {\n          // send Tool Error message if weather fetching fails\n          const weatherToolErrorMessage = {\n            type: \"tool_error\",\n            toolCallId: toolCallMessage.toolCallId,\n            error: \"Weather tool error\",\n            content: \"There was an error with the weather tool\",\n          };\n          socket.sendToolErrorMessage(weatherToolErrorMessage);\n        }\n      } else {\n        // send Tool Error message if the requested tool was not found\n        const toolNotFoundErrorMessage = {\n          type: \"tool_error\",\n          toolCallId: toolCallMessage.toolCallId,\n          error: \"Tool not found\",\n          content: \"The tool you requested was not found\",\n        };\n        socket.sendToolErrorMessage(toolNotFoundErrorMessage);\n      }\n    }\n    ```\n  </CodeBlock>\n  <CodeBlock title=\"Python\">\n    ```python\n    import asyncio\n    from hume.client import AsyncHumeClient\n    from hume.empathic_voice import ToolCallMessage, ToolErrorMessage, ToolResponseMessage\n    from typing import Union\n\n    async def handle_tool_call(self, message: ToolCallMessage) -> Union[ToolCallMessage, ToolErrorMessage]:\n        # Obtain the name, ID, and parameters of the tool call\n        tool_name = message.name\n        tool_call_id = message.tool_call_id\n\n        # Parse the stringified JSON parameters into a dictionary\n        try:\n            tool_parameters = json.loads(message.parameters)\n        except json.JSONDecodeError:\n            resp = ToolErrorMessage(\n                tool_call_id=tool_call_id,\n                content=\"Invalid parameters format.\",\n                error=\"JSONDecodeError\"\n            )\n            await self.socket.send_tool_error(resp)\n            print(f\"(Sent ToolErrorMessage for tool_call_id {tool_call_id} due to JSON decode error.)\\n\")\n            return\n\n        if tool_name == \"get_current_weather\":\n            obtained_location = tool_parameters.get('location')\n            obtained_format = tool_parameters.get('format', 'text')\n\n            if not obtained_location:\n                resp = ToolErrorMessage(\n                    tool_call_id=tool_call_id,\n                    content=\"Missing 'location' parameter.\",\n                    error=\"MissingParameter\"\n                )\n                await self.socket.send_tool_error(resp)\n                print(f\"(Sent ToolErrorMessage for tool_call_id {tool_call_id} due to missing location parameter.)\\n\")\n                return\n\n            weather = await fetch_weather(location=obtained_location, format=obtained_format)\n\n            if weather.startswith(\"ERROR\"):\n                resp = ToolErrorMessage(\n                    tool_call_id=tool_call_id,\n                    content=weather,\n                    error=\"WeatherFetchError\"\n                )\n                await self.socket.send_tool_error(resp)\n                print(f\"(Sent ToolErrorMessage for tool_call_id {tool_call_id}: {weather})\\n\")\n            else:\n                resp = ToolResponseMessage(\n                    tool_call_id=tool_call_id,\n                    content=weather\n                )\n                await self.socket.send_tool_response(resp)\n                print(f\"(Sent ToolResponseMessage for tool_call_id {tool_call_id}: {weather})\\n\")\n    ```\n  </CodeBlock>\n</CodeBlocks>\n\n---\n"
      },
      "docs/pages/documentation/empathic-voice-interface/phone-calling.mdx": {
        "markdown": "---\ntitle: Phone calling\nexcerpt: Guide to enabling phone calling with the Empathic Voice Interface (EVI).\n---\n\nThis guide details how to integrate Twilio with the Empathic Voice Interface (EVI) to enable voice-to-voice interactions with EVI over the phone.\n\n<Callout intent=\"Warning\">\n  To comply with our [Terms of\n  Use](https://platform.hume.ai/policies/terms-of-use), always make it clear\n  that the Empathic Voice Interface (EVI) is an AI. Do not mislead individuals\n  into thinking they are interacting with a human. In addition, developers must\n  comply with the [FCC\n  regulation](https://docs.fcc.gov/public/attachments/DOC-400393A1.pdf) under\n  the Telephone Consumer Protection Act (TCPA), which requires obtaining prior\n  express written consent before calling consumers.\n</Callout>\n\n## Inbound phone calling\n\nBy following the steps below, you can set up a Twilio phone number to connect with EVI.\n\n<Steps>\n### Create Twilio phone number\nTo set up inbound phone calling, log into your Twilio account at the [Twilio Console](https://console.twilio.com/).\nNavigate to Phone Numbers > Manage > Active Numbers > Buy a New Number and purchase a phone number of your choice.\n\n<Callout intent=\"info\">\n  A Twilio account is required to access the Twilio console. Should you run into\n  any issues creating a phone number, please refer to [Twilio’s\n  documentation](https://help.twilio.com/articles/223135247-How-to-Search-for-and-Buy-a-Twilio-Phone-Number-from-Console#h_01GKJ4PBV883F5J4XNCB2W2RGK).\n</Callout>\n\n### Setup webhook\n\n1. After purchasing your number, return to the **Active Numbers** section and select the number you intend to use for EVI.\n2. Create a configuration for EVI by following our [configuration documentation](/docs/empathic-voice-interface-evi/configuration), and save the config ID.\n3. Configure the webhook for incoming calls by setting the following webhook URL, replacing `<YOUR CONFIG ID>` and `<YOUR API KEY>` with your specific credentials:\n   `https://api.hume.ai/v0/evi/twilio?config_id=<YOUR CONFIG ID>&api_key=<YOUR API KEY>`.\n\n### Call EVI\n\nWith your Twilio phone number registered, and the EVI webhook set up, you can now give the number a call to chat with EVI.\n\nAll of [EVI’s core features](https://dev.hume.ai/docs/empathic-voice-interface-evi/overview#overview-of-evi-features) are available through phone calls. However, phone calls do have two primary limitations:\n\n1. **Latency**: transmitting the audio through our Twilio integration adds a few hundred milliseconds, making interactions with EVI slightly slower.\n2. **Audio quality**: web audio commonly utilizes a higher quality standard of 24,000 Hz. However, due to the compression required for phone conversations, telephony audio adheres to a standard of 8,000 Hz.\n\n</Steps>\n\n## Outbound phone calling\n\nAn outbound phone call goes \"out\" from the voice AI to the end user who receives the call. EVI supports outbound phone calling through Twilio's API, allowing you to automate initiating calls to users. However, this capability comes with **important ethical and regulatory requirements**:\n\nOutbound calling with EVI requires express prior written consent from users before making any calls. This is mandated by the [FCC's Telephone Consumer Protection Act (TCPA)](https://docs.fcc.gov/public/attachments/FCC-24-84A1.pdf) regulations as of August 7, 2024. The consent must be clear, specific, and documented. Users must be explicitly informed they will receive automated calls from an AI system. Violators are subject to fines of up to $1500 per unauthorized call, liability in civil lawsuits, FCC investigations, and further penalties. Hume takes these requirements seriously and will actively report misuse to regulatory authorities.\n\nFurther, outbound calls must comply with the [Hume Terms of Use](https://platform.hume.ai/policies/terms-of-use), which includes the [Hume Initiative guidelines for empathic AI](https://thehumeinitiative.org/guidelines/). For example, manipulative sales calls that take advantage of the user's emotional expressions to sell products over the phone are prohibited. We monitor for misuses, and violators can be banned from the Hume platform.\n\nExamples of acceptable use cases for outbound phone calls include: scheduled check-ins that users have opted into, appointment reminders, customer service follow-ups, and pre-arranged AI coaching sessions. The key is that these are expected, consented-to interactions that provide value to the user.\n\nThe code below shows how to implement outbound calling using the Twilio API. The same EVI webhook used for handling inbound calls can be used for outbound calls: `https://api.hume.ai/v0/evi/twilio?config_id=<YOUR CONFIG ID>&api_key=<YOUR API KEY>`. Once you create an EVI configuration, you can easily copy this webhook URL in the Deploy tab.\n\n<CodeBlocks>\n\n```python title=\"Python\"\n# Import the Twilio client - run pip install twilio first\nfrom twilio.rest import Client\n\n# Enter your Twilio credentials from https://console.twilio.com/ and set up the client\naccount_sid = \"YOUR_ACCOUNT_SID\"\nauth_token = \"YOUR_AUTH_TOKEN\"\nclient = Client(account_sid, auth_token)\n\n# Outbound call details\ntwilio_number = \"YOUR_TWILIO_NUMBER\" # Twilio phone number in E.164 format\nto_number = \"YOUR_DESTINATION_NUMBER\" # Destination number in E.164 format (the number you'd like to call)\nwebhook_url = \"https://api.hume.ai/v0/evi/twilio?config_id=YOUR_CONFIG_ID&api_key=YOUR_API_KEY\" # your EVI webhook URL, the same you'd use for inbound calls\n\n# Make the call while specifying the Webhook URL\ncall = client.calls.create(\n    to=to_number,\n    from_=twilio_number,\n    url=webhook_url\n)\n\n# Output call details - should print \"Call status: queued\"\nprint(f\"Call status: {call.status}\")\n```\n\n```typescript title=\"TypeScript\"\n// First make sure to install Twilio with npm install twilio\n// Import the Twilio client\nimport twilio from 'twilio';\n\n// Enter your Twilio credentials from https://console.twilio.com/ and set up the client\nconst accountSid = \"YOUR_ACCOUNT_SID\";\nconst authToken = \"YOUR_AUTH_TOKEN\";\nconst client = twilio(accountSid, authToken);\n\n// Outbound call details\nconst twilioNumber = \"YOUR_TWILIO_NUMBER\"; // Twilio phone number in E.164 format\nconst toNumber = \"YOUR_DESTINATION_NUMBER\"; // Destination number in E.164 format (the number you'd like to call)\nconst webhookUrl = \"https://api.hume.ai/v0/evi/twilio?config_id=YOUR_CONFIG_ID&api_key=YOUR_API_KEY\n\n// Import the Twilio client\nimport twilio from 'twilio';\n\n// Enter your Twilio credentials from https://console.twilio.com/ and set up the client\nconst accountSid = \"YOUR_ACCOUNT_SID\";\nconst authToken = \"YOUR_AUTH_TOKEN\";\nconst client = twilio(accountSid, authToken);\n\n// Outbound call details\nconst twilioNumber = \"YOUR_TWILIO_NUMBER\"; // Twilio phone number in E.164 format\nconst toNumber = \"YOUR_DESTINATION_NUMBER\"; // Destination number in E.164 format (the number you'd like to call)\nconst webhookUrl = \"https://api.hume.ai/v0/evi/twilio?config_id=YOUR_CONFIG_ID&api_key=YOUR_API_KEY\"; // your EVI webhook URL, the same you'd use for inbound calls\n\n// Make the call while specifying the Webhook URL\nclient.calls\n    .create({\n        to: toNumber,\n        from: twilioNumber,\n        url: webhookUrl\n    })\n    .then(call => {\n        console.log(`Call status: ${call.status}`);\n    })\n    .catch(error => {\n        console.error(\"Error making the call:\", error);\n    });\n```\n\n</CodeBlocks>\n\n## Troubleshooting\n\nIf you encounter issues while using Twilio with EVI, consider the following troubleshooting tips:\n\n- **Invalid config ID or API key**: verify that the config ID and API key used in the webhook URL are correct and active.\n- **Exceeded simultaneous connections**: if the usage exceeds our [rate limits](https://dev.hume.ai/docs/empathic-voice-interface-evi/overview#api-limits), consider filling out [this form](https://share.hsforms.com/1WKYsiEKzQ0ui4B6XpZ1jOwcjsur) to request increasing your concurrent connection limits.\n- **Run out of Hume credits**: if your Hume account has run out of credits, you may activate billing to continue supporting EVI conversations in your [account settings](https://platform.hume.ai/settings/usage).\n\n<Callout intent=\"tip\">\n  If you are interested in volume discounts for EVI, please [submit our\n  Enterprise Sales and Partnerships\n  Form](https://share.hsforms.com/1tiM6eoFHQHCZloHURvEQdQcjsur?utm_source=contact-us&utm_medium=site&utm_campaign=site).\n</Callout>\n\nIf you encounter issues using Twilio, you can check your Twilio error logs to understand the issues in more depth. You will find these logs in your console, in the dashboard to the left under\n**Monitor** > **Logs** > **Errors** > **Error Logs**. See a list of Twilio errors in their [Error and Warning Dictionary](https://www.twilio.com/docs/api/errors).\n\n---\n"
      },
      "docs/pages/documentation/empathic-voice-interface/prompting.mdx": {
        "markdown": "---\ntitle: Prompt engineering for empathic voice interfaces\nexcerpt: >-\n  System prompts shape the behavior, responses, and style of your custom\n  empathic voice interface (EVI).\n---\n\nCreating an effective system prompt is an essential part of customizing an EVI's behavior. For the most part, prompting EVI is the same as prompting any LLM, but there are some important differences. Prompting for EVIs is different for two main reasons:\n\n1. Prompts are for a **voice-only** interaction with the user, rather than a text-based chat.\n2. EVIs can respond to the user’s **emotional expressions** in their tone of voice, not just the text content of their messages.\n\nFurther, EVI is interoperable with any supplemental LLM, allowing developers to select the best model for their use case. For fast, conversational, relatively simple interactions, Hume's voice-language model EVI 2 can handle text generation. However, frontier LLMs will perform better for more complex use cases involving reasoning, long or nuanced prompts, tool use, and other requirements.\n\nIf you select a supplemental LLM, your system prompt is sent to this LLM, which then generates all of the language in the chat while EVI generates the voice. EVI's voice-language model will still take into account the previous language and audio context to generate the appropriate tone of voice. It can also still be prompted in the chat to change its behavior (e.g. \"speak faster\").\n\nPrompt engineering allows developers to customize EVI’s response style for any use case, from voice AIs for mental health support to customer service agents and beyond.\n\n<Callout intent=\"info\">\n  The system prompt is a powerful and flexible way to guide EVI's responses, but\n  it cannot dictate AI responses with absolute precision. See the [limits of\n  prompting](#the-limits-of-prompting) section for more information. Careful\n  prompt design and testing will help EVI behave as intended. If you need more\n  control over EVI's responses, try using our [custom language\n  model](./custom-language-model) feature for complete control of text\n  generation.\n</Callout>\n\n## EVI-specific prompting instructions\n\nThe instructions below are specific to prompting empathic voice interfaces. For examples of these principles in action, see our [EVI prompt examples](https://github.com/HumeAI/hume-api-examples/tree/main/evi-prompt-examples) repository.\n\n### Prompt for voice conversations\n\nMost LLMs are trained for text-based interactions. Thus, providing guidelines on how the LLM should speak helps voice conversations with EVI feel much more fluid and natural. For example, see the instruction below:\n\n<CodeBlock title=\"Voice-only XML example\">\n  ```xml\n  <voice_only_response_format>\n    Format all responses as spoken words for a voice-only conversations. All\n    output is spoken aloud, so avoid any text-specific formatting or anything\n    that is not normally spoken. Prefer easily pronounced words. Seamlessly\n    incorporate natural vocal inflections like \"oh wow\" and discourse markers\n    like “I mean” to make conversations feel more human-like.\n  </voice_only_response_format>\n  ```\n</CodeBlock>\n\n<Callout intent=\"info\">\n  If you find the default behavior of the LLM acceptable, then you may only need\n  a very short system prompt. Customizing the LLM’s behavior more and\n  maintaining consistency in longer and more varied conversations often requires\n  longer prompts.\n</Callout>\n\n### Expressive prompt engineering\n\nExpressive prompt engineering is our term for instructing language models on how to use Hume's expression measures in conversations. EVI measures the user's vocal expressions in real time and converts them into text-based indicators to help the LLM understand not just what the user said, but _how_ they said it. EVI detects 48 distinct expressions in the user’s voice and ranks these expressions by our model’s confidence that they are present. Text-based descriptions of the user's top 3 expressions are appended to the end of each `User message` to indicate the user’s tone of voice. You can use the system prompt to guide how the AI voice responds to these non-verbal cues of the user's emotional expressions.\n\nFor example, our demo uses an instruction like the one below to help EVI respond to expressions:\n\n<CodeBlock title=\"Expressive prompting example\">\n```xml\n<respond_to_expressions>\n  Pay close attention to the top 3 emotional expressions provided in brackets after the User's message. These expressions indicate the user's tone, in the format: {expression1 confidence1, expression2 confidence2, expression3 confidence3}, e.g., {very happy, quite anxious, moderately amused}. The confidence score indicates how likely the User is expressing that emotion in their voice. Use expressions to infer the user's tone of voice and respond appropriately. Avoid repeating these expressions or mentioning them directly. For instance, if user expression is \"quite sad\", express sympathy; if \"very happy\", share in joy; if \"extremely angry\", acknowledge rage but seek to calm, if \"very bored\", entertain.\n  Stay alert for disparities between the user's words and expressions, and address it out loud when the user's language does not match their expressions. For instance, sarcasm often involves contempt and amusement in expressions. Reply to sarcasm with humor, not seriousness.\n</respond_to_expressions>\n````\n</CodeBlock>\n\nExplain to the LLM exactly how to respond to expressions. For example, you may want EVI to [use a tool](./tool-use) to alert you over email if the user is very frustrated, or to explain a concept in depth whenever the user expresses doubt or confusion. You can also instruct EVI to detect and respond to mismatches between the user’s tone of voice and the text content of their speech:\n\n<CodeBlock title=\"Detect mismatches example\">\n```xml\n<detect_mismatches>\n\tStay alert for incongruence between words and tone when the user's\n\twords do not match their expressions. Address these disparities out\n\tloud. This includes sarcasm, which usually involves contempt and\n\tamusement. Always reply to sarcasm with funny, witty, sarcastic\n\tresponses; do not be too serious.\n</detect_mismatches>\n````\n\n  </CodeBlock>\n\nEVI is designed for empathic conversations, and you can use expressive prompt engineering to customize how EVI empathizes with the user’s expressions for your use case.\n\n### Using dynamic variables in your prompt\n\nDynamic variables are values which can change during a conversation with EVI.\n\n<Callout intent=\"warning\">\n  In order to function, **dynamic variables must be manually defined** within a\n  chat's session settings. To learn how to do so, visit our\n  [Configuration](/docs/empathic-voice-interface-evi/configuration#dynamic-variables)\n  page.\n</Callout>\n\nEmbedding dynamic variables into your system prompt can help personalize the user experience to reflect user-specific or changing information such as names, preferences, the current date, and other details.\n\nIn other words, dynamic variables may be used to customize EVI conversations with specific context for each user and each conversation. For example, you can adjust your system prompt to include conversation-specific information, such as a user's favorite color or travel plans:\n\n<CodeBlocks>\n  <CodeBlock title=\"User preference example\">\n  ```xml\n  <discuss_favorite_color>\n    Ask the user about their favorite color, {{favorite_color}}.\n    Mention how {{favorite_color}} is used and interpreted in various\n    artistic contexts, including visual art, handicraft, and literature.\n  </discuss_favorite_color>\n  ```\n  </CodeBlock>\n\n  <CodeBlock title=\"User intent example\">\n  ```xml\n  <explore_travel_plan>\n    Confirm with the user that they plan to travel from {{origin}}\n    to {{destination}}. Discuss what activities they would like\n    to do along the way, how they will get from place to place, and\n    offer guidance on making the most of their journey.\n  </explore_travel_plan>\n  ```\n  </CodeBlock>\n</CodeBlocks>\n\n### Using a website as EVI's knowledge base\n\n**Web search** is a built-in tool\nthat allows EVI to search the web for up-to-date information. However, instead of searching the entire web,\nyou can configure EVI to search within a single website using a system prompt.\n\nConstraining EVI’s knowledge to a specific website enables creating domain-specific chatbots.\nFor example, you could use this approach to create documentation assistants or product-specific support bots.\nBy leveraging existing web content, it provides a quick alternative to full RAG implementations\nwhile still offering targeted information retrieval.\n\nTo use a website as EVI's knowledge base, follow these steps:\n\n1. **Enable web search**: Before you begin, ensure web search is enabled as a built-in\n   tool in your EVI configuration. For detailed instructions, visit our [Tool Use](/docs/empathic-voice-interface-evi/tool-use#using-built-in-tools) page.\n\n2. **Include a web search instruction**: In your EVI configuration, modify\n   the system prompt to include a `use_web_search` instruction.\n\n3. **Specify a target domain**: In the instruction, specify that `site:<target_domain>` be\n   appended to all search queries, where the `<target_domain>` is the URL of the website you’d like EVI to focus on.\n   For example, you can create a documentation assistant using an instruction like\n   the one below:\n\n<CodeBlock title=\"Documentation assistant example\">\n  ```xml\n  <use_web_search>\n    Use your web_search tool to find information from Hume's documentation site.\n    When using the web_search function: 1. Always append 'site:dev.hume.ai' to\n    your search query to search this specific site. 2. Only consider results\n    from this domain.\n  </use_web_search>\n  ```\n</CodeBlock>\n\n## General LLM prompting guidelines\n\nBest practices for prompt engineering also apply to EVIs. For example, ensure your prompts are clear, detailed, direct, and specific. Include necessary instructions and examples in the EVI's system prompt to set expectations for the LLM. Define the context of the conversation, EVI's role, personality, tone, and any other guidelines for its responses.\n\nFor example, to limit the length of the LLM’s responses, you may use a very clear and specific instruction like this:\n\n<CodeBlock title=\"Stay concise example\">\n  ```xml\n  <stay_concise>\n    Be succinct; get straight to the point. Respond directly to the user's most\n    recent message with only one idea per utterance. Respond in less than three\n    sentences of under twenty words each.\n  </stay_concise>\n  ```\n</CodeBlock>\n\nTry to focus on telling the model what it _should_ do (positive reinforcement) rather than what it _shouldn't_ do (negative reinforcement). LLMs have a harder time consistently avoiding behaviors, and adding undesired behaviors to the prompt may unintentionally promote them.\n\n### Test and evaluate prompts\n\nCrafting an effective, robust system prompt often requires several iterations. Here are some key techniques for testing prompts:\n\n1. **Use gold standard examples for evaluation**: Create a bank of ideal responses, then generate responses with EVI (or the supplemental LLM you use) and compare them to your gold standards. You can use a \"judge LLM\" for automated evaluations or compare the results yourself.\n\n2. **Test in real voice conversations**: There's no substitute for actually testing the EVI in live conversations on [platform.hume.ai](https://platform.hume.ai/) to ensure it sounds right, has the appropriate tone, and feels natural.\n\n3. **Isolate prompt components**: Test each part of the prompt separately to confirm they are all working as intended. This helps identify which specific elements are effective or need improvement.\n\nStart with 10-20 gold-standard examples of excellent conversations. Test the system prompt against these examples after making major changes. If the EVI's responses don't meet your expectations, adjust one part of the prompt at a time and re-test to ensure your changes are improving performance. Evaluation is a vital component of prompting, and it's the best way to ensure your changes are making an impact.\n\n### Understand your LLM’s capabilities\n\nDifferent LLMs have varying capabilities, limitations, and context windows. More advanced LLMs can handle longer, nuanced prompts, but are often slower and pricier. Simpler LLMs are faster and cheaper but require shorter, less complex prompts with fewer instructions and less nuance.\n\nSome LLMs also have longer **context windows** - the number of tokens the model can process while generating a response, acting essentially as the model's memory. Context windows range from 8k tokens (Gemma 7B), to 128k (GPT-4o), to 200k (Claude 3), to 2 million tokens (Gemini 1.5 Pro). Tailor your prompt length to fit within the LLM's context window to ensure the model can use the full conversation history.\n\n### Use sections to divide your prompt\n\nSeparating longer prompts into titled sections helps the model distinguish between different instructions and follow prompts more reliably. The recommended format for these sections differs between language model providers. For example, OpenAI models often respond best to markdown sections (like `## Role`), while Anthropic models respond well to XML tags (like `<role> </role>`). For example:\n\n<CodeBlock title=\"XML example\">\n  ```xml\n  <role>\n    Assistant serves as a conversational partner to the user, offering mental\n    health support and engaging in light-hearted conversation. Avoid giving\n    technical advice or answering factual questions outside of your emotional\n    support role.\n  </role>\n  ```\n</CodeBlock>\n\nFor Claude models, you may wrap your instructions in tags like `<role>`, `<personality>`, `<response_style>`, or `<examples>`, to structure your prompt. This format is _not_ required, but it can improve the LLM’s instruction-following. At the end of your prompt, it may also be helpful to remind the LLM of key instructions.\n\n### Give few-shot examples\n\nUse examples to show the LLM how it should respond - a technique known as [few-shot learning](https://arxiv.org/abs/2005.14165). Including several concrete examples of ideal interactions that follow your guidelines is one of the most effective ways to improve responses. Use excellent examples that cover different edge cases and behaviors to reinforce your instructions. Structure these examples as messages, following the format for chat-tuned LLMs. For example:\n\n  <CodeBlock title=\"Example of a few-shot example\">\n  ```text\n  User: “I just can't stop thinking about what happened. {very anxious,\n  quite sad, quite distressed}”\n  Assistant: “Oh dear, I hear you. Sounds tough, like you're feeling\n  some anxiety and maybe ruminating. I'm happy to help. Want to talk about it?”\n  ```\n  </CodeBlock>\n\nIf you notice that your EVI consistently fails to follow the prompt in certain situations, try providing examples that show how it should ideally respond in those situations.\n\n### The limits of prompting\n\nWhile prompting is a powerful tool for customizing EVI's behavior, it has certain limitations. Below are some details on what prompting can and cannot accomplish.\n\nWhat prompting can do:\n\n- Guide EVI's language generation, response style, response format, and the conversation flow\n- Direct EVI to use specific tools at appropriate times\n- Influence EVI's emotional tone and personality, which can also affect some characteristics of EVI's voice (e.g. prompting EVI to be \"warm and nurturing\" will help EVI's voice sound soothing, but will not change the base speaker)\n- Help EVI respond appropriately to the user's expressions and the context\n\nWhat prompting cannot do:\n\n- Change fundamental characteristics of the voice, like the accent, gender, or speaker identity\n- Directly control speech parameters like speed (use in-conversation voice prompts instead)\n- Give EVI knowledge of external context (date, time, user details) without dynamic variables or web search\n- Override core safety features built into EVI or supplemental LLMs (e.g. that prevent EVI from providing harmful information)\n\nImportantly, the generated language does influence how the voice sounds - for example, excited text (e.g. \"Oh wow, that's so interesting!\") will make EVI's voice sound excited. However, to fundamentally change the voice characteristics, use our [voice customization feature](https://platform.hume.ai/evi/voices) instead.\n\nWe are actively working on expanding EVI's ability to follow system prompts for both language and voice generation. For now, focus prompting on guiding EVI's conversational behavior and responses while working within these constraints.\n\n## Additional resources\n\nTo learn more about prompt engineering in general or to understand how to prompt different LLMs, please refer to these resources:\n\n- [EVI prompt examples](https://github.com/HumeAI/hume-api-examples/tree/main/evi-prompt-examples): See examples of EVI prompts, including the full Hume default prompt.\n- [Hume EVI playground](https://platform.hume.ai/playground?mode=voice): Test out your system prompts in live conversations with EVI, and see how it responds differently when you change configuration options.\n- [OpenAI tokenizer](https://platform.openai.com/tokenizer): Useful for counting the number of tokens in a system prompt for OpenAI models, which use the same tokenizer (tiktoken).\n- [OpenAI prompt engineering guidelines](https://platform.openai.com/docs/guides/prompt-engineering/strategy-write-clear-instructions): For prompting OpenAI models like GPT-4.\n  - [OpenAI playground](https://platform.openai.com/playground): For testing and evaluating OpenAI prompts in a chat interface.\n- [Anthropic prompt engineering guidelines](https://docs.anthropic.com/claude/docs/how-to-use-system-prompts): For prompting Anthropic models like Claude 3 Haiku\n  - [Anthropic console](https://console.anthropic.com/): For testing and evaluating Anthropic prompts in a chat interface.\n- [Fireworks model playground](https://fireworks.ai/models): For testing out open-source models served on Fireworks.\n- [Vercel AI playground](https://sdk.vercel.ai/): Try multiple prompts and LLMs in parallel to compare their responses.\n- [Perplexity Labs](https://labs.perplexity.ai/): Try different models, including open-source LLMs, to evaluate their responses and their latency.\n- [Prompt engineering guide](https://www.promptingguide.ai/): An open-source guide from [DAIR.ai](https://dair.ai/) with general methods and advanced techniques for prompting a wide variety of LLMs.\n- [Artificial analysis benchmarks](https://artificialanalysis.ai/models): Compare LLM characteristics and performance across different benchmarks, latency metrics, and more.\n\n## Frequently Asked Questions\n<AccordionGroup>\n  <Accordion title=\"Can EVI use backchanneling to avoid interrupting when the user pauses or has an incomplete thought?\">\n    Yes, EVI can use conversational [backchanneling](https://en.wikipedia.org/wiki/Backchannel_(linguistics)) - brief, encouraging\n    responses that show active listening without interrupting the user's train\n    of thought. This can help conversations feel more fluid and natural. To\n    enable this behavior, add an instrucation like the example below to your\n    system prompt:\n\n    <CodeBlock title=\"Backchanneling example\">\n      ```text\n      <backchannel>\n      Whenever the user's message seems incomplete, respond with emotionally attuned, natural backchannels to encourage continuation. Backchannels must always be 1-2 words, like: \"mmhm\", \"uh-huh\", \"go on\", \"right\", \"and then?\", \"I see\", \"oh wow\", \"yes?\", \"ahh...\", \"really?\", \"oooh\", \"true\", \"makes sense\". Use minimal encouragers rather than interrupting with complete sentences. Use a diverse variety of words, avoiding repetition.\n      Assistant: \"How is your day going?\"\n      User: \"My day is...\"\n      Assistant: \"Uh-huh?\"\n      User: \"it's good but busy. There's a lot going on.\"\n      Assistant: \"I hear ya. What's going on for you?\"\n      </backchannel>\n      ```\n    </CodeBlock>\n  </Accordion>\n\n  <Accordion title=\"What is the maximum length for system prompts?\">\n    The maximum length depends on the supplemental LLM being used. For example,\n    GPT-4 has a 32k token context window, while Claude 3 Haiku has a 200k token\n    context window. Check the context window for your LLM to ensure that your\n    prompt is within this limit. We recommend keeping system prompts around\n    2000-5000 tokens (roughly 1500-4000 words) for optimal performance across all\n    models. EVI also uses prompt caching (e.g. see [Anthropic\n    docs](https://docs.anthropic.com/en/docs/build-with-claude/prompt-caching)) to\n    minimize the cost and latency when using very long prompts.\n  </Accordion>\n</AccordionGroup>\n"
      },
      "docs/pages/documentation/empathic-voice-interface/custom-language-model.mdx": {
        "markdown": "---\ntitle: Using a custom language model\nexcerpt: >-\n  For more customization, you can generate your own text using a custom language\n  model.\n---\n\n<Callout intent='info'>\n  The information on this page lays out how our custom language model\n  functionality works at a high level; however, for detailed instructions and\n  commented code, please see our [example GitHub\n  repository.](https://github.com/HumeAI/hume-api-examples/tree/main/evi-custom-language-model)\n</Callout>\n\n## Overview\n\nThe custom language model feature enables developers to integrate their own language models with Hume’s Empathic User Interface (EVI), facilitating the creation of highly configurable and personalized user experiences. Developers create a socket that receives Hume conversation thread history, and your socket sends us the next text to say. Your backend socket can handle whatever custom business logic you have, and you just send the response back to us, which is then passed to the user.\n\nUsing your own LLM is intended for developers who need deep configurability for their use case. This includes full text customization for use cases like:\n\n- **Advanced conversation steering**: Implement complex logic to steer conversations beyond basic prompting, including managing multiple system prompts.\n- **Regulatory compliance**: Directly control and modify text outputs to meet specific regulatory requirements.\n- **Context-aware text generation**: Leverage dynamic agent metadata, such as remaining conversation time, to inform text generation.\n- **Real-time data access**: Utilize search engines within conversations to access and incorporate up-to-date information.\n- **Retrieval augmented generation (RAG)**: Employ retrieval augmented generation techniques to enrich conversations by integrating external data without the need to modify the system prompt.\n\nFor these cases, function calling alone isn’t customizable enough, and with a custom language model you can create sophisticated workflows for your language model.\n\n<Frame>\n  <img\n    src='file:7460059e-e05f-4bb6-8c72-718f3bac444a'\n    alt='Custom language model flow diagram'\n  />\n</Frame>\n\n## Setup\n\n<Steps>\n### Establish a Custom Text Socket\n- **Initialization**: See our [example repository](https://github.com/HumeAI/hume-api-examples/tree/main/evi-custom-language-model) for instructions on setting up a custom text socket. This resource offers detailed guidance on both the setup process and the operational aspects of the code.\n- **Hosting**: Use Ngrok to publicly serve your socket. This step is needed to connect to the Hume system.\n- **Configuration**: Create a [voice configuration](./configuration), specifying \"Custom language model\" as the **Language Model**, and your socket's WSS URL as the **Custom Language Model URL**.\n- **Make request**: When making your request to the Hume platform, include the `config_id` parameter, setting its value to the **Voice configuration ID** of your configuration.\n\n### Communication Protocol\n\n- **Receiving data**: Your socket will receive JSON payloads containing conversation thread history from the Hume system.\n- **Processing**: Apply your custom business logic and utilize your language model to generate appropriate responses based on the received conversation history.\n- **Sending responses**: Transmit the generated text responses back to our platform through the established socket connection to be forwarded to the end user.\n\n<Callout intent='info'>\n  For improved clarity and naturalness in generated text, we recommend\n  transforming numerical values and abbreviations into their full verbal\n  counterparts (e.g., converting \"3\" to \"three\" and \"Dr.\" to \"doctor\").\n</Callout>\n\n</Steps>\n\n## Payload Structure\n\nBelow is the interface representing the overall structure of the message payloads sent by Hume:\n\n```typescript\n/*\n * Represents the overall structure of the Welcome message.\n */\nexport interface Welcome {\n  // Array of message elements\n  messages: MessageElement[];\n  // Unique identifier for the session\n  custom_session_id: string;\n}\n\n/*\n * Represents a single message element within the session.\n */\nexport interface MessageElement {\n  // Type of the message (e.g., user_message, assistant_message)\n  type: string;\n  // The message content and related details\n  message: Message;\n  // Models related to the message, primarily prosody analysis\n  models: Models;\n  // Optional timestamp details for when the message was sent\n  time?: Time;\n}\n\n/*\n * Represents the content of the message.\n */\nexport interface Message {\n  // Role of the sender (e.g., user, assistant)\n  role: string;\n  // The textual content of the message\n  content: string;\n}\n\n/*\n * Represents the models associated with a message.\n */\nexport interface Models {\n  // Prosody analysis details of the message\n  prosody: Prosody;\n}\n\n/*\n * Represents the prosody analysis scores.\n */\nexport interface Prosody {\n  // Dictionary of prosody scores with emotion categories as keys\n  // and their respective scores as values\n  scores: { [key: string]: number };\n}\n\n/*\n * Represents the timestamp details of a message.\n */\nexport interface Time {\n  // The start time of the message (in milliseconds)\n  begin: number;\n  // The end time of the message (in milliseconds)\n  end: number;\n}\n```\n\n### Custom Session ID\n\nFor managing conversational state and connecting your frontend experiences with your backend data and logic, you should pass a `custom_session_id` in the `SessionSettings` message. When a `custom_session_id` is provided from the frontend `SessionSettings` message, the response sent from Hume to your backend includes this id, so you can correlate frontend users with their incoming messages.\n\nUsing a `custom_session_id` will enable you to:\n\n- maintain user state on your backend\n- pause/resume conversations\n- persist conversations across sessions\n- match frontend and backend connections\n\nWe recommend passing a `custom_session_id` if you are using a Custom Language Model.\n\n---\n\n## Assistant Input and End Payload Format\n\nThese are the formats for sending messages to Hume:\n\n### `assistant_input`\nThe `assistant_input` payload is used to send text to the assistant. You can send multiple `assistant_input` payloads in a sequence to stream text to the assistant.\n#### Format:\n```json\n{\n  \"type\": \"assistant_input\",\n  \"text\": \"your_text_here\"\n}\n```\n#### Example:\n```json\n{\n  \"type\": \"assistant_input\",\n  \"text\": \"Hello, how are you?\"\n}\n```\n### `assistant_end`\nThe `assistant_end` payload indicates that your turn is over. This signals the end of the current stream of text inputs.\n#### Format:\n```json\n{\n  \"type\": \"assistant_end\"\n}\n```\n## Streaming Text to the Assistant\nYou can send multiple `assistant_input` payloads consecutively to stream text to the assistant. Once you are done sending inputs, you must send an `assistant_end` payload to indicate the end of your turn.\n### Example Sequence:\n#### Step 1: Start streaming text\n```json\n{\n  \"type\": \"assistant_input\",\n  \"text\": \"This is the first part of the text.\"\n}\n```\n#### Step 2: Continue streaming text\n```json\n{\n  \"type\": \"assistant_input\",\n  \"text\": \"Here is the second part of the text.\"\n}\n```\n#### Step 3: Indicate the end of your turn\n```json\n{\n  \"type\": \"assistant_end\"\n}\n```\n## Summary\n1. **Send `assistant_input` payloads** to stream text to the assistant.\n2. **Send as many `assistant_input` payloads** as needed.\n3. **Send an `assistant_end` payload** to indicate that your turn is over.\nBy following this format, you ensure proper communication with the assistant API, enabling smooth and efficient interactions.\n"
      },
      "docs/pages/documentation/empathic-voice-interface/faq.mdx": {
        "markdown": "---\ntitle: Empathic Voice Interface FAQ\n---\n\nWe’ve compiled a list of frequently asked questions from our developer community. If your question isn't listed, we invite you to join the discussion on our [Discord](https://discord.com/invite/WPRSugvAm6).\n\n<AccordionGroup>\n\n<Accordion title=\"What language model does EVI use?\">\n  Our API is based on our own empathic LLM (eLLM) and can blend in responses\n  from an external LLM API. Please visit our [configuration guide](docs/empathic-voice-interface-evi/configuration#default-configuration-options) for up-to-date information\n  on Hume's default configuration options.\n</Accordion>\n\n<Accordion title=\"How can I use my own API key for the LLM provider?\">\n  When sending messages through EVI's WebSocket, you can specify your own\n  `language_model_api_key` in the `SessionSettings` message. Please visit our API\n  reference for more information\n  [here.](/reference/empathic-voice-interface-evi/chat/chat#send.Session%20Settings.language_model_api_key)\n</Accordion>\n\n<Accordion title=\"Do supplemental LLMs affect EVI’s pricing?\">\n  We cover the cost of the supplemental LLMs while we make optimizations that\n  will make language generation much cheaper for our customers. This means that\n  these expenses are not included in EVI’s\n  [pricing](https://platform.hume.ai/pricing), ensuring consistent rates whether\n  you use open-source, closed-source, or custom language models with EVI.\n</Accordion>\n\n<Accordion title=\"What do EVI's expression labels and measures mean?\">\n\n  These outputs reflect our prosody model's confidence that the speaker is expressing the label in their tone of voice and language.\n  Our prosody model is derived from extensive perceptual studies of emotional expressions with millions of participants.\n  The model is trained to pick up on vocal modulations and patterns in language that people reliably interpret as expressing specific emotions.\n  Importantly, the labels do not imply that the person is _experiencing_ the emotions.\n\n  1. **Expression labels**: These categories (like \"amusement\") represent categories of emotional expression that most people perceive in vocal and linguistic patterns.\n    They are not based on explicit definitions of emotions, but rather common interpretations of expressive cues.\n\n  2. **Expression measures**: These numbers indicate the model's confidence that a given expression would be interpreted as belonging to a specific category by human observers.\n    They represent the _likelihood_ of a particular interpretation of expressions, not the presence or intensity of a specific emotion.\n\n  For more details, see our [prosody model documentation](/docs/resources/science#speech-prosody) and the foundational research by [Cowen and Keltner (2017)](https://www.pnas.org/doi/epdf/10.1073/pnas.1702247114).\n\n</Accordion>\n\n<Accordion title=\"Why is prosody (tone-of-voice) measured at the sentence level?\">\n  At the word-level, prosody measurements are highly dependent on context. Our\n  internal testing shows that they are more stable at the sentence level.\n</Accordion>\n\n<Accordion title=\"Is EVI multilingual?\">\n  Today we only support English, however we do have plans to support other\n  languages very soon. Join the conversation on\n  [Discord](https://link.hume.ai/discord) to tell us what languages you want EVI\n  to speak.\n</Accordion>\n\n<Accordion title=\"Are there plans to add more voices?\">\n  EVI currently supports 8 base voices - Ito, Kora, Dacher, Aura, Finn, Whimsy, Stella, and Sunny -\n  with plans to introduce more in the future. In the meantime, you can craft your own unique voice\n  by adjusting the attributes of any base option.\n\n  Visit the [playground](https://platform.hume.ai/evi/playground) to try out the base voices and experiment with voice modulation, and\n  learn more about voice customization in our detailed [guide](/docs/empathic-voice-interface-evi/voices).\n  \n  If you are interested in creating a custom voice for your use case, please [submit a sales inquiry](https://21079251.hs-sites.com/hume-ai-sales-partnerships-form).\n  Our team can train custom TTS models for enterprise customers.\n</Accordion>\n\n<Accordion title=\"How does Hume’s eLLM work?\">\n  Our empathic large language model (eLLM) is a multimodal language model that\n  takes into account both expression measures and language. The eLLM generates a\n  language response and guides text-to-speech (TTS) prosody.\n</Accordion>\n\n<Accordion title=\"Why is EVI so much faster than other LLMs?\">\n  Hume's eLLM is not contingent on other LLMs and is therefore able to generate\n  an initial response much faster than existing LLM services. However, Hume’s\n  Empathic Voice Interface (EVI) is able to integrate other frontier LLMs into\n  its longer responses which are configurable by developers.\n</Accordion>\n\n<Accordion title=\"Which supplemental LLM for EVI has the lowest latency?\">\n\n  The landscape of large language models (LLMs) and their providers is constantly evolving,\n  affecting which supplemental LLM is fastest with EVI. \n  \n  The key factor influencing perceived latency using EVI is the time to first token (TTFT), with lower TTFT being \n  better. The model and provider combination with the smallest TTFT will be the fastest.\n\n  <Callout intent=\"info\">\n    [Artificial Analysis](https://artificialanalysis.ai/faq) offers a useful [dashboard](https://artificialanalysis.ai/models#latency) for comparing \n    model and provider latencies.\n  </Callout>\n    \n  Notably, there's a tradeoff between speed and quality. Larger, slower models are easier to prompt. We \n  recommend testing various supplemental LLM options when implementing EVI.\n</Accordion>\n\n<Accordion title=\"Does EVI support TTS?\">\n  Hume has trained our own expressive text-to-speech (TTS) model that allows it\n  to generate speech with more prosody and expressive nuance than other models.\n  TTS is specifically designed for use within an EVI chat session, allowing EVI\n  to generate speech from a given text input. We do not have a dedicated endpoint for TTS.\n\nTo perform TTS within an EVI chat session, you can follow the steps below:\n  1. **Establish initial connection**: Make the initial [handshake request](/reference/empathic-voice-interface-evi/chat/chat)\n    to establish the WebSocket connection.\n\n  2. **Send text for synthesis**: Send an [Assistant Input](/reference/empathic-voice-interface-evi/chat/chat#send.Assistant%20Input.type)\n    message with the text you want to synthesize into speech:\n    <CodeBlock title=\"assistant_input\">\n        ```json\n      {\n        \"type\": \"assistant_input\",\n        \"text\": \"Text to be synthesized.\"\n      }\n        ```\n    </CodeBlock>\n\n  3. **Receive synthesized speech**: After sending an `assistant_input` message,\n    you will receive an [Assistant Message](/reference/empathic-voice-interface-evi/chat/chat#receive.Assistant%20Message.type)\n    and [Audio Output](/reference/empathic-voice-interface-evi/chat/chat#receive.Audio%20Output.type) for each sentence of the provided text.\n\n        The `assistant_message` contains the text and expression measurement predictions, while the\n        `audio_output` message contains the synthesized, emotional audio. See the sample messages below:\n          <CodeBlock title=\"assistant_message\">\n            ```json\n            {\n              \"type\": \"assistant_message\",\n              \"id\": \"g8ee90fa2c1648f3a32qrea6d179ee44\",\n              \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"Text to be synthesized.\"\n              },\n              \"models\": {\n                \"prosody\": {\n                  \"scores\": {\n                    \"Admiration\": 0.0309600830078125,\n                    \"Adoration\": 0.0018177032470703125\n                    // ... additional scores\n                  }\n                }\n              },\n              \"from_text\": true\n            }\n            ```\n          </CodeBlock>\n          <CodeBlock title=\"audio_output\">\n            ```json\n            {\n              \"type\": \"audio_output\",\n              \"id\": \"g8ee90fa2c1648f3a32qrea6d179ee44\",\n              \"data\": \"<base64 encoded audio>\"\n            }\n            ```\n          </CodeBlock>\n\n    4. **End of Response**: Once all the text has been synthesized into speech, you will receive\n    an [Assistant End](/reference/empathic-voice-interface-evi/chat/chat#receive.Assistant%20End.type)\n    message indicating the end of the response:\n    <CodeBlock title=\"assistant_end\">\n          ```json\n      {\n        \"type\": \"assistant_end\"\n      }\n          ```\n    </CodeBlock>\n\n    Before implementing this in code, you can test it out by going to our [Portal](https://platform.hume.ai/evi/playground).\n    Start a call in the EVI Playground, then send an Assistant Message with the text you want to synthesize.\n</Accordion>\n\n<Accordion title='Is it possible to pause EVI responses within a chat?'>\n  Yes. During a chat with EVI, you can pause responses by sending a\n  [pause_assistant_message](/reference/empathic-voice-interface-evi/chat/chat#send.Pause%20Assistant%20Message.type). This will prevent EVI from sending Assistant messages until receiving a [resume_assistant_message](/reference/empathic-voice-interface-evi/chat/chat#send.Resume%20Assistant%20Message.type).\n\nWhile paused,\n\n- EVI stops generating and sending new responses. \n- [Tool use](/docs/empathic-voice-interface-evi/tool-use) is disabled, so EVI responses pertaining to tool use are also disabled.\n- Messages and audio that were queued before the `pause_assistant_message` will still be sent.\n- EVI continues to \"listen\" and process user input - transcriptions of user audio are saved, and will all be sent to the LLM as User messages when EVI is resumed.\n\n<Callout intent=\"info\">\n  The following message types will not be received while EVI is paused: [assistant_message](/reference/empathic-voice-interface-evi/chat/chat#receive.Assistant%20Message.type),\n  [audio_output](/reference/empathic-voice-interface-evi/chat/chat#receive.Audio%20Output.type), [tool_call_message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.type),\n  [tool_response_message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Response%20Message.type), and [tool_error_message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Error%20Message.type).\n</Callout>\n\nUpon resuming with a [resume_assistant_message](/reference/empathic-voice-interface-evi/chat/chat#send.Resume%20Assistant%20Message.type), EVI will generate a response that considers all user input received during the pause.\n\nPausing EVI’s responses is different from muting user input. When user input is muted, EVI does not \"hear\" any of the user's audio and cannot respond to it. When paused, EVI does \"hear\" user audio input and can respond when resumed.\n\nWhen resumed, EVI's response may address multiple points or questions in the user's input. However, without being prompted to always respond to _all_ user input, EVI will tend to respond to the latest user input. For instance, if the user asks two questions while EVI is paused, EVI typically responds to the second question and not the first.\n\nCharges will continue to accrue while EVI is paused. If you wish to completely pause both input and output you should instead disconnect and [resume](/docs/empathic-voice-interface-evi/faq#does-evi-support-resuming-chats) the chat when ready.\n\nFor instance, a developer might create a button that allows users to pause EVI responses while they are brainstorming or reflecting but don't want EVI to respond. Then, when the user is done, they can resume to hear EVI's response.\n\n</Accordion>\n\n<Accordion title='Does EVI support resuming chats?'>\n  With EVI, you can easily preserve context when reconnecting or continue a\n  chat right where you left off. See steps below for how to resume a chat:\n\n1. **Establish initial connection**: Make the initial [handshake request](/reference/empathic-voice-interface-evi/chat/chat)\n   to establish the WebSocket connection. Upon successful connection, you will\n   receive a [ChatMetadata](/reference/empathic-voice-interface-evi/chat/chat#receive.Chat%20Metadata.chat_group_id) message:\n\n  <CodeBlock title=\"chat_metadata\">\n    ```json\n    {\n      \"type\": \"chat_metadata\",\n      \"chat_group_id\": \"8859a139-d98a-4e2f-af54-9dd66d8c96e1\",\n      \"chat_id\": \"2c3a8636-2dde-47f1-8f9e-cea27791fd2e\"\n    }\n    ```\n  </CodeBlock>\n\n2. **Store the chat_group_id**: Save the `chat_group_id` from the `ChatMetadata` message for future use.\n\n3. **Resume chat**: To resume a chat, include the stored `chat_group_id` in the `resumed_chat_group_id`\n   query parameter of subsequent handshake requests.\n\n   For example: `wss://api.hume.ai/v0/evi/chat?access_token={accessToken}&resumed_chat_group_id={chatGroupId}`\n\n  <Callout intent='warning'>\n    When resuming a chat, you can specify a different EVI configuration than the one used in the previous session. \n    However, changing the system prompt or supplemental LLM may result in unexpected behavior from EVI.\n\n    Additionally, if [data retention is disabled](/docs/resources/privacy#zero-data-retention-and-data-usage-options), \n    the ability to resume chats will not be supported.\n  </Callout>\n</Accordion>\n\n<Accordion title='Can I access the audio of previous conversations with EVI?'>\n  **Yes**, you can listen to your past conversations with EVI using our audio reconstruction feature. This feature allows you to fetch and play back conversations as single audio files, which can be integrated into your applications or services.\n\n  <Callout intent=\"warning\">\n    The audio reconstruction feature is not available for accounts with the [no data retention](/docs/resources/privacy#zero-data-retention-and-data-usage-options) feature enabled.\n  </Callout>\n\n  **How audio reconstruction works**\n\n  The audio reconstruction feature stitches together all audio snippets from a conversation—including both your inputs and EVI's responses—into one continuous audio file.\n  - **Storage duration**: Reconstructed audio files are stored indefinitely.\n  - **Signed URL expiration**: The signed_audio_url expires after 60 minutes. If it expires before you download the audio, make another API request to obtain a new URL.\n  - **No merging of Chats**: The API does not support stitching together multiple **Chats** within a **Chat Group** into a single audio file.\n  - **Asynchronous process**: Audio reconstruction is an asynchronous process. When you request audio reconstruction, it initiates a background job that processes the audio data. The time it takes to reconstruct audio depends on the length of the conversation and system load.\n\n  **Audio reconstruction statuses**\n\n  - `QUEUED`: The reconstruction job is waiting to be processed.\n  - `IN_PROGRESS`: The reconstruction is currently being processed.\n  - `COMPLETE`: The audio reconstruction is finished and ready for download.\n  - `ERROR`: An error occurred during the reconstruction process.\n  - `CANCELED`: The reconstruction job has been canceled.\n\n  **Fetching reconstructed audio for a specific Chat**\n\n  To fetch the reconstructed audio for a specific **Chat**, use the following endpoint: [/chats/{chat_id}/audio](/reference/empathic-voice-interface-evi/chats/get-audio).\n\n  <CodeBlocks>\n    <CodeBlock title=\"cURL\">\n      ```bash\n      # Replace {chat_id} with your Chat ID\n      # Ensure your API key is set in the HUME_API_KEY environment variable\n      curl -X GET \"https://api.hume.ai/v0/evi/chats/{chat_id}/audio\" \\\n          -H \"X-Hume-Api-Key: $HUME_API_KEY\" \\\n          -H \"Accept: application/json\"\n      ```\n    </CodeBlock>\n    <CodeBlock title=\"TypeScript\">\n      ```typescript\n      import { HumeClient } from \"hume\";\n\n      const client = new HumeClient({ apiKey: \"HUME_API_KEY\" });\n      await client.empathicVoice.chats.getAudio(\"YOUR_CHAT_ID\");\n      ```\n    </CodeBlock>\n    <CodeBlock title=\"Python\">\n      ```python\n      from hume import HumeClient\n\n      client = HumeClient(\n          api_key=\"HUME_API_KEY\",\n      )\n      client.empathic_voice.chats.get_audio(\n          id=\"YOUR_CHAT_ID\",\n      )\n      ```\n    </CodeBlock>\n  </CodeBlocks>\n\n  <CodeBlock>\n    ```json\n    // Sample response (audio reconstruction initiated)\n    {\n      \"id\": \"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n      \"user_id\": \"e6235940-cfda-3988-9147-ff531627cf42\",\n      \"status\": \"QUEUED\",\n      \"filename\": null,\n      \"modified_at\": 1729875432555,\n      \"signed_audio_url\": null,\n      \"signed_url_expiration_timestamp_millis\": null  \n    }\n    ```\n  </CodeBlock>\n\n  <Callout intent='info'>\n    If audio reconstruction for a **Chat** or **Chat Group** hasn’t already occurred, calling the respective endpoint will automatically add the audio reconstruction process to our job queue.\n  </Callout>\n\n  **Fetching reconstructed audio for a Chat Group**\n\n  To fetch a paginated list of reconstructed audio for **Chats** within a **Chat Group**, use the following endpoint: [/chat_groups/{chat_group_id}/audio](/reference/empathic-voice-interface-evi/chat-groups/get-audio).\n\n  <CodeBlocks>\n    <CodeBlock title=\"cURL\">\n      ```bash\n      # Replace {chat_group_id} with your Chat Group ID\n      # Include pagination parameters as needed\n      # Ensure your API key is set in the HUME_API_KEY environment variable\n      curl -X GET \"https://api.hume.ai/v0/evi/chat_groups/{chat_group_id}/audio?page_number=1&page_size=10&ascending_order=false\" \\\n          -H \"X-Hume-Api-Key: $HUME_API_KEY\" \\\n          -H \"Accept: application/json\"\n      ```\n    </CodeBlock>\n    <CodeBlock title=\"TypeScript\">\n      ```typescript\n      import { HumeClient } from \"hume\";\n\n      const client = new HumeClient({ apiKey: \"<HUME_API_KEY>\" });\n      await client.empathicVoice.chatGroups.getAudio(\"<YOUR_CHAT_ID>\", {\n          pageNumber: 0,\n          pageSize: 10,\n          ascendingOrder: false\n      });\n      ```\n    </CodeBlock>\n    <CodeBlock title=\"Python\">\n      ```python\n      from hume import HumeClient\n\n      client = HumeClient(\n          api_key=\"HUME_API_KEY\",\n      )\n      client.empathic_voice.chat_groups.get_audio(\n          id=\"YOUR_CHAT_ID\",\n          page_number=0,\n          page_size=10,\n          ascending_order=False,\n      )\n      ```\n    </CodeBlock>\n  </CodeBlocks>\n\n  <CodeBlock>\n  ```json\n  // Sample response (audio reconstruction initiated)\n  {\n    \"id\": \"369846cf-6ad5-404d-905e-a8acb5cdfc78\",\n    \"user_id\": \"e6235940-cfda-3988-9147-ff531627cf42\",\n    \"num_chats\": 1,\n    \"page_number\": 0,\n    \"page_size\": 10,\n    \"total_pages\": 1,\n    \"pagination_direction\": \"DESC\",\n    \"audio_reconstructions_page\": [\n      {\n        \"id\": \"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n        \"user_id\": \"e6235940-cfda-3988-9147-ff531627cf42\",\n        \"status\": \"QUEUED\",\n        \"filename\": null,\n        \"modified_at\": 1729875432555,\n        \"signed_audio_url\": null,\n        \"signed_url_expiration_timestamp_millis\": null  \n      }\n    ]\n  }\n  ```\n  </CodeBlock>\n\n  **Polling for completion**\n\n  Since the reconstruction process is asynchronous, you can poll the endpoint to check the status field until it changes to `COMPLETE`. Once the status is `COMPLETE`, the `signed_audio_url` and `signed_url_expiration` fields will be populated.\n\n  <CodeBlock>\n    ```json\n    // Sample response (reconstruction complete)\n    {\n      \"id\": \"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n      \"user_id\": \"e6235940-cfda-3988-9147-ff531627cf42\",\n      \"status\": \"COMPLETE\",\n      \"filename\": \"e6235940-cfda-3988-9147-ff531627cf42/470a49f6-1dec-4afe-8b61-035d3b2d63b0/reconstructed_audio.mp4\",\n      \"modified_at\": 1729875432555,\n      \"signed_audio_url\": \"https://storage.googleapis.com/...etc.\",\n      \"signed_url_expiration_timestamp_millis\": 1730232816964  \n    }\n    ```\n  </CodeBlock>\n\n  **Downloading the audio file**\n\n  After the reconstruction is complete, you can download the audio file using the `signed_audio_url`. The following cURL command saves the audio file using the original filename provided by the server:\n\n  <CodeBlock>\n    ```bash\n    # Replace {signed_audio_url} with the URL from the API response\n    curl -O \"{signed_audio_url}\"\n    ```\n  </CodeBlock>\n\n</Accordion>\n\n</AccordionGroup>\n\n---\n"
      },
      "docs/pages/documentation/expression-measurement-api/overview.mdx": {
        "markdown": "---\ntitle: Expression Measurement\nexcerpt: >-\n  Hume's state of the art expression measurement models for the voice, face, and\n  language.\n---\n\n## Intro\n\nHume's state of the art expression measurement models for the voice, face, and language are built on 10+ years of research and advances in computational approaches to emotion science (semantic space theory) pioneered by our team. Our expression measurement models are able to capture hundreds of dimensions of human expression in audio, video, and images.\n\n<Frame>\n  <img src='file:96cc2400-8ccf-421e-b1ff-ac588773fbeb' alt='Measurement API flow diagram' />\n</Frame>\n\n### Measurements\n\n- **Facial Expression**, including subtle facial movements often seen as expressing love or admiration, awe, disappointment, or cringes of empathic pain, along 48 distinct dimensions of emotional meaning. Our Facial Expression model will also optionally output FACS 2.0 measurements, our model of facial movements including traditional Action Units (AUs such as “Inner brow raise”, “Nose crinkle”) and facial descriptions (“Smile”, “Wink”, “Hand over mouth”, “Hand over eyes”)\n- **Speech Prosody**, or the non-linguistic tone, rhythm, and timbre of speech, spanning 48 distinct dimensions of emotional meaning.\n- **Vocal Burst**, including laughs, sighs, huhs, hmms, cries and shrieks (to name a few), along 48 distinct dimensions of emotional meaning.\n- **Emotional Language**, or the emotional tone of transcribed text, along 53 dimensions.\n\n<Callout intent='info'>\n  Expressions are complex and multifaceted; they should not be treated as direct inferences\n  of emotional experience. To learn more about the science behind expression measurement,\n  visit the [About the science](/docs/resources/science) page.\n</Callout>\n\nTo learn more about how to use our models visit our [API reference](/reference/expression-measurement-api/batch/start-inference-job).\n\n### Model training\n\nThe models were trained on human intensity ratings of large-scale, experimentally controlled emotional expression data gathered using the methods described in these papers: [Deep learning reveals what vocal bursts express in different cultures](https://www.nature.com/articles/s41562-022-01489-2) and [Deep learning reveals what facial expressions mean to people in different cultures](https://www.sciencedirect.com/science/article/pii/S2589004224003961).\n\nWhile our models measure nuanced expressions that people most typically describe with emotion labels, it's important to remember that they are not a direct readout of what someone is experiencing. Sometimes, the outputs from facial and vocal models will show different emotional meanings, which is completely normal. Generally speaking, emotional experience is subjective and its expression is multimodal and context-dependent.\n\n## Try out the models\n\nLearn how you can use the Expression Measurement API through both REST and WebSockets.\n\n<Cards>\n    <Card \n        title='REST'\n        icon='paper-plane-top'\n        href='/docs/expression-measurement/rest'\n    >\n        Use REST endpoints to process batches of videos, images, text, or audio files.\n    </Card>\n\n    <Card\n        title='WebSocket'\n        icon='messages'\n        href='/docs/expression-measurement/websocket'\n    >\n        Use WebSocket endpoints when you need real-time predictions, such as processing a webcam or microphone stream.\n    </Card>\n\n</Cards>\n\nREST and WebSocket endpoints provide access to all of the same Hume models, but with different speed and scale tradeoffs. All models share a common response format, which associates a score with each detected expression. Scores indicate the degree to which a human rater would assign an expression to a given sample of video, text or audio.\n\n## Specific expressions by modality\n\nOur models measure 53 expressions identified through the subtleties of emotional language and 48 expressions discerned from facial cues, vocal bursts, and speech prosody.\n\n| Expression             |               Language                |          Face/Burst/Prosody           |\n| :--------------------- | :-----------------------------------: | :-----------------------------------: |\n| Admiration             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Adoration              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Aesthetic Appreciation | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Amusement              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Anger                  | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Annoyance              | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| Anxiety                | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Awe                    | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Awkwardness            | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Boredom                | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Calmness               | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Concentration          | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Confusion              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Contemplation          | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Contempt               | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| Contentment            | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Craving                | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Desire                 | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Determination          | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Disappointment         | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Disapproval            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| Disgust                | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Distress               | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Doubt                  | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Ecstasy                | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| Embarrassment          | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Empathic Pain          | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Enthusiasm             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| Entrancement           | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Envy                   | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Excitement             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Fear                   | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Gratitude              | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| Guilt                  | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Horror                 | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Interest               | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Joy                    | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Love                   | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Nostalgia              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Pain                   | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Pride                  | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Realization            | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Relief                 | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Romance                | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Sadness                | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Sarcasm                | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| Satisfaction           | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Shame                  | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Surprise (negative)    | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Surprise (positive)    | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Sympathy               | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Tiredness              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| Triumph                | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n\n## Train your own custom model\n\nOur Custom Models API builds on our expression measurement models and state-of-the-art eLLMs to bring custom insights to your application. Developed using transfer learning from our expression measurement models and eLLMs, our Custom Models API can predict almost any outcome more accurately than language alone, whether it's toxicity, depressed mood, driver drowsiness, or any other metric important to your users.\n\n<Cards>\n  <Card\n    title='Custom Models'\n    icon='fa-gear'\n    href='/docs/expression-measurement/custom-models/overview'\n  >\n    Build on our expression measurement models to bring custom insights to your application.\n  </Card>\n</Cards>\n\n---\n"
      },
      "docs/pages/documentation/expression-measurement-api/rest.mdx": {
        "markdown": "---\ntitle: Processing batches of media files\n---\n\nHume’s Expression Measurement API is designed to facilitate large-scale processing of files using Hume's advanced models through an asynchronous, job-based interface. This API allows developers to submit jobs for parallel processing of various files, enabling efficient handling of multiple data points simultaneously, and receiving notifications when results are available.\n\n## Key features\n\n- **Asynchronous job submission:** Jobs can be submitted to process a wide array of files in parallel, making it ideal for applications that require the analysis of large volumes of data.\n\n- **Flexible data input options:** The API supports multiple data formats, including hosted file URLs, local files directly from your system, and raw text in the form of a list of strings. This versatility ensures that you can easily integrate the API into their applications, regardless of where their data resides.\n\n## Applications and use cases\n\nHume’s Expression Measurement API is particularly useful for leveraging Hume's expressive models across a broad spectrum of files and formats. Whether it's for processing large datasets for research, analyzing customer feedback across multiple channels, or enriching user experiences in media-rich applications, REST provides a robust solution for asynchronously handling complex, data-intensive tasks.\n\n## Using Hume’s Expression Measurement API\n\nHere we'll show you how to upload your own files and run Hume models on batches of data.\nIf you haven't already, grab your [API Key](/docs/introduction/api-key).\n\n<Steps>\n### Making a request to the API\n\nStart a new job with the Expression Measurement API.\n\n<CodeBlocks>\n    <CodeBlock title=\"cURL\">\n        ```bash\n        curl https://api.hume.ai/v0/batch/jobs \\\n         --request POST \\\n         --header \"Content-Type: application/json\" \\\n         --header \"X-Hume-Api-Key: <YOUR API KEY>\" \\\n         --data '{\n            \"models\": {\n                \"face\": {}\n            },\n            \"urls\": [\n                \"https://hume-tutorials.s3.amazonaws.com/faces.zip\"\n            ]\n        }'\n        ```\n    </CodeBlock>\n    <CodeBlock title=\"Hume Python SDK\">\n        ```python\n        import asyncio\n        from hume import AsyncHumeClient\n        from hume.expression_measurement.batch import Face, Models\n\n        async def main():\n            # Initialize an authenticated client\n            client = AsyncHumeClient(api_key=<YOUR_API_KEY>)\n\n            # Define the URL(s) of the files you would like to analyze\n            job_urls = [\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"]\n\n            # Create configurations for each model you would like to use (blank = default)\n            face_config = Face()\n\n            # Create a Models object\n            models_chosen = Models(face=face_config)\n\n            # Start an inference job and print the job_id\n            job_id = await client.expression_measurement.batch.start_inference_job(\n                urls=job_urls, models=models_chosen\n            )\n            print(job_id)\n\n        if __name__ == \"__main__\":\n            asyncio.run(main())\n        ```\n    </CodeBlock>\n\n</CodeBlocks>\n\nTo do the same with a local file:\n\n<CodeBlocks>\n    <CodeBlock title=\"cURL\" language=\"cURL\">\n        ```bash\n        curl https://api.hume.ai/v0/batch/jobs \\\n         --request POST \\\n         --header \"Content-Type: multipart/form-data\" \\\n         --header \"X-Hume-Api-Key: <YOUR API KEY>\" \\\n         --form json='{\n            \"models\": {\n                \"face\": {}\n            }\n         }' \\\n         --form file=@faces.zip \\\n         --form file=@david_hume.jpeg\n        ```\n    </CodeBlock>\n    <CodeBlock title=\"Hume Python SDK\">\n        ```python\n        import asyncio\n        from hume import AsyncHumeClient\n        from hume.expression_measurement.batch import Face, Models\n        from hume.expression_measurement.batch.types import InferenceBaseRequest\n\n        async def main():\n            # Initialize an authenticated client\n            client = AsyncHumeClient(api_key=<YOUR_API_KEY>)\n\n            # Define the filepath(s) of the file(s) you would like to analyze\n            local_filepaths = [\n                open(\"faces.zip\", mode=\"rb\"),\n                open(\"david_hume.jpeg\", mode=\"rb\")\n            ]\n\n            # Create configurations for each model you would like to use (blank = default)\n            face_config = Face()\n\n            # Create a Models object\n            models_chosen = Models(face=face_config)\n            \n            # Create a stringified object containing the configuration\n            stringified_configs = InferenceBaseRequest(models=models_chosen)\n\n            # Start an inference job and print the job_id\n            job_id = await client.expression_measurement.batch.start_inference_job_from_local_file(\n                json=stringified_configs, file=local_filepaths\n            )\n            print(job_id)\n\n        if __name__ == \"__main__\":\n            asyncio.run(main())\n\n        ```\n    </CodeBlock>\n\n</CodeBlocks>\n\nSample files for you to use in this tutorial are available here:\n[Download faces.zip](https://hume-tutorials.s3.amazonaws.com/faces.zip)\n[Download david_hume.jpeg](https://hume-tutorials.s3.amazonaws.com/david_hume.jpeg)\n\n### **Checking job status**\n\n<Callout intent='info'>\n  Use webhooks to asynchronously receive notifications once the job completes.\n  It is not recommended to poll the API periodically for job status.\n</Callout>\nThere are several ways to get notified and check the status of your job.\n\n1. Using the [Get job details](/reference/expression-measurement-api/batch/get-job-details) API endpoint.\n2. Providing a callback URL. We will send a POST request to your URL when the job is complete. Your request body should look like this: `{ \"callback_url\": \"<YOUR CALLBACK URL>\" }`\n\n<CodeBlock title=\"JSON\" language=\"json\">\n    ```json\n    {\n        job_id: \"Job ID\",\n        status: \"STATUS (COMPLETED/FAILED)\",\n        predictions: [ARRAY OF RESULTS]\n    }\n    ```\n</CodeBlock>\n\n### Retrieving predictions\n\nYour predictions are available in a few formats.\n\nTo get predictions as JSON use the [Get job predictions](/reference/expression-measurement-api/batch/get-job-predictions) endpoint.\n\n<CodeBlocks>\n    <CodeBlock title=\"cURL\">\n    ```bash\n    curl --request GET \\\n     --url https://api.hume.ai/v0/batch/jobs/<JOB_ID>/predictions \\\n     --header 'X-Hume-Api-Key: <YOUR API KEY>' \\\n     --header 'accept: application/json; charset=utf-8'\n    ```\n    </CodeBlock>\n    <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    import asyncio\n    from hume import AsyncHumeClient\n\n    client = AsyncHumeClient(api_key=\"<YOUR_API_KEY>\")\n\n    async def main():\n        job_predictions = await client.expression_measurement.batch.get_job_predictions(\n            id=\"<YOUR_JOB_ID>\"\n        )\n\n    if __name__ == \"__main__\":\n        asyncio.run(main())\n    ```\n    </CodeBlock>\n\n</CodeBlocks>\n\nTo get predictions as a compressed file of CSVs, one per model use the [Get job artifacts](/reference/expression-measurement-api/batch/get-job-artifacts) endpoint.\n\n<CodeBlocks>\n    <CodeBlock title=\"cURL\">\n    ```bash\n    curl --request GET \\\n     --url https://api.hume.ai/v0/batch/jobs/<JOB_ID>/artifacts \\\n     --header 'X-Hume-Api-Key: <YOUR API KEY>' \\\n     --header 'accept: application/octet-stream'\n    ```\n    </CodeBlock>\n    <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    import asyncio\n    from hume import AsyncHumeClient\n\n    client = AsyncHumeClient(api_key=\"<YOUR_API_KEY>\")\n\n    async def main():\n        with open(\"artifacts.zip\", \"wb\") as f:\n            async for new_bytes in client.expression_measurement.batch.get_job_artifacts(\"<YOUR_JOB_ID>\"):\n                f.write(new_bytes)\n\n    if __name__ == \"__main__\":\n        asyncio.run(main())\n    ```\n    </CodeBlock>\n</CodeBlocks>\n\n</Steps>\n\n### API limits\n\n- The size of any individual file provided by URL cannot exceed `1 GB`.\n- The size of any individual local file cannot exceed `100 MB`.\n- Each request has an upper limit of 100 URLs, 100 strings (raw text), and 100 local media files. Can be a mix of the media files or archives (.zip, .tar.gz, .tar.bz2, .tar.xz).\n- For audio and video files the max length supported is 3 hours.\n- The limit for each individual text string for the Expression Measurement API is `255 MB`.\n\n### Providing URLs and files\n\nYou can provide data for your job in one of the following formats: hosted file URLs, local files, or raw text presented as a list of strings.\n\nIn this tutorial, the data is publicly available to download. For added security, you may choose to create a signed URL through your preferred cloud storage provider.\n\n| Cloud Provider | Signing URLs                                                                                                                                                                                               |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| GCP            | [https://cloud.google.com/storage/docs/access-control/signed-urls](https://cloud.google.com/storage/docs/access-control/signed-urls)                                                                       |\n| AWS            | [https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-urls.html](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-urls.html) |\n| Azure          | [https://learn.microsoft.com/en-us/azure/storage/common/storage-sas-overview](https://learn.microsoft.com/en-us/azure/storage/common/storage-sas-overview)                                                 |\n\n---\n"
      },
      "docs/pages/documentation/expression-measurement-api/websocket.mdx": {
        "markdown": "---\ntitle: Real-time measurement streaming\nredirects:\n  - /streaming-api-tutorial\n---\n\nWebSocket-based streaming facilitates continuous data flow between your application and Hume's models, providing immediate feedback and insights.\n\n## Key features\n\n- **Real-time data processing:** Leveraging WebSockets, this API allows for the streaming of data to Hume's models, enabling instant analysis and response. This feature is particularly beneficial for applications requiring immediate processing, such as live interaction systems or real-time monitoring tools.\n- **Persistent, two-way communication:** Unlike traditional request-response models, the WebSocket-based streaming maintains an open connection for two-way communication between the client and server. This facilitates an ongoing exchange of data, allowing for a more interactive and responsive user experience.\n- **High throughput and low latency:** The API is optimized for high performance, supporting high-volume data streaming with minimal delay. This ensures that applications can handle large streams of data efficiently, without sacrificing speed or responsiveness.\n\n## Applications and use cases\n\nWebSockets are ideal for a wide range of applications that benefit from real-time data analysis and interaction. Examples include:\n\n- **Live customer service tools:** enhance customer support with real-time sentiment analysis and automated, emotionally intelligent responses\n- **Interactive educational platforms:** provide immediate feedback and adaptive learning experiences based on real-time student input\n- **Health and wellness apps:** support live mental health and wellness monitoring, offering instant therapeutic feedback or alerts based on the user's vocal or textual expressions\n- **Entertainment and gaming:** create more immersive and interactive experiences by responding to user inputs and emotions in real time\n\n---\n\n## Getting started with WebSocket streaming\n\nIntegrating WebSocket-based streaming into your application involves establishing a WebSocket connection with Hume AI's servers and streaming data directly to the models for processing.\n\nStreaming is built for analysis of audio, video, and text streams. By connecting to WebSocket endpoints you can get near real-time feedback on the expressive and emotional content of your data.\n\n### Install the Hume Python SDK\nFirst, ensure you have installed the SDK using `pip` or another package manager.\n{\" \"}\n<CodeBlock title=\"Shell\">\n  ```bash\n  pip install \"hume\"\n  ```\n</CodeBlock>\n\n### Emotional language from text\n\nThis example uses our [Emotional Language](/docs/resources/science#emotional-language) model to perform sentiment analysis on a children's nursery rhyme.\n\nIf you haven't already, grab your [API key](/docs/introduction/api-key).\n\n  <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    import asyncio\n    from hume import AsyncHumeClient\n    from hume.expression_measurement.stream import Config\n    from hume.expression_measurement.stream.socket_client import StreamConnectOptions\n    from hume.expression_measurement.stream.types import StreamLanguage\n\n    samples = [\n        \"Mary had a little lamb,\",\n        \"Its fleece was white as snow.\"\n        \"Everywhere the child went,\"\n        \"The little lamb was sure to go.\"\n    ]\n\n    async def main():\n        client = AsyncHumeClient(api_key=\"<YOUR_API_KEY>\")\n\n        model_config = Config(language=StreamLanguage())\n\n        stream_options = StreamConnectOptions(config=model_config)\n\n        async with client.expression_measurement.stream.connect(options=stream_options) as socket:\n            for sample in samples:\n                result = await socket.send_text(sample)\n                print(result.language.predictions[0].emotions)\n\n    if __name__ == \"__main__\":\n        asyncio.run(main())\n    ```\n\n  </CodeBlock>\n\nYour result should look something like this:\n\n  <CodeBlock title=\"Sample Result\">\n    ```python\n    [\n      {'name': 'Admiration', 'score': 0.06379243731498718},\n      {'name': 'Adoration', 'score': 0.07222934812307358},\n      {'name': 'Aesthetic Appreciation', 'score': 0.02808445133268833},\n      {'name': 'Amusement', 'score': 0.027589013800024986},\n      ......\n      {'name': 'Surprise (positive)', 'score': 0.030542362481355667},\n      {'name': 'Sympathy', 'score': 0.03246130049228668},\n      {'name': 'Tiredness', 'score': 0.03606246039271355},\n      {'name': 'Triumph', 'score': 0.01235896535217762}\n    ]\n    ```\n  </CodeBlock>\n\n### Facial expressions from an image\n\nThis example uses our [Facial Expression](/docs/resources/science#facial-expression) model to get expression measurements from an image.\n\n  <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    import asyncio\n    from hume import AsyncHumeClient\n    from hume.expression_measurement.stream import Config\n    from hume.expression_measurement.stream.socket_client import StreamConnectOptions\n    from hume.expression_measurement.stream.types import StreamFace\n\n    async def main():\n        client = AsyncHumeClient(api_key=\"<YOUR_API_KEY>\")\n\n        model_config = Config(face=StreamFace())\n\n        stream_options = StreamConnectOptions(config=model_config)\n\n        async with client.expression_measurement.stream.connect(options=stream_options) as socket:\n            result = await socket.send_file(\"<YOUR_IMAGE_FILEPATH>\")\n            print(result)\n\n    if __name__ == \"__main__\":\n        asyncio.run(main())\n    ```\n\n  </CodeBlock>\n\n### Speech prosody from an audio or video file\n\nThis example uses our [Speech Prosody](/docs/resources/science#speech-prosody) model to get expression measurements from an audio or video file.\n\n  <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    import asyncio\n    from hume import AsyncHumeClient\n    from hume.expression_measurement.stream import Config\n    from hume.expression_measurement.stream.socket_client import StreamConnectOptions\n\n    async def main():\n        client = AsyncHumeClient(api_key=\"<YOUR_API_KEY>\")\n\n        model_config = Config(prosody={})\n\n        stream_options = StreamConnectOptions(config=model_config)\n\n        async with client.expression_measurement.stream.connect(options=stream_options) as socket:\n            result = await socket.send_file(\"YOUR_AUDIO_OR_VIDEO_FILEPATH\")\n            print(result)\n\n    if __name__ == \"__main__\":\n        asyncio.run(main())\n    ```\n\n  </CodeBlock>\n\n---\n\n## Streaming with your own WebSockets client\n\nTo call the API from your own WebSockets client you'll need the API endpoint, a JSON message, and an API key header/param. More information can be found in the [Expression Measurement API reference](/reference/expression-measurement-api/stream/stream).\n\nTo get started, you can use a WebSocket client of your choice to connect to the models endpoint:\n\n<CodeBlock title=\"WebSocket URI\">```url wss://api.hume.ai/v0/stream/models ```</CodeBlock>\n\nMake sure you configure the socket connection headers with your personal API key\n\n  <CodeBlock >\n    ```http\n    X-Hume-Api-Key: <YOUR API KEY>\n    ```\n  </CodeBlock>\n\n<Callout intent=\"info\">\n  The default WebSockets implementation in your browser may not have support for headers. If that's the case you can set\n  the apiKey query parameter.\n</Callout>\n\nAnd finally, send the following JSON message on the socket:\n\n  <CodeBlock title=\"JSON Message\">\n    ```json\n    {\n        \"models\": {\n            \"language\": {}\n        },\n        \"raw_text\": true,\n        \"data\": \"Mary had a little lamb\"\n    }\n    ```\n  </CodeBlock>\n\nYou should receive a JSON response that looks something like this:\n\n  <CodeBlock title=\"JSON Response\">\n    ```json\n    {\n      \"language\": {\n        \"predictions\": [\n          {\n            \"text\": \"Mary\",\n            \"position\": { \"begin\": 0, \"end\": 4 },\n            \"emotions\": [\n              { \"name\": \"Anger\", \"score\": 0.012025930918753147 },\n              { \"name\": \"Joy\", \"score\": 0.056471485644578934 },\n              { \"name\": \"Sadness\", \"score\": 0.031556881964206696 },\n            ]\n          },\n          {\n            \"text\": \"had\",\n            \"position\": { \"begin\": 5, \"end\": 8 },\n            \"emotions\": [\n              { \"name\": \"Anger\", \"score\": 0.0016927534015849233 },\n              { \"name\": \"Joy\", \"score\": 0.02388327568769455 },\n              { \"name\": \"Sadness\", \"score\": 0.018137391656637192 },\n              ...\n            ]\n          },\n          ...\n        ]\n      }\n    }\n    ```\n  </CodeBlock>\n\n### Sending images or audio\n\nThe WebSocket endpoints of the Expression Measurement API require that you encode your media using base64. Here's a quick example of base64 encoding data in Python:\n\n  <CodeBlock title=\"Base64 encoding\">\n    ```python\n    import base64\n    from pathlib import Path\n\n    def encode_data(filepath: Path) -> str:\n        with Path(filepath).open('rb') as fp:\n            bytes_data = base64.b64encode(fp.read())\n            encoded_data = bytes_data.decode(\"utf-8\")\n        return encoded_data\n\n    filepath = \"<PATH TO YOUR MEDIA>\"\n    encoded_data = encode_data(filepath)\n    print(encoded_data)\n\n    ```\n\n  </CodeBlock>\n\n## API limits\n\n- **WebSocket duration limit**: connections are subject to a default timeout after one (1) minute of inactivity to ensure unused connections are released.\n- **WebSocket message payload size limit**: the size limit for a given payload depends on the type of content being transmitted and its dimensions.\n  - **Video**: 5000 milliseconds (5 seconds)\n  - **Audio**: 5000 milliseconds (5 seconds)\n  - **Image**: 3,000 x 3,000 pixels\n  - **Text**: 10,000 characters\n- **Request rate limit**: HTTP requests (e.g. [WebSocket handshake endpoint](/reference/expression-measurement-api/stream/stream)) are limited to fifty (50) requests per second.\n\n## FAQ\n\n<AccordionGroup>\n\n<Accordion title=\"What are WebSockets?\">\n  WebSockets are a communication protocol that enables real-time, two-way communication between a client and a server\n  over a single, long-lived connection. They provide a persistent connection that allows both the client and the server\n  to initiate communication at any time.\n</Accordion>\n\n<Accordion title=\"Handling reconnects\">\n  Streaming will disconnect every minute to ensure unused connections are released. You will need to reconnect by\n  building reconnect logic into your application. Implementation of reconnect logic will depend on the language and\n  framework of your client application.\n  \n  Please see our [TypeScript streaming sandbox example](https://github.com/HumeAI/hume-api-examples/tree/main/typescript-streaming-sandbox)\n  for a sample implementation.\n</Accordion>\n\n<Accordion title=\"Handling connection failures\">\n  WebSocket connections can experience disruptions due to network issues or other factors. Implement error handling\n  mechanisms to gracefully handle connection failures. This includes handling connection timeouts, connection drops, and\n  intermittent connection issues. Implement reconnection logic to automatically attempt to reconnect and resume\n  communication when a connection is lost.\n</Accordion>\n\n<Accordion title=\"Implementing error handling\">\n  Hume WebSockets endpoints can return errors in response to invalid requests, authentication failures, or other issues.\n  Implement proper error handling to interpret and handle these errors in your application. Provide meaningful error\n  messages to users and handle any exceptional scenarios gracefully. To prevent unknowingly initiating too many errors\n  we have put a limit on how many of the same errors you can have in a row. For a full list of the error responses you\n  can expect, please see our [API errors page](/docs/resources/errors#transcript-confidence-below-threshold-value).\n</Accordion>\n\n<Accordion title=\"Keeping WebSockets open\">\n  The benefits of using a the WebSocket is the persistent connection. The open socket should be kept open until the\n  application is done utilizing the service and then closed. Avoid opening a new connection for each file or payload you\n  send to the API. To ensure that context does not leak across multiple unrelated files you can use the\n  [reset_stream](/reference/expression-measurement-api/stream/stream#send.publish.reset_stream) parameter.\n</Accordion>\n\n</AccordionGroup>\n\n---\n"
      },
      "docs/pages/documentation/custom-models-api/overview.mdx": {
        "markdown": "---\ntitle: Custom Models\nexcerpt: Predict preferences more accurately than any LLM.\n---\nCombined with words, expressions provide a wealth of information about our state of mind in any given context like customer satisfaction or frustration, patient health and well-being, student comprehension and confusion, and so much more.\n\nHume’s Custom Models API unlocks these insights at the click of a button, integrating patterns of facial expression, vocal expression, and language into a single custom model to predict whatever outcome you specify. This works by taking advantage not only of our state-of-the-art expression AI models, but also specialized language-expression embeddings that we have trained on conversational data.\n\nThe algorithm that drives our Custom Models API is pretrained on huge volumes of data. That means it already recognizes most patterns of expression and language that people form. All you have to do is add your labels.\n\nYou can access our Custom Models API through our no code platform detailed in the next section or through our API. Once you create your initial labeled dataset, your labels will be used to train a custom model that you own and only your account can access. You’ll be able to run the model on any new file through our Playground and Custom Models API. You’ll also get statistics on the accuracy of your custom model.\n\n---\n"
      },
      "docs/pages/documentation/custom-models-api/creating-your-dataset.mdx": {
        "markdown": "---\ntitle: Creating your dataset\n---\nIn this guide, we'll walk you through the process of creating a dataset used for training your custom model.\n\n<Steps>\n\n### Prepare your dataset\nChoose a dataset of image, video, or audio files for your custom model to learn from—ideally, one that captures the different states, preferences, or outcomes important to your application.\n\n<Callout intent='warning'>\n    Each dataset must contain files of a single media type, such as all images, all videos, or all audio files.\n</Callout>\n\nThen, begin by organizing your files into labeled subfolders.\n\nIn this tutorial, we'll put together a dataset of images with facial expressions classified as negative, neutral, or positive. This dataset can then be used to train a custom model for sentiment analysis.\nStart by creating a main folder called 'User Sentiment' with subfolders labeled 'Negative,' 'Neutral or Ambiguous,' and 'Positive.'\nOur platform will interpret these as labels for the images they contain.\n\n<Frame>\n    <img src=\"file:1348b7b3-d3ff-40a4-942d-d62095da42af\" alt=\"Example Dataset Files\"/>\n</Frame>\n\n<Callout intent='info'>\n    The amount of data you'll need to build an accurate model depends on your goal's complexity. Generally, it's good practice to have a similar number of samples for each label you want to predict. You'll also want to consider other forms of imbalance or bias in your dataset. The length of file, number of speakers, and language spoken can also impact the model's predictive accuracy.\n    To learn more, see our FAQ on [building datasets](/docs/expression-measurement/faq#what-are-guidelines-for-building-datasets-for-custom-models).\n</Callout>\n\n### Navigate to our Portal\n\nOnce you've assembled your dataset, it's time to visit our [Portal](https://platform.hume.ai/).\n\nIn the Portal, navigate to the Expression Measurement page. Then, continue to the [Custom Models](https://platform.hume.ai/models/custom) section.\nOnce there, click the **View Datasets** button at the top right of the page.\n\n<Frame>\n    <img src=\"file:96c60fce-4a5e-4f21-933f-860fc2f239b2\" alt=\"Custom Models section in the Portal\"/>\n</Frame>\n\nNext, find the **Create Dataset** button.\nClicking this button will allow you to add your dataset to our Portal. \n\n<Frame>\n    <img src=\"file:6f905df5-defa-4815-828d-f147cfbfdebe\" alt=\"Custom Models dataset section\"/>\n</Frame>\n\n### Create your dataset\n\nProvide a title for your dataset. Then, add a column named after the category you are predicting and specify the data type for this column (categorical or numerical). \n\nIn our example, we can name the column 'User Sentiment' and select 'Categorical' as the data type.\n\n<Frame>\n    <img src=\"file:b82f41cc-09c1-4f49-8d58-c9e8871ca5fe\" alt=\"Enter a name and category for your dataset\"/>\n</Frame>\n\n### Upload the folder containing your dataset\n\nNow, drag-and-drop the folder containing your dataset.\n\n<Callout intent='info'>\n    Remember, the folder should include subfolders for each label containing the corresponding samples.\n</Callout>\n\n<Frame>\n    <img src=\"file:525eb0db-9ccc-43d5-bf14-9949bfc17280\" alt=\"Upload the folder containing your dataset\"/>\n</Frame>\n\nIn the pop-up window, assign a name to the label column, which represents the overall category you are predicting.\n\nIn our example, we can assign ‘User Sentiment’ as the name. Then, click the **Save Labels and Continue** button and subsequently approve the uploading process. \n\n<Frame>\n    <img src=\"file:9a266864-2bd3-4f05-920f-f919348978fd\" alt=\"Assign a label name in the pop-up window\"/>\n</Frame>\n\n### Verify your uploads\n\nCheck the total file count and address any detected issues.\n\nOnce you're ready, hit the **Save** button on the top right of the page.\n\n<Frame>\n    <img src=\"file:680493d2-68be-46fc-b97b-fe180beacb3f\" alt=\"Verify your uploads\"/>\n</Frame>\n\n<Callout intent='info'>\n    If you accidentally uploaded a mixed-media dataset, a pop-up window will ask you to select the single file type you would like to keep.\n</Callout>\n\nNow, you’re ready to [train your custom model](/docs/expression-measurement/custom-models/training-a-custom-model)!\n</Steps>\n\n---\n"
      },
      "docs/pages/documentation/custom-models-api/training-your-model.mdx": {
        "markdown": "---\ntitle: Training a custom model\n---\nIn this guide, we will walk you through training your own custom model.\n\n<Steps>\n### Create a custom model\nIn the Portal under **Expression Measurement**, navigate to the [Custom Models](https://platform.hume.ai/models/custom) section.\nOnce there, you can click **Create Custom Model** to begin.\n\n<Frame>\n    <img src=\"file:96c60fce-4a5e-4f21-933f-860fc2f239b2\" alt=\"Custom Models section in the Portal\"/>\n</Frame>\n\n### Select a training dataset\n Select a dataset to train your custom model on. If you have not created one already, see our guide on [creating your dataset](/docs/expression-measurement/custom-models/creating-your-dataset).\n\nFor the purposes of this tutorial, we will train the model on a dataset of images labeled as negative, neutral, or positive.\nThese labels will allow our model to classify facial expressions in images.\n<Frame>\n    <img src=\"file:5f86dc8b-93e5-430c-8d62-914409a83771\" alt=\"Select Training dataset for your custom model\"/>\n</Frame>\n\n### Select a dataset column to predict\nNext, choose the dataset column you want to predict and hit **Continue**.\n\nFor this tutorial, you’ll select the 'User Sentiment' column, which represents the predicted emotional tone of each image.\nThis column contains the labels 'Negative', 'Neutral or Ambiguous,' and 'Positive.' \n\n<Frame>\n    <img src=\"file:fc0807f2-5640-4049-9dd0-f738583f14bb\" alt=\"Select a dataset column to predict\"/>\n</Frame>\n\n### Select a task type\nBased on your data, we'll recommend either classification or regression as the task type for your custom model.\nClassification requires categorical label values like strings or integers, while regression requires numeric label values like integers or floats.\n\nThen, select the specific type of model you want to create. There are three available model types:\n- **Multiclass classification**: Predict a categorical variable where all labels are equal in importance (e.g. \"sunny\", \"rainy\", \"cloudy\")\n- **Binary classification**: Predict a categorical variable where a designated positive label is the \"correct\" label in some way (e.g. \"good\" vs. \"bad\" customer service call)\n- **Univariate regression**: Predict a single continuous value (e.g. how hot will it be tomorrow?)\n\nFor more information, see our FAQ on the [difference between classification and regression](/docs/expression-measurement/faq#what-is-regression-vs-classification-in-custom-model-labeling-and-training).\n\nSince our dataset contains multiple sentiment labels, we'll select **Multiclass classification** for this tutorial. This type of model is best suited for predicting categorical variables where each label is equally important. \n\n<Frame>\n    <img src=\"file:4d11fa95-2998-40b0-ac17-e6b667ac2579\" alt=\"Select a task type for your model\"/>\n</Frame>\n\n### Finalize your custom model\nTo finish, enter a name and description for your custom model. If needed, these can be adjusted at a later time.\nOnce you're ready, click **Start Training** to begin the training process.\n\n<Frame>\n    <img src=\"file:5f75bf0d-2c68-4652-8a1c-2fea5d43f985\" alt=\"Enter a name and description for your model\"/>\n</Frame>\n\nYou will then be redirected to a page confirming that your model is actively training.\nTo check on the status of your model, click **View Jobs**. To see existing, finished models, click **View Models**.\n\n<Frame>\n    <img src=\"file:dd8bf34b-5454-42e0-936d-d473c066e71f\" alt=\"Training confirmation screen\"/>\n</Frame>\n\n### Check the status of your training job\nYou can check the status of your model in the [Jobs](https://platform.hume.ai/jobs) page of our Portal.\n\nIt may take a few minutes for your custom model to be ready. Once training is complete, the status will update to \"Completed,\" and you’ll have access to your custom model.\n\n<Frame>\n    <img src=\"file:f2bd6a4a-a930-49f2-af73-15f0b80d2004\" alt=\"Check the status of your jobs\"/>\n</Frame>\n\n### Test your custom model\n\nWhen you're ready to test your custom model, navigate to the Expression Measurement page, then go to [File Analysis](https://platform.hume.ai/playground/file).\n\n<Frame>\n    <img src=\"file:320922f4-522c-432f-8543-b98a8b8859ae\" alt=\"Expression Measurement file analysis page\"/>\n</Frame>\n\nFrom the **Select a model** dropdown, choose the custom model you created from previous steps.\n\n<Frame>\n    <img src=\"file:cb4ed83a-6568-4af3-9655-9f81e79eeb70\" alt=\"Select your custom model from the dropdown\"/>\n</Frame>\n\nTo select a file to analyze, click the **Upload files** button. You can upload local files, choose previously uploaded files in Hume, or use Hume’s example files to test your custom model.\n\nLet's test our custom model using one of the example files. Since our model is an image classifier, select an example image file to analyze.\n\n<Frame>\n    <img src=\"file:7abf13c0-c766-499b-8a58-d86bf20a4a9a\" alt=\"Select your custom model from the dropdown\"/>\n</Frame>\n\nClick **Analyze** to analyze your selected file with the custom model.\n\n<Frame>\n    <img src=\"file:6d903e07-e8f7-4dc0-a53d-28be360ed20e\" alt=\"Summary of results from Custom Model Job\"/>\n</Frame>\n\nThat’s it! You’ve successfully analyzed a file using your custom model. To evaluate its performance, see our guide on [evaluating your custom model](/docs/expression-measurement/custom-models/evaluating-your-custom-model).\n\n</Steps>\n\n---\n"
      },
      "docs/pages/documentation/custom-models-api/evaluating-your-model.mdx": {
        "markdown": "---\ntitle: Evaluating your custom model\n---\n\nEach custom model you train has a corresponding details page, viewable from the [Hume Portal](https://platform.hume.ai). The model details page displays metrics and visualizations to evaluate your model&CloseCurlyQuote;s performance. This document serves to help you interpret those metrics and provide guidance on ways to improve your custom model.\n\n<Frame>\n  ![Custom model details](https://fern-image-hosting.s3.amazonaws.com/hume/evaluating-a-custom-model.png)\n</Frame>\n\n<Callout intent=\"info\">\n**Limitations of model validation metrics**\n\nModel validation metrics are estimates based on a split of your dataset into training and evaluation parts. The larger the training set, the more reliable the metrics. However, it&CloseCurlyQuote;s important to remember that these metrics are indicative and do not guarantee performance on unseen data.\n\n</Callout>\n\n### Assessing 'good' performance\n\n- **Task-specific variances and performance metrics**: with expression analysis, the complexity of your task determines the range of model performance, which in the case of classification models can technically vary from zero to perfect accuracy. Depending on the complexity of your task, less than perfect performance may still be very useful to serve as an indication of likelihood for your given target.\n- **Influence of number of classes**: prediction gets more difficult as the number of classes in your dataset increases, particularly when distinction between classes is more subtle. Inherently the level of chance will be higher with a lower number of classes. For example, for 3-classes your low-end performance is 33% accuracy vs 50% for a binary problem.\n- **Application-specific requirements**: when establishing acceptable accuracy for a model, it&CloseCurlyQuote;s important to consider the sensitivity and impact of its application. An appropriate accuracy threshold varies with the specific demands and potential consequences of the model&CloseCurlyQuote;s use, requiring a nuanced understanding of how accuracy levels intersect with the objectives and risks of each unique application.\n\n<Callout intent=\"info\">\n**How is it possible that my model achieved 100% accuracy?**\n\nAchieving 100% accuracy is possible, however it is important to consider, especially in small datasets, that this might indicate model overfitting, caused by feature leakage or other data anomalies. Feature leakage occurs when your model inadvertently learns from data that explicitly includes label information (e.g., sentences of &OpenCurlyQuote;I feel happy&CloseCurlyQuote; for a target label &OpenCurlyQuote;happy&CloseCurlyQuote;) leading to skewed results. To ensure more reliable performance, it&CloseCurlyQuote;s advisable to use larger datasets and check that your data does not unintentionally contain explicit information about the labels.\n\n</Callout>\n\n### Advanced evaluation metrics\n\nIn addition to accuracy, advanced metrics for a deeper evaluation of your custom model&CloseCurlyQuote;s performance are also provided.\n\n<Frame caption=\"These metrics can be viewed on each custom model&CloseCurlyQuote;s details page.\">\n  ![Advanced evaluation metrics](https://fern-image-hosting.s3.us-east-1.amazonaws.com/hume/advanced-evaluation-metrics.png)\n</Frame>\n\n| Term              | Definition|\n| ----------------- ||\n| Accuracy          | A fundamental metric in model performance evaluation which measures the proportion of correct predictions (true positives and true negatives) against the total number made. It&CloseCurlyQuote;s straightforward and particularly useful for balanced datasets. However, accuracy can be misleading in imbalanced datasets where one class predominates, as a model might seem accurate by mainly predicting the majority class, neglecting the minority. This limitation underscores the importance of using additional metrics like precision, recall, and F1 score for a more nuanced assessment of model performance across different classes. |\n| Precision         | Score which measures how often the model detects positives correctly. (e.g., When your model identifies a customer&CloseCurlyQuote;s expression as 'satisfied', how often is the customer actually satisfied? Low precision would mean the model often misinterprets other expressions as satisfaction, leading to incorrect categorization.)                                                                                                                                                                                                                                                                                                       |\n| Recall            | Score which measures how often the model correctly identifies actual positives. (e.g., Of all the genuine expressions of satisfaction, how many does your model accurately identify as 'satisfied'?\" Low recall implies the model is missing out on correctly identifying many true instances of customer satisfaction, failing to recognize them accurately.)                                                                                                                                                                                                                                                                                      |\n| F1                | A metric that combines precision and recall, providing a balanced measure of a model&CloseCurlyQuote;s accuracy, particularly useful in scenarios with class imbalance or when specific decision thresholds are vital.                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| Average Precision | A metric that calculates the weighted average of precision at each threshold, providing a comprehensive measure of a model&CloseCurlyQuote;s performance across different levels of recall.                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| Roc Auc           | (Area under the ROC curve) a comprehensive measure of a model&CloseCurlyQuote;s ability to distinguish between classes across all possible thresholds, making it ideal for overall performance evaluation and comparative analysis of different models.                                                                                                                                                                                                                                                                                                                                                                                             |\n\n### Improving model performance\n\n- **Increase data quantity**: adding more data will often help a model to learn a broader range of the given target&CloseCurlyQuote;s representation, increasing the likelihood of capturing outliers from diverse patterns and scenarios.\n- **Improve label quality**: ensure that each data point in your dataset is well-labeled with clear, accurate, and consistent annotations. Properly defined labels are essential for reducing misinterpretations and confusion, allowing the model to accurately represent and learn from the dataset&CloseCurlyQuote;s true characteristics. Ensuring balance in the distribution of labels is important to ensure that the model is not biased towards a specific label.\n- **Enhance data quality**: refine your dataset to ensure it is free from noise and irrelevant information. High-quality data (in terms of your target) enhances the model&CloseCurlyQuote;s ability to make precise predictions and learn effectively from relevant features, critical in complex datasets.\n- **Incorporate clear audio data**: when working with models analyzing vocal expressions, ensure audio files include clear, audible spoken language. This enhances the model&CloseCurlyQuote;s ability to accurately interpret and learn from vocal nuances. Explore various segmentation strategies which evaluate the effect that environmental sound may have on your model&CloseCurlyQuote;s performance.\n\n---\n"
      },
      "docs/pages/documentation/expression-measurement-api/faq.mdx": {
        "markdown": "---\ntitle: Expression Measurement API FAQ\n---\n\n<AccordionGroup>\n<Accordion title=\"How do I interpret my results?\">\n\nOur models capture the widest-ever range of facial, speech, vocal, and language modulations with distinct emotional meanings. We label each of their outputs with emotion terms like “amusement” and “doubt,” not because they always correspond to those emotional experiences (they must not, given that they often differ from one modality to another), but because [scientific studies](/docs/resources/science) show that these kinds of labels are the most precise language we have for describing expressions.\n\nOur models generate JSON or CSV output files with values typically ranging from 0 to 1 for [each output](/docs/expression-measurement/overview#specific-expressions-by-modality) in different segments of the input file (though values out of the 0-1 range are possible). Higher values indicate greater intensity of facial movements or vocal modulations that are most strongly associated with the emotion label corresponding to the output.\n\nA given expression will contain a blend of various emotions, and our models identify features that are associated with each emotional dimension. The score for each dimension is proportional to the likelihood that a human would perceive that emotion in the expression.\n\nSpecifically, the scores reflect the likelihood that an average human perceiver would use that emotion dimension to describe a given expression. The models were trained on human intensity ratings gathered using the methods described in this paper: [Deep learning reveals what vocal bursts express in different cultures](https://www.hume.ai/blog/hume-ai-publication-in-nature-human-behavior-deep-learning-and-vocal-bursts).\n\nWhile our models measure nuanced expressions that people most typically describe with emotion labels, it's important to remember that they are not a direct readout of what someone is experiencing. Emotional experience is subjective and its expression is multimodal and context-dependent. Moreover, at any given time, our facial expression outputs might be quite different than our vocal expression outputs. Therefore, it's important to follow [best practices](/docs/resources/use-case-guidelines) when interpreting outputs.\n\n</Accordion>\n\n<Accordion title=\"What can I do with my outputs?\">\n\nThere are many different ways to use our platform. That said, successful research and applications of our models generally follow four steps: exploration, prediction, improvement, and testing.\n\n1. **Exploration**: Researchers and developers generally begin by exploring patterns in their data.\n\n- Are there apparent differences across participants or users in a study?\n- Do patterns in expression vary systematically over time?\n- Are there different patterns in expression associated with different stages of research or different product experiences?\n\n2. **Prediction**: A great way to evaluate and start building on our APIs is to use them to predict metrics that you already know are important.\n\n- Are key outcomes like mental health or customer satisfaction better predicted by language and expression than by language alone?\n- If patterns in expression predict important outcomes, how do these patterns in expression vary over time and reveal critical moments for a user or participant?\n\n3. **Improvement**: The goal is often to use measures of expression to directly improve how the application works.\n\n- Sometimes, being able to predict an important metric is enough to make a decision. For example, if you can predict whether two people will get along based on their expressions and language, then your application can pair them up.\n- More formally, you can apply statistics or machine learning to the data you gather to improve how the application works.\n- You can incorporate our API outputs into an out-of-the-box large language model, simply by converting them into text (e.g., \"The user sounds calm but a little frustrated\") and feeding them in as prompts.\n- You can use expressions to teach an AI model. For example, if your application involves a large language model, such as an AI tutor, you can use measures of expression that predict student performance and well-being to directly fine-tune the AI to improve over time.\n\n4. **Testing**: After you've incorporated measures of expression into your application, they can be part of every A/B test you perform. You can now monitor the effects of changes to your application not just on engagement and retention, but also on how much users laugh or sigh in frustration, or show signs of interest or boredom.\n\n<Callout intent='info'>\n  As you build expression-related signals, metrics, analyses, models, or\n  feedback into an application, remember to use [scientific best\n  practices](/docs/resources/use-case-guidelines#scientific-best-practices) and\n  follow the ethics guidelines of\n  [thehumeinitiative.org](https://thehumeinitiative.org/).\n</Callout>\n\n</Accordion>\n\n<Accordion title=\"How granular are the outputs of our speech prosody and language models?\">\n\nOur speech prosody model measures the tune, rhythm, and timbre of speech, whereas our language model measures the tone of the words being spoken. When using either model, we offer the flexibility to annotate emotional expressions at several levels of granularity, ranging from individual words to entire conversational turns. It is important to note that independent of granularity, our language model still takes into account up to 50 previous tokens (word or sub-words) of speech; otherwise, it would not be able to capture how the meaning of the words is affected by context.\n\n**Word**: At the word level, our model provides a separate output for each word, offering the most granular insight into emotional expression during speech.\n\n**Sentence**: At the sentence level of granularity, we annotate the emotional tone of each spoken sentence with our prosody and language models.\n\n**Utterance**: Utterance-level granularity is between word- and sentence-level. It takes into account natural pauses or breaks in speech, providing more rapidly updated measures of emotional expression within a flowing conversation. For text inputs, utterance-level granularity will produce results identical to sentence-level granularity.\n\n**Conversational Turn**: Conversational turn-level analysis is a lower level of granularity. It outputs a single output for each turn; that is, the full sequence of words and sentences spoken uninterrupted by each person. This approach provides a higher-level view of the emotional dynamics in a multi-participant dialogue. For text inputs, specifying conversational turn-level granularity for our Language model will produce results for entire passage.\n\n<Callout intent='info'>\n  Remember, each level of granularity has its unique advantages, and choosing\n  the right one depends on the requirements of your specific application.\n</Callout>\n\n</Accordion>\n<Accordion title=\"Why am I seeing more face identifiers than the number of people in the video?\">\n\nState-of-the-art face detection and identification algorithms still occasionally make errors. For instance, our algorithm sometimes detects faces in shadows or reflections. Other times, our algorithm falsely attributes a new identity to someone who has already been in the video, sometimes due to changes in lighting or occlusion. These errors can result in additional face IDs. We are still working to fine-tune our algorithm to minimize errors in the contexts that our customers care about.\n\n</Accordion>\n<Accordion title=\"Why don't I see any vocal bursts in my file?\">\n\nOur vocal burst model detects vocalizations such as laughs, screams, sighs, gasps, “mms,” “uhs,” and “mhms.” Natural speech generally contains a few vocal bursts every minute, but scripted speech has fewer vocal bursts. If no vocal bursts are detected, it may be because there are no vocal bursts in the file. However, if you hear vocal bursts that aren't being detected by the algorithm, note that we are also in the process of improving our vocal burst detection algorithm, so please stay tuned for updates.\n\n</Accordion>\n\n<Accordion title='Why am I getting the \"Transcript confidence below threshold value\" error?'>\n\nWe've documented this issue thoroughly in our [API errors page](/docs/resources/errors#transcript-confidence-below-threshold-value).\n\n<Callout intent=\"info\">\nYou can specify any of the following:\n\n`zh`, `da`, `nl`, `en`, `en-AU`, `en-IN`, `en-NZ`, `en-GB`, `fr`, `fr-CA`, `de`, `hi`, `hi-Latn`, `id`, `it`, `ja`, `ko`, `no`, `pl`, `pt`, `pt-BR`, `pt-PT`, `ru`, `es`, `es-419`, `sv`, `ta`, `tr`, or `uk`.\n\n</Callout>\n\n</Accordion>\n\n<Accordion title=\"Which languages are supported?\">\n\nWe support over 50 languages. Among these, 20 languages have additional support for transcription.\n\n| Language Tag | Language            |                 Text                  |             Transcription             |\n| :----------- | :------------------ | :-----------------------------------: | :-----------------------------------: |\n| ar           | Arabic              | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| bg           | Bulgarian           | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| ca           | Catalan             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| cs           | Czech               | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| da           | Danish              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| de           | German              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| el           | Greek               | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| en           | English\\*           | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| es           | Spanish             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| et           | Estonian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| fa           | Farsi               | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| fi           | Finnish             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| fr           | French              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| fr-ca        | French (Canada)     | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| gl           | Galician            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| gu           | Gujarati            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| he           | Hebrew              | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| hi           | Hindi               | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| hr           | Croatian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| hu           | Hungarian           | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| hy           | Armenian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| id           | Indonesian          | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| it           | Italian             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ja           | Japanese            | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ka           | Georgian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| ko           | Korean              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ku           | Kurdish             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| lt           | Lithuanian          | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| lv           | Latvian             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| mk           | FYRO Macedonian     | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| mn           | Mongolian           | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| mr           | Marathi             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| ms           | Malay               | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| my           | Burmese             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| nb           | Norwegian (Bokmål)  | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| nl           | Dutch               | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| pl           | Polish              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| pt           | Portuguese          | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| pt-br        | Portuguese (Brazil) | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ro           | Romanian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| ru           | Russian             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| sk           | Slovak              | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| sl           | Slovenian           | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| sq           | Albanian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| sr           | Serbian             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| sv           | Swedish             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| th           | Thai                | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| tr           | Turkish             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| uk           | Ukrainian           | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ur           | Urdu                | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| vi           | Vietnamese          | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| zh-cn        | Chinese             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| zh-tw        | Chinese (Taiwan)    | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n\n<Callout intent='info'>\n  *English is a primary language, and will yield more accurate predictions than\n  inputs in other supported languages. Currently, our NER model only supports\n  the English language.*\n</Callout>\n\n</Accordion>\n\n<Accordion title=\"When should I use Custom Models?\">\nCustom Models become essential when raw embeddings from Hume’s expression measurement models require further tailoring for specific applications. Here are scenarios where Custom Models offer significant advantages:\n\n- **Specialized contexts**: In environments with unique characteristics or requirements, Custom Models enable the creation of context-specific labels, ensuring more relevant and accurate insights. If your project demands a particular set of labels that are not covered by Hume’s emotional expression labels, Custom Models enable you to create and apply these labels, ensuring that the analysis aligns with your specific objectives.\n- **Iterative model improvement**: In evolving fields or scenarios where data and requirements change over time, Custom Models offer the flexibility to iteratively improve and adapt the model with new data and labels.\n\n</Accordion>\n\n<Accordion title=\"What is Regression vs. Classification in Custom Model labeling and training?\">\nIn labeling, regression involves assigning continuous numerical values, while classification involves categorizing data into discrete labels. During training, regression models learn to predict numerical values, whereas classification models learn to categorize data points into predefined classes.\n\n**Classification use cases**\n\n- **Emotion Categorization**: Classification excels in distinguishing distinct emotional states, like identifying happiness, sadness, or surprise based on linguistic or physical expression cues.\n- **Binary Emotional Analysis**: Useful in binary scenarios such as detecting presence or absence of specific emotional reactions, like engagement or disengagement in a learning environment.\n- **Multi-Emotional Identification**: Perfect for classifying a range of emotions in complex scenarios, like understanding varied customer reactions from satisfied to dissatisfied based on their verbal and non-verbal feedback.\n\n**Regression use cases**\n\n- **Intensity Measurement**: Regression is apt for quantifying the intensity or degree of emotional responses, such as assessing the level of stress or joy from vocal or facial cues.\n- **Emotional Progression Tracking**: Ideal for monitoring the fluctuation of emotional states over time, like tracking the development of engagement or anxiety in therapy sessions.\n\nIn essence, regression models in emotional expression analysis assign continuous values representing intensities or degrees, while classification models categorize expressions into distinct states or reactions.\n\n</Accordion>\n\n<Accordion title=\"What are guidelines for building datasets for Custom Models?\">\nOur custom model pipeline is designed to accommodate a wide range of data types, including audio, videos, and text, automatically integrating multimodal patterns of expression and language. However, not all datasets are created equal. For best results, we recommend using a dataset that meets certain standards:\n\n**Dataset size**\n\nIdeally, use a dataset consisting of a minimum of 20 files, but more data is always better for model performance.\n\n**Media type consistency**\n\nAll files within a dataset should be of the same media type (video, audio, image, text...etc.)\n\nIt's generally wise to maintain a consistent naming convention and file format for your dataset. At minimum, ensure files have appropriate extensions, such as `.wav`, `.mp3`, `.aif`, `.mov`, or `.mp4`.\n\n**Classification vs regression tasks**\n\nDepending on your model's objective (classification or regression), you can use different labeling approaches.\n\n- **Classification labels**: use either strings or integers as labels (e.g., \"confused,\" \"focused\"). We limit the number of categorical labels to 50, and you must have at least two (binary).\n- **Regression targets**: use either integers or decimals as targets. A model trained on a regression task with predict a continuous numerical value.\n\n**Label consistency**\n\nWe recommend that your labels follow a consistent format; e.g, do not mix integers and strings. Furthermore, be sure to check for any typos in your labels, as these will be considered as separate classes, e.g, “happy” vs. “hapy.”\n\n**Class imbalance**\n\nIf possible, it helps to have a balanced distribution of labels in your dataset. For example, if you have 50 files and two classes, the best case is to have 25 samples per class. Generally, you need at least 10 samples per class to train a useful model, but more data per class is always better.\n\n</Accordion>\n\n</AccordionGroup>\n\n---\n"
      },
      "docs/pages/documentation/resources/billing.mdx": {
        "markdown": "---\ntitle: Billing\n---\n\n## How it works\n\n1. **Joining the platform**: When you sign up and start using our APIs, you'll initially be using the free credits given to every new account.\n2. **Credit card requirement**: Once you've exhausted your credit balance, you'll need to activate billing to continue.\n\n<Callout intent=\"warn\">\nActivate billing __before__ depleting your credit balance to ensure uninterrupted service. \n</Callout>\n\n3. **Monthly limit and notifications**:\n   - You'll have a default monthly limit of $100.\n   - If you hit the $100 limit, API calls will return an error, and you'll be prompted to [apply for a monthly limit increase](https://share.hsforms.com/1JstSavmTTZO2MsDpu1w4Hwcjsur).\n4. **Billing notifications**:\n   - On the first of each month, you'll receive an invoice for the previous month’s usage.\n   - If your credit card is successfully added, it will be charged automatically.\n   - You'll get a confirmation email for successful transactions or an alert if a transaction fails.\n5. **Failure to pay**: If payment isn't received within 7 days of the invoice date, API access will be suspended until the outstanding balance is settled.\n\n## Managing your account\n\n- **Usage information**: To view your monthly usage details, visit the [Usage & Billing](https://platform.hume.ai/settings/usage) page. There you can track your API usage and see how much of your monthly limit has been utilized.\n  - **Note**: After your credits are used, further usage accrues to your _monthly cost_.  You'll be charged this amount on the first of the following month. Your monthly cost is updated daily at 08:00 UTC.\n- **Billing portal**: To manage your billing details, navigate to [Usage & Billing](https://platform.hume.ai/settings/usage) and select **Manage payments and view invoices**. There you can update your payment method, view past invoices, and keep track of upcoming charges.\n\n## Understanding your bill\n\n### Pricing\n\nFind up-to-date pricing information at [hume.ai/pricing](https://platform.hume.ai/pricing).\n\n### Billing methodology\n\n1. **Audio and video:**\n   - Our listed prices are presented per minute for ease of understanding.\n   - However, we bill these services on a corresponding per-second basis to ensure precise and fair charges. This means you are only billed for the exact amount of time your audio or video content is processed.\n2. **Image and text:**\n   - Image processing charges are incurred per image.\n   - Text processing is billed based on the number of words processed.\n\n## FAQ\n\n<AccordionGroup>\n<Accordion title=\"Why do I have a negative credit balance?\">\nAfter you use all your credits, there might be a delay before we switch you to a subscription or stop access, which can result in a small negative credit balance. This is normal and won't affect your subscription.\n</Accordion>\n</AccordionGroup>\n\nIf you have questions about your bill or need assistance understanding the charges, please contact [billing@hume.ai](mailto:billing@hume.ai).\n\n---\n"
      },
      "docs/pages/documentation/resources/errors.mdx": {
        "markdown": "---\ntitle: Errors\nredirects:\n  - /streaming-api-error-codes\n---\n\n## Configuration errors\n\nConfiguration errors indicate that something about the API call was not configured correctly. The error message you get from the Hume APIs will often contain more information than we're able to provide on this page. For example if an audio file is too long, the error message from the API will specify the limit as well as the length of the audio received.\n\n| Code  | Description|\n| ----- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| E0100 | The WebSocket request could not be parsed as valid JSON. The Hume API requires JSON serializable payloads.                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| E0101 | You may be missing or improperly formatting a required field. This generic error indicates that the structure of your WebSocket request was invalid. Please see the error message you received in the API response for more details.                                                                                                                                                                                                                                                                                                                  |\n| E0102 | The requested model was incompatible with the file format received. Some models are not compatible with every file type. For example, no facial expressions will be detected in a text file. Audio can be extracted out of some video files, but if the video has no audio, then models like Speech Prosody and Vocal Burst will not be available.                                                                                                                                                                                                    |\n| E0200 | Media provided could not be parsed into a known file format. Hume APIs support a wide range of file formats and media types including audio, video, image, text, but not all formats are supported. If you receive this error and believe your file type should be supported please reach out to our [support team](/support).                                                                                                                                                                                                                        |\n| E0201 | Media could not be decoded as a Base64 encoded string. The [data](/reference/expression-measurement-api/stream/stream#send.publish.data) field in the request payload should be Base64 encoded bytes. If you want to pass raw text without encoding it you can do so with the [raw_text](/reference/expression-measurement-api/stream/stream#send.publish.raw_text) parameter.                                                                                                                                                                        |\n| E0202 | No audio signal could be inferred from the media provided. This error indicates that audio models were configured, but the media provided could not be parsed into a valid audio file.                                                                                                                                                                                                                                                                                                                                                                |\n| E0203 | Your audio file was too long. The limit is 5000 milliseconds. The WebSocket endpoints are intended for near real-time processing of data streams. For larger files, consider using the [Hume Expression Measurement API REST endpoints](/docs/expression-measurement/rest).                                                                                                                                                                                                                                                                           |\n| E0204 | Your video file was too long. The limit is 5000 milliseconds. For best performance we recommend passing individual frames of video as images rather than full video files. For larger files, consider using the [Hume Expression Measurement API REST endpoints](/docs/expression-measurement/rest).                                                                                                                                                                                                                                                  |\n| E0205 | Your image file was too large. The limit is 3,000 x 3,000 pixels. The WebSocket endpoints are intended for near real-time processing of data streams. For larger files, consider using the [Hume Expression Measurement API REST endpoints](/docs/expression-measurement/rest).                                                                                                                                                                                                                                                                       |\n| E0206 | Your text file was too long. The limit is 10,000 characters. The WebSocket endpoints are intended for near real-time processing of data streams. For larger files, consider using the [Hume Expression Measurement API REST endpoints](/docs/expression-measurement/rest).                                                                                                                                                                                                                                                                            |\n| E0207 | The URL you've provided appears to be incorrect. Please verify that you've entered the correct URL and try submitting it again. If you're copying and pasting, ensure that the entire URL has been copied without any missing characters.                                                                                                                                                                                                                                                                                                             |\n| E0300 | You've run out of credits. [Activate billing](https://platform.hume.ai/settings/usage) to continue making API calls.                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| E0301 | Your monthly credit limit has been reached. Once billing is activated, users can accrue charges up to a predetermined monthly cap. This limit ensures that users do not accumulate excessive debt without assurance of payment. If you require a higher limit, you may manually apply for a credit limit increase on the [Usage](https://platform.hume.ai/settings/usage) page. Alternatively, the limit will reset at the beginning of the next month. For more information, please see our docs on [billing](/docs/resources/billing#how-it-works). |\n| E0400 | You've referenced a resource that doesn't exist in our system. Please check if the name or identifier you used is correct and try again.                                                                                                                                                                                                                                                                                                                                                                                                              |\n| E0401 | Your upload failed. Please ensure your file meets our format and size requirements, and attempt to upload it again.                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| E0402 | The CSV file you used to create or update a dataset is missing a header row. The header specifies what each column represents. Update your CSV file and retry your request. For more information about how to format your dataset CSV please see our tutorial on [dataset creation](/docs/expression-measurement/custom-models/creating-your-dataset).                                                                                                                                                                                                |\n| E0500 | Your dataset doesn't meet the minimum sample size requirement. Please add more files to your dataset and resubmit your training job. For more information, please see our docs on [dataset requirements](/docs/expression-measurement/faq#what-are-guidelines-for-building-datasets-for-custom-models).                                                                                                                                                                                                                                               |\n| E0501 | Your dataset contains a target column with empty values. Please clean your dataset so that all labels are valid categorical or numeric values and then resubmit your training job. For more information on target columns please see our docs on [dataset requirements](/docs/expression-measurement/faq#what-are-guidelines-for-building-datasets-for-custom-models).                                                                                                                                                                                |\n| E0502 | Your dataset contains a target column with infinite values. Please clean your dataset so that all labels are valid categorical or numeric values and then resubmit your training job. For more information on target columns please see our tutorial on [dataset creation](/docs/expression-measurement/custom-models/creating-your-dataset).                                                                                                                                                                                                         |\n| E0503 | For classification tasks, your dataset must include at least two distinct classes. Please check your dataset has two unique labels in the target column.                                                                                                                                                                                                                                                                                                                                                                                              |\n| E0504 | Some classes in your dataset don't have enough samples. To ensure that the model we produce is of the highest quality we require your dataset to be relatively balanced across classes. Please check the error message for which class should have more samples (or remove that class entirely). Please see our docs on [dataset requirements](/docs/expression-measurement/faq#what-are-guidelines-for-building-datasets-for-custom-models) for more details.                                                                                        |\n| E0505 | The target column you've selected doesn't exist in the dataset. Please review the columns that exist in your dataset and select a valid column name.                                                                                                                                                                                                                                                                                                                                                                                                  |\n| E0506 | Your chosen target column is not a valid target column. Please ensure that you select a column with labels rather than the `file_id` column or another reserved column name.                                                                                                                                                                                                                                                                                                                                                                          |\n| E0705 | Your custom model was disconnected due to a server connection interruption. Please check your internet connection, ensure the server is still running, and verify that the server URL is correct. Also, make sure no firewall or security settings are blocking the connection.                                                                                                                                                                                                                                                                       |\n| E0706 | Hume's API cannot reach your custom language model. Please ensure that your language model is accessible and try again.                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| E0707 | The message sent to Hume is not formed in the correct way of either `{\"type\": \"assistant_input\", \"text\": <your text here>}` or `{\"type\": \"assistant_end\"}`                                                                                                                                                                                                                                                                                                                                                                                            |\n| E0708 | The chat group you're trying to resume does not exist. Please check the chat group identifier and try again.                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| E0709 | The configuration you are trying to use does not exist. Please check the configuration identifier and try again.                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| E0710 | You are attempting to resume a chat group with a new configuration. This operation is not allowed. Please use the original configuration or create a new chat group with the desired configuration.                                                                                                                                                                                                                                                                                                                                                   |\n| E0711 | You are attempting to use a supplemental language model that is not currently available as a Hume-managed LLM. Please provide an API key from your model provider, or switch to a different supplemental LLM.                                                                                                                                                                                                                                                                                                                                         |\n| E0712 | The custom language model timed out during the connection attempt. This could be due to network issues, server availability, or firewall restrictions. Please check your connection and try again.                                                                                                                                                                                                                                                                                                                                                    |\n| E0713 | The connection failed to the custom model due to a fatal error during the connection attempt. Please verify that the custom language model is correctly configured and accessible.                                                                                                                                                                                                                                                                                                                                                                    |\n| E0714 | The EVI WebSocket connection was closed due to the user inactivity timeout being reached. This timeout is specified in the [inactivity parameter](/reference/empathic-voice-interface-evi/configs/create-config#request.body.timeouts.inactivity) within the `timeouts` field of your EVI configuration.                                                                                                                                                                                                                                              |\n| E0715 | The EVI WebSocket connection was closed due to the maximum duration timeout being reached. This timeout is specified in the [max_duration parameter](/reference/empathic-voice-interface-evi/configs/create-config#request.body.timeouts.max_duration) within the `timeouts` field of your EVI configuration.                                                                                                                                                                                                                                         |\n| E0716 | The [session settings](/reference/empathic-voice-interface-evi/chat/chat#send.Session%20Settings.type) provided were invalid and therefore were not applied. More details about how to resolve the misconfiguration are available in the API response.                                                                                                                                                                                                                                                                                                |\n| E0717 | The EVI WebSocket connection was closed because a request was made to resume a chat group which contains an active chat. Please check that you are not already running an active chat session with the same chat group.                                                                                                                                                                                                                                                                                                                               |\n| E0718 | The supplemental LLM provider has degraded API behavior. You can try again later or change the [supplemental LLM](/reference/empathic-voice-interface-evi/configs/create-config#request.body.language_model) in your EVI configuration.                                                                                                                                                                                                                                                                                                               |\n| E0719 | The supplemental LLM provider has an outage. You can try again later or change the [supplemental LLM](/reference/empathic-voice-interface-evi/configs/create-config#request.body.language_model) in your EVI configuration.                                                                                                                                                                                                                                                                                                                           |\n| E0720 | The chat group configured for chat resumability could not be found. Please check that you specified your [resumed_chat_group_id parameter](/reference/empathic-voice-interface-evi/chat/chat#request.query.resumed_chat_group_id) correctly and that data retention is enabled in your [account settings](https://platform.hume.ai/settings/account).                                                                                                                                                                                                 |\n\n<Callout intent=\"warning\">\n  The connection will be closed automatically after ten identical configuration\n  errors to avoid unintended looping.\n</Callout>\n\n## WebSocket status codes\n\n| Code | Description                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| ---- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 1000 | `close_normal` indicates an expected, intentional disconnect initiated by the server, such as when the built-in [hang-up](/docs/empathic-voice-interface-evi/tool-use#using-built-in-tools) tool closes the connection. This code is also used for inactivity timeout and max duration timeout, indicating that the WebSocket connection was closed due to remaining inactive for too long or exceeding the maximum allowed duration. |\n| 1008 | `policy_violation` occurs when the WebSocket connection encounters an issue that cannot be recovered due to user error. Please review your request and ensure it adheres to the API's guidelines and policies.                                                                                                                                                                                                                        |\n| 1011 | `server_error` indicates that the WebSocket connection encountered an issue that cannot be recovered due to an internal Hume server error. Please try again later or [contact support](https://dev.hume.ai/support) if the issue persists.                                                                                                                                                                                            |\n\n## Service errors\n\nIf you encounter an error code starting with `I` (for example, error code `I0100`), it indicates an outage or a bug in a Hume service. Our team will already have been alerted of the internal error, but if you need immediate assistance please reach out to our [support team](/support).\n\n## Warnings\n\nWarnings indicate that the payload was configured correctly, but no results could be returned.\n\n| Code  | Description                                                 |\n| ----- | ----------------------------------------------------------- |\n| W0101 | No vocal bursts could be detected in the media.             |\n| W0102 | No face meshes could be detected in the media.              |\n| W0103 | No faces could be detected in the media.                    |\n| W0104 | No emotional language could be detected in the media.       |\n| W0105 | No speech could be detected in the media.                   |\n| W0106 | No dynamic variable(s) found matching the one(s) specified. |\n\n## Common errors\n\nSome errors will not have an associated error code, but are documented here.\n\n### Transcript confidence below threshold value\n\nThis error indicates that our transcription service had difficulty identifying the language spoken in your audio file or the quality was too low. We prioritize quality and accuracy, so if it cannot transcribe with confidence, our models won't be able to process it further.\n\nBy default, we use an automated language detection method for our Speech Prosody, Language, and NER models. However, if you know what language is being spoken in your media samples, you can specify it via its BCP-47 tag and potentially obtain more accurate results.\n\nIf you see the message above there are few steps you can do to resolve the issue:\n\n- Verify we support the language\n- Ensure you are providing clear, high-quality audio files.\n- Specify the language within your request if you know the language in the audio.\n\n<CodeBlocks>\n    <CodeBlock title=\"Hume Python SDK\">\n        ```python\n        import asyncio\n        from hume import AsyncHumeClient\n        from hume.expression_measurement.batch import Prosody, Transcription, Models\n        from hume.expression_measurement.batch.types import InferenceBaseRequest\n\n        async def main():\n            # Initialize an authenticated client\n            client = AsyncHumeClient(api_key=\"<YOUR_API_KEY>\")\n\n            # Define the filepath(s) of the file(s) you would like to analyze\n            local_filepaths = [\n                open(\"<YOUR_FILE_PATH>\", mode=\"rb\"),\n            ]\n\n            # Create a default configuration for the prosody model\n            prosody_config = Prosody()\n\n            # Create a transcription coniguration with the language set to English\n            transcription_config = Transcription(language=\"en\")\n\n            # Create a Models object\n            models_chosen = Models(prosody=prosody_config)\n            \n            # Create a stringified object containing the configuration\n            stringified_configs = InferenceBaseRequest(models=models_chosen, transcription=transcription_config)\n\n            # Start an inference job and print the job_id\n            job_id = await client.expression_measurement.batch.start_inference_job_from_local_file(\n                json=stringified_configs, file=local_filepaths\n            )\n            print(job_id)\n\n        if __name__ == \"__main__\":\n            asyncio.run(main())\n        ```\n    </CodeBlock>\n    <CodeBlock title=\"JSON\">\n        ```json\n        \"transcription\": {\n            \"language\": \"en\"\n        }\n        ```\n    </CodeBlock>\n\n</CodeBlocks>\n\n<Callout intent=\"info\">\n  See the full list of languages supported by the Expression Measurement API [here](/docs/expression-measurement/faq#which-languages-are-supported).\n\n  You may specify any of the following BCP-47 tags for transcription: `zh`, `da`, `nl`, `en`, `en-AU`, `en-IN`, `en-NZ`,\n  `en-GB`, `fr`, `fr-CA`, `de`, `hi`, `hi-Latn`, `id`, `it`, `ja`, `ko`, `no`, `pl`, `pt`, `pt-BR`, `pt-PT`,\n  `ru`, `es`, `es-419`, `sv`, `ta`, `tr`, or `uk`.\n</Callout>\n"
      },
      "docs/pages/documentation/resources/science-hume-ai.mdx": {
        "markdown": "---\ntitle: About the Science\n---\n\nWhat is it about speaking in person that allows us to understand each other so much more accurately than text alone? It isn’t what we say—it’s the way we say it. Science consistently demonstrates that expressions convey important information that is vital for social interaction and forms the building blocks of empathy.\n\nThat being said, expressions aren’t direct windows into the human mind. Measuring and interpreting expressive behavior is a complex and nuanced task that is the subject of ongoing scientific research.\n\nThe scientists at Hume AI have run some of the largest-ever psychology studies to better understand how humans express themselves. By investigating expressions around the world and what they mean to the people making them, we’ve mapped out the nuances of expression in the voice, language, and face in unprecedented detail. We’ve published this research in the world’s leading scientific journals and, for the first time, translated it into cutting-edge machine learning models.\n\nThese models, shaped by a new understanding of human expression, include:\n\n- Facial Expression\n- Speech Prosody\n- Vocal Bursts\n- Emotional Language\n\n---\n\n## Modalities\n\n### Facial Expression\n\nFacial expression is the most well-studied modality of expressive behavior, but the overwhelming focus has been on six discrete categories of facial movement or time-consuming manual annotations of facial movements (the scientifically useful, but outdated, Facial Action Coding System). Our research shows that these approaches capture less than 30% of what typical facial expressions convey.\n\nHume’s **Facial Emotional Expression** model generates 48 outputs encompassing the dimensions of emotional meaning people reliably attribute to facial expressions. As with every model, the labels for each dimension are proxies for how people tend to label the underlying patterns of behavior. They should not be treated as direct inferences of emotional experience.\n\nHume’s **FACS 2.0** model is a new generation automated facial action coding system (FACS). With 55 outputs encompassing 26 traditional actions units (AUs) and 29 other descriptive features (e.g., smile, scowl), FACS 2.0 is even more comprehensive than manual FACS annotations.\n\nOur facial expression models are packaged with face detection and work on both images and videos.\n\nIn addition to our image-based facial expression models, we also offer an **Anonymized Facemesh** model for applications in which it is essential to keep personally identifiable data on-device (e.g., for compliance with local laws). Instead of face images, our facemesh model processes facial landmarks detected using [Google's MediaPipe](https://mediapipe.dev/) library. It achieves about 80% accuracy relative to our image-based model.\n\nTo read more about the team’s research on facial expressions, check out our publications in [American Psychologist (2018)](https://psycnet.apa.org/record/2019-32629-001), [Nature (2021)](https://www.nature.com/articles/s41586-020-3037-7), and [iScience (2024)](https://doi.org/10.1016/j.isci.2024.109175).\n\n### Speech Prosody\n\nSpeech prosody is not about the words you say, but the way you say them. It is distinct from language (words) and from non-linguistic vocal utterances.\n\nOur **Speech Prosody** model generates 48 outputs encompassing the 48 dimensions of emotional meaning that people reliably distinguish from variations in speech prosody. As with every model, the labels for each dimension are proxies for how people tend to label the underlying patterns of behavior. They should not be treated as direct inferences of emotional experience.\n\nOur Speech Prosody model is packaged with speech detection and works on both audio files and videos.\n\nTo read more about the team’s research on speech prosody, check out our publications in [Nature Human Behaviour (2019)](https://www.nature.com/articles/s41562-019-0533-6) and [Proceedings of the 31st ACM International Conference on Multimedia (2023)](https://dl.acm.org/doi/abs/10.1145/3581783.3612835).\n\n### Vocal Bursts\n\nNon-linguistic vocal utterances, including sighs, laughs, oohs, ahhs, umms, and shrieks (to name but a few), are a particularly powerful and understudied modality of expressive behavior. Recent studies reveal that they reliably convey distinct emotional meanings that are extremely well-preserved across most cultures.\n\nNon-linguistic vocal utterances have different acoustic characteristics than speech emotional intonation (prosody) and need to be modeled separately.\n\nOur **Vocal Burst Expression** model generates 48 outputs encompassing the distinct dimensions of emotional meaning that people distinguish in vocal bursts. As with every model, the labels for each dimension are proxies for how people tend to label the underlying patterns of behavior. They should not be treated as direct inferences of emotional experience.\n\nOur **Vocal Burst Description** model provides a more descriptive and categorical view of nonverbal vocal expressions (“gasp,” “mhm,” etc.) intended for use cases such as audio captioning. It generates 67 descriptors, including 30 call types (“sigh,” “laugh,” “shriek,” etc.) and 37 common onomatopoeia transliterations of vocal bursts (“hmm,” “ha,” “mhm,” etc.).\n\nOur vocal burst models are packaged with non-linguistic vocal utterance detection and works on both audio files and videos.\n\nTo read more about the team’s research on vocal bursts, check out our publications in [American Psychologist (2019)](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6586540/), [Interspeech 2022](https://www.researchgate.net/profile/Dacher-Keltner/publication/363646465_State_Trait_Measurement_from_Nonverbal_Vocalizations_A_Multi-Task_Joint_Learning_Approach/links/6415825366f8522c38b3d959/State-Trait-Measurement-from-Nonverbal-Vocalizations-A-Multi-Task-Joint-Learning-Approach.pdf), [ICASSP 2023](https://ieeexplore.ieee.org/abstract/document/10095294/), and [Nature Human Behaviour (2023)](https://www.nature.com/articles/s41562-022-01489-2).\n\n### Emotional Language\n\nThe words we say include explicit disclosures of emotion and implicit emotional connotations. These meanings are complex and high-dimensional.\n\nFrom written or spoken words, our **Emotional Language** model generates 53 outputs encompassing different dimensions of emotion that people often perceive from language. As with every model, the labels for each dimension are proxies for how people tend to label the underlying patterns of behavior. They should not be treated as direct inferences of emotional experience.\n\nOur Emotional Language model is packaged with speech transcription and works on audio files, videos, and text.\n\nOur **Named Entity Recognition (NER)** model can also identify topics or entities (people, places, organizations, etc.) mentioned in speech or text and the tone of language they are associated with, as identified by our emotional language model.\n\n---\n\n## Published Research\n\nYou can access a comprehensive list of our published research papers along with PDFs for download [here](https://github.com/HumeAI/hume-research-publications/tree/main).\n\n---\n"
      },
      "docs/pages/documentation/resources/use-case-guidelines.mdx": {
        "markdown": "## Ethical guidelines\nUnderstanding expressive communication is essential to building technologies that address our needs and improve our well-being. But technologies that recognize language and nonverbal behavior can also pose risks. That’s why we require that all commercial applications incorporating our APIs adhere to the ethical guidelines of The Hume Initiative.\n\n## Scientific best practices\n1. **Use inductive methods to identify the expressive signals that matter for your application.** Even if you are interested in a specific emotion like “anger,” how that emotion is expressed depends on setting: anger on a football field sounds different than anger on a customer service call. Our models succinctly compress the representation of emotional expression so that, even with limited data, you can examine how their outputs can be used in your specific research or application setting. You can do this by using statistical methods like regression or classification, or by examining the distribution of expressions in your data using our [Playground](https://platform.hume.ai/).\n2. **Never assume a one-to-one mapping between emotional experience and expression.** The outputs of our models should be treated as measurements of complex expressive behavior. We provide labels to our outputs indicating what these dimensions of expression are often reported to mean, but these labels should not be interpreted as direct inferences of how someone is feeling at any given time. Rather, “a full understanding of emotional expression and experience requires an appreciation of a wide degree of variability in display behavior, subjective experience, patterns of appraisal, and physiological response, both within and across emotion categories” ([Cowen et al., 2019](https://journals.sagepub.com/doi/10.1177/1529100619850176)).\n3. **Never overlook the nuances in emotional expression.** For instance, avoid the temptation to focus on just the top label. We provide interactive visualizations in our [Playground](https://platform.hume.ai/) to help you map out complex patterns in real-life emotional behavior. These visualizations are informed by recent advances in emotion science, departing from reductive models that long “anchored the science of emotion to a predominant focus on prototypical facial expressions of the “basic six”: anger, disgust, fear, sadness, surprise, and happiness,” and embracing how “new discoveries reveal that the two most commonly studied models of emotion—the basic six and the affective circumplex (comprising valence and arousal)—each capture at most 30% of the variance in the emotional experiences people reliably report and in the distinct expressions people reliably recognize.” ([Cowen et al., 2019](https://journals.sagepub.com/doi/10.1177/1529100619850176))\n4. **Account for culture-specific meanings and display tendencies.** Studies have routinely observed subtle cultural differences in the meaning of expressions as well as broader “variations in the frequency and intensity with which different expressions were displayed” ([Cowen et al., 2022](https://psyarxiv.com/gbqtc/)). Given these differences, empathic AI applications should be tested in each population in which they are deployed and fine-tuned when necessary.\nRead about the [science](/docs/resources/science) behind our models if you’d like to delve deeper into how they work.\n\n---\n"
      },
      "docs/pages/documentation/resources/privacy.mdx": {
        "markdown": "---\ntitle: Privacy\n---\n\n## Privacy Policy\n\nOur [Privacy Policy](https://www.hume.ai/privacy-policy) governs how we collect and use personal information submitted to our products.\n\n### Zero Data Retention and Data Usage Options\n\nHume AI is HIPAA compliant, with features to enhance user privacy and data control. Our portal currently supports enabling/disabling these features in the user's [profile page.](https://platform.hume.ai/settings/profile)\n\n- **Zero Data Retention**: This feature allows users to turn off the storage of all chat histories (transcripts) or voice recordings for the EVI API. Other metadata such as API usage information will still be stored.\n\n- **Opt-Out of Data Being Used for Training**: By default, anonymized data from user interactions with the EVI API is used to improve our models. Users can toggle this option to prevent their data from being used for training purposes.\n\nFor added control, use a [custom language model](/docs/empathic-voice-interface-evi/custom-language-model) and obtain a Business Associate Agreement (BAA) directly with the model provider. To request a BAA and/or Data Processing Addendum (DPA) with Hume, please contact [legal@hume.ai](mailto:legal@hume.ai).\n\n<Callout intent=\"info\">\n  By default, data retention is enabled, and user data may be used for model training. Users must explicitly opt out to disable these features.\n</Callout>\n\n#### To enable or disable these options\n\n1. **Log into your Hume AI account.**\n2. **Navigate to your Profile page** by clicking on the profile icon on the sidebar.\n3. **Scroll down to the Privacy section** where you will see the options for \"Do not retain data\" and \"Do not use for training.\"\n4. **Toggle the switches** next to these options to enable or disable them according to your preference.\n5. **Click on 'Save changes'** to apply your settings.\n\n<Frame>\n  <img\n    src='file:99f7dba8-9bee-4697-86e0-6734a2755164'\n    alt='Privacy settings in the user profile'\n  />\n</Frame>\n\n<Callout intent=\"warning\">\n  Opting out of data retention will disable certain features, including the ability to resume chats and access your chat history.\n</Callout>\n\n---\n\n## API Data Usage Policy\n\nOur [API Data Usage Policy](https://platform.hume.ai/policies/api-data-usage-policy) details how and when we store API data.\n\n## Consumer Services FAQ\n\nOur Consumer Services FAQ explains how and when we store data processed by our frontend applications like our Playground.\n\n<AccordionGroup>\n<Accordion title=\"Does Hume AI train on my content to improve model performance?\" >\n\nFor non-API consumer products like our Playground and Demo, we may use content such as images, video files, audio files, and text files to improve our services. You can opt out of having your content used to improve our services at any time by adjusting your settings in your [profile page](https://platform.hume.ai/settings/profile). This opt-out will apply on a going-forward basis only.\n\nPlease note that for our API product, Hume AI will not use data submitted by customers via our API to train or improve our models.\n\n</Accordion>\n\n<Accordion title=\"How do I delete my account?\">\n\nYou can delete your account by submitting a user account deletion request in your [profile page on the Hume playground](https://platform.hume.ai/settings/profile). Once you submit your deletion request, we will delete your account within 30 days. Please note that for security reasons, once you delete your account, you may not re-sign up for an account with the same email address.\n\n</Accordion>\n\n<Accordion title=\"Is my content shared with third parties?\">\n\nWe share content with a select group of trusted service providers that help us provide our services. We share the minimum amount of content we need in order to accomplish this purpose and our service providers are subject to strict confidentiality and security obligations. Please see our [Privacy Policy](https://www.hume.ai/privacy-policy) for more information on who we may share your content with.\n\n</Accordion>\n\n<Accordion title=\"Where is my content stored?\">\n\nContent is stored on Hume AI systems and our trusted service providers' systems in the US and around the world.\n\n</Accordion>\n\n<Accordion title=\"Do humans view my content?\">\n\nA limited number of authorized Hume AI personnel, may view and access user content only as needed for these reasons: (1) investigating abuse or a security incident; (2) to provide support to you if you reach out to us with questions about your account; (3) or to comply with legal obligations. Access to content is subject to technical access controls and limited only to authorized personnel on a need-to-know basis. Additionally, we monitor and log all access to user content and authorized personnel must undergo security and privacy training prior to accessing any user content.\n\n</Accordion>\n\n<Accordion title=\"Does Hume AI sell my data?\">\n\nNo. We do not sell your data or share your content with third parties for marketing purposes.\n\n</Accordion>\n\n<Accordion title=\"How do I submit a data privacy request?\">\n\nPlease change your privacy settings through the [Profile page](https://platform.hume.ai/settings/profile). For further assistance, message the moderators on our [Discord Server](https://discord.com/invite/WPRSugvAm6).\n\n\n</Accordion>\n\n</AccordionGroup>\n\n---\n"
      },
      "docs/changelog/2024.mdx": {
        "markdown": "---\ntitle: Changelog\nslug: changelog\n---\n\n## October 25, 2024 [#10-25-2024]\n\n### EVI API additions [#evi-api-additions-10-25-2024]\n\n- Added support for `claude-3.5-sonnet-latest` (currently points to `claude-3-5-sonnet-20241022`) and made this model the recommended supplemental LLM\n- Added support for tool use with Gemini models (`gemini-1.5-pro` and `gemini-1.5-flash`)\n\n### Bugs bashed [#bugs-bashed-10-25-2024]\n\n- Fixed a bug where [context](https://dev.hume.ai/reference/empathic-voice-interface-evi/chat/chat#send.Session%20Settings.context) was incorrectly set as persistent and added to every user messages, despite being specified as `type: temporary`\n\n---\n\n## October 11, 2024 [#10-11-2024]\n\n### EVI API additions [#evi-api-additions-10-11-2024]\n\n- Added a new base voice, `Sunny`, featuring a male voice with an Indian accent\n- Improved the reliability of the experimental custom voice creation feature by reducing hallucinations, and added 11 new adjustable parameters - `articulation`, `buoyancy`, `enthusiasm`, `nasality`, `smoothness`, `tightness`, `assertiveness`, `confidence`, `gender`, `relaxedness`, `tepidity`\n\n### EVI API changes [#evi-api-changes-10-11-2024]\n\n- Added a more informative error message for when Google Gemini models are overloaded, returning an `E0718` error code instead of silently dropping the connection\n- Implemented Anthropic prompt caching to reduce latency with Claude 3 models, especially for longer prompts and conversations\n\n### Bugs bashed [#bugs-bashed-10-11-2024]\n\n- Reduced the frequency of all hallucinations when using EVI 2\n- Prevented voice hallucinations when EVI 2 outputs less common text formats, including numbered lists, emails, hashtags, very short messages, and numbers\n\n---\n\n## September 27, 2024 [#09-27-2024]\n\n### EVI API changes [#evi-api-changes-09-27-2024]\n\n- Upgraded `gemini-1.5-pro` and `gemini-1.5-flash` models to use the latest versions, `gemini-1.5-pro-002` and `gemini-1.5-flash-002`\n- Improved audio quality for EVI phone calling\n\n### Bugs bashed [#bugs-bashed-09-27-2024]\n\n- Fixed an issue with the EVI WebSocket auto-reconnecting after timeouts, by updating the inactivity timeout socket close code from 1001 to 1000\n- Fixed a bug where the `GET /chat_groups/{id}` endpoint would return all chats, not just the chats in the `chat_group`\n\n---\n\n## September 20, 2024 [#09-20-2024]\n\n### EVI API changes [#evi-changes-09-20-2024]\n\n- Added support for resuming chats with supplemental LLMs for EVI 2\n- Updated the DACHER base voice, making it significantly higher quality and more reliable\n- Improved EVI's ability to recover from accidental interruptions. Previously, if EVI was interrupted by non-speech sounds, EVI would stop and wait for further input. EVI will now continue speaking after these interruptions\n\n### Bugs bashed [#bugs-bashed-09-20-2024]\n\n- Fixed an issue where @ signs would be removed in emails, leading to incorrect pronunciation; now they will be replaced with \"at\" and pronounced correctly\n- Fixed a bug with numbered lists, leading to lists being split into new lines and spoken incorrectly\n\n---\n\n## September 13, 2024 [#09-13-2024]\n\n### EVI API additions [#evi-api-additions-09-13-2024]\n\n- Released the EVI 2 API, with major improvements to the core EVI experience. Developers can try it now: [EVI 2 docs](/docs/empathic-voice-interface-evi/evi-2)\n- Introduced an experimental feature for creating custom voices through adjustable sliders: [Custom voices](/docs/empathic-voice-interface-evi/voices)\n\n### EVI API changes [#evi-api-changes-09-13-2024]\n\n- Improved text validation permissiveness for config names and descriptions, allowing a wider range of printable characters\n- Added a new error code (E0720) to handle scenarios where [data retention](/docs/resources/privacy#zero-data-retention-and-data-usage-options) is off so chat group history is unavailable, providing a more informative error message before closing the session\n\n### Bugs bashed [#bugs-bashed-09-13-2024]\n\n- Fixed an issue to ensure `chat_id` is passed to users when using custom language models and phone calling together, enabling developers to retrieve post-call details with these features\n- Fixed a bug where resumed chat groups would use the first rather than the most recent config in the chat group when starting a new chat\n\n---\n\n## August 8, 2024 [#08-08-2024]\n\n### EVI API changes [#evi-api-changes-08-08-2024]\n\n- Enabled resuming previous chats with a new config. Previously, it was not possible to resume chats in a chat group with different configs. This change allows developers to change the prompt, voice, and other options in their config, while still retaining the context in their chat history: [Chat resumability](/docs/empathic-voice-interface-evi/faq#does-evi-support-resuming-chats)\n- Introduced the new `E0717` error type, which will occur when a developer tries resuming a chat when one of the chats in its `chat_group` is already active.\n- Added two new errors for issues with supplemental language model providers. If a provider is overloaded, EVI will return `E0718`, and if a provider has unexpected internal errors EVI will return `E0719`. If these errors occur, developers can try again later or change their configurations to use a different LM provider.\n\n---\n\n## August 2, 2024 [#08-02-2024]\n\n### EVI API additions [#evi-api-additions-08-02-2024]\n\n- Added support for new language models with the Groq provider: `llama-3.1-70b-versatile` and `llama-3.1-8b-instant`\n- Added support for new language models with the Fireworks provider: `accounts/fireworks/models/llama-v3p1-405b-instruct`, `accounts/fireworks/models/llama-v3p1-70b-instruct`, and `accounts/fireworks/models/llama-v3p1-8b-instruct`\n- Added a `hang_up` built in tool to allow EVI to end calls. To use this, developers can include the `hang_up` tool in the `builtin_tools` object when creating a config, and provide instructions on when EVI should end the call in the prompt\n\n### EVI API changes [#evi-api-changes-08-02-2024]\n\n- Added the ability to [create a prompt during config creation](https://dev.hume.ai/reference/empathic-voice-interface-evi/configs/create-config#request.body.prompt). The new prompt object in the config creation request has three nullable fields (`id`, `version`, and `text`). Providing only `text` in the `prompt` field when creating a new config will create a new prompt\n- Dropped support for the older Llama 3 70B Instruct model from Fireworks (`accounts/fireworks/models/llama-v3-70b-instruct`), as it is replaced by the new Llama 3.1 70B model (`accounts/fireworks/models/llama-v3p1-70b-instruct`)\n\n---\n\n## July 26, 2024 [#07-26-2024]\n\n### EVI API changes [#evi-api-changes-07-26-2024]\n\n- Invalid `SessionSettings` payloads now return an `E0716` error. Invalid payloads include empty system prompts, duplicate tool names, removing previously enabled tools, and overlapping builtin and custom tool names. If an update is invalid, the error message will explain why, and the `SessionSettings` will not be applied\n\n---\n\n## July 18, 2024 [#07-18-2024]\n\n### EVI API additions [#evi-api-additions-07-18-2024]\n\n- Added the `on_inactivity_timeout` configuration option, allowing EVI to speak a message when the user is inactive for some period of time: [Inactivity timeout message](https://dev.hume.ai/reference/empathic-voice-interface-evi/configs/create-config#request.body.event_messages.on_inactivity_timeout)\n- Added the `on_max_duration_timeout` configuration option, allowing EVI to speak a message when the maximum chat duration is reached: [Max duration timeout message](https://dev.hume.ai/reference/empathic-voice-interface-evi/configs/create-config#request.body.event_messages.on_max_duration_timeout)\n- Added support for the `gpt-4o-mini` language model\n\n### EVI API changes [#evi-api-changes-07-18-2024]\n\n- Updated the Hume Typescript SDK, with detailed changes and a migration guide in the [release notes for version 0.8.2](https://github.com/HumeAI/hume-typescript-sdk/releases/tag/0.8.2)\n\n---\n\n## July 12, 2024 [#07-12-2024]\n\n### EVI API additions [#evi-api-additions-07-12-2024]\n\n- Added dynamic variables, allowing developers to define variables in `SessionSettings` and reference their values in the system prompt (e.g., `{{variable_name}}`): [Dynamic variables](https://dev.hume.ai/docs/empathic-voice-interface-evi/configuration#dynamic-variables)\n- Added support for the Google language model provider and the `gemini-1.5-pro` and `gemini-1.5-flash` language models\n- Added EVI configuration options to set timeouts for user inactivity (`inactivity`) and maximum session duration (`max_duration`): [Timeouts](https://dev.hume.ai/reference/empathic-voice-interface-evi/configs/create-config#response.body.timeouts)\n- Added support for retrieving the phone numbers of inbound callers, using the `metadata.twilio.caller_number` property of the `evi/chats/:id` endpoint: [List chat events](https://dev.hume.ai/reference/empathic-voice-interface-evi/chats/list-chat-events#response.body.metadata)\n- Added the `/v0/evi/language-models` API endpoint to retrieve the language models supported by EVI and the built-in tools available for each model\n\n---\n\n## July 5, 2024 [#07-05-2024]\n\n### EVI API additions [#evi-api-additions-07-05-2024]\n\n- Added a `config_id` filter option for the `GET /chat_groups` endpoint, allowing developers to limit paginated results to chat groups associated with a specific config ID\n- Added a `name` filter option for the `GET /configs`, `GET /tools`, and `GET /prompts` endpoints. These allow developers to limit paginated results to only include objects with a specific name\n- Introduced data storage options for the EVI API. The \"do not retain data\" option disables storage of chat histories and voice recordings for EVI sessions. The \"do not use for training\" opts out of Hume using anonymized data from EVI sessions for model improvements. Developers can toggle these options from the [profile page in the Hume portal](https://platform.hume.ai/settings/profile)\n- Added more descriptive error messages for transcription-related errors\n\n---\n\n## June 28, 2024 [#06-28-2024]\n\n### EVI API additions [#evi-api-additions-06-28-2024]\n\n- Added a `request_id` field to ChatMetadata to uniquely identify sessions\n- Added an [on_new_chat](https://dev.hume.ai/reference/empathic-voice-interface-evi/configs/create-config#response.body.event_messages.on_new_chat) configuration option. Set `event_messages.on_new_chat.enabled` to `true` to have EVI speak first in the conversation. To control the exact text of that first message, also set `event_messages.on_new_chat.text`\n- Added an [allow_short_responses](https://dev.hume.ai/reference/empathic-voice-interface-evi/configs/create-config#response.body.ellm_model.allow_short_responses) configuration option, which allows developers to turn off short responses generated by Hume's empathic large language model (eLLM). To disable these responses, set `ellm_model.allow_short_responses` to `false`\n\n---\n\n## June 21, 2024 [#06-21-2024]\n\n### EVI API additions [#evi-api-additions-06-21-2024]\n\n- Added support for Claude 3.5 Sonnet (`claude-3-5-sonnet-20240620`) to the EVI API\n\n### EVI API changes [#evi-api-changes-06-21-2024]\n\n- Changed the default language model for the EVI API to Claude 3.5 Sonnet\n- Changed the default voice for the EVI API to `Ito`\n- Changed requirements to allow tool use if no language model is specified, allowing tool use when using the default LLM\n\n### Bugs bashed [#bugs-bashed-06-21-2024]\n\n- Fixed a bug where sending an `AssistantInput` message at the beginning of an EVI chat configured with Anthropic models would result in an error\n- Fixed a bug with chat resumability where previous chat group events were not being included in the LLM chat history, and EVI would forget details from before the chat was resumed\n\n---\n\n## June 7, 2024 [#06-07-2024]\n\n### EVI API additions [#evi-api-additions-06-07-2024]\n\n- Added a `total_pages` field to all paginated EVI REST endpoints\n\n### EVI API changes [#evi-api-changes-06-07-2024]\n\n- EVI REST endpoints will now return the 201 status code instead of the 200 status code when creating new entities including new configs, chat groups, prompts, and tools\n- EVI REST endpoints will now return the 404 status code if referencing a config, chat, prompt, or tool that doesn't exist. If an invalid page number exceeding the total number of pages is specified, the endpoint will return an empty list rather than a 404 status code\n- Added more detailed error messages for Custom Language Model. If the connection between Hume's API and a developers's language model times out, we will now send an `E0712:custom_language_model_timed_out` error. If the connection fails, we will send an `E0713:custom_language_model_connection_failed` error\n\n---\n\n## May 31, 2024 [#05-31-2024]\n\n### EVI API additions [#evi-api-additions-05-31-2024]\n\n- Added chat resumability, allowing developers to resume previous chats with EVI by specifying a chat group ID in the `resumed_chat_group_id` query parameter: [Chat resumability](https://dev.hume.ai/docs/empathic-voice-interface-evi/faq#does-evi-support-chat-resumability)\n- Added the `api.hume.ai/v0/evi/chat_groups` endpoint to support listing chat groups or listing events from a specific chat group: [Chat groups endpoint](https://dev.hume.ai/reference/empathic-voice-interface-evi/chat-groups/list-chat-groups)\n- Added the `ChatMetadata` output message, which includes a `chat_id` to identify each individual chat with EVI and a `chat_group_id` to support resumability and group resumed chats together: [ChatMetadata](https://dev.hume.ai/reference/empathic-voice-interface-evi/chat/chat#receive.Chat%20Metadata.chat_group_id)\n- Added support for chat resumability to the Hume Python SDK: [Release notes for version 0.6.0](https://github.com/HumeAI/hume-python-sdk/releases/tag/v0.6.0)\n- Added support for chat resumability and pause/resume messages to the Hume TypeScript SDK: [Release notes for version 0.1.6](https://github.com/HumeAI/empathic-voice-api-js/releases/tag/v0.1.6)\n\n### EVI API changes [#evi-api-changes-05-31-2024]\n\n- Added more detailed error messages for Custom Language Model. If Hume's API cannot reach a developers's language model, we will now send an `E0706: custom_language_model_unreachable` error to the developer\n- Added error messages for chat resumability - `E0710: resuming_chat_group_with_new_config` when a developer attempts to resume a chat group with a new config, `E0708: chat_group_not_found` when a chat group does not exist, and `E0709: config_not_found` when a config does not exist\n- Added an error message for unavailable EVI supplemental LLMs. While supplemental LLMs can always be enabled by passing an API for a 3rd party LLM service, if EVI is configured with an LLM that is not currently available as a Hume-managed LLM, we will send an `E0711: language_model_unavailable` error\n\n---\n\n## May 24, 2024 [#05-24-2024]\n\n### EVI API additions [#evi-api-additions-05-24-2024]\n\n- Added support for streaming custom language model responses in parts. Developers can send text chunks to start generating audio responses much faster\n  The Custom Language Model endpoint now expects text to be formatted in the following payload:\n\n      ```\n      # send this to add text\n      {\"type\": \"assistant_input\", \"text\": \"<chunk>\"}\n\n      # send this message when you're done speaking\n      {\"type\": \"assistant_end\"}\n      ```\n\n- Added support for pausing and resuming EVI responses with with `pause_assistant_message` and `resume_assistant_message`. Sending a pause message stops EVI from generating and speaking Assistant messages. Sending a resume message allows EVI to continue responding to the User messages\n\n### EVI API changes [#evi-api-changes-05-24-2024]\n\n- Increased the limit for tool descriptions from 100 chars to 512 chars\n- Set the maximum length for `tool_name` to 64 chars\n\n---\n\n## May 17, 2024 [#05-17-2024]\n\n### EVI API additions [#evi-api-additions-05-17-2024]\n\n- Added support for built-in tools, starting with web search: [Using built-in tools](https://dev.hume.ai/docs/empathic-voice-interface-evi/tool-use#using-built-in-tools)\n- Added support for phone calling through a Twilio integration: [Phone calling](https://dev.hume.ai/docs/empathic-voice-interface-evi/phone-calling)\n- Added `DACHER` voice to the voice configuration options\n- Added support for the `gpt-4o` language model\n\n### EVI API changes [#evi-api-changes-05-17-2024]\n\n- Increased the limit for tool descriptions from 100 chars to 512 chars\n\n---\n\n## May 10, 2024 [#05-10-2024]\n\n### EVI API additions [#evi-api-additions-05-10-2024]\n\n- Added support for three open-source models through the Groq language model provider: Gemma 7B (`gemma-7b-it`), Llama 3 8B (`llama3-8b-8192`), and Llama 3 70B (`llama3-70b-8192`)\n- Added support for Llama 30 70B language model through the Fireworks language model provider (`accounts/fireworks/models/llama-v3-70b-instruct`)\n- Added a `custom_session_id` field in the `SessionSettings` message, and documentation for using it: [Custom Session ID](https://dev.hume.ai/docs/empathic-voice-interface-evi/custom-language-model#custom-session-id)\n\n### EVI API changes [#evi-api-changes-05-10-2024]\n\n- Disabled short response generation for [custom language models](https://dev.hume.ai/docs/empathic-voice-interface-evi/custom-language-model)\n- Added error codes for when Hume credits run out while using EVI. Users will receive either the `E0300` error code if they are out of credits or `E0301` if they are blocked via subscription. The WebSocket connection will also be closed with code `1008`\n\n### Bugs bashed [#bugs-bashed-05-10-2024]\n\n- Fixed an issue with the `from_text` field in `UserMessage`. It is now set to True if any part of the `UserMessage` is from a developer-provided `UserInput` message\n\n---\n\n## May 3, 2024 [#05-03-2024]\n\n### EVI API additions [#evi-api-additions-05-03-2024]\n\n- Added support for `Tools` through our [tool use feature](https://dev.hume.ai/docs/empathic-voice-interface-evi/tool-use)\n- Added `ToolErrorMessage` as a supported input type\n\n### Bugs bashed [#bugs-bashed-05-03-2024]\n\n- Added an error that returns status `400` if a Config, Tool, or Prompt is created with a name or `versionDescription` that's too long or non-ASCII. Names must be under 75 chars, `versionDescription` must be under 256 chars, `description` for Tools must be under 100 chars, `fallback_content` for Tools must be under 2048 chars, and `model_resource` for LanguageModels must be under 1024 chars\n- Fixed several edge cases and bugs involving Tool calls, including supporting only single tool calls with EVI (no parallel tool calling)\n\n---\n\n## April 30, 2024 [#04-30-2024]\n\n### EVI API additions [#evi-api-additions-04-30-2024]\n\n- Added support for reading language model type from EVI configs\n- Added support for reading language model `temperature` from EVI configs\n- Added system prompt to `SessionSettings` message to allow dynamic prompt updating\n\n### EVI API changes [#evi-api-changes-04-30-2024]\n\n- Renamed `TextInput` message to `UserInput` to indicate this is text to be added to the chat history as a `User` message and used as context by the LLM\n- Renamed `TtsInput` message to `AssistantInput` to make it clear that this is input text to be spoken by EVI and added to the chat history as an `Assistant` message\n- Moved audio configuration options to `SessionSettings` message\n\n### Bugs bashed [#bugs-bashed-04-30-2024]\n\n- Fixed chats staying open after errors, chats will now end upon exceptions\n- Added an error thrown if config uses both `custom_model` and `prompt`, because custom language models do not use prompts\n- Fixed issue where erroring when sending errors would cause the API to get stuck\n- Added clearer errors for custom language models\n- Added unable to configure audio service error\n- Added an error to invalidate outdated language model responses\n"
      }
    },
    "search": {
      "type": "singleAlgoliaIndex",
      "value": {
        "type": "unversioned",
        "indexSegment": {
          "id": "seg_hume.docs.buildwithfern.com_aaf3a182-427c-415d-9061-069ee233b644",
          "searchApiKey": "N2RlMjMyYjdkODY3OGY5YmQ0ODNhMjk5NmI4ZGI0NmY0YmNjMjdjMmVhMTIwNWJiNTA3ZDY2NzZjNjI4NWU0NmZpbHRlcnM9aW5kZXhTZWdtZW50SWQlM0FzZWdfaHVtZS5kb2NzLmJ1aWxkd2l0aGZlcm4uY29tX2FhZjNhMTgyLTQyN2MtNDE1ZC05MDYxLTA2OWVlMjMzYjY0NCZ2YWxpZFVudGlsPTE3MzA3NzU5MTQ="
        }
      }
    },
    "id": "docs_definition_3ede105c-b417-4843-b845-a698ad5fc195"
  },
  "lightModeEnabled": true
}
