{
  "baseUrl": {
    "domain": "vellum.docs.buildwithfern.com"
  },
  "definition": {
    "algoliaSearchIndex": "vellum.docs.buildwithfern.com_fc435f7b-4fa9-4473-9e5c-82239b886f27",
    "config": {
      "navigation": {
        "tabs": [
          {
            "type": "group",
            "title": "Help Center",
            "icon": "fa-solid fa-cube",
            "items": [
              {
                "type": "section",
                "title": "Welcome",
                "urlSlug": "welcome",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/content/help/welcome/intro.mdx",
                    "title": "Welcome to Vellum",
                    "urlSlug": "welcome",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/welcome/getting-support.mdx",
                    "title": "Getting Support",
                    "urlSlug": "getting-support",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Prompts",
                "urlSlug": "prompts",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/content/help/prompts/prompt-engineering-in-vellum.mdx",
                    "title": "Prompt Engineering in Vellum",
                    "urlSlug": "prompt-engineering",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/prompts/collaborating-on-prompts.mdx",
                    "title": "Collaborating on Prompts",
                    "urlSlug": "collaboration",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/prompts/adding-custom-models-to-your-workspace.mdx",
                    "title": "Adding Custom Models to your Workspace",
                    "urlSlug": "custom-models",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/prompts/working-with-images-in-vellum.mdx",
                    "title": "Working with Images in Vellum",
                    "urlSlug": "images",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/prompts/prompting-tips-and-examples.mdx",
                    "title": "Prompting Tips and Examples",
                    "urlSlug": "prompting-tips-and-examples",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Workflows",
                "urlSlug": "workflows",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/content/help/workflows/intro.mdx",
                    "title": "Introduction to Workflows",
                    "urlSlug": "introduction",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/workflows/experimenting.mdx",
                    "title": "Experimenting with Workflows",
                    "urlSlug": "experimentation",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/workflows/node-types.mdx",
                    "title": "Node Types",
                    "urlSlug": "node-types",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/workflows/common-architectures.mdx",
                    "title": "Common Architectures",
                    "urlSlug": "common-architectures",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/workflows/common-data-transforms.mdx",
                    "title": "Common Data Transformation Templates",
                    "urlSlug": "common-data-transforms",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/workflows/code-execution-node-examples.mdx",
                    "title": "Code Execution Node Examples",
                    "urlSlug": "code-execution-node-examples",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/workflows/integrating.mdx",
                    "title": "Integrating w/ APIs",
                    "urlSlug": "api-integration",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/workflows/function-calling.mdx",
                    "title": "Function Calling with Chat Models",
                    "urlSlug": "function-calling-with-chat-models",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/workflows/examples-and-walkthroughs.mdx",
                    "title": "Examples & Walkthroughs",
                    "urlSlug": "examples-and-walkthroughs",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Evaluation & Test Suites",
                "urlSlug": "evaluation",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/content/help/evaluation/quantitatively-evaluating-outputs.mdx",
                    "title": "Quantitative Evaluation",
                    "urlSlug": "quantitative-evaluation",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/evaluation/evaluating-rag-pipelines.mdx",
                    "title": "Evaluating RAG Pipelines",
                    "urlSlug": "evaluating-rag-pipelines",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/evaluation/online-evaluations.mdx",
                    "title": "Online Evaluations",
                    "urlSlug": "online-evaluations",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Metrics",
                "urlSlug": "metrics",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/content/help/metrics/out-of-the-box-metrics.mdx",
                    "title": "Out of the Box Metrics",
                    "urlSlug": "out-of-the-box-metrics",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/metrics/custom-metrics.mdx",
                    "title": "Custom Metrics",
                    "urlSlug": "custom-metrics",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Deployments",
                "urlSlug": "deployments",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/content/help/deployments/prompt-lifecycle-management.mdx",
                    "title": "Prompt Lifecycle Management",
                    "urlSlug": "prompt-lifecycle-management",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/deployments/observability-in-production.mdx",
                    "title": "Observability in Production",
                    "urlSlug": "observability",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/deployments/monitoring-production-trends.mdx",
                    "title": "Monitoring Production Trends",
                    "urlSlug": "monitoring",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/deployments/managing-releases.mdx",
                    "title": "Managing Releases",
                    "urlSlug": "managing-releases",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Documents",
                "urlSlug": "documents",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/content/help/documents/uploading-documents.mdx",
                    "title": "Uploading Documents",
                    "urlSlug": "uploading-documents",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/documents/running-searches.mdx",
                    "title": "Running Searches in Playground",
                    "urlSlug": "running-searches",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/documents/integrating-search.mdx",
                    "title": "Integrating w/ Search API",
                    "urlSlug": "api-integration",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/help/documents/metadata-filtering.mdx",
                    "title": "Metadata Filtering",
                    "urlSlug": "metadata-filtering",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Security",
                "urlSlug": "security",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/content/help/security/hmac-authentication.mdx",
                    "title": "HMAC Authentication",
                    "urlSlug": "hmac-authentication",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlug": "help-center",
            "skipUrlSlug": false
          },
          {
            "type": "group",
            "title": "API Reference",
            "icon": "fa-solid fa-code",
            "items": [
              {
                "type": "section",
                "title": "Overview",
                "urlSlug": "overview",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/content/api/intro.mdx",
                    "title": "Getting started",
                    "urlSlug": "getting-started",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/api/authentication.mdx",
                    "title": "Authentication",
                    "urlSlug": "authentication",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "apiV2",
                "node": {
                  "id": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                  "type": "apiReference",
                  "title": "API Reference",
                  "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                  "paginated": false,
                  "slug": "api-reference",
                  "hideTitle": false,
                  "showErrors": false,
                  "children": [
                    {
                      "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.section:prompts",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.execute-prompt",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_.execute-prompt",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "generally-available",
                          "isResponseStream": false,
                          "title": "Execute Prompt",
                          "slug": "api-reference/prompts/execute-prompt"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.execute-prompt-stream",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_.execute-prompt-stream",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "generally-available",
                          "isResponseStream": true,
                          "title": "Execute Prompt as Stream",
                          "slug": "api-reference/prompts/execute-prompt-stream"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.submit-completion-actuals",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_.submit-completion-actuals",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "generally-available",
                          "isResponseStream": false,
                          "title": "Submit Prompt Execution Actuals",
                          "slug": "api-reference/prompts/submit-completion-actuals"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.retrieve_provider_payload",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_deployments.retrieve_provider_payload",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Retrieve Provider Payload",
                          "slug": "api-reference/prompts/retrieve-provider-payload"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.section:prompt-sandboxes",
                          "type": "apiPackage",
                          "children": [
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.deploy_prompt",
                              "type": "endpoint",
                              "method": "POST",
                              "endpointId": "endpoint_sandboxes.deploy_prompt",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "Deploy Prompt Sandbox",
                              "slug": "api-reference/prompts/sandboxes/deploy-prompt"
                            },
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.upsert_sandbox_scenario",
                              "type": "endpoint",
                              "method": "POST",
                              "endpointId": "endpoint_sandboxes.upsert_sandbox_scenario",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "Upsert Prompt Sandbox Scenario",
                              "slug": "api-reference/prompts/sandboxes/upsert-scenario"
                            },
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.delete_sandbox_scenario",
                              "type": "endpoint",
                              "method": "DELETE",
                              "endpointId": "endpoint_sandboxes.delete_sandbox_scenario",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "Delete Prompt Sandbox Scenario",
                              "slug": "api-reference/prompts/sandboxes/delete-scenario"
                            }
                          ],
                          "title": "Prompt Sandboxes",
                          "slug": "api-reference/prompts/sandboxes",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "pointsTo": "api-reference/prompts/sandboxes/deploy-prompt"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.section:prompt-deployments",
                          "type": "apiPackage",
                          "children": [
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.list",
                              "type": "endpoint",
                              "method": "GET",
                              "endpointId": "endpoint_deployments.list",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "List Prompt Deployments",
                              "slug": "api-reference/prompts/deployments/list"
                            },
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.retrieve",
                              "type": "endpoint",
                              "method": "GET",
                              "endpointId": "endpoint_deployments.retrieve",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "Retrieve Prompt Deployment",
                              "slug": "api-reference/prompts/deployments/retrieve"
                            },
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.retrieve_deployment_release_tag",
                              "type": "endpoint",
                              "method": "GET",
                              "endpointId": "endpoint_deployments.retrieve_deployment_release_tag",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "Retrieve Prompt Deployment Release Tag",
                              "slug": "api-reference/prompts/deployments/retrieve-release-tag"
                            },
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.update_deployment_release_tag",
                              "type": "endpoint",
                              "method": "PATCH",
                              "endpointId": "endpoint_deployments.update_deployment_release_tag",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "Update Prompt Deployment Release Tag",
                              "slug": "api-reference/prompts/deployments/update-release-tag"
                            }
                          ],
                          "title": "Prompt Deployments",
                          "slug": "api-reference/prompts/deployments",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "pointsTo": "api-reference/prompts/deployments/list"
                        }
                      ],
                      "title": "Prompts",
                      "slug": "api-reference/prompts",
                      "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                      "pointsTo": "api-reference/prompts/execute-prompt"
                    },
                    {
                      "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.section:workflows",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.execute-workflow",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_.execute-workflow",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "generally-available",
                          "isResponseStream": false,
                          "title": "Execute Workflow",
                          "slug": "api-reference/workflows/execute-workflow"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.execute-workflow-stream",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_.execute-workflow-stream",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "generally-available",
                          "isResponseStream": true,
                          "title": "Execute Workflow as Stream",
                          "slug": "api-reference/workflows/execute-workflow-stream"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.submit-workflow-execution-actuals",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_.submit-workflow-execution-actuals",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "generally-available",
                          "isResponseStream": false,
                          "title": "Submit Workflow Execution Actuals",
                          "slug": "api-reference/workflows/submit-workflow-execution-actuals"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_workflowSandboxes",
                          "type": "apiPackage",
                          "children": [
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742:endpoint_workflowSandboxes.deploy_workflow",
                              "type": "endpoint",
                              "method": "POST",
                              "endpointId": "endpoint_workflowSandboxes.deploy_workflow",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "Deploy Workflow",
                              "slug": "api-reference/workflows/sandboxes/deploy-workflow"
                            }
                          ],
                          "title": "Workflow Sandboxes",
                          "slug": "api-reference/workflows/sandboxes",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "pointsTo": "api-reference/workflows/sandboxes/deploy-workflow"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_workflowDeployments",
                          "type": "apiPackage",
                          "children": [
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_workflowDeployments.list",
                              "type": "endpoint",
                              "method": "GET",
                              "endpointId": "endpoint_workflowDeployments.list",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "List Workflow Deployments",
                              "slug": "api-reference/workflows/deployments/list"
                            },
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_workflowDeployments.retrieve",
                              "type": "endpoint",
                              "method": "GET",
                              "endpointId": "endpoint_workflowDeployments.retrieve",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "Retrieve Workflow Deployment",
                              "slug": "api-reference/workflows/deployments/retrieve"
                            },
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_workflowDeployments.retrieve_workflow_release_tag",
                              "type": "endpoint",
                              "method": "GET",
                              "endpointId": "endpoint_workflowDeployments.retrieve_workflow_release_tag",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "Retrieve Workflow Deployment Release Tag",
                              "slug": "api-reference/workflows/deployments/retrieve-release-tag"
                            },
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_workflowDeployments.update_workflow_release_tag",
                              "type": "endpoint",
                              "method": "PATCH",
                              "endpointId": "endpoint_workflowDeployments.update_workflow_release_tag",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "Update Workflow Deployment Release Tag",
                              "slug": "api-reference/workflows/deployments/update-release-tag"
                            }
                          ],
                          "title": "Workflow Deployments",
                          "slug": "api-reference/workflows/deployments",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "pointsTo": "api-reference/workflows/deployments/list"
                        }
                      ],
                      "title": "Workflows",
                      "slug": "api-reference/workflows",
                      "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                      "pointsTo": "api-reference/workflows/execute-workflow"
                    },
                    {
                      "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_documentIndexes",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_documentIndexes.search",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_.search",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "generally-available",
                          "isResponseStream": false,
                          "title": "Search",
                          "slug": "api-reference/document-indexes/search"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_documentIndexes.add_document",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_documentIndexes.add_document",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Add Document",
                          "slug": "api-reference/document-indexes/add-document"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_documentIndexes.create",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_documentIndexes.create",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Create Document Index",
                          "slug": "api-reference/document-indexes/create"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_documentIndexes.retrieve",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_documentIndexes.retrieve",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Retrieve Document Index",
                          "slug": "api-reference/document-indexes/retrieve"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_documentIndexes.list",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_documentIndexes.list",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "List Document Indexes",
                          "slug": "api-reference/document-indexes/list"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_documentIndexes.partialUpdate",
                          "type": "endpoint",
                          "method": "PATCH",
                          "endpointId": "endpoint_documentIndexes.partialUpdate",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Update Document Index",
                          "slug": "api-reference/document-indexes/partial-update"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_documentIndexes.update",
                          "type": "endpoint",
                          "method": "PUT",
                          "endpointId": "endpoint_documentIndexes.update",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Replace Document Index",
                          "slug": "api-reference/document-indexes/update"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742:endpoint_documentIndexes.destroy",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_documentIndexes.destroy",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Destroy",
                          "slug": "api-reference/document-indexes/destroy"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742:endpoint_documentIndexes.remove_document",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_documentIndexes.remove_document",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Remove Document",
                          "slug": "api-reference/document-indexes/remove-document"
                        }
                      ],
                      "title": "Document Indexes",
                      "slug": "api-reference/document-indexes",
                      "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                      "pointsTo": "api-reference/document-indexes/search"
                    },
                    {
                      "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_documents",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_documents.upload",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_documents.upload",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "generally-available",
                          "isResponseStream": false,
                          "title": "Upload Document",
                          "slug": "api-reference/documents/upload"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_documents.retrieve",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_documents.retrieve",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Retrieve Document",
                          "slug": "api-reference/documents/retrieve"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_documents.list",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_documents.list",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "generally-available",
                          "isResponseStream": false,
                          "title": "List Documents",
                          "slug": "api-reference/documents/list"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_documents.partialUpdate",
                          "type": "endpoint",
                          "method": "PATCH",
                          "endpointId": "endpoint_documents.partialUpdate",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Update Document",
                          "slug": "api-reference/documents/partial-update"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742:endpoint_documents.destroy",
                          "type": "endpoint",
                          "method": "DELETE",
                          "endpointId": "endpoint_documents.destroy",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Destroy",
                          "slug": "api-reference/documents/destroy"
                        }
                      ],
                      "title": "Documents",
                      "slug": "api-reference/documents",
                      "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                      "pointsTo": "api-reference/documents/upload"
                    },
                    {
                      "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.section:test-suites",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.test-suite",
                          "type": "apiPackage",
                          "children": [
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.list_test_suite_test_cases",
                              "type": "endpoint",
                              "method": "GET",
                              "endpointId": "endpoint_testSuites.list_test_suite_test_cases",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "List Test Cases",
                              "slug": "api-reference/test-suites/test-cases/list"
                            },
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.upsert_test_suite_test_case",
                              "type": "endpoint",
                              "method": "POST",
                              "endpointId": "endpoint_testSuites.upsert_test_suite_test_case",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "Upsert Test Cases",
                              "slug": "api-reference/test-suites/test-cases/upsert"
                            },
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.test_suite_test_cases_bulk",
                              "type": "endpoint",
                              "method": "POST",
                              "endpointId": "endpoint_testSuites.test_suite_test_cases_bulk",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": true,
                              "title": "Bulk Update Test Cases",
                              "slug": "api-reference/test-suites/test-cases/bulk-update"
                            },
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.delete_test_suite_test_case",
                              "type": "endpoint",
                              "method": "DELETE",
                              "endpointId": "endpoint_testSuites.delete_test_suite_test_case",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "Delete Test Case",
                              "slug": "api-reference/test-suites/test-cases/delete"
                            }
                          ],
                          "title": "Test Cases",
                          "slug": "api-reference/test-suites/test-cases",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "pointsTo": "api-reference/test-suites/test-cases/list"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_testSuiteRuns",
                          "type": "apiPackage",
                          "children": [
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_testSuiteRuns.create",
                              "type": "endpoint",
                              "method": "POST",
                              "endpointId": "endpoint_testSuiteRuns.create",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "Create Test Suite Run",
                              "slug": "api-reference/test-suites/runs/create"
                            },
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_testSuiteRuns.retrieve",
                              "type": "endpoint",
                              "method": "GET",
                              "endpointId": "endpoint_testSuiteRuns.retrieve",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "Retrieve Test Suite Run",
                              "slug": "api-reference/test-suites/runs/retrieve"
                            },
                            {
                              "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.subpackage_testSuiteRuns.listExecutions",
                              "type": "endpoint",
                              "method": "GET",
                              "endpointId": "endpoint_testSuiteRuns.listExecutions",
                              "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                              "availability": "beta",
                              "isResponseStream": false,
                              "title": "List Test Suite Executions",
                              "slug": "api-reference/test-suites/runs/list-executions"
                            }
                          ],
                          "title": "Test Suite Runs",
                          "slug": "api-reference/test-suites/runs",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "pointsTo": "api-reference/test-suites/runs/create"
                        }
                      ],
                      "title": "Test Suites",
                      "slug": "api-reference/test-suites",
                      "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                      "pointsTo": "api-reference/test-suites/test-cases/list"
                    },
                    {
                      "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.section:folders",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.add_entity_to_folder",
                          "type": "endpoint",
                          "method": "POST",
                          "endpointId": "endpoint_folderEntities.add_entity_to_folder",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Add Entity to Folder",
                          "slug": "api-reference/folders/add-entity-to-folder"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.list-1",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_folderEntities.list",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "List Folder Entities",
                          "slug": "api-reference/folders/list-folder-entities"
                        }
                      ],
                      "title": "Folders",
                      "slug": "api-reference/folders",
                      "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                      "pointsTo": "api-reference/folders/add-entity-to-folder"
                    },
                    {
                      "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.section:secrets",
                      "type": "apiPackage",
                      "children": [
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.retrieve-1",
                          "type": "endpoint",
                          "method": "GET",
                          "endpointId": "endpoint_workspaceSecrets.retrieve",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Retrieve Workspace Secret",
                          "slug": "api-reference/secrets/retrieve-workspace-secret"
                        },
                        {
                          "id": "83d12b33-dab6-466a-9d55-0dbc8135e742.partialUpdate",
                          "type": "endpoint",
                          "method": "PATCH",
                          "endpointId": "endpoint_workspaceSecrets.partialUpdate",
                          "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                          "availability": "beta",
                          "isResponseStream": false,
                          "title": "Update Workspace Secret",
                          "slug": "api-reference/secrets/update-workspace-secret"
                        }
                      ],
                      "title": "Secrets",
                      "slug": "api-reference/secrets",
                      "apiDefinitionId": "83d12b33-dab6-466a-9d55-0dbc8135e742",
                      "pointsTo": "api-reference/secrets/retrieve-workspace-secret"
                    }
                  ],
                  "pointsTo": "api-reference/prompts/execute-prompt"
                }
              }
            ],
            "urlSlug": "api-reference",
            "skipUrlSlug": false
          },
          {
            "type": "group",
            "title": "Changelog",
            "icon": "fa-solid fa-bolt",
            "items": [
              {
                "type": "section",
                "title": "2024",
                "urlSlug": "2024",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/content/change-log/2024-10.mdx",
                    "title": "October",
                    "urlSlug": "2024-10",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/change-log/2024-09.mdx",
                    "title": "September",
                    "urlSlug": "2024-09",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/change-log/2024-08.mdx",
                    "title": "August",
                    "urlSlug": "2024-08",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/change-log/2024-07.mdx",
                    "title": "July",
                    "urlSlug": "2024-07",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/change-log/2024-06.mdx",
                    "title": "June",
                    "urlSlug": "2024-06",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/change-log/2024-05.mdx",
                    "title": "May",
                    "urlSlug": "2024-05",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/change-log/2024-04.mdx",
                    "title": "April",
                    "urlSlug": "2024-04",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/change-log/2024-03.mdx",
                    "title": "March",
                    "urlSlug": "2024-03",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/change-log/2024-02.mdx",
                    "title": "February",
                    "urlSlug": "2024-02",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/content/change-log/2024-01.mdx",
                    "title": "January",
                    "urlSlug": "2024-01",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlug": "changelog",
            "skipUrlSlug": false
          }
        ]
      },
      "logoHref": "https://www.vellum.ai/",
      "colorsV3": {
        "type": "darkAndLight",
        "light": {
          "accentPrimary": {
            "r": 78,
            "g": 84,
            "b": 252,
            "a": 1
          },
          "logo": "d62682a6-b50b-4ad7-9ada-452f3128db7f",
          "background": {
            "type": "solid",
            "r": 238,
            "g": 238,
            "b": 255,
            "a": 1
          }
        },
        "dark": {
          "accentPrimary": {
            "r": 199,
            "g": 210,
            "b": 254,
            "a": 1
          },
          "logo": "9593ec99-c168-4b03-8719-b817fc1ada09",
          "background": {
            "type": "solid",
            "r": 0,
            "g": 0,
            "b": 0,
            "a": 1
          }
        }
      },
      "navbarLinks": [
        {
          "type": "secondary",
          "text": "Blog",
          "url": "https://www.vellum.ai/blog"
        },
        {
          "type": "secondary",
          "text": "Log In",
          "url": "https://app.vellum.ai/"
        },
        {
          "type": "filled",
          "text": "Request Demo",
          "url": "https://www.vellum.ai/landing-pages/request-demo",
          "rounded": true
        }
      ],
      "title": "Vellum | Documentation",
      "favicon": "6adad306-f2ad-4912-805d-de59052b52ef",
      "typographyV2": {
        "headingsFont": {
          "type": "custom",
          "name": "Inter-Bold",
          "variants": [
            {
              "fontFile": "23a74982-cec8-4a58-8f8f-5f991c4554a5"
            }
          ]
        },
        "bodyFont": {
          "type": "custom",
          "name": "NeueMontreal",
          "variants": [
            {
              "fontFile": "6679a212-1685-4f0a-b917-8837f664ddbc",
              "weight": ["400"]
            }
          ]
        }
      },
      "layout": {
        "searchbarPlacement": "HEADER",
        "tabsPlacement": "HEADER",
        "contentAlignment": "CENTER",
        "headerPosition": "FIXED",
        "disableHeader": false
      },
      "js": {
        "files": []
      },
      "redirects": [
        {
          "source": "/api-reference/introduction/getting-started",
          "destination": "/api-reference/overview/getting-started"
        },
        {
          "source": "/api-reference/introduction/authentication",
          "destination": "/api-reference/overview/authentication"
        },
        {
          "source": "/api-reference/api-reference/execute-prompt",
          "destination": "/api-reference/prompts/execute-prompt"
        },
        {
          "source": "/api-reference/api-reference/execute-prompt-stream",
          "destination": "/api-reference/prompts/execute-prompt-stream"
        },
        {
          "source": "/api-reference/api-reference/execute-workflow",
          "destination": "/api-reference/workflows/execute-workflow"
        },
        {
          "source": "/api-reference/api-reference/execute-workflow-stream",
          "destination": "/api-reference/workflows/execute-workflow-stream"
        },
        {
          "source": "/api-reference/api-reference/generate",
          "destination": "/api-reference/prompts/generate"
        },
        {
          "source": "/api-reference/api-reference/generate-stream",
          "destination": "/api-reference/prompts/generate-stream"
        },
        {
          "source": "/api-reference/api-reference/search",
          "destination": "/api-reference/document-indexes/search"
        },
        {
          "source": "/api-reference/api-reference/submit-completion-actuals",
          "destination": "/api-reference/prompts/submit-completion-actuals"
        },
        {
          "source": "/api-reference/api-reference/submit-workflow-execution-actuals",
          "destination": "/api-reference/workflows/submit-workflow-execution-actuals"
        },
        {
          "source": "/api-reference/api-reference/deployments/list",
          "destination": "/api-reference/prompts/deployments/list"
        },
        {
          "source": "/api-reference/api-reference/deployments/retrieve",
          "destination": "/api-reference/prompts/deployments/retrieve"
        },
        {
          "source": "/api-reference/api-reference/deployments/retrieve-release-tag",
          "destination": "/api-reference/prompts/deployments/retrieve-release-tag"
        },
        {
          "source": "/api-reference/api-reference/deployments/update-release-tag",
          "destination": "/api-reference/prompts/deployments/update-release-tag"
        },
        {
          "source": "/api-reference/api-reference/deployments/retrieve-provider-payload",
          "destination": "/api-reference/prompts/deployments/retrieve-provider-payload"
        },
        {
          "source": "/api-reference/api-reference/document-indexes/list",
          "destination": "/api-reference/document-indexes/list"
        },
        {
          "source": "/api-reference/api-reference/document-indexes/retrieve",
          "destination": "/api-reference/document-indexes/retrieve"
        },
        {
          "source": "/api-reference/api-reference/document-indexes/update",
          "destination": "/api-reference/document-indexes/update"
        },
        {
          "source": "/api-reference/api-reference/document-indexes/partial-update",
          "destination": "/api-reference/document-indexes/partial-update"
        },
        {
          "source": "/api-reference/api-reference/document-indexes/destroy",
          "destination": "/api-reference/document-indexes/destroy"
        },
        {
          "source": "/api-reference/api-reference/document-indexes/remove-document",
          "destination": "/api-reference/document-indexes/remove-document"
        },
        {
          "source": "/api-reference/api-reference/documents/list",
          "destination": "/api-reference/documents/list"
        },
        {
          "source": "/api-reference/api-reference/documents/retrieve",
          "destination": "/api-reference/documents/retrieve"
        },
        {
          "source": "/api-reference/api-reference/documents/partial-update",
          "destination": "/api-reference/documents/partial-update"
        },
        {
          "source": "/api-reference/api-reference/documents/destroy",
          "destination": "/api-reference/documents/destroy"
        },
        {
          "source": "/api-reference/api-reference/documents/upload",
          "destination": "/api-reference/documents/upload"
        },
        {
          "source": "/api-reference/api-reference/folder-entities/add-entity-to-folder",
          "destination": "/api-reference/folder-entities/add-entity-to-folder"
        },
        {
          "source": "/api-reference/api-reference/sandboxes/deploy-prompt",
          "destination": "/api-reference/prompts/sandboxes/deploy-prompt"
        },
        {
          "source": "/api-reference/api-reference/sandboxes/upsert-scenario",
          "destination": "/api-reference/prompts/sandboxes/upsert-scenario"
        },
        {
          "source": "/api-reference/api-reference/sandboxes/delete-scenario",
          "destination": "/api-reference/prompts/sandboxes/delete-scenario"
        },
        {
          "source": "/api-reference/api-reference/test-suite-runs/create",
          "destination": "/api-reference/test-suites/runs/create"
        },
        {
          "source": "/api-reference/api-reference/test-suite-runs/retrieve",
          "destination": "/api-reference/test-suites/runs/retrieve"
        },
        {
          "source": "/api-reference/api-reference/test-suite-runs/list-executions",
          "destination": "/api-reference/test-suites/runs/list-executions"
        },
        {
          "source": "/api-reference/api-reference/test-suites/list-test-suite-test-cases",
          "destination": "/api-reference/test-suites/test-cases/list"
        },
        {
          "source": "/api-reference/api-reference/test-suites/upsert-test-suite-test-cases",
          "destination": "/api-reference/test-suites/test-cases/upsert"
        },
        {
          "source": "/api-reference/api-reference/test-suites/bulk-update-test-suite-test-cases",
          "destination": "/api-reference/test-suites/test-cases/bulk-update"
        },
        {
          "source": "/api-reference/api-reference/test-suites/delete-test-suite-test-case",
          "destination": "/api-reference/test-suites/test-cases/delete"
        },
        {
          "source": "/api-reference/api-reference/workflow-deployments/list",
          "destination": "/api-reference/workflows/deployments/list"
        },
        {
          "source": "/api-reference/api-reference/workflow-deployments/retrieve",
          "destination": "/api-reference/workflows/deployments/retrieve"
        },
        {
          "source": "/api-reference/api-reference/workflow-deployments/retrieve-release-tag",
          "destination": "/api-reference/workflows/deployments/retrieve-release-tag"
        },
        {
          "source": "/api-reference/api-reference/workflow-deployments/update-release-tag",
          "destination": "/api-reference/workflows/deployments/update-release-tag"
        },
        {
          "source": "/api-reference/api-reference/workflow-sandboxes/deploy-workflow",
          "destination": "/api-reference/workflows/sandboxes/deploy"
        },
        {
          "source": "/help-center/workflows/experimentation#supported-node-types",
          "destination": "/help-center/workflows/node-types"
        },
        {
          "source": "/help-center/evaluation/workflow-evaluation-metric",
          "destination": "/help-center/metrics/custom-metrics#workflow-metric-using-llms-to-evaluate-llms"
        },
        {
          "source": "/help-center/evaluation/code-execution-evaluation-metric",
          "destination": "/help-center/metrics/custom-metrics#code-execution-metric"
        }
      ]
    },
    "apis": {
      "83d12b33-dab6-466a-9d55-0dbc8135e742": {
        "id": "83d12b33-dab6-466a-9d55-0dbc8135e742",
        "rootPackage": {
          "endpoints": [
            {
              "environments": [
                {
                  "id": "Production",
                  "baseUrl": "https://predict.vellum.ai"
                }
              ],
              "availability": "GenerallyAvailable",
              "defaultEnvironment": "Production",
              "urlSlug": "execute-prompt",
              "method": "POST",
              "id": "execute-prompt",
              "originalEndpointId": "endpoint_.execute-prompt",
              "name": "Execute Prompt",
              "path": {
                "pathParameters": [],
                "parts": [
                  {
                    "type": "literal",
                    "value": ""
                  },
                  {
                    "type": "literal",
                    "value": "/v1/execute-prompt"
                  }
                ]
              },
              "queryParameters": [],
              "headers": [],
              "request": {
                "contentType": "application/json",
                "type": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "description": "A list consisting of the Prompt Deployment's input variables and their values.",
                      "key": "inputs",
                      "valueType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "type_:PromptDeploymentInputRequest"
                        }
                      }
                    },
                    {
                      "description": "The ID of the Prompt Deployment. Must provide either this or prompt_deployment_name.",
                      "key": "prompt_deployment_id",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "description": "The unique name of the Prompt Deployment. Must provide either this or prompt_deployment_id.",
                      "key": "prompt_deployment_name",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    {
                      "description": "Optionally specify a release tag if you want to pin to a specific release of the Prompt Deployment",
                      "key": "release_tag",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    {
                      "description": "Optionally include a unique identifier for tracking purposes. Must be unique within a given Prompt Deployment.",
                      "key": "external_id",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    {
                      "description": "An optionally specified configuration used to opt in to including additional metadata about this prompt execution in the API response. Corresponding values will be returned under the `meta` key of the API response.",
                      "key": "expand_meta",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:PromptDeploymentExpandMetaRequest"
                        }
                      }
                    },
                    {
                      "description": "Overrides for the raw API request sent to the model host. Combined with `expand_raw`, it can be used to access new features from models.",
                      "key": "raw_overrides",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:RawPromptExecutionOverridesRequest"
                        }
                      }
                    },
                    {
                      "description": "A list of keys whose values you'd like to directly return from the JSON response of the model provider. Useful if you need lower-level info returned by model providers that Vellum would otherwise omit. Corresponding key/value pairs will be returned under the `raw` key of the API response.",
                      "key": "expand_raw",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "list",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "description": "Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.",
                      "key": "metadata",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "map",
                          "keyType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          },
                          "valueType": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "response": {
                "type": {
                  "type": "reference",
                  "value": {
                    "type": "id",
                    "value": "type_:ExecutePromptResponse"
                  }
                }
              },
              "errors": [],
              "errorsV2": [
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:ExecutePromptApiErrorResponse"
                    }
                  },
                  "statusCode": 400,
                  "description": "",
                  "examples": []
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:ExecutePromptApiErrorResponse"
                    }
                  },
                  "statusCode": 403,
                  "description": "",
                  "examples": []
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:ExecutePromptApiErrorResponse"
                    }
                  },
                  "statusCode": 404,
                  "description": "",
                  "examples": []
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:ExecutePromptApiErrorResponse"
                    }
                  },
                  "statusCode": 500,
                  "description": "",
                  "examples": []
                }
              ],
              "examples": [
                {
                  "path": "/v1/execute-prompt",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "inputs": [
                      {
                        "type": "CHAT_HISTORY",
                        "name": "inputs",
                        "value": [
                          {
                            "role": "SYSTEM"
                          }
                        ]
                      }
                    ]
                  },
                  "responseStatusCode": 200,
                  "responseBody": {
                    "state": "REJECTED",
                    "meta": {
                      "model_name": "model_name",
                      "latency": 1,
                      "deployment_release_tag": "deployment_release_tag",
                      "prompt_version_id": "prompt_version_id",
                      "finish_reason": "LENGTH",
                      "usage": {
                        "output_token_count": 1,
                        "input_token_count": 1,
                        "input_char_count": 1,
                        "output_char_count": 1,
                        "compute_nanos": 1,
                        "cache_creation_input_tokens": 1,
                        "cache_read_input_tokens": 1
                      },
                      "cost": {
                        "value": 1.1,
                        "unit": "USD"
                      }
                    },
                    "raw": {
                      "key": "value"
                    },
                    "execution_id": "string",
                    "error": {
                      "message": "message",
                      "code": "INVALID_REQUEST"
                    }
                  },
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, StringInputRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.execute_prompt(\n        inputs=[\n            StringInputRequest(\n                name=\"name\",\n                value=\"value\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_prompt(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePrompt({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePrompt(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "CHAT_HISTORY",
                          "name": "inputs",
                          "value": [
                            {
                              "role": "SYSTEM"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "state": "REJECTED",
                      "meta": {
                        "model_name": "model_name",
                        "latency": 1,
                        "deployment_release_tag": "deployment_release_tag",
                        "prompt_version_id": "prompt_version_id",
                        "finish_reason": "LENGTH",
                        "usage": {
                          "output_token_count": 1,
                          "input_token_count": 1,
                          "input_char_count": 1,
                          "output_char_count": 1,
                          "compute_nanos": 1,
                          "cache_creation_input_tokens": 1,
                          "cache_read_input_tokens": 1
                        },
                        "cost": {
                          "value": 1.1,
                          "unit": "USD"
                        }
                      },
                      "raw": {
                        "key": "value"
                      },
                      "execution_id": "string",
                      "error": {
                        "message": "message",
                        "code": "INVALID_REQUEST"
                      }
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/execute-prompt",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 400,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, StringInputRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.execute_prompt(\n        inputs=[\n            StringInputRequest(\n                name=\"name\",\n                value=\"value\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_prompt(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePrompt({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePrompt(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/execute-prompt",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 403,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, StringInputRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.execute_prompt(\n        inputs=[\n            StringInputRequest(\n                name=\"name\",\n                value=\"value\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_prompt(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePrompt({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePrompt(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/execute-prompt",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 404,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, StringInputRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.execute_prompt(\n        inputs=[\n            StringInputRequest(\n                name=\"name\",\n                value=\"value\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_prompt(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePrompt({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePrompt(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/execute-prompt",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 500,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, StringInputRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.execute_prompt(\n        inputs=[\n            StringInputRequest(\n                name=\"name\",\n                value=\"value\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_prompt(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePrompt({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePrompt(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                }
              ],
              "description": "Executes a deployed Prompt and returns the result.",
              "authed": true
            },
            {
              "environments": [
                {
                  "id": "Production",
                  "baseUrl": "https://predict.vellum.ai"
                }
              ],
              "availability": "GenerallyAvailable",
              "defaultEnvironment": "Production",
              "urlSlug": "execute-prompt-stream",
              "method": "POST",
              "id": "execute-prompt-stream",
              "originalEndpointId": "endpoint_.execute-prompt-stream",
              "name": "Execute Prompt Stream",
              "path": {
                "pathParameters": [],
                "parts": [
                  {
                    "type": "literal",
                    "value": ""
                  },
                  {
                    "type": "literal",
                    "value": "/v1/execute-prompt-stream"
                  }
                ]
              },
              "queryParameters": [],
              "headers": [],
              "request": {
                "contentType": "application/json",
                "type": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "description": "A list consisting of the Prompt Deployment's input variables and their values.",
                      "key": "inputs",
                      "valueType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "type_:PromptDeploymentInputRequest"
                        }
                      }
                    },
                    {
                      "description": "The ID of the Prompt Deployment. Must provide either this or prompt_deployment_name.",
                      "key": "prompt_deployment_id",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "description": "The unique name of the Prompt Deployment. Must provide either this or prompt_deployment_id.",
                      "key": "prompt_deployment_name",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    {
                      "description": "Optionally specify a release tag if you want to pin to a specific release of the Prompt Deployment",
                      "key": "release_tag",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    {
                      "description": "Optionally include a unique identifier for tracking purposes. Must be unique within a given Prompt Deployment.",
                      "key": "external_id",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    {
                      "description": "An optionally specified configuration used to opt in to including additional metadata about this prompt execution in the API response. Corresponding values will be returned under the `meta` key of the API response.",
                      "key": "expand_meta",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:PromptDeploymentExpandMetaRequest"
                        }
                      }
                    },
                    {
                      "description": "Overrides for the raw API request sent to the model host. Combined with `expand_raw`, it can be used to access new features from models.",
                      "key": "raw_overrides",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:RawPromptExecutionOverridesRequest"
                        }
                      }
                    },
                    {
                      "description": "A list of keys whose values you'd like to directly return from the JSON response of the model provider. Useful if you need lower-level info returned by model providers that Vellum would otherwise omit. Corresponding key/value pairs will be returned under the `raw` key of the API response.",
                      "key": "expand_raw",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "list",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "description": "Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.",
                      "key": "metadata",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "map",
                          "keyType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          },
                          "valueType": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "response": {
                "type": {
                  "type": "stream",
                  "shape": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ExecutePromptEvent"
                    }
                  }
                }
              },
              "errors": [],
              "errorsV2": [
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:ExecutePromptApiErrorResponse"
                    }
                  },
                  "statusCode": 400,
                  "description": "",
                  "examples": []
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:ExecutePromptApiErrorResponse"
                    }
                  },
                  "statusCode": 403,
                  "description": "",
                  "examples": []
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:ExecutePromptApiErrorResponse"
                    }
                  },
                  "statusCode": 404,
                  "description": "",
                  "examples": []
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:ExecutePromptApiErrorResponse"
                    }
                  },
                  "statusCode": 500,
                  "description": "",
                  "examples": []
                }
              ],
              "examples": [
                {
                  "path": "/v1/execute-prompt-stream",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 200,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.execute_prompt_stream(\n        inputs=[\n            StringInputRequest(\n                name=\"string\",\n                value=\"string\",\n            )\n        ],\n        prompt_deployment_id=\"string\",\n        prompt_deployment_name=\"string\",\n        release_tag=\"string\",\n        external_id=\"string\",\n        expand_meta=PromptDeploymentExpandMetaRequest(\n            model_name=True,\n            usage=True,\n            cost=True,\n            finish_reason=True,\n            latency=True,\n            deployment_release_tag=True,\n            prompt_version_id=True,\n        ),\n        raw_overrides=RawPromptExecutionOverridesRequest(\n            body={\"string\": {\"key\": \"value\"}},\n            headers={\"string\": {\"key\": \"value\"}},\n            url=\"string\",\n        ),\n        expand_raw=[\"string\"],\n        metadata={\"string\": {\"key\": \"value\"}},\n    )\n    async for chunk in response:\n        yield chunk\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import (\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_prompt_stream(\n    inputs=[\n        StringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    prompt_deployment_id=\"string\",\n    prompt_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    expand_meta=PromptDeploymentExpandMetaRequest(\n        model_name=True,\n        usage=True,\n        cost=True,\n        finish_reason=True,\n        latency=True,\n        deployment_release_tag=True,\n        prompt_version_id=True,\n    ),\n    raw_overrides=RawPromptExecutionOverridesRequest(\n        body={\"string\": {\"key\": \"value\"}},\n        headers={\"string\": {\"key\": \"value\"}},\n        url=\"string\",\n    ),\n    expand_raw=[\"string\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePromptStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    promptDeploymentId: \"string\",\n    promptDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    expandMeta: {\n        modelName: true,\n        usage: true,\n        cost: true,\n        finishReason: true,\n        latency: true,\n        deploymentReleaseTag: true,\n        promptVersionId: true\n    },\n    rawOverrides: {\n        body: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        headers: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        url: \"string\"\n    },\n    expandRaw: [\"string\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePromptStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptStreamRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tPromptDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tPromptDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExpandMeta: &vellumclientgo.PromptDeploymentExpandMetaRequest{\n\t\t\tModelName: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tCost: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tFinishReason: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tLatency: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tDeploymentReleaseTag: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tPromptVersionId: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tRawOverrides: &vellumclientgo.RawPromptExecutionOverridesRequest{\n\t\t\tBody: map[string]interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tHeaders: map[string]*interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrl: vellumclientgo.String(\n\t\t\t\t\"string\",\n\t\t\t),\n\t\t},\n\t\tExpandRaw: []string{\n\t\t\t\"string\",\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "stream",
                    "value": [
                      {
                        "state": "INITIATED",
                        "meta": {
                          "model_name": "string",
                          "latency": 0,
                          "deployment_release_tag": "string",
                          "prompt_version_id": "string"
                        },
                        "execution_id": "string"
                      },
                      {
                        "state": "INITIATED",
                        "meta": {
                          "model_name": "string",
                          "latency": 0,
                          "deployment_release_tag": "string",
                          "prompt_version_id": "string"
                        },
                        "execution_id": "string"
                      }
                    ]
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/execute-prompt-stream",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 400,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.execute_prompt_stream(\n        inputs=[\n            StringInputRequest(\n                name=\"string\",\n                value=\"string\",\n            )\n        ],\n        prompt_deployment_id=\"string\",\n        prompt_deployment_name=\"string\",\n        release_tag=\"string\",\n        external_id=\"string\",\n        expand_meta=PromptDeploymentExpandMetaRequest(\n            model_name=True,\n            usage=True,\n            cost=True,\n            finish_reason=True,\n            latency=True,\n            deployment_release_tag=True,\n            prompt_version_id=True,\n        ),\n        raw_overrides=RawPromptExecutionOverridesRequest(\n            body={\"string\": {\"key\": \"value\"}},\n            headers={\"string\": {\"key\": \"value\"}},\n            url=\"string\",\n        ),\n        expand_raw=[\"string\"],\n        metadata={\"string\": {\"key\": \"value\"}},\n    )\n    async for chunk in response:\n        yield chunk\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import (\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_prompt_stream(\n    inputs=[\n        StringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    prompt_deployment_id=\"string\",\n    prompt_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    expand_meta=PromptDeploymentExpandMetaRequest(\n        model_name=True,\n        usage=True,\n        cost=True,\n        finish_reason=True,\n        latency=True,\n        deployment_release_tag=True,\n        prompt_version_id=True,\n    ),\n    raw_overrides=RawPromptExecutionOverridesRequest(\n        body={\"string\": {\"key\": \"value\"}},\n        headers={\"string\": {\"key\": \"value\"}},\n        url=\"string\",\n    ),\n    expand_raw=[\"string\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePromptStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    promptDeploymentId: \"string\",\n    promptDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    expandMeta: {\n        modelName: true,\n        usage: true,\n        cost: true,\n        finishReason: true,\n        latency: true,\n        deploymentReleaseTag: true,\n        promptVersionId: true\n    },\n    rawOverrides: {\n        body: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        headers: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        url: \"string\"\n    },\n    expandRaw: [\"string\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePromptStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptStreamRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tPromptDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tPromptDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExpandMeta: &vellumclientgo.PromptDeploymentExpandMetaRequest{\n\t\t\tModelName: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tCost: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tFinishReason: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tLatency: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tDeploymentReleaseTag: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tPromptVersionId: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tRawOverrides: &vellumclientgo.RawPromptExecutionOverridesRequest{\n\t\t\tBody: map[string]interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tHeaders: map[string]*interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrl: vellumclientgo.String(\n\t\t\t\t\"string\",\n\t\t\t),\n\t\t},\n\t\tExpandRaw: []string{\n\t\t\t\"string\",\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/execute-prompt-stream",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 403,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.execute_prompt_stream(\n        inputs=[\n            StringInputRequest(\n                name=\"string\",\n                value=\"string\",\n            )\n        ],\n        prompt_deployment_id=\"string\",\n        prompt_deployment_name=\"string\",\n        release_tag=\"string\",\n        external_id=\"string\",\n        expand_meta=PromptDeploymentExpandMetaRequest(\n            model_name=True,\n            usage=True,\n            cost=True,\n            finish_reason=True,\n            latency=True,\n            deployment_release_tag=True,\n            prompt_version_id=True,\n        ),\n        raw_overrides=RawPromptExecutionOverridesRequest(\n            body={\"string\": {\"key\": \"value\"}},\n            headers={\"string\": {\"key\": \"value\"}},\n            url=\"string\",\n        ),\n        expand_raw=[\"string\"],\n        metadata={\"string\": {\"key\": \"value\"}},\n    )\n    async for chunk in response:\n        yield chunk\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import (\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_prompt_stream(\n    inputs=[\n        StringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    prompt_deployment_id=\"string\",\n    prompt_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    expand_meta=PromptDeploymentExpandMetaRequest(\n        model_name=True,\n        usage=True,\n        cost=True,\n        finish_reason=True,\n        latency=True,\n        deployment_release_tag=True,\n        prompt_version_id=True,\n    ),\n    raw_overrides=RawPromptExecutionOverridesRequest(\n        body={\"string\": {\"key\": \"value\"}},\n        headers={\"string\": {\"key\": \"value\"}},\n        url=\"string\",\n    ),\n    expand_raw=[\"string\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePromptStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    promptDeploymentId: \"string\",\n    promptDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    expandMeta: {\n        modelName: true,\n        usage: true,\n        cost: true,\n        finishReason: true,\n        latency: true,\n        deploymentReleaseTag: true,\n        promptVersionId: true\n    },\n    rawOverrides: {\n        body: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        headers: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        url: \"string\"\n    },\n    expandRaw: [\"string\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePromptStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptStreamRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tPromptDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tPromptDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExpandMeta: &vellumclientgo.PromptDeploymentExpandMetaRequest{\n\t\t\tModelName: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tCost: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tFinishReason: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tLatency: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tDeploymentReleaseTag: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tPromptVersionId: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tRawOverrides: &vellumclientgo.RawPromptExecutionOverridesRequest{\n\t\t\tBody: map[string]interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tHeaders: map[string]*interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrl: vellumclientgo.String(\n\t\t\t\t\"string\",\n\t\t\t),\n\t\t},\n\t\tExpandRaw: []string{\n\t\t\t\"string\",\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/execute-prompt-stream",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 404,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.execute_prompt_stream(\n        inputs=[\n            StringInputRequest(\n                name=\"string\",\n                value=\"string\",\n            )\n        ],\n        prompt_deployment_id=\"string\",\n        prompt_deployment_name=\"string\",\n        release_tag=\"string\",\n        external_id=\"string\",\n        expand_meta=PromptDeploymentExpandMetaRequest(\n            model_name=True,\n            usage=True,\n            cost=True,\n            finish_reason=True,\n            latency=True,\n            deployment_release_tag=True,\n            prompt_version_id=True,\n        ),\n        raw_overrides=RawPromptExecutionOverridesRequest(\n            body={\"string\": {\"key\": \"value\"}},\n            headers={\"string\": {\"key\": \"value\"}},\n            url=\"string\",\n        ),\n        expand_raw=[\"string\"],\n        metadata={\"string\": {\"key\": \"value\"}},\n    )\n    async for chunk in response:\n        yield chunk\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import (\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_prompt_stream(\n    inputs=[\n        StringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    prompt_deployment_id=\"string\",\n    prompt_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    expand_meta=PromptDeploymentExpandMetaRequest(\n        model_name=True,\n        usage=True,\n        cost=True,\n        finish_reason=True,\n        latency=True,\n        deployment_release_tag=True,\n        prompt_version_id=True,\n    ),\n    raw_overrides=RawPromptExecutionOverridesRequest(\n        body={\"string\": {\"key\": \"value\"}},\n        headers={\"string\": {\"key\": \"value\"}},\n        url=\"string\",\n    ),\n    expand_raw=[\"string\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePromptStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    promptDeploymentId: \"string\",\n    promptDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    expandMeta: {\n        modelName: true,\n        usage: true,\n        cost: true,\n        finishReason: true,\n        latency: true,\n        deploymentReleaseTag: true,\n        promptVersionId: true\n    },\n    rawOverrides: {\n        body: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        headers: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        url: \"string\"\n    },\n    expandRaw: [\"string\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePromptStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptStreamRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tPromptDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tPromptDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExpandMeta: &vellumclientgo.PromptDeploymentExpandMetaRequest{\n\t\t\tModelName: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tCost: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tFinishReason: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tLatency: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tDeploymentReleaseTag: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tPromptVersionId: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tRawOverrides: &vellumclientgo.RawPromptExecutionOverridesRequest{\n\t\t\tBody: map[string]interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tHeaders: map[string]*interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrl: vellumclientgo.String(\n\t\t\t\t\"string\",\n\t\t\t),\n\t\t},\n\t\tExpandRaw: []string{\n\t\t\t\"string\",\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/execute-prompt-stream",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 500,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.execute_prompt_stream(\n        inputs=[\n            StringInputRequest(\n                name=\"string\",\n                value=\"string\",\n            )\n        ],\n        prompt_deployment_id=\"string\",\n        prompt_deployment_name=\"string\",\n        release_tag=\"string\",\n        external_id=\"string\",\n        expand_meta=PromptDeploymentExpandMetaRequest(\n            model_name=True,\n            usage=True,\n            cost=True,\n            finish_reason=True,\n            latency=True,\n            deployment_release_tag=True,\n            prompt_version_id=True,\n        ),\n        raw_overrides=RawPromptExecutionOverridesRequest(\n            body={\"string\": {\"key\": \"value\"}},\n            headers={\"string\": {\"key\": \"value\"}},\n            url=\"string\",\n        ),\n        expand_raw=[\"string\"],\n        metadata={\"string\": {\"key\": \"value\"}},\n    )\n    async for chunk in response:\n        yield chunk\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import (\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_prompt_stream(\n    inputs=[\n        StringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    prompt_deployment_id=\"string\",\n    prompt_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    expand_meta=PromptDeploymentExpandMetaRequest(\n        model_name=True,\n        usage=True,\n        cost=True,\n        finish_reason=True,\n        latency=True,\n        deployment_release_tag=True,\n        prompt_version_id=True,\n    ),\n    raw_overrides=RawPromptExecutionOverridesRequest(\n        body={\"string\": {\"key\": \"value\"}},\n        headers={\"string\": {\"key\": \"value\"}},\n        url=\"string\",\n    ),\n    expand_raw=[\"string\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePromptStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    promptDeploymentId: \"string\",\n    promptDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    expandMeta: {\n        modelName: true,\n        usage: true,\n        cost: true,\n        finishReason: true,\n        latency: true,\n        deploymentReleaseTag: true,\n        promptVersionId: true\n    },\n    rawOverrides: {\n        body: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        headers: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        url: \"string\"\n    },\n    expandRaw: [\"string\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePromptStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptStreamRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tPromptDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tPromptDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExpandMeta: &vellumclientgo.PromptDeploymentExpandMetaRequest{\n\t\t\tModelName: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tCost: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tFinishReason: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tLatency: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tDeploymentReleaseTag: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tPromptVersionId: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tRawOverrides: &vellumclientgo.RawPromptExecutionOverridesRequest{\n\t\t\tBody: map[string]interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tHeaders: map[string]*interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrl: vellumclientgo.String(\n\t\t\t\t\"string\",\n\t\t\t),\n\t\t},\n\t\tExpandRaw: []string{\n\t\t\t\"string\",\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                }
              ],
              "description": "Executes a deployed Prompt and streams back the results.",
              "authed": true
            },
            {
              "environments": [
                {
                  "id": "Production",
                  "baseUrl": "https://predict.vellum.ai"
                }
              ],
              "availability": "GenerallyAvailable",
              "defaultEnvironment": "Production",
              "urlSlug": "execute-workflow",
              "method": "POST",
              "id": "execute-workflow",
              "originalEndpointId": "endpoint_.execute-workflow",
              "name": "Execute Workflow",
              "path": {
                "pathParameters": [],
                "parts": [
                  {
                    "type": "literal",
                    "value": ""
                  },
                  {
                    "type": "literal",
                    "value": "/v1/execute-workflow"
                  }
                ]
              },
              "queryParameters": [],
              "headers": [],
              "request": {
                "contentType": "application/json",
                "type": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "description": "The list of inputs defined in the Workflow's Deployment with their corresponding values.",
                      "key": "inputs",
                      "valueType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "type_:WorkflowRequestInputRequest"
                        }
                      }
                    },
                    {
                      "description": "An optionally specified configuration used to opt in to including additional metadata about this workflow execution in the API response. Corresponding values will be returned under the `execution_meta` key within NODE events in the response stream.",
                      "key": "expand_meta",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:WorkflowExpandMetaRequest"
                        }
                      }
                    },
                    {
                      "description": "The ID of the Workflow Deployment. Must provide either this or workflow_deployment_name.",
                      "key": "workflow_deployment_id",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "description": "The name of the Workflow Deployment. Must provide either this or workflow_deployment_id.",
                      "key": "workflow_deployment_name",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    {
                      "description": "Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment",
                      "key": "release_tag",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    {
                      "description": "Optionally include a unique identifier for tracking purposes. Must be unique for a given workflow deployment.",
                      "key": "external_id",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    {
                      "description": "Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.",
                      "key": "metadata",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "map",
                          "keyType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          },
                          "valueType": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "response": {
                "type": {
                  "type": "reference",
                  "value": {
                    "type": "id",
                    "value": "type_:ExecuteWorkflowResponse"
                  }
                }
              },
              "errors": [],
              "errorsV2": [
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  },
                  "statusCode": 400,
                  "description": "",
                  "examples": []
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  },
                  "statusCode": 404,
                  "description": "",
                  "examples": []
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:ExecuteWorkflowErrorResponse"
                    }
                  },
                  "statusCode": 500,
                  "description": "",
                  "examples": []
                }
              ],
              "examples": [
                {
                  "path": "/v1/execute-workflow",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "inputs": [
                      {
                        "type": "NUMBER",
                        "name": "inputs",
                        "value": 1.1
                      }
                    ]
                  },
                  "responseStatusCode": 200,
                  "responseBody": {
                    "execution_id": "execution_id",
                    "run_id": "run_id",
                    "external_id": "external_id",
                    "data": {
                      "state": "REJECTED",
                      "id": "data",
                      "ts": "2024-01-15T09:30:00Z",
                      "error": {
                        "message": "message",
                        "code": "WORKFLOW_INITIALIZATION"
                      }
                    }
                  },
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, WorkflowRequestStringInputRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.execute_workflow(\n        inputs=[\n            WorkflowRequestStringInputRequest(\n                name=\"name\",\n                value=\"value\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import Vellum, WorkflowRequestStringInputRequest\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_workflow(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflow({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflow(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "NUMBER",
                          "name": "inputs",
                          "value": 1.1
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "execution_id": "execution_id",
                      "run_id": "run_id",
                      "external_id": "external_id",
                      "data": {
                        "state": "REJECTED",
                        "id": "data",
                        "ts": "2024-01-15T09:30:00Z",
                        "error": {
                          "message": "message",
                          "code": "WORKFLOW_INITIALIZATION"
                        }
                      }
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/execute-workflow",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 400,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, WorkflowRequestStringInputRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.execute_workflow(\n        inputs=[\n            WorkflowRequestStringInputRequest(\n                name=\"name\",\n                value=\"value\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import Vellum, WorkflowRequestStringInputRequest\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_workflow(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflow({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflow(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "string": {}
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/execute-workflow",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 404,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, WorkflowRequestStringInputRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.execute_workflow(\n        inputs=[\n            WorkflowRequestStringInputRequest(\n                name=\"name\",\n                value=\"value\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import Vellum, WorkflowRequestStringInputRequest\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_workflow(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflow({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflow(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "string": {}
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/execute-workflow",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 500,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, WorkflowRequestStringInputRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.execute_workflow(\n        inputs=[\n            WorkflowRequestStringInputRequest(\n                name=\"name\",\n                value=\"value\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import Vellum, WorkflowRequestStringInputRequest\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_workflow(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflow({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflow(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                }
              ],
              "description": "Executes a deployed Workflow and returns its outputs.",
              "authed": true
            },
            {
              "environments": [
                {
                  "id": "Production",
                  "baseUrl": "https://predict.vellum.ai"
                }
              ],
              "availability": "GenerallyAvailable",
              "defaultEnvironment": "Production",
              "urlSlug": "execute-workflow-stream",
              "method": "POST",
              "id": "execute-workflow-stream",
              "originalEndpointId": "endpoint_.execute-workflow-stream",
              "name": "Execute Workflow Stream",
              "path": {
                "pathParameters": [],
                "parts": [
                  {
                    "type": "literal",
                    "value": ""
                  },
                  {
                    "type": "literal",
                    "value": "/v1/execute-workflow-stream"
                  }
                ]
              },
              "queryParameters": [],
              "headers": [],
              "request": {
                "contentType": "application/json",
                "type": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "description": "The list of inputs defined in the Workflow's Deployment with their corresponding values.",
                      "key": "inputs",
                      "valueType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "type_:WorkflowRequestInputRequest"
                        }
                      }
                    },
                    {
                      "description": "An optionally specified configuration used to opt in to including additional metadata about this workflow execution in the API response. Corresponding values will be returned under the `execution_meta` key within NODE events in the response stream.",
                      "key": "expand_meta",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:WorkflowExpandMetaRequest"
                        }
                      }
                    },
                    {
                      "description": "The ID of the Workflow Deployment. Must provide either this or workflow_deployment_name.",
                      "key": "workflow_deployment_id",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "description": "The name of the Workflow Deployment. Must provide either this or workflow_deployment_id.",
                      "key": "workflow_deployment_name",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    {
                      "description": "Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment",
                      "key": "release_tag",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    {
                      "description": "Optionally include a unique identifier for tracking purposes. Must be unique for a given workflow deployment.",
                      "key": "external_id",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    {
                      "description": "Optionally specify which events you want to receive. Defaults to only WORKFLOW events. Note that the schema of non-WORKFLOW events is unstable and should be used with caution.",
                      "key": "event_types",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "list",
                          "itemType": {
                            "type": "id",
                            "value": "type_:WorkflowExecutionEventType"
                          }
                        }
                      }
                    },
                    {
                      "description": "Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.",
                      "key": "metadata",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "map",
                          "keyType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          },
                          "valueType": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "response": {
                "type": {
                  "type": "stream",
                  "shape": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WorkflowStreamEvent"
                    }
                  }
                }
              },
              "errors": [],
              "errorsV2": [
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  },
                  "statusCode": 400,
                  "description": "",
                  "examples": []
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:ExecuteWorkflowStreamErrorResponse"
                    }
                  },
                  "statusCode": 404,
                  "description": "",
                  "examples": []
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:ExecuteWorkflowStreamErrorResponse"
                    }
                  },
                  "statusCode": 500,
                  "description": "",
                  "examples": []
                }
              ],
              "examples": [
                {
                  "path": "/v1/execute-workflow-stream",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 200,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    WorkflowExpandMetaRequest,\n    WorkflowRequestStringInputRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.execute_workflow_stream(\n        inputs=[\n            WorkflowRequestStringInputRequest(\n                name=\"string\",\n                value=\"string\",\n            )\n        ],\n        expand_meta=WorkflowExpandMetaRequest(\n            usage=True,\n        ),\n        workflow_deployment_id=\"string\",\n        workflow_deployment_name=\"string\",\n        release_tag=\"string\",\n        external_id=\"string\",\n        event_types=[\"NODE\"],\n        metadata={\"string\": {\"key\": \"value\"}},\n    )\n    async for chunk in response:\n        yield chunk\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import (\n    Vellum,\n    WorkflowExpandMetaRequest,\n    WorkflowRequestStringInputRequest,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_workflow_stream(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    expand_meta=WorkflowExpandMetaRequest(\n        usage=True,\n    ),\n    workflow_deployment_id=\"string\",\n    workflow_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    event_types=[\"NODE\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflowStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    expandMeta: {\n        usage: true\n    },\n    workflowDeploymentId: \"string\",\n    workflowDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    eventTypes: [\"NODE\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflowStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowStreamRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tExpandMeta: &vellumclientgo.WorkflowExpandMetaRequest{\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tWorkflowDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tWorkflowDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tEventTypes: []vellumclientgo.WorkflowExecutionEventType{\n\t\t\tvellumclientgo.WorkflowExecutionEventTypeNode,\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "stream",
                    "value": [
                      {
                        "type": "WORKFLOW",
                        "execution_id": "string",
                        "run_id": "string",
                        "external_id": "string",
                        "data": {
                          "id": "string",
                          "state": "INITIATED",
                          "ts": "2023-01-01T00:00:00Z",
                          "output": {
                            "type": "STRING",
                            "id": "string",
                            "name": "string",
                            "state": "INITIATED",
                            "node_id": "string",
                            "delta": "string",
                            "value": "string"
                          },
                          "error": {
                            "message": "string",
                            "code": "WORKFLOW_INITIALIZATION"
                          },
                          "outputs": [
                            {
                              "type": "STRING",
                              "id": "string",
                              "name": "string",
                              "value": "string"
                            }
                          ],
                          "inputs": [
                            {
                              "type": "STRING",
                              "id": "string",
                              "name": "string",
                              "value": "string"
                            }
                          ]
                        }
                      },
                      {
                        "type": "WORKFLOW",
                        "execution_id": "string",
                        "run_id": "string",
                        "external_id": "string",
                        "data": {
                          "id": "string",
                          "state": "INITIATED",
                          "ts": "2023-01-01T00:00:00Z",
                          "output": {
                            "type": "STRING",
                            "id": "string",
                            "name": "string",
                            "state": "INITIATED",
                            "node_id": "string",
                            "delta": "string",
                            "value": "string"
                          },
                          "error": {
                            "message": "string",
                            "code": "WORKFLOW_INITIALIZATION"
                          },
                          "outputs": [
                            {
                              "type": "STRING",
                              "id": "string",
                              "name": "string",
                              "value": "string"
                            }
                          ],
                          "inputs": [
                            {
                              "type": "STRING",
                              "id": "string",
                              "name": "string",
                              "value": "string"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/execute-workflow-stream",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 400,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    WorkflowExpandMetaRequest,\n    WorkflowRequestStringInputRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.execute_workflow_stream(\n        inputs=[\n            WorkflowRequestStringInputRequest(\n                name=\"string\",\n                value=\"string\",\n            )\n        ],\n        expand_meta=WorkflowExpandMetaRequest(\n            usage=True,\n        ),\n        workflow_deployment_id=\"string\",\n        workflow_deployment_name=\"string\",\n        release_tag=\"string\",\n        external_id=\"string\",\n        event_types=[\"NODE\"],\n        metadata={\"string\": {\"key\": \"value\"}},\n    )\n    async for chunk in response:\n        yield chunk\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import (\n    Vellum,\n    WorkflowExpandMetaRequest,\n    WorkflowRequestStringInputRequest,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_workflow_stream(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    expand_meta=WorkflowExpandMetaRequest(\n        usage=True,\n    ),\n    workflow_deployment_id=\"string\",\n    workflow_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    event_types=[\"NODE\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflowStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    expandMeta: {\n        usage: true\n    },\n    workflowDeploymentId: \"string\",\n    workflowDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    eventTypes: [\"NODE\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflowStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowStreamRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tExpandMeta: &vellumclientgo.WorkflowExpandMetaRequest{\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tWorkflowDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tWorkflowDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tEventTypes: []vellumclientgo.WorkflowExecutionEventType{\n\t\t\tvellumclientgo.WorkflowExecutionEventTypeNode,\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "string": {}
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/execute-workflow-stream",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 404,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    WorkflowExpandMetaRequest,\n    WorkflowRequestStringInputRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.execute_workflow_stream(\n        inputs=[\n            WorkflowRequestStringInputRequest(\n                name=\"string\",\n                value=\"string\",\n            )\n        ],\n        expand_meta=WorkflowExpandMetaRequest(\n            usage=True,\n        ),\n        workflow_deployment_id=\"string\",\n        workflow_deployment_name=\"string\",\n        release_tag=\"string\",\n        external_id=\"string\",\n        event_types=[\"NODE\"],\n        metadata={\"string\": {\"key\": \"value\"}},\n    )\n    async for chunk in response:\n        yield chunk\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import (\n    Vellum,\n    WorkflowExpandMetaRequest,\n    WorkflowRequestStringInputRequest,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_workflow_stream(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    expand_meta=WorkflowExpandMetaRequest(\n        usage=True,\n    ),\n    workflow_deployment_id=\"string\",\n    workflow_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    event_types=[\"NODE\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflowStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    expandMeta: {\n        usage: true\n    },\n    workflowDeploymentId: \"string\",\n    workflowDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    eventTypes: [\"NODE\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflowStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowStreamRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tExpandMeta: &vellumclientgo.WorkflowExpandMetaRequest{\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tWorkflowDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tWorkflowDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tEventTypes: []vellumclientgo.WorkflowExecutionEventType{\n\t\t\tvellumclientgo.WorkflowExecutionEventTypeNode,\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/execute-workflow-stream",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 500,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    WorkflowExpandMetaRequest,\n    WorkflowRequestStringInputRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.execute_workflow_stream(\n        inputs=[\n            WorkflowRequestStringInputRequest(\n                name=\"string\",\n                value=\"string\",\n            )\n        ],\n        expand_meta=WorkflowExpandMetaRequest(\n            usage=True,\n        ),\n        workflow_deployment_id=\"string\",\n        workflow_deployment_name=\"string\",\n        release_tag=\"string\",\n        external_id=\"string\",\n        event_types=[\"NODE\"],\n        metadata={\"string\": {\"key\": \"value\"}},\n    )\n    async for chunk in response:\n        yield chunk\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import (\n    Vellum,\n    WorkflowExpandMetaRequest,\n    WorkflowRequestStringInputRequest,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_workflow_stream(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    expand_meta=WorkflowExpandMetaRequest(\n        usage=True,\n    ),\n    workflow_deployment_id=\"string\",\n    workflow_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    event_types=[\"NODE\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflowStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    expandMeta: {\n        usage: true\n    },\n    workflowDeploymentId: \"string\",\n    workflowDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    eventTypes: [\"NODE\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflowStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowStreamRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tExpandMeta: &vellumclientgo.WorkflowExpandMetaRequest{\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tWorkflowDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tWorkflowDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tEventTypes: []vellumclientgo.WorkflowExecutionEventType{\n\t\t\tvellumclientgo.WorkflowExecutionEventTypeNode,\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "inputs": [
                        {
                          "type": "STRING",
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                }
              ],
              "description": "Executes a deployed Workflow and streams back its results.",
              "authed": true
            },
            {
              "environments": [
                {
                  "id": "Production",
                  "baseUrl": "https://predict.vellum.ai"
                }
              ],
              "availability": "GenerallyAvailable",
              "defaultEnvironment": "Production",
              "urlSlug": "search",
              "method": "POST",
              "id": "search",
              "originalEndpointId": "endpoint_.search",
              "name": "Search",
              "path": {
                "pathParameters": [],
                "parts": [
                  {
                    "type": "literal",
                    "value": ""
                  },
                  {
                    "type": "literal",
                    "value": "/v1/search"
                  }
                ]
              },
              "queryParameters": [],
              "headers": [],
              "request": {
                "contentType": "application/json",
                "type": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "description": "The ID of the index to search against. Must provide either this or index_name.",
                      "key": "index_id",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "description": "The name of the index to search against. Must provide either this or index_id.",
                      "key": "index_name",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    {
                      "description": "The query to search for.",
                      "key": "query",
                      "valueType": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 1
                        }
                      }
                    },
                    {
                      "description": "Configuration options for the search.",
                      "key": "options",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:SearchRequestOptionsRequest"
                        }
                      }
                    }
                  ]
                }
              },
              "response": {
                "type": {
                  "type": "reference",
                  "value": {
                    "type": "id",
                    "value": "type_:SearchResponse"
                  }
                }
              },
              "errors": [],
              "errorsV2": [
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:SearchErrorResponse"
                    }
                  },
                  "statusCode": 400,
                  "description": "",
                  "examples": []
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:SearchErrorResponse"
                    }
                  },
                  "statusCode": 404,
                  "description": "",
                  "examples": []
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:SearchErrorResponse"
                    }
                  },
                  "statusCode": 500,
                  "description": "",
                  "examples": []
                }
              ],
              "examples": [
                {
                  "path": "/v1/search",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "query": "query"
                  },
                  "responseStatusCode": 200,
                  "responseBody": {
                    "results": [
                      {
                        "text": "text",
                        "score": 1.1,
                        "keywords": ["keywords"],
                        "document": {
                          "label": "label"
                        }
                      }
                    ]
                  },
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.search(\n        query=\"query\",\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search(\n    query=\"query\",\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search({\n    query: \"query\"\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Search(\n\tcontext.TODO(),\n\t&vellumclientgo.SearchRequestBodyRequest{\n\t\tQuery: \"query\",\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "query": "query"
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "results": [
                        {
                          "text": "text",
                          "score": 1.1,
                          "keywords": ["keywords"],
                          "document": {
                            "label": "label"
                          }
                        }
                      ]
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/search",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 400,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.search(\n        query=\"query\",\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search(\n    query=\"query\",\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search({\n    query: \"query\"\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Search(\n\tcontext.TODO(),\n\t&vellumclientgo.SearchRequestBodyRequest{\n\t\tQuery: \"query\",\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "query": "string"
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/search",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 404,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.search(\n        query=\"query\",\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search(\n    query=\"query\",\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search({\n    query: \"query\"\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Search(\n\tcontext.TODO(),\n\t&vellumclientgo.SearchRequestBodyRequest{\n\t\tQuery: \"query\",\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "query": "string"
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/search",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 500,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.search(\n        query=\"query\",\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search(\n    query=\"query\",\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search({\n    query: \"query\"\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Search(\n\tcontext.TODO(),\n\t&vellumclientgo.SearchRequestBodyRequest{\n\t\tQuery: \"query\",\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "query": "string"
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                }
              ],
              "description": "Perform a search against a document index.",
              "authed": true
            },
            {
              "environments": [
                {
                  "id": "Production",
                  "baseUrl": "https://predict.vellum.ai"
                }
              ],
              "availability": "GenerallyAvailable",
              "defaultEnvironment": "Production",
              "urlSlug": "submit-completion-actuals",
              "method": "POST",
              "id": "submit-completion-actuals",
              "originalEndpointId": "endpoint_.submit-completion-actuals",
              "name": "Submit Completion Actuals",
              "path": {
                "pathParameters": [],
                "parts": [
                  {
                    "type": "literal",
                    "value": ""
                  },
                  {
                    "type": "literal",
                    "value": "/v1/submit-completion-actuals"
                  }
                ]
              },
              "queryParameters": [],
              "headers": [],
              "request": {
                "contentType": "application/json",
                "type": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "description": "The ID of the deployment. Must provide either this or deployment_name.",
                      "key": "deployment_id",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "description": "The name of the deployment. Must provide either this or deployment_id.",
                      "key": "deployment_name",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    },
                    {
                      "description": "Feedback regarding the quality of previously generated completions",
                      "key": "actuals",
                      "valueType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "type_:SubmitCompletionActualRequest"
                        }
                      }
                    }
                  ]
                }
              },
              "errors": [],
              "errorsV2": [
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:SubmitCompletionActualsErrorResponse"
                    }
                  },
                  "statusCode": 400,
                  "description": "",
                  "examples": []
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:SubmitCompletionActualsErrorResponse"
                    }
                  },
                  "statusCode": 404,
                  "description": "",
                  "examples": []
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:SubmitCompletionActualsErrorResponse"
                    }
                  },
                  "statusCode": 500,
                  "description": "",
                  "examples": []
                }
              ],
              "examples": [
                {
                  "path": "/v1/submit-completion-actuals",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "actuals": [{}]
                  },
                  "responseStatusCode": 204,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, SubmitCompletionActualRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.submit_completion_actuals(\n        actuals=[SubmitCompletionActualRequest()],\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import SubmitCompletionActualRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.submit_completion_actuals(\n    actuals=[SubmitCompletionActualRequest()],\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.submitCompletionActuals({\n    actuals: [{}]\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.SubmitCompletionActuals(\n\tcontext.TODO(),\n\t&vellumclientgo.SubmitCompletionActualsRequest{\n\t\tActuals: []*vellumclientgo.SubmitCompletionActualRequest{\n\t\t\t&vellumclientgo.SubmitCompletionActualRequest{},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "actuals": [{}]
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/submit-completion-actuals",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 400,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, SubmitCompletionActualRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.submit_completion_actuals(\n        actuals=[SubmitCompletionActualRequest()],\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import SubmitCompletionActualRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.submit_completion_actuals(\n    actuals=[SubmitCompletionActualRequest()],\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.submitCompletionActuals({\n    actuals: [{}]\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.SubmitCompletionActuals(\n\tcontext.TODO(),\n\t&vellumclientgo.SubmitCompletionActualsRequest{\n\t\tActuals: []*vellumclientgo.SubmitCompletionActualRequest{\n\t\t\t&vellumclientgo.SubmitCompletionActualRequest{},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "actuals": [{}]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/submit-completion-actuals",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 404,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, SubmitCompletionActualRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.submit_completion_actuals(\n        actuals=[SubmitCompletionActualRequest()],\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import SubmitCompletionActualRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.submit_completion_actuals(\n    actuals=[SubmitCompletionActualRequest()],\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.submitCompletionActuals({\n    actuals: [{}]\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.SubmitCompletionActuals(\n\tcontext.TODO(),\n\t&vellumclientgo.SubmitCompletionActualsRequest{\n\t\tActuals: []*vellumclientgo.SubmitCompletionActualRequest{\n\t\t\t&vellumclientgo.SubmitCompletionActualRequest{},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "actuals": [{}]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/v1/submit-completion-actuals",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 500,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, SubmitCompletionActualRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.submit_completion_actuals(\n        actuals=[SubmitCompletionActualRequest()],\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import SubmitCompletionActualRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.submit_completion_actuals(\n    actuals=[SubmitCompletionActualRequest()],\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.submitCompletionActuals({\n    actuals: [{}]\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.SubmitCompletionActuals(\n\tcontext.TODO(),\n\t&vellumclientgo.SubmitCompletionActualsRequest{\n\t\tActuals: []*vellumclientgo.SubmitCompletionActualRequest{\n\t\t\t&vellumclientgo.SubmitCompletionActualRequest{},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "actuals": [{}]
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": "string"
                    }
                  },
                  "codeSamples": []
                }
              ],
              "description": "Used to submit feedback regarding the quality of previously generated completions.",
              "authed": true
            },
            {
              "environments": [
                {
                  "id": "Production",
                  "baseUrl": "https://predict.vellum.ai"
                }
              ],
              "availability": "GenerallyAvailable",
              "defaultEnvironment": "Production",
              "urlSlug": "submit-workflow-execution-actuals",
              "method": "POST",
              "id": "submit-workflow-execution-actuals",
              "originalEndpointId": "endpoint_.submit-workflow-execution-actuals",
              "name": "Submit Workflow Execution Actuals",
              "path": {
                "pathParameters": [],
                "parts": [
                  {
                    "type": "literal",
                    "value": ""
                  },
                  {
                    "type": "literal",
                    "value": "/v1/submit-workflow-execution-actuals"
                  }
                ]
              },
              "queryParameters": [],
              "headers": [],
              "request": {
                "contentType": "application/json",
                "type": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "description": "Feedback regarding the quality of an output on a previously executed workflow.",
                      "key": "actuals",
                      "valueType": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "type_:SubmitWorkflowExecutionActualRequest"
                        }
                      }
                    },
                    {
                      "description": "The Vellum-generated ID of a previously executed workflow. Must provide either this or external_id.",
                      "key": "execution_id",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "description": "The external ID that was originally provided by when executing the workflow, if applicable, that you'd now like to submit actuals for. Must provide either this or execution_id.",
                      "key": "external_id",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "errors": [],
              "errorsV2": [],
              "examples": [
                {
                  "path": "/v1/submit-workflow-execution-actuals",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "actuals": [
                      {
                        "output_type": "CHAT_HISTORY"
                      }
                    ]
                  },
                  "responseStatusCode": 204,
                  "codeExamples": {
                    "nodeAxios": "",
                    "pythonSdk": {
                      "type": "python",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, WorkflowExecutionActualStringRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.submit_workflow_execution_actuals(\n        actuals=[WorkflowExecutionActualStringRequest()],\n    )\n\n\nasyncio.run(main())\n",
                      "sync_client": "from vellum import Vellum, WorkflowExecutionActualStringRequest\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.submit_workflow_execution_actuals(\n    actuals=[WorkflowExecutionActualStringRequest()],\n)\n",
                      "exampleIdentifier": "default"
                    },
                    "typescriptSdk": {
                      "type": "typescript",
                      "sdk": {
                        "version": "0.9.3",
                        "package": "vellum-ai"
                      },
                      "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.submitWorkflowExecutionActuals({\n    actuals: [{\n            outputType: \"STRING\"\n        }]\n});\n"
                    },
                    "goSdk": {
                      "type": "go",
                      "sdk": {
                        "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                        "version": "v0.0.1749"
                      },
                      "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.SubmitWorkflowExecutionActuals(\n\tcontext.TODO(),\n\t&vellumclientgo.SubmitWorkflowExecutionActualsRequest{\n\t\tActuals: []*vellumclientgo.SubmitWorkflowExecutionActualRequest{\n\t\t\t&vellumclientgo.SubmitWorkflowExecutionActualRequest{\n\t\t\t\tWorkflowExecutionActualStringRequest: &vellumclientgo.WorkflowExecutionActualStringRequest{},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                    }
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "actuals": [
                        {
                          "output_type": "CHAT_HISTORY"
                        }
                      ]
                    }
                  },
                  "codeSamples": []
                }
              ],
              "description": "    Used to submit feedback regarding the quality of previous workflow execution and its outputs.\n\n    **Note:** Uses a base url of `https://predict.vellum.ai`.",
              "authed": true
            }
          ],
          "subpackages": [
            "subpackage_deployments",
            "subpackage_documentIndexes",
            "subpackage_documents",
            "subpackage_folderEntities",
            "subpackage_sandboxes",
            "subpackage_testSuiteRuns",
            "subpackage_testSuites",
            "subpackage_workflowDeployments",
            "subpackage_workflowSandboxes",
            "subpackage_workspaceSecrets"
          ],
          "types": [
            "type_:AddOpenaiApiKeyEnum",
            "type_:ApiNodeResult",
            "type_:ApiNodeResultData",
            "type_:ArrayChatMessageContent",
            "type_:ArrayChatMessageContentItem",
            "type_:ArrayChatMessageContentItemRequest",
            "type_:ArrayChatMessageContentRequest",
            "type_:ArrayVariableValue",
            "type_:ArrayVariableValueItem",
            "type_:ArrayVellumValue",
            "type_:ArrayVellumValueRequest",
            "type_:AudioChatMessageContent",
            "type_:AudioChatMessageContentRequest",
            "type_:BasicVectorizerIntfloatMultilingualE5Large",
            "type_:BasicVectorizerIntfloatMultilingualE5LargeRequest",
            "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1",
            "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request",
            "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1",
            "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request",
            "type_:ChatHistoryInputRequest",
            "type_:ChatHistoryVariableValue",
            "type_:ChatHistoryVellumValue",
            "type_:ChatHistoryVellumValueRequest",
            "type_:ChatMessage",
            "type_:ChatMessageContent",
            "type_:ChatMessageContentRequest",
            "type_:ChatMessageRequest",
            "type_:ChatMessageRole",
            "type_:CodeExecutionNodeArrayResult",
            "type_:CodeExecutionNodeChatHistoryResult",
            "type_:CodeExecutionNodeErrorResult",
            "type_:CodeExecutionNodeFunctionCallResult",
            "type_:CodeExecutionNodeJsonResult",
            "type_:CodeExecutionNodeNumberResult",
            "type_:CodeExecutionNodeResult",
            "type_:CodeExecutionNodeResultData",
            "type_:CodeExecutionNodeResultOutput",
            "type_:CodeExecutionNodeSearchResultsResult",
            "type_:CodeExecutionNodeStringResult",
            "type_:CompilePromptDeploymentExpandMetaRequest",
            "type_:CompilePromptMeta",
            "type_:ConditionCombinator",
            "type_:ConditionalNodeResult",
            "type_:ConditionalNodeResultData",
            "type_:CreateTestSuiteTestCaseRequest",
            "type_:DeploymentProviderPayloadResponsePayload",
            "type_:DeploymentProviderPayloadResponse",
            "type_:DeploymentRead",
            "type_:DeploymentReleaseTagDeploymentHistoryItem",
            "type_:DeploymentReleaseTagRead",
            "type_:DocumentDocumentToDocumentIndex",
            "type_:DocumentIndexChunking",
            "type_:DocumentIndexChunkingRequest",
            "type_:DocumentIndexIndexingConfig",
            "type_:DocumentIndexIndexingConfigRequest",
            "type_:DocumentIndexRead",
            "type_:DocumentRead",
            "type_:DocumentStatus",
            "type_:EntityStatus",
            "type_:EnvironmentEnum",
            "type_:ErrorVariableValue",
            "type_:ErrorVellumValue",
            "type_:ErrorVellumValueRequest",
            "type_:ExecutePromptApiErrorResponse",
            "type_:ExecutePromptEvent",
            "type_:ExecutePromptResponse",
            "type_:ExecuteWorkflowErrorResponse",
            "type_:ExecuteWorkflowResponse",
            "type_:ExecuteWorkflowStreamErrorResponse",
            "type_:ExecuteWorkflowWorkflowResultEvent",
            "type_:ExecutionArrayVellumValue",
            "type_:ExecutionChatHistoryVellumValue",
            "type_:ExecutionErrorVellumValue",
            "type_:ExecutionFunctionCallVellumValue",
            "type_:ExecutionJsonVellumValue",
            "type_:ExecutionNumberVellumValue",
            "type_:ExecutionSearchResultsVellumValue",
            "type_:ExecutionStringVellumValue",
            "type_:ExecutionVellumValue",
            "type_:ExternalTestCaseExecution",
            "type_:ExternalTestCaseExecutionRequest",
            "type_:FinishReasonEnum",
            "type_:FolderEntity",
            "type_:FolderEntityDocumentIndex",
            "type_:FolderEntityDocumentIndexData",
            "type_:FolderEntityFolder",
            "type_:FolderEntityFolderData",
            "type_:FolderEntityPromptSandbox",
            "type_:FolderEntityPromptSandboxData",
            "type_:FolderEntityTestSuite",
            "type_:FolderEntityTestSuiteData",
            "type_:FolderEntityWorkflowSandbox",
            "type_:FolderEntityWorkflowSandboxData",
            "type_:FulfilledEnum",
            "type_:FulfilledExecutePromptEvent",
            "type_:FulfilledExecutePromptResponse",
            "type_:FulfilledExecuteWorkflowWorkflowResultEvent",
            "type_:FulfilledPromptExecutionMeta",
            "type_:FulfilledWorkflowNodeResultEvent",
            "type_:FunctionCall",
            "type_:FunctionCallChatMessageContent",
            "type_:FunctionCallChatMessageContentRequest",
            "type_:FunctionCallChatMessageContentValue",
            "type_:FunctionCallChatMessageContentValueRequest",
            "type_:FunctionCallRequest",
            "type_:FunctionCallVariableValue",
            "type_:FunctionCallVellumValue",
            "type_:FunctionCallVellumValueRequest",
            "type_:GoogleVertexAiVectorizerConfig",
            "type_:GoogleVertexAiVectorizerConfigRequest",
            "type_:GoogleVertexAiVectorizerTextEmbedding004",
            "type_:GoogleVertexAiVectorizerTextEmbedding004Request",
            "type_:GoogleVertexAiVectorizerTextMultilingualEmbedding002",
            "type_:GoogleVertexAiVectorizerTextMultilingualEmbedding002Request",
            "type_:HkunlpInstructorXlVectorizer",
            "type_:HkunlpInstructorXlVectorizerRequest",
            "type_:ImageChatMessageContent",
            "type_:ImageChatMessageContentRequest",
            "type_:ImageVariableValue",
            "type_:ImageVellumValue",
            "type_:ImageVellumValueRequest",
            "type_:IndexingConfigVectorizer",
            "type_:IndexingConfigVectorizerRequest",
            "type_:IndexingStateEnum",
            "type_:InitiatedExecutePromptEvent",
            "type_:InitiatedPromptExecutionMeta",
            "type_:InitiatedWorkflowNodeResultEvent",
            "type_:InstructorVectorizerConfig",
            "type_:InstructorVectorizerConfigRequest",
            "type_:IterationStateEnum",
            "type_:JsonInputRequest",
            "type_:JsonVariableValue",
            "type_:JsonVellumValue",
            "type_:JsonVellumValueRequest",
            "type_:LogicalOperator",
            "type_:MlModelUsage",
            "type_:MapNodeResult",
            "type_:MapNodeResultData",
            "type_:MergeNodeResult",
            "type_:MergeNodeResultData",
            "type_:MetadataFilterConfigRequest",
            "type_:MetadataFilterRuleCombinator",
            "type_:MetadataFilterRuleRequest",
            "type_:MetadataFiltersRequest",
            "type_:MetricNodeResult",
            "type_:NamedScenarioInputChatHistoryVariableValueRequest",
            "type_:NamedScenarioInputJsonVariableValueRequest",
            "type_:NamedScenarioInputRequest",
            "type_:NamedScenarioInputStringVariableValueRequest",
            "type_:NamedTestCaseArrayVariableValue",
            "type_:NamedTestCaseArrayVariableValueRequest",
            "type_:NamedTestCaseChatHistoryVariableValue",
            "type_:NamedTestCaseChatHistoryVariableValueRequest",
            "type_:NamedTestCaseErrorVariableValue",
            "type_:NamedTestCaseErrorVariableValueRequest",
            "type_:NamedTestCaseFunctionCallVariableValue",
            "type_:NamedTestCaseFunctionCallVariableValueRequest",
            "type_:NamedTestCaseJsonVariableValue",
            "type_:NamedTestCaseJsonVariableValueRequest",
            "type_:NamedTestCaseNumberVariableValue",
            "type_:NamedTestCaseNumberVariableValueRequest",
            "type_:NamedTestCaseSearchResultsVariableValue",
            "type_:NamedTestCaseSearchResultsVariableValueRequest",
            "type_:NamedTestCaseStringVariableValue",
            "type_:NamedTestCaseStringVariableValueRequest",
            "type_:NamedTestCaseVariableValue",
            "type_:NamedTestCaseVariableValueRequest",
            "type_:NodeInputCompiledArrayValue",
            "type_:NodeInputCompiledChatHistoryValue",
            "type_:NodeInputCompiledErrorValue",
            "type_:NodeInputCompiledFunctionCallValue",
            "type_:NodeInputCompiledJsonValue",
            "type_:NodeInputCompiledNumberValue",
            "type_:NodeInputCompiledSearchResultsValue",
            "type_:NodeInputCompiledStringValue",
            "type_:NodeInputVariableCompiledValue",
            "type_:NodeOutputCompiledArrayValue",
            "type_:NodeOutputCompiledChatHistoryValue",
            "type_:NodeOutputCompiledErrorValue",
            "type_:NodeOutputCompiledFunctionCallValue",
            "type_:NodeOutputCompiledJsonValue",
            "type_:NodeOutputCompiledNumberValue",
            "type_:NodeOutputCompiledSearchResultsValue",
            "type_:NodeOutputCompiledStringValue",
            "type_:NodeOutputCompiledValue",
            "type_:NumberVariableValue",
            "type_:NumberVellumValue",
            "type_:NumberVellumValueRequest",
            "type_:OpenAiVectorizerConfig",
            "type_:OpenAiVectorizerConfigRequest",
            "type_:OpenAiVectorizerTextEmbedding3Large",
            "type_:OpenAiVectorizerTextEmbedding3LargeRequest",
            "type_:OpenAiVectorizerTextEmbedding3Small",
            "type_:OpenAiVectorizerTextEmbedding3SmallRequest",
            "type_:OpenAiVectorizerTextEmbeddingAda002",
            "type_:OpenAiVectorizerTextEmbeddingAda002Request",
            "type_:PaginatedDocumentIndexReadList",
            "type_:PaginatedFolderEntityList",
            "type_:PaginatedSlimDeploymentReadList",
            "type_:PaginatedSlimDocumentList",
            "type_:PaginatedSlimWorkflowDeploymentList",
            "type_:PaginatedTestSuiteRunExecutionList",
            "type_:PaginatedTestSuiteTestCaseList",
            "type_:PdfSearchResultMetaSource",
            "type_:PdfSearchResultMetaSourceRequest",
            "type_:Price",
            "type_:ProcessingFailureReasonEnum",
            "type_:ProcessingStateEnum",
            "type_:PromptDeploymentExpandMetaRequest",
            "type_:PromptDeploymentInputRequest",
            "type_:PromptExecutionMeta",
            "type_:PromptNodeExecutionMeta",
            "type_:PromptNodeResult",
            "type_:PromptNodeResultData",
            "type_:PromptOutput",
            "type_:RawPromptExecutionOverridesRequest",
            "type_:ReductoChunkerConfig",
            "type_:ReductoChunkerConfigRequest",
            "type_:ReductoChunking",
            "type_:ReductoChunkingRequest",
            "type_:RejectedExecutePromptEvent",
            "type_:RejectedExecutePromptResponse",
            "type_:RejectedExecuteWorkflowWorkflowResultEvent",
            "type_:RejectedPromptExecutionMeta",
            "type_:RejectedWorkflowNodeResultEvent",
            "type_:ReleaseTagSource",
            "type_:ReplaceTestSuiteTestCaseRequest",
            "type_:SandboxScenario",
            "type_:ScenarioInput",
            "type_:ScenarioInputChatHistoryVariableValue",
            "type_:ScenarioInputJsonVariableValue",
            "type_:ScenarioInputStringVariableValue",
            "type_:SearchErrorResponse",
            "type_:SearchFiltersRequest",
            "type_:SearchNodeResult",
            "type_:SearchNodeResultData",
            "type_:SearchRequestOptionsRequest",
            "type_:SearchResponse",
            "type_:SearchResult",
            "type_:SearchResultDocument",
            "type_:SearchResultDocumentRequest",
            "type_:SearchResultMergingRequest",
            "type_:SearchResultMeta",
            "type_:SearchResultMetaRequest",
            "type_:SearchResultMetaSource",
            "type_:SearchResultMetaSourceRequest",
            "type_:SearchResultRequest",
            "type_:SearchResultsVariableValue",
            "type_:SearchResultsVellumValue",
            "type_:SearchResultsVellumValueRequest",
            "type_:SearchWeightsRequest",
            "type_:SecretTypeEnum",
            "type_:SentenceChunkerConfig",
            "type_:SentenceChunkerConfigRequest",
            "type_:SentenceChunking",
            "type_:SentenceChunkingRequest",
            "type_:SlimDeploymentRead",
            "type_:SlimDocument",
            "type_:SlimWorkflowDeployment",
            "type_:StreamingExecutePromptEvent",
            "type_:StreamingPromptExecutionMeta",
            "type_:StreamingWorkflowNodeResultEvent",
            "type_:StringChatMessageContent",
            "type_:StringChatMessageContentRequest",
            "type_:StringInputRequest",
            "type_:StringVariableValue",
            "type_:StringVellumValue",
            "type_:StringVellumValueRequest",
            "type_:SubmitCompletionActualRequest",
            "type_:SubmitCompletionActualsErrorResponse",
            "type_:SubmitWorkflowExecutionActualRequest",
            "type_:SubworkflowNodeResult",
            "type_:SubworkflowNodeResultData",
            "type_:TemplatingNodeArrayResult",
            "type_:TemplatingNodeChatHistoryResult",
            "type_:TemplatingNodeErrorResult",
            "type_:TemplatingNodeFunctionCallResult",
            "type_:TemplatingNodeJsonResult",
            "type_:TemplatingNodeNumberResult",
            "type_:TemplatingNodeResult",
            "type_:TemplatingNodeResultData",
            "type_:TemplatingNodeResultOutput",
            "type_:TemplatingNodeSearchResultsResult",
            "type_:TemplatingNodeStringResult",
            "type_:TerminalNodeArrayResult",
            "type_:TerminalNodeChatHistoryResult",
            "type_:TerminalNodeErrorResult",
            "type_:TerminalNodeFunctionCallResult",
            "type_:TerminalNodeJsonResult",
            "type_:TerminalNodeNumberResult",
            "type_:TerminalNodeResult",
            "type_:TerminalNodeResultData",
            "type_:TerminalNodeResultOutput",
            "type_:TerminalNodeSearchResultsResult",
            "type_:TerminalNodeStringResult",
            "type_:TestCaseArrayVariableValue",
            "type_:TestCaseChatHistoryVariableValue",
            "type_:TestCaseErrorVariableValue",
            "type_:TestCaseFunctionCallVariableValue",
            "type_:TestCaseJsonVariableValue",
            "type_:TestCaseNumberVariableValue",
            "type_:TestCaseSearchResultsVariableValue",
            "type_:TestCaseStringVariableValue",
            "type_:TestCaseVariableValue",
            "type_:TestSuiteRunDeploymentReleaseTagExecConfig",
            "type_:TestSuiteRunDeploymentReleaseTagExecConfigData",
            "type_:TestSuiteRunDeploymentReleaseTagExecConfigDataRequest",
            "type_:TestSuiteRunDeploymentReleaseTagExecConfigRequest",
            "type_:TestSuiteRunExecConfig",
            "type_:TestSuiteRunExecConfigRequest",
            "type_:TestSuiteRunExecution",
            "type_:TestSuiteRunExecutionArrayOutput",
            "type_:TestSuiteRunExecutionChatHistoryOutput",
            "type_:TestSuiteRunExecutionErrorOutput",
            "type_:TestSuiteRunExecutionFunctionCallOutput",
            "type_:TestSuiteRunExecutionJsonOutput",
            "type_:TestSuiteRunExecutionMetricDefinition",
            "type_:TestSuiteRunExecutionMetricResult",
            "type_:TestSuiteRunExecutionNumberOutput",
            "type_:TestSuiteRunExecutionOutput",
            "type_:TestSuiteRunExecutionSearchResultsOutput",
            "type_:TestSuiteRunExecutionStringOutput",
            "type_:TestSuiteRunExternalExecConfig",
            "type_:TestSuiteRunExternalExecConfigData",
            "type_:TestSuiteRunExternalExecConfigDataRequest",
            "type_:TestSuiteRunExternalExecConfigRequest",
            "type_:TestSuiteRunMetricErrorOutput",
            "type_:TestSuiteRunMetricJsonOutput",
            "type_:TestSuiteRunMetricNumberOutput",
            "type_:TestSuiteRunMetricOutput",
            "type_:TestSuiteRunMetricStringOutput",
            "type_:TestSuiteRunRead",
            "type_:TestSuiteRunState",
            "type_:TestSuiteRunTestSuite",
            "type_:TestSuiteRunWorkflowReleaseTagExecConfig",
            "type_:TestSuiteRunWorkflowReleaseTagExecConfigData",
            "type_:TestSuiteRunWorkflowReleaseTagExecConfigDataRequest",
            "type_:TestSuiteRunWorkflowReleaseTagExecConfigRequest",
            "type_:TestSuiteTestCase",
            "type_:TestSuiteTestCaseBulkOperationRequest",
            "type_:TestSuiteTestCaseBulkResult",
            "type_:TestSuiteTestCaseCreateBulkOperationRequest",
            "type_:TestSuiteTestCaseCreatedBulkResult",
            "type_:TestSuiteTestCaseCreatedBulkResultData",
            "type_:TestSuiteTestCaseDeleteBulkOperationDataRequest",
            "type_:TestSuiteTestCaseDeleteBulkOperationRequest",
            "type_:TestSuiteTestCaseDeletedBulkResult",
            "type_:TestSuiteTestCaseDeletedBulkResultData",
            "type_:TestSuiteTestCaseRejectedBulkResult",
            "type_:TestSuiteTestCaseReplaceBulkOperationRequest",
            "type_:TestSuiteTestCaseReplacedBulkResult",
            "type_:TestSuiteTestCaseReplacedBulkResultData",
            "type_:TestSuiteTestCaseUpsertBulkOperationRequest",
            "type_:TokenOverlappingWindowChunkerConfig",
            "type_:TokenOverlappingWindowChunkerConfigRequest",
            "type_:TokenOverlappingWindowChunking",
            "type_:TokenOverlappingWindowChunkingRequest",
            "type_:UnitEnum",
            "type_:UploadDocumentErrorResponse",
            "type_:UploadDocumentResponse",
            "type_:UpsertTestSuiteTestCaseRequest",
            "type_:VellumAudio",
            "type_:VellumAudioRequest",
            "type_:VellumError",
            "type_:VellumErrorCodeEnum",
            "type_:VellumErrorRequest",
            "type_:VellumImage",
            "type_:VellumImageRequest",
            "type_:VellumValue",
            "type_:VellumValueLogicalConditionGroupRequest",
            "type_:VellumValueLogicalConditionRequest",
            "type_:VellumValueLogicalExpressionRequest",
            "type_:VellumValueRequest",
            "type_:VellumVariable",
            "type_:VellumVariableExtensions",
            "type_:VellumVariableType",
            "type_:WorkflowDeploymentRead",
            "type_:WorkflowEventError",
            "type_:WorkflowExecutionActualChatHistoryRequest",
            "type_:WorkflowExecutionActualJsonRequest",
            "type_:WorkflowExecutionActualStringRequest",
            "type_:WorkflowExecutionEventErrorCode",
            "type_:WorkflowExecutionEventType",
            "type_:WorkflowExecutionNodeResultEvent",
            "type_:WorkflowExecutionWorkflowResultEvent",
            "type_:WorkflowExpandMetaRequest",
            "type_:WorkflowNodeResultData",
            "type_:WorkflowNodeResultEvent",
            "type_:WorkflowNodeResultEventState",
            "type_:WorkflowOutput",
            "type_:WorkflowOutputArray",
            "type_:WorkflowOutputChatHistory",
            "type_:WorkflowOutputError",
            "type_:WorkflowOutputFunctionCall",
            "type_:WorkflowOutputImage",
            "type_:WorkflowOutputJson",
            "type_:WorkflowOutputNumber",
            "type_:WorkflowOutputSearchResults",
            "type_:WorkflowOutputString",
            "type_:WorkflowReleaseTagRead",
            "type_:WorkflowReleaseTagWorkflowDeploymentHistoryItem",
            "type_:WorkflowRequestChatHistoryInputRequest",
            "type_:WorkflowRequestInputRequest",
            "type_:WorkflowRequestJsonInputRequest",
            "type_:WorkflowRequestNumberInputRequest",
            "type_:WorkflowRequestStringInputRequest",
            "type_:WorkflowResultEvent",
            "type_:WorkflowResultEventOutputData",
            "type_:WorkflowResultEventOutputDataArray",
            "type_:WorkflowResultEventOutputDataChatHistory",
            "type_:WorkflowResultEventOutputDataError",
            "type_:WorkflowResultEventOutputDataFunctionCall",
            "type_:WorkflowResultEventOutputDataJson",
            "type_:WorkflowResultEventOutputDataNumber",
            "type_:WorkflowResultEventOutputDataSearchResults",
            "type_:WorkflowResultEventOutputDataString",
            "type_:WorkflowStreamEvent",
            "type_:WorkspaceSecretRead"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_deployments:DeploymentsListRequestStatus": {
            "name": "DeploymentsListRequestStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ACTIVE"
                },
                {
                  "value": "ARCHIVED"
                }
              ]
            }
          },
          "type_documentIndexes:DocumentIndexesListRequestStatus": {
            "name": "DocumentIndexesListRequestStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ACTIVE"
                },
                {
                  "value": "ARCHIVED"
                }
              ]
            }
          },
          "type_folderEntities:FolderEntitiesListRequestEntityStatus": {
            "name": "FolderEntitiesListRequestEntityStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ACTIVE"
                },
                {
                  "value": "ARCHIVED"
                }
              ]
            }
          },
          "type_workflowDeployments:WorkflowDeploymentsListRequestStatus": {
            "name": "WorkflowDeploymentsListRequestStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ACTIVE"
                },
                {
                  "value": "ARCHIVED"
                }
              ]
            }
          },
          "type_:AddOpenaiApiKeyEnum": {
            "description": "- `True` - True",
            "name": "AddOpenaiApiKeyEnum",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          "type_:ApiNodeResult": {
            "description": "A Node Result Event emitted from an API Node.",
            "name": "ApiNodeResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ApiNodeResultData"
                  }
                }
              ]
            }
          },
          "type_:ApiNodeResultData": {
            "name": "ApiNodeResultData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "json",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "text_output_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "json_output_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "status_code_output_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "status_code",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:ArrayChatMessageContent": {
            "description": "A list of chat message content items.",
            "name": "ArrayChatMessageContent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ArrayChatMessageContentItem"
                    }
                  }
                }
              ]
            }
          },
          "type_:ArrayChatMessageContentItem": {
            "name": "ArrayChatMessageContentItem",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:StringChatMessageContent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:FunctionCallChatMessageContent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IMAGE",
                  "additionalProperties": {
                    "extends": ["type_:ImageChatMessageContent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "AUDIO",
                  "additionalProperties": {
                    "extends": ["type_:AudioChatMessageContent"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:ArrayChatMessageContentItemRequest": {
            "name": "ArrayChatMessageContentItemRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:StringChatMessageContentRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:FunctionCallChatMessageContentRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IMAGE",
                  "additionalProperties": {
                    "extends": ["type_:ImageChatMessageContentRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "AUDIO",
                  "additionalProperties": {
                    "extends": ["type_:AudioChatMessageContentRequest"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:ArrayChatMessageContentRequest": {
            "description": "A list of chat message content items.",
            "name": "ArrayChatMessageContentRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ArrayChatMessageContentItemRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:ArrayVariableValue": {
            "name": "ArrayVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ArrayVariableValueItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ArrayVariableValueItem": {
            "name": "ArrayVariableValueItem",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:StringVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:NumberVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:JsonVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:ErrorVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:FunctionCallVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IMAGE",
                  "additionalProperties": {
                    "extends": ["type_:ImageVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:ChatHistoryVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:SearchResultsVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:ArrayVariableValue"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:ArrayVellumValue": {
            "description": "A value representing an array of Vellum variable values.",
            "name": "ArrayVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VellumValue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ArrayVellumValueRequest": {
            "description": "A value representing an array of Vellum variable values.",
            "name": "ArrayVellumValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VellumValueRequest"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:AudioChatMessageContent": {
            "description": "An audio value that is used in a chat message.",
            "name": "AudioChatMessageContent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "id",
                    "value": "type_:VellumAudio"
                  }
                }
              ]
            }
          },
          "type_:AudioChatMessageContentRequest": {
            "description": "An audio value that is used in a chat message.",
            "name": "AudioChatMessageContentRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "id",
                    "value": "type_:VellumAudioRequest"
                  }
                }
              ]
            }
          },
          "type_:BasicVectorizerIntfloatMultilingualE5Large": {
            "description": "Basic vectorizer for intfloat/multilingual-e5-large.",
            "name": "BasicVectorizerIntfloatMultilingualE5Large",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BasicVectorizerIntfloatMultilingualE5LargeRequest": {
            "description": "Basic vectorizer for intfloat/multilingual-e5-large.",
            "name": "BasicVectorizerIntfloatMultilingualE5LargeRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1": {
            "description": "Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-cos-v1.",
            "name": "BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request": {
            "description": "Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-cos-v1.",
            "name": "BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1": {
            "description": "Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-dot-v1.",
            "name": "BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request": {
            "description": "Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-dot-v1.",
            "name": "BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ChatHistoryInputRequest": {
            "description": "A user input representing a list of chat messages",
            "name": "ChatHistoryInputRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's name, as defined in the deployment.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ChatMessageRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:ChatHistoryVariableValue": {
            "name": "ChatHistoryVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessage"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ChatHistoryVellumValue": {
            "description": "A value representing Chat History.",
            "name": "ChatHistoryVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessage"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ChatHistoryVellumValueRequest": {
            "description": "A value representing Chat History.",
            "name": "ChatHistoryVellumValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessageRequest"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ChatMessage": {
            "name": "ChatMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "role",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ChatMessageRole"
                  }
                },
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ChatMessageContent"
                    }
                  }
                },
                {
                  "description": "An optional identifier representing who or what generated this message.",
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ChatMessageContent": {
            "name": "ChatMessageContent",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:StringChatMessageContent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:FunctionCallChatMessageContent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:ArrayChatMessageContent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IMAGE",
                  "additionalProperties": {
                    "extends": ["type_:ImageChatMessageContent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "AUDIO",
                  "additionalProperties": {
                    "extends": ["type_:AudioChatMessageContent"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:ChatMessageContentRequest": {
            "name": "ChatMessageContentRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:StringChatMessageContentRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:FunctionCallChatMessageContentRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:ArrayChatMessageContentRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IMAGE",
                  "additionalProperties": {
                    "extends": ["type_:ImageChatMessageContentRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "AUDIO",
                  "additionalProperties": {
                    "extends": ["type_:AudioChatMessageContentRequest"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:ChatMessageRequest": {
            "name": "ChatMessageRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "role",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ChatMessageRole"
                  }
                },
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ChatMessageContentRequest"
                    }
                  }
                },
                {
                  "description": "An optional identifier representing who or what generated this message.",
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ChatMessageRole": {
            "description": "- `SYSTEM` - System\n- `ASSISTANT` - Assistant\n- `USER` - User\n- `FUNCTION` - Function",
            "name": "ChatMessageRole",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "SYSTEM"
                },
                {
                  "value": "ASSISTANT"
                },
                {
                  "value": "USER"
                },
                {
                  "value": "FUNCTION"
                }
              ]
            }
          },
          "type_:CodeExecutionNodeArrayResult": {
            "name": "CodeExecutionNodeArrayResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VellumValue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CodeExecutionNodeChatHistoryResult": {
            "name": "CodeExecutionNodeChatHistoryResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessage"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CodeExecutionNodeErrorResult": {
            "name": "CodeExecutionNodeErrorResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumError"
                    }
                  }
                }
              ]
            }
          },
          "type_:CodeExecutionNodeFunctionCallResult": {
            "name": "CodeExecutionNodeFunctionCallResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCall"
                    }
                  }
                }
              ]
            }
          },
          "type_:CodeExecutionNodeJsonResult": {
            "name": "CodeExecutionNodeJsonResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          },
          "type_:CodeExecutionNodeNumberResult": {
            "name": "CodeExecutionNodeNumberResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CodeExecutionNodeResult": {
            "description": "A Node Result Event emitted from a Code Execution Node.",
            "name": "CodeExecutionNodeResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CodeExecutionNodeResultData"
                  }
                }
              ]
            }
          },
          "type_:CodeExecutionNodeResultData": {
            "name": "CodeExecutionNodeResultData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "output",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CodeExecutionNodeResultOutput"
                  }
                },
                {
                  "key": "log_output_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CodeExecutionNodeResultOutput": {
            "name": "CodeExecutionNodeResultOutput",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:CodeExecutionNodeStringResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:CodeExecutionNodeNumberResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:CodeExecutionNodeJsonResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:CodeExecutionNodeChatHistoryResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:CodeExecutionNodeSearchResultsResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:CodeExecutionNodeErrorResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:CodeExecutionNodeArrayResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:CodeExecutionNodeFunctionCallResult"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:CodeExecutionNodeSearchResultsResult": {
            "name": "CodeExecutionNodeSearchResultsResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResult"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CodeExecutionNodeStringResult": {
            "name": "CodeExecutionNodeStringResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CompilePromptDeploymentExpandMetaRequest": {
            "name": "CompilePromptDeploymentExpandMetaRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "If enabled, the response will include the model identifier representing the ML Model invoked by the Prompt.",
                  "key": "model_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "If enabled, the response will include the release tag of the Prompt Deployment.",
                  "key": "deployment_release_tag",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "If enabled, the response will include the ID of the Prompt Version backing the deployment.",
                  "key": "prompt_version_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CompilePromptMeta": {
            "description": "The subset of the metadata tracked by Vellum during Prompt Deployment compilation that the request opted into with `expand_meta`.",
            "name": "CompilePromptMeta",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "model_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "deployment_release_tag",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "prompt_version_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ConditionCombinator": {
            "description": "- `OR` - OR\n- `AND` - AND",
            "name": "ConditionCombinator",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "OR"
                },
                {
                  "value": "AND"
                }
              ]
            }
          },
          "type_:ConditionalNodeResult": {
            "description": "A Node Result Event emitted from a Conditional Node.",
            "name": "ConditionalNodeResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ConditionalNodeResultData"
                  }
                }
              ]
            }
          },
          "type_:ConditionalNodeResultData": {
            "name": "ConditionalNodeResultData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source_handle_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CreateTestSuiteTestCaseRequest": {
            "description": "Information about the Test Case to create",
            "name": "CreateTestSuiteTestCaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A human-readable label used to convey the intention of this Test Case",
                  "key": "label",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Values for each of the Test Case's input variables",
                  "key": "input_values",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NamedTestCaseVariableValueRequest"
                    }
                  }
                },
                {
                  "description": "Values for each of the Test Case's evaluation variables",
                  "key": "evaluation_values",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NamedTestCaseVariableValueRequest"
                    }
                  }
                },
                {
                  "description": "Optionally provide an ID that uniquely identifies this Test Case in your system. Useful for updating this Test Cases data after initial creation. Cannot be changed later.",
                  "key": "external_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentProviderPayloadResponsePayload": {
            "name": "DeploymentProviderPayloadResponsePayload",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentProviderPayloadResponse": {
            "name": "DeploymentProviderPayloadResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "payload",
                  "valueType": {
                    "type": "id",
                    "value": "type_:DeploymentProviderPayloadResponsePayload"
                  }
                },
                {
                  "key": "meta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:CompilePromptMeta"
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentRead": {
            "name": "DeploymentRead",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "A human-readable label for the deployment",
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A name that uniquely identifies this deployment within its workspace",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The current status of the deployment\n\n- `ACTIVE` - Active\n- `ARCHIVED` - Archived",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EntityStatus"
                    }
                  }
                },
                {
                  "description": "The environment this deployment is used in\n\n- `DEVELOPMENT` - Development\n- `STAGING` - Staging\n- `PRODUCTION` - Production",
                  "key": "environment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EnvironmentEnum"
                    }
                  }
                },
                {
                  "key": "last_deployed_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "input_variables",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumVariable"
                    }
                  }
                },
                {
                  "description": "A human-readable description of the deployment",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Deprecated. The Prompt execution endpoints return a `prompt_version_id` that could be used instead.",
                  "availability": "Deprecated",
                  "key": "active_model_version_ids",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The ID of the history item associated with this Deployment's LATEST Release Tag",
                  "key": "last_deployed_history_item_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentReleaseTagDeploymentHistoryItem": {
            "name": "DeploymentReleaseTagDeploymentHistoryItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                }
              ]
            }
          },
          "type_:DeploymentReleaseTagRead": {
            "name": "DeploymentReleaseTagRead",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the Release Tag",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The source of how the Release Tag was originally created\n\n- `SYSTEM` - System\n- `USER` - User",
                  "key": "source",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReleaseTagSource"
                  }
                },
                {
                  "description": "The Deployment History Item that this Release Tag is associated with",
                  "key": "history_item",
                  "valueType": {
                    "type": "id",
                    "value": "type_:DeploymentReleaseTagDeploymentHistoryItem"
                  }
                }
              ]
            }
          },
          "type_:DocumentDocumentToDocumentIndex": {
            "name": "DocumentDocumentToDocumentIndex",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Vellum-generated ID that uniquely identifies this link.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Vellum-generated ID that uniquely identifies the index this document is included in.",
                  "key": "document_index_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "An enum value representing where this document is along its indexing lifecycle for this index.\n\n- `AWAITING_PROCESSING` - Awaiting Processing\n- `QUEUED` - Queued\n- `INDEXING` - Indexing\n- `INDEXED` - Indexed\n- `FAILED` - Failed",
                  "key": "indexing_state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:IndexingStateEnum"
                    }
                  }
                }
              ]
            }
          },
          "type_:DocumentIndexChunking": {
            "name": "DocumentIndexChunking",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "chunker_name",
              "variants": [
                {
                  "discriminantValue": "reducto-chunker",
                  "additionalProperties": {
                    "extends": ["type_:ReductoChunking"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "sentence-chunker",
                  "additionalProperties": {
                    "extends": ["type_:SentenceChunking"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "token-overlapping-window-chunker",
                  "additionalProperties": {
                    "extends": ["type_:TokenOverlappingWindowChunking"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:DocumentIndexChunkingRequest": {
            "name": "DocumentIndexChunkingRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "chunker_name",
              "variants": [
                {
                  "discriminantValue": "reducto-chunker",
                  "additionalProperties": {
                    "extends": ["type_:ReductoChunkingRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "sentence-chunker",
                  "additionalProperties": {
                    "extends": ["type_:SentenceChunkingRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "token-overlapping-window-chunker",
                  "additionalProperties": {
                    "extends": ["type_:TokenOverlappingWindowChunkingRequest"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:DocumentIndexIndexingConfig": {
            "name": "DocumentIndexIndexingConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "vectorizer",
                  "valueType": {
                    "type": "id",
                    "value": "type_:IndexingConfigVectorizer"
                  }
                },
                {
                  "key": "chunking",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DocumentIndexChunking"
                    }
                  }
                }
              ]
            }
          },
          "type_:DocumentIndexIndexingConfigRequest": {
            "name": "DocumentIndexIndexingConfigRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "vectorizer",
                  "valueType": {
                    "type": "id",
                    "value": "type_:IndexingConfigVectorizerRequest"
                  }
                },
                {
                  "key": "chunking",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DocumentIndexChunkingRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:DocumentIndexRead": {
            "name": "DocumentIndexRead",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "A human-readable label for the document index",
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A name that uniquely identifies this index within its workspace",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The current status of the document index\n\n- `ACTIVE` - Active\n- `ARCHIVED` - Archived",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EntityStatus"
                    }
                  }
                },
                {
                  "description": "The environment this document index is used in\n\n- `DEVELOPMENT` - Development\n- `STAGING` - Staging\n- `PRODUCTION` - Production",
                  "key": "environment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EnvironmentEnum"
                    }
                  }
                },
                {
                  "key": "indexing_config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:DocumentIndexIndexingConfig"
                  }
                }
              ]
            }
          },
          "type_:DocumentRead": {
            "name": "DocumentRead",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique id of this document as it exists in the user's system.",
                  "key": "external_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "last_uploaded_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "A human-readable label for the document. Defaults to the originally uploaded file's file name.",
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The current processing state of the document\n\n- `QUEUED` - Queued\n- `PROCESSING` - Processing\n- `PROCESSED` - Processed\n- `FAILED` - Failed",
                  "key": "processing_state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProcessingStateEnum"
                    }
                  }
                },
                {
                  "description": "The current status of the document\n\n- `ACTIVE` - Active",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DocumentStatus"
                    }
                  }
                },
                {
                  "key": "original_file_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "processed_file_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "document_to_document_indexes",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DocumentDocumentToDocumentIndex"
                    }
                  }
                },
                {
                  "description": "A previously supplied JSON object containing metadata that can be filtered on when searching.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DocumentStatus": {
            "description": "- `ACTIVE` - Active",
            "name": "DocumentStatus",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "ACTIVE"
                }
              }
            }
          },
          "type_:EntityStatus": {
            "description": "- `ACTIVE` - Active\n- `ARCHIVED` - Archived",
            "name": "EntityStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ACTIVE"
                },
                {
                  "value": "ARCHIVED"
                }
              ]
            }
          },
          "type_:EnvironmentEnum": {
            "description": "- `DEVELOPMENT` - Development\n- `STAGING` - Staging\n- `PRODUCTION` - Production",
            "name": "EnvironmentEnum",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "DEVELOPMENT"
                },
                {
                  "value": "STAGING"
                },
                {
                  "value": "PRODUCTION"
                }
              ]
            }
          },
          "type_:ErrorVariableValue": {
            "name": "ErrorVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumError"
                    }
                  }
                }
              ]
            }
          },
          "type_:ErrorVellumValue": {
            "description": "A value representing an Error.",
            "name": "ErrorVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumError"
                    }
                  }
                }
              ]
            }
          },
          "type_:ErrorVellumValueRequest": {
            "description": "A value representing an Error.",
            "name": "ErrorVellumValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumErrorRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:ExecutePromptApiErrorResponse": {
            "name": "ExecutePromptApiErrorResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Details about why the request failed.",
                  "key": "detail",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ExecutePromptEvent": {
            "name": "ExecutePromptEvent",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "state",
              "variants": [
                {
                  "discriminantValue": "INITIATED",
                  "additionalProperties": {
                    "extends": ["type_:InitiatedExecutePromptEvent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "STREAMING",
                  "additionalProperties": {
                    "extends": ["type_:StreamingExecutePromptEvent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FULFILLED",
                  "additionalProperties": {
                    "extends": ["type_:FulfilledExecutePromptEvent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "REJECTED",
                  "additionalProperties": {
                    "extends": ["type_:RejectedExecutePromptEvent"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:ExecutePromptResponse": {
            "name": "ExecutePromptResponse",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "state",
              "variants": [
                {
                  "discriminantValue": "FULFILLED",
                  "additionalProperties": {
                    "extends": ["type_:FulfilledExecutePromptResponse"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "REJECTED",
                  "additionalProperties": {
                    "extends": ["type_:RejectedExecutePromptResponse"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:ExecuteWorkflowErrorResponse": {
            "name": "ExecuteWorkflowErrorResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Details about why the request failed.",
                  "key": "detail",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ExecuteWorkflowResponse": {
            "name": "ExecuteWorkflowResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "execution_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "availability": "Deprecated",
                  "key": "run_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "external_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ExecuteWorkflowWorkflowResultEvent"
                  }
                }
              ]
            }
          },
          "type_:ExecuteWorkflowStreamErrorResponse": {
            "name": "ExecuteWorkflowStreamErrorResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Details about why the request failed.",
                  "key": "detail",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ExecuteWorkflowWorkflowResultEvent": {
            "name": "ExecuteWorkflowWorkflowResultEvent",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "state",
              "variants": [
                {
                  "discriminantValue": "FULFILLED",
                  "additionalProperties": {
                    "extends": ["type_:FulfilledExecuteWorkflowWorkflowResultEvent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "REJECTED",
                  "additionalProperties": {
                    "extends": ["type_:RejectedExecuteWorkflowWorkflowResultEvent"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:ExecutionArrayVellumValue": {
            "description": "A value representing an array of Vellum variable values.",
            "name": "ExecutionArrayVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's uniquely identifying internal id.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VellumValue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ExecutionChatHistoryVellumValue": {
            "description": "A value representing Chat History.",
            "name": "ExecutionChatHistoryVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's uniquely identifying internal id.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessage"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ExecutionErrorVellumValue": {
            "description": "A value representing an Error.",
            "name": "ExecutionErrorVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's uniquely identifying internal id.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumError"
                    }
                  }
                }
              ]
            }
          },
          "type_:ExecutionFunctionCallVellumValue": {
            "description": "A value representing a Function Call.",
            "name": "ExecutionFunctionCallVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's uniquely identifying internal id.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCall"
                    }
                  }
                }
              ]
            }
          },
          "type_:ExecutionJsonVellumValue": {
            "description": "A value representing a JSON object.",
            "name": "ExecutionJsonVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's uniquely identifying internal id.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          },
          "type_:ExecutionNumberVellumValue": {
            "description": "A value representing a number.",
            "name": "ExecutionNumberVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's uniquely identifying internal id.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ExecutionSearchResultsVellumValue": {
            "description": "A value representing Search Results.",
            "name": "ExecutionSearchResultsVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's uniquely identifying internal id.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResult"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ExecutionStringVellumValue": {
            "description": "A value representing a string.",
            "name": "ExecutionStringVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's uniquely identifying internal id.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ExecutionVellumValue": {
            "name": "ExecutionVellumValue",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:ExecutionStringVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:ExecutionNumberVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:ExecutionJsonVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:ExecutionChatHistoryVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:ExecutionSearchResultsVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:ExecutionErrorVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:ExecutionArrayVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:ExecutionFunctionCallVellumValue"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:ExternalTestCaseExecution": {
            "name": "ExternalTestCaseExecution",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The output values of a callable that was executed against a Test Case outside of Vellum",
                  "key": "outputs",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NamedTestCaseVariableValue"
                    }
                  }
                },
                {
                  "key": "test_case_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ExternalTestCaseExecutionRequest": {
            "name": "ExternalTestCaseExecutionRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The output values of a callable that was executed against a Test Case outside of Vellum",
                  "key": "outputs",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NamedTestCaseVariableValueRequest"
                    }
                  }
                },
                {
                  "key": "test_case_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:FinishReasonEnum": {
            "description": "- `LENGTH` - LENGTH\n- `STOP` - STOP\n- `UNKNOWN` - UNKNOWN",
            "name": "FinishReasonEnum",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "LENGTH"
                },
                {
                  "value": "STOP"
                },
                {
                  "value": "UNKNOWN"
                }
              ]
            }
          },
          "type_:FolderEntity": {
            "name": "FolderEntity",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "FOLDER",
                  "additionalProperties": {
                    "extends": ["type_:FolderEntityFolder"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "PROMPT_SANDBOX",
                  "additionalProperties": {
                    "extends": ["type_:FolderEntityPromptSandbox"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "WORKFLOW_SANDBOX",
                  "additionalProperties": {
                    "extends": ["type_:FolderEntityWorkflowSandbox"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "DOCUMENT_INDEX",
                  "additionalProperties": {
                    "extends": ["type_:FolderEntityDocumentIndex"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "TEST_SUITE",
                  "additionalProperties": {
                    "extends": ["type_:FolderEntityTestSuite"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:FolderEntityDocumentIndex": {
            "description": "A slim representation of a Document Index, as it exists within a Folder.",
            "name": "FolderEntityDocumentIndex",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:FolderEntityDocumentIndexData"
                  }
                }
              ]
            }
          },
          "type_:FolderEntityDocumentIndexData": {
            "name": "FolderEntityDocumentIndexData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "modified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EntityStatus"
                  }
                }
              ]
            }
          },
          "type_:FolderEntityFolder": {
            "description": "A slim representation of a Folder, as it exists within another Folder.",
            "name": "FolderEntityFolder",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:FolderEntityFolderData"
                  }
                }
              ]
            }
          },
          "type_:FolderEntityFolderData": {
            "name": "FolderEntityFolderData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "modified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "has_contents",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_:FolderEntityPromptSandbox": {
            "description": "A slim representation of a Prompt Sandbox, as it exists within a Folder.",
            "name": "FolderEntityPromptSandbox",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:FolderEntityPromptSandboxData"
                  }
                }
              ]
            }
          },
          "type_:FolderEntityPromptSandboxData": {
            "name": "FolderEntityPromptSandboxData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "modified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EntityStatus"
                  }
                },
                {
                  "key": "last_deployed_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FolderEntityTestSuite": {
            "description": "A slim representation of a Test Suite, as it exists within a Folder.",
            "name": "FolderEntityTestSuite",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:FolderEntityTestSuiteData"
                  }
                }
              ]
            }
          },
          "type_:FolderEntityTestSuiteData": {
            "name": "FolderEntityTestSuiteData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "modified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EntityStatus"
                  }
                }
              ]
            }
          },
          "type_:FolderEntityWorkflowSandbox": {
            "description": "A slim representation of a Workflow Sandbox, as it exists within a Folder.",
            "name": "FolderEntityWorkflowSandbox",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:FolderEntityWorkflowSandboxData"
                  }
                }
              ]
            }
          },
          "type_:FolderEntityWorkflowSandboxData": {
            "name": "FolderEntityWorkflowSandboxData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "modified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EntityStatus"
                  }
                },
                {
                  "key": "last_deployed_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FulfilledEnum": {
            "name": "FulfilledEnum",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "FULFILLED"
                }
              }
            }
          },
          "type_:FulfilledExecutePromptEvent": {
            "description": "The final data event returned indicating that the stream has ended and all final resolved values from the model can be found.",
            "name": "FulfilledExecutePromptEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "outputs",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PromptOutput"
                    }
                  }
                },
                {
                  "key": "execution_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "meta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FulfilledPromptExecutionMeta"
                    }
                  }
                }
              ]
            }
          },
          "type_:FulfilledExecutePromptResponse": {
            "description": "The successful response from the model containing all of the resolved values generated by the prompt.",
            "name": "FulfilledExecutePromptResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "meta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PromptExecutionMeta"
                    }
                  }
                },
                {
                  "description": "The subset of the raw response from the model that the request opted into with `expand_raw`.",
                  "key": "raw",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The ID of the execution.",
                  "key": "execution_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "outputs",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PromptOutput"
                    }
                  }
                }
              ]
            }
          },
          "type_:FulfilledExecuteWorkflowWorkflowResultEvent": {
            "description": "The successful response from the Workflow execution containing the produced outputs.",
            "name": "FulfilledExecuteWorkflowWorkflowResultEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "ts",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "outputs",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowOutput"
                    }
                  }
                }
              ]
            }
          },
          "type_:FulfilledPromptExecutionMeta": {
            "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
            "name": "FulfilledPromptExecutionMeta",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "latency",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "finish_reason",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FinishReasonEnum"
                    }
                  }
                },
                {
                  "key": "usage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:MlModelUsage"
                    }
                  }
                }
              ]
            }
          },
          "type_:FulfilledWorkflowNodeResultEvent": {
            "description": "An event that indicates that the node has fulfilled its execution.",
            "name": "FulfilledWorkflowNodeResultEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "node_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "node_result_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "ts",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowNodeResultData"
                    }
                  }
                },
                {
                  "key": "source_execution_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "output_values",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NodeOutputCompiledValue"
                    }
                  }
                },
                {
                  "key": "mocked",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FunctionCall": {
            "description": "The final resolved function call value.",
            "name": "FunctionCall",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "arguments",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FulfilledEnum"
                    }
                  }
                }
              ]
            }
          },
          "type_:FunctionCallChatMessageContent": {
            "description": "A function call value that is used in a chat message.",
            "name": "FunctionCallChatMessageContent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "id",
                    "value": "type_:FunctionCallChatMessageContentValue"
                  }
                }
              ]
            }
          },
          "type_:FunctionCallChatMessageContentRequest": {
            "description": "A function call value that is used in a chat message.",
            "name": "FunctionCallChatMessageContentRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "id",
                    "value": "type_:FunctionCallChatMessageContentValueRequest"
                  }
                }
              ]
            }
          },
          "type_:FunctionCallChatMessageContentValue": {
            "description": "The final resolved function call value.",
            "name": "FunctionCallChatMessageContentValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "arguments",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FunctionCallChatMessageContentValueRequest": {
            "description": "The final resolved function call value.",
            "name": "FunctionCallChatMessageContentValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "key": "arguments",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FunctionCallRequest": {
            "description": "The final resolved function call value.",
            "name": "FunctionCallRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "arguments",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FulfilledEnum"
                    }
                  }
                }
              ]
            }
          },
          "type_:FunctionCallVariableValue": {
            "name": "FunctionCallVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCall"
                    }
                  }
                }
              ]
            }
          },
          "type_:FunctionCallVellumValue": {
            "description": "A value representing a Function Call.",
            "name": "FunctionCallVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCall"
                    }
                  }
                }
              ]
            }
          },
          "type_:FunctionCallVellumValueRequest": {
            "description": "A value representing a Function Call.",
            "name": "FunctionCallVellumValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCallRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:GoogleVertexAiVectorizerConfig": {
            "name": "GoogleVertexAiVectorizerConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "project_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "region",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:GoogleVertexAiVectorizerConfigRequest": {
            "name": "GoogleVertexAiVectorizerConfigRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "project_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "key": "region",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:GoogleVertexAiVectorizerTextEmbedding004": {
            "name": "GoogleVertexAiVectorizerTextEmbedding004",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:GoogleVertexAiVectorizerConfig"
                  }
                }
              ]
            }
          },
          "type_:GoogleVertexAiVectorizerTextEmbedding004Request": {
            "name": "GoogleVertexAiVectorizerTextEmbedding004Request",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:GoogleVertexAiVectorizerConfigRequest"
                  }
                }
              ]
            }
          },
          "type_:GoogleVertexAiVectorizerTextMultilingualEmbedding002": {
            "name": "GoogleVertexAiVectorizerTextMultilingualEmbedding002",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:GoogleVertexAiVectorizerConfig"
                  }
                }
              ]
            }
          },
          "type_:GoogleVertexAiVectorizerTextMultilingualEmbedding002Request": {
            "name": "GoogleVertexAiVectorizerTextMultilingualEmbedding002Request",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:GoogleVertexAiVectorizerConfigRequest"
                  }
                }
              ]
            }
          },
          "type_:HkunlpInstructorXlVectorizer": {
            "description": "Vectorizer for hkunlp/instructor-xl.",
            "name": "HkunlpInstructorXlVectorizer",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:InstructorVectorizerConfig"
                  }
                }
              ]
            }
          },
          "type_:HkunlpInstructorXlVectorizerRequest": {
            "description": "Vectorizer for hkunlp/instructor-xl.",
            "name": "HkunlpInstructorXlVectorizerRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:InstructorVectorizerConfigRequest"
                  }
                }
              ]
            }
          },
          "type_:ImageChatMessageContent": {
            "description": "An image value that is used in a chat message.",
            "name": "ImageChatMessageContent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "id",
                    "value": "type_:VellumImage"
                  }
                }
              ]
            }
          },
          "type_:ImageChatMessageContentRequest": {
            "description": "An image value that is used in a chat message.",
            "name": "ImageChatMessageContentRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "id",
                    "value": "type_:VellumImageRequest"
                  }
                }
              ]
            }
          },
          "type_:ImageVariableValue": {
            "description": "A base Vellum primitive value representing an image.",
            "name": "ImageVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumImage"
                    }
                  }
                }
              ]
            }
          },
          "type_:ImageVellumValue": {
            "description": "A base Vellum primitive value representing an image.",
            "name": "ImageVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumImage"
                    }
                  }
                }
              ]
            }
          },
          "type_:ImageVellumValueRequest": {
            "description": "A base Vellum primitive value representing an image.",
            "name": "ImageVellumValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumImageRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:IndexingConfigVectorizer": {
            "name": "IndexingConfigVectorizer",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "model_name",
              "variants": [
                {
                  "discriminantValue": "text-embedding-3-small",
                  "additionalProperties": {
                    "extends": ["type_:OpenAiVectorizerTextEmbedding3Small"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text-embedding-3-large",
                  "additionalProperties": {
                    "extends": ["type_:OpenAiVectorizerTextEmbedding3Large"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text-embedding-ada-002",
                  "additionalProperties": {
                    "extends": ["type_:OpenAiVectorizerTextEmbeddingAda002"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "intfloat/multilingual-e5-large",
                  "additionalProperties": {
                    "extends": ["type_:BasicVectorizerIntfloatMultilingualE5Large"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "sentence-transformers/multi-qa-mpnet-base-cos-v1",
                  "additionalProperties": {
                    "extends": ["type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "sentence-transformers/multi-qa-mpnet-base-dot-v1",
                  "additionalProperties": {
                    "extends": ["type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "hkunlp/instructor-xl",
                  "additionalProperties": {
                    "extends": ["type_:HkunlpInstructorXlVectorizer"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text-embedding-004",
                  "additionalProperties": {
                    "extends": ["type_:GoogleVertexAiVectorizerTextEmbedding004"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text-multilingual-embedding-002",
                  "additionalProperties": {
                    "extends": ["type_:GoogleVertexAiVectorizerTextMultilingualEmbedding002"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:IndexingConfigVectorizerRequest": {
            "name": "IndexingConfigVectorizerRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "model_name",
              "variants": [
                {
                  "discriminantValue": "text-embedding-3-small",
                  "additionalProperties": {
                    "extends": ["type_:OpenAiVectorizerTextEmbedding3SmallRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text-embedding-3-large",
                  "additionalProperties": {
                    "extends": ["type_:OpenAiVectorizerTextEmbedding3LargeRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text-embedding-ada-002",
                  "additionalProperties": {
                    "extends": ["type_:OpenAiVectorizerTextEmbeddingAda002Request"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "intfloat/multilingual-e5-large",
                  "additionalProperties": {
                    "extends": ["type_:BasicVectorizerIntfloatMultilingualE5LargeRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "sentence-transformers/multi-qa-mpnet-base-cos-v1",
                  "additionalProperties": {
                    "extends": ["type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "sentence-transformers/multi-qa-mpnet-base-dot-v1",
                  "additionalProperties": {
                    "extends": ["type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "hkunlp/instructor-xl",
                  "additionalProperties": {
                    "extends": ["type_:HkunlpInstructorXlVectorizerRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text-embedding-004",
                  "additionalProperties": {
                    "extends": ["type_:GoogleVertexAiVectorizerTextEmbedding004Request"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text-multilingual-embedding-002",
                  "additionalProperties": {
                    "extends": ["type_:GoogleVertexAiVectorizerTextMultilingualEmbedding002Request"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:IndexingStateEnum": {
            "description": "- `AWAITING_PROCESSING` - Awaiting Processing\n- `QUEUED` - Queued\n- `INDEXING` - Indexing\n- `INDEXED` - Indexed\n- `FAILED` - Failed",
            "name": "IndexingStateEnum",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "AWAITING_PROCESSING"
                },
                {
                  "value": "QUEUED"
                },
                {
                  "value": "INDEXING"
                },
                {
                  "value": "INDEXED"
                },
                {
                  "value": "FAILED"
                }
              ]
            }
          },
          "type_:InitiatedExecutePromptEvent": {
            "description": "The initial data returned indicating that the response from the model has returned and begun streaming.",
            "name": "InitiatedExecutePromptEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "meta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:InitiatedPromptExecutionMeta"
                    }
                  }
                },
                {
                  "key": "execution_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:InitiatedPromptExecutionMeta": {
            "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
            "name": "InitiatedPromptExecutionMeta",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "model_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "latency",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "deployment_release_tag",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "prompt_version_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:InitiatedWorkflowNodeResultEvent": {
            "description": "An event that indicates that the node has initiated its execution.",
            "name": "InitiatedWorkflowNodeResultEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "node_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "node_result_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "ts",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowNodeResultData"
                    }
                  }
                },
                {
                  "key": "source_execution_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "input_values",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:NodeInputVariableCompiledValue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:InstructorVectorizerConfig": {
            "description": "Configuration for using an Instructor vectorizer.",
            "name": "InstructorVectorizerConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "instruction_domain",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "instruction_query_text_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "instruction_document_text_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:InstructorVectorizerConfigRequest": {
            "description": "Configuration for using an Instructor vectorizer.",
            "name": "InstructorVectorizerConfigRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "instruction_domain",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "instruction_query_text_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "key": "instruction_document_text_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:IterationStateEnum": {
            "description": "- `INITIATED` - INITIATED\n- `FULFILLED` - FULFILLED\n- `REJECTED` - REJECTED",
            "name": "IterationStateEnum",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "INITIATED"
                },
                {
                  "value": "FULFILLED"
                },
                {
                  "value": "REJECTED"
                }
              ]
            }
          },
          "type_:JsonInputRequest": {
            "description": "A user input representing a JSON object",
            "name": "JsonInputRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's name",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          },
          "type_:JsonVariableValue": {
            "name": "JsonVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          },
          "type_:JsonVellumValue": {
            "description": "A value representing a JSON object.",
            "name": "JsonVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          },
          "type_:JsonVellumValueRequest": {
            "description": "A value representing a JSON object.",
            "name": "JsonVellumValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          },
          "type_:LogicalOperator": {
            "description": "- `=` - EQUALS\n- `!=` - DOES_NOT_EQUAL\n- `<` - LESS_THAN\n- `>` - GREATER_THAN\n- `<=` - LESS_THAN_OR_EQUAL_TO\n- `>=` - GREATER_THAN_OR_EQUAL_TO\n- `contains` - CONTAINS\n- `beginsWith` - BEGINS_WITH\n- `endsWith` - ENDS_WITH\n- `doesNotContain` - DOES_NOT_CONTAIN\n- `doesNotBeginWith` - DOES_NOT_BEGIN_WITH\n- `doesNotEndWith` - DOES_NOT_END_WITH\n- `null` - NULL\n- `notNull` - NOT_NULL\n- `in` - IN\n- `notIn` - NOT_IN\n- `between` - BETWEEN\n- `notBetween` - NOT_BETWEEN\n- `blank` - BLANK\n- `notBlank` - NOT_BLANK",
            "name": "LogicalOperator",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "description": "Equals",
                  "value": "="
                },
                {
                  "description": "Does not equal",
                  "value": "!="
                },
                {
                  "description": "Less than",
                  "value": "<"
                },
                {
                  "description": "Greater than",
                  "value": ">"
                },
                {
                  "description": "Less than or equal to",
                  "value": "<="
                },
                {
                  "description": "Greater than or equal to",
                  "value": ">="
                },
                {
                  "description": "Contains",
                  "value": "contains"
                },
                {
                  "description": "Begins with",
                  "value": "beginsWith"
                },
                {
                  "description": "Ends with",
                  "value": "endsWith"
                },
                {
                  "description": "Does not contain",
                  "value": "doesNotContain"
                },
                {
                  "description": "Does not begin with",
                  "value": "doesNotBeginWith"
                },
                {
                  "description": "Does not end with",
                  "value": "doesNotEndWith"
                },
                {
                  "description": "Null",
                  "value": "null"
                },
                {
                  "description": "Not null",
                  "value": "notNull"
                },
                {
                  "description": "In",
                  "value": "in"
                },
                {
                  "description": "Not in",
                  "value": "notIn"
                },
                {
                  "description": "Between",
                  "value": "between"
                },
                {
                  "description": "Not between",
                  "value": "notBetween"
                },
                {
                  "value": "blank"
                },
                {
                  "value": "notBlank"
                }
              ]
            }
          },
          "type_:MlModelUsage": {
            "name": "MlModelUsage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "output_token_count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "input_token_count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "input_char_count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "output_char_count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "compute_nanos",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "cache_creation_input_tokens",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "cache_read_input_tokens",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:MapNodeResult": {
            "description": "A Node Result Event emitted from a Map Node.",
            "name": "MapNodeResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:MapNodeResultData"
                    }
                  }
                }
              ]
            }
          },
          "type_:MapNodeResultData": {
            "name": "MapNodeResultData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "execution_ids",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "iteration_state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:IterationStateEnum"
                    }
                  }
                }
              ]
            }
          },
          "type_:MergeNodeResult": {
            "description": "A Node Result Event emitted from a Merge Node.",
            "name": "MergeNodeResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:MergeNodeResultData"
                  }
                }
              ]
            }
          },
          "type_:MergeNodeResultData": {
            "name": "MergeNodeResultData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "paused_node_data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:MetadataFilterConfigRequest": {
            "description": "A deprecated pattern for filtering on metadata. Please use MetadataFilters instead.",
            "name": "MetadataFilterConfigRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "combinator",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:MetadataFilterRuleCombinator"
                    }
                  }
                },
                {
                  "key": "negated",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "rules",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:MetadataFilterRuleRequest"
                      }
                    }
                  }
                },
                {
                  "key": "field",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                },
                {
                  "key": "operator",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:LogicalOperator"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:MetadataFilterRuleCombinator": {
            "description": "- `and` - AND\n- `or` - OR",
            "name": "MetadataFilterRuleCombinator",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "and"
                },
                {
                  "value": "or"
                }
              ]
            }
          },
          "type_:MetadataFilterRuleRequest": {
            "name": "MetadataFilterRuleRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "combinator",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:MetadataFilterRuleCombinator"
                    }
                  }
                },
                {
                  "key": "negated",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "rules",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:MetadataFilterRuleRequest"
                      }
                    }
                  }
                },
                {
                  "key": "field",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                },
                {
                  "key": "operator",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:LogicalOperator"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:MetadataFiltersRequest": {
            "name": "MetadataFiltersRequest",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:MetadataFilterConfigRequest"
                  },
                  "displayName": "Metadata Filter Config Request"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:VellumValueLogicalExpressionRequest"
                  },
                  "displayName": "Vellum Value Logical Expression Request"
                }
              ]
            }
          },
          "type_:MetricNodeResult": {
            "description": "A Node Result Event emitted from a Metric Node.",
            "name": "MetricNodeResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_:NamedScenarioInputChatHistoryVariableValueRequest": {
            "description": "Named Prompt Sandbox Scenario input value that is of type CHAT_HISTORY",
            "name": "NamedScenarioInputChatHistoryVariableValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessageRequest"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedScenarioInputJsonVariableValueRequest": {
            "description": "Named Prompt Sandbox Scenario input value that is of type JSON",
            "name": "NamedScenarioInputJsonVariableValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedScenarioInputRequest": {
            "name": "NamedScenarioInputRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:NamedScenarioInputStringVariableValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:NamedScenarioInputJsonVariableValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:NamedScenarioInputChatHistoryVariableValueRequest"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:NamedScenarioInputStringVariableValueRequest": {
            "description": "Named Prompt Sandbox Scenario input value that is of type STRING",
            "name": "NamedScenarioInputStringVariableValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseArrayVariableValue": {
            "description": "Named Test Case value that is of type ARRAY",
            "name": "NamedTestCaseArrayVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VellumValue"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseArrayVariableValueRequest": {
            "description": "Named Test Case value that is of type ARRAY",
            "name": "NamedTestCaseArrayVariableValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VellumValueRequest"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseChatHistoryVariableValue": {
            "description": "Named Test Case value that is of type CHAT_HISTORY",
            "name": "NamedTestCaseChatHistoryVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessage"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseChatHistoryVariableValueRequest": {
            "description": "Named Test Case value that is of type CHAT_HISTORY",
            "name": "NamedTestCaseChatHistoryVariableValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessageRequest"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseErrorVariableValue": {
            "description": "Named Test Case value that is of type ERROR",
            "name": "NamedTestCaseErrorVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumError"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseErrorVariableValueRequest": {
            "description": "Named Test Case value that is of type ERROR",
            "name": "NamedTestCaseErrorVariableValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumErrorRequest"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseFunctionCallVariableValue": {
            "description": "Named Test Case value that is of type FUNCTION_CALL",
            "name": "NamedTestCaseFunctionCallVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCall"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseFunctionCallVariableValueRequest": {
            "description": "Named Test Case value that is of type FUNCTION_CALL",
            "name": "NamedTestCaseFunctionCallVariableValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCallRequest"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseJsonVariableValue": {
            "description": "Named Test Case value that is of type JSON",
            "name": "NamedTestCaseJsonVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseJsonVariableValueRequest": {
            "description": "Named Test Case value that is of type JSON",
            "name": "NamedTestCaseJsonVariableValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseNumberVariableValue": {
            "description": "Named Test Case value that is of type NUMBER",
            "name": "NamedTestCaseNumberVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseNumberVariableValueRequest": {
            "description": "Named Test Case value that is of type NUMBER",
            "name": "NamedTestCaseNumberVariableValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseSearchResultsVariableValue": {
            "description": "Named Test Case value that is of type SEARCH_RESULTS",
            "name": "NamedTestCaseSearchResultsVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResult"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseSearchResultsVariableValueRequest": {
            "description": "Named Test Case value that is of type SEARCH_RESULTS",
            "name": "NamedTestCaseSearchResultsVariableValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResultRequest"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseStringVariableValue": {
            "description": "Named Test Case value that is of type STRING",
            "name": "NamedTestCaseStringVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseStringVariableValueRequest": {
            "description": "Named Test Case value that is of type STRING",
            "name": "NamedTestCaseStringVariableValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseVariableValue": {
            "name": "NamedTestCaseVariableValue",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseStringVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseNumberVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseJsonVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseChatHistoryVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseSearchResultsVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseErrorVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseFunctionCallVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseArrayVariableValue"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:NamedTestCaseVariableValueRequest": {
            "name": "NamedTestCaseVariableValueRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseStringVariableValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseNumberVariableValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseJsonVariableValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseChatHistoryVariableValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseSearchResultsVariableValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseErrorVariableValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseFunctionCallVariableValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:NamedTestCaseArrayVariableValueRequest"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:NodeInputCompiledArrayValue": {
            "name": "NodeInputCompiledArrayValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "node_input_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VellumValue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeInputCompiledChatHistoryValue": {
            "name": "NodeInputCompiledChatHistoryValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "node_input_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessage"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeInputCompiledErrorValue": {
            "name": "NodeInputCompiledErrorValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "node_input_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumError"
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeInputCompiledFunctionCallValue": {
            "name": "NodeInputCompiledFunctionCallValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "node_input_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCall"
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeInputCompiledJsonValue": {
            "name": "NodeInputCompiledJsonValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "node_input_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          },
          "type_:NodeInputCompiledNumberValue": {
            "name": "NodeInputCompiledNumberValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "node_input_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeInputCompiledSearchResultsValue": {
            "name": "NodeInputCompiledSearchResultsValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "node_input_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResult"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeInputCompiledStringValue": {
            "name": "NodeInputCompiledStringValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "node_input_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeInputVariableCompiledValue": {
            "name": "NodeInputVariableCompiledValue",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:NodeInputCompiledStringValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:NodeInputCompiledNumberValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:NodeInputCompiledJsonValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:NodeInputCompiledChatHistoryValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:NodeInputCompiledSearchResultsValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:NodeInputCompiledErrorValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:NodeInputCompiledArrayValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:NodeInputCompiledFunctionCallValue"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:NodeOutputCompiledArrayValue": {
            "description": "An output returned by a node that is of type ARRAY.",
            "name": "NodeOutputCompiledArrayValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VellumValue"
                      }
                    }
                  }
                },
                {
                  "key": "node_output_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeOutputCompiledChatHistoryValue": {
            "description": "An output returned by a node that is of type CHAT_HISTORY.",
            "name": "NodeOutputCompiledChatHistoryValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessage"
                      }
                    }
                  }
                },
                {
                  "key": "node_output_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeOutputCompiledErrorValue": {
            "description": "An output returned by a node that is of type ERROR.",
            "name": "NodeOutputCompiledErrorValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumError"
                    }
                  }
                },
                {
                  "key": "node_output_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeOutputCompiledFunctionCallValue": {
            "description": "An output returned by a node that is of type FUNCTION_CALL.",
            "name": "NodeOutputCompiledFunctionCallValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCall"
                    }
                  }
                },
                {
                  "key": "node_output_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeOutputCompiledJsonValue": {
            "description": "An output returned by a node that is of type JSON.",
            "name": "NodeOutputCompiledJsonValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                },
                {
                  "key": "node_output_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeOutputCompiledNumberValue": {
            "description": "An output returned by a node that is of type NUMBER.",
            "name": "NodeOutputCompiledNumberValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "node_output_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeOutputCompiledSearchResultsValue": {
            "description": "An output returned by a node that is of type SEARCH_RESULTS.",
            "name": "NodeOutputCompiledSearchResultsValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResult"
                      }
                    }
                  }
                },
                {
                  "key": "node_output_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeOutputCompiledStringValue": {
            "description": "An output returned by a node that is of type STRING.",
            "name": "NodeOutputCompiledStringValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "node_output_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              ]
            }
          },
          "type_:NodeOutputCompiledValue": {
            "name": "NodeOutputCompiledValue",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:NodeOutputCompiledStringValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:NodeOutputCompiledNumberValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:NodeOutputCompiledJsonValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:NodeOutputCompiledChatHistoryValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:NodeOutputCompiledSearchResultsValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:NodeOutputCompiledErrorValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:NodeOutputCompiledArrayValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:NodeOutputCompiledFunctionCallValue"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:NumberVariableValue": {
            "name": "NumberVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:NumberVellumValue": {
            "description": "A value representing a number.",
            "name": "NumberVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:NumberVellumValueRequest": {
            "description": "A value representing a number.",
            "name": "NumberVellumValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:OpenAiVectorizerConfig": {
            "description": "Configuration for using an OpenAI vectorizer.",
            "name": "OpenAiVectorizerConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "add_openai_api_key",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AddOpenaiApiKeyEnum"
                    }
                  }
                }
              ]
            }
          },
          "type_:OpenAiVectorizerConfigRequest": {
            "description": "Configuration for using an OpenAI vectorizer.",
            "name": "OpenAiVectorizerConfigRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "add_openai_api_key",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AddOpenaiApiKeyEnum"
                    }
                  }
                }
              ]
            }
          },
          "type_:OpenAiVectorizerTextEmbedding3Large": {
            "description": "OpenAI vectorizer for text-embedding-3-large.",
            "name": "OpenAiVectorizerTextEmbedding3Large",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:OpenAiVectorizerConfig"
                  }
                }
              ]
            }
          },
          "type_:OpenAiVectorizerTextEmbedding3LargeRequest": {
            "description": "OpenAI vectorizer for text-embedding-3-large.",
            "name": "OpenAiVectorizerTextEmbedding3LargeRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:OpenAiVectorizerConfigRequest"
                  }
                }
              ]
            }
          },
          "type_:OpenAiVectorizerTextEmbedding3Small": {
            "description": "OpenAI vectorizer for text-embedding-3-small.",
            "name": "OpenAiVectorizerTextEmbedding3Small",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:OpenAiVectorizerConfig"
                  }
                }
              ]
            }
          },
          "type_:OpenAiVectorizerTextEmbedding3SmallRequest": {
            "description": "OpenAI vectorizer for text-embedding-3-small.",
            "name": "OpenAiVectorizerTextEmbedding3SmallRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:OpenAiVectorizerConfigRequest"
                  }
                }
              ]
            }
          },
          "type_:OpenAiVectorizerTextEmbeddingAda002": {
            "description": "OpenAI vectorizer for text-embedding-ada-002.",
            "name": "OpenAiVectorizerTextEmbeddingAda002",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:OpenAiVectorizerConfig"
                  }
                }
              ]
            }
          },
          "type_:OpenAiVectorizerTextEmbeddingAda002Request": {
            "description": "OpenAI vectorizer for text-embedding-ada-002.",
            "name": "OpenAiVectorizerTextEmbeddingAda002Request",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:OpenAiVectorizerConfigRequest"
                  }
                }
              ]
            }
          },
          "type_:PaginatedDocumentIndexReadList": {
            "name": "PaginatedDocumentIndexReadList",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "next",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "previous",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DocumentIndexRead"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PaginatedFolderEntityList": {
            "name": "PaginatedFolderEntityList",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "next",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "previous",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FolderEntity"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PaginatedSlimDeploymentReadList": {
            "name": "PaginatedSlimDeploymentReadList",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "next",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "previous",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SlimDeploymentRead"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PaginatedSlimDocumentList": {
            "name": "PaginatedSlimDocumentList",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "next",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "previous",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SlimDocument"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PaginatedSlimWorkflowDeploymentList": {
            "name": "PaginatedSlimWorkflowDeploymentList",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "next",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "previous",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SlimWorkflowDeployment"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PaginatedTestSuiteRunExecutionList": {
            "name": "PaginatedTestSuiteRunExecutionList",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "count",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "next",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "previous",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TestSuiteRunExecution"
                    }
                  }
                }
              ]
            }
          },
          "type_:PaginatedTestSuiteTestCaseList": {
            "name": "PaginatedTestSuiteTestCaseList",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "count",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "next",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "previous",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TestSuiteTestCase"
                    }
                  }
                }
              ]
            }
          },
          "type_:PdfSearchResultMetaSource": {
            "description": "The source of a search result from a PDF document.",
            "name": "PdfSearchResultMetaSource",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The 1-indexed page number where the chunk starts in the document. Only available for supported chunking strategies and document types.",
                  "key": "start_page_num",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The 1-indexed page number where the chunk ends in the document. Only available for supported chunking strategies and document types.",
                  "key": "end_page_num",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PdfSearchResultMetaSourceRequest": {
            "description": "The source of a search result from a PDF document.",
            "name": "PdfSearchResultMetaSourceRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The 1-indexed page number where the chunk starts in the document. Only available for supported chunking strategies and document types.",
                  "key": "start_page_num",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The 1-indexed page number where the chunk ends in the document. Only available for supported chunking strategies and document types.",
                  "key": "end_page_num",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Price": {
            "name": "Price",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "unit",
                  "valueType": {
                    "type": "id",
                    "value": "type_:UnitEnum"
                  }
                }
              ]
            }
          },
          "type_:ProcessingFailureReasonEnum": {
            "description": "- `EXCEEDED_CHARACTER_LIMIT` - Exceeded Character Limit\n- `INVALID_FILE` - Invalid File",
            "name": "ProcessingFailureReasonEnum",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "EXCEEDED_CHARACTER_LIMIT"
                },
                {
                  "value": "INVALID_FILE"
                }
              ]
            }
          },
          "type_:ProcessingStateEnum": {
            "description": "- `QUEUED` - Queued\n- `PROCESSING` - Processing\n- `PROCESSED` - Processed\n- `FAILED` - Failed",
            "name": "ProcessingStateEnum",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "QUEUED"
                },
                {
                  "value": "PROCESSING"
                },
                {
                  "value": "PROCESSED"
                },
                {
                  "value": "FAILED"
                }
              ]
            }
          },
          "type_:PromptDeploymentExpandMetaRequest": {
            "name": "PromptDeploymentExpandMetaRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "If enabled, the response will include the model identifier representing the ML Model invoked by the Prompt.",
                  "key": "model_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "If enabled, the response will include model host usage tracking. This may increase latency for some model hosts.",
                  "key": "usage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "If enabled, the response will include model host cost tracking. This may increase latency for some model hosts.",
                  "key": "cost",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "If enabled, the response will include the reason provided by the model for why the execution finished.",
                  "key": "finish_reason",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "If enabled, the response will include the time in nanoseconds it took to execute the Prompt Deployment.",
                  "key": "latency",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "If enabled, the response will include the release tag of the Prompt Deployment.",
                  "key": "deployment_release_tag",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "If enabled, the response will include the ID of the Prompt Version backing the deployment.",
                  "key": "prompt_version_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PromptDeploymentInputRequest": {
            "name": "PromptDeploymentInputRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:StringInputRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:JsonInputRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:ChatHistoryInputRequest"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:PromptExecutionMeta": {
            "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
            "name": "PromptExecutionMeta",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "model_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "latency",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "deployment_release_tag",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "prompt_version_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "finish_reason",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FinishReasonEnum"
                    }
                  }
                },
                {
                  "key": "usage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:MlModelUsage"
                    }
                  }
                },
                {
                  "key": "cost",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Price"
                    }
                  }
                }
              ]
            }
          },
          "type_:PromptNodeExecutionMeta": {
            "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
            "name": "PromptNodeExecutionMeta",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "usage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:MlModelUsage"
                    }
                  }
                }
              ]
            }
          },
          "type_:PromptNodeResult": {
            "description": "A Node Result Event emitted from a Prompt Node.",
            "name": "PromptNodeResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PromptNodeResultData"
                  }
                }
              ]
            }
          },
          "type_:PromptNodeResultData": {
            "name": "PromptNodeResultData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "execution_meta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PromptNodeExecutionMeta"
                    }
                  }
                },
                {
                  "key": "output_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "array_output_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "execution_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "delta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PromptOutput": {
            "name": "PromptOutput",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:StringVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:JsonVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:ErrorVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:FunctionCallVellumValue"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:RawPromptExecutionOverridesRequest": {
            "name": "RawPromptExecutionOverridesRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "body",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The raw headers to send to the model host.",
                  "key": "headers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The raw URL to send to the model host.",
                  "key": "url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ReductoChunkerConfig": {
            "description": "Configuration for Reducto chunking",
            "name": "ReductoChunkerConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "character_limit",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "default": 1000
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ReductoChunkerConfigRequest": {
            "description": "Configuration for Reducto chunking",
            "name": "ReductoChunkerConfigRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "character_limit",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "default": 1000
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ReductoChunking": {
            "description": "Reducto chunking",
            "name": "ReductoChunking",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "chunker_config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReductoChunkerConfig"
                    }
                  }
                }
              ]
            }
          },
          "type_:ReductoChunkingRequest": {
            "description": "Reducto chunking",
            "name": "ReductoChunkingRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "chunker_config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ReductoChunkerConfigRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:RejectedExecutePromptEvent": {
            "description": "The final data returned indicating an error occurred during the stream.",
            "name": "RejectedExecutePromptEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "error",
                  "valueType": {
                    "type": "id",
                    "value": "type_:VellumError"
                  }
                },
                {
                  "key": "execution_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "meta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:RejectedPromptExecutionMeta"
                    }
                  }
                }
              ]
            }
          },
          "type_:RejectedExecutePromptResponse": {
            "description": "The unsuccessful response from the model containing an error of what went wrong.",
            "name": "RejectedExecutePromptResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "meta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PromptExecutionMeta"
                    }
                  }
                },
                {
                  "description": "The subset of the raw response from the model that the request opted into with `expand_raw`.",
                  "key": "raw",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The ID of the execution.",
                  "key": "execution_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "error",
                  "valueType": {
                    "type": "id",
                    "value": "type_:VellumError"
                  }
                }
              ]
            }
          },
          "type_:RejectedExecuteWorkflowWorkflowResultEvent": {
            "description": "The unsuccessful response from the Workflow execution containing an error specifying what went wrong.",
            "name": "RejectedExecuteWorkflowWorkflowResultEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "ts",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "error",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowEventError"
                  }
                }
              ]
            }
          },
          "type_:RejectedPromptExecutionMeta": {
            "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
            "name": "RejectedPromptExecutionMeta",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "latency",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "finish_reason",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FinishReasonEnum"
                    }
                  }
                }
              ]
            }
          },
          "type_:RejectedWorkflowNodeResultEvent": {
            "description": "An event that indicates that the node has rejected its execution.",
            "name": "RejectedWorkflowNodeResultEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "node_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "node_result_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "ts",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowNodeResultData"
                    }
                  }
                },
                {
                  "key": "source_execution_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "error",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowEventError"
                  }
                }
              ]
            }
          },
          "type_:ReleaseTagSource": {
            "description": "- `SYSTEM` - System\n- `USER` - User",
            "name": "ReleaseTagSource",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "SYSTEM"
                },
                {
                  "value": "USER"
                }
              ]
            }
          },
          "type_:ReplaceTestSuiteTestCaseRequest": {
            "description": "Information about the Test Case to replace",
            "name": "ReplaceTestSuiteTestCaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The Vellum-generated ID of the Test Case whose data you'd like to replace. Must specify either this or external_id.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The ID that was originally provided upon Test Case creation that uniquely identifies the Test Case whose data you'd like to replace. Must specify either this of id.",
                  "key": "external_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable label used to convey the intention of this Test Case",
                  "key": "label",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Values for each of the Test Case's input variables",
                  "key": "input_values",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NamedTestCaseVariableValueRequest"
                    }
                  }
                },
                {
                  "description": "Values for each of the Test Case's evaluation variables",
                  "key": "evaluation_values",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NamedTestCaseVariableValueRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:SandboxScenario": {
            "description": "Sandbox Scenario",
            "name": "SandboxScenario",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "label",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "Untitled Scenario"
                      }
                    }
                  }
                },
                {
                  "description": "The inputs for the scenario",
                  "key": "inputs",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ScenarioInput"
                    }
                  }
                },
                {
                  "description": "The id of the scenario",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ScenarioInput": {
            "name": "ScenarioInput",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:ScenarioInputStringVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:ScenarioInputJsonVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:ScenarioInputChatHistoryVariableValue"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:ScenarioInputChatHistoryVariableValue": {
            "description": "Prompt Sandbox Scenario input value that is of type CHAT_HISTORY",
            "name": "ScenarioInputChatHistoryVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessage"
                      }
                    }
                  }
                },
                {
                  "key": "input_variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ScenarioInputJsonVariableValue": {
            "description": "Prompt Sandbox Scenario input value that is of type JSON",
            "name": "ScenarioInputJsonVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                },
                {
                  "key": "input_variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ScenarioInputStringVariableValue": {
            "description": "Prompt Sandbox Scenario input value that is of type STRING",
            "name": "ScenarioInputStringVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "input_variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchErrorResponse": {
            "name": "SearchErrorResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Details about why the request failed.",
                  "key": "detail",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchFiltersRequest": {
            "name": "SearchFiltersRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The document external IDs to filter by",
                  "key": "external_ids",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The metadata filters to apply to the search",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:MetadataFiltersRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchNodeResult": {
            "description": "A Node Result Event emitted from a Search Node.",
            "name": "SearchNodeResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:SearchNodeResultData"
                  }
                }
              ]
            }
          },
          "type_:SearchNodeResultData": {
            "name": "SearchNodeResultData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "results_output_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The results of the search. Each result represents a chunk that matches the search query.",
                  "key": "results",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SearchResult"
                    }
                  }
                },
                {
                  "key": "text_output_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchRequestOptionsRequest": {
            "name": "SearchRequestOptionsRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The maximum number of results to return.",
                  "key": "limit",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 10
                      }
                    }
                  }
                },
                {
                  "description": "The weights to use for the search. Must add up to 1.0.",
                  "key": "weights",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SearchWeightsRequest"
                    }
                  }
                },
                {
                  "description": "The configuration for merging results.",
                  "key": "result_merging",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SearchResultMergingRequest"
                    }
                  }
                },
                {
                  "description": "The filters to apply to the search.",
                  "key": "filters",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SearchFiltersRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchResponse": {
            "name": "SearchResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The results of the search. Each result represents a chunk that matches the search query.",
                  "key": "results",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SearchResult"
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchResult": {
            "name": "SearchResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The text of the chunk that matched the search query.",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A score representing how well the chunk matches the search query.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "keywords",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The document that contains the chunk that matched the search query.",
                  "key": "document",
                  "valueType": {
                    "type": "id",
                    "value": "type_:SearchResultDocument"
                  }
                },
                {
                  "description": "Additional information about the search result.",
                  "key": "meta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SearchResultMeta"
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchResultDocument": {
            "name": "SearchResultDocument",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the document.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The human-readable name for the document.",
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique ID of the document as represented in an external system and specified when it was originally uploaded.",
                  "key": "external_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A previously supplied JSON object containing metadata that can be filtered on when searching.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchResultDocumentRequest": {
            "name": "SearchResultDocumentRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the document.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The human-readable name for the document.",
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "description": "The unique ID of the document as represented in an external system and specified when it was originally uploaded.",
                  "key": "external_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                },
                {
                  "description": "A previously supplied JSON object containing metadata that can be filtered on when searching.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchResultMergingRequest": {
            "name": "SearchResultMergingRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether to enable merging results",
                  "key": "enabled",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchResultMeta": {
            "name": "SearchResultMeta",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SearchResultMetaSource"
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchResultMetaRequest": {
            "name": "SearchResultMetaRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SearchResultMetaSourceRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchResultMetaSource": {
            "name": "SearchResultMetaSource",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "document_type",
              "variants": [
                {
                  "discriminantValue": "PDF",
                  "additionalProperties": {
                    "extends": ["type_:PdfSearchResultMetaSource"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:SearchResultMetaSourceRequest": {
            "name": "SearchResultMetaSourceRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "document_type",
              "variants": [
                {
                  "discriminantValue": "PDF",
                  "additionalProperties": {
                    "extends": ["type_:PdfSearchResultMetaSourceRequest"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:SearchResultRequest": {
            "name": "SearchResultRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The text of the chunk that matched the search query.",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A score representing how well the chunk matches the search query.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "keywords",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The document that contains the chunk that matched the search query.",
                  "key": "document",
                  "valueType": {
                    "type": "id",
                    "value": "type_:SearchResultDocumentRequest"
                  }
                },
                {
                  "description": "Additional information about the search result.",
                  "key": "meta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SearchResultMetaRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchResultsVariableValue": {
            "name": "SearchResultsVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResult"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchResultsVellumValue": {
            "description": "A value representing Search Results.",
            "name": "SearchResultsVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResult"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchResultsVellumValueRequest": {
            "description": "A value representing Search Results.",
            "name": "SearchResultsVellumValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResultRequest"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SearchWeightsRequest": {
            "name": "SearchWeightsRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The relative weight to give to semantic similarity",
                  "key": "semantic_similarity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.8
                      }
                    }
                  }
                },
                {
                  "description": "The relative weight to give to keywords",
                  "key": "keywords",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.2
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SecretTypeEnum": {
            "description": "- `USER_DEFINED` - User Defined\n- `HMAC` - Hmac\n- `INTERNAL_API_KEY` - Internal Api Key",
            "name": "SecretTypeEnum",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "USER_DEFINED"
                },
                {
                  "value": "HMAC"
                },
                {
                  "value": "INTERNAL_API_KEY"
                }
              ]
            }
          },
          "type_:SentenceChunkerConfig": {
            "description": "Configuration for sentence chunking",
            "name": "SentenceChunkerConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "character_limit",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "default": 1000
                      }
                    }
                  }
                },
                {
                  "key": "min_overlap_ratio",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SentenceChunkerConfigRequest": {
            "description": "Configuration for sentence chunking",
            "name": "SentenceChunkerConfigRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "character_limit",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "default": 1000
                      }
                    }
                  }
                },
                {
                  "key": "min_overlap_ratio",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SentenceChunking": {
            "description": "Sentence chunking",
            "name": "SentenceChunking",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "chunker_config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SentenceChunkerConfig"
                    }
                  }
                }
              ]
            }
          },
          "type_:SentenceChunkingRequest": {
            "description": "Sentence chunking",
            "name": "SentenceChunkingRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "chunker_config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SentenceChunkerConfigRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:SlimDeploymentRead": {
            "name": "SlimDeploymentRead",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "A human-readable label for the deployment",
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A name that uniquely identifies this deployment within its workspace",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The current status of the deployment\n\n- `ACTIVE` - Active\n- `ARCHIVED` - Archived",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EntityStatus"
                    }
                  }
                },
                {
                  "description": "The environment this deployment is used in\n\n- `DEVELOPMENT` - Development\n- `STAGING` - Staging\n- `PRODUCTION` - Production",
                  "key": "environment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EnvironmentEnum"
                    }
                  }
                },
                {
                  "key": "last_deployed_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "input_variables",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumVariable"
                    }
                  }
                },
                {
                  "description": "A human-readable description of the deployment",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SlimDocument": {
            "name": "SlimDocument",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Vellum-generated ID that uniquely identifies this document.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The external ID that was originally provided when uploading the document.",
                  "key": "external_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A timestamp representing when this document was most recently uploaded.",
                  "key": "last_uploaded_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "Human-friendly name for this document.",
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "An enum value representing where this document is along its processing lifecycle. Note that this is different than its indexing lifecycle.\n\n- `QUEUED` - Queued\n- `PROCESSING` - Processing\n- `PROCESSED` - Processed\n- `FAILED` - Failed",
                  "key": "processing_state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProcessingStateEnum"
                    }
                  }
                },
                {
                  "description": "An enum value representing why the document could not be processed. Is null unless processing_state is FAILED.\n\n- `EXCEEDED_CHARACTER_LIMIT` - Exceeded Character Limit\n- `INVALID_FILE` - Invalid File",
                  "key": "processing_failure_reason",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProcessingFailureReasonEnum"
                    }
                  }
                },
                {
                  "description": "The document's current status.\n\n- `ACTIVE` - Active",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DocumentStatus"
                    }
                  }
                },
                {
                  "description": "A list of keywords associated with this document. Originally provided when uploading the document.",
                  "key": "keywords",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "A previously supplied JSON object containing metadata that can be filtered on when searching.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "document_to_document_indexes",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DocumentDocumentToDocumentIndex"
                    }
                  }
                }
              ]
            }
          },
          "type_:SlimWorkflowDeployment": {
            "name": "SlimWorkflowDeployment",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A name that uniquely identifies this workflow deployment within its workspace",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A human-readable label for the workflow deployment",
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The current status of the workflow deployment\n\n- `ACTIVE` - Active\n- `ARCHIVED` - Archived",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EntityStatus"
                    }
                  }
                },
                {
                  "description": "The environment this workflow deployment is used in\n\n- `DEVELOPMENT` - Development\n- `STAGING` - Staging\n- `PRODUCTION` - Production",
                  "key": "environment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EnvironmentEnum"
                    }
                  }
                },
                {
                  "key": "created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "last_deployed_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "The input variables this Workflow Deployment expects to receive values for when it is executed.",
                  "key": "input_variables",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumVariable"
                    }
                  }
                },
                {
                  "description": "The output variables this Workflow Deployment will produce when it is executed.",
                  "key": "output_variables",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumVariable"
                    }
                  }
                },
                {
                  "description": "A human-readable description of the workflow deployment",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:StreamingExecutePromptEvent": {
            "description": "The data returned for each delta during the prompt execution stream.",
            "name": "StreamingExecutePromptEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "output",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PromptOutput"
                  }
                },
                {
                  "key": "output_index",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "execution_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "meta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:StreamingPromptExecutionMeta"
                    }
                  }
                },
                {
                  "description": "The subset of the raw response from the model that the request opted into with `expand_raw`.",
                  "key": "raw",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:StreamingPromptExecutionMeta": {
            "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
            "name": "StreamingPromptExecutionMeta",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "latency",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:StreamingWorkflowNodeResultEvent": {
            "description": "An event that indicates that the node has execution is in progress.",
            "name": "StreamingWorkflowNodeResultEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "node_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "node_result_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "ts",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowNodeResultData"
                    }
                  }
                },
                {
                  "key": "source_execution_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "output",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NodeOutputCompiledValue"
                    }
                  }
                },
                {
                  "key": "output_index",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:StringChatMessageContent": {
            "description": "A string value that is used in a chat message.",
            "name": "StringChatMessageContent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:StringChatMessageContentRequest": {
            "description": "A string value that is used in a chat message.",
            "name": "StringChatMessageContentRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:StringInputRequest": {
            "description": "A user input representing a string value",
            "name": "StringInputRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's name",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:StringVariableValue": {
            "name": "StringVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:StringVellumValue": {
            "description": "A value representing a string.",
            "name": "StringVellumValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:StringVellumValueRequest": {
            "description": "A value representing a string.",
            "name": "StringVellumValueRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SubmitCompletionActualRequest": {
            "name": "SubmitCompletionActualRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The Vellum-generated ID of a previously generated completion. Must provide either this or external_id.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                },
                {
                  "description": "The external ID that was originally provided when generating the completion that you'd now like to submit actuals for. Must provide either this or id.",
                  "key": "external_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                },
                {
                  "description": "Text representing what the completion _should_ have been.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A number between 0 and 1 representing the quality of the completion. 0 is the worst, 1 is the best.",
                  "key": "quality",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                {
                  "description": "Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.",
                  "key": "timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "Optionally provide additional metadata about the feedback submission.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SubmitCompletionActualsErrorResponse": {
            "name": "SubmitCompletionActualsErrorResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:SubmitWorkflowExecutionActualRequest": {
            "name": "SubmitWorkflowExecutionActualRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "output_type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowExecutionActualStringRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowExecutionActualJsonRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowExecutionActualChatHistoryRequest"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:SubworkflowNodeResult": {
            "description": "A Node Result Event emitted from a Subworkflow Node.",
            "name": "SubworkflowNodeResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SubworkflowNodeResultData"
                    }
                  }
                }
              ]
            }
          },
          "type_:SubworkflowNodeResultData": {
            "name": "SubworkflowNodeResultData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "execution_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TemplatingNodeArrayResult": {
            "name": "TemplatingNodeArrayResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VellumValue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TemplatingNodeChatHistoryResult": {
            "name": "TemplatingNodeChatHistoryResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessage"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TemplatingNodeErrorResult": {
            "name": "TemplatingNodeErrorResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumError"
                    }
                  }
                }
              ]
            }
          },
          "type_:TemplatingNodeFunctionCallResult": {
            "name": "TemplatingNodeFunctionCallResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCall"
                    }
                  }
                }
              ]
            }
          },
          "type_:TemplatingNodeJsonResult": {
            "name": "TemplatingNodeJsonResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          },
          "type_:TemplatingNodeNumberResult": {
            "name": "TemplatingNodeNumberResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TemplatingNodeResult": {
            "description": "A Node Result Event emitted from a Templating Node.",
            "name": "TemplatingNodeResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TemplatingNodeResultData"
                  }
                }
              ]
            }
          },
          "type_:TemplatingNodeResultData": {
            "name": "TemplatingNodeResultData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "output",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TemplatingNodeResultOutput"
                  }
                }
              ]
            }
          },
          "type_:TemplatingNodeResultOutput": {
            "name": "TemplatingNodeResultOutput",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:TemplatingNodeStringResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:TemplatingNodeNumberResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:TemplatingNodeJsonResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:TemplatingNodeChatHistoryResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:TemplatingNodeSearchResultsResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:TemplatingNodeErrorResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:TemplatingNodeArrayResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:TemplatingNodeFunctionCallResult"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:TemplatingNodeSearchResultsResult": {
            "name": "TemplatingNodeSearchResultsResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResult"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TemplatingNodeStringResult": {
            "name": "TemplatingNodeStringResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TerminalNodeArrayResult": {
            "name": "TerminalNodeArrayResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The unique name given to the terminal node that produced this output.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VellumValue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TerminalNodeChatHistoryResult": {
            "name": "TerminalNodeChatHistoryResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The unique name given to the terminal node that produced this output.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessage"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TerminalNodeErrorResult": {
            "name": "TerminalNodeErrorResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The unique name given to the terminal node that produced this output.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumError"
                    }
                  }
                }
              ]
            }
          },
          "type_:TerminalNodeFunctionCallResult": {
            "name": "TerminalNodeFunctionCallResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The unique name given to the terminal node that produced this output.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCall"
                    }
                  }
                }
              ]
            }
          },
          "type_:TerminalNodeJsonResult": {
            "name": "TerminalNodeJsonResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The unique name given to the terminal node that produced this output.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          },
          "type_:TerminalNodeNumberResult": {
            "name": "TerminalNodeNumberResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The unique name given to the terminal node that produced this output.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TerminalNodeResult": {
            "description": "A Node Result Event emitted from a Terminal Node.",
            "name": "TerminalNodeResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TerminalNodeResultData"
                  }
                }
              ]
            }
          },
          "type_:TerminalNodeResultData": {
            "name": "TerminalNodeResultData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "output",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TerminalNodeResultOutput"
                  }
                }
              ]
            }
          },
          "type_:TerminalNodeResultOutput": {
            "name": "TerminalNodeResultOutput",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:TerminalNodeStringResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:TerminalNodeNumberResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:TerminalNodeJsonResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:TerminalNodeChatHistoryResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:TerminalNodeSearchResultsResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:TerminalNodeErrorResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:TerminalNodeArrayResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:TerminalNodeFunctionCallResult"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:TerminalNodeSearchResultsResult": {
            "name": "TerminalNodeSearchResultsResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The unique name given to the terminal node that produced this output.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResult"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TerminalNodeStringResult": {
            "name": "TerminalNodeStringResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The unique name given to the terminal node that produced this output.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestCaseArrayVariableValue": {
            "description": "An Array value for a variable in a Test Case.",
            "name": "TestCaseArrayVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VellumValue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestCaseChatHistoryVariableValue": {
            "description": "A chat history value for a variable in a Test Case.",
            "name": "TestCaseChatHistoryVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessage"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestCaseErrorVariableValue": {
            "description": "An error value for a variable in a Test Case.",
            "name": "TestCaseErrorVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumError"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestCaseFunctionCallVariableValue": {
            "description": "A function call value for a variable in a Test Case.",
            "name": "TestCaseFunctionCallVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCall"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestCaseJsonVariableValue": {
            "description": "A JSON value for a variable in a Test Case.",
            "name": "TestCaseJsonVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          },
          "type_:TestCaseNumberVariableValue": {
            "description": "A numerical value for a variable in a Test Case.",
            "name": "TestCaseNumberVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestCaseSearchResultsVariableValue": {
            "description": "A search results value for a variable in a Test Case.",
            "name": "TestCaseSearchResultsVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResult"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestCaseStringVariableValue": {
            "description": "A string value for a variable in a Test Case.",
            "name": "TestCaseStringVariableValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestCaseVariableValue": {
            "name": "TestCaseVariableValue",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:TestCaseStringVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:TestCaseNumberVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:TestCaseJsonVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:TestCaseChatHistoryVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:TestCaseSearchResultsVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:TestCaseErrorVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:TestCaseFunctionCallVariableValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:TestCaseArrayVariableValue"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunDeploymentReleaseTagExecConfig": {
            "description": "Execution configuration for running a Test Suite against a Prompt Deployment",
            "name": "TestSuiteRunDeploymentReleaseTagExecConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TestSuiteRunDeploymentReleaseTagExecConfigData"
                  }
                },
                {
                  "description": "Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.",
                  "key": "test_case_ids",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunDeploymentReleaseTagExecConfigData": {
            "name": "TestSuiteRunDeploymentReleaseTagExecConfigData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the Prompt Deployment to run the Test Suite against.",
                  "key": "deployment_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A tag identifying which release of the Prompt Deployment to run the Test Suite against. Useful for testing past versions of the Prompt Deployment",
                  "key": "tag",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "LATEST"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunDeploymentReleaseTagExecConfigDataRequest": {
            "name": "TestSuiteRunDeploymentReleaseTagExecConfigDataRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the Prompt Deployment to run the Test Suite against.",
                  "key": "deployment_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A tag identifying which release of the Prompt Deployment to run the Test Suite against. Useful for testing past versions of the Prompt Deployment",
                  "key": "tag",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1,
                        "default": "LATEST"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunDeploymentReleaseTagExecConfigRequest": {
            "description": "Execution configuration for running a Test Suite against a Prompt Deployment",
            "name": "TestSuiteRunDeploymentReleaseTagExecConfigRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TestSuiteRunDeploymentReleaseTagExecConfigDataRequest"
                  }
                },
                {
                  "description": "Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.",
                  "key": "test_case_ids",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExecConfig": {
            "name": "TestSuiteRunExecConfig",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "DEPLOYMENT_RELEASE_TAG",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunDeploymentReleaseTagExecConfig"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "WORKFLOW_RELEASE_TAG",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunWorkflowReleaseTagExecConfig"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "EXTERNAL",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunExternalExecConfig"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExecConfigRequest": {
            "name": "TestSuiteRunExecConfigRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "DEPLOYMENT_RELEASE_TAG",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunDeploymentReleaseTagExecConfigRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "WORKFLOW_RELEASE_TAG",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunWorkflowReleaseTagExecConfigRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "EXTERNAL",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunExternalExecConfigRequest"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExecution": {
            "name": "TestSuiteRunExecution",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "test_case_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "outputs",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TestSuiteRunExecutionOutput"
                    }
                  }
                },
                {
                  "key": "metric_results",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TestSuiteRunExecutionMetricResult"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExecutionArrayOutput": {
            "description": "Execution output of an entity evaluated during a Test Suite Run that is of type ARRAY",
            "name": "TestSuiteRunExecutionArrayOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VellumValue"
                      }
                    }
                  }
                },
                {
                  "key": "output_variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExecutionChatHistoryOutput": {
            "description": "Execution output of an entity evaluated during a Test Suite Run that is of type CHAT_HISTORY",
            "name": "TestSuiteRunExecutionChatHistoryOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessage"
                      }
                    }
                  }
                },
                {
                  "key": "output_variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExecutionErrorOutput": {
            "description": "Execution output of an entity evaluated during a Test Suite Run that is of type ERROR",
            "name": "TestSuiteRunExecutionErrorOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumError"
                    }
                  }
                },
                {
                  "key": "output_variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExecutionFunctionCallOutput": {
            "description": "Execution output of an entity evaluated during a Test Suite Run that is of type FUNCTION_CALL",
            "name": "TestSuiteRunExecutionFunctionCallOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCall"
                    }
                  }
                },
                {
                  "key": "output_variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExecutionJsonOutput": {
            "description": "Execution output of an entity evaluated during a Test Suite Run that is of type JSON",
            "name": "TestSuiteRunExecutionJsonOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                },
                {
                  "key": "output_variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExecutionMetricDefinition": {
            "name": "TestSuiteRunExecutionMetricDefinition",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "label",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExecutionMetricResult": {
            "name": "TestSuiteRunExecutionMetricResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metric_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "outputs",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TestSuiteRunMetricOutput"
                    }
                  }
                },
                {
                  "key": "metric_label",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "metric_definition",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TestSuiteRunExecutionMetricDefinition"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExecutionNumberOutput": {
            "description": "Execution output of an entity evaluated during a Test Suite Run that is of type NUMBER",
            "name": "TestSuiteRunExecutionNumberOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "output_variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExecutionOutput": {
            "name": "TestSuiteRunExecutionOutput",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunExecutionStringOutput"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunExecutionNumberOutput"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunExecutionJsonOutput"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunExecutionChatHistoryOutput"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunExecutionSearchResultsOutput"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunExecutionErrorOutput"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunExecutionFunctionCallOutput"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunExecutionArrayOutput"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExecutionSearchResultsOutput": {
            "description": "Execution output of an entity evaluated during a Test Suite Run that is of type SEARCH_RESULTS",
            "name": "TestSuiteRunExecutionSearchResultsOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResult"
                      }
                    }
                  }
                },
                {
                  "key": "output_variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExecutionStringOutput": {
            "description": "Execution output of an entity evaluated during a Test Suite Run that is of type STRING",
            "name": "TestSuiteRunExecutionStringOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "output_variable_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExternalExecConfig": {
            "description": "Execution configuration for running a Vellum Test Suite against an external callable",
            "name": "TestSuiteRunExternalExecConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TestSuiteRunExternalExecConfigData"
                  }
                },
                {
                  "description": "Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.",
                  "key": "test_case_ids",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExternalExecConfigData": {
            "name": "TestSuiteRunExternalExecConfigData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The executions of some callable external to Vellum whose outputs you would like to evaluate.",
                  "key": "executions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ExternalTestCaseExecution"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExternalExecConfigDataRequest": {
            "name": "TestSuiteRunExternalExecConfigDataRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The executions of some callable external to Vellum whose outputs you would like to evaluate.",
                  "key": "executions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ExternalTestCaseExecutionRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunExternalExecConfigRequest": {
            "description": "Execution configuration for running a Vellum Test Suite against an external callable",
            "name": "TestSuiteRunExternalExecConfigRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TestSuiteRunExternalExecConfigDataRequest"
                  }
                },
                {
                  "description": "Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.",
                  "key": "test_case_ids",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunMetricErrorOutput": {
            "description": "Output for a test suite run metric that is of type ERROR",
            "name": "TestSuiteRunMetricErrorOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "id",
                    "value": "type_:VellumError"
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunMetricJsonOutput": {
            "description": "Output for a test suite run metric that is of type NUMBER",
            "name": "TestSuiteRunMetricJsonOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunMetricNumberOutput": {
            "description": "Output for a test suite run metric that is of type NUMBER",
            "name": "TestSuiteRunMetricNumberOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunMetricOutput": {
            "name": "TestSuiteRunMetricOutput",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunMetricStringOutput"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunMetricNumberOutput"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunMetricJsonOutput"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteRunMetricErrorOutput"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunMetricStringOutput": {
            "description": "Output for a test suite run metric that is of type STRING",
            "name": "TestSuiteRunMetricStringOutput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunRead": {
            "name": "TestSuiteRunRead",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "test_suite",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TestSuiteRunTestSuite"
                  }
                },
                {
                  "description": "The current state of this run\n\n- `QUEUED` - Queued\n- `RUNNING` - Running\n- `COMPLETE` - Complete\n- `FAILED` - Failed\n- `CANCELLED` - Cancelled",
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TestSuiteRunState"
                  }
                },
                {
                  "description": "Configuration that defines how the Test Suite should be run",
                  "key": "exec_config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TestSuiteRunExecConfig"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunState": {
            "description": "- `QUEUED` - Queued\n- `RUNNING` - Running\n- `COMPLETE` - Complete\n- `FAILED` - Failed\n- `CANCELLED` - Cancelled",
            "name": "TestSuiteRunState",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "QUEUED"
                },
                {
                  "value": "RUNNING"
                },
                {
                  "value": "COMPLETE"
                },
                {
                  "value": "FAILED"
                },
                {
                  "value": "CANCELLED"
                }
              ]
            }
          },
          "type_:TestSuiteRunTestSuite": {
            "name": "TestSuiteRunTestSuite",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "history_item_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunWorkflowReleaseTagExecConfig": {
            "description": "Execution configuration for running a Test Suite against a Workflow Deployment",
            "name": "TestSuiteRunWorkflowReleaseTagExecConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TestSuiteRunWorkflowReleaseTagExecConfigData"
                  }
                },
                {
                  "description": "Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.",
                  "key": "test_case_ids",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunWorkflowReleaseTagExecConfigData": {
            "name": "TestSuiteRunWorkflowReleaseTagExecConfigData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the Workflow Deployment to run the Test Suite against.",
                  "key": "workflow_deployment_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A tag identifying which release of the Workflow Deployment to run the Test Suite against. Useful for testing past versions of the Workflow Deployment",
                  "key": "tag",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "LATEST"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunWorkflowReleaseTagExecConfigDataRequest": {
            "name": "TestSuiteRunWorkflowReleaseTagExecConfigDataRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the Workflow Deployment to run the Test Suite against.",
                  "key": "workflow_deployment_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A tag identifying which release of the Workflow Deployment to run the Test Suite against. Useful for testing past versions of the Workflow Deployment",
                  "key": "tag",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1,
                        "default": "LATEST"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteRunWorkflowReleaseTagExecConfigRequest": {
            "description": "Execution configuration for running a Test Suite against a Workflow Deployment",
            "name": "TestSuiteRunWorkflowReleaseTagExecConfigRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TestSuiteRunWorkflowReleaseTagExecConfigDataRequest"
                  }
                },
                {
                  "description": "Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.",
                  "key": "test_case_ids",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCase": {
            "name": "TestSuiteTestCase",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "external_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "label",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "input_values",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TestCaseVariableValue"
                    }
                  }
                },
                {
                  "key": "evaluation_values",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TestCaseVariableValue"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCaseBulkOperationRequest": {
            "name": "TestSuiteTestCaseBulkOperationRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "CREATE",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteTestCaseCreateBulkOperationRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "REPLACE",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteTestCaseReplaceBulkOperationRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "UPSERT",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteTestCaseUpsertBulkOperationRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "DELETE",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteTestCaseDeleteBulkOperationRequest"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCaseBulkResult": {
            "name": "TestSuiteTestCaseBulkResult",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "CREATED",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteTestCaseCreatedBulkResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "REPLACED",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteTestCaseReplacedBulkResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "DELETED",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteTestCaseDeletedBulkResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "REJECTED",
                  "additionalProperties": {
                    "extends": ["type_:TestSuiteTestCaseRejectedBulkResult"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCaseCreateBulkOperationRequest": {
            "description": "A bulk operation that represents the creation of a Test Case.",
            "name": "TestSuiteTestCaseCreateBulkOperationRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An ID representing this specific operation. Can later be used to look up information about the operation's success in the response.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CreateTestSuiteTestCaseRequest"
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCaseCreatedBulkResult": {
            "description": "The result of a bulk operation that created a Test Case.",
            "name": "TestSuiteTestCaseCreatedBulkResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TestSuiteTestCaseCreatedBulkResultData"
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCaseCreatedBulkResultData": {
            "description": "Information about the Test Case that was created.",
            "name": "TestSuiteTestCaseCreatedBulkResultData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCaseDeleteBulkOperationDataRequest": {
            "name": "TestSuiteTestCaseDeleteBulkOperationDataRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCaseDeleteBulkOperationRequest": {
            "description": "A bulk operation that represents the deletion of a Test Case.",
            "name": "TestSuiteTestCaseDeleteBulkOperationRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An ID representing this specific operation. Can later be used to look up information about the operation's success in the response.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Information about the Test Case to delete",
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TestSuiteTestCaseDeleteBulkOperationDataRequest"
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCaseDeletedBulkResult": {
            "description": "The result of a bulk operation that deleted a Test Case.",
            "name": "TestSuiteTestCaseDeletedBulkResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An ID that maps back to one of the initially supplied operations. Can be used to determine the result of a given operation.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TestSuiteTestCaseDeletedBulkResultData"
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCaseDeletedBulkResultData": {
            "description": "Information about the Test Case that was deleted",
            "name": "TestSuiteTestCaseDeletedBulkResultData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCaseRejectedBulkResult": {
            "description": "The result of a bulk operation that failed to operate on a Test Case.",
            "name": "TestSuiteTestCaseRejectedBulkResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An ID that maps back to one of the initially supplied operations. Can be used to determine the result of a given operation.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Details about the error that occurred",
                  "key": "data",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCaseReplaceBulkOperationRequest": {
            "description": "A bulk operation that represents the replacing of a Test Case.",
            "name": "TestSuiteTestCaseReplaceBulkOperationRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An ID representing this specific operation. Can later be used to look up information about the operation's success in the response.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReplaceTestSuiteTestCaseRequest"
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCaseReplacedBulkResult": {
            "description": "The result of a bulk operation that replaced a Test Case.",
            "name": "TestSuiteTestCaseReplacedBulkResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An ID that maps back to one of the initially supplied operations. Can be used to determine the result of a given operation.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TestSuiteTestCaseReplacedBulkResultData"
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCaseReplacedBulkResultData": {
            "description": "Information about the Test Case that was replaced",
            "name": "TestSuiteTestCaseReplacedBulkResultData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TestSuiteTestCaseUpsertBulkOperationRequest": {
            "description": "A bulk operation that represents the upserting of a Test Case.",
            "name": "TestSuiteTestCaseUpsertBulkOperationRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An ID representing this specific operation. Can later be used to look up information about the operation's success in the response.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:UpsertTestSuiteTestCaseRequest"
                  }
                }
              ]
            }
          },
          "type_:TokenOverlappingWindowChunkerConfig": {
            "description": "Configuration for token overlapping window chunking",
            "name": "TokenOverlappingWindowChunkerConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "token_limit",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "default": 250
                      }
                    }
                  }
                },
                {
                  "key": "overlap_ratio",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TokenOverlappingWindowChunkerConfigRequest": {
            "description": "Configuration for token overlapping window chunking",
            "name": "TokenOverlappingWindowChunkerConfigRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "token_limit",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "default": 250
                      }
                    }
                  }
                },
                {
                  "key": "overlap_ratio",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TokenOverlappingWindowChunking": {
            "description": "Token overlapping window chunking",
            "name": "TokenOverlappingWindowChunking",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "chunker_config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TokenOverlappingWindowChunkerConfig"
                    }
                  }
                }
              ]
            }
          },
          "type_:TokenOverlappingWindowChunkingRequest": {
            "description": "Token overlapping window chunking",
            "name": "TokenOverlappingWindowChunkingRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "chunker_config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TokenOverlappingWindowChunkerConfigRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:UnitEnum": {
            "description": "- `USD` - USD",
            "name": "UnitEnum",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "USD"
                }
              }
            }
          },
          "type_:UploadDocumentErrorResponse": {
            "name": "UploadDocumentErrorResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:UploadDocumentResponse": {
            "name": "UploadDocumentResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the newly created document.",
                  "key": "document_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:UpsertTestSuiteTestCaseRequest": {
            "name": "UpsertTestSuiteTestCaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The Vellum-generated ID of an existing Test Case whose data you'd like to replace. If specified and no Test Case exists with this ID, a 404 will be returned.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "An ID external to Vellum that uniquely identifies the Test Case that you'd like to create/update. If there's a match on a Test Case that was previously created with the same external_id, it will be updated. Otherwise, a new Test Case will be created with this value as its external_id. If no external_id is specified, then a new Test Case will always be created.",
                  "key": "external_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                },
                {
                  "description": "A human-readable label used to convey the intention of this Test Case",
                  "key": "label",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Values for each of the Test Case's input variables",
                  "key": "input_values",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NamedTestCaseVariableValueRequest"
                    }
                  }
                },
                {
                  "description": "Values for each of the Test Case's evaluation variables",
                  "key": "evaluation_values",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NamedTestCaseVariableValueRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:VellumAudio": {
            "name": "VellumAudio",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "src",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VellumAudioRequest": {
            "name": "VellumAudioRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "src",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VellumError": {
            "name": "VellumError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "code",
                  "valueType": {
                    "type": "id",
                    "value": "type_:VellumErrorCodeEnum"
                  }
                }
              ]
            }
          },
          "type_:VellumErrorCodeEnum": {
            "description": "- `INVALID_REQUEST` - INVALID_REQUEST\n- `PROVIDER_ERROR` - PROVIDER_ERROR\n- `REQUEST_TIMEOUT` - REQUEST_TIMEOUT\n- `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR\n- `USER_DEFINED_ERROR` - USER_DEFINED_ERROR",
            "name": "VellumErrorCodeEnum",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "INVALID_REQUEST"
                },
                {
                  "value": "PROVIDER_ERROR"
                },
                {
                  "value": "REQUEST_TIMEOUT"
                },
                {
                  "value": "INTERNAL_SERVER_ERROR"
                },
                {
                  "value": "USER_DEFINED_ERROR"
                }
              ]
            }
          },
          "type_:VellumErrorRequest": {
            "name": "VellumErrorRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "key": "code",
                  "valueType": {
                    "type": "id",
                    "value": "type_:VellumErrorCodeEnum"
                  }
                }
              ]
            }
          },
          "type_:VellumImage": {
            "name": "VellumImage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "src",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VellumImageRequest": {
            "name": "VellumImageRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "src",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VellumValue": {
            "name": "VellumValue",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:StringVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:NumberVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:JsonVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IMAGE",
                  "additionalProperties": {
                    "extends": ["type_:ImageVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:FunctionCallVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:ErrorVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:ArrayVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:ChatHistoryVellumValue"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:SearchResultsVellumValue"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:VellumValueLogicalConditionGroupRequest": {
            "description": "A higher-order condition that combines one or more basic conditions or other higher-order conditions.",
            "name": "VellumValueLogicalConditionGroupRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "conditions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumValueLogicalExpressionRequest"
                    }
                  }
                },
                {
                  "key": "combinator",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ConditionCombinator"
                  }
                },
                {
                  "key": "negated",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_:VellumValueLogicalConditionRequest": {
            "description": "A basic condition comparing two Vellum values.",
            "name": "VellumValueLogicalConditionRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "lhs_variable",
                  "valueType": {
                    "type": "id",
                    "value": "type_:VellumValueRequest"
                  }
                },
                {
                  "key": "operator",
                  "valueType": {
                    "type": "id",
                    "value": "type_:LogicalOperator"
                  }
                },
                {
                  "key": "rhs_variable",
                  "valueType": {
                    "type": "id",
                    "value": "type_:VellumValueRequest"
                  }
                }
              ]
            }
          },
          "type_:VellumValueLogicalExpressionRequest": {
            "name": "VellumValueLogicalExpressionRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "LOGICAL_CONDITION",
                  "additionalProperties": {
                    "extends": ["type_:VellumValueLogicalConditionRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "LOGICAL_CONDITION_GROUP",
                  "additionalProperties": {
                    "extends": ["type_:VellumValueLogicalConditionGroupRequest"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:VellumValueRequest": {
            "name": "VellumValueRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:StringVellumValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:NumberVellumValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:JsonVellumValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IMAGE",
                  "additionalProperties": {
                    "extends": ["type_:ImageVellumValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:FunctionCallVellumValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:ErrorVellumValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:ArrayVellumValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:ChatHistoryVellumValueRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:SearchResultsVellumValueRequest"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:VellumVariable": {
            "name": "VellumVariable",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:VellumVariableType"
                  }
                },
                {
                  "key": "required",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "default",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumValue"
                    }
                  }
                },
                {
                  "key": "extensions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumVariableExtensions"
                    }
                  }
                }
              ]
            }
          },
          "type_:VellumVariableExtensions": {
            "description": "A set of fields with additional properties for use in Vellum Variables.",
            "name": "VellumVariableExtensions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "color",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VellumVariableType": {
            "description": "- `STRING` - STRING\n- `NUMBER` - NUMBER\n- `JSON` - JSON\n- `CHAT_HISTORY` - CHAT_HISTORY\n- `SEARCH_RESULTS` - SEARCH_RESULTS\n- `ERROR` - ERROR\n- `ARRAY` - ARRAY\n- `FUNCTION_CALL` - FUNCTION_CALL\n- `IMAGE` - IMAGE\n- `AUDIO` - AUDIO\n- `NULL` - NULL",
            "name": "VellumVariableType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "STRING"
                },
                {
                  "value": "NUMBER"
                },
                {
                  "value": "JSON"
                },
                {
                  "value": "CHAT_HISTORY"
                },
                {
                  "value": "SEARCH_RESULTS"
                },
                {
                  "value": "ERROR"
                },
                {
                  "value": "ARRAY"
                },
                {
                  "value": "FUNCTION_CALL"
                },
                {
                  "value": "IMAGE"
                },
                {
                  "value": "AUDIO"
                },
                {
                  "value": "NULL"
                }
              ]
            }
          },
          "type_:WorkflowDeploymentRead": {
            "name": "WorkflowDeploymentRead",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A name that uniquely identifies this workflow deployment within its workspace",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A human-readable label for the workflow deployment",
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The current status of the workflow deployment\n\n- `ACTIVE` - Active\n- `ARCHIVED` - Archived",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EntityStatus"
                    }
                  }
                },
                {
                  "description": "The environment this workflow deployment is used in\n\n- `DEVELOPMENT` - Development\n- `STAGING` - Staging\n- `PRODUCTION` - Production",
                  "key": "environment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EnvironmentEnum"
                    }
                  }
                },
                {
                  "key": "created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "last_deployed_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "The ID of the history item associated with this Workflow Deployment's LATEST Release Tag",
                  "key": "last_deployed_history_item_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The input variables this Workflow Deployment expects to receive values for when it is executed.",
                  "key": "input_variables",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumVariable"
                    }
                  }
                },
                {
                  "description": "The output variables this Workflow Deployment produces values for when it's executed.",
                  "key": "output_variables",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumVariable"
                    }
                  }
                },
                {
                  "description": "A human-readable description of the workflow deployment",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowEventError": {
            "name": "WorkflowEventError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "code",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowExecutionEventErrorCode"
                  }
                }
              ]
            }
          },
          "type_:WorkflowExecutionActualChatHistoryRequest": {
            "name": "WorkflowExecutionActualChatHistoryRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.",
                  "key": "output_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.",
                  "key": "output_key",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                },
                {
                  "description": "Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.",
                  "key": "quality",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Optionally provide additional metadata about the feedback submission.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.",
                  "key": "timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Optionally provide the value that the output ideally should have been.",
                  "key": "desired_output_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessageRequest"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowExecutionActualJsonRequest": {
            "name": "WorkflowExecutionActualJsonRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.",
                  "key": "output_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.",
                  "key": "output_key",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                },
                {
                  "description": "Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.",
                  "key": "quality",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Optionally provide additional metadata about the feedback submission.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.",
                  "key": "timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Optionally provide the value that the output ideally should have been.",
                  "key": "desired_output_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowExecutionActualStringRequest": {
            "name": "WorkflowExecutionActualStringRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.",
                  "key": "output_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.",
                  "key": "output_key",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                },
                {
                  "description": "Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.",
                  "key": "quality",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Optionally provide additional metadata about the feedback submission.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.",
                  "key": "timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Optionally provide the value that the output ideally should have been.",
                  "key": "desired_output_value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowExecutionEventErrorCode": {
            "description": "- `WORKFLOW_INITIALIZATION` - WORKFLOW_INITIALIZATION\n- `WORKFLOW_CANCELLED` - WORKFLOW_CANCELLED\n- `NODE_EXECUTION_COUNT_LIMIT_REACHED` - NODE_EXECUTION_COUNT_LIMIT_REACHED\n- `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR\n- `NODE_EXECUTION` - NODE_EXECUTION\n- `LLM_PROVIDER` - LLM_PROVIDER\n- `INVALID_TEMPLATE` - INVALID_TEMPLATE\n- `USER_DEFINED_ERROR` - USER_DEFINED_ERROR",
            "name": "WorkflowExecutionEventErrorCode",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "WORKFLOW_INITIALIZATION"
                },
                {
                  "value": "WORKFLOW_CANCELLED"
                },
                {
                  "value": "NODE_EXECUTION_COUNT_LIMIT_REACHED"
                },
                {
                  "value": "INTERNAL_SERVER_ERROR"
                },
                {
                  "value": "NODE_EXECUTION"
                },
                {
                  "value": "LLM_PROVIDER"
                },
                {
                  "value": "INVALID_TEMPLATE"
                },
                {
                  "value": "USER_DEFINED_ERROR"
                }
              ]
            }
          },
          "type_:WorkflowExecutionEventType": {
            "description": "- `NODE` - NODE\n- `WORKFLOW` - WORKFLOW",
            "name": "WorkflowExecutionEventType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "NODE"
                },
                {
                  "value": "WORKFLOW"
                }
              ]
            }
          },
          "type_:WorkflowExecutionNodeResultEvent": {
            "description": "A NODE-level event emitted from the workflow's execution.",
            "name": "WorkflowExecutionNodeResultEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "execution_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "run_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "external_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowNodeResultEvent"
                  }
                }
              ]
            }
          },
          "type_:WorkflowExecutionWorkflowResultEvent": {
            "description": "A WORKFLOW-level event emitted from the workflow's execution.",
            "name": "WorkflowExecutionWorkflowResultEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "execution_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "availability": "Deprecated",
                  "key": "run_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "external_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowResultEvent"
                  }
                }
              ]
            }
          },
          "type_:WorkflowExpandMetaRequest": {
            "name": "WorkflowExpandMetaRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "If enabled, the Prompt Node FULFILLED events will include model host usage tracking. This may increase latency for some model hosts.",
                  "key": "usage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowNodeResultData": {
            "name": "WorkflowNodeResultData",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "PROMPT",
                  "additionalProperties": {
                    "extends": ["type_:PromptNodeResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH",
                  "additionalProperties": {
                    "extends": ["type_:SearchNodeResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "TEMPLATING",
                  "additionalProperties": {
                    "extends": ["type_:TemplatingNodeResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CODE_EXECUTION",
                  "additionalProperties": {
                    "extends": ["type_:CodeExecutionNodeResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CONDITIONAL",
                  "additionalProperties": {
                    "extends": ["type_:ConditionalNodeResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "API",
                  "additionalProperties": {
                    "extends": ["type_:ApiNodeResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "TERMINAL",
                  "additionalProperties": {
                    "extends": ["type_:TerminalNodeResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "MERGE",
                  "additionalProperties": {
                    "extends": ["type_:MergeNodeResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SUBWORKFLOW",
                  "additionalProperties": {
                    "extends": ["type_:SubworkflowNodeResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "METRIC",
                  "additionalProperties": {
                    "extends": ["type_:MetricNodeResult"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "MAP",
                  "additionalProperties": {
                    "extends": ["type_:MapNodeResult"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:WorkflowNodeResultEvent": {
            "name": "WorkflowNodeResultEvent",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "state",
              "variants": [
                {
                  "discriminantValue": "INITIATED",
                  "additionalProperties": {
                    "extends": ["type_:InitiatedWorkflowNodeResultEvent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "STREAMING",
                  "additionalProperties": {
                    "extends": ["type_:StreamingWorkflowNodeResultEvent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FULFILLED",
                  "additionalProperties": {
                    "extends": ["type_:FulfilledWorkflowNodeResultEvent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "REJECTED",
                  "additionalProperties": {
                    "extends": ["type_:RejectedWorkflowNodeResultEvent"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:WorkflowNodeResultEventState": {
            "description": "- `INITIATED` - INITIATED\n- `STREAMING` - STREAMING\n- `FULFILLED` - FULFILLED\n- `REJECTED` - REJECTED",
            "name": "WorkflowNodeResultEventState",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "INITIATED"
                },
                {
                  "value": "STREAMING"
                },
                {
                  "value": "FULFILLED"
                },
                {
                  "value": "REJECTED"
                }
              ]
            }
          },
          "type_:WorkflowOutput": {
            "name": "WorkflowOutput",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowOutputString"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowOutputNumber"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowOutputJson"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowOutputChatHistory"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowOutputSearchResults"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowOutputArray"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowOutputError"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowOutputFunctionCall"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IMAGE",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowOutputImage"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:WorkflowOutputArray": {
            "description": "An array output from a Workflow execution.",
            "name": "WorkflowOutputArray",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The output's name, as defined in the workflow",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VellumValue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowOutputChatHistory": {
            "description": "A chat history output from a Workflow execution.",
            "name": "WorkflowOutputChatHistory",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The output's name, as defined in the workflow",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessage"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowOutputError": {
            "description": "An error output from a Workflow execution.",
            "name": "WorkflowOutputError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The output's name, as defined in the workflow",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumError"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowOutputFunctionCall": {
            "description": "A function call output from a Workflow execution.",
            "name": "WorkflowOutputFunctionCall",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The output's name, as defined in the workflow",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCall"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowOutputImage": {
            "description": "An image output from a Workflow execution.",
            "name": "WorkflowOutputImage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The output's name, as defined in the workflow",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumImage"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowOutputJson": {
            "description": "A JSON output from a Workflow execution.",
            "name": "WorkflowOutputJson",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The output's name, as defined in the workflow",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          },
          "type_:WorkflowOutputNumber": {
            "description": "A number output from a Workflow execution.",
            "name": "WorkflowOutputNumber",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The output's name, as defined in the workflow",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowOutputSearchResults": {
            "description": "A search results output from a Workflow execution.",
            "name": "WorkflowOutputSearchResults",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The output's name, as defined in the workflow",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResult"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowOutputString": {
            "description": "A string output from a Workflow execution.",
            "name": "WorkflowOutputString",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The output's name, as defined in the workflow",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowReleaseTagRead": {
            "name": "WorkflowReleaseTagRead",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the Release Tag",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The source of how the Release Tag was originally created\n\n- `SYSTEM` - System\n- `USER` - User",
                  "key": "source",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReleaseTagSource"
                  }
                },
                {
                  "description": "The Workflow Deployment History Item that this Release Tag is associated with",
                  "key": "history_item",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowReleaseTagWorkflowDeploymentHistoryItem"
                  }
                }
              ]
            }
          },
          "type_:WorkflowReleaseTagWorkflowDeploymentHistoryItem": {
            "name": "WorkflowReleaseTagWorkflowDeploymentHistoryItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the Workflow Deployment History Item",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The timestamp representing when this History Item was created",
                  "key": "timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowRequestChatHistoryInputRequest": {
            "description": "The input for a chat history variable in a Workflow.",
            "name": "WorkflowRequestChatHistoryInputRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's name, as defined in the Workflow.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ChatMessageRequest"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowRequestInputRequest": {
            "name": "WorkflowRequestInputRequest",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowRequestStringInputRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowRequestJsonInputRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowRequestChatHistoryInputRequest"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowRequestNumberInputRequest"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:WorkflowRequestJsonInputRequest": {
            "description": "The input for a JSON variable in a Workflow.",
            "name": "WorkflowRequestJsonInputRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's name, as defined in the Workflow.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          },
          "type_:WorkflowRequestNumberInputRequest": {
            "description": "The input for a number variable in a Workflow.",
            "name": "WorkflowRequestNumberInputRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's name, as defined in the Workflow.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowRequestStringInputRequest": {
            "description": "The input for a string variable in a Workflow.",
            "name": "WorkflowRequestStringInputRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The variable's name, as defined in the Workflow.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowResultEvent": {
            "name": "WorkflowResultEvent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowNodeResultEventState"
                  }
                },
                {
                  "key": "ts",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "output",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowResultEventOutputData"
                    }
                  }
                },
                {
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WorkflowEventError"
                    }
                  }
                },
                {
                  "key": "outputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:WorkflowOutput"
                      }
                    }
                  }
                },
                {
                  "key": "inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ExecutionVellumValue"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowResultEventOutputData": {
            "name": "WorkflowResultEventOutputData",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "STRING",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowResultEventOutputDataString"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NUMBER",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowResultEventOutputDataNumber"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "JSON",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowResultEventOutputDataJson"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "CHAT_HISTORY",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowResultEventOutputDataChatHistory"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "SEARCH_RESULTS",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowResultEventOutputDataSearchResults"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ARRAY",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowResultEventOutputDataArray"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FUNCTION_CALL",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowResultEventOutputDataFunctionCall"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "ERROR",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowResultEventOutputDataError"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:WorkflowResultEventOutputDataArray": {
            "description": "An Array output returned from a Workflow execution.",
            "name": "WorkflowResultEventOutputDataArray",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowNodeResultEventState"
                  }
                },
                {
                  "key": "node_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING.",
                  "key": "delta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ArrayVariableValueItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowResultEventOutputDataChatHistory": {
            "description": "A Chat History output streamed from a Workflow execution.",
            "name": "WorkflowResultEventOutputDataChatHistory",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowNodeResultEventState"
                  }
                },
                {
                  "key": "node_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING.",
                  "key": "delta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessage"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowResultEventOutputDataError": {
            "description": "An Error output streamed from a Workflow execution.",
            "name": "WorkflowResultEventOutputDataError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowNodeResultEventState"
                  }
                },
                {
                  "key": "node_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING.",
                  "key": "delta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VellumError"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowResultEventOutputDataFunctionCall": {
            "description": "A Function Call output returned from a Workflow execution.",
            "name": "WorkflowResultEventOutputDataFunctionCall",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowNodeResultEventState"
                  }
                },
                {
                  "key": "node_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING.",
                  "key": "delta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FunctionCall"
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowResultEventOutputDataJson": {
            "description": "A JSON output streamed from a Workflow execution.",
            "name": "WorkflowResultEventOutputDataJson",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowNodeResultEventState"
                  }
                },
                {
                  "key": "node_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING.",
                  "key": "delta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          },
          "type_:WorkflowResultEventOutputDataNumber": {
            "description": "A number output streamed from a Workflow execution.",
            "name": "WorkflowResultEventOutputDataNumber",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowNodeResultEventState"
                  }
                },
                {
                  "key": "node_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING.",
                  "key": "delta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowResultEventOutputDataSearchResults": {
            "description": "A Search Results output streamed from a Workflow execution.",
            "name": "WorkflowResultEventOutputDataSearchResults",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowNodeResultEventState"
                  }
                },
                {
                  "key": "node_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING.",
                  "key": "delta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SearchResult"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowResultEventOutputDataString": {
            "description": "A string output streamed from a Workflow execution.",
            "name": "WorkflowResultEventOutputDataString",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WorkflowNodeResultEventState"
                  }
                },
                {
                  "key": "node_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The newly output string value, meant to be concatenated with all previous. Will be non-null for events of state STREAMING.",
                  "key": "delta",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The entire string value. Will be non-null for events of state FULFILLED.",
                  "key": "value",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WorkflowStreamEvent": {
            "name": "WorkflowStreamEvent",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "WORKFLOW",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowExecutionWorkflowResultEvent"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "NODE",
                  "additionalProperties": {
                    "extends": ["type_:WorkflowExecutionNodeResultEvent"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:WorkspaceSecretRead": {
            "name": "WorkspaceSecretRead",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "modified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "label",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "secret_type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:SecretTypeEnum"
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_deployments": {
            "subpackageId": "subpackage_deployments",
            "name": "deployments",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "list",
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_deployments.list",
                "name": "List",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/deployments"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Number of results to return per page.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The initial index from which to return the results.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Which field to use when ordering the results.",
                    "key": "ordering",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "status",
                    "key": "status",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_deployments:DeploymentsListRequestStatus"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:PaginatedSlimDeploymentReadList"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/deployments",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "count": 123,
                      "next": "http://api.example.org/accounts/?offset=400&limit=100",
                      "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                      "results": [
                        {
                          "id": "id",
                          "created": "2024-01-15T09:30:00Z",
                          "label": "label",
                          "name": "name",
                          "status": "ACTIVE",
                          "environment": "DEVELOPMENT",
                          "last_deployed_on": "2024-01-15T09:30:00Z",
                          "input_variables": [
                            {
                              "id": "id",
                              "key": "key",
                              "type": "STRING"
                            }
                          ],
                          "description": "description"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.deployments.list()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.list()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.list();\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.List(\n\tcontext.TODO(),\n\t&vellumclientgo.DeploymentsListRequest{},\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "count": 123,
                        "next": "http://api.example.org/accounts/?offset=400&limit=100",
                        "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                        "results": [
                          {
                            "id": "id",
                            "created": "2024-01-15T09:30:00Z",
                            "label": "label",
                            "name": "name",
                            "status": "ACTIVE",
                            "environment": "DEVELOPMENT",
                            "last_deployed_on": "2024-01-15T09:30:00Z",
                            "input_variables": [
                              {
                                "id": "id",
                                "key": "key",
                                "type": "STRING"
                              }
                            ],
                            "description": "description"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Used to list all Prompt Deployments.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "retrieve",
                "method": "GET",
                "id": "retrieve",
                "originalEndpointId": "endpoint_deployments.retrieve",
                "name": "Retrieve",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Either the Deployment's ID or its unique name",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DeploymentRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/deployments/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "created": "2024-01-15T09:30:00Z",
                      "label": "label",
                      "name": "name",
                      "status": "ACTIVE",
                      "environment": "DEVELOPMENT",
                      "last_deployed_on": "2024-01-15T09:30:00Z",
                      "input_variables": [
                        {
                          "id": "id",
                          "key": "key",
                          "type": "STRING",
                          "required": true,
                          "default": {
                            "type": "SEARCH_RESULTS"
                          }
                        }
                      ],
                      "description": "description",
                      "active_model_version_ids": ["active_model_version_ids"],
                      "last_deployed_history_item_id": "last_deployed_history_item_id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.deployments.retrieve(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.retrieve(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.retrieve(\"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.Retrieve(\n\tcontext.TODO(),\n\t\"id\",\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "created": "2024-01-15T09:30:00Z",
                        "label": "label",
                        "name": "name",
                        "status": "ACTIVE",
                        "environment": "DEVELOPMENT",
                        "last_deployed_on": "2024-01-15T09:30:00Z",
                        "input_variables": [
                          {
                            "id": "id",
                            "key": "key",
                            "type": "STRING",
                            "required": true,
                            "default": {
                              "type": "SEARCH_RESULTS"
                            }
                          }
                        ],
                        "description": "description",
                        "active_model_version_ids": ["active_model_version_ids"],
                        "last_deployed_history_item_id": "last_deployed_history_item_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Used to retrieve a Prompt Deployment given its ID or name.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "retrieve-deployment-release-tag",
                "method": "GET",
                "id": "retrieve_deployment_release_tag",
                "originalEndpointId": "endpoint_deployments.retrieve_deployment_release_tag",
                "name": "Retrieve Deployment Release Tag",
                "path": {
                  "pathParameters": [
                    {
                      "description": "A UUID string identifying this deployment.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The name of the Release Tag associated with this Deployment that you'd like to retrieve.",
                      "key": "name",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/release-tags/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "name"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DeploymentReleaseTagRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/deployments/id/release-tags/name",
                    "pathParameters": {
                      "id": "id",
                      "name": "name"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "name": "name",
                      "source": "SYSTEM",
                      "history_item": {
                        "id": "id",
                        "timestamp": "2024-01-15T09:30:00Z"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.deployments.retrieve_deployment_release_tag(\n        id=\"id\",\n        name=\"name\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.retrieve_deployment_release_tag(\n    id=\"id\",\n    name=\"name\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.retrieveDeploymentReleaseTag(\"id\", \"name\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.RetrieveDeploymentReleaseTag(\n\tcontext.TODO(),\n\t\"id\",\n\t\"name\",\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "name",
                        "source": "SYSTEM",
                        "history_item": {
                          "id": "id",
                          "timestamp": "2024-01-15T09:30:00Z"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Retrieve a Deployment Release Tag by tag name, associated with a specified Deployment.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "update-deployment-release-tag",
                "method": "PATCH",
                "id": "update_deployment_release_tag",
                "originalEndpointId": "endpoint_deployments.update_deployment_release_tag",
                "name": "Update Deployment Release Tag",
                "path": {
                  "pathParameters": [
                    {
                      "description": "A UUID string identifying this deployment.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The name of the Release Tag associated with this Deployment that you'd like to update.",
                      "key": "name",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/release-tags/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "name"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The ID of the Deployment History Item to tag",
                        "key": "history_item_id",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DeploymentReleaseTagRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/deployments/id/release-tags/name",
                    "pathParameters": {
                      "id": "id",
                      "name": "name"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "name": "name",
                      "source": "SYSTEM",
                      "history_item": {
                        "id": "id",
                        "timestamp": "2024-01-15T09:30:00Z"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.deployments.update_deployment_release_tag(\n        id=\"id\",\n        name=\"name\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.update_deployment_release_tag(\n    id=\"id\",\n    name=\"name\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.updateDeploymentReleaseTag(\"id\", \"name\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.UpdateDeploymentReleaseTag(\n\tcontext.TODO(),\n\t\"id\",\n\t\"name\",\n\t&vellumclientgo.PatchedDeploymentReleaseTagUpdateRequest{},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "name",
                        "source": "SYSTEM",
                        "history_item": {
                          "id": "id",
                          "timestamp": "2024-01-15T09:30:00Z"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates an existing Release Tag associated with the specified Deployment.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "retrieve-provider-payload",
                "method": "POST",
                "id": "retrieve_provider_payload",
                "originalEndpointId": "endpoint_deployments.retrieve_provider_payload",
                "name": "Retrieve Provider Payload",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/deployments/provider-payload"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The ID of the deployment. Must provide either this or deployment_name.",
                        "key": "deployment_id",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The name of the deployment. Must provide either this or deployment_id.",
                        "key": "deployment_name",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "The list of inputs defined in the Prompt's deployment with their corresponding values.",
                        "key": "inputs",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "id",
                            "value": "type_:PromptDeploymentInputRequest"
                          }
                        }
                      },
                      {
                        "description": "Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment",
                        "key": "release_tag",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      },
                      {
                        "key": "expand_meta",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:CompilePromptDeploymentExpandMetaRequest"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DeploymentProviderPayloadResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ExecutePromptApiErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "",
                    "examples": []
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ExecutePromptApiErrorResponse"
                      }
                    },
                    "statusCode": 403,
                    "description": "",
                    "examples": []
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ExecutePromptApiErrorResponse"
                      }
                    },
                    "statusCode": 404,
                    "description": "",
                    "examples": []
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:ExecutePromptApiErrorResponse"
                      }
                    },
                    "statusCode": 500,
                    "description": "",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/deployments/provider-payload",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "inputs": [
                        {
                          "type": "CHAT_HISTORY",
                          "name": "inputs",
                          "value": [
                            {
                              "role": "SYSTEM"
                            }
                          ]
                        }
                      ]
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "payload": {
                        "key": "value"
                      },
                      "meta": {
                        "model_name": "model_name",
                        "deployment_release_tag": "deployment_release_tag",
                        "prompt_version_id": "prompt_version_id"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, StringInputRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.deployments.retrieve_provider_payload(\n        inputs=[\n            StringInputRequest(\n                name=\"name\",\n                value=\"value\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.retrieve_provider_payload(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.retrieveProviderPayload({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.RetrieveProviderPayload(\n\tcontext.TODO(),\n\t&vellumclientgo.DeploymentProviderPayloadRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "inputs": [
                          {
                            "type": "CHAT_HISTORY",
                            "name": "inputs",
                            "value": [
                              {
                                "role": "SYSTEM"
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "payload": {
                          "key": "value"
                        },
                        "meta": {
                          "model_name": "model_name",
                          "deployment_release_tag": "deployment_release_tag",
                          "prompt_version_id": "prompt_version_id"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/deployments/provider-payload",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, StringInputRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.deployments.retrieve_provider_payload(\n        inputs=[\n            StringInputRequest(\n                name=\"name\",\n                value=\"value\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.retrieve_provider_payload(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.retrieveProviderPayload({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.RetrieveProviderPayload(\n\tcontext.TODO(),\n\t&vellumclientgo.DeploymentProviderPayloadRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "inputs": [
                          {
                            "type": "STRING",
                            "name": "string",
                            "value": "string"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/deployments/provider-payload",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 403,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, StringInputRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.deployments.retrieve_provider_payload(\n        inputs=[\n            StringInputRequest(\n                name=\"name\",\n                value=\"value\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.retrieve_provider_payload(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.retrieveProviderPayload({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.RetrieveProviderPayload(\n\tcontext.TODO(),\n\t&vellumclientgo.DeploymentProviderPayloadRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "inputs": [
                          {
                            "type": "STRING",
                            "name": "string",
                            "value": "string"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/deployments/provider-payload",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, StringInputRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.deployments.retrieve_provider_payload(\n        inputs=[\n            StringInputRequest(\n                name=\"name\",\n                value=\"value\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.retrieve_provider_payload(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.retrieveProviderPayload({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.RetrieveProviderPayload(\n\tcontext.TODO(),\n\t&vellumclientgo.DeploymentProviderPayloadRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "inputs": [
                          {
                            "type": "STRING",
                            "name": "string",
                            "value": "string"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/deployments/provider-payload",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, StringInputRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.deployments.retrieve_provider_payload(\n        inputs=[\n            StringInputRequest(\n                name=\"name\",\n                value=\"value\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.retrieve_provider_payload(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.retrieveProviderPayload({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.RetrieveProviderPayload(\n\tcontext.TODO(),\n\t&vellumclientgo.DeploymentProviderPayloadRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "inputs": [
                          {
                            "type": "STRING",
                            "name": "string",
                            "value": "string"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Given a set of input variable values, compile the exact payload that Vellum would send to the configured model provider\nfor execution if the execute-prompt endpoint had been invoked. Note that this endpoint does not actually execute the\nprompt or make an API call to the model provider.\n\nThis endpoint is useful if you don't want to proxy LLM provider requests through Vellum and prefer to send them directly\nto the provider yourself. Note that no guarantees are made on the format of this API's response schema, other than\nthat it will be a valid payload for the configured model provider. It's not recommended that you try to parse or\nderive meaning from the response body and instead, should simply pass it directly to the model provider as is.\n\nWe encourage you to seek advise from Vellum Support before integrating with this API for production use.",
                "authed": true
              }
            ],
            "types": ["type_deployments:DeploymentsListRequestStatus"],
            "subpackages": [],
            "urlSlug": "deployments",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_documentIndexes": {
            "subpackageId": "subpackage_documentIndexes",
            "name": "documentIndexes",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "list",
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_documentIndexes.list",
                "name": "List",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/document-indexes"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Number of results to return per page.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The initial index from which to return the results.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Which field to use when ordering the results.",
                    "key": "ordering",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Search for document indices by name or label",
                    "key": "search",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter down to only document indices that have a status matching the status specified\n\n- `ACTIVE` - Active\n- `ARCHIVED` - Archived",
                    "key": "status",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_documentIndexes:DocumentIndexesListRequestStatus"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:PaginatedDocumentIndexReadList"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/document-indexes",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "count": 123,
                      "next": "http://api.example.org/accounts/?offset=400&limit=100",
                      "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                      "results": [
                        {
                          "id": "id",
                          "created": "2024-01-15T09:30:00Z",
                          "label": "label",
                          "name": "name",
                          "status": "ACTIVE",
                          "environment": "DEVELOPMENT",
                          "indexing_config": {
                            "vectorizer": {
                              "model_name": "text-multilingual-embedding-002",
                              "config": {
                                "project_id": "project_id",
                                "region": "region"
                              }
                            }
                          }
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_indexes.list()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.list()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.list();\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.DocumentIndexes.List(\n\tcontext.TODO(),\n\t&vellumclientgo.DocumentIndexesListRequest{},\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "count": 123,
                        "next": "http://api.example.org/accounts/?offset=400&limit=100",
                        "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                        "results": [
                          {
                            "id": "id",
                            "created": "2024-01-15T09:30:00Z",
                            "label": "label",
                            "name": "name",
                            "status": "ACTIVE",
                            "environment": "DEVELOPMENT",
                            "indexing_config": {
                              "vectorizer": {
                                "model_name": "text-multilingual-embedding-002",
                                "config": {
                                  "project_id": "project_id",
                                  "region": "region"
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Used to retrieve a list of Document Indexes.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "create",
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_documentIndexes.create",
                "name": "Create",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/document-indexes"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "A human-readable label for the document index",
                        "key": "label",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      },
                      {
                        "description": "A name that uniquely identifies this index within its workspace",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      },
                      {
                        "description": "The current status of the document index\n\n* `ACTIVE` - Active\n* `ARCHIVED` - Archived",
                        "key": "status",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:EntityStatus"
                          }
                        }
                      },
                      {
                        "description": "The environment this document index is used in\n\n* `DEVELOPMENT` - Development\n* `STAGING` - Staging\n* `PRODUCTION` - Production",
                        "key": "environment",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:EnvironmentEnum"
                          }
                        }
                      },
                      {
                        "key": "indexing_config",
                        "valueType": {
                          "type": "id",
                          "value": "type_:DocumentIndexIndexingConfigRequest"
                        }
                      },
                      {
                        "description": "Optionally specify the id of a document index from which you'd like to copy and re-index its documents into this newly created index",
                        "key": "copy_documents_from_index_id",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DocumentIndexRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Index Using Instructor Model",
                    "path": "/v1/document-indexes",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "label": "My Document Index",
                      "name": "my-document-index",
                      "indexing_config": {
                        "vectorizer": {
                          "model_name": "text-multilingual-embedding-002",
                          "config": {
                            "project_id": "project_id",
                            "region": "region"
                          }
                        },
                        "chunking": {
                          "chunker_name": "token-overlapping-window-chunker"
                        }
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "created": "2024-01-15T09:30:00Z",
                      "label": "label",
                      "name": "name",
                      "status": "ACTIVE",
                      "environment": "DEVELOPMENT",
                      "indexing_config": {
                        "vectorizer": {
                          "model_name": "text-multilingual-embedding-002",
                          "config": {
                            "project_id": "project_id",
                            "region": "region"
                          }
                        },
                        "chunking": {
                          "chunker_name": "token-overlapping-window-chunker"
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    DocumentIndexIndexingConfigRequest,\n    HkunlpInstructorXlVectorizerRequest,\n    InstructorVectorizerConfigRequest,\n    SentenceChunkerConfigRequest,\n    SentenceChunkingRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_indexes.create(\n        label=\"My Document Index\",\n        name=\"my-document-index\",\n        indexing_config=DocumentIndexIndexingConfigRequest(\n            vectorizer=HkunlpInstructorXlVectorizerRequest(\n                config=InstructorVectorizerConfigRequest(\n                    instruction_domain=\"\",\n                    instruction_query_text_type=\"plain_text\",\n                    instruction_document_text_type=\"plain_text\",\n                ),\n            ),\n            chunking=SentenceChunkingRequest(\n                chunker_config=SentenceChunkerConfigRequest(\n                    character_limit=1000,\n                    min_overlap_ratio=0.5,\n                ),\n            ),\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import (\n    DocumentIndexIndexingConfigRequest,\n    HkunlpInstructorXlVectorizerRequest,\n    InstructorVectorizerConfigRequest,\n    SentenceChunkerConfigRequest,\n    SentenceChunkingRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.create(\n    label=\"My Document Index\",\n    name=\"my-document-index\",\n    indexing_config=DocumentIndexIndexingConfigRequest(\n        vectorizer=HkunlpInstructorXlVectorizerRequest(\n            config=InstructorVectorizerConfigRequest(\n                instruction_domain=\"\",\n                instruction_query_text_type=\"plain_text\",\n                instruction_document_text_type=\"plain_text\",\n            ),\n        ),\n        chunking=SentenceChunkingRequest(\n            chunker_config=SentenceChunkerConfigRequest(\n                character_limit=1000,\n                min_overlap_ratio=0.5,\n            ),\n        ),\n    ),\n)\n",
                        "exampleIdentifier": "Index Using Instructor Model"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.create({\n    label: \"My Document Index\",\n    name: \"my-document-index\",\n    indexingConfig: {\n        vectorizer: {\n            modelName: \"hkunlp/instructor-xl\",\n            config: {\n                instructionDomain: \"\",\n                instructionQueryTextType: \"plain_text\",\n                instructionDocumentTextType: \"plain_text\"\n            }\n        },\n        chunking: {\n            chunkerName: \"sentence-chunker\",\n            chunkerConfig: {\n                characterLimit: 1000,\n                minOverlapRatio: 0.5\n            }\n        }\n    }\n});\n",
                        "exampleIdentifier": "Index Using Instructor Model"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.DocumentIndexes.Create(\n\tcontext.TODO(),\n\t&vellumclientgo.DocumentIndexCreateRequest{\n\t\tLabel: \"My Document Index\",\n\t\tName:  \"my-document-index\",\n\t\tIndexingConfig: &vellumclientgo.DocumentIndexIndexingConfigRequest{\n\t\t\tVectorizer: &vellumclientgo.IndexingConfigVectorizerRequest{\n\t\t\t\tHkunlpInstructorXlVectorizerRequest: &vellumclientgo.HkunlpInstructorXlVectorizerRequest{\n\t\t\t\t\tConfig: &vellumclientgo.InstructorVectorizerConfigRequest{\n\t\t\t\t\t\tInstructionDomain:           \"\",\n\t\t\t\t\t\tInstructionQueryTextType:    \"plain_text\",\n\t\t\t\t\t\tInstructionDocumentTextType: \"plain_text\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tChunking: &vellumclientgo.DocumentIndexChunkingRequest{\n\t\t\t\tSentenceChunkingRequest: &vellumclientgo.SentenceChunkingRequest{\n\t\t\t\t\tChunkerConfig: &vellumclientgo.SentenceChunkerConfigRequest{\n\t\t\t\t\t\tCharacterLimit: vellumclientgo.Int(\n\t\t\t\t\t\t\t1000,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tMinOverlapRatio: vellumclientgo.Float64(\n\t\t\t\t\t\t\t0.5,\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "label": "My Document Index",
                        "name": "my-document-index",
                        "indexing_config": {
                          "vectorizer": {
                            "model_name": "text-multilingual-embedding-002",
                            "config": {
                              "project_id": "project_id",
                              "region": "region"
                            }
                          },
                          "chunking": {
                            "chunker_name": "token-overlapping-window-chunker"
                          }
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "created": "2024-01-15T09:30:00Z",
                        "label": "label",
                        "name": "name",
                        "status": "ACTIVE",
                        "environment": "DEVELOPMENT",
                        "indexing_config": {
                          "vectorizer": {
                            "model_name": "text-multilingual-embedding-002",
                            "config": {
                              "project_id": "project_id",
                              "region": "region"
                            }
                          },
                          "chunking": {
                            "chunker_name": "token-overlapping-window-chunker"
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "name": "Index Using a Sentence Transformers Model",
                    "path": "/v1/document-indexes",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "label": "My Document Index",
                      "name": "my-document-index",
                      "indexing_config": {
                        "vectorizer": {
                          "model_name": "text-multilingual-embedding-002",
                          "config": {
                            "project_id": "project_id",
                            "region": "region"
                          }
                        },
                        "chunking": {
                          "chunker_name": "token-overlapping-window-chunker"
                        }
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "created": "2024-01-15T09:30:00Z",
                      "label": "label",
                      "name": "name",
                      "status": "ACTIVE",
                      "environment": "DEVELOPMENT",
                      "indexing_config": {
                        "vectorizer": {
                          "model_name": "text-multilingual-embedding-002",
                          "config": {
                            "project_id": "project_id",
                            "region": "region"
                          }
                        },
                        "chunking": {
                          "chunker_name": "token-overlapping-window-chunker"
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request,\n    DocumentIndexIndexingConfigRequest,\n    SentenceChunkerConfigRequest,\n    SentenceChunkingRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_indexes.create(\n        label=\"My Document Index\",\n        name=\"my-document-index\",\n        indexing_config=DocumentIndexIndexingConfigRequest(\n            vectorizer=BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request(\n                config={\"key\": \"value\"},\n            ),\n            chunking=SentenceChunkingRequest(\n                chunker_config=SentenceChunkerConfigRequest(\n                    character_limit=1000,\n                    min_overlap_ratio=0.5,\n                ),\n            ),\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import (\n    BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request,\n    DocumentIndexIndexingConfigRequest,\n    SentenceChunkerConfigRequest,\n    SentenceChunkingRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.create(\n    label=\"My Document Index\",\n    name=\"my-document-index\",\n    indexing_config=DocumentIndexIndexingConfigRequest(\n        vectorizer=BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request(\n            config={\"key\": \"value\"},\n        ),\n        chunking=SentenceChunkingRequest(\n            chunker_config=SentenceChunkerConfigRequest(\n                character_limit=1000,\n                min_overlap_ratio=0.5,\n            ),\n        ),\n    ),\n)\n",
                        "exampleIdentifier": "Index Using a Sentence Transformers Model"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.create({\n    label: \"My Document Index\",\n    name: \"my-document-index\",\n    indexingConfig: {\n        vectorizer: {\n            modelName: \"sentence-transformers/multi-qa-mpnet-base-dot-v1\",\n            config: {\n                \"key\": \"value\"\n            }\n        },\n        chunking: {\n            chunkerName: \"sentence-chunker\",\n            chunkerConfig: {\n                characterLimit: 1000,\n                minOverlapRatio: 0.5\n            }\n        }\n    }\n});\n",
                        "exampleIdentifier": "Index Using a Sentence Transformers Model"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.DocumentIndexes.Create(\n\tcontext.TODO(),\n\t&vellumclientgo.DocumentIndexCreateRequest{\n\t\tLabel: \"My Document Index\",\n\t\tName:  \"my-document-index\",\n\t\tIndexingConfig: &vellumclientgo.DocumentIndexIndexingConfigRequest{\n\t\t\tVectorizer: &vellumclientgo.IndexingConfigVectorizerRequest{\n\t\t\t\tHkunlpInstructorXlVectorizerRequest: &vellumclientgo.HkunlpInstructorXlVectorizerRequest{\n\t\t\t\t\tConfig: &vellumclientgo.InstructorVectorizerConfigRequest{\n\t\t\t\t\t\tInstructionDomain:           \"\",\n\t\t\t\t\t\tInstructionQueryTextType:    \"plain_text\",\n\t\t\t\t\t\tInstructionDocumentTextType: \"plain_text\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tChunking: &vellumclientgo.DocumentIndexChunkingRequest{\n\t\t\t\tSentenceChunkingRequest: &vellumclientgo.SentenceChunkingRequest{\n\t\t\t\t\tChunkerConfig: &vellumclientgo.SentenceChunkerConfigRequest{\n\t\t\t\t\t\tCharacterLimit: vellumclientgo.Int(\n\t\t\t\t\t\t\t1000,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tMinOverlapRatio: vellumclientgo.Float64(\n\t\t\t\t\t\t\t0.5,\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "label": "My Document Index",
                        "name": "my-document-index",
                        "indexing_config": {
                          "vectorizer": {
                            "model_name": "text-multilingual-embedding-002",
                            "config": {
                              "project_id": "project_id",
                              "region": "region"
                            }
                          },
                          "chunking": {
                            "chunker_name": "token-overlapping-window-chunker"
                          }
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "created": "2024-01-15T09:30:00Z",
                        "label": "label",
                        "name": "name",
                        "status": "ACTIVE",
                        "environment": "DEVELOPMENT",
                        "indexing_config": {
                          "vectorizer": {
                            "model_name": "text-multilingual-embedding-002",
                            "config": {
                              "project_id": "project_id",
                              "region": "region"
                            }
                          },
                          "chunking": {
                            "chunker_name": "token-overlapping-window-chunker"
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "name": "Index Using OpenAI Model",
                    "path": "/v1/document-indexes",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "label": "My Document Index",
                      "name": "my-document-index",
                      "indexing_config": {
                        "vectorizer": {
                          "model_name": "text-multilingual-embedding-002",
                          "config": {
                            "project_id": "project_id",
                            "region": "region"
                          }
                        },
                        "chunking": {
                          "chunker_name": "token-overlapping-window-chunker"
                        }
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "created": "2024-01-15T09:30:00Z",
                      "label": "label",
                      "name": "name",
                      "status": "ACTIVE",
                      "environment": "DEVELOPMENT",
                      "indexing_config": {
                        "vectorizer": {
                          "model_name": "text-multilingual-embedding-002",
                          "config": {
                            "project_id": "project_id",
                            "region": "region"
                          }
                        },
                        "chunking": {
                          "chunker_name": "token-overlapping-window-chunker"
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    DocumentIndexIndexingConfigRequest,\n    OpenAiVectorizerConfigRequest,\n    OpenAiVectorizerTextEmbeddingAda002Request,\n    SentenceChunkerConfigRequest,\n    SentenceChunkingRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_indexes.create(\n        label=\"My Document Index\",\n        name=\"my-document-index\",\n        indexing_config=DocumentIndexIndexingConfigRequest(\n            vectorizer=OpenAiVectorizerTextEmbeddingAda002Request(\n                config=OpenAiVectorizerConfigRequest(\n                    add_openai_api_key=True,\n                ),\n            ),\n            chunking=SentenceChunkingRequest(\n                chunker_config=SentenceChunkerConfigRequest(\n                    character_limit=1000,\n                    min_overlap_ratio=0.5,\n                ),\n            ),\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import (\n    DocumentIndexIndexingConfigRequest,\n    OpenAiVectorizerConfigRequest,\n    OpenAiVectorizerTextEmbeddingAda002Request,\n    SentenceChunkerConfigRequest,\n    SentenceChunkingRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.create(\n    label=\"My Document Index\",\n    name=\"my-document-index\",\n    indexing_config=DocumentIndexIndexingConfigRequest(\n        vectorizer=OpenAiVectorizerTextEmbeddingAda002Request(\n            config=OpenAiVectorizerConfigRequest(\n                add_openai_api_key=True,\n            ),\n        ),\n        chunking=SentenceChunkingRequest(\n            chunker_config=SentenceChunkerConfigRequest(\n                character_limit=1000,\n                min_overlap_ratio=0.5,\n            ),\n        ),\n    ),\n)\n",
                        "exampleIdentifier": "Index Using OpenAI Model"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.create({\n    label: \"My Document Index\",\n    name: \"my-document-index\",\n    indexingConfig: {\n        vectorizer: {\n            config: {\n                addOpenaiApiKey: true\n            },\n            modelName: \"text-embedding-ada-002\"\n        },\n        chunking: {\n            chunkerName: \"sentence-chunker\",\n            chunkerConfig: {\n                characterLimit: 1000,\n                minOverlapRatio: 0.5\n            }\n        }\n    }\n});\n",
                        "exampleIdentifier": "Index Using OpenAI Model"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.DocumentIndexes.Create(\n\tcontext.TODO(),\n\t&vellumclientgo.DocumentIndexCreateRequest{\n\t\tLabel: \"My Document Index\",\n\t\tName:  \"my-document-index\",\n\t\tIndexingConfig: &vellumclientgo.DocumentIndexIndexingConfigRequest{\n\t\t\tVectorizer: &vellumclientgo.IndexingConfigVectorizerRequest{\n\t\t\t\tHkunlpInstructorXlVectorizerRequest: &vellumclientgo.HkunlpInstructorXlVectorizerRequest{\n\t\t\t\t\tConfig: &vellumclientgo.InstructorVectorizerConfigRequest{\n\t\t\t\t\t\tInstructionDomain:           \"\",\n\t\t\t\t\t\tInstructionQueryTextType:    \"plain_text\",\n\t\t\t\t\t\tInstructionDocumentTextType: \"plain_text\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tChunking: &vellumclientgo.DocumentIndexChunkingRequest{\n\t\t\t\tSentenceChunkingRequest: &vellumclientgo.SentenceChunkingRequest{\n\t\t\t\t\tChunkerConfig: &vellumclientgo.SentenceChunkerConfigRequest{\n\t\t\t\t\t\tCharacterLimit: vellumclientgo.Int(\n\t\t\t\t\t\t\t1000,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tMinOverlapRatio: vellumclientgo.Float64(\n\t\t\t\t\t\t\t0.5,\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "label": "My Document Index",
                        "name": "my-document-index",
                        "indexing_config": {
                          "vectorizer": {
                            "model_name": "text-multilingual-embedding-002",
                            "config": {
                              "project_id": "project_id",
                              "region": "region"
                            }
                          },
                          "chunking": {
                            "chunker_name": "token-overlapping-window-chunker"
                          }
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "created": "2024-01-15T09:30:00Z",
                        "label": "label",
                        "name": "name",
                        "status": "ACTIVE",
                        "environment": "DEVELOPMENT",
                        "indexing_config": {
                          "vectorizer": {
                            "model_name": "text-multilingual-embedding-002",
                            "config": {
                              "project_id": "project_id",
                              "region": "region"
                            }
                          },
                          "chunking": {
                            "chunker_name": "token-overlapping-window-chunker"
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Creates a new document index.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "retrieve",
                "method": "GET",
                "id": "retrieve",
                "originalEndpointId": "endpoint_documentIndexes.retrieve",
                "name": "Retrieve",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Either the Document Index's ID or its unique name",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/document-indexes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DocumentIndexRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/document-indexes/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "created": "2024-01-15T09:30:00Z",
                      "label": "label",
                      "name": "name",
                      "status": "ACTIVE",
                      "environment": "DEVELOPMENT",
                      "indexing_config": {
                        "vectorizer": {
                          "model_name": "text-multilingual-embedding-002",
                          "config": {
                            "project_id": "project_id",
                            "region": "region"
                          }
                        },
                        "chunking": {
                          "chunker_name": "token-overlapping-window-chunker"
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_indexes.retrieve(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.retrieve(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.retrieve(\"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.DocumentIndexes.Retrieve(\n\tcontext.TODO(),\n\t\"id\",\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "created": "2024-01-15T09:30:00Z",
                        "label": "label",
                        "name": "name",
                        "status": "ACTIVE",
                        "environment": "DEVELOPMENT",
                        "indexing_config": {
                          "vectorizer": {
                            "model_name": "text-multilingual-embedding-002",
                            "config": {
                              "project_id": "project_id",
                              "region": "region"
                            }
                          },
                          "chunking": {
                            "chunker_name": "token-overlapping-window-chunker"
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Used to retrieve a Document Index given its ID or name.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "update",
                "method": "PUT",
                "id": "update",
                "originalEndpointId": "endpoint_documentIndexes.update",
                "name": "Update",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Either the Document Index's ID or its unique name",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/document-indexes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "A human-readable label for the document index",
                        "key": "label",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      },
                      {
                        "description": "The current status of the document index\n\n* `ACTIVE` - Active\n* `ARCHIVED` - Archived",
                        "key": "status",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:EntityStatus"
                          }
                        }
                      },
                      {
                        "description": "The environment this document index is used in\n\n* `DEVELOPMENT` - Development\n* `STAGING` - Staging\n* `PRODUCTION` - Production",
                        "key": "environment",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:EnvironmentEnum"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DocumentIndexRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/document-indexes/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "label": "label"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "created": "2024-01-15T09:30:00Z",
                      "label": "label",
                      "name": "name",
                      "status": "ACTIVE",
                      "environment": "DEVELOPMENT",
                      "indexing_config": {
                        "vectorizer": {
                          "model_name": "text-multilingual-embedding-002",
                          "config": {
                            "project_id": "project_id",
                            "region": "region"
                          }
                        },
                        "chunking": {
                          "chunker_name": "token-overlapping-window-chunker"
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_indexes.update(\n        id=\"id\",\n        label=\"label\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.update(\n    id=\"id\",\n    label=\"label\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.update(\"id\", {\n    label: \"label\"\n});\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.DocumentIndexes.Update(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.DocumentIndexUpdateRequest{\n\t\tLabel: \"label\",\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "label": "label"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "created": "2024-01-15T09:30:00Z",
                        "label": "label",
                        "name": "name",
                        "status": "ACTIVE",
                        "environment": "DEVELOPMENT",
                        "indexing_config": {
                          "vectorizer": {
                            "model_name": "text-multilingual-embedding-002",
                            "config": {
                              "project_id": "project_id",
                              "region": "region"
                            }
                          },
                          "chunking": {
                            "chunker_name": "token-overlapping-window-chunker"
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Used to fully update a Document Index given its ID or name.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://documents.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "destroy",
                "method": "DELETE",
                "id": "destroy",
                "originalEndpointId": "endpoint_documentIndexes.destroy",
                "name": "Destroy",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Either the Document Index's ID or its unique name",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/document-indexes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/document-indexes/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_indexes.destroy(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.destroy(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.destroy(\"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.DocumentIndexes.Destroy(\n\tcontext.TODO(),\n\t\"id\",\n)\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Used to delete a Document Index given its ID or name.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "partial-update",
                "method": "PATCH",
                "id": "partialUpdate",
                "originalEndpointId": "endpoint_documentIndexes.partialUpdate",
                "name": "Partial Update",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Either the Document Index's ID or its unique name",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/document-indexes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "A human-readable label for the document index",
                        "key": "label",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "The current status of the document index\n\n* `ACTIVE` - Active\n* `ARCHIVED` - Archived",
                        "key": "status",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:EntityStatus"
                          }
                        }
                      },
                      {
                        "description": "The environment this document index is used in\n\n* `DEVELOPMENT` - Development\n* `STAGING` - Staging\n* `PRODUCTION` - Production",
                        "key": "environment",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:EnvironmentEnum"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DocumentIndexRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/document-indexes/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "created": "2024-01-15T09:30:00Z",
                      "label": "label",
                      "name": "name",
                      "status": "ACTIVE",
                      "environment": "DEVELOPMENT",
                      "indexing_config": {
                        "vectorizer": {
                          "model_name": "text-multilingual-embedding-002",
                          "config": {
                            "project_id": "project_id",
                            "region": "region"
                          }
                        },
                        "chunking": {
                          "chunker_name": "token-overlapping-window-chunker"
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_indexes.partial_update(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.partial_update(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.partialUpdate(\"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.DocumentIndexes.PartialUpdate(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.PatchedDocumentIndexUpdateRequest{},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "created": "2024-01-15T09:30:00Z",
                        "label": "label",
                        "name": "name",
                        "status": "ACTIVE",
                        "environment": "DEVELOPMENT",
                        "indexing_config": {
                          "vectorizer": {
                            "model_name": "text-multilingual-embedding-002",
                            "config": {
                              "project_id": "project_id",
                              "region": "region"
                            }
                          },
                          "chunking": {
                            "chunker_name": "token-overlapping-window-chunker"
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Used to partial update a Document Index given its ID or name.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "add-document",
                "method": "POST",
                "id": "add_document",
                "originalEndpointId": "endpoint_documentIndexes.add_document",
                "name": "Add Document",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Either the Vellum-generated ID or the originally supplied external_id that uniquely identifies the Document you'd like to add.",
                      "key": "document_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Either the Vellum-generated ID or the originally specified name that uniquely identifies the Document Index to which you'd like to add the Document.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/document-indexes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/documents/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "document_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/document-indexes/id/documents/document_id",
                    "pathParameters": {
                      "document_id": "document_id",
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_indexes.add_document(\n        document_id=\"document_id\",\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.add_document(\n    document_id=\"document_id\",\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.addDocument(\"document_id\", \"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.DocumentIndexes.AddDocument(\n\tcontext.TODO(),\n\t\"document_id\",\n\t\"id\",\n)\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Adds a previously uploaded Document to the specified Document Index.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://documents.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "remove-document",
                "method": "DELETE",
                "id": "remove_document",
                "originalEndpointId": "endpoint_documentIndexes.remove_document",
                "name": "Remove Document",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Either the Vellum-generated ID or the originally supplied external_id that uniquely identifies the Document you'd like to remove.",
                      "key": "document_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Either the Vellum-generated ID or the originally specified name that uniquely identifies the Document Index from which you'd like to remove a Document.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/document-indexes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/documents/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "document_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/document-indexes/id/documents/document_id",
                    "pathParameters": {
                      "document_id": "document_id",
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_indexes.remove_document(\n        document_id=\"document_id\",\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.remove_document(\n    document_id=\"document_id\",\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.removeDocument(\"document_id\", \"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.DocumentIndexes.RemoveDocument(\n\tcontext.TODO(),\n\t\"document_id\",\n\t\"id\",\n)\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Removes a Document from a Document Index without deleting the Document itself.",
                "authed": true
              }
            ],
            "types": ["type_documentIndexes:DocumentIndexesListRequestStatus"],
            "subpackages": [],
            "urlSlug": "document-indexes",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_documents": {
            "subpackageId": "subpackage_documents",
            "name": "documents",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "GenerallyAvailable",
                "defaultEnvironment": "Production",
                "urlSlug": "list",
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_documents.list",
                "name": "List",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/documents"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Filter down to only those documents that are included in the specified index. You may provide either the Vellum-generated ID or the unique name of the index specified upon initial creation.",
                    "key": "document_index_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Number of results to return per page.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The initial index from which to return the results.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Which field to use when ordering the results.",
                    "key": "ordering",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:PaginatedSlimDocumentList"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/documents",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "count": 123,
                      "next": "http://api.example.org/accounts/?offset=400&limit=100",
                      "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                      "results": [
                        {
                          "id": "id",
                          "external_id": "external_id",
                          "last_uploaded_at": "2024-01-15T09:30:00Z",
                          "label": "label",
                          "processing_state": "QUEUED",
                          "processing_failure_reason": "EXCEEDED_CHARACTER_LIMIT",
                          "status": "ACTIVE",
                          "keywords": ["keywords"],
                          "metadata": {
                            "key": "value"
                          },
                          "document_to_document_indexes": [
                            {
                              "id": "id",
                              "document_index_id": "document_index_id"
                            }
                          ]
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.list()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.list()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.list();\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Documents.List(\n\tcontext.TODO(),\n\t&vellumclientgo.DocumentsListRequest{},\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "count": 123,
                        "next": "http://api.example.org/accounts/?offset=400&limit=100",
                        "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                        "results": [
                          {
                            "id": "id",
                            "external_id": "external_id",
                            "last_uploaded_at": "2024-01-15T09:30:00Z",
                            "label": "label",
                            "processing_state": "QUEUED",
                            "processing_failure_reason": "EXCEEDED_CHARACTER_LIMIT",
                            "status": "ACTIVE",
                            "keywords": ["keywords"],
                            "metadata": {
                              "key": "value"
                            },
                            "document_to_document_indexes": [
                              {
                                "id": "id",
                                "document_index_id": "document_index_id"
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Used to list documents. Optionally filter on supported fields.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "retrieve",
                "method": "GET",
                "id": "retrieve",
                "originalEndpointId": "endpoint_documents.retrieve",
                "name": "Retrieve",
                "path": {
                  "pathParameters": [
                    {
                      "description": "A UUID string identifying this document.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/documents/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DocumentRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/documents/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "external_id": "external_id",
                      "last_uploaded_at": "2024-01-15T09:30:00Z",
                      "label": "label",
                      "processing_state": "QUEUED",
                      "status": "ACTIVE",
                      "original_file_url": "original_file_url",
                      "processed_file_url": "processed_file_url",
                      "document_to_document_indexes": [
                        {
                          "id": "id",
                          "document_index_id": "document_index_id",
                          "indexing_state": "AWAITING_PROCESSING"
                        }
                      ],
                      "metadata": {
                        "key": "value"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.retrieve(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.retrieve(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.retrieve(\"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Documents.Retrieve(\n\tcontext.TODO(),\n\t\"id\",\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "external_id": "external_id",
                        "last_uploaded_at": "2024-01-15T09:30:00Z",
                        "label": "label",
                        "processing_state": "QUEUED",
                        "status": "ACTIVE",
                        "original_file_url": "original_file_url",
                        "processed_file_url": "processed_file_url",
                        "document_to_document_indexes": [
                          {
                            "id": "id",
                            "document_index_id": "document_index_id",
                            "indexing_state": "AWAITING_PROCESSING"
                          }
                        ],
                        "metadata": {
                          "key": "value"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Retrieve a Document, keying off of either its Vellum-generated ID or its external ID.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://documents.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "destroy",
                "method": "DELETE",
                "id": "destroy",
                "originalEndpointId": "endpoint_documents.destroy",
                "name": "Destroy",
                "path": {
                  "pathParameters": [
                    {
                      "description": "A UUID string identifying this document.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/documents/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/documents/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.destroy(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.destroy(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.destroy(\"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.Documents.Destroy(\n\tcontext.TODO(),\n\t\"id\",\n)\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete a Document, keying off of either its Vellum-generated ID or its external ID.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "partial-update",
                "method": "PATCH",
                "id": "partialUpdate",
                "originalEndpointId": "endpoint_documents.partialUpdate",
                "name": "Partial Update",
                "path": {
                  "pathParameters": [
                    {
                      "description": "A UUID string identifying this document.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/documents/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "A human-readable label for the document. Defaults to the originally uploaded file's file name.",
                        "key": "label",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "The current status of the document\n\n* `ACTIVE` - Active",
                        "key": "status",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:DocumentStatus"
                          }
                        }
                      },
                      {
                        "description": "A JSON object containing any metadata associated with the document that you'd like to filter upon later.",
                        "key": "metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DocumentRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/documents/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "external_id": "external_id",
                      "last_uploaded_at": "2024-01-15T09:30:00Z",
                      "label": "label",
                      "processing_state": "QUEUED",
                      "status": "ACTIVE",
                      "original_file_url": "original_file_url",
                      "processed_file_url": "processed_file_url",
                      "document_to_document_indexes": [
                        {
                          "id": "id",
                          "document_index_id": "document_index_id",
                          "indexing_state": "AWAITING_PROCESSING"
                        }
                      ],
                      "metadata": {
                        "key": "value"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.partial_update(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.partial_update(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.partialUpdate(\"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Documents.PartialUpdate(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.PatchedDocumentUpdateRequest{},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "external_id": "external_id",
                        "last_uploaded_at": "2024-01-15T09:30:00Z",
                        "label": "label",
                        "processing_state": "QUEUED",
                        "status": "ACTIVE",
                        "original_file_url": "original_file_url",
                        "processed_file_url": "processed_file_url",
                        "document_to_document_indexes": [
                          {
                            "id": "id",
                            "document_index_id": "document_index_id",
                            "indexing_state": "AWAITING_PROCESSING"
                          }
                        ],
                        "metadata": {
                          "key": "value"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update a Document, keying off of either its Vellum-generated ID or its external ID. Particularly useful for updating its metadata.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://documents.vellum.ai"
                  }
                ],
                "availability": "GenerallyAvailable",
                "defaultEnvironment": "Production",
                "urlSlug": "upload",
                "method": "POST",
                "id": "upload",
                "originalEndpointId": "endpoint_documents.upload",
                "name": "Upload",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/upload-document"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "UploadDocumentBodyRequest",
                      "properties": [
                        {
                          "type": "bodyProperty",
                          "key": "add_to_index_names",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "list",
                              "itemType": {
                                "type": "primitive",
                                "value": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "description": "Optionally include the names of all indexes that you'd like this document to be included in"
                        },
                        {
                          "type": "bodyProperty",
                          "key": "external_id",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 1
                              }
                            }
                          },
                          "description": "Optionally include an external ID for this document. This is useful if you want to re-upload the same document later when its contents change and would like it to be re-indexed."
                        },
                        {
                          "type": "bodyProperty",
                          "key": "label",
                          "valueType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          },
                          "description": "A human-friendly name for this document. Typically the filename."
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "contents",
                            "isOptional": false
                          }
                        },
                        {
                          "type": "bodyProperty",
                          "key": "keywords",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "list",
                              "itemType": {
                                "type": "primitive",
                                "value": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "description": "Optionally include a list of keywords that'll be associated with this document. Used when performing keyword searches."
                        },
                        {
                          "type": "bodyProperty",
                          "key": "metadata",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "A stringified JSON object containing any metadata associated with the document that you'd like to filter upon later."
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:UploadDocumentResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:UploadDocumentErrorResponse"
                      }
                    },
                    "statusCode": 400,
                    "description": "",
                    "examples": []
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:UploadDocumentErrorResponse"
                      }
                    },
                    "statusCode": 404,
                    "description": "",
                    "examples": []
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_:UploadDocumentErrorResponse"
                      }
                    },
                    "statusCode": 500,
                    "description": "",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/upload-document",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "label": "label"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "document_id": "document_id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.upload(\n        label=\"label\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.upload(\n    label=\"label\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\nimport * as fs from \"fs\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.upload(fs.createReadStream(\"/path/to/your/file\"), {\n    label: \"label\"\n});\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Documents.Upload(\n\tcontext.TODO(),\n\t&vellumclientgo.UploadDocumentBodyRequest{\n\t\tLabel: \"label\",\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "add_to_index_names": {
                          "type": "json"
                        },
                        "external_id": {
                          "type": "json"
                        },
                        "label": {
                          "type": "json",
                          "value": "label"
                        },
                        "contents": {
                          "type": "filename",
                          "value": "<file1>"
                        },
                        "keywords": {
                          "type": "json"
                        },
                        "metadata": {
                          "type": "json"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "document_id": "document_id"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/upload-document",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 400,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.upload(\n        label=\"label\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.upload(\n    label=\"label\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\nimport * as fs from \"fs\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.upload(fs.createReadStream(\"/path/to/your/file\"), {\n    label: \"label\"\n});\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Documents.Upload(\n\tcontext.TODO(),\n\t&vellumclientgo.UploadDocumentBodyRequest{\n\t\tLabel: \"label\",\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "add_to_index_names": {
                          "type": "json"
                        },
                        "external_id": {
                          "type": "json"
                        },
                        "label": {
                          "type": "json",
                          "value": "string"
                        },
                        "contents": {
                          "type": "filename",
                          "value": "<filename1>"
                        },
                        "keywords": {
                          "type": "json"
                        },
                        "metadata": {
                          "type": "json"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/upload-document",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.upload(\n        label=\"label\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.upload(\n    label=\"label\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\nimport * as fs from \"fs\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.upload(fs.createReadStream(\"/path/to/your/file\"), {\n    label: \"label\"\n});\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Documents.Upload(\n\tcontext.TODO(),\n\t&vellumclientgo.UploadDocumentBodyRequest{\n\t\tLabel: \"label\",\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "add_to_index_names": {
                          "type": "json"
                        },
                        "external_id": {
                          "type": "json"
                        },
                        "label": {
                          "type": "json",
                          "value": "string"
                        },
                        "contents": {
                          "type": "filename",
                          "value": "<filename1>"
                        },
                        "keywords": {
                          "type": "json"
                        },
                        "metadata": {
                          "type": "json"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "string"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/upload-document",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.documents.upload(\n        label=\"label\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.upload(\n    label=\"label\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\nimport * as fs from \"fs\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.upload(fs.createReadStream(\"/path/to/your/file\"), {\n    label: \"label\"\n});\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Documents.Upload(\n\tcontext.TODO(),\n\t&vellumclientgo.UploadDocumentBodyRequest{\n\t\tLabel: \"label\",\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "form",
                      "value": {
                        "add_to_index_names": {
                          "type": "json"
                        },
                        "external_id": {
                          "type": "json"
                        },
                        "label": {
                          "type": "json",
                          "value": "string"
                        },
                        "contents": {
                          "type": "filename",
                          "value": "<filename1>"
                        },
                        "keywords": {
                          "type": "json"
                        },
                        "metadata": {
                          "type": "json"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Upload a document to be indexed and used for search.\n\n**Note:** Uses a base url of `https://documents.vellum.ai`.\n\nThis is a multipart/form-data request. The `contents` field should be a file upload. It also expects a JSON body with the following fields:\n\n- `add_to_index_names: list[str]` - Optionally include the names of all indexes that you'd like this document to be included in\n- `external_id: str | None` - Optionally include an external ID for this document. This is useful if you want to re-upload the same document later when its contents change and would like it to be re-indexed.\n- `label: str` - A human-friendly name for this document. Typically the filename.\n- `keywords: list[str] | None` - Optionally include a list of keywords that'll be associated with this document. Used when performing keyword searches.\n- `metadata: dict[str, Any]` - A stringified JSON object containing any metadata associated with the document that you'd like to filter upon later.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "documents",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_folderEntities": {
            "subpackageId": "subpackage_folderEntities",
            "name": "folderEntities",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "list",
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_folderEntities.list",
                "name": "List",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/folder-entities"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Filter down to only those objects whose entities have a status matching the status specified.\n\n- `ACTIVE` - Active\n- `ARCHIVED` - Archived",
                    "key": "entity_status",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_folderEntities:FolderEntitiesListRequestEntityStatus"
                      }
                    }
                  },
                  {
                    "description": "Number of results to return per page.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The initial index from which to return the results.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Which field to use when ordering the results.",
                    "key": "ordering",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter down to only those entities whose parent folder has the specified ID.\n\nTo filter by an entity's parent folder, provide the ID of the parent folder. To filter by the root directory, provide\na string representing the entity type of the root directory. Supported root directories include:\n\n- PROMPT_SANDBOX\n- WORKFLOW_SANDBOX\n- DOCUMENT_INDEX\n- TEST_SUITE",
                    "key": "parent_folder_id",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:PaginatedFolderEntityList"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/folder-entities",
                    "pathParameters": {},
                    "queryParameters": {
                      "parent_folder_id": "parent_folder_id"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "count": 123,
                      "next": "http://api.example.org/accounts/?offset=400&limit=100",
                      "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                      "results": [
                        {
                          "type": "TEST_SUITE",
                          "id": "results",
                          "data": {
                            "id": "id",
                            "label": "label",
                            "created": "2024-01-15T09:30:00Z",
                            "modified": "2024-01-15T09:30:00Z",
                            "status": "ACTIVE"
                          }
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.folder_entities.list(\n        parent_folder_id=\"parent_folder_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.folder_entities.list(\n    parent_folder_id=\"parent_folder_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.folderEntities.list({\n    parentFolderId: \"parent_folder_id\"\n});\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.FolderEntities.List(\n\tcontext.TODO(),\n\t&vellumclientgo.FolderEntitiesListRequest{\n\t\tParentFolderId: \"parent_folder_id\",\n\t},\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "count": 123,
                        "next": "http://api.example.org/accounts/?offset=400&limit=100",
                        "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                        "results": [
                          {
                            "type": "TEST_SUITE",
                            "id": "results",
                            "data": {
                              "id": "id",
                              "label": "label",
                              "created": "2024-01-15T09:30:00Z",
                              "modified": "2024-01-15T09:30:00Z",
                              "status": "ACTIVE"
                            }
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List all folder entities within a specified folder.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "add-entity-to-folder",
                "method": "POST",
                "id": "add_entity_to_folder",
                "originalEndpointId": "endpoint_folderEntities.add_entity_to_folder",
                "name": "Add Entity To Folder",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the folder to which the entity should be added. This can be a UUID of a folder, or the name of a root\ndirectory. Supported root directories include:\n\n- PROMPT_SANDBOX\n- WORKFLOW_SANDBOX\n- DOCUMENT_INDEX\n- TEST_SUITE",
                      "key": "folder_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/folders/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "folder_id"
                    },
                    {
                      "type": "literal",
                      "value": "/add-entity"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The ID of the entity you would like to move.",
                        "key": "entity_id",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/folders/folder_id/add-entity",
                    "pathParameters": {
                      "folder_id": "folder_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "entity_id": "entity_id"
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.folder_entities.add_entity_to_folder(\n        folder_id=\"folder_id\",\n        entity_id=\"entity_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.folder_entities.add_entity_to_folder(\n    folder_id=\"folder_id\",\n    entity_id=\"entity_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.folderEntities.addEntityToFolder(\"folder_id\", {\n    entityId: \"entity_id\"\n});\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.FolderEntities.AddEntityToFolder(\n\tcontext.TODO(),\n\t\"folder_id\",\n\t&vellumclientgo.AddEntityToFolderRequest{\n\t\tEntityId: \"entity_id\",\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "entity_id": "entity_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Add an entity to a specific folder or root directory.\n\nAdding an entity to a folder will remove it from any other folders it might have been a member of.",
                "authed": true
              }
            ],
            "types": ["type_folderEntities:FolderEntitiesListRequestEntityStatus"],
            "subpackages": [],
            "urlSlug": "folder-entities",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_sandboxes": {
            "subpackageId": "subpackage_sandboxes",
            "name": "sandboxes",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "deploy-prompt",
                "method": "POST",
                "id": "deploy_prompt",
                "originalEndpointId": "endpoint_sandboxes.deploy_prompt",
                "name": "Deploy Prompt",
                "path": {
                  "pathParameters": [
                    {
                      "description": "A UUID string identifying this sandbox.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "An ID identifying the Prompt you'd like to deploy.",
                      "key": "prompt_variant_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/sandboxes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/prompts/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "prompt_variant_id"
                    },
                    {
                      "type": "literal",
                      "value": "/deploy"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The Vellum-generated ID of the Prompt Deployment you'd like to update. Cannot specify both this and prompt_deployment_name. Leave null to create a new Prompt Deployment.",
                        "key": "prompt_deployment_id",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The unique name of the Prompt Deployment you'd like to either create or update. Cannot specify both this and prompt_deployment_id. If provided and matches an existing Prompt Deployment, that Prompt Deployment will be updated. Otherwise, a new Prompt Deployment will be created.",
                        "key": "prompt_deployment_name",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "In the event that a new Prompt Deployment is created, this will be the label it's given.",
                        "key": "label",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "Optionally provide the release tags that you'd like to be associated with the latest release of the created/updated Prompt Deployment.",
                        "key": "release_tags",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DeploymentRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/sandboxes/id/prompts/prompt_variant_id/deploy",
                    "pathParameters": {
                      "id": "id",
                      "prompt_variant_id": "prompt_variant_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "created": "2024-01-15T09:30:00Z",
                      "label": "label",
                      "name": "name",
                      "status": "ACTIVE",
                      "environment": "DEVELOPMENT",
                      "last_deployed_on": "2024-01-15T09:30:00Z",
                      "input_variables": [
                        {
                          "id": "id",
                          "key": "key",
                          "type": "STRING",
                          "required": true,
                          "default": {
                            "type": "SEARCH_RESULTS"
                          }
                        }
                      ],
                      "description": "description",
                      "active_model_version_ids": ["active_model_version_ids"],
                      "last_deployed_history_item_id": "last_deployed_history_item_id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.sandboxes.deploy_prompt(\n        id=\"id\",\n        prompt_variant_id=\"prompt_variant_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sandboxes.deploy_prompt(\n    id=\"id\",\n    prompt_variant_id=\"prompt_variant_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sandboxes.deployPrompt(\"id\", \"prompt_variant_id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Sandboxes.DeployPrompt(\n\tcontext.TODO(),\n\t\"id\",\n\t\"prompt_variant_id\",\n\t&vellumclientgo.DeploySandboxPromptRequest{},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "created": "2024-01-15T09:30:00Z",
                        "label": "label",
                        "name": "name",
                        "status": "ACTIVE",
                        "environment": "DEVELOPMENT",
                        "last_deployed_on": "2024-01-15T09:30:00Z",
                        "input_variables": [
                          {
                            "id": "id",
                            "key": "key",
                            "type": "STRING",
                            "required": true,
                            "default": {
                              "type": "SEARCH_RESULTS"
                            }
                          }
                        ],
                        "description": "description",
                        "active_model_version_ids": ["active_model_version_ids"],
                        "last_deployed_history_item_id": "last_deployed_history_item_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "upsert-sandbox-scenario",
                "method": "POST",
                "id": "upsert_sandbox_scenario",
                "originalEndpointId": "endpoint_sandboxes.upsert_sandbox_scenario",
                "name": "Upsert Sandbox Scenario",
                "path": {
                  "pathParameters": [
                    {
                      "description": "A UUID string identifying this sandbox.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/sandboxes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/scenarios"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "label",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "default": "Untitled Scenario"
                            }
                          }
                        }
                      },
                      {
                        "description": "The inputs for the scenario",
                        "key": "inputs",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "id",
                            "value": "type_:NamedScenarioInputRequest"
                          }
                        }
                      },
                      {
                        "description": "The id of the scenario to update. If none is provided, an id will be generated and a new scenario will be appended.",
                        "key": "scenario_id",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:SandboxScenario"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Basic Example",
                    "path": "/v1/sandboxes/id/scenarios",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "label": "Scenario 1",
                      "inputs": [
                        {
                          "type": "CHAT_HISTORY",
                          "value": [
                            {
                              "role": "SYSTEM"
                            }
                          ],
                          "name": "var_1"
                        },
                        {
                          "type": "CHAT_HISTORY",
                          "value": [
                            {
                              "role": "SYSTEM"
                            }
                          ],
                          "name": "var_2"
                        }
                      ]
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "label": "label",
                      "inputs": [
                        {
                          "type": "CHAT_HISTORY",
                          "value": [
                            {
                              "role": "SYSTEM"
                            }
                          ],
                          "input_variable_id": "inputs"
                        }
                      ],
                      "id": "id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, NamedScenarioInputStringVariableValueRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.sandboxes.upsert_sandbox_scenario(\n        id=\"id\",\n        label=\"Scenario 1\",\n        inputs=[\n            NamedScenarioInputStringVariableValueRequest(\n                value=\"Hello, world!\",\n                name=\"var_1\",\n            ),\n            NamedScenarioInputStringVariableValueRequest(\n                value=\"Why hello, there!\",\n                name=\"var_2\",\n            ),\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import NamedScenarioInputStringVariableValueRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sandboxes.upsert_sandbox_scenario(\n    id=\"id\",\n    label=\"Scenario 1\",\n    inputs=[\n        NamedScenarioInputStringVariableValueRequest(\n            value=\"Hello, world!\",\n            name=\"var_1\",\n        ),\n        NamedScenarioInputStringVariableValueRequest(\n            value=\"Why hello, there!\",\n            name=\"var_2\",\n        ),\n    ],\n)\n",
                        "exampleIdentifier": "Basic Example"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sandboxes.upsertSandboxScenario(\"id\", {\n    label: \"Scenario 1\",\n    inputs: [{\n            type: \"STRING\",\n            value: \"Hello, world!\",\n            name: \"var_1\"\n        }, {\n            type: \"STRING\",\n            value: \"Why hello, there!\",\n            name: \"var_2\"\n        }]\n});\n",
                        "exampleIdentifier": "Basic Example"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Sandboxes.UpsertSandboxScenario(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.UpsertSandboxScenarioRequest{\n\t\tLabel: vellumclientgo.String(\n\t\t\t\"Scenario 1\",\n\t\t),\n\t\tInputs: []*vellumclientgo.NamedScenarioInputRequest{\n\t\t\t&vellumclientgo.NamedScenarioInputRequest{\n\t\t\t\tNamedScenarioInputStringVariableValueRequest: &vellumclientgo.NamedScenarioInputStringVariableValueRequest{\n\t\t\t\t\tValue: vellumclientgo.String(\n\t\t\t\t\t\t\"Hello, world!\",\n\t\t\t\t\t),\n\t\t\t\t\tName: \"var_1\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t&vellumclientgo.NamedScenarioInputRequest{\n\t\t\t\tNamedScenarioInputStringVariableValueRequest: &vellumclientgo.NamedScenarioInputStringVariableValueRequest{\n\t\t\t\t\tValue: vellumclientgo.String(\n\t\t\t\t\t\t\"Why hello, there!\",\n\t\t\t\t\t),\n\t\t\t\t\tName: \"var_2\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "label": "Scenario 1",
                        "inputs": [
                          {
                            "type": "CHAT_HISTORY",
                            "value": [
                              {
                                "role": "SYSTEM"
                              }
                            ],
                            "name": "var_1"
                          },
                          {
                            "type": "CHAT_HISTORY",
                            "value": [
                              {
                                "role": "SYSTEM"
                              }
                            ],
                            "name": "var_2"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "label": "label",
                        "inputs": [
                          {
                            "type": "CHAT_HISTORY",
                            "value": [
                              {
                                "role": "SYSTEM"
                              }
                            ],
                            "input_variable_id": "inputs"
                          }
                        ],
                        "id": "id"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "name": "Chat History Example",
                    "path": "/v1/sandboxes/id/scenarios",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "label": "Scenario 2",
                      "inputs": [
                        {
                          "type": "CHAT_HISTORY",
                          "value": [
                            {
                              "text": "What's your favorite color?",
                              "role": "USER"
                            },
                            {
                              "text": "AI's don't have a favorite color.... Yet.",
                              "role": "ASSISTANT"
                            }
                          ],
                          "name": "chat_history"
                        }
                      ]
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "label": "label",
                      "inputs": [
                        {
                          "type": "CHAT_HISTORY",
                          "value": [
                            {
                              "role": "SYSTEM"
                            }
                          ],
                          "input_variable_id": "inputs"
                        }
                      ],
                      "id": "id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    ChatMessageRequest,\n    NamedScenarioInputChatHistoryVariableValueRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.sandboxes.upsert_sandbox_scenario(\n        id=\"id\",\n        label=\"Scenario 2\",\n        inputs=[\n            NamedScenarioInputChatHistoryVariableValueRequest(\n                value=[\n                    ChatMessageRequest(\n                        text=\"What's your favorite color?\",\n                        role=\"USER\",\n                    ),\n                    ChatMessageRequest(\n                        text=\"AI's don't have a favorite color.... Yet.\",\n                        role=\"ASSISTANT\",\n                    ),\n                ],\n                name=\"chat_history\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import (\n    ChatMessageRequest,\n    NamedScenarioInputChatHistoryVariableValueRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sandboxes.upsert_sandbox_scenario(\n    id=\"id\",\n    label=\"Scenario 2\",\n    inputs=[\n        NamedScenarioInputChatHistoryVariableValueRequest(\n            value=[\n                ChatMessageRequest(\n                    text=\"What's your favorite color?\",\n                    role=\"USER\",\n                ),\n                ChatMessageRequest(\n                    text=\"AI's don't have a favorite color.... Yet.\",\n                    role=\"ASSISTANT\",\n                ),\n            ],\n            name=\"chat_history\",\n        )\n    ],\n)\n",
                        "exampleIdentifier": "Chat History Example"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sandboxes.upsertSandboxScenario(\"id\", {\n    label: \"Scenario 2\",\n    inputs: [{\n            type: \"CHAT_HISTORY\",\n            value: [{\n                    text: \"What's your favorite color?\",\n                    role: \"USER\"\n                }, {\n                    text: \"AI's don't have a favorite color.... Yet.\",\n                    role: \"ASSISTANT\"\n                }],\n            name: \"chat_history\"\n        }]\n});\n",
                        "exampleIdentifier": "Chat History Example"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Sandboxes.UpsertSandboxScenario(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.UpsertSandboxScenarioRequest{\n\t\tLabel: vellumclientgo.String(\n\t\t\t\"Scenario 1\",\n\t\t),\n\t\tInputs: []*vellumclientgo.NamedScenarioInputRequest{\n\t\t\t&vellumclientgo.NamedScenarioInputRequest{\n\t\t\t\tNamedScenarioInputStringVariableValueRequest: &vellumclientgo.NamedScenarioInputStringVariableValueRequest{\n\t\t\t\t\tValue: vellumclientgo.String(\n\t\t\t\t\t\t\"Hello, world!\",\n\t\t\t\t\t),\n\t\t\t\t\tName: \"var_1\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t&vellumclientgo.NamedScenarioInputRequest{\n\t\t\t\tNamedScenarioInputStringVariableValueRequest: &vellumclientgo.NamedScenarioInputStringVariableValueRequest{\n\t\t\t\t\tValue: vellumclientgo.String(\n\t\t\t\t\t\t\"Why hello, there!\",\n\t\t\t\t\t),\n\t\t\t\t\tName: \"var_2\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "label": "Scenario 2",
                        "inputs": [
                          {
                            "type": "CHAT_HISTORY",
                            "value": [
                              {
                                "text": "What's your favorite color?",
                                "role": "USER"
                              },
                              {
                                "text": "AI's don't have a favorite color.... Yet.",
                                "role": "ASSISTANT"
                              }
                            ],
                            "name": "chat_history"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "label": "label",
                        "inputs": [
                          {
                            "type": "CHAT_HISTORY",
                            "value": [
                              {
                                "role": "SYSTEM"
                              }
                            ],
                            "input_variable_id": "inputs"
                          }
                        ],
                        "id": "id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Upserts a new scenario for a sandbox, keying off of the optionally provided scenario id.\n\nIf an id is provided and has a match, the scenario will be updated. If no id is provided or no match\nis found, a new scenario will be appended to the end.\n\nNote that a full replacement of the scenario is performed, so any fields not provided will be removed\nor overwritten with default values.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "delete-sandbox-scenario",
                "method": "DELETE",
                "id": "delete_sandbox_scenario",
                "originalEndpointId": "endpoint_sandboxes.delete_sandbox_scenario",
                "name": "Delete Sandbox Scenario",
                "path": {
                  "pathParameters": [
                    {
                      "description": "A UUID string identifying this sandbox.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "An id identifying the scenario that you'd like to delete",
                      "key": "scenario_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/sandboxes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/scenarios/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "scenario_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/sandboxes/id/scenarios/scenario_id",
                    "pathParameters": {
                      "id": "id",
                      "scenario_id": "scenario_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.sandboxes.delete_sandbox_scenario(\n        id=\"id\",\n        scenario_id=\"scenario_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sandboxes.delete_sandbox_scenario(\n    id=\"id\",\n    scenario_id=\"scenario_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sandboxes.deleteSandboxScenario(\"id\", \"scenario_id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.Sandboxes.DeleteSandboxScenario(\n\tcontext.TODO(),\n\t\"id\",\n\t\"scenario_id\",\n)\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Deletes an existing scenario from a sandbox, keying off of the provided scenario id.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "sandboxes",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_testSuiteRuns": {
            "subpackageId": "subpackage_testSuiteRuns",
            "name": "testSuiteRuns",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "create",
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_testSuiteRuns.create",
                "name": "Create",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/test-suite-runs"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The ID of the Test Suite to run. Must provide either this or test_suite_id.",
                        "key": "test_suite_id",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The name of the Test Suite to run. Must provide either this or test_suite_id.",
                        "key": "test_suite_name",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "Configuration that defines how the Test Suite should be run",
                        "key": "exec_config",
                        "valueType": {
                          "type": "id",
                          "value": "type_:TestSuiteRunExecConfigRequest"
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:TestSuiteRunRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/test-suite-runs",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "exec_config": {
                        "type": "EXTERNAL",
                        "data": {
                          "executions": [
                            {
                              "outputs": [
                                {
                                  "type": "ARRAY",
                                  "name": "outputs"
                                }
                              ],
                              "test_case_id": "test_case_id"
                            }
                          ]
                        }
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "created": "2024-01-15T09:30:00Z",
                      "test_suite": {
                        "id": "id",
                        "history_item_id": "history_item_id",
                        "label": "label"
                      },
                      "state": "QUEUED",
                      "exec_config": {
                        "type": "EXTERNAL",
                        "data": {
                          "executions": [
                            {
                              "outputs": [
                                {
                                  "type": "ARRAY",
                                  "name": "outputs"
                                }
                              ],
                              "test_case_id": "test_case_id"
                            }
                          ]
                        },
                        "test_case_ids": ["exec_config"]
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    TestSuiteRunDeploymentReleaseTagExecConfigDataRequest,\n    TestSuiteRunDeploymentReleaseTagExecConfigRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.test_suite_runs.create(\n        exec_config=TestSuiteRunDeploymentReleaseTagExecConfigRequest(\n            data=TestSuiteRunDeploymentReleaseTagExecConfigDataRequest(\n                deployment_id=\"deployment_id\",\n            ),\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import (\n    TestSuiteRunDeploymentReleaseTagExecConfigDataRequest,\n    TestSuiteRunDeploymentReleaseTagExecConfigRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.test_suite_runs.create(\n    exec_config=TestSuiteRunDeploymentReleaseTagExecConfigRequest(\n        data=TestSuiteRunDeploymentReleaseTagExecConfigDataRequest(\n            deployment_id=\"deployment_id\",\n        ),\n    ),\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.testSuiteRuns.create({\n    execConfig: {\n        type: \"DEPLOYMENT_RELEASE_TAG\",\n        data: {\n            deploymentId: \"deployment_id\"\n        }\n    }\n});\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.TestSuiteRuns.Create(\n\tcontext.TODO(),\n\t&vellumclientgo.TestSuiteRunCreateRequest{\n\t\tExecConfig: &vellumclientgo.TestSuiteRunExecConfigRequest{\n\t\t\tTestSuiteRunDeploymentReleaseTagExecConfigRequest: &vellumclientgo.TestSuiteRunDeploymentReleaseTagExecConfigRequest{\n\t\t\t\tData: &vellumclientgo.TestSuiteRunDeploymentReleaseTagExecConfigDataRequest{\n\t\t\t\t\tDeploymentId: \"deployment_id\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "exec_config": {
                          "type": "EXTERNAL",
                          "data": {
                            "executions": [
                              {
                                "outputs": [
                                  {
                                    "type": "ARRAY",
                                    "name": "outputs"
                                  }
                                ],
                                "test_case_id": "test_case_id"
                              }
                            ]
                          }
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "created": "2024-01-15T09:30:00Z",
                        "test_suite": {
                          "id": "id",
                          "history_item_id": "history_item_id",
                          "label": "label"
                        },
                        "state": "QUEUED",
                        "exec_config": {
                          "type": "EXTERNAL",
                          "data": {
                            "executions": [
                              {
                                "outputs": [
                                  {
                                    "type": "ARRAY",
                                    "name": "outputs"
                                  }
                                ],
                                "test_case_id": "test_case_id"
                              }
                            ]
                          },
                          "test_case_ids": ["exec_config"]
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Trigger a Test Suite and create a new Test Suite Run",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "retrieve",
                "method": "GET",
                "id": "retrieve",
                "originalEndpointId": "endpoint_testSuiteRuns.retrieve",
                "name": "Retrieve",
                "path": {
                  "pathParameters": [
                    {
                      "description": "A UUID string identifying this test suite run.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/test-suite-runs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:TestSuiteRunRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/test-suite-runs/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "created": "2024-01-15T09:30:00Z",
                      "test_suite": {
                        "id": "id",
                        "history_item_id": "history_item_id",
                        "label": "label"
                      },
                      "state": "QUEUED",
                      "exec_config": {
                        "type": "EXTERNAL",
                        "data": {
                          "executions": [
                            {
                              "outputs": [
                                {
                                  "type": "ARRAY",
                                  "name": "outputs"
                                }
                              ],
                              "test_case_id": "test_case_id"
                            }
                          ]
                        },
                        "test_case_ids": ["exec_config"]
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.test_suite_runs.retrieve(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.test_suite_runs.retrieve(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.testSuiteRuns.retrieve(\"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.TestSuiteRuns.Retrieve(\n\tcontext.TODO(),\n\t\"id\",\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "created": "2024-01-15T09:30:00Z",
                        "test_suite": {
                          "id": "id",
                          "history_item_id": "history_item_id",
                          "label": "label"
                        },
                        "state": "QUEUED",
                        "exec_config": {
                          "type": "EXTERNAL",
                          "data": {
                            "executions": [
                              {
                                "outputs": [
                                  {
                                    "type": "ARRAY",
                                    "name": "outputs"
                                  }
                                ],
                                "test_case_id": "test_case_id"
                              }
                            ]
                          },
                          "test_case_ids": ["exec_config"]
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Retrieve a specific Test Suite Run by ID",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "list-executions",
                "method": "GET",
                "id": "listExecutions",
                "originalEndpointId": "endpoint_testSuiteRuns.listExecutions",
                "name": "List Executions",
                "path": {
                  "pathParameters": [
                    {
                      "description": "A UUID string identifying this test suite run.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/test-suite-runs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/executions"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The response fields to expand for more information.\n\n- 'results.metric_results.metric_label' expands the metric label for each metric result.\n- 'results.metric_results.metric_definition' expands the metric definition for each metric result.\n- 'results.metric_results.metric_definition.name' expands the metric definition name for each metric result.",
                    "key": "expand",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Number of results to return per page.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The initial index from which to return the results.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:PaginatedTestSuiteRunExecutionList"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/test-suite-runs/id/executions",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "count": 123,
                      "next": "http://api.example.org/accounts/?offset=400&limit=100",
                      "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                      "results": [
                        {
                          "id": "id",
                          "test_case_id": "test_case_id",
                          "outputs": [
                            {
                              "type": "ARRAY",
                              "name": "outputs",
                              "output_variable_id": "outputs"
                            }
                          ],
                          "metric_results": [
                            {
                              "metric_id": "metric_id",
                              "outputs": [
                                {
                                  "type": "ERROR",
                                  "value": {
                                    "message": "message",
                                    "code": "INVALID_REQUEST"
                                  },
                                  "name": "outputs"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.test_suite_runs.list_executions(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.test_suite_runs.list_executions(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.testSuiteRuns.listExecutions(\"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.TestSuiteRuns.ListExecutions(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.TestSuiteRunsListExecutionsRequest{},\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "count": 123,
                        "next": "http://api.example.org/accounts/?offset=400&limit=100",
                        "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                        "results": [
                          {
                            "id": "id",
                            "test_case_id": "test_case_id",
                            "outputs": [
                              {
                                "type": "ARRAY",
                                "name": "outputs",
                                "output_variable_id": "outputs"
                              }
                            ],
                            "metric_results": [
                              {
                                "metric_id": "metric_id",
                                "outputs": [
                                  {
                                    "type": "ERROR",
                                    "value": {
                                      "message": "message",
                                      "code": "INVALID_REQUEST"
                                    },
                                    "name": "outputs"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "test-suite-runs",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_testSuites": {
            "subpackageId": "subpackage_testSuites",
            "name": "testSuites",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "list-test-suite-test-cases",
                "method": "GET",
                "id": "list_test_suite_test_cases",
                "originalEndpointId": "endpoint_testSuites.list_test_suite_test_cases",
                "name": "List Test Suite Test Cases",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Either the Test Suites' ID or its unique name",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/test-suites/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/test-cases"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Number of results to return per page.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The initial index from which to return the results.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:PaginatedTestSuiteTestCaseList"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/test-suites/id/test-cases",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "count": 123,
                      "next": "http://api.example.org/accounts/?offset=400&limit=100",
                      "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                      "results": [
                        {
                          "id": "id",
                          "external_id": "external_id",
                          "label": "label",
                          "input_values": [
                            {
                              "type": "ARRAY",
                              "variable_id": "input_values",
                              "name": "input_values"
                            }
                          ],
                          "evaluation_values": [
                            {
                              "type": "ARRAY",
                              "variable_id": "evaluation_values",
                              "name": "evaluation_values"
                            }
                          ]
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.test_suites.list_test_suite_test_cases(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.test_suites.list_test_suite_test_cases(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.testSuites.listTestSuiteTestCases(\"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.TestSuites.ListTestSuiteTestCases(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.ListTestSuiteTestCasesRequest{},\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "count": 123,
                        "next": "http://api.example.org/accounts/?offset=400&limit=100",
                        "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                        "results": [
                          {
                            "id": "id",
                            "external_id": "external_id",
                            "label": "label",
                            "input_values": [
                              {
                                "type": "ARRAY",
                                "variable_id": "input_values",
                                "name": "input_values"
                              }
                            ],
                            "evaluation_values": [
                              {
                                "type": "ARRAY",
                                "variable_id": "evaluation_values",
                                "name": "evaluation_values"
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List the Test Cases associated with a Test Suite",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "upsert-test-suite-test-case",
                "method": "POST",
                "id": "upsert_test_suite_test_case",
                "originalEndpointId": "endpoint_testSuites.upsert_test_suite_test_case",
                "name": "Upsert Test Suite Test Case",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Either the Test Suites' ID or its unique name",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/test-suites/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/test-cases"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:UpsertTestSuiteTestCaseRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:TestSuiteTestCase"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/test-suites/id/test-cases",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "input_values": [
                        {
                          "type": "ARRAY",
                          "name": "input_values"
                        }
                      ],
                      "evaluation_values": [
                        {
                          "type": "ARRAY",
                          "name": "evaluation_values"
                        }
                      ]
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "external_id": "external_id",
                      "label": "label",
                      "input_values": [
                        {
                          "type": "ARRAY",
                          "variable_id": "input_values",
                          "name": "input_values",
                          "value": [
                            {
                              "type": "SEARCH_RESULTS"
                            }
                          ]
                        }
                      ],
                      "evaluation_values": [
                        {
                          "type": "ARRAY",
                          "variable_id": "evaluation_values",
                          "name": "evaluation_values",
                          "value": [
                            {
                              "type": "SEARCH_RESULTS"
                            }
                          ]
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum, NamedTestCaseStringVariableValueRequest\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.test_suites.upsert_test_suite_test_case(\n        id_=\"id\",\n        input_values=[\n            NamedTestCaseStringVariableValueRequest(\n                name=\"name\",\n            )\n        ],\n        evaluation_values=[\n            NamedTestCaseStringVariableValueRequest(\n                name=\"name\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import NamedTestCaseStringVariableValueRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.test_suites.upsert_test_suite_test_case(\n    id_=\"id\",\n    input_values=[\n        NamedTestCaseStringVariableValueRequest(\n            name=\"name\",\n        )\n    ],\n    evaluation_values=[\n        NamedTestCaseStringVariableValueRequest(\n            name=\"name\",\n        )\n    ],\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.testSuites.upsertTestSuiteTestCase(\"id\", {\n    inputValues: [{\n            type: \"STRING\",\n            name: \"name\"\n        }],\n    evaluationValues: [{\n            type: \"STRING\",\n            name: \"name\"\n        }]\n});\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.TestSuites.UpsertTestSuiteTestCase(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.UpsertTestSuiteTestCaseRequest{\n\t\tInputValues: []*vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t&vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t\tNamedTestCaseStringVariableValueRequest: &vellumclientgo.NamedTestCaseStringVariableValueRequest{\n\t\t\t\t\tName: \"name\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tEvaluationValues: []*vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t&vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t\tNamedTestCaseStringVariableValueRequest: &vellumclientgo.NamedTestCaseStringVariableValueRequest{\n\t\t\t\t\tName: \"name\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "input_values": [
                          {
                            "type": "ARRAY",
                            "name": "input_values"
                          }
                        ],
                        "evaluation_values": [
                          {
                            "type": "ARRAY",
                            "name": "evaluation_values"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "external_id": "external_id",
                        "label": "label",
                        "input_values": [
                          {
                            "type": "ARRAY",
                            "variable_id": "input_values",
                            "name": "input_values",
                            "value": [
                              {
                                "type": "SEARCH_RESULTS"
                              }
                            ]
                          }
                        ],
                        "evaluation_values": [
                          {
                            "type": "ARRAY",
                            "variable_id": "evaluation_values",
                            "name": "evaluation_values",
                            "value": [
                              {
                                "type": "SEARCH_RESULTS"
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Upserts a new test case for a test suite, keying off of the optionally provided test case id.\n\nIf an id is provided and has a match, the test case will be updated. If no id is provided or no match\nis found, a new test case will be appended to the end.\n\nNote that a full replacement of the test case is performed, so any fields not provided will be removed\nor overwritten with default values.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "test-suite-test-cases-bulk",
                "method": "POST",
                "id": "test_suite_test_cases_bulk",
                "originalEndpointId": "endpoint_testSuites.test_suite_test_cases_bulk",
                "name": "Test Suite Test Cases Bulk",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Either the Test Suites' ID or its unique name",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/test-suites/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/test-cases-bulk"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:TestSuiteTestCaseBulkOperationRequest"
                      }
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "stream",
                    "shape": {
                      "type": "reference",
                      "value": {
                        "type": "list",
                        "itemType": {
                          "type": "id",
                          "value": "type_:TestSuiteTestCaseBulkResult"
                        }
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/test-suites/:id/test-cases-bulk",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import (\n    AsyncVellum,\n    CreateTestSuiteTestCaseRequest,\n    NamedTestCaseStringVariableValueRequest,\n    TestSuiteTestCaseCreateBulkOperationRequest,\n)\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.test_suites.test_suite_test_cases_bulk(\n        id=\"string\",\n        request=[\n            TestSuiteTestCaseCreateBulkOperationRequest(\n                id=\"string\",\n                data=CreateTestSuiteTestCaseRequest(\n                    label=\"string\",\n                    input_values=[\n                        NamedTestCaseStringVariableValueRequest(\n                            value=\"string\",\n                            name=\"string\",\n                        )\n                    ],\n                    evaluation_values=[\n                        NamedTestCaseStringVariableValueRequest(\n                            value=\"string\",\n                            name=\"string\",\n                        )\n                    ],\n                    external_id=\"string\",\n                ),\n            )\n        ],\n    )\n    async for chunk in response:\n        yield chunk\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import (\n    CreateTestSuiteTestCaseRequest,\n    NamedTestCaseStringVariableValueRequest,\n    TestSuiteTestCaseCreateBulkOperationRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.test_suites.test_suite_test_cases_bulk(\n    id=\"string\",\n    request=[\n        TestSuiteTestCaseCreateBulkOperationRequest(\n            id=\"string\",\n            data=CreateTestSuiteTestCaseRequest(\n                label=\"string\",\n                input_values=[\n                    NamedTestCaseStringVariableValueRequest(\n                        value=\"string\",\n                        name=\"string\",\n                    )\n                ],\n                evaluation_values=[\n                    NamedTestCaseStringVariableValueRequest(\n                        value=\"string\",\n                        name=\"string\",\n                    )\n                ],\n                external_id=\"string\",\n            ),\n        )\n    ],\n)\nfor chunk in response:\n    yield chunk\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.testSuites.testSuiteTestCasesBulk(\"string\", [{\n        id: \"string\",\n        type: \"CREATE\",\n        data: {\n            label: \"string\",\n            inputValues: [{\n                    type: \"STRING\",\n                    value: \"string\",\n                    name: \"string\"\n                }],\n            evaluationValues: [{\n                    type: \"STRING\",\n                    value: \"string\",\n                    name: \"string\"\n                }],\n            externalId: \"string\"\n        }\n    }]);\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.TestSuites.TestSuiteTestCasesBulk(\n\tcontext.TODO(),\n\t\"string\",\n\t[]*vellumclientgo.TestSuiteTestCaseBulkOperationRequest{\n\t\t&vellumclientgo.TestSuiteTestCaseBulkOperationRequest{\n\t\t\tTestSuiteTestCaseCreateBulkOperationRequest: &vellumclientgo.TestSuiteTestCaseCreateBulkOperationRequest{\n\t\t\t\tId: \"string\",\n\t\t\t\tData: &vellumclientgo.CreateTestSuiteTestCaseRequest{\n\t\t\t\t\tLabel: vellumclientgo.String(\n\t\t\t\t\t\t\"string\",\n\t\t\t\t\t),\n\t\t\t\t\tInputValues: []*vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t\t\t\t&vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t\t\t\t\tNamedTestCaseStringVariableValueRequest: &vellumclientgo.NamedTestCaseStringVariableValueRequest{\n\t\t\t\t\t\t\t\tValue: vellumclientgo.String(\n\t\t\t\t\t\t\t\t\t\"string\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tName: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tEvaluationValues: []*vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t\t\t\t&vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t\t\t\t\tNamedTestCaseStringVariableValueRequest: &vellumclientgo.NamedTestCaseStringVariableValueRequest{\n\t\t\t\t\t\t\t\tValue: vellumclientgo.String(\n\t\t\t\t\t\t\t\t\t\"string\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tName: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tExternalId: vellumclientgo.String(\n\t\t\t\t\t\t\"string\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "type": "CREATE",
                          "id": "string",
                          "data": {
                            "input_values": [
                              {
                                "type": "STRING",
                                "name": "string"
                              }
                            ],
                            "evaluation_values": [
                              {
                                "type": "STRING",
                                "name": "string"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "responseBodyV3": {
                      "type": "stream",
                      "value": [
                        [
                          {
                            "type": "CREATED",
                            "id": "string",
                            "data": {
                              "id": "string"
                            }
                          }
                        ],
                        [
                          {
                            "type": "CREATED",
                            "id": "string",
                            "data": {
                              "id": "string"
                            }
                          }
                        ]
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Created, replace, and delete Test Cases within the specified Test Suite in bulk",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "delete-test-suite-test-case",
                "method": "DELETE",
                "id": "delete_test_suite_test_case",
                "originalEndpointId": "endpoint_testSuites.delete_test_suite_test_case",
                "name": "Delete Test Suite Test Case",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Either the Test Suites' ID or its unique name",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "An id identifying the test case that you'd like to delete",
                      "key": "test_case_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/test-suites/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/test-cases/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "test_case_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/test-suites/id/test-cases/test_case_id",
                    "pathParameters": {
                      "id": "id",
                      "test_case_id": "test_case_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.test_suites.delete_test_suite_test_case(\n        id=\"id\",\n        test_case_id=\"test_case_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.test_suites.delete_test_suite_test_case(\n    id=\"id\",\n    test_case_id=\"test_case_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.testSuites.deleteTestSuiteTestCase(\"id\", \"test_case_id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.TestSuites.DeleteTestSuiteTestCase(\n\tcontext.TODO(),\n\t\"id\",\n\t\"test_case_id\",\n)\n"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Deletes an existing test case for a test suite, keying off of the test case id.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "test-suites",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_workflowDeployments": {
            "subpackageId": "subpackage_workflowDeployments",
            "name": "workflowDeployments",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "list",
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_workflowDeployments.list",
                "name": "List",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/workflow-deployments"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Number of results to return per page.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The initial index from which to return the results.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Which field to use when ordering the results.",
                    "key": "ordering",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "status",
                    "key": "status",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_workflowDeployments:WorkflowDeploymentsListRequestStatus"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:PaginatedSlimWorkflowDeploymentList"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/workflow-deployments",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "count": 123,
                      "next": "http://api.example.org/accounts/?offset=400&limit=100",
                      "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                      "results": [
                        {
                          "id": "id",
                          "name": "name",
                          "label": "label",
                          "status": "ACTIVE",
                          "environment": "DEVELOPMENT",
                          "created": "2024-01-15T09:30:00Z",
                          "last_deployed_on": "2024-01-15T09:30:00Z",
                          "input_variables": [
                            {
                              "id": "id",
                              "key": "key",
                              "type": "STRING"
                            }
                          ],
                          "output_variables": [
                            {
                              "id": "id",
                              "key": "key",
                              "type": "STRING"
                            }
                          ],
                          "description": "description"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflow_deployments.list()\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflow_deployments.list()\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflowDeployments.list();\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.WorkflowDeployments.List(\n\tcontext.TODO(),\n\t&vellumclientgo.WorkflowDeploymentsListRequest{},\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "count": 123,
                        "next": "http://api.example.org/accounts/?offset=400&limit=100",
                        "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                        "results": [
                          {
                            "id": "id",
                            "name": "name",
                            "label": "label",
                            "status": "ACTIVE",
                            "environment": "DEVELOPMENT",
                            "created": "2024-01-15T09:30:00Z",
                            "last_deployed_on": "2024-01-15T09:30:00Z",
                            "input_variables": [
                              {
                                "id": "id",
                                "key": "key",
                                "type": "STRING"
                              }
                            ],
                            "output_variables": [
                              {
                                "id": "id",
                                "key": "key",
                                "type": "STRING"
                              }
                            ],
                            "description": "description"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Used to list all Workflow Deployments.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "retrieve",
                "method": "GET",
                "id": "retrieve",
                "originalEndpointId": "endpoint_workflowDeployments.retrieve",
                "name": "Retrieve",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Either the Workflow Deployment's ID or its unique name",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/workflow-deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WorkflowDeploymentRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/workflow-deployments/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "name": "name",
                      "label": "label",
                      "status": "ACTIVE",
                      "environment": "DEVELOPMENT",
                      "created": "2024-01-15T09:30:00Z",
                      "last_deployed_on": "2024-01-15T09:30:00Z",
                      "last_deployed_history_item_id": "last_deployed_history_item_id",
                      "input_variables": [
                        {
                          "id": "id",
                          "key": "key",
                          "type": "STRING",
                          "required": true,
                          "default": {
                            "type": "SEARCH_RESULTS"
                          }
                        }
                      ],
                      "output_variables": [
                        {
                          "id": "id",
                          "key": "key",
                          "type": "STRING",
                          "required": true,
                          "default": {
                            "type": "SEARCH_RESULTS"
                          }
                        }
                      ],
                      "description": "description"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflow_deployments.retrieve(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflow_deployments.retrieve(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflowDeployments.retrieve(\"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.WorkflowDeployments.Retrieve(\n\tcontext.TODO(),\n\t\"id\",\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "name": "name",
                        "label": "label",
                        "status": "ACTIVE",
                        "environment": "DEVELOPMENT",
                        "created": "2024-01-15T09:30:00Z",
                        "last_deployed_on": "2024-01-15T09:30:00Z",
                        "last_deployed_history_item_id": "last_deployed_history_item_id",
                        "input_variables": [
                          {
                            "id": "id",
                            "key": "key",
                            "type": "STRING",
                            "required": true,
                            "default": {
                              "type": "SEARCH_RESULTS"
                            }
                          }
                        ],
                        "output_variables": [
                          {
                            "id": "id",
                            "key": "key",
                            "type": "STRING",
                            "required": true,
                            "default": {
                              "type": "SEARCH_RESULTS"
                            }
                          }
                        ],
                        "description": "description"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Used to retrieve a workflow deployment given its ID or name.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "retrieve-workflow-release-tag",
                "method": "GET",
                "id": "retrieve_workflow_release_tag",
                "originalEndpointId": "endpoint_workflowDeployments.retrieve_workflow_release_tag",
                "name": "Retrieve Workflow Release Tag",
                "path": {
                  "pathParameters": [
                    {
                      "description": "A UUID string identifying this workflow deployment.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The name of the Release Tag associated with this Workflow Deployment that you'd like to retrieve.",
                      "key": "name",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/workflow-deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/release-tags/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "name"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WorkflowReleaseTagRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/workflow-deployments/id/release-tags/name",
                    "pathParameters": {
                      "id": "id",
                      "name": "name"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "name": "name",
                      "source": "SYSTEM",
                      "history_item": {
                        "id": "id",
                        "timestamp": "2024-01-15T09:30:00Z"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflow_deployments.retrieve_workflow_release_tag(\n        id=\"id\",\n        name=\"name\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflow_deployments.retrieve_workflow_release_tag(\n    id=\"id\",\n    name=\"name\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflowDeployments.retrieveWorkflowReleaseTag(\"id\", \"name\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.WorkflowDeployments.RetrieveWorkflowReleaseTag(\n\tcontext.TODO(),\n\t\"id\",\n\t\"name\",\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "name",
                        "source": "SYSTEM",
                        "history_item": {
                          "id": "id",
                          "timestamp": "2024-01-15T09:30:00Z"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Retrieve a Workflow Release Tag by tag name, associated with a specified Workflow Deployment.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "update-workflow-release-tag",
                "method": "PATCH",
                "id": "update_workflow_release_tag",
                "originalEndpointId": "endpoint_workflowDeployments.update_workflow_release_tag",
                "name": "Update Workflow Release Tag",
                "path": {
                  "pathParameters": [
                    {
                      "description": "A UUID string identifying this workflow deployment.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The name of the Release Tag associated with this Workflow Deployment that you'd like to update.",
                      "key": "name",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/workflow-deployments/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/release-tags/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "name"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The ID of the Workflow Deployment History Item to tag",
                        "key": "history_item_id",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WorkflowReleaseTagRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/workflow-deployments/id/release-tags/name",
                    "pathParameters": {
                      "id": "id",
                      "name": "name"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "name": "name",
                      "source": "SYSTEM",
                      "history_item": {
                        "id": "id",
                        "timestamp": "2024-01-15T09:30:00Z"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflow_deployments.update_workflow_release_tag(\n        id=\"id\",\n        name=\"name\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflow_deployments.update_workflow_release_tag(\n    id=\"id\",\n    name=\"name\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflowDeployments.updateWorkflowReleaseTag(\"id\", \"name\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.WorkflowDeployments.UpdateWorkflowReleaseTag(\n\tcontext.TODO(),\n\t\"id\",\n\t\"name\",\n\t&vellumclientgo.PatchedWorkflowReleaseTagUpdateRequest{},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "name",
                        "source": "SYSTEM",
                        "history_item": {
                          "id": "id",
                          "timestamp": "2024-01-15T09:30:00Z"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates an existing Release Tag associated with the specified Workflow Deployment.",
                "authed": true
              }
            ],
            "types": ["type_workflowDeployments:WorkflowDeploymentsListRequestStatus"],
            "subpackages": [],
            "urlSlug": "workflow-deployments",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_workflowSandboxes": {
            "subpackageId": "subpackage_workflowSandboxes",
            "name": "workflowSandboxes",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "deploy-workflow",
                "method": "POST",
                "id": "deploy_workflow",
                "originalEndpointId": "endpoint_workflowSandboxes.deploy_workflow",
                "name": "Deploy Workflow",
                "path": {
                  "pathParameters": [
                    {
                      "description": "A UUID string identifying this workflow sandbox.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "An ID identifying the Workflow you'd like to deploy.",
                      "key": "workflow_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/workflow-sandboxes/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/workflows/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "workflow_id"
                    },
                    {
                      "type": "literal",
                      "value": "/deploy"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The Vellum-generated ID of the Workflow Deployment you'd like to update. Cannot specify both this and workflow_deployment_name. Leave null to create a new Workflow Deployment.",
                        "key": "workflow_deployment_id",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The unique name of the Workflow Deployment you'd like to either create or update. Cannot specify both this and workflow_deployment_id. If provided and matches an existing Workflow Deployment, that Workflow Deployment will be updated. Otherwise, a new Prompt Deployment will be created.",
                        "key": "workflow_deployment_name",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "In the event that a new Workflow Deployment is created, this will be the label it's given.",
                        "key": "label",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "Optionally provide the release tags that you'd like to be associated with the latest release of the created/updated Prompt Deployment.",
                        "key": "release_tags",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WorkflowDeploymentRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/workflow-sandboxes/id/workflows/workflow_id/deploy",
                    "pathParameters": {
                      "id": "id",
                      "workflow_id": "workflow_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "name": "name",
                      "label": "label",
                      "status": "ACTIVE",
                      "environment": "DEVELOPMENT",
                      "created": "2024-01-15T09:30:00Z",
                      "last_deployed_on": "2024-01-15T09:30:00Z",
                      "last_deployed_history_item_id": "last_deployed_history_item_id",
                      "input_variables": [
                        {
                          "id": "id",
                          "key": "key",
                          "type": "STRING",
                          "required": true,
                          "default": {
                            "type": "SEARCH_RESULTS"
                          }
                        }
                      ],
                      "output_variables": [
                        {
                          "id": "id",
                          "key": "key",
                          "type": "STRING",
                          "required": true,
                          "default": {
                            "type": "SEARCH_RESULTS"
                          }
                        }
                      ],
                      "description": "description"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workflow_sandboxes.deploy_workflow(\n        id=\"id\",\n        workflow_id=\"workflow_id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflow_sandboxes.deploy_workflow(\n    id=\"id\",\n    workflow_id=\"workflow_id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflowSandboxes.deployWorkflow(\"id\", \"workflow_id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.WorkflowSandboxes.DeployWorkflow(\n\tcontext.TODO(),\n\t\"id\",\n\t\"workflow_id\",\n\t&vellumclientgo.DeploySandboxWorkflowRequest{},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "name": "name",
                        "label": "label",
                        "status": "ACTIVE",
                        "environment": "DEVELOPMENT",
                        "created": "2024-01-15T09:30:00Z",
                        "last_deployed_on": "2024-01-15T09:30:00Z",
                        "last_deployed_history_item_id": "last_deployed_history_item_id",
                        "input_variables": [
                          {
                            "id": "id",
                            "key": "key",
                            "type": "STRING",
                            "required": true,
                            "default": {
                              "type": "SEARCH_RESULTS"
                            }
                          }
                        ],
                        "output_variables": [
                          {
                            "id": "id",
                            "key": "key",
                            "type": "STRING",
                            "required": true,
                            "default": {
                              "type": "SEARCH_RESULTS"
                            }
                          }
                        ],
                        "description": "description"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "workflow-sandboxes",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_workspaceSecrets": {
            "subpackageId": "subpackage_workspaceSecrets",
            "name": "workspaceSecrets",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "retrieve",
                "method": "GET",
                "id": "retrieve",
                "originalEndpointId": "endpoint_workspaceSecrets.retrieve",
                "name": "Retrieve",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Either the Workspace Secret's ID or its unique name",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/workspace-secrets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WorkspaceSecretRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/workspace-secrets/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "label": "label",
                      "secret_type": "USER_DEFINED"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workspace_secrets.retrieve(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workspace_secrets.retrieve(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workspaceSecrets.retrieve(\"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.WorkspaceSecrets.Retrieve(\n\tcontext.TODO(),\n\t\"id\",\n)\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "label": "label",
                        "secret_type": "USER_DEFINED"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Used to retrieve a Workspace Secret given its ID or name.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.vellum.ai"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "partial-update",
                "method": "PATCH",
                "id": "partialUpdate",
                "originalEndpointId": "endpoint_workspaceSecrets.partialUpdate",
                "name": "Partial Update",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Either the Workspace Secret's ID or its unique name",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/workspace-secrets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "label",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      },
                      {
                        "key": "value",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WorkspaceSecretRead"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/workspace-secrets/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "label": "label",
                      "secret_type": "USER_DEFINED"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "async_client": "import asyncio\n\nfrom vellum import AsyncVellum\n\nclient = AsyncVellum(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.workspace_secrets.partial_update(\n        id=\"id\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workspace_secrets.partial_update(\n    id=\"id\",\n)\n",
                        "exampleIdentifier": "default"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.9.3",
                          "package": "vellum-ai"
                        },
                        "client": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workspaceSecrets.partialUpdate(\"id\");\n"
                      },
                      "goSdk": {
                        "type": "go",
                        "sdk": {
                          "githubRepo": "https://github.com/vellum-ai/vellum-client-go",
                          "version": "v0.0.1749"
                        },
                        "client": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.WorkspaceSecrets.PartialUpdate(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.PatchedWorkspaceSecretUpdateRequest{},\n)\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "modified": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "label": "label",
                        "secret_type": "USER_DEFINED"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Used to update a Workspace Secret given its ID or name.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "workspace-secrets",
            "webhooks": [],
            "websockets": []
          }
        },
        "auth": {
          "type": "header",
          "headerWireValue": "X_API_KEY",
          "nameOverride": "apiKey"
        },
        "hasMultipleBaseUrls": true,
        "globalHeaders": []
      }
    },
    "files": {
      "6679a212-1685-4f0a-b917-8837f664ddbc": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/vellum.docs.buildwithfern.com/2024-11-04T18%3A56%3A26.541Z/docs/assets/NeueMontreal-Regular.woff2",
      "23a74982-cec8-4a58-8f8f-5f991c4554a5": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/vellum.docs.buildwithfern.com/2024-11-04T18%3A56%3A26.541Z/docs/assets/TiemposHeadline.woff2",
      "9593ec99-c168-4b03-8719-b817fc1ada09": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/vellum.docs.buildwithfern.com/2024-11-04T18%3A56%3A26.541Z/docs/assets/logo-dark.svg",
      "d62682a6-b50b-4ad7-9ada-452f3128db7f": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/vellum.docs.buildwithfern.com/2024-11-04T18%3A56%3A26.541Z/docs/assets/logo-light.svg",
      "6adad306-f2ad-4912-805d-de59052b52ef": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/vellum.docs.buildwithfern.com/2024-11-04T18%3A56%3A26.541Z/docs/assets/favicon.png"
    },
    "jsFiles": {},
    "filesV2": {
      "6679a212-1685-4f0a-b917-8837f664ddbc": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/vellum.docs.buildwithfern.com/2024-11-04T18:56:26.541Z/docs/assets/NeueMontreal-Regular.woff2"
      },
      "23a74982-cec8-4a58-8f8f-5f991c4554a5": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/vellum.docs.buildwithfern.com/2024-11-04T18:56:26.541Z/docs/assets/TiemposHeadline.woff2"
      },
      "9593ec99-c168-4b03-8719-b817fc1ada09": {
        "type": "image",
        "width": 86,
        "height": 27,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/vellum.docs.buildwithfern.com/2024-11-04T18:56:26.541Z/docs/assets/logo-dark.svg"
      },
      "d62682a6-b50b-4ad7-9ada-452f3128db7f": {
        "type": "image",
        "width": 86,
        "height": 27,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/vellum.docs.buildwithfern.com/2024-11-04T18:56:26.541Z/docs/assets/logo-light.svg"
      },
      "6adad306-f2ad-4912-805d-de59052b52ef": {
        "type": "image",
        "width": 32,
        "height": 32,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/vellum.docs.buildwithfern.com/2024-11-04T18:56:26.541Z/docs/assets/favicon.png"
      }
    },
    "pages": {
      "docs/content/help/welcome/intro.mdx": {
        "markdown": "---\ntitle: Welcome to Vellum – AI product development platform\ndescription: >-\n  Discover Vellum for prompt engineering, semantic search, and more. Get\n  resources and support for all major LLM providers.\n---\n\nWelcome 👋 Vellum helps bring LLM-powered features to production with tools for prompt engineering,\nsemantic search, version control, quantitative testing, and performance monitoring across\nall major LLM providers and open source models.\n\nHere you'll find resources and guides for the Vellum platform and our APIs. Please don't hesitate to contact\nus at support@vellum.ai if you can't find what you're looking for.\n\n## Frequently Visited Resources\n\n<Cards>\n  <Card\n    title=\"Vellum API Reference\"\n    icon=\"fa-solid fa-code\"\n    href=\"/api-reference/overview/getting-started\"\n  />\n  <Card\n    title=\"Discord Server\"\n    icon=\"fa-brands fa-discord\"\n    href=\"https://discord.gg/6NqSBUxF78\"\n  />\n  <Card\n    title=\"Status Page\"\n    icon=\"fa-solid fa-signal\"\n    href=\"https://status.vellum.ai\"\n  />\n  <Card\n    title=\"Prompt Engineering Tips\"\n    icon=\"fa-solid fa-lightbulb\"\n    href=\"https://learnprompting.org\"\n  />\n</Cards>\n"
      },
      "docs/content/help/welcome/getting-support.mdx": {
        "markdown": "---\ntitle: Vellum's Help Center\ndescription: >-\n  Discover ways to contact the Vellum team and receive assistance with your LLM\n  features.\n---\n\nHaving trouble some trouble using Vellum? Don't worry, we're here to help – there are many ways to get unstuck!\n\n## 📧 Email us\n\nWe respond quickly to emails, so don't hesitate to reach out to us at support@vellum.ai. When you do, please describe your use case and the specific problem you're encountering so we can better assist you.\n\n## ❓Help Center\n\nIf you prefer a self-service option, check out the articles here in our Help Center. We have plenty of articles with detailed explanations, screenshots, and videos to help you troubleshoot common issues. We're constantly adding new resources, so be sure to check back often!\n\n## 🧑‍💻 **Discord**\n\nAnother great way to get help and connect with other Vellum users is to join our [Discord community](https://discord.com/). Our community is a great resource for getting advice and tips from other Vellum users. We're constantly monitoring Discord and answering questions to help you get unstuck. We're all here to help each other out, so don't hesitate to join and start chatting!\n"
      },
      "docs/content/help/prompts/prompt-engineering-in-vellum.mdx": {
        "markdown": "---\ntitle: Prompt Engineering\ndescription: >-\n  Discover how Vellum's prompt engineering enhances LLMs with dynamic templates,\n  jinja templating, and function calling for smarter prompts.\nimage:\n  type: url\n  value: 'https://storage.googleapis.com/vellum-public/help-docs/prompt_history.png'\n---\n\nPrompts are the \"instructions\" that you give to Large Language Models (LLMs) to generate a response.\nIf you've used ChatGPT, then you've actually already interacted with an LLM that was provided with a\nPrompt on how it should respond in a helpful, polite manner!\n\nWhen building your own AI-powered application, you'll very likely need to come up with your own Prompts.\nFurthermore, Prompts are rarely static strings. Instead, most Prompts are \"templates\" with dynamic\nsections whose contents are determined at runtime. For example, you might need to include information about\nthe user that's interacting with your application, some relevant section of a knowledge base, etc.\n\nVellum encourages the development of dynamic prompts by providing a powerful\nprompt syntax that supports variable substitution, jinja templating, and function calling.\nAt a high level, you define \"Input Variables\" and reference those variables in your Prompt.\nYou can experiment with different values for these variables via \"Scenarios\" to determine\nwhat the LLM's output would be.\n\nYou can reference input variables in your Prompt in one of two ways using different types\nof \"blocks.\"\n- Rich Text Blocks: Great for most use-cases where a simple variable substitution is needed.\nBegin type `{{ ` or `/` to get a dropdown of available variables.\n- Jinja Blocks: Used for more complex use-cases where you need the power of Jinja templating syntax\nto perform conditional logic, loops, etc.\n\n## Rich Text Blocks\nMost of the time, you'll use Rich Text blocks for simple variable substitution.\nThese blocks are easy to use and are great for most use-cases. You can reference\nvariables by typing `{{ ` or `/` to get a dropdown of available variables.\n\nHere's an example of a Rich Text block:\n\n![Rich Text Block Example](https://storage.googleapis.com/vellum-public/help-docs/rich_text_block_example.png)\n\n\n## Jinja Blocks\n\nJinja is a powerful templating syntax useful for dynamic content.\nIn its most basic form, you might use it to reference Prompt Variables.\nHowever, if all you need is variable substitution, consider using a Rich\nText block instead.\n\nBelow are the most common things you’re likely to want to do,\nbut you can find jinja’s complete documentation\n[here](https://jinja.palletsprojects.com/en/3.1.x/templates/).\n\n### Variables\n\nReference variables using double-curly-brackets. For example,\n\n<CodeBlock title=\"Reference Variables\">\n  ``` You are a {{ personality_type }} AI assistant. ```\n</CodeBlock>\n\n<Callout intent=\"warning\">\n  Note that all prompt variables are treated as strings!\n</Callout>\n\n### Conditionals\n\nPerform conditional logic based on your input variables using if/else statements\n\n<CodeBlock title=\"Conditional Example\">\n```\nYou are a {{ personality_type }} AI assistant.\n{% if personality_type == \"rude\" %}\nYou end every message with a frowning emoji.\n{% else %}\nYou end every message with a smiling emoji.\n{% endif %}\n```\n</CodeBlock>\n\n### Comments\n\nYou can use jinja to leave comments in your prompt that don’t use up any\ntokens when compiled and sent to the LLM. For example,\n\n<CodeBlock title=\"Comment Example\">\n```\n{# This is a comment #}\nHello, world!\n```\n</CodeBlock>\n\n### JSON Inputs\n\nVellum supports JSON input variables. When you supply a JSON variable, you can use this trick to access specific key/value pairs.\n\nFor example, say you have a variable called `traits` whose value in a Scenario looked like:\n\n```json\n{\n  \"hair_color\": \"brown\",\n  \"personality\": \"happy go lucky\"\n}\n```\n\nThen you can access \"happy go lucky\" by using a Jinja template block and referencing the JSON variable like so:\n\n```\nYou are a {{ traits.personality }} AI assistant.\n\n```\n\n### Casting Variable Types\n\nVellum currently treats all input variables to prompts as strings. However, you may use [jinja filters](https://jinja.palletsprojects.com/en/3.1.x/templates/#list-of-builtin-filters) to convert your variables to specific types and then use them accordingly. For example:\n\n```\nYou are an AI chat bot working at the registry of motor vehicles.\nThe person who just stepped up to the counter\n{% if age | float > 16 %}\nis of legal driving age.\n{% else %}\nisn't yet old enough to drive.\n{% endif %}\n```\n\n## Blocks\n\nVellum uses blocks to separate key pieces of a prompt, such as System/Assistant/User messages of a Chat model (e.g. `gpt-3.5-turbo` or `claude-v1`) or the special `$chat_history` variable.\n\nBlocks are more noticeable when using a Chat model than when using a Text model.\n\n### Chat Model Example\n\nHere’s what a sequence of blocks might look like for a Chat model\n\n![Chat Model Prompt](https://storage.googleapis.com/vellum-public/help-docs/chat_model_example.png)\n\n### Text Model Example\n\nText models typically use a single block, which might look like this:\n\n![Text Model Prompt](https://storage.googleapis.com/vellum-public/help-docs/text_model_example.png)\n\n### Switching from Chat ↔ Text Models\n\nWhen switching from a Chat Model to a Text model, blocks are converted as best they can be.\n\n**Chat → Text**\n\nHere’s an example going from Chat to Text.\n\n![Converting from Chat Models to Text Models](https://storage.googleapis.com/vellum-public/help-docs/chat_to_text_conversion.png)\n\n**Text → Chat**\n\nHere’s an example going from Text to Chat.\n\n![Converting from Text Models to Chat Models](https://storage.googleapis.com/vellum-public/help-docs/text_to_chat_conversion.png)\n\n\n### Function Calling\nFunction Calling allows you to provide function definitions within your prompts the the model could use in deciding how to respond with each user prompt. It’s best to think of functions as a type of classifier prompt that pushes to model to respond with either:\n\n- The name of one of those functions, with associated parameter values.\n- A standard text response.\n\nThis definitive response from the model allows developers building LLM features into their applications to know when to call a function or when to return a message to the user. This removes the need to try parsing JSONs are other formats from the LLM text response, leading to more stable user experiences.\n\nTo define a function, you first need to choose a model that supports function calling and click the `+ Add` → `Function` button at the bottom of your prompt:\n\n![Add Prompt Block Button](https://storage.googleapis.com/vellum-public/help-docs/add_prompt_block_button.png)\n\nThen, click the block that’s created and a modal will appear where you can start defining your function! There are three important sections to consider:\n\n- `Name` - This is a single identifier that the model will use to instruct you which function to call next\n- `Description` - This is a natural language description of what your function does. This is the part most used by the model to decide which function to call and should be considered counting towards your token count.\n- `Parameters` - The set of parameters your functions accept. Each parameter will also have a `Name`, `Description`, & `Type` that the model uses to decide what values the function should be called with.\n\n![Function Placeholder](https://storage.googleapis.com/vellum-public/help-docs/function_placeholder.png)\n![Edit Function Dialog](https://storage.googleapis.com/vellum-public/help-docs/edit_function_dialog.png)\n\nWhen you then call the model with a prompt along with these function definitions, the model will then decide whether it makes sense to call one of the defined functions or return the standard text response. If it decides to call a defined function, the response will be a JSON directing which function to call and with which parameter values:\n\n![Function Call Response](https://storage.googleapis.com/vellum-public/help-docs/function_call_response.png)\n\nNotice that in this example, the model is directing us to call the `get_current_weather` function with the `location` parameter set to `Boston, MA`. At this point, it is up to the _app developer_ to actually invoke the function - the model itself does not have access to the execution logic. These functions should represent public or private APIs that the app developer supports and could invoke once instructed by the model.\n\nOnce the function is called and a response is observed, the response should be fed back to the LLM as a ********function******** message so that the model knows what was the outcome of calling that function. The model will then be able to use the response of that function when deciding how to respond next in order to satisfy the original prompt.\n\n![Assistant Response Following FUnction Call](https://storage.googleapis.com/vellum-public/help-docs/assistant_response_following_function.png)\n\nNotice that we need to specify the original response from the model as an *********assistant********* message, before following up with a ********function******** message. The final output from the model then represents its understanding of the user’s prompt and the output of the function it had access to.\n\nOnce you have reached this point, you’ll have everything you’ll need to add functions to models! Function calling is best used for incorporating the following types of data into your prompts:\n\n- Runtime or recent data - New data that has become available that the developer’s APIs have access to but the model was not trained on\n- Proprietary data - Data the developer has collected that is specialized to their business proposition that gives their application a comparative advantage\n- Weighted data - Data that the model already has been trained on but that the developer would like to re-prioritize based on some special insights that could be inferred from their API\n\n\n# Previewing Compiled Prompts\n\nGiven the powerful and dynamic nature of Vellum’s prompt syntax, you may want to see what the final, compiled payload sent to the model provider after all variable substitutions and jinja templating is applied. You can do this in the Playground UI like so:\n\n![Previewing Compiled Prompts](https://storage.googleapis.com/vellum-public/help-docs/previewing_compiled_prompts.gif)\n\n\n# Viewing Prompt Usage\n\nYou can view how much token, character or compute time usage your prompts are costing you by enabling the \"Track Usage\" toggle in your Prompt Sandbox's settings.\n\n![Usage Tracking Sandbox](https://storage.googleapis.com/vellum-public/help-docs/usage-tracking-sandbox.png)\n"
      },
      "docs/content/help/prompts/collaborating-on-prompts.mdx": {
        "markdown": "---\ntitle: Collaborate on Prompts with Vellum Prompt Playground\ndescription: >-\n  Explore Vellum Prompt Playground for rapid iteration, collaboration, and\n  sharing of model-generated prompts. Save, tag, and track progress easily.\nimage:\n  type: url\n  value: 'https://storage.googleapis.com/vellum-public/help-docs/prompt_history.png'\n---\n\nThe Vellum Prompt Playground is a powerful tool for rapid iteration and\ncollaboration between multiple models and prompts. Save, tag,\nand share your work with ease using the features outlined below.\n\n### History\n\nEvery model-generated response and respective prompt are saved\nas history items, giving you access to a detailed record of your\nwork. To access history items, simply activate the toggle button\nlocated at the top right of the Playground, and all history items\nwill appear on the left side of your screen.\n\n![Playground History](https://storage.googleapis.com/vellum-public/help-docs/prompt_history.png)\n\n### Tracking Progress, Collaborating, and Tagging\n\nThe Playground is designed to help you iterate on prompts and model\nproviders until you find the perfect fit for your needs. With the\nhistory feature, you can keep track of your team's work in an organized\nway by only keeping the iterations you choose to, through the `save` button.\n\nEveryone working on the same sandbox can see each other's history items,\nand you can also tag them to keep better track of your work.\n\n![Tagging History](https://storage.googleapis.com/vellum-public/help-docs/tagging_history.png)\n\n### Share Your Work\n\nAt any point in time, you can easily share your work with anyone in\nyour organization through a URL by using the “invite” button located\nat the top right of the page.\n\n![Inviting Teammates](https://storage.googleapis.com/vellum-public/help-docs/inviting_teammates.png)\n\n"
      },
      "docs/content/help/prompts/adding-custom-models-to-your-workspace.mdx": {
        "markdown": "---\ntitle: Integrate Custom Models in Your Vellum Workspace Easily\ndescription: >-\n  Learn how to add both private and public custom models to your Vellum\n  workspace for enhanced functionality and domain-specific advantages.\nimage:\n  type: url\n  value: >-\n    https://storage.googleapis.com/vellum-public/help-docs/supported-private-model-templates.png\n---\n\nVellum supports several of the industry's most popular models by default available in your workspace right away. However, you may wish to use a custom model that gives your business some additional advantage not provided by these off the shelf models, such as higher rate limits or more domain-specific training. These models can also be set up for use within Vellum!\n\nCustom models fall under two categories: _private_ models and _public_ models. Both could be added via the `Models` tab within Vellum.\n\n## Adding Private Models\n\nPrivate models are _new_ instances of models that were created by you outside of Vellum and are looking to integrate into the platform. When you navigate to the models page, the supported types of private models will be accessible from a section on the top of the page:\n\n![Adding Private Custom Models](https://storage.googleapis.com/vellum-public/help-docs/supported-private-model-templates.png)\n\nClicking on one of the templates will take you to an onboarding flow on how to connect your private model to Vellum. Once you've completed the pre-requisite steps and add in the requested form info, your model should be successfully added to your workspace!\n\nWe currently support the following private Model Templates:\n- OpenAI models hosted on Azure\n- OpenAI fine-tuned models\n- Fine-tuned models hosted on Fireworks AI\n\n## Adding Public Models\n\nPublic models are _shared_ instances of models that are hosted by model providers and are granted access to them by various authentication schemes, most commonly via an API Token. Some are enabled in your workspace by default when you create a new workspace in Vellum. To find other public models not yet enabled in your workspace, navigate to the models page and scroll down to the `Available Models` section:\n\n![Adding Public Custom Models](https://storage.googleapis.com/vellum-public/help-docs/supported-public-models.png)\n\nTo help filter the options, you could select just `Available` in the drop down on the right or use the search bar to look for the specific model of interest.\n\nWhile most of these models require just adding your API key from the relevant model provider, some like those from `AWS Bedrock` will require some additional steps taken within your account. These directions will be laid out within each model's onboarding modal when you click to enable them in your workspace.\n\n## Request a Model\n\nDon't see a custom model listed here but want to try it within Vellum? Reach out to us on Slack for support!\n"
      },
      "docs/content/help/prompts/working-with-images-in-vellum.mdx": {
        "markdown": "---\ntitle: Leverage Images in Your Vellum Prompts and Workflows\ndescription: >-\n  Learn how to send images to multimodal models like GPT-4 Turbo with Vision\n  from within Vellum’s UI\n---\n\nLeverage the power of multimodal models to process both natural language and visual inputs within your LLM-applications using Vellum.\n\nVellum supports images for OpenAI’s vision models like GPT-4 Turbo with Vision - both via [API](https://docs.vellum.ai/api-reference/) and in the Vellum UI.\n\n![Images in Vellum UI](https://storage.googleapis.com/vellum-public/help-docs/images-in-prompts-walkthrough.gif)\n\nRead on to learn how to get started using images in Vellum!\n\n## Using Images in the UI\n\nVellum supports images as inputs to both your Prompts and Workflows. In either Sandbox, you can add images inside of scenario Chat History messages.\n\nBegin by selecting the correct model, `GPT-4 Turbo with vision`, in your Prompt. In Workflows, you can set the model within a Prompt Node. Before you do, you'll want to add a Chat History block as an input to your Workflow first.\n\n![Vision Model Selection](https://storage.googleapis.com/vellum-public/help-docs/images-model-selection.png)\n\nNext, add a Chat History block and some messages to your template so you can drag images within them.\n\nHere's how to do it:\n\n- In the Prompt Sandbox, add a Chat History block by typing in `$chat_history`. This is a special Prompt Variable name that will add an empty Chat History block component in each scenario\n  ![Prompt Sandbox Steps](https://storage.googleapis.com/vellum-public/help-docs/images-prompt-steps.png)\n\n- In the Workflow Sandbox, a Chat History block can be added directly from the \"Add\" dropdown on the bottom left of the Input Variables modal. After adding this block, configure your Prompt Node to use Chat History as an input\n  ![Workflow Sandbox Steps](https://storage.googleapis.com/vellum-public/help-docs/images-workflow-steps.png)\n\nNow you're ready to add images! Drag and drop a valid image into a Chat History message that's being used as an input to define a Prompt or Workflow scenario. This converts the Chat Message into a draggable array that can be easily re-ordered and can contain multiple image and/or text items.\n\n<Callout intent=\"info\">\n  Valid image URLs: Images must have their absolute path including the image\n  filetype in their URL and must be publicly visible (example:\n  https://storage.googleapis.com/vellum-public/help-docs/release-tags-on-deploy.png)\n</Callout>\n\nHere’s what images look like in the **Prompt Sandbox**:\n\n![Images in Prompt Scenarios](https://storage.googleapis.com/vellum-public/help-docs/images-in-prompts.png)\n\nAnd images in the **Workflow Sandbox**:\n\n![Images in Workflow Scenarios](https://storage.googleapis.com/vellum-public/help-docs/images-in-workflows.png)\n\nOnce you’ve added in your image, you can configure its settings by clicking the small gear icon to the right of the image. Here you'll be able to adjust things like the `Image Detail` which can have a big impact on token usage (more on that below).\n\n![Image Configuration Steps](https://storage.googleapis.com/vellum-public/help-docs/images-config.png)\n\nYou can also switch out an image you’ve dragged in for a new one by updating the image URL in the settings.\n\n![Image Configuration Modal](https://storage.googleapis.com/vellum-public/help-docs/images-config-modal.png)\n\n## Image Specifications\n\nHere are some important model specifications for GPT-4 Turbo with Vision to keep in mind as you’re incorporating images into your Prompts and Workflows:\n\n- **Number of Images:** No set limit\n\n  There is no fixed number here but token and image size restrictions still apply to determine the number of images that can be sent\n\n- **Image Size:** Less than 32MB\n\n  For prompts and workflows with multiple images, the combined image size should not exceed this limit\n\n- **Supported Image Formats:**\n\n  - JPEG (.jpeg / .jpg)\n  - PNG (.png)\n  - Non-animated GIF (.gif)\n  - WEBP (.webp)\n\n- **Other Notes:**\n\n  - GPT-4 Turbo with Vision does not currently support tool calls so be sure there are no function blocks in your `$chat_history` messages\n  - The Vellum UI currently supports only publicly hosted image urls. To send a base64 image file, you can use Vellum's API instead.\n\n    Here's a short example on how to send an image to the model, using Vellum's Python SDK:\n\n    ```python\n    image_link = \"https://storage.googleapis.com/vellum-public/help-docs/add_prompt_block_button.png\"\n    response = client.execute_prompt(\n        prompt_deployment_name=\"github-loom-demo\",\n        inputs=[\n            PromptDeploymentInputRequest_ChatHistory(\n                name=\"$chat_history\",\n                value=[\n                    ChatMessageRequest(\n                        role=ChatMessageRole.USER,\n                        content={\n                            \"type\": \"ARRAY\",\n                            \"value\": [\n                                {\"type\": \"STRING\", \"value\": \"What's in this image?\"},\n                                {\"type\": \"IMAGE\", \"value\": {\"src\": image_link}},\n                            ],\n                        },\n                    )\n                ],\n                type=VellumVariableType.CHAT_HISTORY,\n            ),\n        ],\n    )\n    print(response.outputs[0].value)\n    ```\n\n## Image Detail and Token Usage\n\nWhen working with image models, token usage is an important factor to consider. For GPT-4 Turbo with Vision, the two main factors for token count are the image’s size and it’s detail setting.\n\nThere are three possible settings for the image detail: `low`, `high`, or `auto`\n\nIn Vellum, we default the detail to be `low` to prevent unintended token usage. OpenAI's default setting is `auto` where the model decides whether to use low or high detail based on the size of the input image.\n\n![Image Details](https://storage.googleapis.com/vellum-public/help-docs/images-config-detail.png)\n\nThe `low` setting processes a lower resolution `512x512` version of the image. With `low`, the response time is faster and there’s a fixed token consumption per image. At the time of this writing, that amount is `85 tokens`. The low setting is great when the fine details of the image are not required.\n\nThe `high` setting on the other hand is the high resolution mode. In this mode, the input image is tiled and a detailed segment is created from it. Token usage is calculated based on the number of these segments which correlates to the image size. High resolution allows for a more comprehensive interpretation of your image.\n\nYou can learn more about the image detail setting and OpenAI Vision models on [their site](https://platform.openai.com/docs/guides/vision)\n\n<Callout intent=\"info\">\n  Are you looking for greater multimodal model support in Vellum beyond\n  `gpt-4-vision-preview`? Please don't hesitate to let us know at\n  support@vellum.ai!\n</Callout>\n"
      },
      "docs/content/help/prompts/prompting-tips-and-examples.mdx": {
        "markdown": "---\ntitle: Prompting Tips and Examples\ndescription: Learn prompting techniques for common use-cases.\nimage:\n  type: url\n  value: 'https://storage.googleapis.com/vellum-public/help-docs/prompt_history.png'\n---\n\n## Producing JSON\n\nYou can efficiently specify the shape of JSON objects you'd like your LLM to produce with the following recipe:\n \n````plaintext\nProvide a JSON response for the following transcript information and use the formatting\nbelow:\n \n```\n{\n  \"meeting_type\": \"board meeting\" || \"special meeting\" || \"work session\" // if none, return \"general\",\n  \"speakers\": string[], // list of speaker names\n  \"meeting_location\": \"virtual\" || \"in_person\",\n  \"date\": \"datetime\", // ISO 8601 format with date and time and default to \"null\" if datetime is unknown\n  \"summary\": \"string\" // concise description of key topics\n}\n```\n \nTranscript:\n\"\"\"\n[transcript contents go here]\n\"\"\"\n````\n\nNote the code fencing used here to add descriptions for the key-value pairs so the model knows what to extract.\n\nWe also provide a default value so we can handle that downstream in our system rather than getting inconsistent values from the LLM when the data is not found.\n"
      },
      "docs/content/help/workflows/intro.mdx": {
        "markdown": "---\ntitle: Build multi-step AI apps with Vellum’s Worfklows\ndescription: >-\n  Discover how Vellum Workflows streamline LLM call chains with a low-code\n  interface, easy testing, and versioned deployments.\n---\n\nVellum Workflows help you quickly prototype, deploy, version, and monitor complex chains of LLM calls and the business logic that tie them together.\n\nIt provides a low-code interface for defining these chains so that you get rapid feedback on how they work across a variety of test cases that you define. Once you’re happy with the Workflow, you can “deploy” it and hit an API to invoke that Workflow from your application.\n\nOnce deployed, future changes to the Workflow definition are versioned and invocations made from your application are logged. For a given invocation, you can view the inputs, outputs, and latency of each step along the way.\n\n# Concepts\n\nWorkflows make heavy use of the following concepts:\n\n1. Input Variables\n2. Scenarios\n3. Nodes\n4. Edges\n5. Final Outputs\n\nLet’s take a look at each\n\n### Input Variables\n\nThe behavior of most Workflows depend on 1 or more dynamic Input. For example, you could define a single Input named `query` that your Workflow depends on.\n\n![Workflow Input Variables](https://storage.googleapis.com/vellum-public/help-docs/workflow_input_variables.png)\n\n### Scenarios\n\nA Scenario is a set of values for your Input Variables. In the above example, we have `Scenario 1` which assigns a value of `What is fine tuning?` to the `query` Input Variable.\n\nYou can define as many Scenarios as you want and swap between them to test that your Workflows behaves the way you expect for each.\n\n### Nodes\n\nNodes are the steps in your Workflow where some action will take place. Some Nodes generate Outputs, whereas some Nodes are used purely to direct the flow of execution.\n\nFor example, the `Prompt Node` is used to pass Input Variables into a Prompt and execute an LLM. It generates an output that can then be used as an input to other downstream Nodes.\n\n![Workflow Nodes](https://storage.googleapis.com/vellum-public/help-docs/workflow_nodes.png)\n\n### Edges\n\nEdges connect Nodes and define the order in which they are executed. The are represented as the lines in between Nodes.\n\n![Workflow Edges](https://storage.googleapis.com/vellum-public/help-docs/workflow_edges.png)\n\nNote that a Node has access to the output data from all upstream Nodes, ********not just******** the Node(s) that it’s directly connected to via an Edge.\n\n### Final Output\n\nThere’s a special Node called a “Final Output Node.” They’re used to indicate which Node output you actually care about and want to surface as the overall output for the Workflow.\n\nIn the below example, I have a Final Output Node named `final-output` that subscribes to a string output that comes from the `OpenAI Help Center` Prompt Node.\n\n![Workflow Final Output](https://storage.googleapis.com/vellum-public/help-docs/workflow_final_output.png)\n\nFinal Output Nodes are particularly important when you Deploy a Workflow and invoke it via API. By default, only the data that Final Output Nodes subscribe to will be returned by the API.\n\nNote that you can have as many Final Output Nodes in a Workflow and can assign each a name to differentiate the data associated with each in API calls.\n"
      },
      "docs/content/help/workflows/experimenting.mdx": {
        "markdown": "---\ntitle: Streamline AI App Development with Vellum's Workflows\ndescription: >-\n  Discover how Vellum's Workflows simplifies building AI apps by managing\n  complex LLM call chains and business logic easily.\n---\n\n## About Workflows\n\nWorkflows help you quickly prototype, deploy, and manage complex chains of LLM calls and business logic. We solve the \"whack-a-mole\" problem encountered by companies that use popular open source frameworks to build AI applications, but are scared to make changes for fear of introducing regressions in production.\n\nThe Workflows UI consists of a graphical app builder where you can string together various nodes and test various input values through this system. Each prompt can also be tested extensively through Playground & Test Suites. When implemented effectively, Workflows can help you build advanced LLM applications\n\n## Connecting Workflow Nodes and Defining Variables\n\nWorkflow nodes are connected by linking the output of one node to the input of another node. For any node the variables can be populated either by the results of an upstream node or the values of global variables.\n\nWhen 2 nodes are successfully connected there’s a solid purple line between the nodes and the connection points turn blue. Here’s an example of a workflow that’s connected successfully:\n\n![Connecting Workflow Nodes and Defining Variables](https://storage.googleapis.com/vellum-public/help-docs/connected_nodes_and_edges.png)\n\n## Running a Workflow\n\nEach variable in a node can either take the value of an upstream node or the value can be defined globally. To define them globally, you can populate them in the Input Variables dropdown before running a workflow. You can define as many scenarios as you want, each scenario is a unique set of input values that will be sent to the workflow.\n\nVariables can be added one-by-one using the Add button or automatically using Auto-Add. Auto-Add looks at all the variables in the workflow and adds them to the scenario.\n\n![Workflow Inputs](https://storage.googleapis.com/vellum-public/help-docs/workflow_input_variable_values.png)\n\nOnce all the variables are selected for each prompt (either as values of upstream nodes or defined globally), you are now ready to Run your workflow!\n\nWhen you Run the Workflow (purple button on the top right corner), you will see the execution path of the Workflow in green and the intermediate results at each step of the workflow. If the results at the end of the Workflow look surprising then may be a good idea to check what the responses look like at each step.\n\nHere’s an example of a workflow that’s executed successfully:\n\n![Executed Workflow](https://storage.googleapis.com/vellum-public/help-docs/executed_workflow.png)\n\n## Node Mocking\n\nWorkflow development is best done iteratively. However, this can become prohibitively expensive both in terms of token consumption and runtime if there are Prompt Nodes defined early in the Workflow that you have to frequently re-run just to get to the part of the Workflow that you _actually_ want to test. To help speed up Workflow development, you can _mock out the execution_ of a given node. This will skip the node's execution and return the hard-coded output(s) you define rather than running the node itself.\n\n![Workflow Node Mocking](https://storage.googleapis.com/vellum-public/help-docs/workflow-node-mocking.png)\n\nOnce defined, you can easily toggle the mock on and off to go back and forth between mocking the node and actually executing the Prompt to see your Workflow work end-to-end. This also allows you to save your mocks without needing to delete them when you'd like to actually execute the node. During a workflow run, nodes that are mocked will be outlined in yellow to differentiate from nodes that are actually executed.\n\n![Workflow Node Mocking](https://storage.googleapis.com/vellum-public/help-docs/node-mocking-result.png)\n\nThese mocks are _only_ defined within the context of Workflow Sandboxes, and are defined per Scenario. They do not get deployed with your Workflow Deployments and do not affect behavior when invoking Workflow Deployment APIs.\n\nThe following nodes support mocking:\n- Prompt Nodes\n- Subworkflow Nodes\n\nCheck out the video below for a full demo of Workflow Node Mocking.\n\n<iframe\n  src=\"https://www.loom.com/embed/42e5acabd39b4604a8753a2d0b7566ba\"\n  width=\"100%\"\n  height=\"450px\"\n></iframe>\n"
      },
      "docs/content/help/workflows/node-types.mdx": {
        "markdown": "---\ntitle: Build Powerful Workflows with Vellum Nodes\ndescription: >-\n  Discover the different types of Workflow Nodes provided by Vellum to build\n  complex LLM Workflows with ease.\n---\n\n## Supported Nodes\n\nVellum offers over a dozen Node types that you can use to build any Workflow you can imagine. On this page, we'll outline the purpose of each Node.\n\nFor additional examples of Node usage, check out our [Common Workflow Architectures](/help-center/documents/uploading-documents), which we update regularly. \n\n## Quick Reference\n\n|Node|Description|\n|-----------|-----------|\n| [Prompt Node](/help-center/workflows/node-types#prompt-nodes) | Invoke LLMs with your prompts, optionally using variables from other nodes |\n| [Templating Node](/help-center/workflows/node-types#templating-nodes) | Apply Jinja templating to perform lightweight data transformations |\n| [Search Node](/help-center/workflows/node-types#search-node) | Search against a Document Index, great for RAG |\n| [API Node](/help-center/workflows/node-types#api-node) | Make an HTTP request to an API endpoint | \n| [Code Execution Node](/help-center/workflows/node-types#code-execution-nodes) | Run custom Python or Typescript code |\n| [Subworkflow Node](/help-center/workflows/node-types#subworkflow-nodes) | Makes Workflows reusable and more maintanable as they get more complex | \n| [Map Node](/help-center/workflows/node-types#map-nodes) | Iterate over an array, executing a sub-workflow for each item |\n| [Guardrail Node](/help-center/workflows/node-types#guardrail-nodes) | Run an inline evaluation using a pre-defined Metric |\n| [Conditional Node](/help-center/workflows/node-types#conditional-node) | Branch your workflow based on a condition, also useful for error handling |\n| [Merge Node](/help-center/workflows/node-types#merge-node) | Wait for one or multiple branches to complete before continuing |\n| [Final Output Node](/help-center/workflows/node-types#final-output-node) | Exposes values you can use in your application, you may have more than one! |\n| [Error Node](/help-center/workflows/node-types#error-node) | Stop workflow execution and raise an error |\n| [Note Node](/help-center/workflows/node-types#note-node) | A simple node that displays text to help annotate your Workflow |\n\n### Prompt Nodes\n\nA core part of any LLM application. This node represents a call to a Large Language Model. Similar to Vellum Prompts, you can use models from any of the major providers or open source community, including: OpenAI, Anthropic, Meta, Cohere, Google, Mosaic, and Falcon-40b.\n\nUpon creating a Prompt Node you’ll be asked to import a prompt from an existing Deployment, Sandbox, or create one from scratch. Prompts are defined by their variables, prompt template, model provider, and parameters. Refer to this help center article to learn more about our prompt syntax ([Vellum Prompt Template Syntax](/help-center/prompts/prompt-engineering)).\n\n![Prompt Node](https://storage.googleapis.com/vellum-public/help-docs/prompt_node.png)\n\n### Templating Nodes\n\nThe Templating Node allows you to perform custom data transformations on a set of defined inputs to create a new output. You can use this to define constants, manipulate data before feeding into a prompt, or massage a response to a format of your liking.\n\nCheck out our [Common Data Transformation Templates](/help-center/workflows/common-data-transforms) for some common examples.\n\n![Templating Node](https://storage.googleapis.com/vellum-public/help-docs/templating-node.png)\n\n<AccordionGroup>\n<Accordion title=\"Tip: JSON Syntax\">\n  You may have a templating node that outputs JSON which seems valid, but yields the following error when you click “Test” or run your workflow:\n#### Tips - Using Jinja\nJinja has a tendency to leave hard-to-see whitespace which can cause issues when doing equality checks in places like Metrics or Conditional Nodes.\n\n  <img src=\"https://storage.googleapis.com/vellum-public/help-docs/templating_node_json_sensitivity.png\" alt=\"Templating Node JSON Error\" width=\"400px\"/>\n\n  <Tip>Use double quotes when working with JSON</Tip>\n</Accordion>\n<Accordion title=\"Tip: Unexpected Whitespace\">\n    Jinja has a tendency to leave hard-to-see whitespace which can cause issues when doing equality checks in places like Metrics or Conditional Nodes.\n\n    ```jinja\n    {# this example will have invisible whitespace #} \n    {% if some_condition %}\n        {{ result A }}\n    {% else %}\n        {{ result B }}\n    {% endif %}\n\n    {# this will give the result you expect #} \n    {%- if some_condition -%}\n        {{- result A -}}\n    {%- else -%}\n        {{- result B -}}\n    {%- endif -%}\n    ```\n  </Accordion>\n</AccordionGroup>\n\n### Search Node\n\nThe Search Node returns results from a Document Index stored inside Vellum Search. Once your documents are uploaded in an index (details on how to do that here: [Uploading Documents](/help-center/documents/uploading-documents)), you can start using them in a Workflow.\n\nThe index in a Search Node can be fixed for the Workflow or chosen dynamically based on the output of an upstream node. Additional configuration options, similar to the ones in Vellum Search are also available in the Search Node.\n\n![Search Node](https://storage.googleapis.com/vellum-public/help-docs/search_node.png)\n\n### API Node\n\nThe API Node invokes an API endpoint and returns back the status code, raw output, and JSON output if applicable. These APIs can be either publicly accessible or privately defined within your backend through the help of Authorization headers and Secrets. Simply define a URL, HTTP Method, relevant additional headers, and the body that you would like to send to the desired endpoint.\n\n![API Node](https://storage.googleapis.com/vellum-public/help-docs/api-node.png)\n\n<Accordion title=\"Tip: Creating Dynamic URLs\">\n\nYou can use a Templating Node and the \"Dynamic\" field of an API Node to quickly and flexibly make API calls in your Workflows. See the example below for more details. Notice how we do string concatenation in the Templating Node using Jinja2's `~` syntax. \n\n<Tip>\nIt's better to use API Nodes over Code Execution Nodes for API calls. Code Execution Nodes add more latency to your Workflow. Reserve them for more complex tasks.\n</Tip>\n\n<iframe\n  src=\"https://app.vellum.ai/public/workflow-deployments/d5a345db-2676-4de1-9908-7e61e5089c81\"\n  width=\"100%\"\n  height=\"450px\"\n  experimental_enableRequestFullscreen={true}\n></iframe>\n\n</Accordion>\n\n### Code Execution Nodes\n\nThe Code Execution Node empowers you to include custom logic defined directly in the workflow. You can even import custom public packages within the node's logic. We support the following languages:\n\n- Python\n- TypeScript\n\n![Code Execution Node](https://storage.googleapis.com/vellum-public/help-docs/code-exec-node.png)\n\n<AccordionGroup>\n<Accordion title=\"Tip: Outputting Arrays (Strings)\">\n\nSet your output type to `JSON` when returning string arrays from Code Execution Nodes, or you'll get the following error: `Failed to execute node Code Execution Node: Mismatched output type. Output[0]: Expected to deserialize a 'dict', got 'str'`\n\n<img src=\"https://storage.googleapis.com/vellum-public/help-docs/code_node_array_string_output.png\" alt=\"Code Node Array of Strings Output Error\" width=\"400px\"/>\n\n</Accordion>\n\n<Accordion title=\"Tip: Outputting Arrays (Function Calls)\">\n\nThe main scenario in which you'd use Array as your Code Execution Node output type is when you're processing Prompt Execution Node outputs with Function Calls. \n\nFor more on that, see [Quirks and Tips for Handling Functions](/help-center/workflows/function-calling-with-chat-models#quirks-and-tips-for-handling-functions)\n\n</Accordion>\n</AccordionGroup>\n\n### Subworkflow Nodes\n\nSubworkflow Nodes are essential for managing giant, complex workflows. Define reusable groups of nodes in one Workflow Sandbox and have them directly accessible upon deployment from any other workflow in your workspace. Subworkflow nodes also support release tag specification, allowing you the option to always invoke the latest workflow, or pinning to a specific release tag defined by you.\n\nCheck out the video below to see Subworkflow Nodes in action!\n\n<iframe\n  src=\"https://www.loom.com/embed/0232341e74854d09a6aa08c4a96b3af7\"\n  width=\"100%\"\n  height=\"450px\"\n></iframe>\n\n#### Inline Subworkflow Nodes\n\nSubworkflow Nodes could also be defined directly within the existing Workflow editor! This spawns a new editor within the existing parent Workflow that supports many of\nthe same features as the parent Workflow such as all existing nodes and copy/paste. This could be used to help organize complex Workflow architectures into separate,\ndigestable groups. Check out the video below to see it in action!\n\n<iframe\n  src=\"https://www.loom.com/embed/7d998fba6b654a53990ac05c9edca081\"\n  width=\"100%\"\n  height=\"450px\"\n></iframe>\n\n### Map Nodes\n\nMap Nodes allow you to easily run a Subworkflow multiple times in a row. Map Nodes work in the same way that array map functions do in many common programming languages.\nThe Nodes take a JSON array as an input and iterate over it, running a Subworkflow for each item. The Subworkflow is provided with three input variables for the iteration item, index and the array.\nThe output of every Subworkflow is then combined into a single array as a Node output. Map Nodes also support up to 96 concurrent iterations.\n\n<iframe\n  src=\"https://www.loom.com/embed/59a1132879104063b3bf3641706f6128\"\n  width=\"100%\"\n  height=\"450px\"\n></iframe>\n\n<Accordion title=\"Tip: Quirks with Map Node Input Types\">\n\nTwo tips here:\n1. At the time of writing, you'll need to cast items into strings at the beginning of your Map Node Subworkflow. Expand the Map Node in the Subworkflow below for more: \n\n<iframe\n  src=\"https://app.vellum.ai/public/workflow-deployments/c9109193-ebf7-4eee-93e4-a374ea7afa51\"\n  width=\"100%\"\n  height=\"450px\"\n  experimental_enableRequestFullscreen={true}\n></iframe>\n\n2. Make sure you're using the JSON type as output, even if it's an array, from whichever Node output you're passing to the Map Node. `ARRAY` types won't be recognized. \n\n</Accordion>\n\n### Guardrail Nodes\n\nGuardrail Nodes allow you to use Evaluation Metrics from within a Workflow. Guardrail Nodes let you run pre-defined evaluation criteria at runtime as part of a Workflow execution so that you can drive downstream behavior based on that Metric's score.\n\nFor example, if building a RAG application, you might determine whether the generated response passes some threshold for [Ragas Faithfulness](https://docs.ragas.io/en/latest/concepts/metrics/faithfulness.html) and if not, loop around to try again.\n\n![Guardrail Nodes](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/guardrail-nodes.png)\n\n### Conditional Node\n\nConditional Nodes are extremely powerful because they can help you diverge the execution path of your Workflow based on the results of an upstream node. The Conditional Node supports as many if-else-if conditions as you’d like and the rules can be grouped / nested within each other.\n\nThe number of exit options from a conditional node equal the number of if-else-if conditions created on the node\n\n![Conditional Node](https://storage.googleapis.com/vellum-public/help-docs/conditional_node.png)\n\n#### Tip - Equality Checking Templating Nodes\n\nSee our [tips about invisible whitespace in Jinja](http://localhost:3000/help-center/workflows/node-types#tips---using-jinja)\n\n![Wrong Way To Check Equality From Templating Nodes](https://storage.googleapis.com/vellum-public/help-docs/conditionals_jinja_gotchas_wrong_way.png)\n\nThe issue in the above check is that we're not using the Jinja2 syntax to remove unintentional whitespace: `{%-` and `{{-` rather than `{%` or `{{`\n\n![Right Way To Check Equality From Templating Nodes](https://storage.googleapis.com/vellum-public/help-docs/conditionals_jinja_gotchas_right_way.png)\n\nYou can see here that adding the `-` character fixes the issue and gets the correct branch to execute after the conditional. \n\n\n### Merge Node\n\nMerge Nodes are used when the goal is to bring back the execution of divergent paths into one path. You can configure the number of inputs to a Merge Node and choose between “Await All” or “Await Any” as your merge strategy. The merge strategy determines the logic that will continue workflow execution.\n\n![Merge Node](https://storage.googleapis.com/vellum-public/help-docs/merge_node.png)\n\n### Final Output Node\n\nThe Final Output Node represents the end of your workflow. Your workflow may have multiple Final Output Nodes if the execution has been branched off from an upstream node.\n\nA name for the output and an output type must be configured here because the response streamed back from the endpoint (when the workflow is taken to production) has this information included.\n\n![Final Output Node](https://storage.googleapis.com/vellum-public/help-docs/terminal_node.png)\n\n### Error Node\n\nThe Error Node enables you to reject the full workflow, terminating execution with an error event wherever you define it in your execution flow. There are two types of errors you could raise with this node:\n\n- Pass-through - Use an `Error` output from an upstream node and pass it through to this node.\n- Custom - Define your own `String` output that this node will use as an error message\n\n![Error Node](https://storage.googleapis.com/vellum-public/help-docs/error-node.png)\n\n### Note Node\n\nThe Note Node helps you keep your workflow organized and maintainable. You can use it to add context, related links, or other pieces of information in your workflow. They don't alter any functionality in your workflow, and are purely for your team and you. You can change the font size and even use colors!\n\n![Note Node](https://storage.googleapis.com/vellum-public/help-docs/note_node.png)\n"
      },
      "docs/content/help/workflows/common-architectures.mdx": {
        "markdown": "---\ntitle: Building Common LLM architectures with Vellum Workflows\ndescription: >-\n  Discover how to build dynamic architectures using Workflows, from RAG systems\n  to message routing and looping\n---\n\nWith a large number of supported node types (full details here: [Experimenting with Workflows](/help-center/workflows/experimentation)) and few limits on how they can be connected to each other, the types of architectures/ applications you can create using Workflows is very large.\n\nThe list of architectures below is not exhaustive, we’re continuing to build it out. If you come up with an interesting architecture that you think the community might benefit from, please reach out so we can add it to the list here.\n\n## Create a Retrieval Augmented Generation (RAG) system\n\nLLM applications often require specific context from a Vector DB which is added into the prompt. Forget signing up for multiple systems and being stuck on various micro decisions, with Vellum you can prototype a RAG system in minutes\n\n**Walkthrough**\n\n<Steps>\n\n### Create a Document Index and upload your documents\nFollow this article for tips: [Uploading Documents](/help-center/documents/uploading-documents))\n\n### Add a Search Node in your Workflow\n\nPlace this anywhere and connect it to the \"entrypoint\"\n\n### Add a Prompt Node \n\nThe prompt node should take the results of your Search Node as an input variable\n\n### Link to a Final Output or other downstream node\nFor example, if the Prompt Node result is a certain value branch execution based on a Conditional Node)\n\n### Set up input variables and hit Run!\n\n</Steps>\n\n**Workflow**\n\n<iframe\n  src=\"https://app.vellum.ai/public/workflow-deployments/090744e8-3ec0-4047-ba98-c1445068397f\"\n  width=\"80%\"\n  height=\"350px\"\n  style=\"margin: 24px auto;\"\n  experimental_enableRequestFullscreen={true}\n/>\n\n## Route messages to a Human\n\nIf you’re building an agent that answers questions coming from users (e.g., a support chatbot), you may want to set up rules such that anytime the incoming message from a user is sensitive (e.g., the user is angry or in a dangerous situation) then the LLM automatically escalates it to a human. With Workflows you’d be able to build that out real quick.\n\n**Walkthrough**\n\n<Steps>\n\n### Add a classification prompt\nUse a Prompt Node to filter out incoming messages\n\n### Add a downstream prompt \nUse another prompt node for the LLM to respond to messages that don’t need to be escalated\n\n### Add and connect two Final Output Nodes\nConnect the classification prompt outputs to two separate Final Output Nodes\n\n### Set up variables and hit Run!\n\n</Steps>\n\n**Workflow**\n\n<iframe\n  src=\"https://app.vellum.ai/public/workflow-deployments/d213be0a-65f0-407b-bafc-76077bfa3692\"\n  width=\"80%\"\n  height=\"350px\"\n  style=\"margin: 24px auto;\"\n  experimental_enableRequestFullscreen={true}\n/>\n\n## Retrying a Prompt Node in case of non-deterministic failure\n\nPrompt nodes support two selectable outputs - one from the model in case of a valid output and one in case of a non deterministic error. Model hosts fail for all sorts of reasons that include timeouts, rate limits, or server overload. You could make your production-grade LLM features resilient to these features by adding retry logic into your Workflows!\n\n**Walkthrough**\n\n<Steps>\n\n### Add a standard Prompt Node\n\n### Add a Conditional Node (`Error Check`)\nThis node will read from the new Error output from the Prompt Node and check to see if it's _not null_.\n\n### Define another Conditional Node (`Count Check`)\nThis node will read from the Prompt Node's Execution Counter, and check if it's been invoked more than your desired limit (`3`).\n\n### Loop back to the Prompt Node\nLoop back to the Prompt Node if it's under the limit, or exit with some error message if it's over the limit. In the case that the error is null, exit with the Prompt Node's response.\n\n</Steps>\n\n**Workflow**\n\n<iframe\n  src=\"https://app.vellum.ai/public/workflow-deployments/8c3fac0e-b991-43f5-846a-40a754234feb\"\n  width=\"80%\"\n  height=\"350px\"\n  style=\"margin: 24px auto;\"\n  experimental_enableRequestFullscreen={true}\n/>\n\n## Summarizing the contents of a PDF file\n\nVellum Document Indexes are typically used to power RAG systems via Search Nodes. However, they can also be used to operate on the entirety of a single file's contents.\nIn this example, we make use of Vellum Document Indexes not for the purpose of search, instead, to leverage the OCR that's performed and operate on the raw text that's extracted\nfrom a PDF file.\n\nPrerequisites:\nYou need to have ....\n- Created a Document Index. Note: it doesn't matter what embedding model or chunking strategy you choose, since we're only leveraging the OCR capabilities of the Document Index.\n- Uploaded a PDF file to the Document Index and noted down its ID.\n- Generated a Vellum API Token and saved its value as a Workspace Secret.\n\n**Walkthrough**\n\n<Steps>\n\n### Set the input to the workflow\n\nThis will be the ID of a Document that was previously uploaded to a Document Index\n\n### Add a Templating Node (`Document API URL`)\n\nThis will construct the url of a Vellum API we want to hit.\n\n### Add an API Node (`Document API`) \n\nThis will ping the Vellum API and retrieve metadata about the Document.\n\n### Add a Templating Node (`Processed Document URL`)\n\nThis will extract the url of the processed document from the API response.\n\n### Add an API Node (`Processed Document Contents`)\n\nThis will retrieve the text contents of the Document.\n\n### Pass those contents to a Prompt Node that summarizes the text.\n\n</Steps>\n\n**Workflow**\n\n<iframe\n  src=\"https://app.vellum.ai/public/workflow-deployments/94f60249-8729-4c10-bb54-941621abceaa\"\n  width=\"80%\"\n  height=\"350px\"\n  style=\"margin: 24px auto;\"\n  experimental_enableRequestFullscreen={true}\n/>\n"
      },
      "docs/content/help/workflows/common-data-transforms.mdx": {
        "markdown": "---\ntitle: Guide to Data Transformation with Templating Nodes\ndescription: >-\n  Learn how to manipulate strings, JSON, chat history, and search results using\n  Templating Nodes for efficient AI workflows.\n---\n\nThe Templating Node supports [Jinja2](https://jinja.palletsprojects.com/en/3.1.x/templates/) syntax and is a flexible way of performing light-weight data transformations as part of your Workflow. Here are some common data manipulations you may want to make in a Workflow and how you define them via Templating Nodes.\n\n# String Manipulation\n\n### Output Only the First n Characters\n\nUseful if you want to ensure that you’re not providing too much context to a prompt.\n\n![String Manipulation](https://storage.googleapis.com/vellum-public/help-docs/template_string_manipulation.png)\n\n<CodeBlock title=\"Template\">\n    ```jinja2\n    {{ user_input[:10] }}\n    ```\n</CodeBlock>\n\n<CodeBlock title=\"Example\">\n    ```\n    Inputs:\n    -------\n    user_input = \"Hello, world!\"\n\n    Output:\n    -------\n    \"Hello, wor\"\n    ```\n</CodeBlock>\n\n\n# JSON Manipulation\n\n### Checking LLM Output for Valid JSON\n\nIf you’re trying to extract structured JSON from unstructed text using a prompt, or if you want to use OpenAI’s function-calling functionality, it’s likely you’ll need to check whether an LLM’s response is valid JSON and if so, convert the output string as proper JSON.\n\nYou can also extract specific properties from valid JSON strings.\n\nHere’s how to do it:\n\n![JSON Manipulation](https://storage.googleapis.com/vellum-public/help-docs/template_json_manipulation.png)\n\n<CodeBlock title=\"Template\">\n    ```jinja2\n    {% if maybe_json|is_valid_json_string %}\n        {{ maybe_json }}\n        \n        ## to extract specific properties from the JSON\n        {{ json.loads(maybe_json).property }}\n    {% else %}\n        {{ {} }}\n    {% endif %}\n    ```\n</CodeBlock>\n\n<CodeBlocks>\n    <CodeBlock title=\"Example 1: Valid JSON\">\n        ```\n        Inputs:\n        -------\n        maybe_json = '{\"key\": \"value\"}'\n\n        Output:\n        -------\n        {\"key\": \"value\"}\n        ```\n    </CodeBlock>\n    <CodeBlock title=\"Example 2: Invalid JSON\">\n        ```\n        Inputs:\n        -------\n        maybe_json = 'not valid json'\n\n        Output:\n        -------\n        {}\n        ```\n    </CodeBlock>\n</CodeBlocks>\n\n\n# Chat History Manipulation\n\n### Output the Most Recent n Messages in Chat History\n\nIf you’re building a chatbot and conversations can be long-lived, you may find that your chat histories are too long to fit within the context window of a prompt.\n\nOnce simple solution is to only ever include the most recent `n` messages from the conversation. Here’s how you can do this:\n\n![Chat History Manipulation](https://storage.googleapis.com/vellum-public/help-docs/template_chat_history_manipulation.png)\n\n<CodeBlock title=\"Template\">\n    ```jinja2\n    {{ chat_history[-2:] }}\n    ```\n</CodeBlock>\n\n<CodeBlock title=\"Example\">\n    ```\n    Inputs:\n    -------\n    chat_history = [\n        {\"role\": \"USER\", \"text\": \"What color is the sky?\"},\n        {\"role\": \"ASSISTANT\", \"text\": \"Blue\"},\n        {\"role\": \"USER\", \"text\": \"But why\"}\n    ]\n\n    Output:\n    -------\n    [\n        {\"role\": \"ASSISTANT\", \"text\": \"Blue\"},\n        {\"role\": \"USER\", \"text\": \"But why\"}\n    ]\n    ```\n</CodeBlock>\n\n\n# Search Result Manipulation\n\n### Citing Sources via Chunk Concatenation Customization\n\nSearch Nodes make it easy to query a vector store for text that’s semantically similar to some input. By default, the chunks of text that are returned are concatenated together into a single string using a configurable separator (e.g. `\\n\\n#####\\n\\n`). The flattened string can then be fed directly to Prompt Nodes as an input variable and referenced within your prompt template.\n\nHowever, if you want your Prompt to cite its sources and say where it got the info it used to generate its response, then you’ll need more than just the chunk text. You need the name/id/url/etc of the document each chunk came from and you need to provide this info to your Prompt in a consumable form. This is where Templating Nodes come in.\n\nThe template below takes in the raw search results and performs custom chunk concatenation, but also pulls in info from the document associated with each chunk.\n\n![Search Result Manipulation](https://storage.googleapis.com/vellum-public/help-docs/template_search_results_manipulation.png)\n\n<CodeBlock title=\"Template\">\n    ```jinja2\n    {% for result in search_results -%}\n    Source:\n    {{ result.document.label }}\n\n    Content:\n    {{ result.text }}\n    {% if not loop.last %}\n\n    #####\n\n    {% endif %}\n    {% endfor %}\n    ```\n</CodeBlock>\n\n<CodeBlock title=\"Example\">\n    ```\n    Inputs:\n    -------\n    search_results = [\n        {\n            \"text\": \"Hello, world!\",\n            \"score\": 0.015,\n            \"keywords\": [\"hello\", \"world”],\n            \"document\": {\n                \"id\": \"22df06cf-c876-45ef-a162-4836c410e37b\",\n                \"label\": \"introduction.txt\",\n                \"external_id\": \"introduction.txt\"\n            }\n        },\n        {\n            \"text\": \"The sky is blue.\",\n            \"score\": 0.005,\n            \"keywords\": [\"sky\", \"blue”],\n            \"document\": {\n                \"id\": \"d9655f5f-885e-400e-b000-00b605a03a99\",\n                \"label\": \"description.txt\",\n                \"external_id\": \"description.txt\"\n            }\n        }\n    ]\n\n    Output:\n    -------\n    Source:\n    introduction.txt\n\n    Content:\n    Hello, world!\n\n\n    #####\n\n\n    Source:\n    description.txt\n\n    Content:\n    The sky is blue.\n    ```\n</CodeBlock>\n\n\n# Need Help?\n\nTemplating nodes are flexible and powerful, but admittedly not the most intuitive. If you’d like to see additional examples here, or have ideas for custom filters that we should add (like the `is_valid_json_string` filter [used above](/help-center/workflows/common-data-transforms#checking-llm-output-for-valid)), please don’t hesitate to [reach out to us on discord](https://discord.gg/6NqSBUxF78)!\n"
      },
      "docs/content/help/workflows/code-execution-node-examples.mdx": {
        "markdown": "---\ntitle: Code Execution Node Examples\ndescription: >-\n  Discover how to use Python or TypeScript for data transformations in Vellum\n  Workflows, including arithmetic and JSON manipulation.\n---\nThe Code Execution Node supports running arbitrary Python or TypeScript code to perform data transformations in your Workflow. It can simplify your workflow, especially in cases where a combination of Conditional, Templating, and Merge nodes are used. Below are some example use cases:\n\n# Arithmetic\n\n### Check if a number is a multiple of another\n\n{/* prettier-ignore */}\n<CodeBlocks>\n  <CodeBlock title=\"Python\">\n      ```python\n      def main(\n          arg1: int,\n          arg2: int,\n      ) -> int:\n          # this function returns the multiple if arg1 is a multiple of arg2\n          # or the remainder otherwise\n          if arg1 % arg2 == 0:\n              return arg1 / arg2\n          else:\n              return arg1 % arg2\n      ```\n  </CodeBlock>\n  <CodeBlock title=\"TypeScript\">\n      ```typescript\n      async function main(inputs: {\n        arg1: number,\n        arg2: number,\n      }): Promise<number> {\n        // this function returns the multiple if arg1 is a multiple of arg2\n        // or the remainder otherwise\n        if (inputs.arg1 % inputs.arg2 === 0) {\n          return inputs.arg1 / inputs.arg2\n        } else {\n          return inputs.arg1 % inputs.arg2\n        }\n      }\n\n      ```\n  </CodeBlock>\n</CodeBlocks>\n{/* prettier-ignore-end */}\n\n# JSON Manipulation\n\n### Remap the keys\n\n{/* prettier-ignore */}\n<CodeBlocks>\n  <CodeBlock title=\"Python\">\n      ```python\n      def main(\n          arg: dict\n      ) -> dict:\n          return {\n            \"newKey\": arg.get(\"oldKey\", None)\n          }\n\n      ```\n\n  </CodeBlock>\n\n  <CodeBlock title=\"TypeScript\">\n      ```typescript\n      async function main(inputs: {\n        arg: Record<string, any>,\n      }): Promise<Record<string, any>> {\n        return {\n          newKey: inputs.arg.oldKey\n        };\n      }\n      ```\n  </CodeBlock>\n</CodeBlocks>\n{/* prettier-ignore-end */}\n\n# Code Packages\nYou can add both pip packages for Python code and npm packages for TypeScript code. You must provide exact package versions and add the import to your code yourself.\n\nNote that whenever you update your packages list, the first execution after doing so may be slow due to our system creating and caching the custom runtime.\n\n```typescript\nimport * as _ from \"lodash\";\n\nasync function main(inputs: {\n  test: string,\n}): Promise<number> {\n  return inputs.test.length + _.floor(5.452);\n}\n```\n\n![Code Package example](https://storage.googleapis.com/vellum-public/help-docs/workflow-node-packages.png)\n\n"
      },
      "docs/content/help/workflows/integrating.mdx": {
        "markdown": "---\ntitle: Easy Integration with Vellum's API for Workflows\ndescription: >-\n  Learn how to integrate and monitor your Workflow with Vellum's API, making\n  production deployment quick and easy.\n---\n\nOnce you have your Workflow built in Vellum’s UI, we provide an easy way to use it in production. Vellum handles the execution of the Workflow — all you need to provide are the input variables to call the Workflow. Vellum abstracts away the need to store the prompts, semantic search & the business logic tying together these prompts in your code base. Using Workflows in production becomes a matter of minutes, not days.\n\nThis help center article covers how to make the integration, and the monitoring options you have once in production.\n\n## Workflow Code Snippet Integration\n\nOnce you Deploy the Workflow from the UI, you’re taken to a code snippet which you need to use to call this Workflow in production. The adjacent screenshot shows the Workflow Deployment’s name & its input variables\n\n![Workflow Details](https://storage.googleapis.com/vellum-public/help-docs/workflow_details.png)\n\n![Workflow API Code Snippet](https://storage.googleapis.com/vellum-public/help-docs/workflows_api_code_snippet.png)\n\n## Workflow Executions\n\nOnce you start making requests to the Workflow, all the executions are stored in the Executions tab for monitoring purposes. Any time you find an edge case in production, you can save that specific Execution back as a Scenario for future testing. This is typically used to build out your test bank and debugging unexpected behavior. By running this Scenario in the UI you can see what the responses were at each step and tweak the Workflow logic (prompts, semantic search, business logic tying together the prompts)\n\n![Workflow Execution Observability](https://storage.googleapis.com/vellum-public/help-docs/workflow_executions.png)\n\n## Workflow Executions Details\n\nClicking the View Details button on the Execution brings you to a UI where you can see the inputs, outputs and latency at each step of the Workflow when it was run in production\n"
      },
      "docs/content/help/workflows/function-calling.mdx": {
        "markdown": "---\ntitle: Function Calling with Chat Models\ndescription: Learn how to use function calling with Chat Models in Vellum Workflows\n---\n\nFunction calling (aka “tool calling”) helps you get consistent structured data from LLMs. It lets you call custom functions, interact with external APIs, and generally turn natural language into something code can understand.\n\nBut, don't be misled by the name—this feature doesn't _actually_ call functions for you.\n\nInstead, it creates a JSON object with the name of the function to call and the arguments to pass, which you can use to trigger functions in your code. OpenAI models generate this JSON based on the tools you define with the [tools parameter](https://platform.openai.com/docs/api-reference/chat/create#chat/create-functions) in the API.\n\nSo now that we’ve cleared that part, let’s learn _how you can use function calling with Chat Models in Vellum._\n\n# Using Function Calling in Vellum\n\nIn this tutorial, we cover how function calling works and how to use it in Vellum Workflows:\n\nBy the end of this tutorial, you'll learn to do four tasks in Vellum:\n\n- `Define function calls` in a Prompt Node within Workflows;\n- Enable your models to `auto-select or enforce the execution` of a function response;\n- Pass `Function Call outputs` from a Workflow to your code;\n- `Run functions` with the provided arguments.\n\n<Callout intent=\"info\">\n  💡 Keep in mind that although we’ll run *some arbitrary functions* to close\n  the response loop, we won't go into much detail on how to call external APIs\n  using the generated arguments.\n</Callout>\n\n## Outline\n\nFor this tutorial, we’ll create an AI-powered customer chatbot for a smartphone outlet, that will have two tools (or functions) defined:\n\n- `delivery_data`\n  - This function will require three parameters: `Phone`, which returns the phone's name, `Location`, which returns the user's location, and `Condition`, which returns the phone's condition.\n- `call_agent`\n  - This one accepts one parameter: `Question` which is the user's query.\n\n<Callout intent=\"info\">\n  💡 This tutorial demonstrates how to define function calling messages in\n  Prompt Nodes within Workflows. However, they can also be configured in Prompt\n  Variants within a Prompt Sandbox.\n</Callout>\n\n## Step 1: Setting up Messages and Conversation History\n\nTo setup an OpenAI API call in Vellum, we’ll be using a `Prompt Node`. This node enables the configuration of all parameters required for an OpenAI API call.\n\nWe begin by adding the Prompt Node in the Workflow:\n\n![Add Prompt Node](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/prompt-node.png)\n\nTo edit the Prompt Node, just click on the “expand” icon like on the image above.\n\nNow let’s set up the messages.\n\n### System Message\n\nFirst we’ll start by adding a `system message` that tells the model to classify user intents. These models can hallucinate, so we’ll explicitly tell the model to ask for clarification if there's incomplete information. Here’s the system message we used:\n\n<Callout intent=\"info\">\n  💬 You're great at classifying user intents. Don't assume which values to use\n  in functions—ask for clarification if needed.\n</Callout>\n\n### User Message\n\nNext, we'll create a dynamic variable `msg` , and add it in the `user message` to ensure it automatically updates with the variable's content.\n\nHere’s what the Prompt Node looks like once we've added the System and the User message:\n\n![Prompt Node Setup](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/prompt-node-setup.png)\n\n### Chat Mode\n\nTo use function calling with Chat Models, you first need to set up three things in the Prompt Node:\n\n1. **Chat history variable**: Simply click on `Add Variable` and write `$chat_history`\n2. **Chat generation model**: Click on the model dropdown and select the latest GPT-4 turbo model, or `GPT-4 Turbo 04/09/2024`\n3. **Chat history block**: Click on the “Add” dropdown on the right, and select “Add Chat History”\n\nHere’s what the prompt should look like after you've completed the final step:\n\n![Prompt Node With Chat History](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/prompt-node-chat-history.png)\n\nNow let’s set up the functions.\n\n## Step 2: Defining Function Calls\n\nTo include a `Function` block, simply select it from the \"Add\" dropdown menu. Once added, you’ll notice a grayed out box that says “todo”:\n\n![Add Function](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/add-function.png)\n\nWhen you click that box, you can change the function's name and add a custom description and parameters:\n\n![Edit Function](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/edit-function.png)\n\nYou'll notice there are two options available to define these functions: `Form` and `Upload`. The `Form` option allows you to define your function calling message using the UI, while the `Upload` option enables you to upload a JSON or YAML file. The uploaded file will automatically map its values to the fields.\n\nYou might upload a file if you already have your functions defined in in your codebase and want to track their source of truth there.\n\nIn this tutorial, we’ll upload this JSON file for the `delivery_data` function that has three properties (condition, phone, location):\n\n```jsx\n{\n  \"name\": \"delivery_data\",\n  \"description\": \"Calls a function with phone and location details\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"type\": {\n        \"description\": \"returns if the model is used or new\",\n        \"type\": \"string\"\n      },\n      \"phone\": {\n        \"description\": \"Description about the phone\",\n        \"type\": \"string\"\n      },\n      \"location\": {\n        \"description\": \"The location of the user\",\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\n      \"type\",\n      \"phone\",\n      \"location\"\n    ]\n  }\n}\n```\n\nAlso, notice that all of these are required, so the model needs to collect all three in order to generate the response. Here’s what the UI returned:\n\n![Uploaded Function Definition](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/edit-function-2.png)\n\nHave in mind that you can also check the \"`Forced`\" box to ensure the model always uses this function. If left unchecked, the model will decide which function to use based on the user query. OpenAI's latest models are quite good at making the right choice, so we’ll leave it unchecked.\n\n![Toggle Forced Function](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/forced-function.png)\n\nNow let’s create the other Function block `call_agent`. Using the same process as earlier, we add this function as well, which has one required parameter, \"question\" which is the user's query:\n\n![Call Agent Function](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/edit-function-3.png)\n\nNow that we defined everything, our setup looks like this:\n\n![Prompt Node With Functions](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/prompt-node-finished.png)\n\n<Callout intent=\"info\">\n💡 With this setup, our OpenAI API calls will take into account the system and user message, the chat history, and two function calling messages to generate responses to a given user query.\n\n</Callout>\n\n## Step 3: Testing the API call\n\nTo test the API call, we’ll use the `Chat History` simulation, where you can run user-assistant messages. You can find this option in the top-left corner of your Workflow sandbox:\n\n![Workflow Chat History](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/workflow-chat-history.png)\n\n### Testing the `delivery_data` function\n\nIn the image below, you'll notice that the model recognizes the user's inquiry about delivery options for a particular mobile phone. Consequently, it prompts the user for the _other required parameters_, \"**location**,\" & \"**condition**\".\nThis corresponds to the function call we defined earlier: `delivery_data`, and the model successfully determined which function to call for this request:\n\n![Workflow Chat History](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/workflow-chat-history-2.png)\n\nAfter the user provides the missing information, the model then proceeds to generate the JSON object with the function parameters. Below, you can see that the model successfully gathered all required parameters and displayed them in the output of the Prompt Node:\n\n![Prompt Node Function Called](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/prompt-node-response.png)\n\nNext, you’ll probably want to pass these values directly to your code. Let’s learn how to do that in the next section.\n\n## Step 4: Pass standardized Function Call outputs to your code\n\nTo ensure consistent output across different models, you can use Vellum’s standardized `Function Call` output type.\n\nTo do this, you need to add a Templating Node that receives _all model outputs,_ and extracts a specific one.\n\nIn our case, we add a Templating Node, where we extract the Prompt Node’s outputs as an `Array`, and we set the output type to be a `Function Call`:\n\n![Extract Function from Templating Node](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/template-node.png)\n\nFinally, you can add a `Final Output` node to pass the function call into your code.\n\nHere’s what the final Workflow looks like:\n\n![Final Workflow](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/final-workflow.png)\n\nAnd here’s the raw format from the Final Output node:\n\n```jsx\n{\"state\":\"FULFILLED\",\"arguments\":{\"type\":\"new\",\"phone\":\"iPhone 15 Pro\",\"location\":\"San Diego\"},\"id\":\"call_2wVIb9fBFDYh5rPP6QOOemok\",\"name\":\"delivery_data\"}\n```\n\nThis is beneficial if you want your Workflow to _exclusively_ produce function call responses. But in real situations, you might have a Workflow that should generate _both Assistant and Function call outputs._\n\nLet’s look at how you can conditionally branch out those outputs with Vellum.\n\n## Step 4: Branching out Prompt Node Outputs\n\nTo branch out the model's responses, you’ll first need to add a **`Templating Node`** and extract the _output type_ from the Prompt Node:\n\n![Extract Output Type Templating Node](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/branching-template-node.png)\n\nNext, you’ll add a Conditional Node, where you’ll verify if the output type is a `FUNCTION_CALL`. If it is, you can divert to the function calling flow; otherwise, proceed with the alternative path.\n\nHere’s what the setup should look like:\n\n![Conditional Node Branching](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/conditional-node.png)\n\nFinally, we add the Function calling and the alternate path:\n\n![Function Calling with Alternative Workflow Branch](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/conditional-final-output.png)\n\nThe first path will verify if the model generates a function call message and then pass that value as the final output. The second path will check if the model produces an Assistant message and similarly pass that value as the final output.\n\nOnce all of this is connected, we get this Workflow:\n\n![Full Workflow Diagram](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/full-workflow.png)\n\nYou can now deploy your Workflow in your code.\n\nOnce deployed, you’ll need to invoke it using two input variables:\n\n- `chat_history` – `CHAT_HISTORY`\n- `user` – `STRING`\n\nAnd the API call will return, two output variables:\n\n- `function_call` – `FUNCTION_CALL`\n- `answer` – `STRING`\n\n## Step 5: Adding arbitrary functions\n\nTo showcase how this Workflow works, in our code, we wrote arbitrary functions that will print some static messages once the model passes the required parameters.\n\nFor the `delivery_data` function we’ll retrieve static message:\n\n<Callout intent=\"info\">\n  💬 For delivery options in San Diego: You can get same-day delivery if you\n  order before noon, with deliveries happening between 1:00 PM and 8:00 PM. If\n  you miss the deadline, don't worry! You can still get your order the next day\n  if you place it after noon, with deliveries scheduled between 10:00 AM and\n  6:00 PM.\n</Callout>\n\nFor the `call_agent` function we send another static message:\n\n<Callout intent=\"info\">\n  💬 Please wait until I connect you with an agent…\n</Callout>\n\nThis is what our code looks like:\n\n```jsx\nimport json\n\ndef main(input_str):\n    # Convert the string to a dictionary\n    data = json.loads(input_str)\n\n    # Check the 'name' field and output the corresponding message\n    if data.get(\"name\") == \"delivery_data\":\n        return \"For delivery options in San Diego: You can get same-day delivery if you order before noon, with deliveries happening between 1:00 PM and 8:00 PM. If you miss the deadline, don't worry! You can still get your order the next day if you place it after noon, with deliveries scheduled between 10:00 AM and 6:00 PM.\"\n    elif data.get(\"name\") == \"call_agent\":\n        return \"Please wait until I connect you with an agent…\"\n    else:\n        return \"unknown operation\"\n```\n\n## Step 6: Testing the workflow\n\nNow, let’s see how this works!\n\n### **Case 1: Ask incomplete delivery questions**\n\nWorks as intended, the model asks about the other required parameter: `_location_`.\n\n![Test Case 1](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/test-chat-1.png)\n\n### **Case 2: Closing the loop, Call the `delivery_data` function**\n\nWorks as intended; the model provides the arbitrary answer we added in our function for the `delivery_data` function:\n\n![Test Case 2](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/test-chat-2.png)\n\n### **Case 3: Ask other questions**\n\nThe model accurately follows the instructions and asks the user if they want to be connected with an agent:\n\n![Test Case 3](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/test-chat-3.png)\n\n### **Case 4: Call the call_agent function if user says yes**\n\nThe model successfully runs the `call_agent` function and outputs the arbitrary answer we defined:\n\n![Test Case 4](https://storage.googleapis.com/vellum-public/help-docs/function-calling-in-workflows/test-chat-4.png)\n\n## Conclusion\n\nHopefully, through this guide, you've learned how to effectively set up and utilize function calling with Chat Models in Vellum Workflows.\nBy following the steps outlined, you can define functions or tools, enable models to auto-select or enforce function execution, pass function call outputs to your code, and run functions with the provided arguments. This powerful feature allows you to create sophisticated, AI-powered workflows that can handle complex user interactions and seamlessly integrate with your existing systems.\n\n# Quirks and Tips for Handling Functions\n\nSee below for a quick overview of some common scenarios for handling functions and passing them between nodes. \n\nIn all three examples, the Prompt Node returns text beyond just the function call. We show how to filter that away and pass the Function Call as part of an Array or on its own.\n- Extracting an Array of multiple Function Calls with a Code Execution Node\n- Extracting a single Function Call with a Code Execution Node\n- Extracting a single Function Call with a Templating Node\n\n<iframe\n  src=\"https://app.vellum.ai/public/workflow-deployments/f0eda95f-6538-4abb-ad3d-ee785d770ee1\"\n  width=\"80%\"\n  height=\"350px\"\n  style=\"margin: 24px auto;\"\n  experimental_enableRequestFullscreen={true}\n/>\n"
      },
      "docs/content/help/workflows/examples-and-walkthroughs.mdx": {
        "markdown": "---\ntitle: Examples and Walkthroughs\ndescription: >-\n  See interactive Vellum architectures and watch video walkthroughs of them! Use\n  these as a great starting point for your own applications.\n---\n\nBelow you'll find many example architectures for common use-cases, alongside video walkthroughs that explain the architecture of each. You're free to use these as a starting point for your own applications!\n\n#### Customer Support Bot with Escalation To Human\n\nConcepts: Routing, Classification, Chatbot, Statefulness, State Management, Function Calling, Dynamic API URLs\n\n<Accordion title=\"Example Workflow\">\n  <iframe\n    src=\"https://app.vellum.ai/public/workflow-deployments/aeb28969-e4c0-45fe-88a9-bf3fb7e79b76\"\n    width=\"100%\"\n    height=\"450px\"\n    experimental_enableRequestFullscreen={true}\n  />\n</Accordion>\n\n#### Slack Support Bot, Cites Sources using Multiple Indexes\n\nConcepts: Document Indexes, Metadata, Zapier, Slack, Citing Sources, Combining Sources \n\n<AccordionGroup>\n  <Accordion title=\"Example Workflow\">\n    <iframe\n      src=\"https://app.vellum.ai/public/workflow-deployments/788489db-7020-4167-b010-96499f7dd102\"\n      width=\"100%\"\n      height=\"450px\"\n      experimental_enableRequestFullscreen={true}\n    />\n  </Accordion>\n  <Accordion title=\"Tip: Zapier API Calls\">\n    Passing JSON Arrays in Zapier can be tricky. Instead, you can use Code Blocks to make it easier. \n    \n    You can use the follow code snippet as inspiration for your own API calls with Zapier Code Blocks and Python.\n    ```python\n      import requests\n\n      # Replace with your actual Vellum API key\n      VELLUM_API_KEY = \"...\"\n\n      url = \"https://predict.vellum.ai/v1/execute-workflow\"\n\n      headers = {\n          \"Content-Type\": \"application/json\",\n          \"X_API_KEY\": VELLUM_API_KEY\n      }\n\n      data = {\n          \"workflow_deployment_name\": \"vellum-customer-support-q-a-demos\",\n          \"release_tag\": \"LATEST\",\n          \"inputs\": [\n              {\n                  \"type\": \"STRING\",\n                  \"name\": \"question\",\n                  \"value\": input_data[\"user_question\"] # whatever Zapier values you want to use here\n              }\n          ]\n      }\n\n      response = requests.post(url, headers=headers, json=data)\n\n      # Print the response from the server\n      print(response.status_code)\n      print(response.json())\n\n      return response.json()\n    ```\n  </Accordion>\n</AccordionGroup>\n\n#### Chatbots Debating Each Other\n\nConcepts: Chatbots, Chat History Modification, Conditionals, Adversarial Debate, Academic Research\n\n<Accordion title=\"Example Workflow\">\n  <iframe\n    src=\"https://app.vellum.ai/public/workflow-deployments/bfb724c7-008c-4d9a-857b-5d50ee11ea89\"\n    width=\"100%\"\n    height=\"450px\"\n    experimental_enableRequestFullscreen={true}\n  />\n</Accordion>\n\n#### Convert PDF to CSV\n\nConcepts: PDF Parsing, CSV Generation, Data Extraction, Data Transformation, Document Indexes, Map Nodes\n\n[Blog post](https://www.vellum.ai/blog/tutorial-how-to-convert-any-pdf-to-csv)\n\n<Accordion title=\"Example Workflow\">\n  <iframe\n    src=\"https://app.vellum.ai/public/workflow-deployments/371fce4c-46bb-4d3e-ba15-26b4a13455d1\"\n    width=\"100%\"\n    height=\"450px\"\n    experimental_enableRequestFullscreen={true}\n  />\n</Accordion>\n\n#### Multiple Parallelized Function Calls\n\nConcepts: Parallel Function Calls, Concurrency, Map Nodes, Chat History, API Calls\n\n<Accordion title=\"Example Workflow\">\n  <iframe\n    src=\"https://app.vellum.ai/public/workflow-deployments/95d38e99-b26e-473f-95a2-53bc3502007c\"\n    width=\"100%\"\n    height=\"450px\"\n    experimental_enableRequestFullscreen={true}\n  />\n</Accordion>\n\n#### Lookup Conference Attendees with Perplexity\n\nThis example takes a URL, looks up all people mentioned on the page, and sorts them in accordance with how involved they or their affiliates are with AI / LLMs. \n\nConcepts: Perplexity, SERP, Research Automation, Structured Data Extraction, Parallelization\n\n<Accordion title=\"Example Workflow\">\n  <iframe\n    src=\"https://app.vellum.ai/public/workflow-deployments/f47c460c-3129-48f6-a1a2-af6ee9a54a72\"\n    width=\"100%\"\n    height=\"450px\"\n    experimental_enableRequestFullscreen={true}\n  />\n</Accordion>\n"
      },
      "docs/content/help/evaluation/quantitatively-evaluating-outputs.mdx": {
        "markdown": "---\ntitle: Maximize LLM Development Quality with Vellum's Evaluations\ndescription: >-\n  Discover how Vellum's Evaluations feature quantitatively evaluates LLM\n  outputs, ensuring model quality across numerous scenarios.\n---\n\nEnsuring model quality is challenging, because prompts need to work effectively and\nconsistently over a wide range of potential inputs.\nWhen modifying a Prompt, adjusting parameters, or switching models, the likelihood of regression is high.\nThis is where [quantitative evaluation](https://www.vellum.ai/blog/how-to-evaluate-the-quality-of-large-language-models-for-production-use-cases) comes in.\n\nVellum's answer to quantitative evaluation are Test Suites and Metrics. Unlike Comparison Mode and Chat Mode,\nwhere the output of each Scenario is qualitatively evaluated by visual inspection,\nTest Suites use Metrics that return scores between 0 and 1 to provide a more objective measure of quality over a wider range of scenarios.\nThis is especially important when your prompt's coverage needs scale and visual inspection is no longer feasible,\nwhich typically happens when you have 10+ scenarios.\n\nTest Suites cover common use cases in LLM development:\n\n1. Test Driven Development of Prompts/Workflows in a Sandbox\n2. Performance testing on large numbers of Scenarios\n3. Regression testing before deploying a change to a Prompt or Workflow\n4. Evaluating [external entities](#testing-functions-external-to-vellum)\n\nIf you're looking to improve the velocity or quality of your LLM development, Test Suites could be your answer.\n\n# Getting Started\n\n## Create a Test Suite\n\nYou can create standalone Test Suites through the Test Suites page in the [Evaluations tab](https://app.vellum.ai/evaluations).\nYou can also create Test Suites starting from a Prompt or Workflow Sandbox.\nHere, we'll begin by creating a Test Suite from a Prompt Sandbox.\n\n1. From your Prompt Sandbox, click on Evaluations sub-tab\n2. Click \"Create New Test Suite\" if you haven't set up a Test Suite for this Prompt Sandbox yet or click the gray \"Add Test Suite\" button on the right of the page\n3. The \"label\" and \"name\" fields are autopopulated with the name of your Sandbox\n4. Open the \"Interface Configuration\" to see the expected inputs/outputs for this Test Suite. This is also autopopulated from your Sandbox.\n5. If you are creating a Test Suite from scratch, you can customize the inputs/outputs to meet your needs. For now, leave this as it is and click next to start setting up your Metrics.\n6. Click the \"Add Metric\" button to select one or more Metrics to evaluate your output against\n7. Select \"Exact Match\" from the list of available Metrics. To learn how to create Custom Metrics that appear in this list, see Vellum's [Metrics](#evaluation-metrics)\n8. Press \"Confirm\" to start mapping the Metric to this Test Suite\n9. First, select \"Completion\" to map the input to the output of your Prompt\n10. Next, select \"Target\" and then \"Add New\" in the dropdown to create a new expected output variable that's mapped to this input\n11. Press \"Next\" in the bottom right\n\nWell done! You've now created a Test Suite with the Exact Match Metric to check for whether the output is desirable.\n\n![Test Suite Creation - Metric Configuration](https://storage.googleapis.com/vellum-public/help-docs/quantitatively-evaluating-outputs/test-suite-metrics.png)\n\n## Create a Test Case\n\nTest Cases are analogous to Scenarios. A Test Case by default will have a column for each input and output variable expected by your Test Suite,\nas well as columns for any expected output variables required by your selected Metric.\nWhen a Test Suite is run, Vellum will iterate over every Test Case it contains.\nFor each Test Case, it will feed the provided inputs into the Prompt, Workflow, or entity being tested.\nThe output will be passed to the Metric based on your mapping in the previous step, and a score will be provided based on the Metric being used.\n\nWith this Test Suite created, you should be on a step that asks you how you want to initialize your Test Cases.\n\nSelect \"Start from Scenarios\" which will autopopulate test cases for you from Scenarios in your Sandbox.\n\nTo create additional Test Cases, follow these steps:\n\n1. Click the blue \"+ Add Test Case\" button just below the tab to add a new Test Case row\n2. You can leave the \"Label\" field alone for now - it's used to help you visually identify your Test Cases\n3. Enter a value for each of your input variables. For example, if you have an input variable `user_age`, you may enter \"28\".\n4. Enter a value for each of your expected output variables\n5. Click outside of your Test Case row to save. You should get a notification that it was successful.\n6. Click \"Finish\" to exit the Test Suite creation wizard\n\nAlmost there! Now that you have your Test Cases added, you're ready to run it against your Prompt.\n\n![Test Suite Creation - Test Cases](https://storage.googleapis.com/vellum-public/help-docs/quantitatively-evaluating-outputs/test-suite-test-cases.png)\n\n## Run a Test Suite\n\nThis Test Suite is automatically added to the current Prompt Sandbox you are in.\nTo evaluate your Prompt, simply click the blue Run button.\n\nThe Test Suite can also be run by any Prompt or Workflow that uses the same input variables you configured earlier. Let's try it.\n\n1. Navigate to any Prompt Sandbox in the \"Prompts\" tab\n2. Click the gray \"Add Test Suite\" at the top right of the page\n3. Attach a Test Suite by clicking on \"Use Existing Test Suite\" and selecting your Test Suite from the dropdown\n4. Press the blue \"Run\" to execute the Test Suite\n\n![Link Test Suite to Prompt](https://storage.googleapis.com/vellum-public/help-docs/quantitatively-evaluating-outputs/link-test-suite.png)\n\n![Run Test Suite on Prompt](https://storage.googleapis.com/vellum-public/help-docs/quantitatively-evaluating-outputs/run-prompt-test-suite.png)\n\n## Download via API\n\nWe also support viewing your Test Suite Run results via the API. Check out our docs on [Test Suite Runs](/api-reference/api-reference/test-suite-runs/retrieve) to learn how to view existing runs. We also embed ready-to-use code snippets within the app itself for each executable column on the evaluations table.\n\n![Test Suite Runs via API](https://storage.googleapis.com/vellum-public/help-docs/tsr-via-api.png)\n\n# Advanced Usage\n\n## Multiple Metrics\n\nIt's possible for a Test Suite to have multiple Metrics run simultaneously.\nThis is often desirable when the output is complex and must meet multiple criterion.\nFor example, you may want to validate that an output semantically means \"I'm very happy\",\nbut must contain the word \"ecstatic\".\n\nAdditional Metrics can be configured on an existing Test Suite under the \"Metric Setup\" section\nof the \"Test Suite Details\" page. Any additional columns needed by that Metric will be editable\nunder the \"Test Cases\" tab.\n\nWhen running the Test Suite, you'll see columns displaying the results for each Metric that's been added to the Test Suite.\n\n<Note>For more on premade Vellum Metrics, see [Out of the Box Metrics](/metrics/out-of-the-box-metrics). To learn how to create your own, see [Custom Metrics](/metrics/custom-metrics)</Note>\n\n## Uploading Test Cases\n\nTo help you migrate your Test Cases into Vellum, we provide two methods for bulk Test Case uploads.\n\n### Via CSV\n\nUnder the \"Test Cases\" tab on the \"Test Suite Details\" page, there is a blue \"Upload Test Cases\" button.\nClicking that button will open a modal that allows you to bulk upload test cases via a CSV file.\n\n### Via API\n\nTo upload test cases via API, check out the [Test Cases API](/api-reference/test-suites/test-cases/upsert) documentation.\n\n## Function Calling\n\nPrompts can output different modalities, which at Vellum we call input and output types. One increasingly popular output type for models if function/tool calling. You can use Vellum Test Suites to ensure that your model is producing the correct function call based on any given combination of inputs.\n\nFirst, you will want to edit the Output Variable type of the test suite to the \"Function Call\" type:\n\n![Output Function Type](https://storage.googleapis.com/vellum-public/help-docs/quantitatively-evaluating-outputs/output-function-type.png)\n\nNext, define the Expected Output type to be of type \"Function Call\" too:\n\n![Expected Function Type](https://storage.googleapis.com/vellum-public/help-docs/quantitatively-evaluating-outputs/expected-function-type.png)\n\nYou can then use any Metric to help ensure that your prompt is outputting function calls that perform well across your test cases! Here's an example of a test suite using Exact Match as the Metric:\n\n![Function Call Tests](https://storage.googleapis.com/vellum-public/help-docs/quantitatively-evaluating-outputs/function-call-tests.png)\n\n## Testing Workflows\n\nJust like Prompts, Workflows can be tested too.\nThe key difference Workflow Test Suites have is that Workflows may have multiple outputs.\nYou may choose to test some of them, or all of them.\n\nWorkflow Test Suites can be run from the \"Evaluations\" tab in the [Workflow Builder](https://app.vellum.ai/workflow-sandboxes).\nIt works very similarly as testing prompts, but you can create new test cases inline.\n\nOne common pitfall is trying to attach a Test Suite where the output variable is named `completion`\nto a Workflow where the output variable is something else. You will receive a warning when this happens.\n\n![Interface Mismatch](https://storage.googleapis.com/vellum-public/help-docs/quantitatively-evaluating-outputs/interface-mismatch.png)\n\n![Interface Match](https://storage.googleapis.com/vellum-public/help-docs/quantitatively-evaluating-outputs/interface-match.png)\n\n### Viewing Workflow Test Case Entity's Execution Details\n\nTo help you diagnose issues with workflows you can click on the \"View Workflow Details\" button located within a test case's value cell to view the details.\n\n![Workflow Executions2](https://storage.googleapis.com/vellum-public/help-docs/workflow-evaluation-details2.png)\n\n## Testing Functions External to Vellum\n\nNot only can Vellum's evaluation framework be used to test Prompts & Workflows hosted in Vellum, it can also be used\nto evaluate the outputs of arbitrary functions hosted externally to Vellum.\n\nFor example, you might test a prompt chain that lives in your codebase and that's defined using another third party\nlibrary. This can be particularly useful if you want to incrementally migrate to Vellum Prompts/Workflows, but ensure\nthat the outputs remain consistent.\n\nFor a detailed example of how to use Vellum's evaluation framework to test external functions, see the\n[python example here](https://github.com/vellum-ai/vellum-client-python/blob/main/examples/Running%20a%20Test%20Suite%20on%20an%20External%20Function.ipynb)\n"
      },
      "docs/content/help/evaluation/evaluating-rag-pipelines.mdx": {
        "markdown": "---\ntitle: Evaluating RAG Pipelines\ndescription: How to evaluate and maintain high quality RAG pipelines in Vellum\n---\n\nRetrieval Augmented Generation (RAG) is a powerful technique to improve your LLM output quality by providing it relevant data - usually retrieved from an external knowledgebase.\n\nIn Vellum, setting up your RAG pipeline is straightforward using our Documents feature. Upload and vectorize your knowledgebase for use in minutes.\nFor more details on how to set up a RAG pipeline in Vellum, see [common architectures here](/help-center/workflows/common-architectures).\n\nOnce you have your RAG workflow set up, a challenging but important and often overlooked aspect is evaluating quality. When it comes to RAG, you're not only interested in the quality of your LLM response (the Generation), but also the context being returned from your vector database (the Retrieval).\n\nEssentially, you're checking to see how effectively your system retrieves relevant information from a knowledge base and then uses it to produce reliable and precise responses or content.\n\nRAG evaluation is a continuous process - running these evaluations gives confidence when initially deploying your RAG into production but the benefits continue post-deployment.\nRunning these evals in production help you understand your system's current performance and identify areas for optimization.\n\nUsing Out-of-Box RAG Metrics in Test Suites, Vellum makes it easy to evaluate, monitor, and continuously improve your RAG pipeline over time without concern of introducing regressions.\n\nRead on to see how you can evaluate your RAG pipeline in Vellum!\n\n# RAG Evaluation in Vellum\n\n## Set up your RAG pipeline for Evaluation\n\n- Step 1: Create a Document Index and upload your documents (follow this article for tips: [Uploading Documents](/help-center/documents/uploading-documents))\n- Step 2: Add a Search Node in your Workflow\n- Step 3: Add a Prompt Node that takes the results of your Search Node as an input variable\n- Step 4: Link the output of the Prompt Node to a Final Output Node (for evaluating Generation)\n- Step 5: Link the output of the Search Node to a Final Output Node (for evaluating Retrieval)\n- Step 5: Set up your Workflow variables and hit Run!\n\nOnce your RAG pipeline runs and passes visual inspection, it's time to set up your Test Suite.\n\n![RAG Pipeline Workflow](https://storage.googleapis.com/vellum-public/help-docs/quantitatively-evaluating-outputs/rag-evaluation-workflow.png)\n\n## Set up your Test Suite\n\n- Step 1: Create a Test Suite for this Workflow (follow this article for more info: [Quantitatively Evaluating Outputs](/help-center/evaluation/quantitative-evaluation)\n- Step 2: Add the following Ragas Metrics: Ragas - Faithfulness, Ragas - Answer Relevance, Ragas - Context Relevancy\n- Step 3: Map the Test Suite variables to the Metric Inputs\n- Step 4: Add your Test Cases and hit Run!\n\n![Ragas Metrics](https://storage.googleapis.com/vellum-public/help-docs/quantitatively-evaluating-outputs/ragas-metric-mapping.png)\n\nNow you can see how well your RAG pipeline performs across a bank of test cases!\n\nDepending on your results, you can adjust the appropriate component in your RAG system.\n\n![Ragas Test Suite Results](https://storage.googleapis.com/vellum-public/help-docs/quantitatively-evaluating-outputs/ragas-test-suite-results.png)\n\n### Generation\n\nAnswer Relevance and Faithfulness are Generation evals that measure the quality of the LLM response and guard against hallucinations.\n\nIf you see low performance here, you can optimize your Prompt.\n\nTry adjusting the Prompt itself, tweak Model parameters, or try a different Model for better performance.\n\nRead more about Prompt Engineering best practices from the Vellum team:\n\n- [Prompt Engineering Tips for Claude](https://www.vellum.ai/blog/prompt-engineering-tips-for-claude)\n- [Prompt Engineering Tips for GPT](https://www.vellum.ai/blog/prompt-engineering-tips-to-boost-gpt-3-5-to-gpt-4-level)\n\n### Retrieval\n\nContext Relevancy is a Retrieval eval. If you see low performance here, you can optimize your Document Indexes.\n\nTry different embedding strategies, chunking sizes, and add metadata filtering so the context returned is precise and relevant to the question being asked.\n\nIf these methods don't improve performance enough, make sure the documents you've uploaded are clean from any noise or extraneous elements that can negatively impact their vector representation and your results.\n\nThis includes:\n\n- Header / footer info\n- Extra or special characters\n- New Lines\n- Inconsistent formatting (including capitalizations)\n\nOnce the documents are processed, you can also try more sophisticated Workflow methods such as splitting your knowledge base into separate Document Indexes and dynamically selecting the right Document Index to use in your Search Node.\nThis method often involves an additional LLM call from a simpler model (think GPT-3.5 turbo) that is used to categorize and select the correct Document Index base on the question being asked.\n\n<Callout intent=\"info\">\n  To learn more about Retrieval Augmented Generation and the most effective\n  Metrics to use in your RAG pipelines, check out our [blog\n  article](https://www.vellum.ai/blog/how-to-evaluate-your-rag-system)\n</Callout>\n"
      },
      "docs/content/help/evaluation/online-evaluations.mdx": {
        "markdown": "---\ntitle: Leveraging Online Evaluations for LLM Development with Vellum\ndescription: >-\n  Learn how Vellum's Online Evaluations feature continuously assesses LLM\n  outputs, ensuring model quality across diverse deployment scenarios.\n---\n\nOnline Evaluations in Vellum provide a powerful way to continuously assess the quality of your deployed LLM applications. \nThis feature allows you to monitor and evaluate the performance of your prompts or workflows in real-time as they're being used in production.\n\n# Getting Started with Online Evaluations\n\n## Step 1: Create and Deploy Your LLM Application\n\n1. Start by creating either a Workflow in the Workflow Sandbox or a Prompt in the Prompt Sandbox.\n2. Once you're satisfied with what you've created, deploy your Workflow or Prompt.\n\n## Step 2: Configure Metrics\n\nAfter deployment, you can configure Metrics to evaluate your LLM application's performance:\n\n![Configure Metrics for use in Online Evals](https://storage.googleapis.com/vellum-public/help-docs/online-evals/online-evals-metric-config.png)\n\n1. Navigate to your Prompt or Workflow Deployment.\n2. Locate the \"Metrics\" tab in the tab bar.\n3. In the Metrics tab, configure which Metrics you'd like like to use to evaluate the performance of your Deployment.\n4. Save your changes. From this point forward, every execution of your Deployment will be automatically evaluated against these Metrics.\n\n![See results of Metrics alongside Execution details](https://storage.googleapis.com/vellum-public/help-docs/online-evals/online-evals-execution-details.png)\n\n<Note>\n  For information on using and defining Metrics in Vellum, see our [Metrics](/help-center/metrics) page.\n</Note>\n\n## Step 3: Understanding Online Evaluations\n\nOnline Evaluations offer several key benefits for LLM application development:\n\n1. **Real-time Performance Monitoring**: Continuously assess your Deployment's performance as it handles live requests.\n2. **Quality Assurance**: Ensure your LLM application maintains high standards even as input patterns may shift over time.\n3. **Regression Detection**: Quickly identify any degradation in performance, allowing for swift corrective action.\n4. **Insight-Driven Improvement**: Use the gathered data to inform future iterations and improvements of your LLM application.\n\n# Selecting the Right Metrics\n\nWhen configuring Metrics for use with Online Evaluations, it's essential to choose the right ones to align with your specific use case and quality standards. Here are some key considerations to keep in mind:\n1. You should start by defining what \"good\" means to you and how you might decompose your definition of \"good\" into multiple smaller dimensions that are easier to measure individually.\n2. From there, you can select [Metrics provided by Vellum](/help-center/metrics/out-of-the-box-metrics) that align with these dimensions, or you can [define your own](/help-center/metrics/custom-metrics).\n3. Note that for now, Metrics are only able to operate on the inputs sent to a Deployment and the outputs generated by it.\n  In the future, Metrics will also be able to operate on [Actuals](/help-center/deployments/observability#capturing-end-user-feedback)\n  (i.e. end-user feedback send back to Vellum), such that they can more effectively measure accuracy.\n4. If you'd like advice on which Metrics to use, please free to reach out to the Vellum team for guidance!\n\n# Viewing Evaluation Results\n\nTo access your Online Evaluation results:\n\n1. Go to your Prompt or Workflow's Deployment details page.\n2. Navigate to the \"Executions\" tab.\n3. Click on an individual Execution ID to view its details.\n4. In the Execution Details page, you'll find the evaluation results based on your configured metrics.\n\n\nYou can analyze these results to gain insights into your Deployment's strengths and areas for improvement.\n\n# Advanced Usage\n\n## Multiple Metrics\n\nYou can configure multiple Metrics within a single Deployment to evaluate its performance across multiple dimensions. This allows for a more comprehensive assessment of your Deployment's capabilities.\nFor example, you might configure a Metric to evaluate whether your LLM application produced a response of an appropriate length and another Metric to assess whether it used the proper tone of voice.\n\n# Conclusion\n\nOnline Evaluations in Vellum offer a robust, automated way to ensure the ongoing quality and performance of your LLM applications. By providing continuous, metric-based assessments, this feature empowers you to maintain high standards and make data-driven improvements to your Prompts and Workflows.\n\nRemember, the key to leveraging Online Evaluations effectively is in thoughtfully configuring your Metrics to align with your specific use case and quality standards. Regularly reviewing and adjusting these Metrics will help you get the most out of this powerful feature.\n"
      },
      "docs/content/help/metrics/out-of-the-box-metrics.mdx": {
        "markdown": "---\ntitle: Evaluate your LLM Workflows with Dozens of Premade Vellum Metrics\ndescription: >-\n  Learn how to add both private and public custom models to your Vellum\n  workspace for enhanced functionality and domain-specific advantages.\n---\n# Metrics\n\nVellum comes with a set of Metrics that you can use right away within your Test Suites. We are continually adding new Metrics based on the needs of Vellum users.\n\nHere are the default Metrics currently available within Vellum:\n\n## Exact Match\n\nCheck that the output is exactly equal to the target.\n\nReturns a score of 1 if the output is an exact match, and 0 otherwise.\n\n## Regex Match\n\nCheck that the specified regular expression can be found in the output.\n\nReturns a score of 1 if the regular expression matches, and 0 otherwise.\n\nNote that unless the regular expression is explicitly anchored, it can match anywhere in the output.\n\n## Semantic Similarity\n\nCheck that the output is semantically similar to the target.\n\nReturns a score between 0 and 1, where 1 is a perfect match.\n\nUses a [cross encoder](https://huggingface.co/cross-encoder/stsb-roberta-large) to compute the similarity.\n\n## JSON Validity\n\nCheck that the output is valid JSON.\n\nReturns a score of 1 if the output is valid JSON, and 0 otherwise.\n\n---\n\n<Callout intent=\"info\">\n  The Metrics below are [Ragas\n  Metrics](https://docs.ragas.io/en/latest/index.html) designed to evaluate your\n  Retrieval Augmented Generation (RAG) systems. For tips on evaluating your RAG\n  pipeline in Vellum, check out [this help center\n  article](/help-center/evaluation/evaluating-rag-pipelines)\n</Callout>\n\n## Ragas - Faithfulness\n\nFaithfulness measures the factual consistency of the generated answer against the given context. It is calculated from answer and retrieved context. The answer is scaled to (0,1) range. Higher the better.\n\nFor details, see: https://docs.ragas.io/en/latest/concepts/metrics/faithfulness.html\n\n## Ragas - Answer Relevance\n\nThe Metric, Answer Relevancy, focuses on assessing how pertinent the generated answer is to the given prompt. A lower score is assigned to answers that are incomplete or contain redundant information and higher scores indicate better relevancy.\n\nFor details, see: https://docs.ragas.io/en/latest/concepts/metrics/answer_relevance.html\n\n## Ragas – Context Relevancy\n\nThis Metric gauges the relevancy of the retrieved context, calculated based on both the question and contexts. The values fall within the range of (0, 1), with higher values indicating better relevancy.\n\nFor details, see: https://docs.ragas.io/en/v0.1.5/concepts/metrics/context_relevancy.html\n\n"
      },
      "docs/content/help/metrics/custom-metrics.mdx": {
        "markdown": "---\ntitle: Create Custom Reusable Metrics for LLM Evaluation\ndescription: >-\n  Learn how to create custom Metrics to evaluate your LLM Workflows with ease.\n  Catch edge-cases, prevent regressions, and ship AI features faster with more\n  confidence!\n---\n\nIn addition to the default Metrics, Vellum makes it easy to define custom Reusable Metrics tailored to your specific business logic and use-case.\nThis saves you time and ensures standardized evaluation criteria for your Prompts, Workflows, or external entities you'd like to test.\n\nLet's create your first Reusable Metric\n\n1. Visit the [Evaluations tab](https://app.vellum.ai/evaluations) in Vellum and open the Metrics page\n2. Click the blue Create Metric button at the top-right of the page to open the Create Metric modal\n3. From the Metric type dropdown, select JSON Schema Match. To learn about Metric types other than JSON Schema Match, see Vellum's [Available Metric Types](#available-metric-types).\n4. In the \"Label\" field at the top left, enter \"My First Metric\". The \"Name\" field should autopopulate. This is a unique name that you can use to programmatically identify this Metric.\n5. In the \"Description\" field, type in \"My first Metric description\"\n6. Click next to configure your Metric and define what the expected output should match\n7. Add \"name\" and \"email\" properties to the JSON schema\n8. Click Finish to exit the modal and see your newly added Metric card on the Metrics page\n\nCongrats! You've now created a Reusable Metric that will be visible when selecting and configuring Metrics within any Test suite.\n\n![Create New Reusable Metric](https://storage.googleapis.com/vellum-public/help-docs/quantitatively-evaluating-outputs/metric-creation.png)\n\n## Available Metric Types\n\n### JSON Schema Match\n\nCheck that the output matches a specified JSON schema.\n\nReturns a score of 1 if the output matches the schema, and 0 otherwise.\n\n### Workflow\n\nRun a Workflow to evaluate the output.\n\nSee [Workflow Metric](/help-center/evaluation/workflow-evaluation-metric) for more details.\n\n### Code\n\nRun custom Python code to evaluate the output.\n\nThe code must include a function named `main` that takes the function arguments specified when creating the Metric and returns a dictionary with the key `score`.\n\n<CodeBlock title=\"Example\">\n```python\ndef main(input_1, input_2, target, completion):\n    return {\n        \"score\": 10\n    }\n```\n</CodeBlock>\n\n# Code Execution Metric\n\nThe Code Execution Metric allows arbitrary Python code execution to be used to produce scores for LLM outputs.\n\nIt is intended as a quick and powerful way to format outputs and write conditionals without the restrictions of Jinja or Regex.\n\nAfter selecting the \"Code Execution\" Metric in the UI, a code editor will be provided.\nThere will be a template with the bare minimum for the Metric to run: A `main()` function that returns a `score`.\n\n## Examples\n\n### JSON Comparison\n\nWhile JSON Validity checks for whether the output is JSON and JSON Schema Match checks if the output conforms to a structure,\nneither checks for exact key/value matches per test case. Using the following Python code,\nit's possible to check that the output matches a known JSON regardless of order or spacing.\n\n```python\ndef main(\n    completion: str,\n    target: str,\n) -> dict:\n    \"\"\"Produces a dict containing at least a \"score\" key with a numerical value.\"\"\"\n    completion_dict = json.loads(completion)\n    target_dict = json.loads(target)\n    completion_set = set(completion_dict.items())\n    target_set = set(target_dict.items())\n    is_equal = completion_set == target_set\n\n    return {\n        \"score\": 1.0 if is_equal else 0.0,\n    }\n```\n\n### Ignore Whitespace\n\nA common problem with exact match comparison using LLM outputs is that often there is additional leading or trailing whitespace.\nWe can create an exact match Metric that ignores such whitespace with a few short lines of Python.\n\n```python\ndef main(\n    completion: str,\n    target: str,\n) -> dict:\n    \"\"\"Produces a dict containing at least a \"score\" key with a numerical value.\"\"\"\n    is_equal = completion.strip() == target.strip()\n\n    return {\n        \"score\": 1.0 if is_equal else 0.0,\n    }\n```\n\n### Code Packages\nYou can add both pip packages for Python code and npm packages for TypeScript code. You must provide exact package versions and add the import to your code yourself.\n\nNote that whenever you update your packages list, the first execution after doing so may be slow due to our system creating and caching the custom runtime.\n```typescript\nimport * as _ from \"lodash\"\n\nasync function main(variables: {\n  completion: string,\n  target: string,\n}): Promise<{ score: number }> {\n  return {\n    score: variables.target.length + _.floor(7.55),\n  }\n}\n```\n\n![Code Package example](https://storage.googleapis.com/vellum-public/help-docs/help-code-package-eval.png)\n\n# Workflow Metric (using LLMs to evaluate LLMs)\n\nThe Workflow Metric allows you to use a Workflow to evaluate outputs, allowing LLM based evaluation for outputs that may be hard to score via traditional methods.\n\n## The Generic LLM Metric\n\nWe've built a Metric that you can use in your test suites to evaluate the outputs of your Prompts and LLMs using another LLM. This example simply takes a rubric, or set of rules, outputs a 1 if the output passes the criteria in the rubric, or a 0 if it does not, and also outputs a reason for the provided score. You can extend this to give scores between 0 and 1, or to provide more detailed feedback.\n\n<AccordionGroup>\n    <Accordion title=\"Example Workflow\">\n        <iframe\n        src=\"https://app.vellum.ai/public/workflow-deployments/354d9448-3ae3-40ae-bf98-cd6c16188b29\"\n        width=\"80%\"\n        height=\"350px\"\n        experimental_enableRequestFullscreen={true}\n        />\n    </Accordion>\n    <Accordion title=\"Using the Metric\">\n\n        Add the Metric to your test suite and add a new input which we'll use to tell the Metric how it should score the output that it's evaluating.\n\n        <img src=\"https://storage.googleapis.com/vellum-public/help-docs/using_generic_llm_metric_in_test_suite.png\" />\n    </Accordion>\n    <Accordion title=\"Two Ways To Use This Metric\">\n        Option #1: Different assertions on different test cases\n        \n        Add a new input to your test suite, connect it to this Metric, and use different rules in that input for each test case.  For example: one row checks that the user is addressed by name during introductions, but this isn't a condition we'd want to test on every test case. It will ultimately depend how you split up your Workflows and Prompts (unit testing vs. integration testing). \n        \n        Option #2: Same assertion on every row\n\n        Add multiple copies of this Metric to your test suite, rename each one according to its purpose, and _hardcode_ a different rule for each.  For example: one could check that every output of a Q&A bot cites a source, another could check that every output of a Math Assistant shows its work. \n\n        <Tip>Avoid putting too many rules in a single scoring rubric. Split into multiple Metrics if you have many rules and notice your evaluations aren't performing well.</Tip>\n    </Accordion>\n</AccordionGroup>\n\n## Setting up an Metric Workflow\n\n1. Create a new [Workflow Sandbox](https://app.vellum.ai/workflow-sandboxes).\n2. Add one input variable for each Test Suite variable you want to pass to the Workflow.\nYou'll map these to the Test Suite variables when setting up the Metric later, so you can name them anything you want.\nExamples of variables you may want to include: the output to be evaluated, the desired output, the inputs to the evaluated prompt.\n3. Create a Final Output, set the name to `score`, and set the output type to Number.\n4. [Optional] - create additional outputs to provide more context about the `score` (\"`rationale`\" or \"`summary`\" or \"`chat history`\" etc.). Great for debugging!\n5. Fill in the logic of your Workflow!\n6. Deploy your Workflow using the Deploy button in the top right corner of the Workflow Sandbox.\n"
      },
      "docs/content/help/deployments/prompt-lifecycle-management.mdx": {
        "markdown": "---\ntitle: Streamline Your Prompt Deployment with Vellum\ndescription: >-\n  Discover how Vellum simplifies prompt deployment with observability, version\n  control, and easy integration for better performance.\n---\n\n## Introduction to Prompt Deployments\n\nNow that you’ve used Vellum Playground for prompt engineering and have a prompt that clears your test cases, you’re ready to start making requests against it. In production, Vellum acts as a high reliability, low latency proxy between your application and the underlying model provider.\n\nBy deploying a Prompt through Vellum and integrating a **10-line code snippet** you get:\n\n- **Observability** into individual completions and their quality: [Tracking completions & measuring quality](/help-center/deployments/observability)\n- **Version Controlled** changes to prompts/model without updating code: [Changing prompts in production & versioning](#changing-prompts-in-production)\n- **Request Replay** to back-test changes and avoid regressions: [Backtesting with Vellum](/help-center/deployments/monitoring)\n- **Monitoring** of aggregate data to spot trends: [Monitoring production traffic](/help-center/deployments/monitoring)\n\nLet's take a look at how to actually deploy a Prompt in Vellum\n\n## Creating a Prompt Deployment\n\n![Deploy Prompt Button](https://storage.googleapis.com/vellum-public/help-docs/deploy_prompt_button.png)\n\n![Deploy Prompt Options](https://storage.googleapis.com/vellum-public/help-docs/deploy_prompt_options.png)\n\n## View Deployment Details\n\nThe Deployment Overview page shows you details about the currently live version of the Prompt.\n\n![Prompt Deployment Details](https://storage.googleapis.com/vellum-public/help-docs/deployment_details.png)\n\n## Integrating w/ Vellum's API\n\nThe Deployment Overview page also contains code snippets to make integration simple. We support Python & Typescript clients and have an option to make Curl requests. Optionally, you can also integrate with our Actuals Endpoint to start keeping track of output quality for monitoring and eventually fine tuning. More details about this in the completions & quality help center article.\n\n![Generate API Code Snippet](https://storage.googleapis.com/vellum-public/help-docs/generate_code_snippet.png)\n\nNote that our full API docs can be found at [docs.vellum.ai](http://docs.vellum.ai)\n\n## Changing Prompts in Production\n\nWith Vellum, you can make changes to your prompts in production without having to make any code changes! This might be useful for a variety of reasons:\n\n1. When you encounter edge cases in production, you may want to tweak the prompt to accommodate for them\n2. A new model comes out and can provide similar quality at lower cost or lower latency\n3. Product requirements change and a non-technical member of the team with the proper permissions wants to make changes\n\nYou can do this by updating a Prompt Deployment. All updates are version-controlled and past versions can be immediately reverted to at any time (no code chnages required).\n\n### Updating a Prompt Deployment\nFind the Prompt Sandbox you'd like to deploy and click the \"Deploy\" button.\n![Deploy Prompt Button](https://storage.googleapis.com/vellum-public/help-docs/deploy_button_update.png)\n\nThis'll provide the option to update an existing deployment or create a new one. Select \"Update Existing Deployment\" and choose the deployment you'd like to update.\n![Update Deployment Option](https://storage.googleapis.com/vellum-public/help-docs/deploy_modal_update_option.png)\n\n<Callout intent=\"info\">\n  Note that code changes will likely be required if you change which input variables the Prompt replies on.\n</Callout>\n\n## Prompt Versioning\n\nAfter a Prompt Deployment is updated, you'll find a new entry in the \"History\" tab. You can visually inspect how the Prompt has changed\nover time across versions. You can also revert to prior versions at any time. After reverting to a prior version, it's immediately live –\nno code changes required.\n\n![Prompt Versioning](https://storage.googleapis.com/vellum-public/help-docs/prompt_deployment_versioning.png)\n"
      },
      "docs/content/help/deployments/observability-in-production.mdx": {
        "markdown": "---\ntitle: Enhance AI Model Accuracy with Vellum's Observability Tools\ndescription: >-\n  Discover how Vellum's observability in production helps track requests and\n  improve AI model responses with user feedback integration.\n---\n\nAfter using a Prompt in prompt with your application, you'll likely wonder what the contents of the requests were and whether the model provided reasonable responses. A big benefit of using Vellum's proxy layer via Prompt Deployments is that we automatically keep track of every request and the details you need to debug issues.\n\n## Prompt Deployment Completions\n\nYou can go to the \"Completions\" tab of any prompt Deployment to see the requests that were made. Columns can be hidden, shown, filtered, and sorted.\n\n![Completions](https://storage.googleapis.com/vellum-public/help-docs/prompt_deployment_completions.png)\n\nAs you apply filters/sorting, the page's url is updated. You can bookmark this link or share with others to return to the same view later.\n\n![Completion Columns](https://storage.googleapis.com/vellum-public/help-docs/prompt_deployment_completion_columns.png)\n\n\n## Capturing End-User Feedback\nVellum has the concept of \"Completion Actuals\" where you can say, for a given request, what the output _should have been_ and what its quality was.\nThis is particularly using for monitoring quality, and later, for usage as training data to fine-tune your own custom model.\n\nCapturing Actuals works best if your end users have some mechanism (usually via a UI) to provide feedback on the output of the model.\n\nFor example, you're creating an AI Recruiting Email Generator for recruiters where they can use AI to generate rough draft, you might:\n1. Infer that if they hit \"Send\" without making edits, the quality was great (a 1.0 in Vellum)\n2. Infer that if they hit \"Discard\" then the quality was bad (a 0.0 in Vellum)\n3. Or you might have a 5-star \"Rating\" system that they can use to explicitly provide feedback on the quality of the output.\n\nIn all cases, you could integrate with Vellum's Completion Actuals API to capture this feedback. You can find a code snippet for this in a Prompt Deployment's \"Overview\" tab. It'll look like this:\n\n![Deployment Actuals](https://storage.googleapis.com/vellum-public/help-docs/prompt_deployment_actuals.png)\n\nNote that you reference a Completion made previously by the ID that Vellum generates and returns, or by some UUID that you track and provide via the \"external_id\" property.\n"
      },
      "docs/content/help/deployments/monitoring-production-trends.mdx": {
        "markdown": "---\ntitle: Track Production Trends with Prompt Deployment Monitoring\ndescription: >-\n  Easily monitor request volume, latency, and quality trends in your Prompt\n  Deployment with our intuitive charts and filters.\n---\n\nAll the row-level Completions found in the \"Completions\" tab of a Prompt Deployment can\nbe monitored in aggregate via the \"Monitoring\" tab.\n\nThis is especially useful for spotting trends in things like request volume, latency,\nquality, and more. If there are other visualizations you'd like to see here, please share that feedback with us!\n\nThe charts you see can be filtered down to specific time ranges using the “Relative Date” button.\n\n![Prompt Deployment Monitoring](https://storage.googleapis.com/vellum-public/help-docs/prompt_deployment_monitoring.png)\n\n**Number of Completions:** Number of requests made against the Generate endpoint\n\n**Average Quality over Time:** Quality tracked for each completion. This is only \nvisible if Quality is filled out either through the UI or Actuals Endpoint API\n\n**Number of Completions w/ Actuals Submitted:** Number of requests that have an \nassociated quality / Actuals indication\n\n**Average Latency Over Time:** Time taken for the request to complete\n\n**Num LLM Provider Errors Over Time:** Number of errors from the LLM provider\n"
      },
      "docs/content/help/deployments/managing-releases.mdx": {
        "markdown": "---\ntitle: Mastering Vellum Deployment – Release Tags Explained\ndescription: >-\n  Discover how to manage Vellum deployments with release tags for better version\n  control in your development workflow.\n---\n\n## Introduction to Deployment Release Tags\n\nAs you start having many versions of a Prompt or Workflow, being able to manage these deployment releases becomes an important consideration.\n\nIn Vellum, you have multiple ways to manage releases so you can easily promote prompt / workflow changes from your development or staging environments into production with as much flexibility or control as required by your team.\n\nLet's take a look at some of the different release strategies in Vellum!\n\n## TL;DR Watch a Video Walkthrough Instead\n\n<iframe\n  src=\"https://www.loom.com/embed/56992fb51372400ebdb69228c0b53b5d\"\n  width=\"100%\"\n  height=\"450px\"\n></iframe>\n\n<Callout intent=\"info\">\n  This page highlights Prompt Deployments but the same holds true for managing\n  your Workflow Deployment releases\n</Callout>\n\n## Three Ways to Release Prompts or Workflows\n\n### 1. Don’t Specify a Release Tag and Always Use Latest\n\nEvery time you create a new [Prompt or Workflow Deployment](/help-center/deployments/prompt-lifecycle-management) or update an existing one, Vellum will automatically assign it as latest.\n\nIn this approach, you always point to the latest prompt or workflow available for a given Deployment by making your Vellum API requests without providing a specific Release Tag.\n\nThis method simplifies your deployment process by automatically incorporating any changes that you deploy from your Prompt or Workflow Sandbox.\n\n### 2. Use Custom Release Tags\n\nFor more flexibility, Vellum lets you define Custom Release Tags. Custom Release Tags are floating tags that you define and can be moved by authorized users directly within the Vellum app.\n\nYou can assign multiple Custom Release Tags to a single Prompt or Workflow Deployment, providing flexibility to granularly assign and update versions across different environments.\n\nFor example, you can assign Custom Release Tags to point to a version of your prompt in both your “Production” and “Staging” environments.\n\nThis method offers you the ability to manage your releases according to your own specific workflow and versioning requirements.\n\n<Callout intent=\"info\">\n  Note that Custom Release Tags follow a specific format: less than or equal to\n  150 characters, begin and end with a Regex word character (i.e., letter,\n  number, or underscore), contain only word characters, dashes or dots, and do\n  not contain more than one dot in a row\n</Callout>\n\n### 3. Use Static Release Tags\n\nEvery time you create a new Deployment or [update an existing one](/help-center/deployments/prompt-lifecycle-management#changing-prompts-in-production), Vellum creates a unique Static Release Tag tied to that version.\n\nWhen using Static Release Tags to manage your releases, you can control version increments through code to ensure a structured and controlled release process.\n\nThis method is ideal if your organization prioritizes strict version management and you want to avoid accidental updates or changes to prompts.\n\n![Release Tags Types](https://storage.googleapis.com/vellum-public/help-docs/release-tags-types.png)\n\n## Creating a Custom Release Tag\n\nRelease tags can be created:\n\n1. Within the Create New or Update Existing tabs of the Deploy Prompt modal in a Prompt Sandbox or Deploy Workflow modal in a Workflow Sandbox\n   ![Creating Release Tags from Deploy Modal](https://storage.googleapis.com/vellum-public/help-docs/release-tags-on-deploy.png)\n\n2. By opening the Assign Release Tags modal from the Releases tab of the Deployment Details page\n\n## Updating a Custom Release Tag\n\nRelease tags can be updated:\n\n1. Within the Update Existing tab of the Deploy Prompt modal in a Prompt Sandbox or Deploy Workflow modal in a Workflow Sandbox\n   ![Updating Release Tags from Deploy Modal](https://storage.googleapis.com/vellum-public/help-docs/release-tags-update-on-deploy.png)\n\n2. By opening the Assign Release Tags modal from the Releases tab of the Deployment Details page\n   ![Creating Release Tags Post Deployment](https://storage.googleapis.com/vellum-public/help-docs/release-tags-post-deploy.png)\n\n### Pinning to a Release Tag in Code\n\nBoth the Vellum `execute_prompt` and `execute_workflow` API’s accept an optional `release_tag` parameter to pin your request to a specific release tag. When release tags are updated via the Vellum app to point to new versions of a prompt or workflow, these changes will automatically reflect in these requests.\n\nIf no `release_tag` parameter is provided, the request will default to the latest version of that Deployment.\n\nMore details on how to do this: [Vellum API Docs](https://docs.vellum.ai/api-reference/api-reference/execute-prompt)\n\n<CodeBlock title=\"Example Request\">\n```\ncurl -X POST \\\n--url \"https://predict.vellum.ai/v1/execute-prompt\" \\\n--header \"Content-Type: application/json\" \\\n--header \"X_API_KEY: $VELLUM_API_KEY\" \\\n--header \"Accept: application/json\" \\\n--data '\n{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ],\n  “release_tag”: “staging”\n}\n  '\n\n```\n</CodeBlock>\n```\n"
      },
      "docs/content/help/documents/uploading-documents.mdx": {
        "markdown": "---\ntitle: Easy Guide to Uploading Documents on Vellum AI\ndescription: >-\n  Learn how to upload and manage documents on Vellum AI for efficient document\n  indexing and searching. Supports multiple file types.\n---\n\nAny document that you want to query against should be uploaded ahead\nof time at [https://app.vellum.ai/document-indexes](https://app.vellum.ai/document-indexes).\n\n## What is a Document Index?\n\nDocument indexes act as a collection of documents grouped together\nfor performing searches against for a specific use case. For example,\nif you are creating a chatbot to query against OpenAI’s help center\ndocuments, the text files of each article in the help center would be\nstored in one index. Here's how it looks in Vellum's UI:\n\n![Document Details](https://storage.googleapis.com/vellum-public/help-docs/document_details.png)\n\n## How to upload documents?\n\nYou can manually upload files through the UI\nor via [API](https://docs.vellum.ai/api-reference/api-reference/documents/upload).\n\n![Upload Documents](https://storage.googleapis.com/vellum-public/help-docs/document_index.png)\n\nEach document has a `Name` and an `External ID` which are\ninitially populated with the name of the file that you upload.\n\n**Name** - Human readable text which is how the document will be visible in Vellum's UI (in documents tab)\n\n**External ID** - As the contents of a document change and the old documents becomes out of date, you can submit the updated document for reindexing re-uploading it and specifying the same `External ID`.\n\n### Supported File Types\n\nIn addition to sending plain strings via API, Vellum also supports uploading files of the following types:\n- .csv\n- .doc\n- .docx\n- .pdf\n- .png\n- .txt\n- .xls\n- .xlsx\n\nFor .pdf and .png files, we apply an [OCR](https://en.wikipedia.org/wiki/Optical_character_recognition) process to convert the file to a text representation. If you need another file type, please reach out!\n\n### Document Size Limits\n\nEach document can be up to 32MB and 2.5M characters\n\n## Out-of-box Chunking Strategy\nVellum currently uses a static chunking strategy.\n\n**Chunking strategy:** Overlapping windows w/ sentence splitting\n\n**Min overlap:** 50%\n\n**Max characters:** 1000\n\nThis configuration has proven to work well for most use cases. These settings will become configurable in future updates. Please reach out to support@vellum.ai if this chunking strategy doesn’t work for you and we can work on a solution for you.\n"
      },
      "docs/content/help/documents/running-searches.mdx": {
        "markdown": "---\ntitle: Using Search to retrieve context in a prompt\ndescription: >-\n  Learn to add relevant context to your searches in Vellum Playground with\n  simple steps for better query results.\n---\n\nVellum Search can be used to include relevant context in a prompt at run-time that fits within LLM token window limits. Typically, the query that produces the search results comes from an end-user.\n\nFor example, here’s a prompt used to answer questions, pulling the source materials for an answer from a document index. The remainder of this article references variables from this prompt to explain the mechanics.\n\n```\nAnswer questions based on the context provided below without\nusing any other knowledge. If the question can't be answered\nusing the provided context say \"Sorry, I don't know.\"\nAnswer in the following format:\n\nQuestion: ..\nAnswer: ..\n\n---\n{context_str}\n---\nQuestion: {query_str}\nAnswer:\n```\n\n## Step 1: How to add relevant context to `context_str` variable\n\nIn Vellum Playground, each variable has a 🔍 icon to include search results in Playground\n\n![Prompt Search Icon](https://storage.googleapis.com/vellum-public/help-docs/prompt_search_icon.png)\n\nClicking this button opens up a modal to return Search results for a given query. Follow these steps in the modal:\n\n- Enter the Document Index that should be queried against\n- Type the search query (note: this should be the same as the `query_str` in the prompt variable)\n- Choose the number of chunks to be returned, the separators between each chunk and hit Run. By default, Vellum returns 3 chunks and uses new lines as separators.\n- Clicking Apply adds these results to the `context_str` variable\n\n![Prompt Search Dialog](https://storage.googleapis.com/vellum-public/help-docs/prompt_search_dialog.png)\n\n## Step 2: How to use the context to get results\n\nCopy/paste the same user query into the `query_str` variable. Hit Run on the Playground and see the results against a variety of prompts.\n\n![Prompt Search Results](https://storage.googleapis.com/vellum-public/help-docs/prompt_search_results.png)\n"
      },
      "docs/content/help/documents/integrating-search.mdx": {
        "markdown": "---\ntitle: Easily integrate with Velum’s Search API\ndescription: >-\n  Learn to integrate search results in your queries with our easy 3-step\n  process, including API calls and formatting tips.\n---\nOnce in production, there’s a 3 step process to add search results in your queries at run-time:\n\n1. Call Search API to obtain relevant context (details below)\n2. Format the returned context and include as a single variable value when making requests to a Vellum Deployment\n3. Pass search results to request endpoint while calling the LLM\n\nFor Step 3, make sure you have a variable in Vellum Playground where search results are entered. Details to set that up are here: [Running Searches in Playground](/help-center/documents/running-searches)\n\n## Search API\n\nThere’s a code snippet for the Search API in the Document Index. There are 3 variables to call the API:\n\n- **index_name** - Index that is searched across\n- **query** - Search query (usually a user input)\n- **options** - Optional configuration that drives search behavior. Namely used to \ndetermine the max number of results returned in the response. You can also use:\n- **weights** - to change the prioritization between keyword matches vs semantic similarity\n- **result_merging** - to automatically merge overlapping chunks into larger chunks without redundant content\n- **filters** - to perform rule-based filtering prior to matching on keywords / semantic similarity. \nFor more info, see [Metadata Filtering](/help-center/documents/metadata-filtering)\n\n![Search API Code Snippet](https://storage.googleapis.com/vellum-public/help-docs/search_api_code_snippet.png)\n"
      },
      "docs/content/help/documents/metadata-filtering.mdx": {
        "markdown": "---\ntitle: Improve Retrieval Results with Metadata Filtering\ndescription: >-\n  Learn how to refine searches using metadata filtering for precise document\n  retrieval. Perfect for targeted searches.\n---\nSome use-cases of Vellum Search require you to narrow in on a subset of documents prior to searching based on keyword match / semantic similarity. For example, you might want to search across historical conversations _for a specific user_ or only across documents _that have specific tags_.\n\nYou can do this through metadata filtering.\n\nMetadata filtering requires that you:\n\n1. Provide structured metadata for your documents either upon initial upload or later; and\n2. Provide filter criteria when performing a search.\n\nLet’s see how to do each.\n\n# Specifying Metadata\n\nYou can specify metadata for documents through both the UI and API.\n\n### Through the UI\n\nYou can provide metadata upon initial upload.\n\n![Metadata Specification](https://storage.googleapis.com/vellum-public/help-docs/document_metadata_specification.png)\n\nYou can also view metadata associated with a document and edit it after it’s been uploaded.\n\n![Viewing Metadata](https://storage.googleapis.com/vellum-public/help-docs/edit_document_metadata.png)\n\n### Through the API\n\nYou can provide metadata as _stringified_ JSON upon initial upload using the [upload Documents API here](https://docs.vellum.ai/api-reference/api-reference/documents/upload).\n\nYou can also update a document’s metadata after-the-fact using the the `Document - Partial Update` [endpoint here](https://docs.vellum.ai/api-reference/api-reference/documents/partial-update).\n\nNote that in this endpoint, you can simply provide a JSON object (rather than a stringified JSON object as is required during initial upload).\n\n## Filtering Against Metadata\n\nYou use the `search` endpoint to perform a search against an index (documented [here](https://docs.vellum.ai/api-reference/api-reference/search)). This endpoint exposes an `options.filters.metadata` field for filtering against your provided metadata prior to matching on keywords/semantic similarity.\n\nThe syntax of the `metadata` property supports complex boolean logic and was borrowed from [React Query Builder](https://react-querybuilder.js.org/). You can use their [demo here](https://react-querybuilder.js.org/demo#addRuleToNewGroups=false&autoSelectField=true&autoSelectOperator=true&debugMode=false&disabled=false&enableDragAndDrop=false&independentCombinators=false&justifiedLayout=false&listsAsArrays=false&parseNumbers=false&resetOnFieldChange=true&resetOnOperatorChange=false&showBranches=false&showCloneButtons=false&showCombinatorsBetweenRules=false&showLockButtons=false&showNotToggle=false&validateQuery=false) to get a feel for the query syntax.\n\nNote that values for fields must be JSON-deserializable. If you're looking to filter against a string, then the value passed in should contain escaped double quotes.\n\n### Example\n\nSuppose you have two documents with the following metadata:\n\n```json\n// Document A\n{\n\t\"tags\": [\n\t\t\"customer-facing\", \"needs-triage\", \"bug\"\n\t],\n\t\"priority\": \"high\"\n}\n// Document B\n{\n\t\"tags\": [\n\t\t\"needs-triage\", \"bug\"\n\t],\n\t\"priority\": \"low\"\n}\n```\n\nAnd you wanted to perform a search across all documents that are marked as high priority, customer-facing bugs, you would use the following query:\n\n```json\n{\n\t\t...,\n\t\t\"options\": {\n\t\t\t\"filters\": {\n\t\t\t\t\"metadata\": {\n\t\t\t\t\t\"combinator\": \"AND\",\n\t\t\t\t\t\"rules\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"field\": \"tags\",\n\t\t\t\t\t\t\t\"operator\": \"contains\",\n\t\t\t\t\t\t\t\"value\": \"\\\"customer-facing\\\"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"field\": \"tags\",\n\t\t\t\t\t\t\t\"operator\": \"contains\",\n\t\t\t\t\t\t\t\"value\": \"\\\"bug\\\"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"priority\": \"tags\",\n\t\t\t\t\t\t\t\"operator\": \"+\",\n\t\t\t\t\t\t\t\"value\": \"high\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"negated\": false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n}\n```\n"
      },
      "docs/content/help/security/hmac-authentication.mdx": {
        "markdown": "---\ntitle: HMAC Authetication\ndescription: >-\n  This guide will walk you through the process of setting up and using HMAC\n  authentication in Vellum.\n---\n\nThis guide will walk you through the process of setting up and using HMAC authentication in Vellum. HMAC authentication provides an additional layer of security for outgoing API calls and webhooks.\n\n## Setup\n\n1. **Create a new secret token securely:** You can do this in Python using the `secrets` module. Here's a simple example:\n\n<CodeBlock title=\"Python Secret Token Generation\">\n```python\nimport secrets\nprint(secrets.token_hex(16))\n```\n</CodeBlock>\n\n2. **Provide your secret token to Vellum:** Navigate to the [API keys page](https://app.vellum.ai/api-keys). Click the \"Provide HMAC Token\" button and enter your secret token.\n\n## Usage\n\n<Callout intent=\"info\">\nOnly outgoing webhooks and API calls from Vellum include HMAC authentication.\n</Callout>\n\nEach request will contain two headers: `X-Vellum-Timestamp` and `X-Vellum-Signature`.\n\n1. **Verify the timestamp:** Check that the value of `X-Vellum-Timestamp` is within the last 60 seconds.\n\n2. **Create the message string:** Concatenate the following values together, separated by one newline character, into a new string `message`:\n    - `X-Vellum-Timestamp`\n    - The request method (GET, POST, etc)\n    - The request URL\n    - The request body\n\n<CodeBlock title=\"Python HMAC Content\">\n```python\nmessage = f\"{timestamp}\\n{method}\\n{url}\\n{body}\"\n```\n</CodeBlock>\n\n3. **Verify the signature.** Use the [HMAC](https://en.wikipedia.org/wiki/HMAC) algorithm with SHA-256 to verify the authenticity of `X-Vellum-Signature`.\n\n<CodeBlock title=\"Python HMAC Signature Verification Example\">\n```python\nimport hmac\nimport hashlib\n\ndef verify(message: str, secret: str, signature: str) -> bool:\n    hash_object = hmac.new(secret.encode(), msg=message.encode(), digestmod=hashlib.sha256)\n    expected_signature = hash_object.hexdigest()\n    return hmac.compare_digest(expected_signature, signature)\n```\n</CodeBlock>\n"
      },
      "docs/content/api/intro.mdx": {
        "markdown": "---\ntitle: Welcome to Vellum\ndescription: >-\n  Dive into Vellum's API docs for endpoint details, parameters, and responses.\n  Use our official Python, Node, or Go clients for stable interaction.\n---\n\nWelcome to Vellum's API documentation! Here you'll find information about the various endpoints available to you,\nas well as the parameters and responses that they accept and return.\n\nWe will be exposing more and more of our APIs over time as they stabilize. If there is some action you can perform\nvia the UI that you wish you could perform via API, please let us know and we can expose the relevant API here.\n\n### API Stability\n\nSome of the APIs documented within are undergoing active development. Use the <Availability type=\"beta\" /> and <Availability type=\"GA\"/>\ntags to differentiate between those that are stable and those that are not. GA stands for generally available.\n\n### Base URLs\n\nSome endpoints are hosted separately from the main Vellum API and therefore have a different base url. If this is\nthe case, they will say so in their description.\n\nUnless otherwise specified, all endpoints use `https://api.vellum.ai` as their base URL.\n\n### Official API Clients\n\nVellum maintains official API clients for Python, Node/Typescript, and Go. We recommend using these clients to interact\nwith all stable endpoints. You can find them here:\n\n<Cards>\n  <Card\n    title=\"Python\"\n    icon=\"fa-brands fa-python\"\n    href=\"https://github.com/vellum-ai/vellum-client-python\"\n  />\n  <Card\n    title=\"Node/Typescript\"\n    icon=\"fa-brands fa-node\"\n    href=\"https://github.com/vellum-ai/vellum-client-node\"\n  />\n  <Card\n    title=\"Go\"\n    icon=\"fa-brands fa-golang\"\n    href=\"https://github.com/vellum-ai/vellum-client-go\"\n  />\n</Cards>\n"
      },
      "docs/content/api/authentication.mdx": {
        "markdown": "---\ntitle: Authentication\ndescription: Learn how to authenticate with the Vellum API using API tokens.\n---\n\n## Generating API Keys\n\nThe Vellum API uses API keys to authenticate requests. You can view and manage your API keys in the Vellum [here](https://app.vellum.ai/api-keys).\n\n\n## Authentication\nAuthentication is performed using headers. You should include your API key as the value associated with the `X_API_KEY` header in your requests.\n\nNote that all API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.\n\n\n## API Key Best Practices\n\nThe API keys you generate should be treated like passwords. Do not share your API keys in publicly accessible areas such as GitHub, client-side code, etc.\n"
      },
      "docs/content/change-log/2024-10.mdx": {
        "markdown": "---\ntitle: 'Changelog | October, 2024'\n---\n\n## AWS Bedrock Support for Anthropic's Claude 3.5 Sonnet\n\n**October 31st, 2024**\n\nWe've added support for Anthropic's Claude-3-5-sonnet-20241022-v2:0 model on AWS Bedrock.\n\n[AWS Bedrock Support](https://docs.anthropic.com/en/api/claude-on-amazon-bedrock)\n\n## Google Cloud Vertex AI Support for Anthropic's Claude 3.5 Sonnet\n\n**October 31st, 2024**\n\nWe've added support for Anthropic's Claude-3-5-sonnet-20241022-v2:0 model on Google Cloud Vertex AI.\n\n[Google Cloud Vertex AI Support](https://console.cloud.google.com/vertex-ai/publishers/anthropic/model-garden/claude-3-5-sonnet-v2?project=vocify-prod)\n\n## Retrieve Workspace Secret or Update Workspace Secret\n\n**October 31st, 2024**\n\nWe've added two new API endpoints for retrieving a Workspace Secret and updating a Workspace Secret.\n\n- For retrieving a Workspace Secret, check out our [GET API here](api-reference/secrets/retrieve-workspace-secret).\n- For updating a Workspace Secret, check out our [PATCH API here](api-reference/secrets/update-workspace-secret).\n\nThis API is available in our SDKs beginning with version 0.8.30.\n\n## Prompt Timeout Enabled for Prompt Deployments\n\n**October 29th, 2024**\n\nYou can now set timeouts for Prompt Deployments. With this, you can ensure that any Prompt Execution will timeout if it lasts longer than the specified amount of time.\n\nTo set a timeout for a Prompt Deployment, navigate to the \"Parameters\" section within the Prompt Sandbox and scroll down to toggle the \"Timeout\" setting on. You can then set the timeout duration in seconds. After deploying your Prompt, your Prompt Deployment will respect your configured timeout.\n\n![Visit Prompt Parameters to set Timeout](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/step1-prompt-timeout.png)\n![Set Timeout Duration](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/step2-prompt-deployment-timeout.png)\n\n## Reorder Test Suite Variables\n\n**October 24th, 2024**\n\nYou can now reorder Input and Evaluation Variables within a Test Suite's settings page. Drag and drop the variables into the order you prefer. This new order will automatically be reflected in your Evaluation Reports.\n\n<Frame>\n  <img\n    src=\"https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/reorder-variables-input.png\"\n    alt=\"Reorder Variables in Evaluation Report\"\n  />\n</Frame>\n\n## Support for Perplexity AI's Online Models\n\n**October 24th, 2024**\n\nWe've added support for Perplexity AI's newest Sonar Online models, which provide real-time web search capabilities integrated directly into the language model.\n\nCheck out Perplexity AI's [online models](https://docs.perplexity.ai/guides/model-cards#perplexity-sonar-models) here:\n\nThe supported models are:\n\n- LLama 3.1 Sonar Small 128k Online\n- LLama 3.1 Sonar Large 128k Online\n- LLama 3.1 Sonar Huge 128k Online\n\nThese models offer several key features:\n\n1. **Real-time web search**: The models can perform live internet searches to retrieve up-to-date information.\n2. **Contextual understanding**: They can interpret search results in the context of the user's query.\n3. **Source citation**: The models provide citations for information sourced from the web.\n4. **Multilingual support**: They can understand and generate content in multiple languages.\n5. **Long-context understanding**: The models can handle extended conversations and complex queries.\n\nTo use these models in Vellum, simply select the appropriate Sonar Online model when configuring your Prompt or Workflow. The model will automatically perform web searches when needed to supplement its knowledge and provide the most current and relevant information.\n\nNote: Using these models may result in slightly longer processing times due to the real-time web search functionality, but they offer significantly enhanced capabilities for tasks requiring up-to-date information.\n\n## Support for Perplexity AI Models\n\n**October 24th, 2024**\n\nWe've added support for [Perplexity AI](https://docs.perplexity.ai/api-reference/chat-completions) as one of our newest model hosts!\n\nAlong with the launch of the Perplexity AI integration, we've added the following models:\n\n- [Perplexity AI: LLama 3.1 Sonar Small 128k Chat](https://docs.perplexity.ai/guides/model-cards#perplexity-chat-models)\n- [Perplexity AI: LLama 3.1 Sonar Large 128k Chat](https://docs.perplexity.ai/guides/model-cards#perplexity-chat-models)\n- [Perplexity AI: LLama 3.1 8B Instruct](https://docs.perplexity.ai/guides/model-cards#open-source-models)\n- [Perplexity AI: LLama 3.1 70B Instruct](https://docs.perplexity.ai/guides/model-cards#open-source-models)\n\n![Perplexity AI Models](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/perplexity_chat_models.png)\n\n## Support for LLama 3.1 Lumimaid 70B and Magnum v4 72B models on OpenRouter\n\n**October 24th, 2024**\n\nWe've added support for the [LLama 3.1 Lumimaid 70B](https://openrouter.ai/neversleep/llama-3.1-lumimaid-70b) and [Magnum v4 72B](https://openrouter.ai/anthracite-org/magnum-v4-72b) models on OpenRouter!\n\n## Support for Gemini 1.5 Flash 8B Model\n\n**October 23nd, 2024**\n\nIn addition to the existing support for the Gemini 1.5 models, we've added support for the Gemini 1.5 Flash 8B model to Vellum!\n\n- [Gemini 1.5 Flash 8B](https://ai.google.dev/gemini-api/docs/models/gemini#gemini-1.5-flash-8b)\n\n## Claude 3.5 Sonnet 2024-10-22 Live!\n\n**October 22nd, 2024**\n\nWe've added support for Anthropic's latest 10/22/2024 snapshot of [Claude 3.5 Sonnet](https://docs.anthropic.com/en/docs/about-claude/models) to Vellum!\n\n![Claude 3.5 Sonnet](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/claude-3-5-20241022-support.png)\n\n## Support for Cerebras-AI Models\n\n**October 22nd, 2024**\n\nWe've added support for [Cerebras-AI](https://inference-docs.cerebras.ai/introduction) to Vellum!\n\nAlong with the launch of the Cerebras-AI API, we've added the following models:\n\n- [Cerebras-AI: llama3.1-8b](https://inference-docs.cerebras.ai/api-reference/models#models)\n- [Cerebras-AI: llama3.1-70b](https://inference-docs.cerebras.ai/api-reference/models#models)\n\n![Cerebras-AI Models](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/cerebras-support.png)\n\n## Configurable Prompt Node Timeouts\n\n**October 22nd, 2024**\n\nYou can now set a max timeout for Prompt Nodes within Workflows. With this, you can ensure that no one LLM invocation will run for too long and slow down the Workflow overall and instead, fail early if it does.\n\nTo set a timeout for a Prompt Node, simply navigate to the new \"Settings\" section and toggle the \"Timeout\" setting on. You can then set the timeout duration in seconds.\n\n![Prompt Settings](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/prompt-settings-timeout.png)\n\n## New API for Listing Entities in a Folder\n\n**October 20th, 2024**\n\nWe now have a new API endpoint for listing all entities in a folder. This endpoint allows you to retrieve all entities in a folder, including subfolders, with a single API call. You can use this endpoint to quickly get a list of all entities in a folder with high-level metadata about them.\n\nFor details, check out our [API Reference here](/api-reference/folders/list-folder-entities).\n\nThis API is available in our SDKs beginning version 0.8.25.\n\n## Datadog and Webhook Logging Beta Integrations\n\n**October 15th, 2024**\n\nLogs for your Prompts, Workflows and Documents can now be streamed to Datadog and external Webhooks. This is useful if you want deeper insight into key events that happen in Vellum in your external systems. For example, you might set up a Datadog alert that fires when there are multiple subsequent failures when executing a Workflow Deployment.\n\nThese integrations are currently in beta. If you'd like to participate in the beta period and want help setting up the integration, please contact Vellum Support.\n\n## Eva Qwen and Rocinante Added to OpenRouter Integration\n\n**October 13th, 2024**\n\nWe've added 2 additional new models to Vellum via our OpenRouter integration!\n\n1. [Eva Qwen 2.5 14B](https://openrouter.ai/eva-unit-01/eva-qwen-2.5-14b) - A powerful model based on the Qwen architecture.\n2. [Rocinante 12B](https://openrouter.ai/thedrummer/rocinante-12b) - A versatile 12 billion parameter model.\n\n## Vertex AI Embedding Model Support\n\n**October 15th, 2024**\n\nWe're excited to announce the addition of the Vertex AI embedding models `text-embedding-004` and `text-multilingual-embedding-002` to Vellum!\n\nThese models can be selected when creating a Document Index.\n\n![Vertex AI Embeddings](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/vertex-ai-embeddings.png)\n\n## New Models Added to OpenRouter Integration\n\n**October 11th, 2024**\n\nWe now have the addition of 8 new models integrated into Vellum via our OpenRouter integration:\n\n1. [Magnum v2 72B](https://openrouter.ai/anthracite-org/magnum-v2-72b) - A powerful model designed to achieve prose quality similar to Claude 3 models.\n2. [Nous: Hermes 3 405B Instruct](https://openrouter.ai/nousresearch/hermes-3-llama-3.1-405b) - A frontier-level, full-parameter finetune of the Llama-3.1 405B foundation model.\n3. [NousResearch: Hermes 2 Pro - Llama-3 8B](https://openrouter.ai/nousresearch/hermes-2-pro-llama-3-8b) - An upgraded version of Nous Hermes 2 with improved capabilities.\n4. [Nous: Hermes 3 405B Instruct (extended)](https://openrouter.ai/nousresearch/hermes-3-llama-3.1-405b:extended) - An extended context version of Hermes 3 405B Instruct.\n5. [Goliath 120B](https://openrouter.ai/alpindale/goliath-120b/api) - A large LLM created by combining two fine-tuned Llama 70B models.\n6. [Dolphin 2.9.2 Mixtral 8x22B](https://openrouter.ai/cognitivecomputations/dolphin-mixtral-8x22b/api) - An uncensored model designed for instruction following, conversation, and coding.\n7. [Anthropic: Claude 3.5 Sonnet (self-moderated)](https://openrouter.ai/anthropic/claude-3.5-sonnet:beta/api) - A faster, self-moderated endpoint of Claude 3.5 Sonnet.\n8. [Liquid: LFM 40B MoE](https://openrouter.ai/liquid/lfm-40b/api) - A 40.3B Mixture of Experts (MoE) model for general-purpose AI tasks.\n\nThese new models offer a wide range of capabilities, from improved prose quality and instruction following to extended context lengths and specialized tasks like coding. Users can now leverage these models in their Vellum projects, expanding the possibilities for AI-powered applications.\n\n## Workflow Edge Type Improvements\n\n**October 10th, 2024**\n\nIn the past, it could be quite difficult to achieve a perfectly straight line between two Nodes in a Workflow with the \"smooth-step\" edge type, but those days are behind us, friends.\n\nYou'll now see that your edges will automagically snap into straight-line connectors whenever they're close-to-horizontal.\n\n<video autoplay=\"true\" loop=\"true\" controls>\n  <source src=\"https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/EdgeSnap2.mp4\" />\n</video>\n\n## AutoLayout and AutoConnect for Workflows\n\n**October 10th, 2024**\n\nTwo exciting new features have been added to Workflows — AutoLayout and AutoConnect.\n\nAutoLayout allows you to instantly organize your workflow via algorithm, making it easier than ever to tame even the most-unruly of Workflows.\n\nAutoConnect will automatically connect any unconnected Nodes in your Workflow by creating edges from left to right (more-or-less).\n\nBoth of these features are accessible via new buttons in the bottom left toolbar in your Workflow Sandboxes.\n\nIn the event that you only want to use AutoConnect or AutoLayout on a specific subset of Nodes, simply drag to select and you'll see a new temporary toolbar that allows you to do just that.\n\n<video autoplay=\"true\" loop=\"true\" controls>\n  <source src=\"https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/AutoConnectLayoutAll.mp4\" />\n</video>\n\n<div style=\"display: grid; grid-template-areas: 'a b'; gap: 12px\">\n  <div style=\"grid-area: a\">\n    <video autoplay=\"true\" loop=\"true\" controls>\n      <source src=\"https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/AutoLayoutSelection.mp4\" />\n    </video>\n  </div>\n  <div style=\"grid-area: b\">\n    <video autoplay=\"true\" loop=\"true\" controls>\n      <source src=\"https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/AutoConnectSelection.mp4\" />\n    </video>\n  </div>\n</div>\n\n## Reorder Entities in Evaluation Reports\n\n**October 9th, 2024**\n\nYou can now reorder entities in the Evaluation Report table. Simply select the \"Reorder\" option in the entity column's menu to adjust the order to your preference.\n\n![Evaluation Report Entity Reorder](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/evaluation-report-entity-reorder.png)\n\n## Online Evaluations for Workflow and Prompt Deployments\n\n**October 3rd, 2024**\n\nWe're excited to announce the launch of [Online Evaluations for Workflow and Prompt Deployments](/help-center/evaluation/online-evaluations)! This new feature allows you to configure Metrics for your Deployments to be evaluated in real-time as they're executed. Key highlights include:\n\n- **Continuous Assessment**: Automatically evaluate the quality of your deployed LLM applications as they handle live requests.\n- **Flexible Configuration**: Set up multiple Metrics to assess different aspects of your Deployment's performance.\n- **Easy Access to Results**: View evaluation results directly in the execution details of your Deployments.\n\nIt works by configuring Metrics for your Workflow or Prompt Deployment in the new \"Metrics\" tab.\n\n![Configure Metrics for use in Online Evals](https://storage.googleapis.com/vellum-public/help-docs/online-evals/online-evals-metric-config.png)\n\nOnce configured, every execution of your Deployment will be evaluated against these Metrics. You can then view the results alongside the execution details.\n\n![See results of Metrics alongside Execution details](https://storage.googleapis.com/vellum-public/help-docs/online-evals/online-evals-execution-details.png)\n\nFor more details on how to get started with Online Evaluations, check out our [help documentation](/help-center/evaluation/online-evaluations).\n\n## OpenRouter Model Hosting + WizardLM-2 8x22B\n\n**October 2nd, 2024**\n\nWe've added OpenRouter as a new model host in Vellum! OpenRouter provides access to a wide range of AI models through a single API, expanding the options of models available to our users.\n\nAs part of our new OpenRouter integration, we're pleased to introduce the [WizardLM-2 8x22B](https://openrouter.ai/models/microsoft/wizardlm-2-8x22b) model to our platform. WizardLM-2 8x22B is known for its strong performance across various natural language processing tasks and is now available for use in your Vellum projects.\n\n![OpenRouter Model Host](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/open-router-model-host.png)\n\n## Prompt Caching Support for OpenAI\n\n**October 2nd, 2024**\n\nToday OpenAI introduced [Prompt Caching](https://openai.com/index/api-prompt-caching/) for GPT-4o and o1 models. Subsequent invocations of the same prompt will produce outputs with lower latency and up to 50% reduced costs.\n\nTo follow this, we've begun capturing cache tokens in Vellum's monitoring layer. With this update, you'll now see the number of Prompt Cache Tokens used by a Prompt Deployment's executions if it's backed by an OpenAI model.\nThis new monitoring data can be used to help analyze your cache hit rate with OpenAI and optimize your LLM spend.\n\n## Filter and Sort on Metric Scores\n\n**October 1st, 2024**\n\nYou can now filter and sort on a Metric's score within Evaluation Reports. This makes it easy to find all Test Cases that failed below a given threshold for a given Metric.\n\n<Frame>\n  <img src=\"https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-10/evaluation-report-metric-sort-filter.png\" />\n</Frame>\n"
      },
      "docs/content/change-log/2024-09.mdx": {
        "markdown": "---\ntitle: 'Changelog | September, 2024'\n---\n\n## Fireworks Llama 3.2 90B Vision Instruct\n\n__September 30th, 2024__\n\nMeta's most recent open source vision model, [Llama 3.2 Vision Instruct](https://fireworks.ai/models/fireworks/llama-v3p2-90b-vision-instruct), is now available in Vellum.\nThis model excels in visual recognition, image reasoning, captioning, and answering diverse questions related to images and is a great open source option if you're looking for a vision model.\n\n## Private Models Cost Tracking\n\n__September 26th, 2024__\n\nModels that are now created through the Custom Model Carousel on the [models page](https://app.vellum.ai/models) will have\n[cost tracking for prompt sandboxes](/changelog/2024/2024-08#prompt-sandbox-cost-tracking) and [cost tracking for prompt deployments](/changelog/2024/2024-09#cost-tracking-for-prompt-deployment-executions-table).\nThis means that you'll be able to see the dollar cost of LLM calls to model providers even for your custom models.\n\n## Google Gemini 1.5 002 Models\n\n_September 24th, 2024_\n\nGoogle Gemini's newest [002 models](https://developers.googleblog.com/en/updated-production-ready-gemini-models-reduced-15-pro-pricing-increased-rate-limits-and-more/) `gemini-1.5-pro-002` & `gemini-1.5-flash-002` are now available in Vellum! They offer 50% reduced pricing, 2x higher rate limits, and 3x lower latency than the previous Gemini 1.5 models.\n\n## Release Tag Column and Filter for Prompt Deployment Execution Table\n\n_September 24th, 2024_\n\nYou can now view and filter on release tags attached to your prompt executions within the Prompt Deployment Execution Table!\nThis addition allows for quick identification of the release version associated with each execution.\nYou can enable this new column in the Columns dropdown.\n\n![Prompt Deployment Executions Table with Release Tag Filter](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-09/prompt_deployment_release_tag_filter.png)\n\n\n## New Prompt Caching Columns for Prompt Deployment Execution Table\n\n_September 23rd, 2024_\n\nA while back Anthropic added support for [Prompt Caching](/changelog/2024/2024-08#prompt-caching-support-for-anthropic). With this update, you'll now see the number of Prompt Cache Read and Cache Creation Tokens used by a Prompt Deployment's executions if it's backed by an Anthropic model.\nThis new monitoring data can be used to help analyze your cache hit rate with Anthropic and optimize your LLM spend.\n\n![Prompt Executions with Cache Tokens](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-09/prompt_cache_tokens.png)\n\n\n## Improved Latency Filter and Sorting for Workflow Executions\n\n_September 23rd, 2024_\n\nYou can now sort and filter by the Latency field in the Workflow Executions Table! This update allows for better prioritization and\nidentification of executions with higher or lower latencies, as well as targeting executions within a range of latencies.\nWe believe these improvements will greatly aid in monitoring and managing workflow executions and their performance and metrics!\n\n## Improved Debugging for Map Nodes\n\n_September 23rd, 2024_\n\nIt used to be difficult to debug problematic iterations when a Map Node failed. We now keep track of each iteration's execution and make it easy to view them. You can page through a Map Node's iterations one-by-one.\n\n![Map Node Rejected Pagination](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-09/map-node-rejected-pagination.png)\n\nEach of these iterations, included the any that failed, are now also show in a Map Node's full screen editor.\n\n![Map Node Rejected Editor](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-09/map-node-rejected-editor.png)\n\nThe full screen editor now also allows you to cycle through each of an executed Map Node's iterations, making it easy to debug problematic iterations and iterate on the subworkflow used to produce that iteration's execution.\n\n## Resizable Node Editor Panel\n\n_September 20th, 2024_\n\nFor those of you using the new Workflow Builder, you'll now be able to resize the Node Editor Panel. This update makes it much easier to edit complex Conditional Node rules, Chat History Messages, JSON values, and more.\n\n![Resizable editor panel](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-09/ResizableSidePanel.gif)\n\n## Evaluations Performance Improvements\n\n_September 17th, 2024_\n\nWhile not as flashy as some of our other updates, we've undergone a major overhaul of our Evaluations backend resulting\nin significant performance improvements to the Evaluations page. Test Suites consisting of thousands of Test Cases\nused to feel sluggish and sometimes not load, but now load successfully and should feel much more responsive.\n\n## Cost Tracking for Prompt Deployment Executions Table\n\n_September 17th, 2024_\n\nYou can now see the cost of each Prompt Execution in the Prompt Executions Table.\n\n![Cost tracking prompt executions](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-09/prompt_executions_cost_tracking.png)\n\nThis is the next step of many we have planned for improving visibility into LLM costs in Vellum. You might use this to audit expensive calls and optimize your prompts to reduce costs.\n\n## Optimized Prompt Deployment Executions Table\n\n_September 13th, 2024_\n\nThis update brings a reduction in load times for filters and sorts; in some instances, dropping 2 minute load times to a\nfew seconds.\n\nWe've achieved this by switching to a more efficient data source, enabling more effective filtering and sorting\ncapabilities. You'll notice faster page load times across the board, resulting in a smoother, more responsive experience\nwhen working with Prompt Deployment Executions.\n\nThis optimization sets the stage for exciting new features we have in the works. Stay tuned for more updates that\nwill enhance your ability to analyze, and optimize your prompt executions.\n\n## External ID Filtering for Workflow Deployment Executions\n\n_September 13th, 2024_\n\nPreviously, when filtering workflow deployment executions by external IDs, you had to provide the exact string match\nto retrieve relevant results.\n\nNow, you can filter external IDs using a variety of string patterns. You can specify that the external ID\nshould start with, end with, or contain certain substrings. This enhancement allows for more flexible filtering,\nmaking it easier to locate specific workflow deployment executions based on partial matches.\n\n![new_external_id_filter_options](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-09/new_workflow_deployment_execution_external_id_filter_options.png)\n\n## Workflow Execution Timeline View Revamp\n\n_September 13th, 2024_\n\nWe have given the Workflow Execution Timeline View a bit of a facelift. Along with a more modern look, we have added a couple quality of life improvements:\n\n- **Subworkflows**: Instead of needing to navigate to a separate page, you can now expand subworkflows to view their executions details within the same page.\n- **Node Pages**: Instead of cluttering the page with the details of all nodes at once, we now display the details for just one node at a time. Click on a node to view its inputs, outputs, and more. Each node has its own permalink so that you can share the url with others.\n\n![Workflow Execution Timeline](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-09/workflow-execution-timeline.png)\n\n## OpenAI Strawberry (o1) Models\n\n_September 12th, 2024_\n\nOpenAI's newest [Strawberry (o1) models](https://openai.com/o1/) `o1-preview`, `o1-mini`, `o1-preview-2024-09-12`, & `o1-mini-2024-09-12` are now available in Vellum and have been added to all workspaces!\n\n## Interactive Pages in Single Editor Mode\n\n_September 7th, 2024_\n\nIt used to be that when two people were on the same Prompt/Workflow Sandbox, only one person could edit and interact with the page.\nIf you were a Viewer, you were unable to interact with the page at all and were blocked with a big page overlay.\n\nNow, the page overlay is gone and Viewers can interact with the page in a read-only mode and perform actions that\ndon't affect the state of the page. This includes things like scrolling, opening modals, copying text, etc.\n\n## Expand Cost in Execute Prompt APIs\n\n_September 4th, 2024_\n\nYou can now opt in to receive the cost of a Prompt's execution in the response of the [Execute Prompt](/api-reference/prompts/execute-prompt#request.body.expand_meta.cost) and\n[Execute Prompt Stream](/api-reference/prompts/execute-prompt-stream#request.body.expand_meta.cost) APIs.\n\nThis is helpful if you want to capture the cost of executing a Prompt in your own system or if you want to provide cost\ntransparency to your end users.\n\nTo opt in, you can pass the `expand_meta` field in the request body with the `cost` key set to `true`.\n\n```json\n{\n  ...,\n  \"expand_meta\" : {\n    \"cost\": true\n  }\n}\n```\n\nYou can expect a corresponding value to be included in the meta field on the response:\n\n```json\n{\n  ...,\n  \"meta\": {\n    \"cost\" : {\n        \"value\" : 0.000450003,\n        \"unit\" : \"USD\"\n    }\n  }\n}\n```\n\nThis functionality is available in our SDKs beginning v0.8.9.\n\n## Default Block Type Preference\n\n_September 4th, 2024_\n\nYou can now set a default Block type to use when defining Prompts in Vellum. Whenever you see the \"Add Block\" or \"Add Message\" options in a Prompt Editor, your preferred Block type will be used.\n\nBy default, the Block type is set to \"Rich Text,\" the newer option that supports Variable Chips. You can still switch between Block types for individual Blocks within the Prompt Editor.\n\n![default block type toggle](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-09/default-block-type-toggle.png)\n\n## New and Improved Code Editor\n\n_September 3rd, 2024_\n\nWe now use [Monaco Editor](https://microsoft.github.io/monaco-editor/) for our code editor that is used by Workflow Code Nodes and custom Code Evaluation Metrics.\nMonaco is the same editor that Visual Studio Code uses under the hood.\n\nThis offers a number of improvements including IntelliSense, semantic validation and syntax validation. Additionally we now inject Vellum Value types into the editor,\nso you can now have fully typed input values for things such as Chat History. Some of these improvements are currently only available for TypeScript and not Python.\n\n<iframe\n  src='https://www.loom.com/embed/5b72b48a8e1643b69199e220f46e6bed?sid=11157905-c1f1-4b5d-974f-55229207663f'\n  width='100%'\n  height='450px'\n></iframe>\n\n## VPC Disable gVisor Option for Code Execution\n\n_September 3rd, 2024_\n\nVPC customers of Vellum can now disable gVisor sandboxing for code execution in self-hosted environments to significantly improve the performance of Code Nodes in Workflows.\ngVisor is needed for secure sandboxing in our Managed SASS platform, but in a self hosted environment where you're the only organization,\nit's not strictly required if you trust that users within your org won't run malicious code.\n\n![gVisor self hosted flag](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-09/gvisor-flag.png)\n\n## Download Original Document from UI\n\n_September 2nd, 2024_\n\nYou can now download a file that was originally uploaded as a Document to a Document Index from the UI.\nYou'll find a new \"Download Original\" option in a Document's ••• More Menu.\n"
      },
      "docs/content/change-log/2024-08.mdx": {
        "markdown": "---\ntitle: 'Changelog | August, 2024'\n---\n\n## Anthropic Google Vertex AI Support\n\n_August 30th, 2024_\n\nWe now support using Anthropic's Claude 3.5 Sonnet, Claude 3 Opus and Claude 3 Haiku Models with [Google Vertex AI](https://cloud.google.com/vertex-ai). You can add them to your workspace from the [models page](https://app.vellum.ai/models).\n\n## Anthropic Tool Use API for Function Calling\n\n_August 30th, 2024_\n\nWe now support using Anthropic's [Tool Use API](https://docs.anthropic.com/en/docs/build-with-claude/tool-use) for function calling with Claude 3.5 Sonnet, Claude 3 Opus and Claude 3 Haiku Models. Previously Anthropic function calling had been supported by shimming function call XML into the prompt.\n\n## Prompt Node Linked Deployments\n\n_August 29th, 2024_\n\nWe have reworked the relationship of how Prompt Node's interact with Deployments. Previously, there was:\n\n- No way to update a Prompt in one spot and have it update in multiple Workflows\n- Confusing UX around what it meant to import a Prompt\n\nToday we are releasing this new setup modal that appears when you create a Prompt Node:\n\n![New Prompt Node Setup](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/prompt-node-setup.png)\n\nThe setup modal contains a new `Link to Deployment` option. This is a Prompt Node that references a Prompt Deployment _directly_ with a Release Tag. This\nallows for Workflows both in the Sandbox and as a Deployment to automatically pick up changes to the underlying Prompt without needing to update the Workflow\nby pointing to `LATEST`. To maintain a specific version of a Prompt Deployment, you can specify a user-defined Release Tag to keep the Prompt Node pinned to\na specific version. In this way, they now work exactly as Subworkflow Nodes when you select `Link to Deployment` there:\n\n![Prompt Node Linked Deployments](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/prompt-node-linked-deployments.png)\n\n## Workflow Executed By Filterable Column\n\n_August 29th, 2024_\n\nEarlier this month, we restricted the Workflow Deployment Executions table to only show executions invoked via API requests. This helped to filter out all of the noise\nfrom other contexts in which a Workflow Deployment could be invoked, bringing focus to only data from production traffic. However, we've found that are still other contexts in which it's useful to see Workflow Executions.\n\nYou'll now find a new `Executed By` column that shows what the immediate \"parent\" context was in which the Workflow was executed. This table is filtered down to just `API Request` by default, but you can opt in to include additional contexts, such invocation as a Subworkflow via a parent Workflow:\n\n![Executed By Workflow Filter](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/executed_by_workflow_filter.png)\n\n## Tool Choice Parameter Support for OpenAI\n\n_August 28th, 2024_\n\nWe are excited to announce that you can now natively specify how prompts handle functions using OpenAI's [Tool Choice](https://platform.openai.com/docs/api-reference/chat/create#chat-create-tool_choice)\nparameter. With the Tool Choice parameter, you can now dictate exactly when tools are used, allowing more precise and effective control of your prompt tools.\n\nThis feature is now available across all OpenAI models that support functions.\n\n![Tool Choice Enablement](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/tool_choice_parameter.png)\n\n## Add Metadata to Workflow Executions\n\n_August 27th, 2024_\n\nYou can now add metadata to your Workflow Executions through the API. This is useful for tracking additional information\nabout your executions, such as the source of the request or any other custom data you want to associate with the\nexecution.\n\nThis metadata is visible in the Workflow Execution Details page in the Vellum UI.\n\nYou can view more information at the [API documentation](https://docs.vellum.ai/api-reference/workflows/execute-workflow#request.body.metadata).\n![Workflow Execution Details Metadata](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/workflow-executions-metadata.png)\n\n## New Workflow Editor Beta Release\n\n_August 26th, 2024_\n\nOur new Workflow Editor is now available as an opt-in beta release. Next time you open the Workflow Editor, you'll see an announcement with the option to turn on the new Editor experience.\n\nWe've made a ton of improvements to the Editor UI, and more improvements are in the works. You should find that your Workflows are easier to navigate and edit, and more performant.\n\nThe beta can also be toggled on or off in the workflow builder settings at any time.\n\nWe'd love to get your feedback about the new experience, so please let us know what you think!\n\n<div style=\"display: grid; grid-template-areas: 'a b'; gap: 12px\">\n  <div style='grid-area: a'>\n    <img src='https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/workflow-editor-ui-opt-in.png' />\n  </div>\n  <div style='grid-area: b'>\n    <img src='https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/workflow-editor-ui-beta.png' />\n  </div>\n</div>\n\n## View the Provider Payload on a Workflow's Prompt Node\n\n_August 26th, 2024_\n\nYou can now view the compiled provider payload on a Workflow's Prompt Node. This is useful for debugging and understanding the\nexact data that was sent to the provider during a run, especially if you got some unexpected results.\n\n![Workflow Provider Payload](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/workflow-provider-payload.png)\n\n## Merging Two Adjacent Prompt Blocks\n\n_August 26th, 2024_\n\nMerging two adjacent prompt blocks in the prompt editor is now possible! This feature is especially useful when you want to combine two prompt long prompt blocks into one.\n\nYou can find this button in the top right drop down in the prompt editor.\n\nOnly blocks of the same type can be merged. For example, you can merge two rich text blocks or two Jinja blocks, but you cannot merge a rich text block with a Jinja block.\nYou can easily convert between the two, however, by clicking the three dots in the top right of the block and selecting \"Convert to Jinja\" or \"Convert to Rich Text\".\n\n![Merging Two Adjacent Blocks Dropdown](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/merge-two-blocks.png)\n\n## Asynchronous Exports of Evaluation Reports\n\n_August 26th, 2024_\n\nExports of evaluation reports are now asynchronous. You can export your evaluation report along with its results in CSV or JSON format, and an email will be sent to you once the export is done.\n\nThis change is especially useful for large evaluation reports, where the export process and download can take some time.\n\n![Evaluation Report Export](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/evaluation-report-export.png)\n\n## JSON Schema Editor with $ref Support\n\n_August 26th, 2024_\n\nVellum let's you define JSON Schemas in a few different places throughout the app to do things like define [Structured Outputs](/changelog/2024/2024-08#openai-structured-outputs-support) and [Function Calls](/help-center/prompts/prompt-engineering#function-calling). Previously this UI was just a simple form that allowed you to define basic JSON schemas. This UI has been improved to support direct edits via a raw JSON editor.\n\n![Raw Schema Button](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/raw_schema_button.png)\n\nFrom here, you can edit your JSON schema directly. This raw editor allows you to make use of all features supported by the [JSON Schema spec](https://json-schema.org/overview/what-is-jsonschema), even if they may not yet be supported by our basic form UI. For example, you can now defined references (i.e. `$ref`) like this:\nas references:\n\n![Raw Editor References](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/raw_editor_references.png)\n\n## Support for Excel Files in Document Indexes\n\n_August 23rd, 2024_\n\nWe now support uploading `.xls` and `.xlsx` files to Document Indexes for indexing and searching.\n\n## Prompt Caching Support for Anthropic\n\n_August 22nd, 2024_\n\nAnthropic recently released some exciting API changes that allow for [Prompt Caching](https://docs.anthropic.com/en/docs/build-with-claude/prompt-caching#how-prompt-caching-works).\nThis new feature allows for caching of frequently used portions of your Prompt for up to 5 minutes; which reduces the latency and cost of subsequent executions that include the same Prompt context.\n\nThis powerful feature is now natively supported within Vellum! In order to use it, simply toggle the new cache options on a given Prompt Block for the supported\nClaude Sonnet 3.5 and Claude Haiku 3.0 models.\n\n![Vellum Prompt Caching](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/prompt_sandbox_cache.png)\n\n## Prompt Execution Pages\n\n_August 22nd, 2024_\n\nIf you wanted to drill into a single Prompt Execution, previously you’d have to navigate to the Prompt Deployment's Executions table and try to filter for the specific Execution ID\nyou're looking for. Now each row has a navigable link accessible from the table:\n\n![Prompt Execution Link](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/prompt-execution-link.png)\n\nThis will navigate you to a dedicated page representing that specific Prompt Execution. From here, you can see details about the Execution like the raw HTTP data sent to and from the provider,\nany actuals recorded, the Vellum inputs and outputs to the prompt, and more!\n\n![Prompt Execution Page](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/prompt-execution-page.png)\n\n## Historical Versions of Entities in Evaluation Reports\n\n_August 21st, 2024_\n\nEarlier this month, we introduced [Evaluation Report History](https://docs.vellum.ai#evaluation-report-history), which allows you to view a history of all Evaluation runs and revisit the results of any prior state. We’ve now enhanced this feature by adding the ability to preview or navigate directly to the version of the Workflow or Prompt as it existed during that specific run.\n\n![Evaluation Report History](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/evaluation-report-history-entity-linking.png)\n\n## GPT-4o Finetuning\n\n_August 19th, 2024_\n\nOpenAI's newest GPT-4o models `gpt-4o-2024-08-06` and `gpt-4o-mini-2024-07-18` are now available as base models to add as OpenAI finetuned models.\n\n## Workflow Execution Replay & Scrubbing\n\n_August 18th, 2024_\n\nYou can now replay and scrub through the execution of a Workflow in Workflow Sandbox and Deployment Execution Details pages.\nThis feature is particularly useful for debugging and understanding the flow of your Workflow, especially if it\ncontains loops where a single node might be run more than once.\n\n![Workflow Execution Replay & Scrubbing](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/workflow-execution-replay-and-scrubbing.gif)\n\n## OpenAI Structured Outputs Support\n\n_August 15th, 2024_\n\nOpenAI released some API changes that allow their newest models to support [Structured Outputs](https://openai.com/index/introducing-structured-outputs-in-the-api/). This powerful new feature\nenables developers to strictly define the expected JSON object schemas from the model as part of the response through a model parameter, or through a function call. This new functionality is now natively integrated within Vellum!\n\nTo use within the context of Function Calling, simply toggle on the `Strict` checkbox for any given Function Call:\n\n![Function Call Strict](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/function-call-strict.png)\n\nTo enable Structured Outputs as part of a general OpenAI response, configure the `JSON Schema` setting as part of model parameters:\n\n![JSON Schema Strict](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/json-schema-strict.png)\n\nBoth places come with upload/download functionality built into the form. Note that for function calling, this means we've reduced the scope of the upload/download to be _just_ the `Parameters`\nJSON schema field. This allows schemas to be cross-compatible between either location since we are working with an [open specification](https://json-schema.org/understanding-json-schema).\n\n![JSON Schema Strict](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/upload-download-schema.png)\n\n## Native JSON Input Variable Support for Prompts\n\n_August 14th, 2024_\n\nVellum Prompts have historically been able to accept strings and chat histories as dynamic inputs to their template.\nIf you wanted to operate on JSON, you'd have to pass it as a string and then parse it within the Prompt itself\n(i.e. perform `json.loads()` within a Jinja Block).\n\nVellum Prompts now support native JSON as inputs! When you add an input variable to a Prompt, you can now select the new \"JSON\" type.\n\n![JSON Variables Dropdown](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/json-variable-dropdown.png)\n\nJSON input values will render as prettified JSON objects when referenced in Rich Text Blocks and can be operated on directly\nwithout the need for `json.loads()` when referenced in Jinja Blocks.\n\n## Workflow Deployment Executions Filtered to Just API Executions\n\n_August 12th, 2024_\n\nOur Workflow Deployment Executions page used to list all executions of a Workflow Deployment, no matter where they were invoked from. However, this\nwould often get confusing because you'd see a mix of results from both eval runs and production traffic in the same view.\n\nOur Workflow Deployment Executions page now filters down to just those executions that were invoked via the API. Executions from evaluations are still accessible from within the Evaluations UI by hovering over a row and clicking the \"View Workflow Details\" button:\n\n![View Workflow Details](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/view-workflow-details.png)\n\n## Add Specific Releases to Evaluation Reports\n\n_August 12th, 2024_\n\nWe've updated Evaluation Reports to give you more control over the releases you evaluate. Previously, you could only add the latest release of a Deployment to your reports. Now, you can select specific releases by their tag, allowing you to compare different versions within your Evaluation Reports.\n\n![Add Deployment](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-08/evaluation-report-add-by-release-tag.png)\n\n## Workflow Sandbox Latency\n\n_August 9th, 2024_\n\nYou can now view the latency of Workflow Sandboxes and their Nodes. To enable viewing latency click the Workflow Sandbox settings gear icon in the top right and turn on the \"View Latency\" option.\n\n![Workflow Sandbox Latency](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-08/workflow-latency-1.png)\n![Workflow Sandbox Latency Settings](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-08/workflow-latency-2.png)\n\n## Prompt Sandbox Cost Tracking\n\n_August 9th, 2024_\n\nYou can now see the dollar cost of a Prompt's execution within both a Prompt Sandbox's Prompt Editor and Comparison Mode views.\nThese costs are calculated using model providers' publicly available pricing data in conjunction with the number of input/output tokens used.\n\n![Prompt Sandbox With Cost Tracking](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-08/prompt_sandbox_with_cost_tracking.png)\n![Prompt Sandbox Comparison With Cost Tracking](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-08/prompt_sandbox_comparison_with_cost_tracking.png)\n\nIf you're curious about a given model's pricing, you can view details in the Model's detail page.\n![MLModel Detail Page with Billing Config](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-08/mlmodel_detail_page_with_cost_config.png)\nMost popular models already have pricing information populated, with support for even more models following in the coming days.\nShowing cost information in Prompt Sandboxes is just the first step! We'll expose cost details throughout more of Vellum over time.\n\n## GPT-4o 2024-08-06\n\n_August 6th, 2024_\n\nOpenAI's newest GPT-4o model `gpt-4o-2024-08-06` is now available in Vellum and has been added to all workspaces!\n\n## Deployment Descriptions\n\n_August 2nd, 2024_\n\nYou can now update your Prompt and Workflow Deployments to include a human-readable description. This is useful for giving other members of your team a high-level summary\nof what the Prompt or Workflow does without needing to parse through the configuration or control flow.\n\n![Update Deployment Description](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-08/update-deployment-description.png)\n\nOnce set, the description will appear as part of the Deployment Details page within the Deployment Info section:\n\n![Display Deployment Description](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-08/display-deployment-description.png)\n\n## Evaluation Report History\n\n_August 1st, 2024_\n\nIt used to be that you could only view the latest set of Evaluation results for a given Prompt or Workflow. But now,\nyou can view a history of all Evaluation runs and go back to view the results of any prior state.\n\n![Evaluation Report History](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-08/evaluation-report-history.png)\n\nThis is particularly helpful if you want to do things like compare the results of two different Evaluation runs,\ndownload the results of a past Evaluation run, or simply view the Test Cases that existed at that time.\n"
      },
      "docs/content/change-log/2024-07.mdx": {
        "markdown": "---\ntitle: 'Changelog | July, 2024'\n---\n\n## Metadata Filtering in Search Nodes\n\n_July 31st, 2024_\n\nFor a while now you've been able to supply structured JSON metadata alongside Documents and then filtering on that\nmetadata when making an [API call](/api-reference/document-indexes/search) to search across Documents in a Document index (see [here](/help-center/documents/metadata-filtering) for more info).\n\nHowever, Search Nodes within Workflows didn't offer this same functionality through the UI. The workaround has been to use a\nCode Node or API Node and invoke Vellum's Search API manually.\n\nWe're happy to share that the UI has reached parity with the API and you can now filter on metadata natively in Search Nodes.\nYou'll be able to construct arbitrarily complex boolean logic using the new Metadata Filters section of the Search Node's\nAdvanced settings.\n\n![Search Node Metadata Filtering](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-07/search-node-metadata-filtering.png)\n\n\n## Test Suite Test Case External IDs\n\n_July 30th, 2024_\n\nWe've added a new feature to Test Suites that allows you to optionally assign an external ID to each Test Case.\nThis is useful if you track your Test Cases in an external system and you want to periodically sync them with Vellum.\nYou assign an external ID to each Test Case upon creation and then later upsert Test Cases to that Test Suite,\nkeying off of the external ID.\n\n![Upload Test Suite Test Cases Modal](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-07/test-case-upsert-external-id.png)\n\n## Index Page Sorting\n\n_July 30th, 2024_\n\nWe've added another quality-of-life improvement for the index/file browser pages for Prompts, Documents, Test Suites, and Workflows. You'll now see a \"Sort by\" dropdown next to the other page-level controls. You can now sort both folders' and files' by created date, modified date, and label. If there are other sort fields that you'd find useful, please let us know!\n\n![Index page sort dropdown](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-07/index-page-sort-closed.png)\n![Index page sort options](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-07/index-page-sort-open.png)\n\n## Auto-Conversion to Variable Chips on Paste\n\n_July 30, 2024_\n\nBuilding on our recent update that introduced [Prompt Variable Chips](https://docs.vellum.ai/changelog/2024/july#prompt-variable-chips), we've improved the experience by adding support for copy/pasting variables across blocks of different types. Now, when you copy text that includes a `{{ my_var }}` variable reference from a Jinja block and paste it into a Rich Text block, it's seamlessly converted into a variable chip.\n\n## Google Vertex AI Support\n\n_July 29th, 2024_\n\nWe now support [Google Vertex AI](https://cloud.google.com/vertex-ai) models. Previously you could only use Google AI Studio for using Google's models. You can add them to your workspace from the [models page](https://app.vellum.ai/models).\n\n![Vertex AI Usage](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-07/vertex-ai.png)\n\n## Expandable Meta Params in Retrieve Provider Payload Endpoint\n\n_July 26th, 2024_\n\nFor a while now we've had [an API](/api-reference/prompts/retrieve-provider-payload) for compiling a Prompt and retrieving the exact payload that Vellum would send\nto a model provider on your behalf. We now support a new parameter in this API – `expand_meta`. With `expand_meta`,\nyou can opt-in to return additional metadata relating to the compiled prompt payload. Learn more about which\nfields are expandable in our [API docs here](/api-reference/prompts/retrieve-provider-payload#request.body.expand_meta).\n\nThis new field is available in our SDKs starting v0.7.3.\n\n## Prompt Node Usage in Workflows\n\n_July 25th, 2024_\n\nYou can now see token counts and other usage metrics appear in Prompt Node results when invoking Workflows in the Workflow Sandbox:\n\n![Prompt Node Usage](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-07/prompt-node-usage.png)\n\nThis setting is now on by default, but can be toggled off in the Workflow Builder Settings.\n\nYou can also now return usage data when invoking a _Workflow Deployment_ via API, by passing in `True`\nto the `expand_meta.usage` parameter on either Execute Workflow endpoints.\n\n```python\nstream = client.execute_workflow_stream(\n  workflow_deployment_name=\"demo\",\n  inputs=[\n    WorkflowRequestInputRequest_String(\n      type=\"STRING\",\n      name=\"foo\",\n      value=\"bar\",\n    ),\n  ],\n  event_types=[\"WORKFLOW\", \"NODE\"],\n  expand_meta=WorkflowExpandMetaRequest(\n    usage=True\n  )\n)\n\nfor event in stream:\n  if event.type == \"NODE\" and event.data.state == \"FULFILLED\":\n    node_result_data = event.data.data\n    if node_result_data and node_result_data.type == \"PROMPT\":\n      print(node_result_data.data.execution_meta.usage)\n```\n\n## Enable/Disable All Workflow Node Mocks\n\n_July 25th, 2024_\n\nMocking Prompt Nodes helps to save token usage and time when developing the later stages of your Workflow. However, once the Workflow is in a good state, it's often useful to run\nthe full Workflow end-to-end without mocks to make sure it all comes together. Previously, you had to enable/disable each mock individually. Now, beneath the scenario inputs there\nis a toggle that allows you to enable/disable all mocks in a workflow at once.\n\n![Enable Disable All Mocks](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-07/enable-disable-all-mocks.png)\n\n## Support for Bulk Upserting Test Suite Test Cases via API\n\n_July 24th, 2024_\n\nFor a while now we've had [an API](/api-reference/test-suites/test-cases/bulk-update) for creating, replacing, and deleting Test Cases in a Test Suite in bulk.\nWe now support a fourth operation in this API – upsert. With upsert, you can provide an `external_id` and a Test Case\npayload. If there is already a Test Case with that `external_id`, it'll be replaced. Otherwise, it'll be created.\n\nThis new operation is available in our SDKs starting v0.6.12.\n\n## Llama 3.1 on Groq\n\n_July 23rd, 2024_\n\nMeta's newest [Llama 3.1 models](https://ai.meta.com/blog/meta-llama-3-1/) are now available in Vellum through our [Groq](https://wow.groq.com/now-available-on-groq-the-largest-and-most-capable-openly-available-foundation-model-to-date-llama-3-1-405b/) integration!\n\n## Deployed Prompt Variant Display\n\n_July 19th, 2024_\n\nWhen on the Prompt Deployment Overview page, you can now see the name of the Prompt Variant that's been deployed.\nThis is useful if your Prompt Sandbox has multiple Prompt Variants that you were comparing against one another\nand you're not sure which one is currently deployed.\n\n![Deployed Prompt Variant Display](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-07/deployed-prompt-variant-display.png)\n\n## Improvements to Prompt Chat History Variables\n\n_July 18th, 2024_\n\nIt used to be that Prompts that accepted a dynamic Chat History required an input variable whose name was specifically `$chat_history`.\nThis nomenclature caused frequent confusion and was a bit cumbersome to work with.\n\nNow, you can name Chat History input variables whatever you want and even rename them after-the-fact. As part of this,\nwe've also centralized input variable definitions so that whether you want to create a String variable or a Chat History variable,\nyou can do so via the \"Add\" button in the \"Input Variables\" section of the Prompt Editor.\n\n![Add Prompt Input Variable Button](https://storage.cloud.google.com/vellum-public/help-docs/changelogs/2024-07/add-prompt-input-variable-button.png)\n\n## Copyable Text to Clipboard\n\n_July 18th, 2024_\n\nWe’ve introduced the ability to copy Prompt Variant IDs, Document Indexes, Models, Workflow Deployment Names and IDs, Document Keys, and Prompt Deployment Names and IDs to clipboard.\nThis feature comes with an enhanced UI with intuitive indicators and tooltips for copyable fields.\n\n![Copy Text to Clipboard](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-07/copy-text-to-clipboard-1.png)\n![Copy Text to Clipboard](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-07/copy-text-to-clipboard-2.png)\n\n## GPT-4o Mini\n\n_July 18th, 2024_\n\nOpenAI's newest [GPT-4o Mini models](https://openai.com/index/gpt-4o-mini-advancing-cost-efficient-intelligence/) `gpt-4o-mini` & `gpt-4o-mini-2024-07-18` are now available in Vellum and have been added to all workspaces!\n\n## Prompt Variable Chips\n\n_July 18th, 2024_\n\nIt used to be that any time you wanted to reference a variable in a Prompt, you did so using `{{ myVariable }}` syntax.\nWhile powerful if you need to use more complex Jinja templating syntax, using double-curlies for simple variable substitution\ncan be a bit cumbersome.\n\n1. They are harder to visually parse from the rest of your Prompt\n2. They can get confusing when dealing with json, which also uses double-curly brackets\n3. Whenever you rename a variable, you need to hunt down its usages.\n\nTo make this easier, we've introduced a new way to reference variables in Prompts: Variable Chips.\nVariable Chips are small, clickable chips that you can reference in your Prompt text. You can add them by beginning to\ntype `{{ ` or by typing `/`. Renaming a variable automatically renames all of its references.\n\nVariable chips can be used in the new \"Rich Text\" block type. New Prompt blocks will default to Rich Text, but you can\nchange existing blocks to Rich Text by clicking the block type dropdown in the block's toolbar and converting from Jinja\nto Rich Text and vice versa.\n\nCheck out a full video demo here:\n\n<iframe\n  src='https://www.loom.com/embed/fcfdac3f366641b2b8a4104ca73063d7'\n  width='100%'\n  height='450px'\n></iframe>\n\n## New Layout for Sandbox Evaluations\n\n_July 17th, 2024_\n\nPreviously, when a Prompt/Workflow had multiple Test Suites associated with it, we'd shown them all on the page at once. This made navigation difficult (you had to scroll up and down to see each) and could also lead to performance issues. We've addressed these issues updating the page layout to display just one Test Suite at a time with a searchable select input that allows you to easily load and view each table one at a time.\n\n![Sandbox Evaluation Select](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-07/eval-select-closed.png)\n\n## New \"Add Document to Document Index\" API\n\n_July 16th, 2024_\n\nWe've introduced a new API for adding previously uploaded Documents to a Document Index. This API is useful when you have a Document that\nhad previously been added to one Document Index and you want to add it to another without having to re-upload its contents altogether. It's available in our SDKs\nbeginning version 0.6.10. You can find docs for this new API [here](/api-reference/document-indexes/add-document).\n\n## Prompt Deployment Executions Table Improvements\n\n_July 12th, 2024_\n\nWe've made several quality-of-life enhancements to the Prompt Deployment Executions table, simplifying the process of adding and editing 'Desired Output' values. The entire table has been updated to align with the design of our other tables, such as Evaluations, ensuring a familiar editing experience. Additionally, it is now easier than ever to expand/collapse and copy values.\n\nMoreover, we've significantly improved the consistency and usability of the 'Quality' column. You can now edit quality ratings with a single click, and the 'Desired Output' column will automatically update to reflect your rating where applicable.\n\n![Prompt Deployment Executions Table](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-07/executions-quality-input.png)\n\n## Constant Values in Workflow Node Inputs\n\n_July 11th, 2024_\n\nIt's often the case that you might want to specify a constant value as a Workflow Node Input, either as the input's primary value or as its fallback value.\nThe solution up until now was to specify a Templating Node, have it output a constant value, and then feed its output to the downstream Node.\n\nToday, we are releasing the ability to inline constant values directly within Workflow Node inputs! First, start typing in the Node Input until the no options modal shows:\n\n![New Constant Link](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-07/new-constant-link.png)\n\nA modal will appear to specify your value:\n\n![New Constant Modal](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-07/new-constant-modal.png)\n\nUpon confirming, Vellum will use an icon to denote that the input value represents a constant. As part of this work, we also added icons for all other Node Input types:\n\n![Constant Value Display](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-07/constant-value-display.png)\n\nNote that constant values will always drop to the last fallback option of a given Node input, and there can only be maximum one constant defined per input.\nThis is due to the nature fallback values – fallbacks are only used if other values aren't available (i.e. the node that produced the value hadn't executed yet). In the case of constants, their values are always present.\n\n## Test Case CSV Upload in Evaluation Reports\n\n_July 9th, 2024_\n\nWe’ve introduced the ability to upload Test Cases to a Test Suite directly from within the Evaluations tab of a Prompt or Workflow. Now, you'll find an \"Upload Test Cases\" button in the table header of every Evaluations table, for both Workflows and Prompt Sandboxes whereas previously, you needed to first navigate to the Test Suite itself and upload from there.\n\n![Test Case Upload in Evaluation Reports](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-07/eval-page-test-case-upload.png)\n\n## Index Page List View\n\n_July 3rd, 2024_\n\nWe’ve introduced a list-view toggle to the index/file browser pages for Prompts, Documents, Test Suites, and Workflows. Your preferred view will be saved automatically by entity type, allowing you to, for instance, default to list view for Prompts and grid view for Documents.\n\n![Index Page List View](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-07/index-page-list-view.jpg)\n\n## Collapsible Index Page Sections\n\n_July 2nd, 2024_\n\nYou can now collapse sections on the index/file browser pages for Prompts, Documents, Test Suites, and Workflows. Simply click the heading of any section to toggle the visibility of all folders and items within that section.\n\n![Collapsible Index Page Sections](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-07/index-page-collapse.png)\n"
      },
      "docs/content/change-log/2024-06.mdx": {
        "markdown": "---\ntitle: 'Changelog | June, 2024'\n---\n\n## Map Nodes\n_June 27th, 2024_\n\nOften times when designing a workflow you need to iterate over an array and run the same operation on each item.\nPreviously this was only accomplishable by [manually creating the loop](https://docs.vellum.ai/help-center/workflows/common-architectures#3-calling-a-prompt-for-each-item-in-an-array) by connecting Nodes in a tedious layout.\n\nTo make this process easier, we are now introducing Map Nodes! Map Nodes work in the same way that array map functions do in many common programming languages.\nThe Nodes take a JSON array as an input and iterate over it, running a Subworkflow for each item. The Subworkflow is provided with three input variables for the iteration item, index and the array.\nThe output of every Subworkflow is then combined into a single array as a Node output.\nMap Nodes also support up to 12 concurrent iterations.\n\n<iframe\n  src=\"https://www.loom.com/embed/59a1132879104063b3bf3641706f6128\"\n  width=\"100%\"\n  height=\"450px\"\n></iframe>\n\n## Inline Subworkflow Nodes\n\n_June 26th, 2024_\n\nSubworkflow nodes are a powerful node within Vellum Workflows that allow users to create reusable units of node logic. However up until now, they necessitated\ndeveloping the Workflow in a separate Sandbox, and for that Workflow to be deployed in order to reference it in a particular Workflow.\n\nToday, we are releasing Inline Subworkflows! They empower users to create and group together modular units of nodes directly within the context of an existing\nWorkflow. The node spawns its own editor and supports similar UX as the parent Workflow such as all existing nodes and copy/paste.\n\n![](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-06/inline-subworkflow-editor.png)\n\nFor more details, check out our [new help center doc](/help-center/workflows/experimentation#inline-subworkflow-node).\n\n## Claude 3.5 Sonnet Support\n\n_June 20th, 2024_\n\nWe now support the new [Claude 3.5 Sonnet](https://www.anthropic.com/news/claude-3-5-sonnet) model. It has already been automatically added to all workspaces.\n\nWe also support the model hosted through AWS Bedrock. You can add it to your workspace from the [models page](https://app.vellum.ai/models).\n\n## Workflow Notes\n\n_June 13th, 2024_\n\nTo help you organize and document your Workflows we've added Workflow Notes with customizable colors and font sizes. You can find Workflow Notes in the Workflow Nodes drag and drop selector.\n\n![Workflow Notes](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-06/note-node.png)\n\n## Workflow Node Comments\n\n_June 13th, 2024_\n\nYou can now add a comment to any Workflow Node to help you document your Workflow's logic. To add a comment click the chat bubble icon on the top right of the Node to open up the comment section.\n\n![Node Comments](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-06/node-comments.png)\n\n## Breadcrumb Context Menus\n\n_June 11th, 2024_\n\nYou'll now see breadcrumbs that show the folder path whenever visiting the details of an entity in Vellum. This is helpful for seeing the file structure and easily navigating up to a parent folder.\n\nWith this, you can also rename a parent folder by right-clicking on its breadcrumb rather than having to first navigate to its parent.\n\nLastly, can also now access all of an entity's \"More Menu\" options by right-clicking its card when on the entity's grid view.\n\n![Breadcrumb Context Menus](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-06/breadcrumb-context-menus.png)\n\n## Override Vellum Provided API Keys\n\n_June 10th, 2024_\n\nYou can now provide your own API keys for models that Vellum provides API keys for such as Fireworks hosted models. To do so, click the 3 dot menu on a Model card and click the \"Set API Key\" option.\n\n![API Key Override](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-06/api-key-override.png)\n\n## Undo and Redo for Workflow Sandboxes\n\n_June 7th, 2024_\n\nMade a mistake while editing a workflow you want to undo? Good news, you can now undo and redo from within Workflow Sandboxes by using keyboard shortcuts or by clicking the new undo and redo buttons.\n\n![Workflow Undo Redo](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-06/undo-redo.gif)\n\n## Support for Multiple Outputs in Workflow Metrics\n\n_June 7th, 2024_\n\nUsing Vellum Workflows to power custom LLM Metrics (i.e. have one AI grade another AI) is super powerful, but to date,\nyou've only been able to use Workflows that produce a single `score` output.\n\nWe now have official support for Workflow Metrics that produce multiple outputs! As long as the Workflow used as\nyour Metric has at least one Final Output Node of type `NUMBER` named `score`, you can add as many additional Final Output Nodes\nwith custom names and types as you like.\n\nAll outputs are shown when the Metric is used in an Evaluation Report.\n\n![Workflow Sandbox and Variant IDs](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-06/multiple-outputs-in-metrics.png)\n\nNote: only the `score` output is aggregated and shown in the aggregate view.\n\n## API for Updating a Test Suite's Test Cases in Bulk\n\n_June 6th, 2024_\n\nFor a while now you've been able to programmatically [upsert](/api-reference/test-suites/test-cases/upsert)\nand [delete](/api-reference/api-reference/test-suites/delete-test-suite-test-case) Test Cases in a Test suite individually.\n\nHowever, this can be problematic if you want to operate on many Test Cases at once. To solve this, we've added an API to create, replace, and delete Test Cases in bulk.\n\nCheck out the new Bulk Test Case Operations API in our docs [here](/api-reference/api-reference/test-suites/test-suite-test-cases-bulk).\n\nNote: this API is available in our SDKs beginning version 0.6.4.\n\n## APIs for Programmatically Moving Release Tags\n\n_June 5th, 2024_\n\nTo follow up the release of APIs for [programmatically deploying Prompts and Workflows](/changelog/2024/2024-06#apis-for-programmatically-deploying-promptsworkflows),\nwe're excited to also announce APIs for programmatically moving [Release Tags](/help-center/deployments/managing-releases#introduction-to-deployment-release-tags).\n\nWith these APIs, you can create a CI/CD pipeline that automatically moves a Release Tag for one environment from one version of a Prompt/Workflow to another.\nFor example, you might run certain tests or QA processes before promoting `STAGING` to `PRODUCTION`.\n\nTo move a Prompt Deployment Release Tag, check out the API docs [here](/api-reference/api-reference/deployments/update-deployment-release-tag).\n\nTo move a Workflow Deployment Release Tag, see the API docs [here](/api-reference/api-reference/workflow-deployments/update-workflow-release-tag).\n\nNote: these APIs are available in our SDKs beginning version 0.6.3.\n\n## APIs for Programmatically Deploying Prompts/Workflows\n\n_June 5th, 2024_\n\nThanks to the desires of a few very forward-thinking customers, we now have APIs to support programmatically deploying prompts and workflows.\nThese APIs can be used as the basis for CI/CD pipelines for Vellum-managed entities.\n\nWe're super bullish on integrating Vellum with existing release management systems (think, Github Actions) and you can expect\nto see more from us here, soon!\n\nTo deploy a Prompt, you'll need the IDs of the Prompt Sandbox and the Prompt Variant shown here:\n\n![Prompt Sandbox and Variant IDs](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-06/prompt-sandbox-ids.png)\n\nAnd can then hit the Deploy Prompt endpoint found [here](/api-reference/api-reference/sandboxes/deploy-prompt).\n\nSimilarly, to deploy a Workflow, you'll need the IDs of the Workflow Sandbox and the Workflow shown here:\n\n![Workflow Sandbox and Variant IDs](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-06/workflow-sandbox-ids.png)\n\nAnd can then hit the Deploy Workflow endpoint found [here](/api-reference/api-reference/workflow-sandboxes/deploy-workflow).\n\nNote: these APIs are available in our SDKs beginning version 0.6.3.\n\n## Image Support in Claude 3 and Gemini Models\n\n_June 3rd, 2024_\n\nUntil now, GPT-4 was the only multi-modal family of models supported in Vellum that let you parse images and return text.\n\nVellum now also supports multi-modality for Claude 3 and Gemini models. This means you can now use Vellum's prompt comparison UI and normalized API layer to compare and easily swap between multi-modal models.\n\nThis is particularly useful if you're trying to extract text from images, classify pictures, and more, and need to find the best model for your specific use-case.\n\nFor more on how to work with images in Vellum, see our [help docs here](/help-center/prompts/images).\n"
      },
      "docs/content/change-log/2024-05.mdx": {
        "markdown": "---\ntitle: 'Changelog | May, 2024'\n---\n\n## Context Menu for Workflow Edges and Nodes\n\n_May 31th, 2024_\n\nYou can now right-click on Workflow Edges to open a context menu to allow you to delete them without having to hunt down the trash icon. You can also now right-click on Workflow Nodes to delete them as well.\n\n![Workflow Context Menu](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/workflow-context-menus.png)\n\n## Breadcrumbs and Page Header Improvements\n\n_May 31th, 2024_\n\nWe've significantly improved folder and page breadcrumbs throughout the app. Prompts, Test Suites, Workflows, and Documents now display the entire folder path of your current page, making it much easier to navigate through your folder structure. We've also updated the overflow styling for breadcrumbs: instead of an ellipsis, you'll now see a count of hidden breadcrumbs, which can be accessed via a dropdown menu.\n\nAdditionally, the pages mentioned above, along with Workflow/Prompt Evaluations and Deployments, now feature the same updated header design.\n\n![Breadcrumbs and header updates](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/breadcrumbs-update.png)\n\n## Subworkflow Node Navigation\n\n_May 31st, 2024_\n\nWhen viewing the execution details of a Workflow, Subworkflow nodes executed as part of that run will now have a link to _its_ execution page.\n\n![Subworkflow Navigation](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/subworkflow-navigation.png)\n\n## Prompt Deployment Actuals Metadata\n\n_May 29th, 2024_\n\nWhen submitting execution Actuals for Prompts, you can now optionally include a metadata field. This field can contain arbitrary data, and will be saved and shown in the Executions tab of your Prompt Deployment.\n\n![Prompt Actuals Metadata](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/prompt-execution-actuals-metata.png)\n\nThis is particularly helpful if you want to capture feedback/quality across multiple custom dimensions. Learn more in our\n[API docs here](/api-reference/api-reference/submit-completion-actuals).\n\n## Replay Workflow from Node\n\n_May 29th, 2024_\n\nOne of the biggest burdens when developing Workflows in Vellum is having to rerun your _entire_ Workflow whenever you want to make\na change to just a single node and want to see its downstream effects.\n\nYou can now re-run a Workflow from a specific Node! After running a Workflow for the first time, you'll see this new play icon above each Node.\n\n![Replay From Node Icon](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/replay-from-node-icon.png)\n\nDoing so will re-use results from the previous execution for all upstream nodes and only actually execute the target node and all nodes downstream of it.\n\n![Replay From Node Execution](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/replay-from-node-execution.png)\n\nWe hope this helps you decrease iteration cycles and save on LLM costs!\n\n## Improvements to Saving Executions as Scenarios & Test Cases\n\n_May 29th, 2024_\n\nSaving Prompt/Workflow Deployment Executions from production API calls to an Evaluation dataset as Test Cases is a great\nway to close the feedback loop between monitoring and experimentation. However, this process has historically been\ntime-consuming when you have many Executions to save.\n\nWe've made a number of improvements to this process:\n\n1. You can now multi-select to bulk save Executions as Test Cases\n2. We now default to the correct Sandbox/Test Suite when saving Executions as Scenarios/Test Cases\n3. You'll now see warnings if the Sandbox/Test Suite you're saving to has required variables that are missing from the Execution\n\nCheck out a full demo here:\n\n<iframe\n  src='https://www.loom.com/embed/d7baaa2394bc49e28f2984521c95afc9'\n  width='100%'\n  height='450px'\n></iframe>\n\n## Prompt Sandbox History Update\n\n_May 28th, 2024_\n\nPreviously, editing past versions of a Prompt Sandbox could be confusing, with unclear indications of which version you were modifying and how it was being saved.\n\nNow, the history view for a Prompt Sandbox is read-only. To edit a previous version, simply click the Restore button, and a new editable version will be created from that specific version.\n\n## Workflow Deployment Actuals Metadata\n\n_May 28th, 2024_\n\nWhen submitting execution Actuals for Workflows, you can now optionally include a metadata field. This field can contain arbitrary data, and will be saved and shown in the Executions tab of your Workflow Deployment.\n\nThis is particularly helpful if you want to capture feedback/quality across multiple custom dimensions.\n\n```\ncurl -X POST https://predict.vellum.ai/v1/submit-workflow-execution-actuals \\\n     -H \"X_API_KEY: \"$VELLUM_API_KEY\"\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"execution_id\": \"be975a69-33c7-4ff0-b6ac-d8008198db1e\",\n  \"actuals\": [\n    {\n      \"output_type\": \"STRING\",\n      \"output_key\": \"final-output\",\n      \"quality\": 0.8,\n      \"metadata\": {\n        \"user_score\": 1.0,\n        \"internal_score\": 1.0,\n        \"internal_notes\": \"The output was not factually correct.\"\n      }\n    }\n  ]\n}'\n```\n\n## Guardrail Workflow Nodes\n\n_May 23rd, 2024_\n\nYou can now use Metrics inside of Workflows with the new Guardrail Node! Guardrail Nodes let you run pre-defined evaluation criteria at runtime as part of a Workflow execution so that you can drive downstream behavior based on that Metric's score.\n\nFor example, if building a RAG application, you might determine whether the generated response passes some threshold for [Ragas Faithfulness](https://docs.ragas.io/en/latest/concepts/metrics/faithfulness.html) and if not, loop around to try again.\n\n![Guardrail Nodes](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/guardrail-nodes.png)\n\n## Chat Mode Revamp\n\n_May 22th, 2024_\n\nChat Mode in Prompt Sandboxes has received a major facelift! The left side of the new interface will be familiar to anyone using the Prompt Editor, while the rest of the interface retains its functionality with a fresh new look. We've also fixed some UX wonk and minor bugs during the restyling process.\n\n![Chat Mode Styling Update](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/chat-mode-styling-update.png)\n\n## Double-Click to Resize Rows & Columns in Prompt Sandboxes\n\n_May 22th, 2024_\n\nYou can now double-click on resizable row and column edges in both Comparison and Chat modes to auto-expand that row/column to its maximum size. If already at maximum size, double-clicking will reset them to their default size. Additionally, in Comparison mode, double-clicking on cell corners will auto-resize both dimensions simultaneously.\n\n## Improved Image Support in Chat History Fields\n\n_May 22th, 2024_\n\nWe've made several changes to enhance the UX of working with images. Chat History messages now include an explicit content-type selector, making it easier to work with image content using supported models. You can now add publicly-hosted images in multiple ways: by pasting an image URL, pasting a copied image, or dragging and dropping an image from another window.\n\nAdditionally, we've added limited support for embedded images. You can embed an image directly into the prompt by copy/pasting or dragging/dropping an image file from your computer's file browser. This method has a 1MB size limit and is an interim solution as we continue to explore image upload and hosting options.\n\n<div style=\"display: grid; grid-template-areas: 'a b' 'c c'; gap: 12px\">\n  <div style='grid-area: a'>\n    <img src='https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/improved-image-support.png' />\n  </div>\n  <div style='grid-area: b'>\n    <img src='https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/content-type-select.png' />\n  </div>\n  <div style='grid-area: c'>\n    <img src='https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/image-config-modal.png' />\n  </div>\n</div>\n\n## Gemini 1.5 Flash\n\n_May 20th, 2024_\n\nGoogle's [Gemini 1.5 Flash model](https://deepmind.google/technologies/gemini/flash/) is now available in Vellum. You can add it to your workspace from the [models page](https://app.vellum.ai/models).\n\n## Llama 3 Models on Bedrock\n\n_May 14th, 2024_\n\nWe now support both of the Llama 3 models on AWS Bedrock. You can add them to your workspace from the [models page](https://app.vellum.ai/models).\n\n## GPT-4o Models\n\n_May 13th, 2024_\n\nOpenAI's newest [GPT-4o models](https://openai.com/index/hello-gpt-4o/) `gpt-4o` & `gpt-4o-2024-05-13` are now available in Vellum and have been added to all workspaces!\n\n![GPT 4o](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/gpt-4o.png)\n\n## Organization and Workspace Names in Side Nav\n\n_May 13th, 2024_\n\nYou can now view the active Organization's name and the active Workspace's name in the left sidebar navigation.\n\n![Workspace and Org Name Nav](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/org-name-sidebar.png)\n\n## Run All Button on Evaluation Reports\n\n_May 10th, 2024_\n\nThere's now a \"Run All\" button on evaluation reports that runs a test suite for all variants. Instead of running each variant individually, you can now run them all with one click.\n\n![Prompt Node Execution](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/run-all-button.png)\n\n## Prompt Node Monitoring\n\n_May 9th, 2024_\n\nVellum is now capturing monitoring data for deployed Prompt Nodes. Whenever a deployed Workflow invokes a Prompt Node, it will now show a link displaying the Prompt Deployment label:\n\n![Prompt Node Monitoring](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/prompt-node-monitoring.png)\n\nClicking on the link will take you to the _Prompt's executions_ page, where you can then see all metadata captured for the execution, including the raw request data sent to the model:\n\n![Prompt Node Execution](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/prompt-node-execution.png)\n\n## Groq Support\n\n_May 9th, 2024_\n\nVellum now has a native integration with the LPU Inference Engine, [Groq](https://groq.com/). All public models on Groq are now available to add to your workspace. Be sure to add your API key as a Secret named `GROQ_API_KEY` on the [API Keys page](https://app.vellum.ai/api-keys).\n\nGroq is an LLM hosting provider that offers incredible inference speed for open source LLMs, including the recently released (and very hyped!) [Llama 3](https://llama.meta.com/llama3/) model.\n\n![Groq Support](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/groq-support.png)\n\n## Function Calling in Prompt Evaluation\n\n_May 8th, 2024_\n\nPrompts that output function calls can now be evaluated via Test Suites. This allows you to define Test Cases consisting of the inputs to the prompt, and the expected function call, then assert that there's a match. For more, check out our [docs](/help-center/evaluation/quantitative-evaluation#function-calling).\n\n![Function Call Prompts](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/function-tests-edit.png)\n\n## Out-of-Box Ragas Metrics\n\n_May 7th, 2024_\n\nTest-driven development for your RAG-based LLM pipelines is now easier than ever within Vellum!\n\nThree new [Ragas Metrics](https://docs.ragas.io/en/latest/index.html) – [Context Revelancy](https://docs.ragas.io/en/v0.1.5/concepts/metrics/context_relevancy.html), [Answer Relevance](https://docs.ragas.io/en/latest/concepts/metrics/answer_relevance.html) and [Faithfulness](https://docs.ragas.io/en/latest/concepts/metrics/faithfulness.html) – are now available out-of-box in Vellum. These can be used within Workflow Evaluations to measure the quality of a RAG system.\n\nFor more info, check out our new help center article on [Evaluating RAG Pipelines](/help-center/evaluation/evaluating-rag-pipelines).\n\n![Ragas Metrics](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/ragas-metrics.png)\n\n## Subworkflow Node Streaming\n\n_May 7th, 2024_\n\nSubworkflow Nodes can now stream their output(s) to parent workflows.\n\nThis allows you to compose workflows using modular subworkflows without sacrificing the ability to delivery incremental results to your end user.\n\nNote that only nodes immediately prior to Final Output Nodes can have their output(s) streamed.\n\n![Subworkflow Streaming](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/subworkflow-streaming.gif)\n\n## Default Test Case Concurrency in Evaluations\n\n_May 4th, 2024_\n\nYou can now configure how many Test Cases should be run in parallel during an Evaluation. You might lower this value\nif you're running into rate limits from the LLM provider, or might increase this value if your rate limits are high.\n\n![Test Case Concurrency](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-05/default-test-case-concurrency.png)\n"
      },
      "docs/content/change-log/2024-04.mdx": {
        "markdown": "---\ntitle: 'Changelog | April, 2024'\n---\n\n## Support for Gemini 1.5 Pro\n\n_April 30th, 2024_\n\nGemini 1.5 Pro is now available in Vellum.\n\nYou can add it to your workspace through the [models page](https://app.vellum.ai/models).\n\n## Improved Monitoring on Workflow Deployments\n\n_April 30th, 2024_\n\nWe've added new functionality to the monitoring tab on workflow deployments. It's now possible\nto see a breakdown of executions by the release tag used, and further filter down based\non a specific release tag.\n\n![Release Tag Monitoring](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-04/release-tag-monitoring.png)\n\n## Reusable Metrics\n\n_April 30th, 2024_\n\nIntroducing Reusable Metrics!\n\nMetrics can now be shared across your Test Suites making it easier for you to consistently test and evaluate your Prompt / Workflow quality.\nDefine a suite of Custom Metrics tailored to your business logic and use-case to save time and ensure standardized evaluation criteria.\n\n![Metric Definition](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-04/Metric-Definition-Changelog.png)\n\n## Prompt Blocks\n\n_April 30th, 2024_\n\nPrompts can now be be broken down into multiple sections and organized using \"blocks.\" Prompt blocks can be reordered,\nand toggled on or off.\n\nSplitting your Prompt into multiple blocks can make it easier to navigate complex Prompts and help you focus\non iterating on specific sections. Check out the demo below to see how it works!\n\n<iframe\n  src=\"https://www.loom.com/embed/a0999bc1643b425aad90743d552c973f\"\n  width=\"100%\"\n  height=\"450px\"\n></iframe>\n\n## Filtering Executions on Release Tags\n\n_April 29th, 2024_\n\nIt's now possible to filter workflow deployment executions by the release tag used when executing the workflow.\n\nThis can be very useful for monitoring differences between releases of a deployment. Are you still using an older\nrelease in production? Are executions of your new release behaving as expected?\n\n![Execution Release Tags](https://storage.googleapis.com/vellum-public/help-docs/changelogs/2024-04/execution-release-tags.png)\n\n## Faster Queries on Workflow Deployment Executions\n\n_April 26th, 2024_\n\nThe executions tab of the workflow deployments page now fetches historical executions much faster. This tab is a\ngreat way to see how your customers are actually using your deployments.\n\nIn our test for deployments with over 200k executions, data now loads in under 4 seconds instead of the\nprevious 15+ seconds - a 4x speed improvement.\n\n## Support for Evaluating External Functions\n\n_April 25th, 2024_\n\nVellum's Evaluation framework can now be used to test arbitrary functions defined in your codebase – not just\nPrompts and Workflows managed by Vellum.\n\nFor example, you might test a prompt chain that lives in your codebase and that's defined using another third party\nlibrary. This can be particularly useful if you want to incrementally migrate to Vellum Prompts/Workflows, but ensure\nthat the outputs remain consistent.\n\nFor a detailed example of how to use Vellum's evaluation framework to test external functions, see the\n[python example here](https://github.com/vellum-ai/vellum-client-python/blob/main/examples/Running%20a%20Test%20Suite%20on%20an%20External%20Function.ipynb)\n\n## Fireworks Finetuned Models\n\n_April 24th, 2024_\n\nVellum now supports models that you've fine-tuned on [Fireworks AI](https://fireworks.ai/). You can add your fine-tuned Fireworks model by navigating to the [Models page](https://app.vellum.ai/models) and clicking on the featured model template at the top.\n\n![Fireworks Model Template](https://storage.googleapis.com/vellum-public/help-docs/fireworks_model_template.png)\n\nNote that only the Mistral family of models are supported currently. If there are other base models that you would like to see supported, please reach out to us!\n\n## Updated Prompt UI\n\n_April 23rd, 2024_\n\nWe've updated the prompt editing UI throughout Vellum. You’ll see the new look in the Prompt Editor, Comparison Mode, Chat Mode, Prompt Nodes in Workflows, and Deployment Overviews. This is the first in a series of exciting improvements to the prompt editing experience that will be rolling out over the coming weeks and months.\n\n![New Prompt Block UI](https://storage.googleapis.com/vellum-public/help-docs/new_prompt_block_ui.png)\n\n## New Upsert Prompt Sandbox Scenario API\n\n_April 23rd, 2024_\n\nThe API for upserting a Prompt Sandbox Scenario now requests and responds with schemas that are more consistent with\nother Vellum APIs, using discriminated unions for improved type safety. This API is available on version `0.4.0` of\nour SDKs.\n\nYou can find the API documentation for it [here](/api-reference/api-reference/sandboxes/upsert-sandbox-scenario).\n\n## Function Call Input in Test Cases\n\n_April 23rd, 2024_\n\nWorkflows support Function Call values as a valid output type. Because these function calls often come from models, it is valuable to have evaluations on these workflows that ensure that the function call output is what we expect. Test suites in Vellum now support specifying test case input and evaluation values.\n\n![Test Case Function Call](https://storage.googleapis.com/vellum-public/help-docs/function-call-test-cases.png)\n\n## Support for Additional Models\n\n_April 19th, 2024_\n\nThe following models are now available in Vellum:\n\n- Llama-3-70B-Instruct\n- Llama-3-8B-Instruct\n- Mixtral-8x22B-Instruct-v0.1\n\nThey can be added to your workspace through the [models page](https://app.vellum.ai/models).\n\n## Claude 3 Opus Prompt Generators\n\n_April 18th, 2024_\n\nIf you've been using GPT models, you've likely relied on prompt engineering tips that worked well for those models.\nBut when you apply the same prompts to Claude 3 Opus, you might notice they don't perform as expected.\n\nThis happens because Claude 3 Opus is trained using different methods and data, so the way you prompt it differs\nfrom how you would prompt GPT-4. We have some helpful [tips in our guide](https://www.vellum.ai/blog/prompt-engineering-tips-for-claude),\nbut as of today, you can convert your prompts even faster...\n\n### GPT-4 to Claude 3 Opus Prompts\n\nWe've released a free tool for that allows you to paste your GPT-4 prompt and get an adapted Claude 3 Opus prompt\nwith suggestions for dynamic variables. You can [try the tool here](https://tools.vellum.ai/gpt4-to-claude-opus).\n\n![GPT-4 to Claude 3 Opus](https://storage.googleapis.com/vellum-public/help-docs/gpt-4-to-claude-3-opus-prompt-converter-tool.png)\n\n### Claude 3 Opus Prompt Generator\n\nIf you don't have a working GPT-4 prompt but need to create a prompt for Claude 3 Opus from scratch, you can use our\nsecond new free tool – \"Claude Prompt Generator.\"\n\nThis generator lets you input your `'prompt objective'` and creates a suitable prompt for Claude 3 Opus, with\nsuggestions for dynamic variables that you should include. You can [try the tool here](https://tools.vellum.ai/opus-prompt-generator).\n\n## Max Tokens Warning\n\n_April 10th, 2024_\n\nWhen iterating on a Prompt in Vellum's Prompt Sandbox, you may find that its output stops mid-sentence. This is often\nbecause the \"Max Tokens\" parameter is set too low, or the prompt itself is too long. To help you identify when this is\nthe case, we've added a warning that will appear when this max is hit.\n\n![Max Tokens Warning](https://storage.googleapis.com/vellum-public/help-docs/max-tokens-warning.png)\n\n## GPT-4 Turbo 04/09/2024 Model\n\n_April 9th, 2024_\n\nOpenAI's newest GPT-4 Turbo model `gpt-4-turbo-2024-04-09` is now available in Vellum!\n\n## Usage Tracking in Prompt Sandbox and Prompt API\n\n_April 9th, 2024_\n\nWe have added the ability for you to track model host usage from the `execute-prompt` [API](/api-reference/api-reference/execute-prompt#request.body.expand_meta.usage). This API update is available on version `0.3.21` of our SDKs.\n\nYou can also now view model host usage in the Prompt Sandbox by enabling the \"Track Usage\" toggle in your Prompt Sandbox's settings.\n\n![Usage Tracking Sandbox](https://storage.googleapis.com/vellum-public/help-docs/usage-tracking-sandbox.png)\n\n## New API for Listing a Test Suite's Test Cases\n\n_April 8th, 2024_\n\nWe have a new [API](/api-reference/api-reference/test-suites/list-test-suite-test-cases) available in beta for listing the Test Cases belonging to a Test Suite at `GET /v1/test-suites/{id}/test-cases`.\n\nThis API is available on version `0.3.20` of our SDKs.\n\n## Prompt Editor\n\n_April 5th, 2024_\n\nPrompt Sandboxes have an entirely new view mode: Prompt Editor. It's a dedicated space for iterating on a single Variant and Scenario. All of the features you need to work quickly are easily accessible, and collapsible sections make it simple to free up screen space. There are even more improved experiences and exciting coming down the pike for Prompt Editor, and many of those improvements will make their way into Comparison and Chat Modes, as well.\n\n<iframe\n  src=\"https://www.loom.com/embed/352759341cd24bc0bfb58eee7b6d0d9c\"\n  width=\"100%\"\n  height=\"450px\"\n></iframe>\n\n## Copy and Paste Logit Bias\n\n_April 5th, 2024_\n\nYou can now copy logit bias parameters from one Prompt Variant and paste them into another Prompt. This works in both Prompt Sandboxes and Prompt Nodes within Workflows.\n\n![Logit Bias Copy](https://storage.googleapis.com/vellum-public/help-docs/logit-bias-copy.png)\n\n## Test Suite Improvements\n\n_April 4th, 2024_\n\nWe've made some changes to our Test Suite UX. Here's what's new:\n\n- **Simplified Creation Process**: We've broken down the test suite creation into clear, manageable steps, ensuring a more guided and less overwhelming setup.\n- **In-Context Editing**: You can now edit test suites directly from the Prompt or Workflow evaluations page via a new, sleek modal.\n- **Enhanced Error Messaging**: We've revamped our error messages to be clearer and more actionable. You'll now receive specific feedback that pinpoints exactly where things went wrong.\n\n![Test Suite Improvements](https://storage.googleapis.com/vellum-public/help-docs/test-suite-error.png)\n\n## New APIs for Accessing Test Suite Runs\n\n_April 3rd, 2024_\n\nWe have two new [APIs](/api-reference/api-reference/test-suite-runs/retrieve) available in beta for accessing your Test Suite Runs:\n\n- A Retrieve endpoint to fetch metadata about the test suite run like it's current state at `GET /v1/test_suite_runs/{id}`\n- A List executions endpoint to fetch the results of the test suite run at `GET /v1/test_suite_runs/{id}/executions`\n\nThese APIs are available on version `0.3.15` of our SDKs.\n"
      },
      "docs/content/change-log/2024-03.mdx": {
        "markdown": "---\ntitle: 'Changelog | March, 2024'\n---\n\n## Configurable Chunk Settings for Document Indexes\n\n_March 26th, 2024_\n\nWe've added the ability to configure the chunk size and the overlap between consecutive chunks for Document Indexes.\nYou can find it under the \"Advanced\" section when creating or cloning a Document Index.\n\n![Document Index Chunk Settings](https://storage.googleapis.com/vellum-public/help-docs/document-index-chunk-settings.png)\n\n## Workflow Template Node Debugging\n\n_March 26th, 2024_\n\nThere's a new debugging feature for iterating on Workflow Template Nodes. You can click the new \"Test\" button in the full-screen editor and test your template without having to run the whole Workflow. Then you can further iterate on your template by modifying your test data in the \"Test Data\" tab.\n\n![Workflow Template Debugger](https://storage.googleapis.com/vellum-public/help-docs/template-node-debugger-arrows.png)\n\n## Workflow Node Search\n\n_March 26th, 2024_\n\nWe have added a new Workflow node search feature to help you find your way in large and complex Workflows. Click the new search icon in the top right to quickly find the node you are looking for, or use the `⌘ + shift + F` shortcut (`ctrl + shift + F` on windows).\n\n![Workflow Node Search](https://storage.googleapis.com/vellum-public/help-docs/workflow-search-for-node.png)\n\n## Workflow Node Mocking\n\n_March 26th, 2024_\n\nWhile iteratively developing a Workflow in Vellum, you often want to focus on improving a specific branch or node. It can be cumbersome to re-run the entire Workflow just to test the part you're iterating on, especially if you already know what the upstream nodes are going to output.\n\nTo help address this, Vellum now supports _node mocking_. You can now mock out a Prompt or Subworkflow Node such that its execution is skipped and a hard-coded value is returned.\n\nThis can help you dramatically speed up your Workflow development since you no longer have to wait for early Prompt Nodes to complete. This has the added benefit of saving the expense of tokens with LLM providers!\n\nFor more information on Workflow Node Mocking, visit our new [help center page](/help-center/workflows/experimentation#node-mocking).\n\n![Workflow Node Mocking](https://storage.googleapis.com/vellum-public/help-docs/workflow-node-mocking.png)\n\n## Claude 3 and Mistral on Bedrock\n\n_March 23rd, 2024_\n\nWe now support both of the Claude 3 and both of the Mistral models on AWS Bedrock. Add these models to your workspace by heading to the [models](https://app.vellum.ai/models) page and searching for the one you need from the search bar.\n\n![Bedrock Models](https://storage.googleapis.com/vellum-public/help-docs/claude3-mistral-bedrock.png)\n\n## Navigation Updates\n\n_March 22nd, 2024_\n\nWe've made some significant changes to Vellum's navigation UI.\n\nThe app sidebar has been reorganized with the goal of making it easier to navigate between a Prompt/Workflow's Sandbox,\nEvaluations, and Deployments. You'll find that after you've clicked on a \"Prompt\" or \"Workflow,\" there's an integrated\nsubmenu within the navigation sidebar that shows \"Sandbox,\" \"Evaluations,\" and \"Deployments.\"\n\nAdditionally, you'll find that some nav items, such as \"Deployments\", \"Models,\" \"API Keys,\" \"Organization,\" and\n\"Profile\" have been grouped into the new \"More\" and \"Settings\" nav items.\n\n![Navigation Updates](https://storage.googleapis.com/vellum-public/help-docs/nav-updates.png)\n\n## Read-only Workflow Diagrams\n\n_March 22th, 2024_\n\nYou can now see a read-only view of workflow diagrams for Workflow Deployment Executions, Workflow Test Case Executions, and Workflow Releases. You can access the diagram by clicking the \"Graph View\" icon tab on the top right.\n\nThis is particularly helpful if you want to visualize what your Workflow looked like at that time, as well as visualize the execution path your Workflow took.\n\n![Workflow Deployment Execution](https://storage.googleapis.com/vellum-public/help-docs/workflow-deployment-execution-diagram.png)\n\n## Test Suite Table Updates\n\n_March 21th, 2024_\n\nThe Test Cases table on the Test Suites page has been updated to use the same new styling and functionality as the Test Cases table that you'll find when viewing a Prompt/Workflow Evaluation Report. With this, adding, editing, and deleting Test Cases is generally more reliable. Additionally, special variables types, like Chat History, have an improved display are are no longer displayed as raw JSON.\n\n![Test Suite Table Updates](https://storage.googleapis.com/vellum-public/help-docs/test_suite_table.png)\n\n## Additional Headers on API Nodes\n\n_March 20th, 2024_\n\nPreviously, API Nodes only accepted one configurable header, defined on the `Authorization` section on the node. You can now configure additional headers in the new advanced `Settings` section. Header values could be regular `STRING` values or Secrets, and any headers defined here would override the Authorization header.\n\n![API Node Headers](https://storage.googleapis.com/vellum-public/help-docs/api-node-headers.png)\n\n## Indicators for Deployed Prompt/Workflow Sandboxes\n\n_March 19th, 2024_\n\nYou can now tell at a glance whether a given Prompt/Workflow Sandbox has been deployed. You can also hover over the tag to see when it was last deployed.\n\n![Sandbox Deployment Tag](https://storage.googleapis.com/vellum-public/help-docs/sandbox-deployment-tag.png)\n\n## Cancellable Workflow Deployment Executions\n\n_March 18th, 2024_\n\nYou can now cancel running Workflow Deployment Executions. Simply click the cancel button on the Workflow Execution details page.\n\n![Cancellable Workflows](https://storage.googleapis.com/vellum-public/help-docs/cancel-workflow-deployments.png)\n\n## Code Execution Metric Debugging\n\n_March 18th, 2024_\n\nThere's a new debugging feature for iterating on custom Code Metrics. You can click the new \"Test\" button and test your code without having to run the whole test suite. You can update the example data that's passed into your Code Metric by going to the \"Test Data\" tab.\n\n![Workflow Code Execution Debugger](https://storage.googleapis.com/vellum-public/help-docs/code-eval-metric-debugger.png)\n\n## Workflow Details for Workflow Evaluations\n\n_March 18th, 2024_\n\nYou can now view Workflow Execution details from the Workflow Evaluations table! To view the details, click on the new \"View Workflow Details\" button located within a test case's value cell.\n\n![Workflow Executions2](https://storage.googleapis.com/vellum-public/help-docs/workflow-evaluation-details2.png)\n![Workflow Executions1](https://storage.googleapis.com/vellum-public/help-docs/workflow-evaluation-details.png)\n\n## Subworkflow Nodes\n\n_March 14th, 2024_\n\nAre your Workflows becoming giant and unwieldy? Wish you could define composable groups of nodes to be used across Workflows?\n\nWe're excited to introduce the latest node type in the Workflows node picker - Subworkflow Nodes! With Subworkflow Nodes, you can now link directly to deployed Workflows to reuse commonly grouped nodes and execution logic. Subworkflow Nodes also supports release tagging, giving users the flexibility to either pin to a specific version (say, `production`) or always automatically update with `LATEST`.\n\n![Subworkflow Nodes](https://storage.googleapis.com/vellum-public/help-docs/subworkflow-nodes-ga.png)\n\nFor more details, check out our [new help center doc](https://docs.vellum.ai/help-center/workflows/experimentation#subworkflow-node).\n\n## Image Support in the UI\n\n_March 13th, 2024_\n\nImage support is LIVE in the Vellum UI for OpenAI's GPT-4 Turbo with Vision! Vellum API's have had image support for a while and now you can add images in your Prompt and Workflow Sandbox scenarios!\n\n![Image Support in Vellum UI](https://storage.googleapis.com/vellum-public/help-docs/images-in-prompts-walkthrough.gif)\n\nFor more details on supported image formats and working with OpenAI's vision models in Vellum, check out our [new help center doc](https://docs.vellum.ai/help-center/prompts/images).\n\n## Workflow Node Input Value Display\n\n_March 11th, 2024_\n\nYou can now view a Node's input values directly from the Workflow Editor! This makes it easier to understand what data is being passed into a Node and to debug issues.\n\n![Workflow Node Input Value Display](https://storage.googleapis.com/vellum-public/help-docs/workflow-node-inputs.gif)\n\n## Inline Editing for Evaluations\n\n_March 11th, 2024_\n\nYou can now edit test cases directly from the \"Evaluations\" tab in Workflows and Prompts!\n\nThe new editing interface makes it easier than ever to make changes to test cases with long variable values, allows you to edit Chat History values with the same drag-and-drop editor you use elsewhere in the app, and adds support for formatted editing of JSON.\n\nWe're continuing to add support for more variable types and will soon be applying this new edit flow to other tables throughout the app.\n\n<iframe\n  src='https://www.loom.com/embed/03d5457e8cf2478292bd234584993705?sid=25638bf5-51a0-4042-93a8-2a2c72553fd7'\n  width='100%'\n  height='450px'\n></iframe>\n\n## Workflow Node 'Reject on Error' Toggle\n\n_March 9th, 2024_\n\nPreviously, if a Node in a Workflow errored, the Workflow would proceed to execute until another downstream Node tried to use the output of the Node that errored and would only then terminate. This made Workflows hard to debug and put the onus on you to implement error handling.\n\nGoing forward, by default, Workflows will immediately terminate if a Node errors. There are still cases in which you might want to continue despite a Node error (e.g. implementing your own error handling or retry logic). In this cases, you can disable the new \"Reject on Error\" toggle.\n\n![Workflow Node Reject on Error](https://storage.googleapis.com/vellum-public/help-docs/node-error-toggle.png)\n\nHistorical Workflow Nodes have this toggle disabled so that there's no change in behavior. New Nodes going forward will have this toggle enabled by default.\n\n## Workflow Code Execution Node Debugging\n\n_March 8th, 2024_\n\nWe have introduced a new debugging feature for workflow code execution nodes! You can click the new \"Test\" button in the full-screen editor and test your code without having to run the whole workflow! Then you can further iterate on your code by modifying your test data in the \"Test Data\" tab.\n\n![Workflow Code Execution Debugger](https://storage.googleapis.com/vellum-public/help-docs/code-node-debugger.png)\n\n## List Document Indexes API\n\n_March 7th, 2024_\n\nWe've exposed a new API endpoint to list all the Document Indexes in a Workspace.\nYou can find the details of the API [here](https://docs.vellum.ai/api-reference/api-reference/document-indexes/list).\n\n## In-Progress Workflows Executions Now Available in Monitoring\n\n_March 6th, 2024_\n\nYou previously had to wait for a workflow to fully resolve before seeing it in the Workflow Executions table. We now start publishing executions as soon as Workflows are initiated! This allows users building complex Workflows to see any that are still in progress:\n\n![In Progress Workflow Executions Table](https://storage.googleapis.com/vellum-public/help-docs/inprogress-executions-table.png)\n\nWe also updated the Workflow Execution Details page to also reflect in progress workflows:\n\n![In Progress Workflow Execution Details](https://storage.googleapis.com/vellum-public/help-docs/inprogress-execution-details.png)\n\n## Expand Scenario in Prompt Sandbox\n\n_March 6th, 2024_\n\nLooking for more room to edit your scenarios in the prompt sandbox? We've just added an expand scenario modal! You can now easily make changes to scenarios with longer inputs.\n\n![Expand Scenario Modal](https://storage.googleapis.com/vellum-public/help-docs/expand-scenario-modal.png)\n\n## Code Execution Logs\n\n_March 6th, 2024_\n\nYou can now use `print` or `console.log` statements in code execution nodes and view the logs by looking at a node's result and clicking the logs tab.\n![Code Logs Exec Nodes](https://storage.googleapis.com/vellum-public/help-docs/code-exec-logs.png)\n\nWe've also added logs for Metrics. You can view them by enabling the logs column in the table columns settings.\n![Code Logs Eval](https://storage.googleapis.com/vellum-public/help-docs/code-exec-metric-logs.png)\n\n## Code Execution Improvements\n\n_March 6th, 2024_\n\nWe've made some huge improvements to code execution! You can now include custom packages for Code Execution Workflow nodes and Code Execution Metrics. On top of this, we have added support for TypeScript. You can select the programming language you want from the new \"Runtime\" dropdown.\n\nWe have also introduced a few smaller improvements:\n\n- The maximum size for code input values has been increased to 10mb, a significant leap from the previous cap of 128k characters\n- The layout of the workflow code execution node editor has been revamped with a new side by side layout\n- All Vellum input types are now supported for code execution node input variables\n- Line numbers in the code editor will no longer be squished together\n\n![Code Execution Improvements](https://storage.googleapis.com/vellum-public/help-docs/code-execution-improvements.png)\n\n## Claude 3\n\n_March 5th, 2024_\n\nAnthropic's two newest models, Claude 3 Opus and Claude 3 Sonnet, are now both available in Vellum! These models have been added to all workspaces so they should be selectable from prompt sandboxes upon refresh.\n\n![Claude 3](https://storage.googleapis.com/vellum-public/help-docs/claude-3-models.png)\n\n## In-App Support Now Accessed via \"Get Help\" Button\n\n_March 5th, 2024_\n\nIt used to be that the In-App Support Widget we showed in the bottom right corner of the screen would get in the way of other actions like Save buttons.\nNow, that widget is hidden by default and you can open it by clicking the \"Get Help\" button in the side navigation. Once opened, we\nalso now display bookmarked links to useful resources like the Vellum Help Docs.\n\n![Get Help Button Opens Chat Widget](https://storage.googleapis.com/vellum-public/help-docs/hide-chat-widget-by-default.gif)\n\n## Workflow Error Nodes\n\n_March 4th, 2024_\n\nIt's now possible to terminal a Workflow and raise an error through the use of Error Nodes. You can either re-raise an error from an upstream node, or construct and raise a custom error message.\n\n<iframe\n  src='https://www.loom.com/embed/4435e9ea1a3b4a4b9dbda6d1c1a769f4'\n  width='100%'\n  height='450px'\n></iframe>\n\n---\n\n## Retrieve Workflow Deployment API\n\n_March 1st, 2024_\n\nWe've exposed a new API endpoint to retrieve details of a Workflow Deployment. This is useful if you want to do things like programmatically detect if a Workflow Deployment with a specific name exists, or has the inputs/outputs you expect.\nYou can find the details of the API [here](https://docs.vellum.ai/api-reference/api-reference/workflow-deployments/retrieve).\n"
      },
      "docs/content/change-log/2024-02.mdx": {
        "markdown": "---\ntitle: 'Changelog | February, 2024'\ndescription: >-\n  Discover the newest features and improvements in Vellum's product update for\n  February.\n---\n\n## Add Entity to Folder API\n\n_February 29th, 2024_\n\nWe've exposed a new API endpoint to add an existing entity to an existing folder. This is useful if you want to programmatically organize your entities in Vellum. You can find the new endpoint and details on how to invoke it in our [API documentation](https://docs.vellum.ai/api-reference/api-reference/folder-entities/add-entity-to-folder).\n\n\n## Vellum is SOC 2 Type 2 Compliant\n\n_February 28th, 2024_\n\nVellum is now SOC 2 Type 2 compliant! This means that an independent auditor has verified that Vellum's information security practices, policies, and procedures meet the SOC 2 standards for security, availability, processing integrity, confidentiality, and privacy.\nIf you'd like to learn more about Vellum's security practices or request a copy of our SOC 2 report, please reach out to us at [security@vellum.ai](mailto:security@vellum.ai).\n\n\n## Save Workflow Execution from Details Page\n\n_February 23rd, 2024_\n\nPreviously you were able to save your workflow execution to a test suite or sandbox scenario from the executions table. Now you can do the same from each execution's details page! Both the \"Save As Test Case\" and \"Save As Scenario\" buttons should now appear on the top right of the execution:\n\n![Save Workflow Execution Details](https://storage.googleapis.com/vellum-public/help-docs/save_workflow_execution_detail.png)\n\n## Workflow Builder UI Settings\n\n_February 21st, 2024_\n\nHave you ever wanted to pan around workflows using the W-A-S-D keys? Looking for more control over your screen real estate?\n\nGood news! You can now adjust these settings and more in the new workflow UI settings! Access the settings by clicking the new gear icon in the top right of your workflow builder.\n\n![Workflow Builder Settings](https://storage.googleapis.com/vellum-public/help-docs/workflow-settings.png)\n\n## Custom Release Tags\n\n_February 21st, 2024_\n\nYou can now manage your Prompt and Workflow release process with greater flexibility and control using Custom Release Tags! Pin your Vellum API requests to tags you define for a given Prompt/Workflow Deployment. These tags can be easily re-assigned within the Vellum app so you can update your production, staging or other custom environment to point to a new version of a prompt or workflow — all without making any code changes!\n\nGoing forward, new customers of Vellum will no longer see the legacy \"Environment\" tags in Vellum's UI. Custom Release Tags are the new, first-class mechanism for managing different releases of the same prompt/workflow in Vellum. We will slowly be deprecating and removing the legacy \"Environment\" tags for existing customers.\n\nLearn more about Managing Releases in our [Help Center article](http://docs.vellum.ai/help-center/deployments/managing-releases) or watch the video walkthrough below:\n\n<iframe\n  src=\"https://www.loom.com/embed/56992fb51372400ebdb69228c0b53b5d\"\n  width=\"100%\"\n  height=\"450px\"\n></iframe>\n\n## Better Function Call Display\n\n_February 15th, 2024_\n\nWe've beautified the display of model function calls in both prompt sandboxes and workflow prompt nodes! Say goodbye to the hard to read and mundane JSON strings.\n![Fireworks Function Call Model](https://storage.googleapis.com/vellum-public/help-docs/function-call-display.png)\n\n## Evaluation Reports\n\n_February 12th, 2024_\n\nTest Suite Runs have received a big upgrade, and now live in its own tab - Evaluations. You are now able to compare a Prompt or Workflow Variant against a Deployment, and view aggregate Metrics like Median or P90.\n\nSee a demo of the complete set of updates here:\n\n<iframe\n  src=\"https://www.loom.com/embed/c81360d2736746cfbf90c6ebfae82637\"\n  width=\"100%\"\n  height=\"450px\"\n></iframe>\n\n## Fireworks Function Calling Model\n\n_February 5nd, 2024_\n\nOpenAI's GPT models have traditionally led the way in supporting structured data generation through function calling. But late last year Fireworks AI splashed in with their own [function calling model](https://fireworks.ai/blog/fireworks-raises-the-quality-bar-with-function-calling-model-and-api-release)! This model is now available in Vellum for those interested in an open source alternative to GPT.\n![Fireworks Function Call Model](https://storage.googleapis.com/vellum-public/help-docs/fireworks-function-call.png)\n\n---\n\n## Cloning Workflow Nodes\n\n_February 2nd, 2024_\n\nWhen you hover over any node in your Workflow editor, you will see a new `Duplicate Node` icon. Clicking on this will create a new copy of a node! Never again will you need to start a node from scratch when you want to just tweak a field or two.\n\n![Clone Nodes](https://storage.googleapis.com/vellum-public/help-docs/clone-nodes.png)\n\n---\n\n## Prompt Node Retries\n\n_February 1st, 2024_\n\nYou can now detect when a Prompt Node within a Workflow errors by using a Conditional Node. Using this, you can now build out retry logic around Prompt Nodes within your Workflow! This is useful if you want to catch retryable errors (like rate limit errors from an LLM provider) and try making the call to the LLM again.\n\nSee a demo of it in action here:\n\n<iframe\n  src=\"https://www.loom.com/embed/770a1ac0bbaa4f9d9192d336eb0a191c\"\n  width=\"100%\"\n  height=\"450px\"\n></iframe>\n"
      },
      "docs/content/change-log/2024-01.mdx": {
        "markdown": "---\ntitle: 'Changelog | January, 2024'\ndescription: >-\n  In January, 2024 Vellum released prompt usage tracking, single editor mode,\n  and more!\nimage:\n  type: url\n  value: >-\n    https://storage.googleapis.com/vellum-public/help-docs/token-count-time-series-data.png\n---\n\n## Prompt Deployment Usage Tracking\n*January 29th, 2024*\n\nGoing forward, Vellum will now keep track of the token utilization of your Prompt Deployments. You can keep tabs on\ninput, output, and total tokens used per request.\n\n![Token Count Row Data](https://storage.googleapis.com/vellum-public/help-docs/token-count-row-data.png)\n\nYou can also view this data in aggregate in the Monitoring tab.\n\n![Token Count Time-Series Data](https://storage.googleapis.com/vellum-public/help-docs/token-count-time-series-data.png)\n\nThis is a precursor to more advanced usage and billing features coming down the road. If there's more you'd like to see\nhere, please share your feedback with us!\n\n---\n\n## Model Search Bar\n*January 29th, 2024*\n\nAs the number of models available in Vellum grows, it's become harder to find the model you're looking for. To help with\nthis, we've added a search bar to the model selection dropdown in the Prompt and Workflow editors. This will make it\neasier to find the model you're looking for, especially as we continue to add more models to the platform.\n\n![Model Search Bar](https://storage.googleapis.com/vellum-public/help-docs/model-search-bar.png)\n\n---\n\n## Single Editor Mode\n*January 25th, 2024*\n\nWe've collaborated with our friends at [velt.dev](https://velt.dev/) to deliver an all new \"Single Editor Mode\" in\nPrompt and Workflow Sandboxes. With this, only one person can edit a Prompt/Workflow at a time and you can hand off\nediting control to another collaborator. This is useful for avoiding conflicts when multiple people are\ntrying to edit the same Prompt/Workflow at the same time. Check out the video below to see it in action!\n\n<iframe src=\"https://www.loom.com/embed/d9f1d01fe6464d0d8fca17bc901f08f1\"\n  width=\"100%\"\n  height=\"450px\"\n></iframe>\n\n---\n\n## API to Execute Workflow w/o Streaming\n*January 23rd, 2024*\n\nWe've added a new API endpoint for executing a Workflow Deployment without streaming back its incremental results. This is useful\nwhen you want to execute a Workflow and only care about its final result or if you're invoking your Workflow\nvia a service that doesn't support HTTP Streaming like Zapier.\n\n---\n\n## Workflow Deployment Execution Visualization Improvements\n*January 22nd, 2024*\n\nNow, when visiting the details page for a Workflow Deployment Execution, you'll find an improved loading state as well\nas a simplified view for Conditional Nodes.\n\n---\n\n## Upload/Download of Function Definitions\n*January 18th, 2024*\n\nYou can now easily import your existing function definition files (JSON or YAML) into Vellum function calling blocks\nas well as export functions you've already defined in Vellum to pass along to engineers for implementation. Check it\nout below!\n\n<iframe src=\"https://www.loom.com/embed/f70e5c1999e14433bfcd601b927638d4\"\n  width=\"100%\"\n  height=\"450px\"\n></iframe>\n\n---\n\n## Image Support for OpenAI Vision Models\n*January 18th, 2024*\n\nVellum now has API support for interacting with OpenAI's vision models, such as `gpt-4-vision-preview`.\nYou can learn more about OpenAI Vision models [here](https://platform.openai.com/docs/guides/vision). Note that there is\nlimited support for images in the Vellum UI at this time, but you can still use the API to interact with OpenAI Vision models.\nUI support coming soon!\n\nHere's a quick example on how to send an image to the model, using our python sdk:\n\n```python\nimage_link = \"https://storage.googleapis.com/vellum-public/help-docs/add_prompt_block_button.png\"\nresponse = client.execute_prompt(\n    prompt_deployment_name=\"github-loom-demo\",\n    inputs=[\n        PromptDeploymentInputRequest_ChatHistory(\n            name=\"$chat_history\",\n            value=[\n                ChatMessageRequest(\n                    role=ChatMessageRole.USER,\n                    content={\n                        \"type\": \"ARRAY\",\n                        \"value\": [\n                            {\"type\": \"STRING\", \"value\": \"What's in this image?\"},\n                            {\"type\": \"IMAGE\", \"value\": {\"src\": image_link}},\n                        ],\n                    },\n                )\n            ],\n            type=VellumVariableType.CHAT_HISTORY,\n        ),\n    ],\n)\nprint(response.outputs[0].value)\n```\n\n---\n\n## Folders\n*January 12th, 2024*\n\nYou can now organize entities in Vellum via folders! You can nest folders, share them by url, and move entities between folders.\n\n<iframe src=\"https://www.loom.com/embed/bb9c72caee8b413685be766cfc37d7a2\"\n  width=\"100%\"\n  height=\"450px\"\n></iframe>\n\n\n---\n\n## Support for Google Gemini Safety Settings\n*January 12th, 2024*\n\nThere is now native support for setting the `safetySetting` parameters in Google Gemini prompts. You can learn more\nabout how these parameters are used by Google in their docs [here](https://ai.google.dev/api/rest/v1beta/SafetySetting).\n\n![Gemini Custom Parameters](https://storage.googleapis.com/vellum-public/help-docs/gemini-custom-params.png)\n\n---\n\n## Support for OpenAI JSON Mode, User ID, and Seed Params\n*January 11th, 2024*\n\nThere is now native support for setting the `user` and `seed` parameters in OpenAI API requests, as well as specifying\nthat the response format be of type JSON. You can learn more about how these parameters are used by OpenAI in\ntheir docs [here](https://platform.openai.com/docs/api-reference/chat/create).\n\n![OpenAI Custom Parameters](https://storage.googleapis.com/vellum-public/help-docs/open-ai-custom-params.png)\n\n---\n\n## Cloning Workflow Scenarios\n*January 9th, 2024*\n\nYou can now clone a Workflow Scenario to create a new Scenario based on an existing one. This is useful when you want to\ncreate a new Scenario that is similar to an existing one, but with some changes.\n\n![Clone Workflow Scenario](https://storage.googleapis.com/vellum-public/help-docs/clone-workflow-scenario.png)\n\n---\n\n## API Key Metadata\n*January 9th, 2024*\n\nNow you can add and view metadata for your Vellum API keys. For example, you can see when an API key was created and by whom.\nYou can also assign a label to an API key to help you keep track of its purpose and an environment tag so that you know\nwhere it's used.\n\n![API Key Metadata](https://storage.googleapis.com/vellum-public/help-docs/api-key-metadata.png)\n\n---\n\n## Top-Level Workflow Execution Actions\n*January 4th, 2024*\n\nYou can now find the following actions at the top-level of the Workflow and Prompt Deployment Execution pages:\n- **Save as Scenario:** Useful for saving an edge case seen in production as a Scenario for qualitative eval.\n- **Save as Test Case:** Useful for saving an edge case seen in production to your bank of Test Cases for quantitative eval.\n- **View Details:** Drill in to see specifics about that specific Execution.\n\n![Top-Level Workflow Execution Actions](https://storage.googleapis.com/vellum-public/help-docs/top-level-workflow-execution-actions.png)\n\n---\n\n## Improved Error Messages in Code & API Nodes\n*January 2nd, 2024*\n\nAPI Nodes and Code Nodes within Workflows now have improved error messages. When an error occurs, the error message\nwill now include the line number and column number where the error occurred. This will make it easier to debug errors\nin your Workflows.\n\n![Improved Error Messages in Code & API Nodes](https://storage.googleapis.com/vellum-public/help-docs/workflow-api-node-code-node-error-messages.png)\n"
      }
    },
    "search": {
      "type": "singleAlgoliaIndex",
      "value": {
        "type": "unversioned",
        "indexSegment": {
          "id": "seg_vellum.docs.buildwithfern.com_05ae45d7-5a5c-499f-a396-6efd6e2cdd27",
          "searchApiKey": "NGYxM2Q1MTRlOTExMzM3OWNlNTUzMGEyNWYwMzc3YTQzYjBhMWFmMGE4Y2FmNTNjOTI5MzhhMGI4ZGNlNGRiYmZpbHRlcnM9aW5kZXhTZWdtZW50SWQlM0FzZWdfdmVsbHVtLmRvY3MuYnVpbGR3aXRoZmVybi5jb21fMDVhZTQ1ZDctNWE1Yy00OTlmLWEzOTYtNmVmZDZlMmNkZDI3JnZhbGlkVW50aWw9MTczMDc3NzE5MA=="
        }
      }
    },
    "id": "docs_definition_0b6c6da6-bdd2-4a1e-94f2-db464af76171"
  },
  "lightModeEnabled": true
}
