{
  "baseUrl": {
    "domain": "credal.docs.buildwithfern.com"
  },
  "definition": {
    "config": {
      "navigation": {
        "items": [
          {
            "type": "section",
            "title": "Getting Started",
            "urlSlug": "getting-started",
            "collapsed": false,
            "hidden": false,
            "items": [
              {
                "type": "page",
                "id": "docs/pages/guides/overview.mdx",
                "title": "Overview",
                "urlSlug": "overview",
                "hidden": false
              },
              {
                "type": "section",
                "title": "Copilots",
                "urlSlug": "copilots",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/guides/copilots/quick-start.mdx",
                    "title": "Quick Start",
                    "urlSlug": "quick-start",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/guides/copilots/in-depth-guide.mdx",
                    "title": "In-Depth Guide",
                    "urlSlug": "in-depth-guide",
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "page",
                "id": "docs/pages/guides/bulk-analysis.mdx",
                "title": "Bulk Analysis",
                "urlSlug": "bulk-analysis",
                "hidden": false
              },
              {
                "type": "page",
                "id": "docs/pages/guides/permissions-service.mdx",
                "title": "Permissions Service",
                "urlSlug": "permissions-service",
                "hidden": false
              },
              {
                "type": "page",
                "id": "docs/pages/guides/oauth.mdx",
                "title": "OAuth",
                "urlSlug": "o-auth",
                "hidden": false
              },
              {
                "type": "page",
                "id": "docs/pages/guides/prompting.mdx",
                "title": "Prompting",
                "urlSlug": "prompting",
                "hidden": false
              }
            ],
            "skipUrlSlug": false
          },
          {
            "type": "apiV2",
            "node": {
              "id": "12db1278-2c20-48ce-a475-512268587c8b",
              "type": "apiReference",
              "title": "API Reference",
              "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
              "paginated": false,
              "slug": "api-reference",
              "hideTitle": false,
              "showErrors": false,
              "children": [
                {
                  "id": "12db1278-2c20-48ce-a475-512268587c8b:subpackage_copilots",
                  "type": "apiPackage",
                  "children": [
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_copilots.createCopilot",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_copilots.createCopilot",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "availability": "beta",
                      "isResponseStream": false,
                      "title": "Create Copilot",
                      "slug": "api-reference/copilots/create-copilot"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_copilots.createConversation",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_copilots.createConversation",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "isResponseStream": false,
                      "title": "Create Conversation",
                      "slug": "api-reference/copilots/create-conversation"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_copilots.provideMessageFeedback",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_copilots.provideMessageFeedback",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "isResponseStream": false,
                      "title": "Provide Message Feedback",
                      "slug": "api-reference/copilots/provide-message-feedback"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_copilots.sendMessage",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_copilots.sendMessage",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "isResponseStream": false,
                      "title": "Send Message",
                      "slug": "api-reference/copilots/send-message"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_copilots.streamMessage",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_copilots.streamMessage",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "availability": "beta",
                      "isResponseStream": true,
                      "title": "Stream Message",
                      "slug": "api-reference/copilots/stream-message"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_copilots.addCollectionToCopilot",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_copilots.addCollectionToCopilot",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "availability": "beta",
                      "isResponseStream": false,
                      "title": "Add Collection To Copilot",
                      "slug": "api-reference/copilots/add-collection-to-copilot"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_copilots.removeCollectionFromCopilot",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_copilots.removeCollectionFromCopilot",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "availability": "beta",
                      "isResponseStream": false,
                      "title": "Remove Collection From Copilot",
                      "slug": "api-reference/copilots/remove-collection-from-copilot"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_copilots.updateConfiguration",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_copilots.updateConfiguration",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "availability": "beta",
                      "isResponseStream": false,
                      "title": "Update Configuration",
                      "slug": "api-reference/copilots/update-configuration"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_copilots.deleteCopilot",
                      "type": "endpoint",
                      "method": "DELETE",
                      "endpointId": "endpoint_copilots.deleteCopilot",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "availability": "beta",
                      "isResponseStream": false,
                      "title": "Delete Copilot",
                      "slug": "api-reference/copilots/delete-copilot"
                    }
                  ],
                  "title": "Copilots",
                  "slug": "api-reference/copilots",
                  "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                  "pointsTo": "api-reference/copilots/create-copilot"
                },
                {
                  "id": "12db1278-2c20-48ce-a475-512268587c8b:subpackage_documentCatalog",
                  "type": "apiPackage",
                  "children": [
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_documentCatalog.uploadDocumentContents",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_documentCatalog.uploadDocumentContents",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "isResponseStream": false,
                      "title": "Upload Document Contents",
                      "slug": "api-reference/document-catalog/upload-document-contents"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_documentCatalog.metadata",
                      "type": "endpoint",
                      "method": "PATCH",
                      "endpointId": "endpoint_documentCatalog.metadata",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "isResponseStream": false,
                      "title": "Metadata",
                      "slug": "api-reference/document-catalog/metadata"
                    }
                  ],
                  "title": "Document Catalog",
                  "slug": "api-reference/document-catalog",
                  "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                  "pointsTo": "api-reference/document-catalog/upload-document-contents"
                },
                {
                  "id": "12db1278-2c20-48ce-a475-512268587c8b:subpackage_documentCollections",
                  "type": "apiPackage",
                  "children": [
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_documentCollections.addDocumentsToCollection",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_documentCollections.addDocumentsToCollection",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "isResponseStream": false,
                      "title": "Add Documents To Collection",
                      "slug": "api-reference/document-collections/add-documents-to-collection"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_documentCollections.removeDocumentsFromCollection",
                      "type": "endpoint",
                      "method": "DELETE",
                      "endpointId": "endpoint_documentCollections.removeDocumentsFromCollection",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "availability": "beta",
                      "isResponseStream": false,
                      "title": "Remove Documents From Collection",
                      "slug": "api-reference/document-collections/remove-documents-from-collection"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_documentCollections.createCollection",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_documentCollections.createCollection",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "availability": "beta",
                      "isResponseStream": false,
                      "title": "Create Collection",
                      "slug": "api-reference/document-collections/create-collection"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_documentCollections.deleteCollection",
                      "type": "endpoint",
                      "method": "DELETE",
                      "endpointId": "endpoint_documentCollections.deleteCollection",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "availability": "beta",
                      "isResponseStream": false,
                      "title": "Delete Collection",
                      "slug": "api-reference/document-collections/delete-collection"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_documentCollections.createMongoCollectionSync",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_documentCollections.createMongoCollectionSync",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "availability": "beta",
                      "isResponseStream": false,
                      "title": "Create Mongo Collection Sync",
                      "slug": "api-reference/document-collections/create-mongo-collection-sync"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_documentCollections.updateMongoCollectionSync",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_documentCollections.updateMongoCollectionSync",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "availability": "beta",
                      "isResponseStream": false,
                      "title": "Update Mongo Collection Sync",
                      "slug": "api-reference/document-collections/update-mongo-collection-sync"
                    }
                  ],
                  "title": "Document Collections",
                  "slug": "api-reference/document-collections",
                  "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                  "pointsTo": "api-reference/document-collections/add-documents-to-collection"
                },
                {
                  "id": "12db1278-2c20-48ce-a475-512268587c8b:subpackage_permissionsService",
                  "type": "apiPackage",
                  "children": [
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_permissionsService.checkResourceAuthorizationForUser",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_permissionsService.checkResourceAuthorizationForUser",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "availability": "beta",
                      "isResponseStream": false,
                      "title": "Check Resource Authorization For User",
                      "slug": "api-reference/permissions-service/check-resource-authorization-for-user"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_permissionsService.checkBulkResourcesAuthorizationForUser",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_permissionsService.checkBulkResourcesAuthorizationForUser",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "availability": "beta",
                      "isResponseStream": false,
                      "title": "Check Bulk Resources Authorization For User",
                      "slug": "api-reference/permissions-service/check-bulk-resources-authorization-for-user"
                    },
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_permissionsService.listCachedAuthorizedResourcesForUser",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_permissionsService.listCachedAuthorizedResourcesForUser",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "availability": "beta",
                      "isResponseStream": false,
                      "title": "List Cached Authorized Resources For User",
                      "slug": "api-reference/permissions-service/list-cached-authorized-resources-for-user"
                    }
                  ],
                  "title": "Permissions Service",
                  "slug": "api-reference/permissions-service",
                  "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                  "pointsTo": "api-reference/permissions-service/check-resource-authorization-for-user"
                },
                {
                  "id": "12db1278-2c20-48ce-a475-512268587c8b:subpackage_search",
                  "type": "apiPackage",
                  "children": [
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_search.searchDocumentCollection",
                      "type": "endpoint",
                      "method": "POST",
                      "endpointId": "endpoint_search.searchDocumentCollection",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "isResponseStream": false,
                      "title": "Search Document Collection",
                      "slug": "api-reference/search/search-document-collection"
                    }
                  ],
                  "title": "Search",
                  "slug": "api-reference/search",
                  "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                  "pointsTo": "api-reference/search/search-document-collection"
                },
                {
                  "id": "12db1278-2c20-48ce-a475-512268587c8b:subpackage_users",
                  "type": "apiPackage",
                  "children": [
                    {
                      "id": "12db1278-2c20-48ce-a475-512268587c8b:endpoint_users.metadata",
                      "type": "endpoint",
                      "method": "PATCH",
                      "endpointId": "endpoint_users.metadata",
                      "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                      "isResponseStream": false,
                      "title": "Metadata",
                      "slug": "api-reference/users/metadata"
                    }
                  ],
                  "title": "Users",
                  "slug": "api-reference/users",
                  "apiDefinitionId": "12db1278-2c20-48ce-a475-512268587c8b",
                  "pointsTo": "api-reference/users/metadata"
                }
              ],
              "pointsTo": "api-reference/copilots/create-copilot"
            }
          }
        ]
      },
      "logoHeight": 30,
      "logoHref": "https://credal.ai/",
      "colorsV3": {
        "type": "darkAndLight",
        "light": {
          "accentPrimary": {
            "r": 88,
            "g": 73,
            "b": 236,
            "a": 1
          },
          "logo": "cda907c3-4ffc-4e9b-8223-7ea9d6e81289",
          "background": {
            "type": "gradient"
          }
        },
        "dark": {
          "accentPrimary": {
            "r": 88,
            "g": 73,
            "b": 236,
            "a": 1
          },
          "logo": "7c31d8ac-c064-48a3-99b0-9cee624ab752",
          "background": {
            "type": "gradient"
          }
        }
      },
      "navbarLinks": [
        {
          "type": "secondary",
          "text": "Contact us",
          "url": "mailto:support@credal.ai"
        },
        {
          "type": "primary",
          "text": "Start using Credal",
          "url": "https://app.credal.ai/signin"
        }
      ],
      "title": "Credal | Documentation",
      "favicon": "f0ee8f70-d5ad-4e1a-a78c-a05a0a6cf87d",
      "js": {
        "files": []
      }
    },
    "apis": {
      "12db1278-2c20-48ce-a475-512268587c8b": {
        "id": "12db1278-2c20-48ce-a475-512268587c8b",
        "rootPackage": {
          "endpoints": [],
          "subpackages": [
            "subpackage_common",
            "subpackage_copilots",
            "subpackage_documentCatalog",
            "subpackage_documentCollections",
            "subpackage_permissionsService",
            "subpackage_search",
            "subpackage_users"
          ],
          "types": [],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_common:ResourceIdentifier": {
            "name": "ResourceIdentifier",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "external-resource-id",
                  "additionalProperties": {
                    "extends": ["type_common:ExternalResourceId"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "url",
                  "additionalProperties": {
                    "extends": ["type_common:Url"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_common:ExternalResourceId": {
            "name": "ExternalResourceId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "externalResourceId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "resourceType",
                  "valueType": {
                    "type": "id",
                    "value": "type_common:ResourceType"
                  }
                }
              ]
            }
          },
          "type_common:Url": {
            "name": "Url",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_common:ResourceType": {
            "name": "ResourceType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "GOOGLE_DRIVE_ITEM"
                },
                {
                  "value": "MICROSOFT_DRIVE_ITEM"
                },
                {
                  "value": "ZENDESK_TICKET"
                },
                {
                  "value": "ZENDESK_ARTICLE"
                },
                {
                  "value": "ZENDESK_GROUP"
                },
                {
                  "value": "ZENDESK_ARTICLE_SECTION"
                },
                {
                  "value": "ZENDESK_ARTICLE_CATEGORY"
                },
                {
                  "value": "CONFLUENCE_PAGE"
                },
                {
                  "value": "CONFLUENCE_SPACE"
                },
                {
                  "value": "JIRA_TICKET"
                },
                {
                  "value": "JIRA_PROJECT"
                },
                {
                  "value": "SALESFORCE_TASK"
                },
                {
                  "value": "BOX_FILE"
                },
                {
                  "value": "BOX_FOLDER"
                },
                {
                  "value": "NOTION_PAGE"
                },
                {
                  "value": "NOTION_DATABASE"
                },
                {
                  "value": "SLACK_CHANNEL"
                },
                {
                  "value": "MONGO_COLLECTION_SYNC"
                },
                {
                  "value": "UNKNOWN"
                }
              ]
            }
          },
          "type_common:Collaborator": {
            "name": "Collaborator",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "email",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "role",
                  "valueType": {
                    "type": "id",
                    "value": "type_common:Role"
                  }
                }
              ]
            }
          },
          "type_common:Role": {
            "name": "Role",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "viewer"
                },
                {
                  "value": "editor"
                }
              ]
            }
          },
          "type_common:Operator": {
            "name": "Operator",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "<"
                },
                {
                  "value": ">"
                },
                {
                  "value": "<="
                },
                {
                  "value": ">="
                },
                {
                  "value": "!="
                },
                {
                  "value": "=="
                },
                {
                  "value": "contains"
                }
              ]
            }
          },
          "type_copilots:CreateConversationResponse": {
            "name": "CreateConversationResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "conversationId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:SendAgentMessageResponse": {
            "name": "SendAgentMessageResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "sendChatResult",
                  "valueType": {
                    "type": "id",
                    "value": "type_copilots:SendMessageResponse"
                  }
                }
              ]
            }
          },
          "type_copilots:SendMessageResponse": {
            "name": "SendMessageResponse",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "description": "Returned when there is a reply\nfetched from the copilot.\n",
                  "discriminantValue": "ai_response_result",
                  "additionalProperties": {
                    "extends": ["type_copilots:MessageReply"],
                    "properties": []
                  }
                },
                {
                  "description": "Returned when Credal detects possible\ninfosec violations and blocks the message.\n",
                  "discriminantValue": "blocked_result",
                  "additionalProperties": {
                    "extends": ["type_copilots:MessageBlocked"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_copilots:InputVariable": {
            "name": "InputVariable",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "urls",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:MessageReply": {
            "name": "MessageReply",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "policy_triggers",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_copilots:PolicyTrigger"
                    }
                  }
                },
                {
                  "key": "conversationId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                },
                {
                  "key": "response",
                  "valueType": {
                    "type": "id",
                    "value": "type_copilots:ResponseChunk"
                  }
                },
                {
                  "key": "warnings",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "inserted_audit_log",
                  "valueType": {
                    "type": "id",
                    "value": "type_copilots:InsertedAuditLog"
                  }
                },
                {
                  "key": "referencedSources",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_copilots:ReferencedSource"
                    }
                  }
                },
                {
                  "key": "sourcesInDataContext",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_copilots:ReferencedSource"
                    }
                  }
                },
                {
                  "key": "webSearchResults",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_copilots:WebSearchResult"
                    }
                  }
                },
                {
                  "key": "messageId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:ReferencedSource": {
            "name": "ReferencedSource",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "externalResourceId",
                  "valueType": {
                    "type": "id",
                    "value": "type_common:ExternalResourceId"
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:WebSearchResult": {
            "name": "WebSearchResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "title",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "content",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:ResponseChunk": {
            "name": "ResponseChunk",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "dataChunk",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:InsertedAuditLog": {
            "name": "InsertedAuditLog",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:MessageBlocked": {
            "name": "MessageBlocked",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "policy_triggers",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_copilots:PolicyTrigger"
                    }
                  }
                },
                {
                  "key": "conversationId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                },
                {
                  "key": "blocks",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "warnings",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "inserted_audit_log",
                  "valueType": {
                    "type": "id",
                    "value": "type_copilots:InsertedAuditLog"
                  }
                }
              ]
            }
          },
          "type_copilots:PolicyTrigger": {
            "name": "PolicyTrigger",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "description",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:FeedbackEnum": {
            "name": "FeedbackEnum",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "POSITIVE"
                },
                {
                  "value": "NEGATIVE"
                }
              ]
            }
          },
          "type_copilots:MessageFeedback": {
            "name": "MessageFeedback",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "feedback",
                  "valueType": {
                    "type": "id",
                    "value": "type_copilots:FeedbackEnum"
                  }
                },
                {
                  "key": "suggestedAnswer",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:Configuration": {
            "name": "Configuration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "aiEndpointConfiguration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_copilots:AIEndpointConfiguration"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "prompt",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:AIEndpointConfiguration": {
            "name": "AIEndpointConfiguration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "baseUrl",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "apiKey",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:CreateCopilotResponse": {
            "name": "CreateCopilotResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "agentId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:DeleteCopilotResponse": {
            "name": "DeleteCopilotResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "copilotId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:StringFieldSchema": {
            "name": "StringFieldSchema",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "field",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "operator",
                  "valueType": {
                    "type": "id",
                    "value": "type_common:Operator"
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:NumberFieldSchema": {
            "name": "NumberFieldSchema",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "field",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "operator",
                  "valueType": {
                    "type": "id",
                    "value": "type_common:Operator"
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:BooleanFieldSchema": {
            "name": "BooleanFieldSchema",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "field",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "operator",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "stringLiteral",
                      "value": "=="
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:DatetimeFieldSchema": {
            "name": "DatetimeFieldSchema",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "field",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "operator",
                  "valueType": {
                    "type": "id",
                    "value": "type_common:Operator"
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "date"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:Filter": {
            "name": "Filter",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "fieldType",
              "variants": [
                {
                  "discriminantValue": "string",
                  "additionalProperties": {
                    "extends": ["type_copilots:StringFieldSchema"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "number",
                  "additionalProperties": {
                    "extends": ["type_copilots:NumberFieldSchema"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "boolean",
                  "additionalProperties": {
                    "extends": ["type_copilots:BooleanFieldSchema"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "datetime",
                  "additionalProperties": {
                    "extends": ["type_copilots:DatetimeFieldSchema"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_copilots:CollectionFilteredData": {
            "name": "CollectionFilteredData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "collectionId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                },
                {
                  "key": "filteredDataIds",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "uuid"
                      }
                    }
                  }
                },
                {
                  "key": "filters",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_copilots:Filter"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:DataFilter": {
            "name": "DataFilter",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "semanticSearchTerms",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "webSearchResults",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "filteredDataSourcesPerCollection",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_copilots:CollectionFilteredData"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:InitialChunk": {
            "name": "InitialChunk",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "conversationId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "warnings",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "webSearchResults",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_copilots:WebSearchResult"
                    }
                  }
                },
                {
                  "key": "dataFilters",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_copilots:DataFilter"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:DataChunk": {
            "name": "DataChunk",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "chunk",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:FinalChunk": {
            "name": "FinalChunk",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "referencedSources",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_copilots:ReferencedSource"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:BlockedChunk": {
            "name": "BlockedChunk",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "conversationId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                },
                {
                  "key": "warnings",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "blocks",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "policyTriggers",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_copilots:PolicyTrigger"
                    }
                  }
                }
              ]
            }
          },
          "type_copilots:StreamingChunk": {
            "name": "StreamingChunk",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_copilots:InitialChunk"
                  },
                  "displayName": "Initial Chunk"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_copilots:DataChunk"
                  },
                  "displayName": "Data Chunk"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_copilots:FinalChunk"
                  },
                  "displayName": "Final Chunk"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_copilots:BlockedChunk"
                  },
                  "displayName": "Blocked Chunk"
                }
              ]
            }
          },
          "type_documentCatalog:UploadDocumentResponse": {
            "name": "UploadDocumentResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "documentId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                }
              ]
            }
          },
          "type_documentCatalog:DocumentMetadataPatch": {
            "name": "DocumentMetadataPatch",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The identifier for the resource you want to patch",
                  "key": "resourceIdentifier",
                  "valueType": {
                    "type": "id",
                    "value": "type_common:ResourceIdentifier"
                  }
                },
                {
                  "description": "Key-value object of metadata for document. Keys will be merged with any existing values but can also be set to `null` to effectively remove",
                  "key": "metadata",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          },
          "type_documentCatalog:DocumentMetadataPatchRequest": {
            "name": "DocumentMetadataPatchRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "sources",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_documentCatalog:DocumentMetadataPatch"
                    }
                  }
                },
                {
                  "key": "uploadAsUserEmail",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_documentCollections:CreateCollectionResponse": {
            "name": "CreateCollectionResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "collectionId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                }
              ]
            }
          },
          "type_documentCollections:DeleteCollectionResponse": {
            "name": "DeleteCollectionResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "collectionId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                }
              ]
            }
          },
          "type_documentCollections:MongoSourceFieldsConfig": {
            "name": "MongoSourceFieldsConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "body",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "sourceName",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "sourceSystemUpdated",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "sourceUrl",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_documentCollections:MongoCollectionSyncConfig": {
            "name": "MongoCollectionSyncConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "syncName",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "collectionName",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "filterExpression",
                  "valueType": {
                    "type": "unknown"
                  }
                },
                {
                  "key": "sourceFields",
                  "valueType": {
                    "type": "id",
                    "value": "type_documentCollections:MongoSourceFieldsConfig"
                  }
                }
              ]
            }
          },
          "type_documentCollections:MongoCollectionSyncResponse": {
            "name": "MongoCollectionSyncResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "mongoCredentialId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                },
                {
                  "key": "resourceId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "syncLaunched",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_permissionsService:Group": {
            "name": "Group",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_permissionsService:User": {
            "name": "User",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "email",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_permissionsService:Principal": {
            "name": "Principal",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "group",
                  "additionalProperties": {
                    "extends": ["type_permissionsService:Group"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "user",
                  "additionalProperties": {
                    "extends": ["type_permissionsService:User"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_permissionsService:AuthorizedResource": {
            "name": "AuthorizedResource",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "credalId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                },
                {
                  "key": "externalId",
                  "valueType": {
                    "type": "id",
                    "value": "type_common:ExternalResourceId"
                  }
                }
              ]
            }
          },
          "type_permissionsService:AuthorizedResourceListPage": {
            "name": "AuthorizedResourceListPage",
            "shape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_permissionsService:AuthorizedResource"
                }
              }
            }
          },
          "type_permissionsService:PrincipalListPage": {
            "name": "PrincipalListPage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "principals",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_permissionsService:Principal"
                    }
                  }
                },
                {
                  "key": "nextPageToken",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_permissionsService:CheckResourceAuthorizationResponse": {
            "name": "CheckResourceAuthorizationResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "authorized",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_permissionsService:ResourceAuthorizationResult": {
            "name": "ResourceAuthorizationResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "externalResourceId",
                  "valueType": {
                    "type": "id",
                    "value": "type_common:ExternalResourceId"
                  }
                },
                {
                  "key": "inputUrl",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "authorized",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_permissionsService:CheckBulkResourcesAuthorizationResponse": {
            "name": "CheckBulkResourcesAuthorizationResponse",
            "shape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_permissionsService:ResourceAuthorizationResult"
                }
              }
            }
          },
          "type_permissionsService:Action": {
            "name": "Action",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "READ"
                }
              ]
            }
          },
          "type_search:DocumentCollectionSearchOptions": {
            "name": "DocumentCollectionSearchOptions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The maximum number of chunks to return. Defaults to 10.",
                  "key": "maxChunks",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to merge the chunks for a document and just return one result per document. Defaults to false.",
                  "key": "mergeContents",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "The similarity threshold between 0 and 1 for the search results. A higher number leads to fewer but more relevant results.\nDefaults to 0.45.",
                  "key": "threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to automatically filter the search results based on the user query and available metadata on the collection. Defaults to false.",
                  "key": "enableSmartFiltering",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "/ Whether to extract search terms from the user query and use them for semantic search. Defaults to false.",
                  "key": "enableQueryExtraction",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to rerank the search results after the initial semantic search query. Defaults to false.",
                  "key": "enableReranking",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_search:SearchDocumentCollectionResponse": {
            "name": "SearchDocumentCollectionResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "searchTermsUsed",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "structuredFiltersApplied",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_search:SingleFieldFilter"
                    }
                  }
                },
                {
                  "key": "searchId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_search:DocumentCollectionSearchResult"
                    }
                  }
                }
              ]
            }
          },
          "type_search:DocumentCollectionSearchResult": {
            "name": "DocumentCollectionSearchResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "documentId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                },
                {
                  "key": "documentName",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "documentMetadata",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "chunks",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_search:SearchResultChunk"
                    }
                  }
                },
                {
                  "key": "mergedContents",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_search:SearchResultChunk": {
            "name": "SearchResultChunk",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "chunkId",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "uuid"
                    }
                  }
                },
                {
                  "key": "chunkIndex",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The similarity score between 0 and 1 for the search result. A higher number means the chunk is more relevant to the search query.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_search:SingleFieldFilter": {
            "name": "SingleFieldFilter",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "field",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "operator",
                  "valueType": {
                    "type": "id",
                    "value": "type_common:Operator"
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_users:UserMetadataPatch": {
            "name": "UserMetadataPatch",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "userEmail",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Key-value object of metadata for user. Keys will be merged with any existing values but can also be set to `null` to effectively remove",
                  "key": "metadata",
                  "valueType": {
                    "type": "unknown"
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_common": {
            "subpackageId": "subpackage_common",
            "name": "common",
            "endpoints": [],
            "types": [
              "type_common:ResourceIdentifier",
              "type_common:ExternalResourceId",
              "type_common:Url",
              "type_common:ResourceType",
              "type_common:Collaborator",
              "type_common:Role",
              "type_common:Operator"
            ],
            "subpackages": [],
            "urlSlug": "common",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_copilots": {
            "subpackageId": "subpackage_copilots",
            "name": "copilots",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "create-copilot",
                "method": "POST",
                "id": "createCopilot",
                "originalEndpointId": "endpoint_copilots.createCopilot",
                "name": "Create Copilot",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/copilots"
                    },
                    {
                      "type": "literal",
                      "value": "/createCopilot"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "A descriptive name for the copilot.\n",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "An in depth name for the copilot's function. Useful for routing requests to the right copilot.\n",
                        "key": "description",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "A list of collaborator emails and roles that will have access to the copilot.\n",
                        "key": "collaborators",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "id",
                            "value": "type_common:Collaborator"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_copilots:CreateCopilotResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/copilots/createCopilot",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "name": "Customer Copilot",
                      "description": "This copilot is used to answer customer requests based on internal documentation.",
                      "collaborators": [
                        {
                          "email": "test@gmail.com",
                          "role": "editor"
                        }
                      ]
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "agentId": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\n\nfrom credal import Collaborator\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.create_copilot(\n        name=\"Customer Copilot\",\n        description=\"This copilot is used to answer customer requests based on internal documentation.\",\n        collaborators=[\n            Collaborator(\n                email=\"test@gmail.com\",\n                role=\"editor\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from credal import Collaborator\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.create_copilot(\n    name=\"Customer Copilot\",\n    description=\"This copilot is used to answer customer requests based on internal documentation.\",\n    collaborators=[\n        Collaborator(\n            email=\"test@gmail.com\",\n            role=\"editor\",\n        )\n    ],\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient, Credal } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.copilots.createCopilot({\n    name: \"Customer Copilot\",\n    description: \"This copilot is used to answer customer requests based on internal documentation.\",\n    collaborators: [{\n            email: \"test@gmail.com\",\n            role: Credal.Role.Editor\n        }]\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "Customer Copilot",
                        "description": "This copilot is used to answer customer requests based on internal documentation.",
                        "collaborators": [
                          {
                            "email": "test@gmail.com",
                            "role": "editor"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "agentId": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a new copilot. The API key used will be added to the copilot for future Requests",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "create-conversation",
                "method": "POST",
                "id": "createConversation",
                "originalEndpointId": "endpoint_copilots.createConversation",
                "name": "Create Conversation",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/copilots"
                    },
                    {
                      "type": "literal",
                      "value": "/createConversation"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Credal-generated Copilot ID to specify which agent to route the request to.\n",
                        "key": "agentId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      },
                      {
                        "description": "End-user for the conversation.\n",
                        "key": "userEmail",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_copilots:CreateConversationResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/copilots/createConversation",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "agentId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                      "userEmail": "ravin@credal.ai"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "conversationId": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.create_conversation(\n        agent_id=uuid.UUID(\n            \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n        ),\n        user_email=\"ravin@credal.ai\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.create_conversation(\n    agent_id=uuid.UUID(\n        \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    ),\n    user_email=\"ravin@credal.ai\",\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.copilots.createConversation({\n    agentId: \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    userEmail: \"ravin@credal.ai\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "agentId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                        "userEmail": "ravin@credal.ai"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "conversationId": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "OPTIONAL. Create a new conversation with the Copilot. The conversation ID can be used in the `sendMessage` endpoint. The `sendMessage` endpoint automatically creates new conversations upon first request, but calling this endpoint can simplify certain use cases where it is helpful for the application to have the conversation ID before the first message is sent.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "provide-message-feedback",
                "method": "POST",
                "id": "provideMessageFeedback",
                "originalEndpointId": "endpoint_copilots.provideMessageFeedback",
                "name": "Provide Message Feedback",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/copilots"
                    },
                    {
                      "type": "literal",
                      "value": "/provideMessageFeedback"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Credal-generated Copilot ID to specify which agent to route the request to.\n",
                        "key": "agentId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      },
                      {
                        "description": "The user profile you want to use when providing feedback.\n",
                        "key": "userEmail",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The message ID for which feedback is being provided.\n",
                        "key": "messageId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      },
                      {
                        "description": "The feedback provided by the user.\n",
                        "key": "messageFeedback",
                        "valueType": {
                          "type": "id",
                          "value": "type_copilots:MessageFeedback"
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/copilots/provideMessageFeedback",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "userEmail": "ravin@credal.ai",
                      "messageId": "dd721cd8-4bf2-4b94-9869-258df3dab9dc",
                      "agentId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                      "messageFeedback": {
                        "feedback": "NEGATIVE",
                        "suggestedAnswer": "Yes, Credal is SOC 2 compliant."
                      }
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal import MessageFeedback\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.provide_message_feedback(\n        user_email=\"ravin@credal.ai\",\n        message_id=uuid.UUID(\n            \"dd721cd8-4bf2-4b94-9869-258df3dab9dc\",\n        ),\n        agent_id=uuid.UUID(\n            \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n        ),\n        message_feedback=MessageFeedback(\n            feedback=\"NEGATIVE\",\n            suggested_answer=\"Yes, Credal is SOC 2 compliant.\",\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal import MessageFeedback\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.provide_message_feedback(\n    user_email=\"ravin@credal.ai\",\n    message_id=uuid.UUID(\n        \"dd721cd8-4bf2-4b94-9869-258df3dab9dc\",\n    ),\n    agent_id=uuid.UUID(\n        \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    ),\n    message_feedback=MessageFeedback(\n        feedback=\"NEGATIVE\",\n        suggested_answer=\"Yes, Credal is SOC 2 compliant.\",\n    ),\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient, Credal } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.copilots.provideMessageFeedback({\n    userEmail: \"ravin@credal.ai\",\n    messageId: \"dd721cd8-4bf2-4b94-9869-258df3dab9dc\",\n    agentId: \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    messageFeedback: {\n        feedback: Credal.FeedbackEnum.Negative,\n        suggestedAnswer: \"Yes, Credal is SOC 2 compliant.\"\n    }\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "userEmail": "ravin@credal.ai",
                        "messageId": "dd721cd8-4bf2-4b94-9869-258df3dab9dc",
                        "agentId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                        "messageFeedback": {
                          "feedback": "NEGATIVE",
                          "suggestedAnswer": "Yes, Credal is SOC 2 compliant."
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "send-message",
                "method": "POST",
                "id": "sendMessage",
                "originalEndpointId": "endpoint_copilots.sendMessage",
                "name": "Send Message",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/copilots"
                    },
                    {
                      "type": "literal",
                      "value": "/sendMessage"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Credal-generated Copilot ID to specify which agent to route the request to.\n",
                        "key": "agentId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      },
                      {
                        "description": "The message you want to send to your copilot.\n",
                        "key": "message",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The user profile you want to use when sending the message.\n",
                        "key": "userEmail",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Credal-generated conversation ID for sending follow up messages. Conversation ID is returned after initial message. Optional, to be left off for first messages on new conversations.\n",
                        "key": "conversationId",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "uuid"
                            }
                          }
                        }
                      },
                      {
                        "description": "Optional input variables to be used in the message. Map the name of the variable to a list of urls.\n",
                        "key": "inputVariables",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "id",
                              "value": "type_copilots:InputVariable"
                            }
                          }
                        },
                        "availability": "Beta"
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_copilots:SendAgentMessageResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/copilots/sendMessage",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "agentId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                      "message": "Is Credal SOC 2 compliant?",
                      "userEmail": "ravin@credal.ai",
                      "inputVariables": [
                        {
                          "name": "input1",
                          "urls": ["https://drive.google.com/file/d/123456/view"]
                        },
                        {
                          "name": "input2",
                          "urls": [
                            "https://drive.google.com/file/d/123457/view",
                            "https://drive.google.com/file/d/123458/view"
                          ]
                        }
                      ]
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "sendChatResult": {
                        "type": "ai_response_result",
                        "conversationId": "fc938005-92db-411a-88eb-32ca50d5f744",
                        "policy_triggers": [],
                        "response": {
                          "message": "Based on the context provided, Credal is SOC 2 compliant...",
                          "dataChunk": "...SOC 2 is a technical audit that requires companies to establish and follow strict information security policies and procedures. Credal's SOC 2 report is available upon request..."
                        },
                        "warnings": [],
                        "inserted_audit_log": {
                          "id": "5842804e-ffbe-4f8d-873e-f007fff93440"
                        },
                        "referencedSources": [
                          {
                            "id": "1",
                            "externalResourceId": {
                              "externalResourceId": "123456",
                              "resourceType": "GOOGLE_DRIVE_ITEM"
                            },
                            "name": "Example Document",
                            "url": "https://drive.google.com/file/d/123456/view"
                          }
                        ],
                        "sourcesInDataContext": [
                          {
                            "id": "1",
                            "externalResourceId": {
                              "externalResourceId": "123456",
                              "resourceType": "GOOGLE_DRIVE_ITEM"
                            },
                            "name": "Example Document",
                            "url": "https://drive.google.com/file/d/123456/view"
                          },
                          {
                            "id": "2",
                            "externalResourceId": {
                              "externalResourceId": "123457",
                              "resourceType": "GOOGLE_DRIVE_ITEM"
                            },
                            "name": "Example Document 2",
                            "url": "https://drive.google.com/file/d/123457/view"
                          }
                        ],
                        "webSearchResults": [
                          {
                            "title": "SOC 2 Compliance",
                            "url": "https://www.credal.ai/soc2",
                            "content": "Credal is SOC 2 compliant. Learn more about SOC 2 compliance at Credal."
                          }
                        ],
                        "messageId": "dd721cd8-4bf2-4b94-9869-258df3dab9dc"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal import InputVariable\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.send_message(\n        agent_id=uuid.UUID(\n            \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n        ),\n        message=\"Is Credal SOC 2 compliant?\",\n        user_email=\"ravin@credal.ai\",\n        input_variables=[\n            InputVariable(\n                name=\"input1\",\n                urls=[\"https://drive.google.com/file/d/123456/view\"],\n            ),\n            InputVariable(\n                name=\"input2\",\n                urls=[\n                    \"https://drive.google.com/file/d/123457/view\",\n                    \"https://drive.google.com/file/d/123458/view\",\n                ],\n            ),\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal import InputVariable\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.send_message(\n    agent_id=uuid.UUID(\n        \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    ),\n    message=\"Is Credal SOC 2 compliant?\",\n    user_email=\"ravin@credal.ai\",\n    input_variables=[\n        InputVariable(\n            name=\"input1\",\n            urls=[\"https://drive.google.com/file/d/123456/view\"],\n        ),\n        InputVariable(\n            name=\"input2\",\n            urls=[\n                \"https://drive.google.com/file/d/123457/view\",\n                \"https://drive.google.com/file/d/123458/view\",\n            ],\n        ),\n    ],\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.copilots.sendMessage({\n    agentId: \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    message: \"Is Credal SOC 2 compliant?\",\n    userEmail: \"ravin@credal.ai\",\n    inputVariables: [{\n            name: \"input1\",\n            urls: [\"https://drive.google.com/file/d/123456/view\"]\n        }, {\n            name: \"input2\",\n            urls: [\"https://drive.google.com/file/d/123457/view\", \"https://drive.google.com/file/d/123458/view\"]\n        }]\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "agentId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                        "message": "Is Credal SOC 2 compliant?",
                        "userEmail": "ravin@credal.ai",
                        "inputVariables": [
                          {
                            "name": "input1",
                            "urls": ["https://drive.google.com/file/d/123456/view"]
                          },
                          {
                            "name": "input2",
                            "urls": [
                              "https://drive.google.com/file/d/123457/view",
                              "https://drive.google.com/file/d/123458/view"
                            ]
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "sendChatResult": {
                          "type": "ai_response_result",
                          "conversationId": "fc938005-92db-411a-88eb-32ca50d5f744",
                          "policy_triggers": [],
                          "response": {
                            "message": "Based on the context provided, Credal is SOC 2 compliant...",
                            "dataChunk": "...SOC 2 is a technical audit that requires companies to establish and follow strict information security policies and procedures. Credal's SOC 2 report is available upon request..."
                          },
                          "warnings": [],
                          "inserted_audit_log": {
                            "id": "5842804e-ffbe-4f8d-873e-f007fff93440"
                          },
                          "referencedSources": [
                            {
                              "id": "1",
                              "externalResourceId": {
                                "externalResourceId": "123456",
                                "resourceType": "GOOGLE_DRIVE_ITEM"
                              },
                              "name": "Example Document",
                              "url": "https://drive.google.com/file/d/123456/view"
                            }
                          ],
                          "sourcesInDataContext": [
                            {
                              "id": "1",
                              "externalResourceId": {
                                "externalResourceId": "123456",
                                "resourceType": "GOOGLE_DRIVE_ITEM"
                              },
                              "name": "Example Document",
                              "url": "https://drive.google.com/file/d/123456/view"
                            },
                            {
                              "id": "2",
                              "externalResourceId": {
                                "externalResourceId": "123457",
                                "resourceType": "GOOGLE_DRIVE_ITEM"
                              },
                              "name": "Example Document 2",
                              "url": "https://drive.google.com/file/d/123457/view"
                            }
                          ],
                          "webSearchResults": [
                            {
                              "title": "SOC 2 Compliance",
                              "url": "https://www.credal.ai/soc2",
                              "content": "Credal is SOC 2 compliant. Learn more about SOC 2 compliance at Credal."
                            }
                          ],
                          "messageId": "dd721cd8-4bf2-4b94-9869-258df3dab9dc"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "stream-message",
                "method": "POST",
                "id": "streamMessage",
                "originalEndpointId": "endpoint_copilots.streamMessage",
                "name": "Stream Message",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/copilots"
                    },
                    {
                      "type": "literal",
                      "value": "/streamMessage"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Credal-generated Copilot ID to specify which agent to route the request to.\n",
                        "key": "copilotId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      },
                      {
                        "description": "The message you want to send to your copilot.\n",
                        "key": "message",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The user profile you want to use when sending the message.\n",
                        "key": "email",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Credal-generated conversation ID for sending follow up messages. Conversation ID is returned after initial message. Optional, to be left off for first messages on new conversations.\n",
                        "key": "conversationId",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "uuid"
                            }
                          }
                        }
                      },
                      {
                        "description": "Optional input variables to be used in the message. Map the name of the variable to a list of urls.\n",
                        "key": "inputVariables",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "id",
                              "value": "type_copilots:InputVariable"
                            }
                          }
                        },
                        "availability": "Beta"
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "stream",
                    "shape": {
                      "type": "reference",
                      "value": {
                        "type": "id",
                        "value": "type_copilots:StreamingChunk"
                      }
                    }
                  },
                  "description": "This endpoint returns a stream of server sent events. These can be in two formats - one is an initial event, followed by multiple data chunks, followed by a final chunk, or the other format is just one blocked event. See the examples for more details.\n"
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example Success",
                    "path": "/v0/copilots/streamMessage",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "copilotId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                      "message": "Is Credal SOC 2 compliant?",
                      "email": "ravin@credal.ai",
                      "inputVariables": [
                        {
                          "name": "input1",
                          "urls": ["https://drive.google.com/file/d/123456/view"]
                        },
                        {
                          "name": "input2",
                          "urls": [
                            "https://drive.google.com/file/d/123457/view",
                            "https://drive.google.com/file/d/123458/view"
                          ]
                        }
                      ]
                    },
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal import InputVariable\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.copilots.stream_message(\n        copilot_id=uuid.UUID(\n            \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n        ),\n        message=\"Is Credal SOC 2 compliant?\",\n        email=\"ravin@credal.ai\",\n        input_variables=[\n            InputVariable(\n                name=\"input1\",\n                urls=[\"https://drive.google.com/file/d/123456/view\"],\n            ),\n            InputVariable(\n                name=\"input2\",\n                urls=[\n                    \"https://drive.google.com/file/d/123457/view\",\n                    \"https://drive.google.com/file/d/123458/view\",\n                ],\n            ),\n        ],\n    )\n    async for chunk in response:\n        yield chunk\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal import InputVariable\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.copilots.stream_message(\n    copilot_id=uuid.UUID(\n        \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    ),\n    message=\"Is Credal SOC 2 compliant?\",\n    email=\"ravin@credal.ai\",\n    input_variables=[\n        InputVariable(\n            name=\"input1\",\n            urls=[\"https://drive.google.com/file/d/123456/view\"],\n        ),\n        InputVariable(\n            name=\"input2\",\n            urls=[\n                \"https://drive.google.com/file/d/123457/view\",\n                \"https://drive.google.com/file/d/123458/view\",\n            ],\n        ),\n    ],\n)\nfor chunk in response:\n    yield chunk\n",
                        "exampleIdentifier": "Example Success"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "copilotId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                        "message": "Is Credal SOC 2 compliant?",
                        "email": "ravin@credal.ai",
                        "inputVariables": [
                          {
                            "name": "input1",
                            "urls": ["https://drive.google.com/file/d/123456/view"]
                          },
                          {
                            "name": "input2",
                            "urls": [
                              "https://drive.google.com/file/d/123457/view",
                              "https://drive.google.com/file/d/123458/view"
                            ]
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "sse",
                      "value": [
                        {
                          "event": "initial",
                          "data": {
                            "conversationId": "fc938005-92db-411a-88eb-32ca50d5f744",
                            "webSearchResults": [
                              {
                                "title": "SOC 2 Compliance",
                                "url": "https://www.credal.ai/soc2",
                                "content": "Credal is SOC 2 compliant. Learn more about SOC 2 compliance at Credal."
                              }
                            ],
                            "warnings": []
                          }
                        },
                        {
                          "event": "data_chunk",
                          "data": {
                            "chunk": "Based on"
                          }
                        },
                        {
                          "event": "data_chunk",
                          "data": {
                            "chunk": "the context provided,"
                          }
                        },
                        {
                          "event": "data_chunk",
                          "data": {
                            "chunk": "Credal is SOC 2 compliant."
                          }
                        },
                        {
                          "event": "final_chunk",
                          "data": {
                            "referencedSources": [
                              {
                                "id": "1",
                                "externalResourceId": {
                                  "externalResourceId": "123456",
                                  "resourceType": "GOOGLE_DRIVE_ITEM"
                                },
                                "name": "Example Document",
                                "url": "https://drive.google.com/file/d/123456/view"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "codeSamples": []
                  },
                  {
                    "name": "Example Blocked",
                    "path": "/v0/copilots/streamMessage",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "copilotId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                      "message": "Is this user eligible for benefits based on their date of birth?",
                      "email": "ravin@credal.ai",
                      "inputVariables": [
                        {
                          "name": "input1",
                          "urls": ["https://drive.google.com/file/d/123456/view"]
                        },
                        {
                          "name": "input2",
                          "urls": [
                            "https://drive.google.com/file/d/123457/view",
                            "https://drive.google.com/file/d/123458/view"
                          ]
                        }
                      ]
                    },
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal import InputVariable\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    response = await client.copilots.stream_message(\n        copilot_id=uuid.UUID(\n            \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n        ),\n        message=\"Is this user eligible for benefits based on their date of birth?\",\n        email=\"ravin@credal.ai\",\n        input_variables=[\n            InputVariable(\n                name=\"input1\",\n                urls=[\"https://drive.google.com/file/d/123456/view\"],\n            ),\n            InputVariable(\n                name=\"input2\",\n                urls=[\n                    \"https://drive.google.com/file/d/123457/view\",\n                    \"https://drive.google.com/file/d/123458/view\",\n                ],\n            ),\n        ],\n    )\n    async for chunk in response:\n        yield chunk\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal import InputVariable\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.copilots.stream_message(\n    copilot_id=uuid.UUID(\n        \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    ),\n    message=\"Is this user eligible for benefits based on their date of birth?\",\n    email=\"ravin@credal.ai\",\n    input_variables=[\n        InputVariable(\n            name=\"input1\",\n            urls=[\"https://drive.google.com/file/d/123456/view\"],\n        ),\n        InputVariable(\n            name=\"input2\",\n            urls=[\n                \"https://drive.google.com/file/d/123457/view\",\n                \"https://drive.google.com/file/d/123458/view\",\n            ],\n        ),\n    ],\n)\nfor chunk in response:\n    yield chunk\n",
                        "exampleIdentifier": "Example Blocked"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "copilotId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                        "message": "Is this user eligible for benefits based on their date of birth?",
                        "email": "ravin@credal.ai",
                        "inputVariables": [
                          {
                            "name": "input1",
                            "urls": ["https://drive.google.com/file/d/123456/view"]
                          },
                          {
                            "name": "input2",
                            "urls": [
                              "https://drive.google.com/file/d/123457/view",
                              "https://drive.google.com/file/d/123458/view"
                            ]
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "sse",
                      "value": [
                        {
                          "event": "blocked",
                          "data": {
                            "conversationId": "fc938005-92db-411a-88eb-32ca50d5f744",
                            "policyTriggers": [],
                            "warnings": [],
                            "blocks": ["This request contains PII"]
                          }
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This endpoint allows you to send a message to a specific copilot and get the response back as a streamed set of Server-Sent Events.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "add-collection-to-copilot",
                "method": "POST",
                "id": "addCollectionToCopilot",
                "originalEndpointId": "endpoint_copilots.addCollectionToCopilot",
                "name": "Add Collection To Copilot",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/copilots"
                    },
                    {
                      "type": "literal",
                      "value": "/addCollectionToCopilot"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Credal-generated copilot ID to add the collection to.\n",
                        "key": "copilotId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      },
                      {
                        "description": "Credal-generated collection ID to add.\n",
                        "key": "collectionId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/copilots/addCollectionToCopilot",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "copilotId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                      "collectionId": "def1055f-83c5-43d6-b558-f7a38e7b299e"
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.add_collection_to_copilot(\n        copilot_id=uuid.UUID(\n            \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n        ),\n        collection_id=uuid.UUID(\n            \"def1055f-83c5-43d6-b558-f7a38e7b299e\",\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.add_collection_to_copilot(\n    copilot_id=uuid.UUID(\n        \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    ),\n    collection_id=uuid.UUID(\n        \"def1055f-83c5-43d6-b558-f7a38e7b299e\",\n    ),\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.copilots.addCollectionToCopilot({\n    copilotId: \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    collectionId: \"def1055f-83c5-43d6-b558-f7a38e7b299e\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "copilotId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                        "collectionId": "def1055f-83c5-43d6-b558-f7a38e7b299e"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Link a collection with a copilot. The API Key used must be added to both the collection and the copilot beforehand.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "remove-collection-from-copilot",
                "method": "POST",
                "id": "removeCollectionFromCopilot",
                "originalEndpointId": "endpoint_copilots.removeCollectionFromCopilot",
                "name": "Remove Collection From Copilot",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/copilots"
                    },
                    {
                      "type": "literal",
                      "value": "/removeCollectionFromCopilot"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Credal-generated copilot ID to add the collection to.\n",
                        "key": "copilotId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      },
                      {
                        "description": "Credal-generated collection ID to add.\n",
                        "key": "collectionId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/copilots/removeCollectionFromCopilot",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "copilotId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                      "collectionId": "def1055f-83c5-43d6-b558-f7a38e7b299e"
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.remove_collection_from_copilot(\n        copilot_id=uuid.UUID(\n            \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n        ),\n        collection_id=uuid.UUID(\n            \"def1055f-83c5-43d6-b558-f7a38e7b299e\",\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.remove_collection_from_copilot(\n    copilot_id=uuid.UUID(\n        \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    ),\n    collection_id=uuid.UUID(\n        \"def1055f-83c5-43d6-b558-f7a38e7b299e\",\n    ),\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.copilots.removeCollectionFromCopilot({\n    copilotId: \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    collectionId: \"def1055f-83c5-43d6-b558-f7a38e7b299e\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "copilotId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                        "collectionId": "def1055f-83c5-43d6-b558-f7a38e7b299e"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Unlink a collection with a copilot. The API Key used must be added to both the collection and the copilot beforehand.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "update-configuration",
                "method": "POST",
                "id": "updateConfiguration",
                "originalEndpointId": "endpoint_copilots.updateConfiguration",
                "name": "Update Configuration",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/copilots"
                    },
                    {
                      "type": "literal",
                      "value": "/updateConfiguration"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Credal-generated copilot ID to add the collection to.\n",
                        "key": "copilotId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      },
                      {
                        "key": "configuration",
                        "valueType": {
                          "type": "id",
                          "value": "type_copilots:Configuration"
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/copilots/updateConfiguration",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "copilotId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                      "configuration": {
                        "name": "Customer Copilot",
                        "description": "This copilot is used to answer customer requests based on internal documentation.",
                        "prompt": "You are a polite, helpful assistant used to answer customer requests.",
                        "aiEndpointConfiguration": {
                          "baseUrl": "https://api.openai.com/v1/",
                          "apiKey": "<YOUR_API_KEY_HERE>"
                        }
                      }
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal import AiEndpointConfiguration, Configuration\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.update_configuration(\n        copilot_id=uuid.UUID(\n            \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n        ),\n        configuration=Configuration(\n            name=\"Customer Copilot\",\n            description=\"This copilot is used to answer customer requests based on internal documentation.\",\n            prompt=\"You are a polite, helpful assistant used to answer customer requests.\",\n            ai_endpoint_configuration=AiEndpointConfiguration(\n                base_url=\"https://api.openai.com/v1/\",\n                api_key=\"<YOUR_API_KEY_HERE>\",\n            ),\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal import AiEndpointConfiguration, Configuration\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.update_configuration(\n    copilot_id=uuid.UUID(\n        \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    ),\n    configuration=Configuration(\n        name=\"Customer Copilot\",\n        description=\"This copilot is used to answer customer requests based on internal documentation.\",\n        prompt=\"You are a polite, helpful assistant used to answer customer requests.\",\n        ai_endpoint_configuration=AiEndpointConfiguration(\n            base_url=\"https://api.openai.com/v1/\",\n            api_key=\"<YOUR_API_KEY_HERE>\",\n        ),\n    ),\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.copilots.updateConfiguration({\n    copilotId: \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    configuration: {\n        name: \"Customer Copilot\",\n        description: \"This copilot is used to answer customer requests based on internal documentation.\",\n        prompt: \"You are a polite, helpful assistant used to answer customer requests.\",\n        aiEndpointConfiguration: {\n            baseUrl: \"https://api.openai.com/v1/\",\n            apiKey: \"<YOUR_API_KEY_HERE>\"\n        }\n    }\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "copilotId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                        "configuration": {
                          "name": "Customer Copilot",
                          "description": "This copilot is used to answer customer requests based on internal documentation.",
                          "prompt": "You are a polite, helpful assistant used to answer customer requests.",
                          "aiEndpointConfiguration": {
                            "baseUrl": "https://api.openai.com/v1/",
                            "apiKey": "<YOUR_API_KEY_HERE>"
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update the configuration for a copilot",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "delete-copilot",
                "method": "DELETE",
                "id": "deleteCopilot",
                "originalEndpointId": "endpoint_copilots.deleteCopilot",
                "name": "Delete Copilot",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/copilots"
                    },
                    {
                      "type": "literal",
                      "value": "/deleteCopilot"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Copilot ID",
                        "key": "id",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_copilots:DeleteCopilotResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/copilots/deleteCopilot",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "id": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "copilotId": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.copilots.delete_copilot(\n        id=uuid.UUID(\n            \"ac20e6ba-0bae-11ef-b25a-efca73df4c3a\",\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.copilots.delete_copilot(\n    id=uuid.UUID(\n        \"ac20e6ba-0bae-11ef-b25a-efca73df4c3a\",\n    ),\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.copilots.deleteCopilot({\n    id: \"ac20e6ba-0bae-11ef-b25a-efca73df4c3a\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "copilotId": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              }
            ],
            "types": [
              "type_copilots:CreateConversationResponse",
              "type_copilots:SendAgentMessageResponse",
              "type_copilots:SendMessageResponse",
              "type_copilots:InputVariable",
              "type_copilots:MessageReply",
              "type_copilots:ReferencedSource",
              "type_copilots:WebSearchResult",
              "type_copilots:ResponseChunk",
              "type_copilots:InsertedAuditLog",
              "type_copilots:MessageBlocked",
              "type_copilots:PolicyTrigger",
              "type_copilots:FeedbackEnum",
              "type_copilots:MessageFeedback",
              "type_copilots:Configuration",
              "type_copilots:AIEndpointConfiguration",
              "type_copilots:CreateCopilotResponse",
              "type_copilots:DeleteCopilotResponse",
              "type_copilots:StringFieldSchema",
              "type_copilots:NumberFieldSchema",
              "type_copilots:BooleanFieldSchema",
              "type_copilots:DatetimeFieldSchema",
              "type_copilots:Filter",
              "type_copilots:CollectionFilteredData",
              "type_copilots:DataFilter",
              "type_copilots:InitialChunk",
              "type_copilots:DataChunk",
              "type_copilots:FinalChunk",
              "type_copilots:BlockedChunk",
              "type_copilots:StreamingChunk"
            ],
            "subpackages": [],
            "urlSlug": "copilots",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_documentCatalog": {
            "subpackageId": "subpackage_documentCatalog",
            "name": "documentCatalog",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "upload-document-contents",
                "method": "POST",
                "id": "uploadDocumentContents",
                "originalEndpointId": "endpoint_documentCatalog.uploadDocumentContents",
                "name": "Upload Document Contents",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/catalog"
                    },
                    {
                      "type": "literal",
                      "value": "/uploadDocumentContents"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The name of the document you want to upload.\n",
                        "key": "documentName",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The full LLM-formatted text contents of the document you want to upload.\n",
                        "key": "documentContents",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Users allowed to access the document. Unlike Credal's out of the box connectors which reconcile various permissions models from 3rd party software, for custom uploads the caller is responsible for specifying who can access the document and currently flattening groups if applicable. Documents can also be marked as internal public.\n",
                        "key": "allowedUsersEmailAddresses",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "[Legacy] The user on behalf of whom the document should be uploaded. In most cases, this can simply be the email of the developer making the API call. This field will be removed in the future in favor of purely specifying permissions via allowedUsersEmailAddresses.\n",
                        "key": "uploadAsUserEmail",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The external ID of the document. This is typically the ID as it exists in its original external system. Uploads to the same external ID will update the document in Credal.\n",
                        "key": "documentExternalId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The external URL of the document you want to upload. If provided Credal will link to this URL.\n",
                        "key": "documentExternalUrl",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Optional JSON representing any custom metdata for this document\n",
                        "key": "customMetadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "unknown"
                          }
                        }
                      },
                      {
                        "description": "If specified, document will also be added to a particular document collection\n",
                        "key": "collectionId",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "If specified, document contents will be re-uploaded and re-embedded even if the document already exists in Credal\n",
                        "key": "forceUpdate",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "If specified, document will be accessible to everyone within the organization of the uploader\n",
                        "key": "internalPublic",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_documentCatalog:UploadDocumentResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example1",
                    "path": "/v0/catalog/uploadDocumentContents",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "documentName": "My Document",
                      "documentContents": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                      "documentExternalId": "73eead26-d124-4940-b329-5f068a0a8db9",
                      "allowedUsersEmailAddresses": ["jack@credal.ai", "ravin@credal.ai"],
                      "uploadAsUserEmail": "jack@credal.ai"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "documentId": "82e4b12a-6990-45d4-8ebd-85c00e030c24"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\n\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_catalog.upload_document_contents(\n        document_name=\"My Document\",\n        document_contents=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n        document_external_id=\"73eead26-d124-4940-b329-5f068a0a8db9\",\n        allowed_users_email_addresses=[\"jack@credal.ai\", \"ravin@credal.ai\"],\n        upload_as_user_email=\"jack@credal.ai\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_catalog.upload_document_contents(\n    document_name=\"My Document\",\n    document_contents=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    document_external_id=\"73eead26-d124-4940-b329-5f068a0a8db9\",\n    allowed_users_email_addresses=[\"jack@credal.ai\", \"ravin@credal.ai\"],\n    upload_as_user_email=\"jack@credal.ai\",\n)\n",
                        "exampleIdentifier": "Example1"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.documentCatalog.uploadDocumentContents({\n    documentName: \"My Document\",\n    documentContents: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    documentExternalId: \"73eead26-d124-4940-b329-5f068a0a8db9\",\n    allowedUsersEmailAddresses: [\"jack@credal.ai\", \"ravin@credal.ai\"],\n    uploadAsUserEmail: \"jack@credal.ai\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "documentName": "My Document",
                        "documentContents": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                        "documentExternalId": "73eead26-d124-4940-b329-5f068a0a8db9",
                        "allowedUsersEmailAddresses": ["jack@credal.ai", "ravin@credal.ai"],
                        "uploadAsUserEmail": "jack@credal.ai"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "documentId": "82e4b12a-6990-45d4-8ebd-85c00e030c24"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "metadata",
                "method": "PATCH",
                "id": "metadata",
                "originalEndpointId": "endpoint_documentCatalog.metadata",
                "name": "Metadata",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/catalog"
                    },
                    {
                      "type": "literal",
                      "value": "/metadata"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_documentCatalog:DocumentMetadataPatchRequest"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/catalog/metadata",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "sources": [
                        {
                          "metadata": {
                            "Department": "HR",
                            "Country": "United States"
                          },
                          "resourceIdentifier": {
                            "type": "external-resource-id",
                            "externalResourceId": "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                            "resourceType": "GOOGLE_DRIVE_ITEM"
                          }
                        },
                        {
                          "metadata": {
                            "Department": "Sales",
                            "Vertical": "Healthcare"
                          },
                          "resourceIdentifier": {
                            "type": "external-resource-id",
                            "externalResourceId": "123456",
                            "resourceType": "ZENDESK_TICKET"
                          }
                        }
                      ],
                      "uploadAsUserEmail": "ben@credal.ai"
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\n\nfrom credal import DocumentMetadataPatch, ResourceIdentifier_ExternalResourceId\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_catalog.metadata(\n        sources=[\n            DocumentMetadataPatch(\n                metadata={\"Department\": \"HR\", \"Country\": \"United States\"},\n                resource_identifier=ResourceIdentifier_ExternalResourceId(\n                    external_resource_id=\"170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr\",\n                    resource_type=\"GOOGLE_DRIVE_ITEM\",\n                ),\n            ),\n            DocumentMetadataPatch(\n                metadata={\"Department\": \"Sales\", \"Vertical\": \"Healthcare\"},\n                resource_identifier=ResourceIdentifier_ExternalResourceId(\n                    external_resource_id=\"123456\",\n                    resource_type=\"ZENDESK_TICKET\",\n                ),\n            ),\n        ],\n        upload_as_user_email=\"ben@credal.ai\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from credal import DocumentMetadataPatch, ResourceIdentifier_ExternalResourceId\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_catalog.metadata(\n    sources=[\n        DocumentMetadataPatch(\n            metadata={\"Department\": \"HR\", \"Country\": \"United States\"},\n            resource_identifier=ResourceIdentifier_ExternalResourceId(\n                external_resource_id=\"170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr\",\n                resource_type=\"GOOGLE_DRIVE_ITEM\",\n            ),\n        ),\n        DocumentMetadataPatch(\n            metadata={\"Department\": \"Sales\", \"Vertical\": \"Healthcare\"},\n            resource_identifier=ResourceIdentifier_ExternalResourceId(\n                external_resource_id=\"123456\",\n                resource_type=\"ZENDESK_TICKET\",\n            ),\n        ),\n    ],\n    upload_as_user_email=\"ben@credal.ai\",\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient, Credal } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.documentCatalog.metadata({\n    sources: [{\n            metadata: {\n                \"Department\": \"HR\",\n                \"Country\": \"United States\"\n            },\n            resourceIdentifier: {\n                type: \"external-resource-id\",\n                externalResourceId: \"170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr\",\n                resourceType: Credal.ResourceType.GoogleDriveItem\n            }\n        }, {\n            metadata: {\n                \"Department\": \"Sales\",\n                \"Vertical\": \"Healthcare\"\n            },\n            resourceIdentifier: {\n                type: \"external-resource-id\",\n                externalResourceId: \"123456\",\n                resourceType: Credal.ResourceType.ZendeskTicket\n            }\n        }],\n    uploadAsUserEmail: \"ben@credal.ai\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "sources": [
                          {
                            "metadata": {
                              "Department": "HR",
                              "Country": "United States"
                            },
                            "resourceIdentifier": {
                              "type": "external-resource-id",
                              "externalResourceId": "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                              "resourceType": "GOOGLE_DRIVE_ITEM"
                            }
                          },
                          {
                            "metadata": {
                              "Department": "Sales",
                              "Vertical": "Healthcare"
                            },
                            "resourceIdentifier": {
                              "type": "external-resource-id",
                              "externalResourceId": "123456",
                              "resourceType": "ZENDESK_TICKET"
                            }
                          }
                        ],
                        "uploadAsUserEmail": "ben@credal.ai"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Bulk patch metadata for documents, synced natively by Credal or manual API uploads",
                "authed": true
              }
            ],
            "types": [
              "type_documentCatalog:UploadDocumentResponse",
              "type_documentCatalog:DocumentMetadataPatch",
              "type_documentCatalog:DocumentMetadataPatchRequest"
            ],
            "subpackages": [],
            "urlSlug": "document-catalog",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_documentCollections": {
            "subpackageId": "subpackage_documentCollections",
            "name": "documentCollections",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "add-documents-to-collection",
                "method": "POST",
                "id": "addDocumentsToCollection",
                "originalEndpointId": "endpoint_documentCollections.addDocumentsToCollection",
                "name": "Add Documents To Collection",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/documentCollections"
                    },
                    {
                      "type": "literal",
                      "value": "/addDocumentsToCollection"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The ID of the document collection you want to add to.",
                        "key": "collectionId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      },
                      {
                        "description": "The set of resource identifier for which you want to add to the collection.\n",
                        "key": "resourceIdentifiers",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "id",
                            "value": "type_common:ResourceIdentifier"
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "addDocumentsToCollectionExample",
                    "path": "/v0/documentCollections/addDocumentsToCollection",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "collectionId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                      "resourceIdentifiers": [
                        {
                          "type": "external-resource-id",
                          "externalResourceId": "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                          "resourceType": "GOOGLE_DRIVE_ITEM"
                        },
                        {
                          "type": "external-resource-id",
                          "externalResourceId": "398KAHdfkjsdf09r54UvyslPVWkQFOA0lOiu34in923",
                          "resourceType": "GOOGLE_DRIVE_ITEM"
                        }
                      ]
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal import ResourceIdentifier_ExternalResourceId\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_collections.add_documents_to_collection(\n        collection_id=uuid.UUID(\n            \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n        ),\n        resource_identifiers=[\n            ResourceIdentifier_ExternalResourceId(\n                external_resource_id=\"170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr\",\n                resource_type=\"GOOGLE_DRIVE_ITEM\",\n            ),\n            ResourceIdentifier_ExternalResourceId(\n                external_resource_id=\"398KAHdfkjsdf09r54UvyslPVWkQFOA0lOiu34in923\",\n                resource_type=\"GOOGLE_DRIVE_ITEM\",\n            ),\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal import ResourceIdentifier_ExternalResourceId\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_collections.add_documents_to_collection(\n    collection_id=uuid.UUID(\n        \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    ),\n    resource_identifiers=[\n        ResourceIdentifier_ExternalResourceId(\n            external_resource_id=\"170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr\",\n            resource_type=\"GOOGLE_DRIVE_ITEM\",\n        ),\n        ResourceIdentifier_ExternalResourceId(\n            external_resource_id=\"398KAHdfkjsdf09r54UvyslPVWkQFOA0lOiu34in923\",\n            resource_type=\"GOOGLE_DRIVE_ITEM\",\n        ),\n    ],\n)\n",
                        "exampleIdentifier": "addDocumentsToCollectionExample"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient, Credal } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.documentCollections.addDocumentsToCollection({\n    collectionId: \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    resourceIdentifiers: [{\n            type: \"external-resource-id\",\n            externalResourceId: \"170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr\",\n            resourceType: Credal.ResourceType.GoogleDriveItem\n        }, {\n            type: \"external-resource-id\",\n            externalResourceId: \"398KAHdfkjsdf09r54UvyslPVWkQFOA0lOiu34in923\",\n            resourceType: Credal.ResourceType.GoogleDriveItem\n        }]\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "collectionId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                        "resourceIdentifiers": [
                          {
                            "type": "external-resource-id",
                            "externalResourceId": "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                            "resourceType": "GOOGLE_DRIVE_ITEM"
                          },
                          {
                            "type": "external-resource-id",
                            "externalResourceId": "398KAHdfkjsdf09r54UvyslPVWkQFOA0lOiu34in923",
                            "resourceType": "GOOGLE_DRIVE_ITEM"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Add documents to a document collection. Note that the documents must already exist in the document catalog to use this endpoint. If you want to upload a new document to a collection, use the `uploadDocumentContents` endpoint.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "remove-documents-from-collection",
                "method": "DELETE",
                "id": "removeDocumentsFromCollection",
                "originalEndpointId": "endpoint_documentCollections.removeDocumentsFromCollection",
                "name": "Remove Documents From Collection",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/documentCollections"
                    },
                    {
                      "type": "literal",
                      "value": "/removeDocumentsFromCollection"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The ID of the document collection you want to add to.",
                        "key": "collectionId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      },
                      {
                        "description": "The set of resource identifier for which you want to remove from the collection\n",
                        "key": "resourceIdentifiers",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "id",
                            "value": "type_common:ResourceIdentifier"
                          }
                        }
                      }
                    ]
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "removeDocumentsFromCollectionExample",
                    "path": "/v0/documentCollections/removeDocumentsFromCollection",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "collectionId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                      "resourceIdentifiers": [
                        {
                          "type": "external-resource-id",
                          "externalResourceId": "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                          "resourceType": "GOOGLE_DRIVE_ITEM"
                        },
                        {
                          "type": "external-resource-id",
                          "externalResourceId": "398KAHdfkjsdf09r54UvyslPVWkQFOA0lOiu34in923",
                          "resourceType": "GOOGLE_DRIVE_ITEM"
                        }
                      ]
                    },
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal import ResourceIdentifier_ExternalResourceId\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_collections.remove_documents_from_collection(\n        collection_id=uuid.UUID(\n            \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n        ),\n        resource_identifiers=[\n            ResourceIdentifier_ExternalResourceId(\n                external_resource_id=\"170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr\",\n                resource_type=\"GOOGLE_DRIVE_ITEM\",\n            ),\n            ResourceIdentifier_ExternalResourceId(\n                external_resource_id=\"398KAHdfkjsdf09r54UvyslPVWkQFOA0lOiu34in923\",\n                resource_type=\"GOOGLE_DRIVE_ITEM\",\n            ),\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal import ResourceIdentifier_ExternalResourceId\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_collections.remove_documents_from_collection(\n    collection_id=uuid.UUID(\n        \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    ),\n    resource_identifiers=[\n        ResourceIdentifier_ExternalResourceId(\n            external_resource_id=\"170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr\",\n            resource_type=\"GOOGLE_DRIVE_ITEM\",\n        ),\n        ResourceIdentifier_ExternalResourceId(\n            external_resource_id=\"398KAHdfkjsdf09r54UvyslPVWkQFOA0lOiu34in923\",\n            resource_type=\"GOOGLE_DRIVE_ITEM\",\n        ),\n    ],\n)\n",
                        "exampleIdentifier": "removeDocumentsFromCollectionExample"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient, Credal } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.documentCollections.removeDocumentsFromCollection({\n    collectionId: \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    resourceIdentifiers: [{\n            type: \"external-resource-id\",\n            externalResourceId: \"170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr\",\n            resourceType: Credal.ResourceType.GoogleDriveItem\n        }, {\n            type: \"external-resource-id\",\n            externalResourceId: \"398KAHdfkjsdf09r54UvyslPVWkQFOA0lOiu34in923\",\n            resourceType: Credal.ResourceType.GoogleDriveItem\n        }]\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "collectionId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                        "resourceIdentifiers": [
                          {
                            "type": "external-resource-id",
                            "externalResourceId": "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                            "resourceType": "GOOGLE_DRIVE_ITEM"
                          },
                          {
                            "type": "external-resource-id",
                            "externalResourceId": "398KAHdfkjsdf09r54UvyslPVWkQFOA0lOiu34in923",
                            "resourceType": "GOOGLE_DRIVE_ITEM"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Remove documents from a collection",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "create-collection",
                "method": "POST",
                "id": "createCollection",
                "originalEndpointId": "endpoint_documentCollections.createCollection",
                "name": "Create Collection",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/documentCollections"
                    },
                    {
                      "type": "literal",
                      "value": "/createCollection"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "A descriptive name for the collection.\n",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "An in depth name for the copilot's function. Useful for routing requests to the right copilot.\n",
                        "key": "description",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "A list of collaborator emails and roles that will have access to the copilot.\n",
                        "key": "collaborators",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "id",
                            "value": "type_common:Collaborator"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_documentCollections:CreateCollectionResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/documentCollections/createCollection",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "name": "Customer Collection",
                      "description": "This collection is used to answer customer requests based on internal documentation.",
                      "collaborators": [
                        {
                          "email": "test@gmail.com",
                          "role": "editor"
                        }
                      ]
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "collectionId": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\n\nfrom credal import Collaborator\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_collections.create_collection(\n        name=\"Customer Collection\",\n        description=\"This collection is used to answer customer requests based on internal documentation.\",\n        collaborators=[\n            Collaborator(\n                email=\"test@gmail.com\",\n                role=\"editor\",\n            )\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from credal import Collaborator\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_collections.create_collection(\n    name=\"Customer Collection\",\n    description=\"This collection is used to answer customer requests based on internal documentation.\",\n    collaborators=[\n        Collaborator(\n            email=\"test@gmail.com\",\n            role=\"editor\",\n        )\n    ],\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient, Credal } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.documentCollections.createCollection({\n    name: \"Customer Collection\",\n    description: \"This collection is used to answer customer requests based on internal documentation.\",\n    collaborators: [{\n            email: \"test@gmail.com\",\n            role: Credal.Role.Editor\n        }]\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "Customer Collection",
                        "description": "This collection is used to answer customer requests based on internal documentation.",
                        "collaborators": [
                          {
                            "email": "test@gmail.com",
                            "role": "editor"
                          }
                        ]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "collectionId": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a new copilot. The API key used will be added to the copilot for future Requests",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "delete-collection",
                "method": "DELETE",
                "id": "deleteCollection",
                "originalEndpointId": "endpoint_documentCollections.deleteCollection",
                "name": "Delete Collection",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/documentCollections"
                    },
                    {
                      "type": "literal",
                      "value": "/deleteCollection"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "collectionId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_documentCollections:DeleteCollectionResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/documentCollections/deleteCollection",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "collectionId": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "collectionId": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_collections.delete_collection(\n        collection_id=uuid.UUID(\n            \"ac20e6ba-0bae-11ef-b25a-efca73df4c3a\",\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_collections.delete_collection(\n    collection_id=uuid.UUID(\n        \"ac20e6ba-0bae-11ef-b25a-efca73df4c3a\",\n    ),\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.documentCollections.deleteCollection({\n    collectionId: \"ac20e6ba-0bae-11ef-b25a-efca73df4c3a\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "collectionId": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "collectionId": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete the collection.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "create-mongo-collection-sync",
                "method": "POST",
                "id": "createMongoCollectionSync",
                "originalEndpointId": "endpoint_documentCollections.createMongoCollectionSync",
                "name": "Create Mongo Collection Sync",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/documentCollections"
                    },
                    {
                      "type": "literal",
                      "value": "/mongodb/createMongoSync"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "collectionId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      },
                      {
                        "key": "mongoURI",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "config",
                        "valueType": {
                          "type": "id",
                          "value": "type_documentCollections:MongoCollectionSyncConfig"
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_documentCollections:MongoCollectionSyncResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/documentCollections/mongodb/createMongoSync",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "mongoURI": "mongodb+srv://cluster0.hzwklqn.mongodb.net/Cluster0?retryWrites=true&w=majority",
                      "collectionId": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a",
                      "config": {
                        "syncName": "My sales transcripts",
                        "collectionName": "myCollection",
                        "filterExpression": {
                          "status": {
                            "$ne": "disabled"
                          }
                        },
                        "sourceFields": {
                          "body": "body",
                          "sourceName": "meetingName",
                          "sourceSystemUpdated": "transcriptDatetime",
                          "sourceUrl": "link"
                        }
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "mongoCredentialId": "5988ed76-6ee1-11ef-97dd-1fca54b7c4bc",
                      "resourceId": "mongo-collection-credal-sync-bfd82450-6c68-11ef-bb2b-f7176fe2f3c4",
                      "syncLaunched": true
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal import MongoCollectionSyncConfig, MongoSourceFieldsConfig\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_collections.create_mongo_collection_sync(\n        mongo_uri=\"mongodb+srv://cluster0.hzwklqn.mongodb.net/Cluster0?retryWrites=true&w=majority\",\n        collection_id=uuid.UUID(\n            \"ac20e6ba-0bae-11ef-b25a-efca73df4c3a\",\n        ),\n        config=MongoCollectionSyncConfig(\n            sync_name=\"My sales transcripts\",\n            collection_name=\"myCollection\",\n            filter_expression={\"status\": {\"$ne\": \"disabled\"}},\n            source_fields=MongoSourceFieldsConfig(\n                body=\"body\",\n                source_name=\"meetingName\",\n                source_system_updated=\"transcriptDatetime\",\n                source_url=\"link\",\n            ),\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal import MongoCollectionSyncConfig, MongoSourceFieldsConfig\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_collections.create_mongo_collection_sync(\n    mongo_uri=\"mongodb+srv://cluster0.hzwklqn.mongodb.net/Cluster0?retryWrites=true&w=majority\",\n    collection_id=uuid.UUID(\n        \"ac20e6ba-0bae-11ef-b25a-efca73df4c3a\",\n    ),\n    config=MongoCollectionSyncConfig(\n        sync_name=\"My sales transcripts\",\n        collection_name=\"myCollection\",\n        filter_expression={\"status\": {\"$ne\": \"disabled\"}},\n        source_fields=MongoSourceFieldsConfig(\n            body=\"body\",\n            source_name=\"meetingName\",\n            source_system_updated=\"transcriptDatetime\",\n            source_url=\"link\",\n        ),\n    ),\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.documentCollections.createMongoCollectionSync({\n    mongoUri: \"mongodb+srv://cluster0.hzwklqn.mongodb.net/Cluster0?retryWrites=true&w=majority\",\n    collectionId: \"ac20e6ba-0bae-11ef-b25a-efca73df4c3a\",\n    config: {\n        syncName: \"My sales transcripts\",\n        collectionName: \"myCollection\",\n        filterExpression: {\n            \"status\": {\n                \"$ne\": \"disabled\"\n            }\n        },\n        sourceFields: {\n            body: \"body\",\n            sourceName: \"meetingName\",\n            sourceSystemUpdated: \"transcriptDatetime\",\n            sourceUrl: \"link\"\n        }\n    }\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "mongoURI": "mongodb+srv://cluster0.hzwklqn.mongodb.net/Cluster0?retryWrites=true&w=majority",
                        "collectionId": "ac20e6ba-0bae-11ef-b25a-efca73df4c3a",
                        "config": {
                          "syncName": "My sales transcripts",
                          "collectionName": "myCollection",
                          "filterExpression": {
                            "status": {
                              "$ne": "disabled"
                            }
                          },
                          "sourceFields": {
                            "body": "body",
                            "sourceName": "meetingName",
                            "sourceSystemUpdated": "transcriptDatetime",
                            "sourceUrl": "link"
                          }
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "mongoCredentialId": "5988ed76-6ee1-11ef-97dd-1fca54b7c4bc",
                        "resourceId": "mongo-collection-credal-sync-bfd82450-6c68-11ef-bb2b-f7176fe2f3c4",
                        "syncLaunched": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Credal lets you easily sync your MongoDB data for use in Collections and Copilots. Create a new sync from a MongoDB collection to a Credal collection.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "update-mongo-collection-sync",
                "method": "POST",
                "id": "updateMongoCollectionSync",
                "originalEndpointId": "endpoint_documentCollections.updateMongoCollectionSync",
                "name": "Update Mongo Collection Sync",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/documentCollections"
                    },
                    {
                      "type": "literal",
                      "value": "/mongodb/updateMongoSync"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "mongoCredentialId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      },
                      {
                        "key": "mongoURI",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "config",
                        "valueType": {
                          "type": "id",
                          "value": "type_documentCollections:MongoCollectionSyncConfig"
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_documentCollections:MongoCollectionSyncResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/documentCollections/mongodb/updateMongoSync",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "mongoURI": "mongodb+srv://cluster0.hzwklqn.mongodb.net/Cluster0?retryWrites=true&w=majority",
                      "mongoCredentialId": "5988ed76-6ee1-11ef-97dd-1fca54b7c4bc",
                      "config": {
                        "syncName": "My recent summarized sales transcripts",
                        "collectionName": "myCollection",
                        "filterExpression": {
                          "transcriptDatetime": {
                            "$gt": "2023-01-01T00:00:00.000Z"
                          }
                        },
                        "sourceFields": {
                          "body": "transcriptSummary",
                          "sourceName": "meetingName",
                          "sourceSystemUpdated": "transcriptDatetime",
                          "sourceUrl": "link"
                        }
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "mongoCredentialId": "5988ed76-6ee1-11ef-97dd-1fca54b7c4bc",
                      "resourceId": "mongo-collection-credal-sync-bfd82450-6c68-11ef-bb2b-f7176fe2f3c4",
                      "syncLaunched": true
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal import MongoCollectionSyncConfig, MongoSourceFieldsConfig\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.document_collections.update_mongo_collection_sync(\n        mongo_uri=\"mongodb+srv://cluster0.hzwklqn.mongodb.net/Cluster0?retryWrites=true&w=majority\",\n        mongo_credential_id=uuid.UUID(\n            \"5988ed76-6ee1-11ef-97dd-1fca54b7c4bc\",\n        ),\n        config=MongoCollectionSyncConfig(\n            sync_name=\"My recent summarized sales transcripts\",\n            collection_name=\"myCollection\",\n            filter_expression={\n                \"transcriptDatetime\": {\"$gt\": \"2023-01-01T00:00:00.000Z\"}\n            },\n            source_fields=MongoSourceFieldsConfig(\n                body=\"transcriptSummary\",\n                source_name=\"meetingName\",\n                source_system_updated=\"transcriptDatetime\",\n                source_url=\"link\",\n            ),\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal import MongoCollectionSyncConfig, MongoSourceFieldsConfig\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_collections.update_mongo_collection_sync(\n    mongo_uri=\"mongodb+srv://cluster0.hzwklqn.mongodb.net/Cluster0?retryWrites=true&w=majority\",\n    mongo_credential_id=uuid.UUID(\n        \"5988ed76-6ee1-11ef-97dd-1fca54b7c4bc\",\n    ),\n    config=MongoCollectionSyncConfig(\n        sync_name=\"My recent summarized sales transcripts\",\n        collection_name=\"myCollection\",\n        filter_expression={\n            \"transcriptDatetime\": {\"$gt\": \"2023-01-01T00:00:00.000Z\"}\n        },\n        source_fields=MongoSourceFieldsConfig(\n            body=\"transcriptSummary\",\n            source_name=\"meetingName\",\n            source_system_updated=\"transcriptDatetime\",\n            source_url=\"link\",\n        ),\n    ),\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.documentCollections.updateMongoCollectionSync({\n    mongoUri: \"mongodb+srv://cluster0.hzwklqn.mongodb.net/Cluster0?retryWrites=true&w=majority\",\n    mongoCredentialId: \"5988ed76-6ee1-11ef-97dd-1fca54b7c4bc\",\n    config: {\n        syncName: \"My recent summarized sales transcripts\",\n        collectionName: \"myCollection\",\n        filterExpression: {\n            \"transcriptDatetime\": {\n                \"$gt\": \"2023-01-01T00:00:00.000Z\"\n            }\n        },\n        sourceFields: {\n            body: \"transcriptSummary\",\n            sourceName: \"meetingName\",\n            sourceSystemUpdated: \"transcriptDatetime\",\n            sourceUrl: \"link\"\n        }\n    }\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "mongoURI": "mongodb+srv://cluster0.hzwklqn.mongodb.net/Cluster0?retryWrites=true&w=majority",
                        "mongoCredentialId": "5988ed76-6ee1-11ef-97dd-1fca54b7c4bc",
                        "config": {
                          "syncName": "My recent summarized sales transcripts",
                          "collectionName": "myCollection",
                          "filterExpression": {
                            "transcriptDatetime": {
                              "$gt": "2023-01-01T00:00:00.000Z"
                            }
                          },
                          "sourceFields": {
                            "body": "transcriptSummary",
                            "sourceName": "meetingName",
                            "sourceSystemUpdated": "transcriptDatetime",
                            "sourceUrl": "link"
                          }
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "mongoCredentialId": "5988ed76-6ee1-11ef-97dd-1fca54b7c4bc",
                        "resourceId": "mongo-collection-credal-sync-bfd82450-6c68-11ef-bb2b-f7176fe2f3c4",
                        "syncLaunched": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Credal lets you easily sync your MongoDB data for use in Collections and Copilots. Update an existing sync from a MongoDB collection to a Credal collection via the `mongoCredentialId`, to disambiguate between multiple potential syncs to a given collection.",
                "authed": true
              }
            ],
            "types": [
              "type_documentCollections:CreateCollectionResponse",
              "type_documentCollections:DeleteCollectionResponse",
              "type_documentCollections:MongoSourceFieldsConfig",
              "type_documentCollections:MongoCollectionSyncConfig",
              "type_documentCollections:MongoCollectionSyncResponse"
            ],
            "subpackages": [],
            "urlSlug": "document-collections",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_permissionsService": {
            "subpackageId": "subpackage_permissionsService",
            "name": "permissionsService",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "check-resource-authorization-for-user",
                "method": "POST",
                "id": "checkResourceAuthorizationForUser",
                "originalEndpointId": "endpoint_permissionsService.checkResourceAuthorizationForUser",
                "name": "Check Resource Authorization For User",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/permissions"
                    },
                    {
                      "type": "literal",
                      "value": "/checkResourceAuthorizationForUser"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The resource identifier for which you want to check authorization.\n",
                        "key": "resourceIdentifier",
                        "valueType": {
                          "type": "id",
                          "value": "type_common:ResourceIdentifier"
                        }
                      },
                      {
                        "description": "The user email to check authorization for.\n",
                        "key": "userEmail",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "If specified, Credal will bypass the permissions cache and check current permissions for this resource\n",
                        "key": "disableCache",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_permissionsService:CheckResourceAuthorizationResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/permissions/checkResourceAuthorizationForUser",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "resourceIdentifier": {
                        "type": "external-resource-id",
                        "externalResourceId": "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                        "resourceType": "GOOGLE_DRIVE_ITEM"
                      },
                      "userEmail": "john.smith@foo.com"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "authorized": true
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\n\nfrom credal import ResourceIdentifier_ExternalResourceId\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.permissions_service.check_resource_authorization_for_user(\n        resource_identifier=ResourceIdentifier_ExternalResourceId(\n            external_resource_id=\"170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr\",\n            resource_type=\"GOOGLE_DRIVE_ITEM\",\n        ),\n        user_email=\"john.smith@foo.com\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from credal import ResourceIdentifier_ExternalResourceId\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.permissions_service.check_resource_authorization_for_user(\n    resource_identifier=ResourceIdentifier_ExternalResourceId(\n        external_resource_id=\"170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr\",\n        resource_type=\"GOOGLE_DRIVE_ITEM\",\n    ),\n    user_email=\"john.smith@foo.com\",\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient, Credal } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.permissionsService.checkResourceAuthorizationForUser({\n    resourceIdentifier: {\n        type: \"external-resource-id\",\n        externalResourceId: \"170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr\",\n        resourceType: Credal.ResourceType.GoogleDriveItem\n    },\n    userEmail: \"john.smith@foo.com\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "resourceIdentifier": {
                          "type": "external-resource-id",
                          "externalResourceId": "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                          "resourceType": "GOOGLE_DRIVE_ITEM"
                        },
                        "userEmail": "john.smith@foo.com"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "authorized": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Admin endpoint to check whether the specified user is authorized to read the specified resource.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "check-bulk-resources-authorization-for-user",
                "method": "POST",
                "id": "checkBulkResourcesAuthorizationForUser",
                "originalEndpointId": "endpoint_permissionsService.checkBulkResourcesAuthorizationForUser",
                "name": "Check Bulk Resources Authorization For User",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/permissions"
                    },
                    {
                      "type": "literal",
                      "value": "/checkBulkResourcesAuthorizationForUser"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The set of resource identifier for which you want to check authorization. Currently limited to 20 resources.\n",
                        "key": "resourceIdentifiers",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "id",
                            "value": "type_common:ResourceIdentifier"
                          }
                        }
                      },
                      {
                        "description": "The user email to check authorization for.\n",
                        "key": "userEmail",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "If specified, Credal will bypass the permissions cache and check current permissions for all resources specified.\n",
                        "key": "disableCache",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_permissionsService:CheckBulkResourcesAuthorizationResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/permissions/checkBulkResourcesAuthorizationForUser",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "resourceIdentifiers": [
                        {
                          "type": "url",
                          "url": "https://docs.google.com/document/d/170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr/edit"
                        },
                        {
                          "type": "external-resource-id",
                          "externalResourceId": "sfsdfvr54UvyslPVWkQFOA0dfsdfsdflgNycFmdZJQr",
                          "resourceType": "ZENDESK_TICKET"
                        }
                      ],
                      "userEmail": "john.smith@foo.com"
                    },
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "externalResourceId": {
                          "externalResourceId": "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                          "resourceType": "GOOGLE_DRIVE_ITEM"
                        },
                        "inputUrl": "https://docs.google.com/document/d/170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr/edit",
                        "authorized": true
                      },
                      {
                        "externalResourceId": {
                          "externalResourceId": "123456",
                          "resourceType": "ZENDESK_TICKET"
                        },
                        "authorized": true
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\n\nfrom credal import ResourceIdentifier_ExternalResourceId, ResourceIdentifier_Url\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.permissions_service.check_bulk_resources_authorization_for_user(\n        resource_identifiers=[\n            ResourceIdentifier_Url(\n                url=\"https://docs.google.com/document/d/170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr/edit\",\n            ),\n            ResourceIdentifier_ExternalResourceId(\n                external_resource_id=\"sfsdfvr54UvyslPVWkQFOA0dfsdfsdflgNycFmdZJQr\",\n                resource_type=\"ZENDESK_TICKET\",\n            ),\n        ],\n        user_email=\"john.smith@foo.com\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from credal import ResourceIdentifier_ExternalResourceId, ResourceIdentifier_Url\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.permissions_service.check_bulk_resources_authorization_for_user(\n    resource_identifiers=[\n        ResourceIdentifier_Url(\n            url=\"https://docs.google.com/document/d/170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr/edit\",\n        ),\n        ResourceIdentifier_ExternalResourceId(\n            external_resource_id=\"sfsdfvr54UvyslPVWkQFOA0dfsdfsdflgNycFmdZJQr\",\n            resource_type=\"ZENDESK_TICKET\",\n        ),\n    ],\n    user_email=\"john.smith@foo.com\",\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient, Credal } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.permissionsService.checkBulkResourcesAuthorizationForUser({\n    resourceIdentifiers: [{\n            type: \"url\",\n            url: \"https://docs.google.com/document/d/170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr/edit\"\n        }, {\n            type: \"external-resource-id\",\n            externalResourceId: \"sfsdfvr54UvyslPVWkQFOA0dfsdfsdflgNycFmdZJQr\",\n            resourceType: Credal.ResourceType.ZendeskTicket\n        }],\n    userEmail: \"john.smith@foo.com\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "resourceIdentifiers": [
                          {
                            "type": "url",
                            "url": "https://docs.google.com/document/d/170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr/edit"
                          },
                          {
                            "type": "external-resource-id",
                            "externalResourceId": "sfsdfvr54UvyslPVWkQFOA0dfsdfsdflgNycFmdZJQr",
                            "resourceType": "ZENDESK_TICKET"
                          }
                        ],
                        "userEmail": "john.smith@foo.com"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "externalResourceId": {
                            "externalResourceId": "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                            "resourceType": "GOOGLE_DRIVE_ITEM"
                          },
                          "inputUrl": "https://docs.google.com/document/d/170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr/edit",
                          "authorized": true
                        },
                        {
                          "externalResourceId": {
                            "externalResourceId": "123456",
                            "resourceType": "ZENDESK_TICKET"
                          },
                          "authorized": true
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Admin endpoint to check whether the specified user is authorized to read the specified set of resources.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "availability": "Beta",
                "defaultEnvironment": "Production",
                "urlSlug": "list-cached-authorized-resources-for-user",
                "method": "POST",
                "id": "listCachedAuthorizedResourcesForUser",
                "originalEndpointId": "endpoint_permissionsService.listCachedAuthorizedResourcesForUser",
                "name": "List Cached Authorized Resources For User",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/permissions"
                    },
                    {
                      "type": "literal",
                      "value": "/listCachedAuthorizedResourcesForUser"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The user email to list authorized resources for.\n",
                        "key": "userEmail",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The type of resource you want to list. If not specified, all resource types will be listed.\n",
                        "key": "resourceType",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_common:ResourceType"
                          }
                        }
                      },
                      {
                        "description": "The maximum number of resources to return. Defaults to 100.\n",
                        "key": "limit",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        }
                      },
                      {
                        "description": "The offset to use for pagination. If not specified, the first page of results will be returned.\n",
                        "key": "offset",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_permissionsService:AuthorizedResourceListPage"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/permissions/listCachedAuthorizedResourcesForUser",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "userEmail": "john.smith@foo.com"
                    },
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "credalId": "2b5cf2b8-3df3-11ef-9a96-332d4470d189",
                        "externalId": {
                          "externalResourceId": "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                          "resourceType": "GOOGLE_DRIVE_ITEM"
                        }
                      },
                      {
                        "credalId": "eb5a0a00-3d9a-11ef-836d-375bf4e237a6",
                        "externalId": {
                          "externalResourceId": "123456",
                          "resourceType": "ZENDESK_TICKET"
                        }
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\n\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.permissions_service.list_cached_authorized_resources_for_user(\n        user_email=\"john.smith@foo.com\",\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.permissions_service.list_cached_authorized_resources_for_user(\n    user_email=\"john.smith@foo.com\",\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.permissionsService.listCachedAuthorizedResourcesForUser({\n    userEmail: \"john.smith@foo.com\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "userEmail": "john.smith@foo.com"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "credalId": "2b5cf2b8-3df3-11ef-9a96-332d4470d189",
                          "externalId": {
                            "externalResourceId": "170NrBm0Do7gdzvr54UvyslPVWkQFOA0lgNycFmdZJQr",
                            "resourceType": "GOOGLE_DRIVE_ITEM"
                          }
                        },
                        {
                          "credalId": "eb5a0a00-3d9a-11ef-836d-375bf4e237a6",
                          "externalId": {
                            "externalResourceId": "123456",
                            "resourceType": "ZENDESK_TICKET"
                          }
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Admin endpoint to list all resources that the specified user is authorized to read. Note this endpoint returns cached results and may not be up-to-date. You can use the checkResourceAuthorizationForUser endpoint with disableCache set to true to get the most up-to-date results.",
                "authed": true
              }
            ],
            "types": [
              "type_permissionsService:Group",
              "type_permissionsService:User",
              "type_permissionsService:Principal",
              "type_permissionsService:AuthorizedResource",
              "type_permissionsService:AuthorizedResourceListPage",
              "type_permissionsService:PrincipalListPage",
              "type_permissionsService:CheckResourceAuthorizationResponse",
              "type_permissionsService:ResourceAuthorizationResult",
              "type_permissionsService:CheckBulkResourcesAuthorizationResponse",
              "type_permissionsService:Action"
            ],
            "subpackages": [],
            "urlSlug": "permissions-service",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_search": {
            "subpackageId": "subpackage_search",
            "name": "search",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "search-document-collection",
                "method": "POST",
                "id": "searchDocumentCollection",
                "originalEndpointId": "endpoint_search.searchDocumentCollection",
                "name": "Search Document Collection",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/search"
                    },
                    {
                      "type": "literal",
                      "value": "/searchDocumentCollection"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "collectionId",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "uuid"
                          }
                        }
                      },
                      {
                        "key": "searchQuery",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The email of the user making the search request for permissions reduction.\n",
                        "key": "userEmail",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The structured query filters to apply to the search query.\n",
                        "key": "structuredQueryFilters",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "id",
                              "value": "type_search:SingleFieldFilter"
                            }
                          }
                        }
                      },
                      {
                        "key": "searchOptions",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_search:DocumentCollectionSearchOptions"
                          }
                        }
                      },
                      {
                        "description": "Legacy metadata filter expression to apply to the search query. Use structuredQueryFilters instead.\n",
                        "key": "metadataFilterExpression",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "availability": "Deprecated"
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_search:SearchDocumentCollectionResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "searchDocumentCollectionExample",
                    "path": "/v0/search/searchDocumentCollection",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "collectionId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                      "searchQuery": "ABC Corp",
                      "structuredQueryFilters": [
                        {
                          "field": "status",
                          "operator": "==",
                          "value": "Open"
                        }
                      ],
                      "userEmail": "jack@credal.ai",
                      "searchOptions": {
                        "maxChunks": 10,
                        "mergeContents": true,
                        "threshold": 0.8,
                        "enableSmartFiltering": true,
                        "enableQueryExtraction": true,
                        "enableReranking": true
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "searchId": "76b534be-5d5c-11ee-b268-87f1fd934c81",
                      "searchTermsUsed": ["ABC Corp"],
                      "structuredFiltersApplied": [
                        {
                          "field": "status",
                          "operator": "==",
                          "value": "Open"
                        }
                      ],
                      "results": [
                        {
                          "documentId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                          "documentName": "ABC Corp - Initial meeting transcript",
                          "documentMetadata": {
                            "customerName": "ABC Corp",
                            "meetingDate": "2021-01-01T00:00:00Z"
                          },
                          "chunks": [
                            {
                              "chunkId": "8d49fa7e-f09a-4bd4-ae94-4c089c9043a0",
                              "chunkIndex": 0,
                              "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit",
                              "score": 0.9
                            },
                            {
                              "chunkId": "c24f99f9-2477-461b-8f8f-90a82a40879d",
                              "chunkIndex": 1,
                              "text": "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore",
                              "score": 0.8
                            },
                            {
                              "chunkId": "6413d18c-b37f-4985-9045-cc8d6e100a17",
                              "chunkIndex": 2,
                              "text": "sunt in culpa qui officia deserunt mollit anim id est laborum.",
                              "score": 0.7
                            }
                          ],
                          "mergedContents": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore. sunt in culpa qui officia deserunt mollit anim id est laborum."
                        },
                        {
                          "documentId": "90998ceb-1c10-4d2a-96cb-acf89fa3005e",
                          "documentName": "XYZ Corp - Follow-up transcript",
                          "documentMetadata": {
                            "customerName": "XYZ Corp",
                            "meetingDate": "2021-01-02T00:00:00Z"
                          },
                          "chunks": [
                            {
                              "chunkId": "3664912a-3edb-4d88-b624-80db99d383e6",
                              "chunkIndex": 0,
                              "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit",
                              "score": 0.7
                            },
                            {
                              "chunkId": "da9d43a4-2927-442c-8e5c-b9ef86f56fc3",
                              "chunkIndex": 1,
                              "text": "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore",
                              "score": 0.9
                            },
                            {
                              "chunkId": "8d882e9f-8eda-479b-ae2a-359ebae7b626",
                              "chunkIndex": 2,
                              "text": "sunt in culpa qui officia deserunt mollit anim id est laborum.",
                              "score": 0.75
                            }
                          ],
                          "mergedContents": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore. sunt in culpa qui officia deserunt mollit anim id est laborum."
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\nimport uuid\n\nfrom credal import DocumentCollectionSearchOptions, SingleFieldFilter\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.search.search_document_collection(\n        collection_id=uuid.UUID(\n            \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n        ),\n        search_query=\"ABC Corp\",\n        structured_query_filters=[\n            SingleFieldFilter(\n                field=\"status\",\n                operator=\"==\",\n                value=\"Open\",\n            )\n        ],\n        user_email=\"jack@credal.ai\",\n        search_options=DocumentCollectionSearchOptions(\n            max_chunks=10,\n            merge_contents=True,\n            threshold=0.8,\n            enable_smart_filtering=True,\n            enable_query_extraction=True,\n            enable_reranking=True,\n        ),\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "import uuid\n\nfrom credal import DocumentCollectionSearchOptions, SingleFieldFilter\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search.search_document_collection(\n    collection_id=uuid.UUID(\n        \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    ),\n    search_query=\"ABC Corp\",\n    structured_query_filters=[\n        SingleFieldFilter(\n            field=\"status\",\n            operator=\"==\",\n            value=\"Open\",\n        )\n    ],\n    user_email=\"jack@credal.ai\",\n    search_options=DocumentCollectionSearchOptions(\n        max_chunks=10,\n        merge_contents=True,\n        threshold=0.8,\n        enable_smart_filtering=True,\n        enable_query_extraction=True,\n        enable_reranking=True,\n    ),\n)\n",
                        "exampleIdentifier": "searchDocumentCollectionExample"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient, Credal } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.search.searchDocumentCollection({\n    collectionId: \"82e4b12a-6990-45d4-8ebd-85c00e030c24\",\n    searchQuery: \"ABC Corp\",\n    structuredQueryFilters: [{\n            field: \"status\",\n            operator: Credal.Operator.Equal,\n            value: \"Open\"\n        }],\n    userEmail: \"jack@credal.ai\",\n    searchOptions: {\n        maxChunks: 10,\n        mergeContents: true,\n        threshold: 0.8,\n        enableSmartFiltering: true,\n        enableQueryExtraction: true,\n        enableReranking: true\n    }\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "collectionId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                        "searchQuery": "ABC Corp",
                        "structuredQueryFilters": [
                          {
                            "field": "status",
                            "operator": "==",
                            "value": "Open"
                          }
                        ],
                        "userEmail": "jack@credal.ai",
                        "searchOptions": {
                          "maxChunks": 10,
                          "mergeContents": true,
                          "threshold": 0.8,
                          "enableSmartFiltering": true,
                          "enableQueryExtraction": true,
                          "enableReranking": true
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "searchId": "76b534be-5d5c-11ee-b268-87f1fd934c81",
                        "searchTermsUsed": ["ABC Corp"],
                        "structuredFiltersApplied": [
                          {
                            "field": "status",
                            "operator": "==",
                            "value": "Open"
                          }
                        ],
                        "results": [
                          {
                            "documentId": "82e4b12a-6990-45d4-8ebd-85c00e030c24",
                            "documentName": "ABC Corp - Initial meeting transcript",
                            "documentMetadata": {
                              "customerName": "ABC Corp",
                              "meetingDate": "2021-01-01T00:00:00Z"
                            },
                            "chunks": [
                              {
                                "chunkId": "8d49fa7e-f09a-4bd4-ae94-4c089c9043a0",
                                "chunkIndex": 0,
                                "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit",
                                "score": 0.9
                              },
                              {
                                "chunkId": "c24f99f9-2477-461b-8f8f-90a82a40879d",
                                "chunkIndex": 1,
                                "text": "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore",
                                "score": 0.8
                              },
                              {
                                "chunkId": "6413d18c-b37f-4985-9045-cc8d6e100a17",
                                "chunkIndex": 2,
                                "text": "sunt in culpa qui officia deserunt mollit anim id est laborum.",
                                "score": 0.7
                              }
                            ],
                            "mergedContents": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore. sunt in culpa qui officia deserunt mollit anim id est laborum."
                          },
                          {
                            "documentId": "90998ceb-1c10-4d2a-96cb-acf89fa3005e",
                            "documentName": "XYZ Corp - Follow-up transcript",
                            "documentMetadata": {
                              "customerName": "XYZ Corp",
                              "meetingDate": "2021-01-02T00:00:00Z"
                            },
                            "chunks": [
                              {
                                "chunkId": "3664912a-3edb-4d88-b624-80db99d383e6",
                                "chunkIndex": 0,
                                "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit",
                                "score": 0.7
                              },
                              {
                                "chunkId": "da9d43a4-2927-442c-8e5c-b9ef86f56fc3",
                                "chunkIndex": 1,
                                "text": "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore",
                                "score": 0.9
                              },
                              {
                                "chunkId": "8d882e9f-8eda-479b-ae2a-359ebae7b626",
                                "chunkIndex": 2,
                                "text": "sunt in culpa qui officia deserunt mollit anim id est laborum.",
                                "score": 0.75
                              }
                            ],
                            "mergedContents": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore. sunt in culpa qui officia deserunt mollit anim id est laborum."
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Search across all documents in a document collection using the document metadata and contents.",
                "authed": true
              }
            ],
            "types": [
              "type_search:DocumentCollectionSearchOptions",
              "type_search:SearchDocumentCollectionResponse",
              "type_search:DocumentCollectionSearchResult",
              "type_search:SearchResultChunk",
              "type_search:SingleFieldFilter"
            ],
            "subpackages": [],
            "urlSlug": "search",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_users": {
            "subpackageId": "subpackage_users",
            "name": "users",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.credal.ai/api"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "metadata",
                "method": "PATCH",
                "id": "metadata",
                "originalEndpointId": "endpoint_users.metadata",
                "name": "Metadata",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/users"
                    },
                    {
                      "type": "literal",
                      "value": "/metadata"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_users:UserMetadataPatch"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "name": "Example0",
                    "path": "/v0/users/metadata",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": [
                      {
                        "metadata": {
                          "State": "NY",
                          "Job Role": "CEO"
                        },
                        "userEmail": "ravin@credal.ai"
                      },
                      {
                        "metadata": {
                          "State": "NY",
                          "Department": "Engineering"
                        },
                        "userEmail": "jack@credal.ai"
                      }
                    ],
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "credal"
                        },
                        "async_client": "import asyncio\n\nfrom credal import UserMetadataPatch\nfrom credal.client import AsyncCredalApi\n\nclient = AsyncCredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\n\n\nasync def main() -> None:\n    await client.users.metadata(\n        request=[\n            UserMetadataPatch(\n                metadata={\"State\": \"NY\", \"Job Role\": \"CEO\"},\n                user_email=\"ravin@credal.ai\",\n            ),\n            UserMetadataPatch(\n                metadata={\"State\": \"NY\", \"Department\": \"Engineering\"},\n                user_email=\"jack@credal.ai\",\n            ),\n        ],\n    )\n\n\nasyncio.run(main())\n",
                        "sync_client": "from credal import UserMetadataPatch\nfrom credal.client import CredalApi\n\nclient = CredalApi(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.users.metadata(\n    request=[\n        UserMetadataPatch(\n            metadata={\"State\": \"NY\", \"Job Role\": \"CEO\"},\n            user_email=\"ravin@credal.ai\",\n        ),\n        UserMetadataPatch(\n            metadata={\"State\": \"NY\", \"Department\": \"Engineering\"},\n            user_email=\"jack@credal.ai\",\n        ),\n    ],\n)\n",
                        "exampleIdentifier": "Example0"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "0.0.14",
                          "package": "@credal/sdk"
                        },
                        "client": "import { CredalClient } from \"@credal/sdk\";\n\nconst credal = new CredalClient({ apiKey: \"YOUR_API_KEY\" });\nawait credal.users.metadata([{\n        metadata: {\n            \"State\": \"NY\",\n            \"Job Role\": \"CEO\"\n        },\n        userEmail: \"ravin@credal.ai\"\n    }, {\n        metadata: {\n            \"State\": \"NY\",\n            \"Department\": \"Engineering\"\n        },\n        userEmail: \"jack@credal.ai\"\n    }]);\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "metadata": {
                            "State": "NY",
                            "Job Role": "CEO"
                          },
                          "userEmail": "ravin@credal.ai"
                        },
                        {
                          "metadata": {
                            "State": "NY",
                            "Department": "Engineering"
                          },
                          "userEmail": "jack@credal.ai"
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Bulk patch metadata for users",
                "authed": true
              }
            ],
            "types": ["type_users:UserMetadataPatch"],
            "subpackages": [],
            "urlSlug": "users",
            "webhooks": [],
            "websockets": []
          }
        },
        "auth": {
          "type": "bearerAuth",
          "tokenName": "apiKey"
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      }
    },
    "files": {
      "7c31d8ac-c064-48a3-99b0-9cee624ab752": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/credal-light-logo.svg",
      "cda907c3-4ffc-4e9b-8223-7ea9d6e81289": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/credal-dark-logo.svg",
      "f0ee8f70-d5ad-4e1a-a78c-a05a0a6cf87d": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/favicon.png",
      "2e71a59b-098f-49df-95b2-a5ba3eb88240": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/copilots/copilots-link.png",
      "43b4da2f-dd93-472a-b538-95eacc24e9b8": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/copilots/create-copilot.png",
      "d047e787-7eb6-42e8-a8c9-a9390b82aff6": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/copilots/create-copilot-form.png",
      "e902dd84-c77d-450a-ae6a-cfbf308d2c30": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/copilots/copilots-list.png",
      "1c27d73e-795f-4ecc-9d5e-2aa14d77ed7d": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/copilots/copilot-model-creativity.png",
      "540ea695-5df3-45a3-abbb-e04f09368322": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/copilots/copilot-prompt.png",
      "be37d063-18f1-4058-a481-6005e0309f65": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/copilots/copilot-searchable-data.png",
      "79a4b64b-47fc-421b-a1d7-340b5868fa45": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/copilots/copilot-pinned-data.png",
      "9eb1bbbf-34ff-4305-beac-2e4e6e952e24": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/copilots/copilot-deploy-to-slack.png",
      "c9450a90-ea05-4664-a224-b1c4cd45ddba": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/copilots/relevant-slack.png",
      "9aae0c35-c98b-472b-a5e0-e3f1ae97031d": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/copilots/relevant-slack-filter.png",
      "2245e575-7068-4c59-84d5-215da5d87619": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/bulk-analysis/in-depth-guide/bulk-analysis-tab.png",
      "bb740088-e73c-4ca2-9380-fbe519baeecf": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/bulk-analysis/in-depth-guide/link-source-data.png",
      "3b9775c0-1705-4af3-9cb1-9c8005d0e602": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/bulk-analysis/in-depth-guide/preview-table.png",
      "9da77aa4-7c54-4ae7-a47f-eef5f63c4a46": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/bulk-analysis/in-depth-guide/import-columns.png",
      "e3259705-0ee8-49a5-a0e6-9f7c8fc97963": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/bulk-analysis/in-depth-guide/empty-column-config.png",
      "a300bb18-98e5-44ac-86c9-1f2bd6972341": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/bulk-analysis/in-depth-guide/full-column-config.png",
      "c1914727-028a-4557-bced-0ce56018c11a": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/bulk-analysis/in-depth-guide/full-preview-table.png",
      "c0f6708e-0bec-4380-9944-e61a76c5c110": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/bulk-analysis/in-depth-guide/suggested-questions.png",
      "a405634c-dc59-4f85-8573-f2e7e6a8524d": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/bulk-analysis/in-depth-guide/example-questions.png",
      "1efa003c-e9af-440d-bd96-307b56141d31": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/bulk-analysis/in-depth-guide/running-preview.png",
      "bf8903ea-0b9b-4c11-a3fb-91ca477923d2": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/bulk-analysis/in-depth-guide/run-tab.png",
      "78adde5f-e24c-4e90-821b-cec2cb6e6d9d": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/prompt-engineering/prompt-snippets.png",
      "af7ac291-6da7-434d-b32c-d4d4e64715f2": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19%3A14%3A10.917Z/docs/assets/prompt-engineering/prompt-engineering.png"
    },
    "jsFiles": {},
    "filesV2": {
      "7c31d8ac-c064-48a3-99b0-9cee624ab752": {
        "type": "image",
        "width": 188,
        "height": 43,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/credal-light-logo.svg"
      },
      "cda907c3-4ffc-4e9b-8223-7ea9d6e81289": {
        "type": "image",
        "width": 1580,
        "height": 453,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/credal-dark-logo.svg"
      },
      "f0ee8f70-d5ad-4e1a-a78c-a05a0a6cf87d": {
        "type": "image",
        "width": 100,
        "height": 100,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/favicon.png"
      },
      "2e71a59b-098f-49df-95b2-a5ba3eb88240": {
        "type": "image",
        "width": 496,
        "height": 908,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/copilots/copilots-link.png"
      },
      "43b4da2f-dd93-472a-b538-95eacc24e9b8": {
        "type": "image",
        "width": 2254,
        "height": 690,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/copilots/create-copilot.png"
      },
      "d047e787-7eb6-42e8-a8c9-a9390b82aff6": {
        "type": "image",
        "width": 1368,
        "height": 708,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/copilots/create-copilot-form.png"
      },
      "e902dd84-c77d-450a-ae6a-cfbf308d2c30": {
        "type": "image",
        "width": 1710,
        "height": 722,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/copilots/copilots-list.png"
      },
      "1c27d73e-795f-4ecc-9d5e-2aa14d77ed7d": {
        "type": "image",
        "width": 580,
        "height": 378,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/copilots/copilot-model-creativity.png"
      },
      "540ea695-5df3-45a3-abbb-e04f09368322": {
        "type": "image",
        "width": 1456,
        "height": 576,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/copilots/copilot-prompt.png"
      },
      "be37d063-18f1-4058-a481-6005e0309f65": {
        "type": "image",
        "width": 1568,
        "height": 1190,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/copilots/copilot-searchable-data.png"
      },
      "79a4b64b-47fc-421b-a1d7-340b5868fa45": {
        "type": "image",
        "width": 1600,
        "height": 408,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/copilots/copilot-pinned-data.png"
      },
      "9eb1bbbf-34ff-4305-beac-2e4e6e952e24": {
        "type": "image",
        "width": 1698,
        "height": 490,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/copilots/copilot-deploy-to-slack.png"
      },
      "c9450a90-ea05-4664-a224-b1c4cd45ddba": {
        "type": "image",
        "width": 450,
        "height": 386,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/copilots/relevant-slack.png"
      },
      "9aae0c35-c98b-472b-a5e0-e3f1ae97031d": {
        "type": "image",
        "width": 824,
        "height": 96,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/copilots/relevant-slack-filter.png"
      },
      "2245e575-7068-4c59-84d5-215da5d87619": {
        "type": "image",
        "width": 518,
        "height": 984,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/bulk-analysis/in-depth-guide/bulk-analysis-tab.png"
      },
      "bb740088-e73c-4ca2-9380-fbe519baeecf": {
        "type": "image",
        "width": 2000,
        "height": 671,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/bulk-analysis/in-depth-guide/link-source-data.png"
      },
      "3b9775c0-1705-4af3-9cb1-9c8005d0e602": {
        "type": "image",
        "width": 2268,
        "height": 994,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/bulk-analysis/in-depth-guide/preview-table.png"
      },
      "9da77aa4-7c54-4ae7-a47f-eef5f63c4a46": {
        "type": "image",
        "width": 1912,
        "height": 1244,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/bulk-analysis/in-depth-guide/import-columns.png"
      },
      "e3259705-0ee8-49a5-a0e6-9f7c8fc97963": {
        "type": "image",
        "width": 1568,
        "height": 994,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/bulk-analysis/in-depth-guide/empty-column-config.png"
      },
      "a300bb18-98e5-44ac-86c9-1f2bd6972341": {
        "type": "image",
        "width": 1568,
        "height": 994,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/bulk-analysis/in-depth-guide/full-column-config.png"
      },
      "c1914727-028a-4557-bced-0ce56018c11a": {
        "type": "image",
        "width": 2214,
        "height": 994,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/bulk-analysis/in-depth-guide/full-preview-table.png"
      },
      "c0f6708e-0bec-4380-9944-e61a76c5c110": {
        "type": "image",
        "width": 2294,
        "height": 1224,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/bulk-analysis/in-depth-guide/suggested-questions.png"
      },
      "a405634c-dc59-4f85-8573-f2e7e6a8524d": {
        "type": "image",
        "width": 2294,
        "height": 674,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/bulk-analysis/in-depth-guide/example-questions.png"
      },
      "1efa003c-e9af-440d-bd96-307b56141d31": {
        "type": "image",
        "width": 2364,
        "height": 1240,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/bulk-analysis/in-depth-guide/running-preview.png"
      },
      "bf8903ea-0b9b-4c11-a3fb-91ca477923d2": {
        "type": "image",
        "width": 2350,
        "height": 994,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/bulk-analysis/in-depth-guide/run-tab.png"
      },
      "78adde5f-e24c-4e90-821b-cec2cb6e6d9d": {
        "type": "image",
        "width": 2382,
        "height": 1394,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/prompt-engineering/prompt-snippets.png"
      },
      "af7ac291-6da7-434d-b32c-d4d4e64715f2": {
        "type": "image",
        "width": 1694,
        "height": 1438,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/credal.docs.buildwithfern.com/2024-11-04T19:14:10.917Z/docs/assets/prompt-engineering/prompt-engineering.png"
      }
    },
    "pages": {
      "docs/pages/guides/overview.mdx": {
        "markdown": "<Callout intent=\"success\">**Your security is our business**</Callout>\n<br />\n\nWelcome to Credal's documentation! Here you'll find information to get started as well as our API Reference.\n\n<Cards>\n  <Card\n    title=\"Use Cases\"\n    icon=\"fa-solid fa-head-side-brain\"\n    href=\"https://www.credal.ai/use-cases\"\n  />\n  <Card\n    title=\"API Reference\"\n    icon=\"fa-solid fa-code\"\n    href=\"/api-reference\"\n  />\n\n</Cards>\n\n<br />\n\n<Cards>\n  <Card title=\"Blog\" icon=\"fa-solid fa-signal\" href=\"https://credal.ai/blog\" />\n  <Card\n    title=\"Security\"\n    icon=\"fa-solid fa-shield-halved\"\n    href=\"https://www.credal.ai/security\"\n  />\n</Cards>\n\n## Why Credal\n\n1. **Secure**: Integrate in weeks, not months. We offer a modern, well-documented API.\n\n2. **Connections**: We connect to every major data source and provide secure APIs and Chatbots that let employees safely use that data with AI in their normal workflows.\n\n3. **Loved by developers**: The Credal features are backwards-compatible with OpenAI and Anthropic. This means you can add Credal's security benefits to your app, without significant code changes.\n\n## Security\n\nOur Founders and employees have received Government security clearances\nin the US and UK. We have led internationally recognized AI security projects\nfor the US Government's Military and Healthcare infrastructure. We have\nleveraged this experience to make sure our application is built securely from the ground up.\n\n- Data encrypted at all times in transit and at rest.\n\n- Regular penetration testing and vulnerability scanning.\n\n- 24/7 monitoring of security logs from CloudWatch, Guard Duty, and other tools.\n\n- Supports single tenant deployment.\n"
      },
      "docs/pages/guides/copilots/quick-start.mdx": {
        "markdown": "Credal's AI Copilots empower users to set up **dedicated assistants** for a wide range of use cases, from customer support to contract review.\n\nYou can think of Copilots as special-purposes AIs that you create, by specifying an AI model, data they should use, and a custom prompt.\n\nYou can then talk to them in a chat UI or deploy them to Slack or another application to help you perform workflows or answer questions. For example, a Slack Copilot in a channel could listen out for questions about benefits, and answer those. They combine AI with your data to provide accurate, context-aware responses, while citing their sources.\n\n<Steps>\n### Create Your Copilot\n\nFrom the main screen, click “Copilots” in the navigation menu:\n\n<Frame>\n  <img src=\"file:2e71a59b-098f-49df-95b2-a5ba3eb88240\" width=\"150\" />\n</Frame>\n\nThen click “Create Copilot”:\n\n<Frame>\n  <img src=\"file:43b4da2f-dd93-472a-b538-95eacc24e9b8\" />\n</Frame>\n\nGive your copilot a Name and add a Description of its function in the pop-out form. You can always come back and edit these later. _Descriptions should be detailed enough to describe what kind of queries the copilot is responsible for._\n\n<Frame>\n  <img src=\"file:d047e787-7eb6-42e8-a8c9-a9390b82aff6\" width=\"500\" />\n</Frame>\n\nYou can click on “Copilots” in your left sidebar anytime to view the full list of Copilots you've created or that have been shared with you.\n\n<Frame>\n  <img src=\"file:e902dd84-c77d-450a-ae6a-cfbf308d2c30\" />\n</Frame>\n\n### Configure the Copilot\n\nNow your copilot is set up, Credal will automatically direct you to the configure page, where you can tune your copilot for your use case. You can return to this page to edit your settings at any time. (For a detailed explanation of all the options, please see our [Detailed Copilots User Guide](https://www.notion.so/AI-Copilots-In-Depth-Guide-73e09c563d9246cca5241890efef5de4?pvs=21).)\n\n1. Your **Metadata** (Name + Description) will be set already.\n2. You can use the default **Model** (GPT-4o) for now, but feel free to experiment with OpenAI o1, Claude or any of the other models too.\n3. **Creativity**. We recommend starting with “balanced” or “precise”; “creative” is best for brainstorming, creative writing, or marketing use cases.\n\n<Frame>\n  <img src=\"file:1c27d73e-795f-4ecc-9d5e-2aa14d77ed7d\" width=\"400\" />\n</Frame>\n\n4. **Prompt**\n   Here you can provide a custom prompt, which will provide the copilot with context and instructions on how to handle user queries. By default, Credal instructs copilots to be helpful, honest, and to the point and to let users know when it is unsure of the answer.\n\n<Frame>\n  <img src=\"file:540ea695-5df3-45a3-abbb-e04f09368322\" />\n</Frame>\n\nYou can revise this prompt to include the background information and instructions relevant to your Copilot. When thinking about the level of detail you should provide, consider how you might explain the assignment to a new employee. Your explanation might include:\n\n- background information on the company;\n- the intended users;\n- the topics the copilot will be dealing with;\n- any relevant guidelines or policies; and\n- any other relevant considerations.\n\nThe content and depth of prompts will vary by use case.\n\n<AccordionGroup>\n  <Accordion title=\"Example Prompt: Federal Rules of Court Copilot\">\n*You are a diligent, objective, detail-oriented, assistant. Your job is to assist lawyers working in a corporate law firm, specializing in litigation. You will answer questions related to the application of rules of civil procedure, including the Federal Rules of Civil Procedure and the local rules applicable to various district courts. You will respond to questions and prompts truthfully.*\n\n_Instructions:_\n\n- _Below is context to help you answer, followed by a prompt: read it and provide a helpful, honest, and to the point answer based only on the context provided._\n- _If you're unsure of an answer, you can say \"I don't know\" or \"I'm not sure\"._\n- _When providing a response, always include a reference to the rule number which contains the answer._\n\n_The Federal Rules of Civil Procedure are procedural rules that apply to civil court cases in United States federal district courts. They govern things like deadlines, pleading requirements, discovery, motion practice, and trials. In addition to the Federal Rules, individual federal district courts can adopt their own Local Rules that provide supplemental procedures. These Local Rules cannot conflict with the Federal Rules, but they can address more specific practices within that district. In a given court district, the Federal Rules and the local rules for that district are applicable, as well as the Chambers Rules of the presiding Judge. Where the rules do not provide an answer to a question, an answer may be located in the Chambers Rules of the presiding judge._\n\n_--- Start Context ---_\n_{{data}}_\n_--- End Context ---_\n\n  </Accordion>\n  <Accordion title=\"Example Prompt: Credal's Information Security Copilot\">\n    *You are a friendly helpful, honest assistant, who helps Credal company employees answer questions and prompts truthfully about information security questionnaires. Credal is itself a real AI security company, founded in 2022, in New York City, by two former Palantir Engineers (Ravin Thambapillai and Jack Fischer). Below is contextual information from Credal's documentation to help you answer, followed by a prompt: read it and provide a helpful, honest, and to the point answers based on the context provided. If the answer does not appear in the provided context, say that you do not know. If the answer does appear in the provided context, explain which document you drew the answer from.*\n\n_--------- Context: ---------_\n_{{data}}_\n_--------- End Context ---------_\n\n  </Accordion>\n  </AccordionGroup>\n\n5. **Data**\n   The data you provide will be the source of truth for your copilot. Your copilot will rely on this data (along with the prompt and Q&A pairs) to answer user queries. There are two types of data you can specify here:\n\n   - **Searchable Sources**\n     You should provide your Copilot with sufficient data relevant to its area of expertise. It will search these sources for information relevant to user questions, and pass just the most relevant information to the AI model. Use the toggle to enable searchable sources and use the search bar to add sources.\n\n     <Frame caption=\"We provided our infosec copilot with all of Credal's information security documentation.\">\n       <img src=\"file:be37d063-18f1-4058-a481-6005e0309f65\" />\n     </Frame>\n\n   - **Pinned Data**\n     By pinning data sources, you instruct your copilot to pass the full contents of the document to the AI for every user question. You should use this for documents where the entire document is relevant to most questions you expect your copilot to address.\n     <Frame caption=\"Here, we pinned our infosec FAQs when setting up Credal's Infosec copilot.\">\n       <img src=\"file:79a4b64b-47fc-421b-a1d7-340b5868fa45\" />\n     </Frame>\n\n### Deploy Your Copilot to Slack\n\nOnce you have a copilot set up, you can use it directly in Credal, or deploy it to Slack or other tools through the API. You can set up a deployment in the “Deploy” tab. For this short guide, we'll cover Slack only; please refer to the detailed guide for the other options.\n\nTo deploy a copilot through Slack, simply use the below toggle to turn on Slack deployments and select the channel(s) you want to deploy it to.\n\n<Frame>\n  <img src=\"file:9eb1bbbf-34ff-4305-beac-2e4e6e952e24\" />\n</Frame>\n\nYou can choose to have your copilot answer all messages in a given channel or only those that meet certain criteria:\n\n<Frame>\n  <img src=\"file:9eb1bbbf-34ff-4305-beac-2e4e6e952e24\" />\n</Frame>\n\n- **All messages**: will answer all queries in the connected Slack channel.\n- **All relevant messages**: will respond to all queries matching the [Description](https://www.notion.so/Getting-Started-With-AI-Copilots-171cfe73b8df496a9db29f60046eaf06?pvs=21) of the copilot.\n- **All messages matching filter**: will respond to messages that match the filter criteria. In the example in the screenshot, the copilot will only respond to prompts containing “?”.\n\n<Frame>\n  <img src=\"file:c9450a90-ea05-4664-a224-b1c4cd45ddba\" />\n</Frame>\n<Frame>\n  <img src=\"file:9aae0c35-c98b-472b-a5e0-e3f1ae97031d\" />\n</Frame>\n\nIf more than one copilot is deployed to a given Slack channel, Credal will triage user requests based on the Description of each copilot to determine which, if any, should answer the question.\n\n   </Steps>\n\nThat's all! The [detailed guide](https://www.notion.so/AI-Copilots-In-Depth-Guide-73e09c563d9246cca5241890efef5de4?pvs=21) contains more information, including on deploying this to non-Slack applications, and a more detailed explanation of the options in Copilots.\n\nFor questions or support, reach out to your Credal team on Slack or at [support@credal.ai](mailto:support@credal.ai).\n"
      },
      "docs/pages/guides/copilots/in-depth-guide.mdx": {
        "markdown": "Credal's AI copilots empower users to set up dedicated assistants for a wide range of use cases, from customer support to contract review.\n\nCopilots can assist with any task that combines AI and data. Copilots are designed to be experts on the data and context you provide. They combine AI with your data to provide accurate, context-aware responses, while citing their sources.\n\nCopilots can participate in your Slack channels, be directly accessed in Credal, or respond via API in your own app or backend service.\n\n<br />\n\nVisit the [AI Copilots User Guide](https://credalai.notion.site/credalai/AI-Copilots-User-Guide-73e09c563d9246cca5241890efef5de4) for in-depth setup instructions and information.\n"
      },
      "docs/pages/guides/bulk-analysis.mdx": {
        "markdown": "Credal’s Bulk Analysis feature allows users to analyze a collection of documents or rows in a spreadsheet simultaneously, using LLMs or Credal Copilots. Use it to automatically extract fields from, classify or synthesize multiple documents simultaneously.\n\n<br />\n\n## In Depth Guide\n\n_This is a 20 minute guide to setting up and running a Bulk Analysis in Credal. Prerequisites are that you have read the [AI Copilots User guide](https://www.notion.so/AI-Copilots-In-Depth-Guide-73e09c563d9246cca5241890efef5de4?pvs=21)._\n\nBulk Analysis is a powerful tool that you can use to **accelerate** analyses of a large number of documents, transcripts, or spreadsheets using LLMs. If you have a large amount of documents or data and you want to be able to classify each, extract key fields, or in any other way ask the same questions across each of the documents, this Credal feature will help you accomplish that by parallelizing your LLM requests for each document.\n\nIn this guide, we will walk through how to set up and run Bulk Analysis in detail. For a quick overview of this feature, visit our [blog](https://www.credal.ai/blog/introducing-bulk-analysis-the-detail-oriented-way-to-interpret-a-collection-of-documents)!\n\n## Step 1: Prep your source data\n\nThe essence of bulk analysis is having a ton of data that you want to perform some bulk action on. \n\nYou can choose to either use a Document Collection or a Tabular formed Data Source as your Bulk Analysis template. If you choose a Document Collection, Bulk Analysis will flatten any folder hierarchies and list each individual document as a row in the Bulk Analysis. If you choose a spreadsheet, each row will be considered a separate data source.\n\n### Using a Document Collection\n\nNavigate to the “Document Collection” tab on the left of the Credal UI. \n\nCreate a Document Collection and either manually or via API upload data you want to analyze to Credal. This might be sales transcripts as a series of documents, a Jira project, or a folder with meeting notes. \n\n![bulk-analysis-tab.png](file:2245e575-7068-4c59-84d5-215da5d87619)\n\n### Using Tabular Data\n\nAlternatively, if your data is structured in a spreadsheet, you can opt to use this format as your input for Bulk Analysis. This is especially useful if your data is already neatly organized into rows and columns. As of today, Credal will only look at the first sheet in a Google Sheets file. More functionality to come!\n\n## Step 2: Create your first Bulk Anaysis\n\nNavigate to the Bulk Analysis tab on the left of the Credal home page.\n\nCreate a new Bulk Analysis the same way you would create a new Document Collection or Copilot. The description isn’t being used anywhere but it’s certainly helpful to be as descriptive as possible for collaborative efforts.\n\n### Linking Source Data\n\n![link-source-data.png](file:bb740088-e73c-4ca2-9380-fbe519baeecf)\n\nSelect the Document Collection or Spreadsheet that you want to analyze. \n\n### Validating Setup\n\nAfter linking, double check that the rows of the spreadsheet or files in the Document Collection populate the Preview Table rows (below the Data Source select).\n\n## Step 3: Create columns to extract key insights\n\nThis is the heart of Bulk Analysis. Now that you’ve selected a collection/spreadsheet, your Preview table should look something like this:\n\n![preview-table.png](file:3b9775c0-1705-4af3-9cb1-9c8005d0e602)\n\nIf you are looking to streamline Suggested Questions defined in a Copilot (or multiple Copilots), click \"Import Columns\" and choose the questions you care about from any combination of Copilots.\n\n![import-columns.png](file:9da77aa4-7c54-4ae7-a47f-eef5f63c4a46)\n\nAlternatively, you can click on “Add column+” to manually add prompts using a Copilot of your choice without any linking:\n\n![empty-column-config.png](file:e3259705-0ee8-49a5-a0e6-9f7c8fc97963)\n\nThe column name you assign should concisely describe the content you are extracting from the data, the prompt will be sent to the LLM along with your document, and the Copilot of your choice will be the specialized assistant assigned for the job!\n\nHere’s how someone might create a column for generating a cold outbound email based on the attached document. The selected Copilot has specific context and a customized background prompt that contains the exact guidelines for how I would want to write a cold email. \n\n![full-column-config.png](file:a300bb18-98e5-44ac-86c9-1f2bd6972341)\n\nIn the end, I’ll have a table that looks like this:\n\n![full-preview-table.png](file:c1914727-028a-4557-bced-0ce56018c11a)\n\nNotice how each column has a specific detail it’s extracting or content it is generating with a customized assistant!\n\n### Writing Good Prompts\n\nWriting good prompts is the key to getting meaningful insights from your input data. To write these prompts, it is important to deeply think about what trends and insights you want to uncover from your bulk analysis source data. We highly recommend testing initially with the Suggested Questions feature in the Copilot configuration tab. \n\n![suggested-questions.png](file:c0f6708e-0bec-4380-9944-e61a76c5c110)\n\nWhen it comes to what questions you are asking, the freedom is all yours. You might be summarizing content, generating new content, or answering a simple Yes or No question. Let’s say I am analyzing trends for Jira ticket blockers. To accomplish this, I might want to count for each ticket how many blockers stalled progress on it over the course of its completion and analyze what kinds of tickets experienced more blockers than others. The prompts I’d write would then be:\n\n![example-questions.png](file:a405634c-dc59-4f85-8573-f2e7e6a8524d)\n\nNotice that I do not ask for metadata such as “Assignee” or “Date” since this data is structured data on a ticket. Credal will automatically export that information for you. Now once I run my Bulk Analysis,  I have the ability to detect any outliers for # of blockers, access what they were, and understand whether the bottleneck is in the frontend or backend team.\n\n### Testing and Refining your Prompts\n\nAfter you’ve done a first pass at writing questions that you believe will extract meaningful data from each source or spreadsheet row, it’s time to refine the prompts. The Preview tab will be super helpful for testing out the prompts you’ve written. The practice of refining prompts to give you responses you want is called Prompt Engineering. You can learn more here: [Prompting with Credal 101](https://docs.credal.ai/getting-started/prompting). Once you feel confident, copy-paste over your prompts into the appropriate columns in your Bulk Analysis table.\n\n## Step 4: Run!\n\nIt’s time. And it really is as easy as clicking a button.\n\n### Performing a Preview Run\n\nBefore running the full analysis, it’s wise to do a preview run on a smaller subset of data. This helps you identify any issues early on. The preview will only display the first 5 documents/rows from your source data which allows you to quickly iterate on your Bulk Analysis configuration. This is a good place to further tweak prompts, adjusting for better quality and output structure.\n\n![running-preview.png](file:1efa003c-e9af-440d-bd96-307b56141d31)\n\n### Conducting a Full Run\n\nOnce satisfied with the preview, proceed to the “Run” tab to conduct a full run. This will enable you to analyze every document in your collection comprehensively, unlocking thorough and actionable insights.\n\n## Interpreting Results\n\nOnce you've navigated to the Run tab to do a full Bulk Analysis, you can do one of two things.\n\n![run-tab.png](file:bf8903ea-0b9b-4c11-a3fb-91ca477923d2)\n\n### Chat with Results\n\nPost-analysis, Credal allows you to interact with your results conversationally. You can ask, “What were some common themes around security and governance?” or “Exactly how many customers mentioned the Salesforce integration as being useful for them?” This interactive feature can highlight trends and deep-dive into specific insights seamlessly.\n\n### Download CSV\n\nFor further analysis, you can download the results as a CSV file. This is useful for creating charts, aggregations, or integrating results with other data tools. If you’ve crafted your questions well, you can even create numerical charts or extract mathematical findings by attaching the output spreadsheet to the web UI and turning on Code Interpreter!\n\n### Exploring Further Capabilities\n\nBeyond primary analysis, there are exciting future expansions on the horizon, such as:\n\n1. Transforming Bulk Analysis results into ongoing valuable data assets. This means your output table will be continuously updated without your supervision.\n2. Integrating the results into live dashboards like Tableau for continuous visual updates.\n"
      },
      "docs/pages/guides/permissions-service.mdx": {
        "markdown": "Credal's Permission Service seamlessly synchronizes ACL information across a diverse range of data sources, including\nGoogle Drive, Microsoft Sharepoint, Zendesk, Confluence, and more. We keep track of which users and groups are authorized\nto perform what actions across the various data sources we integrate with.\n\nOur retrieval APIs use this service to performantly return results from only the documents that a user has access to\nin the source system.\n\nThe Permission Service API (Beta) gives developers direct access to the synced ACL information, allowing them to build\ncustom applications that are connected to multiple data sources while maintaining a unified, access-controlled experience for end users.\n"
      },
      "docs/pages/guides/oauth.mdx": {
        "markdown": "<Callout intent=\"warning\">\n  Credal's OAuth flow for API access is in private Beta.  Contact Credal to get started.\n</Callout>\n\n"
      },
      "docs/pages/guides/prompting.mdx": {
        "markdown": "To ensure that you get the most accurate and helpful responses from Credal, it's crucial to craft your prompts effectively.\n\nHere's why prompt engineering is worth your attention:\n\n1. **Improves Accuracy**: Well-crafted prompts lead to more precise and relevant answers, reducing the likelihood of misinterpretations or general responses.\n2. **Saves Time**: By clearly directing the AI, you can obtain the desired information with fewer attempts.\n3. **Enhances Complexity Handling**: Complex tasks often require nuanced understanding. Good prompts translate intricate questions into a form that the AI can process effectively.\n4. **Facilitates Innovation**: Mastering prompt engineering allows you to push the boundaries of AI’s applications, driving innovation and enabling new solutions to complex problems.\n\nThis guide will provide you with the foundational understanding and practical steps to optimize your interactions with Credal for precise and valuable responses.\n\n## 1. What is the Background Prompt\n\nThis is arguably the most effective way to customize your copilot. It defines the landscape in which your copilot operates, detailing its role, response style, and the types of queries it should handle. Crafting an effective background prompt ensures your copilot can seamlessly integrate into your specific use case.\n\n## 2. Constructing a Background Prompt\n\n### Role and Goal\n\nOutline the specific role your copilot is expected to fulfill. Include details such as:\n\n- **Who**: The specific team or individual utilizing the copilot.\n- **What**: The usual nature of queries or tasks it will address.\n- **Where**: The operational context, be it customer service, technical support, etc.\n\n**Example**\n\n```\nRole and Goal:\nYou assist the financial advisory team by analyzing client interactions to enhance service quality. You focus on assessing customer sentiment and identifying potential upsell opportunities from each interaction. Provide insights on key financial topics discussed.\n```\n\n### Output Format\n\nLLM's can be a bit unpredictable, but luckily we can just tell them what to do with clear instructions. Providing a template for expected responses is an example of this. \n\nHere’s an example of setting up an output format for entity extraction:\n\n```\nExtract the important entities mentioned in the context.\n\nOutput format:\nCompany names: <comma_separated_list_of_company_names>\nPeople names: <comma_separated_list_of_people_names>\nSpecific topics: <comma_separated_list_of_specific_topics>\nGeneral themes: <comma_separated_list_of_general_themes>\n\n```\n\nAnother more crude example:\n\n```\nProvide a riddle using the following structure:\n- Riddle: <the puzzle or brainteaser>\n- Answer: <the solution to the puzzle>\n- Difficulty level: <a difficulty rating from 1 (easy) to 10 (challenging)>\n```\n\n### Response Guidelines\n\nCraft detailed instructions that anticipate potential pitfalls and standard operational procedures. Your Copilot will only know as much as you tell it. Noticing that the responses are too long? Specificy response length! Think there's too much fluff in the language? Ask for concise language. \n\nCredal has prompt snippets right under the background prompt in the Copilot Configuration tab. We recommend using those as a starting point for generating more useful responses, however your specific use case may require much more detail!\n\n![prompt-snippets.png](file:78adde5f-e24c-4e90-821b-cec2cb6e6d9d)\n\nHere’s an example of a fully crafted background prompt…\n\n```\nRole and Goal:\nYou work in Credal's Customer Success team, and your goal is to enhance customer support quality by analyzing interactions for performance improvement and coaching. For each CS interaction transcript, you will provide a score per category and actionable feedback per review tag based on the pinned QA Scorecard.\n\nOutput:\n1 scoring table with following 2 columns: Category, # of Points\n1 feedback table with following 2 columns: Review Tag, Actionable Feedback\n\nResponse Guidelines:\n-If there are any trust-related issues in the transcript based on the trust-specific review tags in the scorecard, auto-fail the entire ticket and give an overall score of 0; if there are no trust-related issues, put \"N/A\"\n-Scorecard categories have specific corresponding review tags. Give full points in this category only if there are no review tag failures, and 0 points if the transcript contains any of the corresponding review tags\n-\"# of Points\" refers to score per category for the attached transcript\n-Include all review tags in the table and each review tag (e.g., \"[T] Disclosing private Credal/TaskUs Information e.g. leaking product launches\") should be its own row with corresponding feedback\n-Make the feedback specific, pull examples from the transcript, and provide sample improved talking points\n-Your tone is professional, concise, helpful, and coaching\n\n--- Start Context ---\n{{data}}\n--- End Context ---\n```\n\n## 3. Start with Simple Prompts and Iterate\n\nBegin with simple prompts (zero-shot) and evolve to more complex ones (few-shot) as needed. If further precision is required, consider fine-tuning the AI model:\n\n**Zero-shot Example:**\n\n```\nList key features of the following product.\nText: {text}\nFeatures:\n\n```\n\n**Few-shot Example:**\n\n```\nText 1: \"The new Credal AI platform offers enhanced data security.\"\nFeatures 1: enhanced data security\n##\nText 2: \"Credal AI enables seamless API integration.\"\nFeatures 2: seamless API integration\n##\nText 3: {text}\nFeatures 3:\n\n```\n\nAnother example…\n\n- **Zero-shot Example:**\n\n  ```\n  Product Description: \"This is a state-of-the-art vacuum cleaner with HEPA filters.\"\n  List its selling points.\n\n  ```\n\n- **Few-shot Example:**\n  ```\n  Text 1: \"This oven offers precise temperature control and a self-cleaning feature.\"\n  Selling Points 1: precise temperature control, self-cleaning feature\n  ##\n  Text 2: \"This smartphone has a high-resolution camera and long-lasting battery.\"\n  Selling Points 2: high-resolution camera, long-lasting battery\n  ##\n  Text 3: \"This laptop includes a high-speed processor and lightweight design.\"\n  Selling Points 3:\n  ```\n\n## 4. **Clarity Over Vagueness**\n\nAvoid imprecise language. Precise prompts lead to more accurate outcomes:\n\n**Less effective:**\n\n```\nThe description for this product should be fairly short, a few sentences only.\n\n```\n\n**Better:**\n\n```\nDescribe this product in a 3 to 5 sentence paragraph.\n\n```\n\n## 5. Say What to Do Instead of What Not to Do\n\nProvide positive instructions to guide the model effectively.\n\n**Less effective:**\n\n```\nDO NOT REPEAT.\n\n```\n\n**Better:**\n\n```\nEncourage concise problem-solving with clear instructions. Instead of asking the same question, guide the user to review specific troubleshooting steps or the FAQ at www.example.com/FAQ.\n```\n\n## 6. Save your work in a “Suggested Question”\n\nSo, you did all the work to craft the perfect prompt for your super specific use-case… only to lose it when you hit send? Think again. If you’re a collaborator on a copilot, you can copy-paste your work of art into a Suggested Question in the Copilot config. Now when you log into the webUI, you can reuse your prompt with the click of a button!\n\n![prompt-engineering.png](file:af7ac291-6da7-434d-b32c-d4d4e64715f2)\n\nWe currently don’t support autocompleting prompts for our Slack integration. For Copilots deployed to Slack, we recommend crafting the background prompt to handle the diverse types of messages sent in the channel of your choice.\n\n## 7. Use the Latest Model\n\nUtilize the most recent and capable models to achieve the best results. Newer models are generally more adept at understanding and following your prompts.\n\n## 8. Incorporate Feedback Loops\n\nContinuously refine your prompts based on your impression of Copilot responses to improve accuracy and relevance. Negative feedback logs are a great resource for this!\n\nWe are currently working on some features that will incorporate negative feedback and usage trends into the copilot configuration workflow by suggesting ways in which you can improve your background prompt. Stay tuned!\n\n## 9. What not to ask…\n\n1. Anything about access controls. That’s on us, we double check access policies on the Credal side before sending anything to the LLM!\n2. Anything about a Credal concept (Copilots, Document collections, \"pinned\" sources, etc.). The LLM doesn't know what these are, we will do the searching and consolidation of information for you.\n\n---\n\nFeel free to adapt these examples and practices to best fit your specific use cases with Credal AI.\n"
      }
    },
    "search": {
      "type": "singleAlgoliaIndex",
      "value": {
        "type": "unversioned",
        "indexSegment": {
          "id": "seg_credal.docs.buildwithfern.com_b9b99052-eb33-4706-ab9c-d6b68279181e",
          "searchApiKey": "MTkwMjVlNDZmYzU0ZWMzNzk5Y2Y4ODFjZTBiMDJjNzdjOTg4ZjE0OGIzYWNkMDc1MWM0MGUwZTYwMTk3MGI2Y2ZpbHRlcnM9aW5kZXhTZWdtZW50SWQlM0FzZWdfY3JlZGFsLmRvY3MuYnVpbGR3aXRoZmVybi5jb21fYjliOTkwNTItZWIzMy00NzA2LWFiOWMtZDZiNjgyNzkxODFlJnZhbGlkVW50aWw9MTczMDc3ODI1NQ=="
        }
      }
    },
    "id": "docs_definition_b99c79f5-6f95-4c63-acf5-4d6712387aae"
  },
  "lightModeEnabled": true
}
