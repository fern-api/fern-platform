/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernRegistry from "../../..";

export type Template =
    | FernRegistry.Template.Generic
    | FernRegistry.Template.Enum
    | FernRegistry.Template.DiscriminatedUnion
    | FernRegistry.Template.Union
    | FernRegistry.Template.Dict
    | FernRegistry.Template.Iterable;

export declare namespace Template {
    interface Generic extends FernRegistry.GenericTemplate, _Base {
        type: "generic";
    }

    interface Enum extends FernRegistry.EnumTemplate, _Base {
        type: "enum";
    }

    interface DiscriminatedUnion extends FernRegistry.DiscriminatedUnionTemplate, _Base {
        type: "discriminatedUnion";
    }

    interface Union extends FernRegistry.UnionTemplate, _Base {
        type: "union";
    }

    interface Dict extends FernRegistry.DictTemplate, _Base {
        type: "dict";
    }

    interface Iterable extends FernRegistry.IterableTemplate, _Base {
        type: "iterable";
    }

    interface _Base {
        imports?: string[];
        /**
         * We might not need this, but the idea here is to be able to omit if it's optional and undefined,
         * or default if omitted and required.
         */
        isOptional: boolean;
    }
}
