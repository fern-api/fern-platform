/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as FernRegistry from "../../../../../index";
import urlJoin from "url-join";

export declare namespace Cli {
    interface Options {
        environment?: core.Supplier<environments.FernRegistryEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

/**
 * CRUD API for managing CLI versions, as well as the corresponding IR metadata.
 */
export class Cli {
    constructor(protected readonly _options: Cli.Options = {}) {}

    /**
     * Get the latest CLI version that has not been yanked.
     *
     * @param {FernRegistry.generators.GetLatestCliReleaseRequest} request
     * @param {Cli.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.cli.getLatestCliRelease({
     *         releaseTypes: ["GA"],
     *         irVersion: 1
     *     })
     */
    public async getLatestCliRelease(
        request: FernRegistry.generators.GetLatestCliReleaseRequest = {},
        requestOptions?: Cli.RequestOptions
    ): Promise<
        core.APIResponse<FernRegistry.generators.CliRelease, FernRegistry.generators.cli.getLatestCliRelease.Error>
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                "/generators/cli/latest"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.generators.CliRelease,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.generators.cli.getLatestCliRelease.Error)?.error) {
                case "NoValidClisFoundError":
                    return {
                        ok: false,
                        error: _response.error.body as FernRegistry.generators.cli.getLatestCliRelease.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernRegistry.generators.cli.getLatestCliRelease.Error._unknown(_response.error),
        };
    }

    /**
     * Get the changelog for the specified CLI upgrade. The response will be a map of the generator version to it's corresponding changelog.
     *
     * @param {FernRegistry.generators.GetChangelogRequest} request
     * @param {Cli.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.cli.getChangelog({
     *         fromVersion: {
     *             type: "inclusive",
     *             value: "string"
     *         },
     *         toVersion: {
     *             type: "inclusive",
     *             value: "string"
     *         }
     *     })
     */
    public async getChangelog(
        request: FernRegistry.generators.GetChangelogRequest,
        requestOptions?: Cli.RequestOptions
    ): Promise<
        core.APIResponse<FernRegistry.generators.GetChangelogResponse, FernRegistry.generators.cli.getChangelog.Error>
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                "/generators/cli/changelog"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.generators.GetChangelogResponse,
            };
        }

        return {
            ok: false,
            error: FernRegistry.generators.cli.getChangelog.Error._unknown(_response.error),
        };
    }

    /**
     * Get the minimum CLI version that supports the given IR version. This does not include RCs.
     *
     * @param {number} irVersion
     * @param {Cli.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.cli.getMinCliForIr(1)
     */
    public async getMinCliForIr(
        irVersion: number,
        requestOptions?: Cli.RequestOptions
    ): Promise<core.APIResponse<FernRegistry.generators.CliRelease, FernRegistry.generators.cli.getMinCliForIr.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/generators/cli/for-ir/${encodeURIComponent(irVersion)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.generators.CliRelease,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.generators.cli.getMinCliForIr.Error)?.error) {
                case "NoValidClisFoundError":
                    return {
                        ok: false,
                        error: _response.error.body as FernRegistry.generators.cli.getMinCliForIr.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernRegistry.generators.cli.getMinCliForIr.Error._unknown(_response.error),
        };
    }

    /**
     * Update or create the specified CLI version.
     *
     * @param {FernRegistry.generators.CliReleaseRequest} request
     * @param {Cli.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.cli.upsertCliRelease({
     *         version: "string",
     *         createdAt: "2023-01-15",
     *         isYanked: {
     *             remediationVerision: "string"
     *         },
     *         changelogEntry: [{
     *                 type: "fix",
     *                 summary: "string",
     *                 links: {
     *                     "key": "value"
     *                 },
     *                 upgradeNotes: {
     *                     "key": "value"
     *                 },
     *                 added: {
     *                     "key": "value"
     *                 },
     *                 changed: {
     *                     "key": "value"
     *                 },
     *                 deprecated: {
     *                     "key": "value"
     *                 },
     *                 removed: {
     *                     "key": "value"
     *                 },
     *                 fixed: {
     *                     "key": "value"
     *                 }
     *             }],
     *         irVersion: 1,
     *         tags: ["string"]
     *     })
     */
    public async upsertCliRelease(
        request: FernRegistry.generators.CliReleaseRequest,
        requestOptions?: Cli.RequestOptions
    ): Promise<core.APIResponse<void, FernRegistry.generators.cli.upsertCliRelease.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                "/generators/cli"
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        return {
            ok: false,
            error: FernRegistry.generators.cli.upsertCliRelease.Error._unknown(_response.error),
        };
    }

    /**
     * Get the specified CLI version.
     *
     * @param {string} cliVersion
     * @param {Cli.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.cli.getCliRelease("string")
     */
    public async getCliRelease(
        cliVersion: string,
        requestOptions?: Cli.RequestOptions
    ): Promise<core.APIResponse<FernRegistry.generators.CliRelease, FernRegistry.generators.cli.getCliRelease.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/generators/cli/${encodeURIComponent(cliVersion)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.generators.CliRelease,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.generators.cli.getCliRelease.Error)?.error) {
                case "CliVersionNotFoundError":
                    return {
                        ok: false,
                        error: _response.error.body as FernRegistry.generators.cli.getCliRelease.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernRegistry.generators.cli.getCliRelease.Error._unknown(_response.error),
        };
    }

    /**
     * Get all CLI versions.
     *
     * @param {FernRegistry.generators.ListCliReleasesRequest} request
     * @param {Cli.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.generators.cli.listCliReleases({
     *         page: 1,
     *         pageSize: 1
     *     })
     */
    public async listCliReleases(
        request: FernRegistry.generators.ListCliReleasesRequest = {},
        requestOptions?: Cli.RequestOptions
    ): Promise<
        core.APIResponse<
            FernRegistry.generators.ListCliReleasesResponse,
            FernRegistry.generators.cli.listCliReleases.Error
        >
    > {
        const { page, pageSize } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (pageSize != null) {
            _queryParams["pageSize"] = pageSize.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                "/generators/cli"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.generators.ListCliReleasesResponse,
            };
        }

        return {
            ok: false,
            error: FernRegistry.generators.cli.listCliReleases.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
