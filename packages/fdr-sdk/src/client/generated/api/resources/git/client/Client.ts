/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as FernRegistry from "../../../index";
import urlJoin from "url-join";

export declare namespace Git {
    interface Options {
        environment?: core.Supplier<environments.FernRegistryEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}

/**
 * Produces an internal schema to easily track and view pull requests across Fern-managed repositories. This API is named `git` to allow for flexibility in adding other git providers down the line (e.g. gitlab).
 */
export class Git {
    constructor(protected readonly _options: Git.Options = {}) {}

    /**
     * Get a repository by its name (mirroring the Github API, this is the main get request).
     *
     * @param {string} repositoryOwner
     * @param {string} repositoryName
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernRegistry.git.getRepository("string", "string")
     */
    public async getRepository(
        repositoryOwner: string,
        repositoryName: string,
        requestOptions?: Git.RequestOptions
    ): Promise<core.APIResponse<FernRegistry.FernRepository, FernRegistry.git.getRepository.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/generators/github/repository/${encodeURIComponent(repositoryOwner)}/${encodeURIComponent(
                    repositoryName
                )}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.FernRepository,
            };
        }

        return {
            ok: false,
            error: FernRegistry.git.getRepository.Error._unknown(_response.error),
        };
    }

    /**
     * Get all repositories.
     *
     * @param {FernRegistry.ListRepositoriesRequest} request
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernRegistry.git.listRepositories({
     *         page: 1,
     *         pageSize: 1,
     *         organizationId: "string",
     *         repositoryName: "string",
     *         repositoryOwner: "string"
     *     })
     */
    public async listRepositories(
        request: FernRegistry.ListRepositoriesRequest = {},
        requestOptions?: Git.RequestOptions
    ): Promise<core.APIResponse<FernRegistry.ListRepositoriesResponse, FernRegistry.git.listRepositories.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                "/generators/github/repository/list"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.ListRepositoriesResponse,
            };
        }

        return {
            ok: false,
            error: FernRegistry.git.listRepositories.Error._unknown(_response.error),
        };
    }

    /**
     * Update or create the specified repository.
     *
     * @param {FernRegistry.FernRepository} request
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernRegistry.git.upsertRepository({
     *         type: "sdk",
     *         sdkLanguage: "string",
     *         id: {
     *             type: "github",
     *             id: "string"
     *         },
     *         name: "string",
     *         owner: "string",
     *         fullName: "string",
     *         url: "string",
     *         repositoryOwnerOrganizationId: "string",
     *         defaultBranchChecks: [{
     *                 checkId: "string",
     *                 repositoryOwner: "string",
     *                 repositoryName: "string",
     *                 ref: "string",
     *                 name: "string",
     *                 status: "string",
     *                 conclusion: "string",
     *                 checkRunUrl: "string",
     *                 createdAt: new Date("2024-01-15T09:30:00.000Z"),
     *                 completedAt: new Date("2024-01-15T09:30:00.000Z"),
     *                 rawCheckRun: {
     *                     "key": "value"
     *                 }
     *             }]
     *     })
     */
    public async upsertRepository(
        request: FernRegistry.FernRepository,
        requestOptions?: Git.RequestOptions
    ): Promise<core.APIResponse<void, FernRegistry.git.upsertRepository.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                "/generators/github/repository/upsert"
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        return {
            ok: false,
            error: FernRegistry.git.upsertRepository.Error._unknown(_response.error),
        };
    }

    /**
     * Delete specified repository.
     *
     * @param {string} repositoryOwner
     * @param {string} repositoryName
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernRegistry.git.deleteRepository("string", "string")
     */
    public async deleteRepository(
        repositoryOwner: string,
        repositoryName: string,
        requestOptions?: Git.RequestOptions
    ): Promise<core.APIResponse<void, FernRegistry.git.deleteRepository.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/generators/github/repository/${encodeURIComponent(repositoryOwner)}/${encodeURIComponent(
                    repositoryName
                )}/delete`
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        return {
            ok: false,
            error: FernRegistry.git.deleteRepository.Error._unknown(_response.error),
        };
    }

    /**
     * Get a pull request by its ID.
     *
     * @param {string} repositoryOwner
     * @param {string} repositoryName
     * @param {number} pullRequestNumber
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernRegistry.git.getPullRequest("string", "string", 1)
     */
    public async getPullRequest(
        repositoryOwner: string,
        repositoryName: string,
        pullRequestNumber: number,
        requestOptions?: Git.RequestOptions
    ): Promise<core.APIResponse<FernRegistry.PullRequest, FernRegistry.git.getPullRequest.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/generators/github/pull-request/${encodeURIComponent(repositoryOwner)}/${encodeURIComponent(
                    repositoryName
                )}/${encodeURIComponent(pullRequestNumber)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.PullRequest,
            };
        }

        return {
            ok: false,
            error: FernRegistry.git.getPullRequest.Error._unknown(_response.error),
        };
    }

    /**
     * Get all pull requests.
     *
     * @param {FernRegistry.ListPullRequestsRequest} request
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernRegistry.git.listPullRequests({
     *         page: 1,
     *         pageSize: 1,
     *         repositoryName: "string",
     *         repositoryOwner: "string",
     *         organizationId: "string",
     *         state: [FernRegistry.PullRequestState.Open],
     *         author: ["string"]
     *     })
     */
    public async listPullRequests(
        request: FernRegistry.ListPullRequestsRequest = {},
        requestOptions?: Git.RequestOptions
    ): Promise<core.APIResponse<FernRegistry.ListPullRequestsResponse, FernRegistry.git.listPullRequests.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                "/generators/github/pull-request/list"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.ListPullRequestsResponse,
            };
        }

        return {
            ok: false,
            error: FernRegistry.git.listPullRequests.Error._unknown(_response.error),
        };
    }

    /**
     * Update or create the specified pull request.
     *
     * @param {FernRegistry.PullRequest} request
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernRegistry.git.upsertPullRequest({
     *         pullRequestNumber: 1,
     *         repositoryName: "string",
     *         repositoryOwner: "string",
     *         author: {
     *             name: "string",
     *             email: "string",
     *             username: "string"
     *         },
     *         reviewers: [{
     *                 type: "user",
     *                 name: "string",
     *                 email: "string",
     *                 username: "string"
     *             }],
     *         title: "string",
     *         url: "string",
     *         checks: [{
     *                 checkId: "string",
     *                 repositoryOwner: "string",
     *                 repositoryName: "string",
     *                 ref: "string",
     *                 name: "string",
     *                 status: "string",
     *                 conclusion: "string",
     *                 checkRunUrl: "string",
     *                 createdAt: new Date("2024-01-15T09:30:00.000Z"),
     *                 completedAt: new Date("2024-01-15T09:30:00.000Z"),
     *                 rawCheckRun: {
     *                     "key": "value"
     *                 }
     *             }],
     *         state: FernRegistry.PullRequestState.Open,
     *         createdAt: new Date("2024-01-15T09:30:00.000Z"),
     *         updatedAt: new Date("2024-01-15T09:30:00.000Z"),
     *         mergedAt: new Date("2024-01-15T09:30:00.000Z"),
     *         closedAt: new Date("2024-01-15T09:30:00.000Z")
     *     })
     */
    public async upsertPullRequest(
        request: FernRegistry.PullRequest,
        requestOptions?: Git.RequestOptions
    ): Promise<core.APIResponse<void, FernRegistry.git.upsertPullRequest.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                "/generators/github/pull-request/upsert"
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        return {
            ok: false,
            error: FernRegistry.git.upsertPullRequest.Error._unknown(_response.error),
        };
    }

    /**
     * Delete specified pull request.
     *
     * @param {string} repositoryOwner
     * @param {string} repositoryName
     * @param {number} pullRequestNumber
     * @param {Git.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernRegistry.git.deletePullRequest("string", "string", 1)
     */
    public async deletePullRequest(
        repositoryOwner: string,
        repositoryName: string,
        pullRequestNumber: number,
        requestOptions?: Git.RequestOptions
    ): Promise<core.APIResponse<void, FernRegistry.git.deletePullRequest.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/generators/github/pull-request/${encodeURIComponent(repositoryOwner)}/${encodeURIComponent(
                    repositoryName
                )}/${encodeURIComponent(pullRequestNumber)}/delete`
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        return {
            ok: false,
            error: FernRegistry.git.deletePullRequest.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
