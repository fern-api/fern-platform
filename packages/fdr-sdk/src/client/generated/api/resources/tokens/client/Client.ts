/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as FernRegistry from "../../../index";
import urlJoin from "url-join";

export declare namespace Tokens {
    interface Options {
        environment?: core.Supplier<environments.FernRegistryEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class Tokens {
    constructor(protected readonly _options: Tokens.Options = {}) {}

    /**
     * Generate a token
     *
     * @param {FernRegistry.GenerateTokenRequest} request
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tokens.generate({
     *         orgId: FernRegistry.OrgId("string"),
     *         scope: "string"
     *     })
     */
    public async generate(
        request: FernRegistry.GenerateTokenRequest,
        requestOptions?: Tokens.RequestOptions
    ): Promise<core.APIResponse<FernRegistry.GenerateTokenResponse, FernRegistry.tokens.generate.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                "/tokens/generate"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.GenerateTokenResponse,
            };
        }

        return {
            ok: false,
            error: FernRegistry.tokens.generate.Error._unknown(_response.error),
        };
    }

    /**
     * Revoke a token
     *
     * @param {FernRegistry.RevokeTokenRequest} request
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tokens.revoke({
     *         orgId: FernRegistry.OrgId("string"),
     *         tokenId: FernRegistry.TokenId("string")
     *     })
     */
    public async revoke(
        request: FernRegistry.RevokeTokenRequest,
        requestOptions?: Tokens.RequestOptions
    ): Promise<core.APIResponse<void, FernRegistry.tokens.revoke.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                "/tokens/revoke"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        return {
            ok: false,
            error: FernRegistry.tokens.revoke.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
