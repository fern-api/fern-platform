/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernRegistry from "../../../../../index";
import * as core from "../../../../../../core";

export type Error =
    | FernRegistry.api.latest.getApiLatest.Error.ApiDoesNotExistError
    | FernRegistry.api.latest.getApiLatest.Error._Unknown;

export declare namespace Error {
    interface ApiDoesNotExistError {
        error: "ApiDoesNotExistError";
    }

    interface _Unknown {
        error: void;
        content: core.Fetcher.Error;
    }

    interface _Visitor<_Result> {
        apiDoesNotExistError: () => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    apiDoesNotExistError: (): FernRegistry.api.latest.getApiLatest.Error.ApiDoesNotExistError => {
        return {
            error: "ApiDoesNotExistError",
        };
    },

    _unknown: (fetcherError: core.Fetcher.Error): FernRegistry.api.latest.getApiLatest.Error._Unknown => {
        return {
            error: undefined,
            content: fetcherError,
        };
    },

    _visit: <_Result>(
        value: FernRegistry.api.latest.getApiLatest.Error,
        visitor: FernRegistry.api.latest.getApiLatest.Error._Visitor<_Result>
    ): _Result => {
        switch (value.error) {
            case "ApiDoesNotExistError":
                return visitor.apiDoesNotExistError();
            default:
                return visitor._other(value as any);
        }
    },
} as const;
