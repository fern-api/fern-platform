/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as FernRegistry from "../../../../../../../index";
import urlJoin from "url-join";

export declare namespace Register {
    interface Options {
        environment?: core.Supplier<environments.FernRegistryEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}

export class Register {
    constructor(protected readonly _options: Register.Options = {}) {}

    /**
     * @param {FernRegistry.api.v1.register.RegisterApiDefinitionRequest} request
     * @param {Register.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernRegistry.api.v1.register.registerApiDefinition({
     *         orgId: "string",
     *         apiId: "string",
     *         definition: {
     *             rootPackage: {},
     *             types: {
     *                 "string": {}
     *             },
     *             subpackages: {
     *                 "string": {}
     *             },
     *             auth: {
     *                 type: "bearerAuth"
     *             },
     *             globalHeaders: [{}],
     *             snippetsConfiguration: {},
     *             navigation: {}
     *         }
     *     })
     */
    public async registerApiDefinition(
        request: FernRegistry.api.v1.register.RegisterApiDefinitionRequest,
        requestOptions?: Register.RequestOptions
    ): Promise<
        core.APIResponse<
            FernRegistry.api.v1.register.RegisterApiDefinitionResponse,
            FernRegistry.api.v1.register.registerApiDefinition.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                "/registry/api/register"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.api.v1.register.RegisterApiDefinitionResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.api.v1.register.registerApiDefinition.Error)?.error) {
                case "UnauthorizedError":
                case "UserNotInOrgError":
                    return {
                        ok: false,
                        error: _response.error.body as FernRegistry.api.v1.register.registerApiDefinition.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernRegistry.api.v1.register.registerApiDefinition.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
