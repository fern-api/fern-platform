/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as FernRegistry from "../../../../../../../index";
import urlJoin from "url-join";

export declare namespace Write {
    interface Options {
        environment?: core.Supplier<environments.FernRegistryEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Write {
    constructor(protected readonly _options: Write.Options = {}) {}

    /**
     * @param {FernRegistry.docs.v1.write.StartDocsRegisterRequest} request
     * @param {Write.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v1.write.startDocsRegister({
     *         domain: "string",
     *         orgId: FernRegistry.OrgId("string"),
     *         filepaths: [FernRegistry.docs.v1.write.FilePath("string")]
     *     })
     */
    public async startDocsRegister(
        request: FernRegistry.docs.v1.write.StartDocsRegisterRequest,
        requestOptions?: Write.RequestOptions
    ): Promise<
        core.APIResponse<
            FernRegistry.docs.v1.write.StartDocsRegisterResponse,
            FernRegistry.docs.v1.write.startDocsRegister.Error
        >
    > {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                "/registry/docs/init"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.docs.v1.write.StartDocsRegisterResponse,
            };
        }

        return {
            ok: false,
            error: FernRegistry.docs.v1.write.startDocsRegister.Error._unknown(_response.error),
        };
    }

    /**
     * @param {FernRegistry.docs.v1.write.DocsRegistrationId} docsRegistrationId
     * @param {FernRegistry.docs.v1.write.RegisterDocsRequest} request
     * @param {Write.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v1.write.finishDocsRegister(FernRegistry.docs.v1.write.DocsRegistrationId("string"), {
     *         docsDefinition: {
     *             pages: {
     *                 "string": {
     *                     markdown: "string",
     *                     fileId: FernRegistry.FileId("string"),
     *                     editThisPageUrl: FernRegistry.Url("string")
     *                 }
     *             },
     *             config: {
     *                 title: "string",
     *                 defaultLanguage: "typescript",
     *                 announcement: {
     *                     text: "string"
     *                 },
     *                 navigation: {
     *                     tabs: [{
     *                             "key": "value"
     *                         }],
     *                     tabsV2: [{
     *                             "key": "value"
     *                         }],
     *                     landingPage: {
     *                         id: FernRegistry.PageId("string"),
     *                         title: "string",
     *                         icon: {
     *                             "key": "value"
     *                         },
     *                         hidden: {
     *                             "key": "value"
     *                         },
     *                         urlSlugOverride: {
     *                             "key": "value"
     *                         },
     *                         fullSlug: {
     *                             "key": "value"
     *                         }
     *                     }
     *                 },
     *                 root: {
     *                     type: "root",
     *                     version: "v1",
     *                     child: {
     *                         type: "versioned",
     *                         children: [{
     *                                 type: "version",
     *                                 default: true,
     *                                 versionId: FernRegistry.VersionId("string"),
     *                                 child: {
     *                                     type: "tabbed",
     *                                     children: [{
     *                                             "key": "value"
     *                                         }],
     *                                     id: FernRegistry.navigation.v1.NodeId("string")
     *                                 },
     *                                 availability: {
     *                                     "key": "value"
     *                                 },
     *                                 landingPage: {
     *                                     "key": "value"
     *                                 },
     *                                 title: "string",
     *                                 slug: FernRegistry.navigation.v1.Slug("string"),
     *                                 icon: {
     *                                     "key": "value"
     *                                 },
     *                                 hidden: {
     *                                     "key": "value"
     *                                 },
     *                                 authed: {
     *                                     "key": "value"
     *                                 },
     *                                 id: FernRegistry.navigation.v1.NodeId("string"),
     *                                 viewers: {
     *                                     "key": "value"
     *                                 },
     *                                 orphaned: {
     *                                     "key": "value"
     *                                 },
     *                                 featureFlags: {
     *                                     "key": "value"
     *                                 },
     *                                 pointsTo: {
     *                                     "key": "value"
     *                                 }
     *                             }],
     *                         id: FernRegistry.navigation.v1.NodeId("string")
     *                     },
     *                     roles: [{
     *                             "key": "value"
     *                         }],
     *                     title: "string",
     *                     slug: FernRegistry.navigation.v1.Slug("string"),
     *                     icon: {
     *                         "key": "value"
     *                     },
     *                     hidden: {
     *                         "key": "value"
     *                     },
     *                     authed: {
     *                         "key": "value"
     *                     },
     *                     id: FernRegistry.navigation.v1.NodeId("string"),
     *                     viewers: {
     *                         "key": "value"
     *                     },
     *                     orphaned: {
     *                         "key": "value"
     *                     },
     *                     featureFlags: {
     *                         "key": "value"
     *                     },
     *                     pointsTo: {
     *                         "key": "value"
     *                     }
     *                 },
     *                 navbarLinks: [{
     *                         type: "filled"
     *                     }],
     *                 footerLinks: [{
     *                         type: "github",
     *                         value: {
     *                             "key": "value"
     *                         }
     *                     }],
     *                 hideNavLinks: true,
     *                 logoHeight: 1.1,
     *                 logoHref: FernRegistry.Url("string"),
     *                 favicon: FernRegistry.FileId("string"),
     *                 metadata: {
     *                     og:site_name: "string",
     *                     og:title: "string",
     *                     og:description: "string",
     *                     og:url: "string",
     *                     og:image: {
     *                         type: "fileId",
     *                         value: {
     *                             "key": "value"
     *                         }
     *                     },
     *                     og:image:width: 1.1,
     *                     og:image:height: 1.1,
     *                     og:locale: "string",
     *                     og:logo: {
     *                         type: "fileId",
     *                         value: {
     *                             "key": "value"
     *                         }
     *                     },
     *                     twitter:title: "string",
     *                     twitter:description: "string",
     *                     twitter:handle: "string",
     *                     twitter:image: {
     *                         type: "fileId",
     *                         value: {
     *                             "key": "value"
     *                         }
     *                     },
     *                     twitter:site: "string",
     *                     twitter:url: "string",
     *                     twitter:card: "summary",
     *                     noindex: true,
     *                     nofollow: true
     *                 },
     *                 redirects: [{
     *                         source: "string",
     *                         destination: "string",
     *                         permanent: {
     *                             "key": "value"
     *                         }
     *                     }],
     *                 colorsV3: {
     *                     type: "dark"
     *                 },
     *                 layout: {
     *                     pageWidth: {
     *                         type: "px",
     *                         value: {
     *                             "key": "value"
     *                         }
     *                     },
     *                     contentWidth: {
     *                         type: "px",
     *                         value: {
     *                             "key": "value"
     *                         }
     *                     },
     *                     sidebarWidth: {
     *                         type: "px",
     *                         value: {
     *                             "key": "value"
     *                         }
     *                     },
     *                     headerHeight: {
     *                         type: "px",
     *                         value: {
     *                             "key": "value"
     *                         }
     *                     },
     *                     searchbarPlacement: "HEADER",
     *                     tabsPlacement: "HEADER",
     *                     contentAlignment: "CENTER",
     *                     headerPosition: "FIXED",
     *                     disableHeader: true
     *                 },
     *                 typographyV2: {
     *                     headingsFont: {
     *                         type: "custom"
     *                     },
     *                     bodyFont: {
     *                         type: "custom"
     *                     },
     *                     codeFont: {
     *                         type: "custom"
     *                     }
     *                 },
     *                 analyticsConfig: {
     *                     segment: {
     *                         writeKey: "string"
     *                     },
     *                     fullstory: {
     *                         orgId: "string"
     *                     },
     *                     intercom: {
     *                         appId: "string",
     *                         apiBase: {
     *                             "key": "value"
     *                         }
     *                     },
     *                     posthog: {
     *                         apiKey: "string",
     *                         endpoint: {
     *                             "key": "value"
     *                         }
     *                     },
     *                     gtm: {
     *                         containerId: "string"
     *                     },
     *                     ga4: {
     *                         measurementId: "string"
     *                     },
     *                     amplitude: {
     *                         apiKey: "string"
     *                     },
     *                     mixpanel: {
     *                         apiKey: "string"
     *                     },
     *                     hotjar: {
     *                         hjid: "string",
     *                         hjsv: "string"
     *                     },
     *                     koala: {
     *                         apiKey: "string"
     *                     },
     *                     logrocket: {
     *                         apiKey: "string"
     *                     },
     *                     pirsch: {
     *                         id: "string"
     *                     },
     *                     plausible: {
     *                         domain: "string"
     *                     },
     *                     fathom: {
     *                         siteId: "string"
     *                     },
     *                     clearbit: {
     *                         apiKey: "string"
     *                     },
     *                     heap: {
     *                         appId: "string"
     *                     }
     *                 },
     *                 integrations: {
     *                     intercom: "string"
     *                 },
     *                 css: {
     *                     inline: [{
     *                             "key": "value"
     *                         }]
     *                 },
     *                 js: {
     *                     remote: [{
     *                             "key": "value"
     *                         }],
     *                     files: [{
     *                             fileId: FernRegistry.FileId("string"),
     *                             strategy: {
     *                                 "key": "value"
     *                             }
     *                         }],
     *                     inline: [{
     *                             "key": "value"
     *                         }]
     *                 },
     *                 backgroundImage: FernRegistry.FileId("string"),
     *                 logoV2: {
     *                     dark: FernRegistry.FileId("string"),
     *                     light: FernRegistry.FileId("string")
     *                 },
     *                 logo: FernRegistry.FileId("string"),
     *                 colors: {
     *                     accentPrimary: {
     *                         r: 1,
     *                         g: 1,
     *                         b: 1,
     *                         a: {
     *                             "key": "value"
     *                         }
     *                     }
     *                 },
     *                 colorsV2: {
     *                     accentPrimary: {
     *                         type: "unthemed"
     *                     },
     *                     background: {
     *                         type: "unthemed"
     *                     }
     *                 },
     *                 typography: {
     *                     headingsFont: {
     *                         name: "string",
     *                         fontFile: FernRegistry.FileId("string")
     *                     },
     *                     bodyFont: {
     *                         name: "string",
     *                         fontFile: FernRegistry.FileId("string")
     *                     },
     *                     codeFont: {
     *                         name: "string",
     *                         fontFile: FernRegistry.FileId("string")
     *                     }
     *                 }
     *             },
     *             jsFiles: {
     *                 "string": "string"
     *             }
     *         }
     *     })
     */
    public async finishDocsRegister(
        docsRegistrationId: FernRegistry.docs.v1.write.DocsRegistrationId,
        request: FernRegistry.docs.v1.write.RegisterDocsRequest,
        requestOptions?: Write.RequestOptions
    ): Promise<core.APIResponse<void, FernRegistry.docs.v1.write.finishDocsRegister.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/registry/docs/register/${encodeURIComponent(docsRegistrationId)}`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v1.write.finishDocsRegister.Error)?.error) {
                case "UnauthorizedError":
                case "UserNotInOrgError":
                case "DocsRegistrationIdNotFound":
                    return {
                        ok: false,
                        error: _response.error.body as FernRegistry.docs.v1.write.finishDocsRegister.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernRegistry.docs.v1.write.finishDocsRegister.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
