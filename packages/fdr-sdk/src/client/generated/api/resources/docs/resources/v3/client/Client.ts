/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as FernRegistry from "../../../../../index";
import urlJoin from "url-join";

export declare namespace V3 {
    interface Options {
        environment?: core.Supplier<environments.FernRegistryEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class V3 {
    constructor(protected readonly _options: V3.Options = {}) {}

    /**
     * Get the organization ID for this domain
     *
     * @param {string} domain
     * @param {FernRegistry.docs.v3.GetOrganizationRequest} request
     * @param {V3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v3.getOrganization("string", {
     *         "x-fern-cli-version": "string"
     *     })
     */
    public async getOrganization(
        domain: string,
        request: FernRegistry.docs.v3.GetOrganizationRequest = {},
        requestOptions?: V3.RequestOptions
    ): Promise<core.APIResponse<FernRegistry.OrgId, FernRegistry.docs.v3.getOrganization.Error>> {
        const { "x-fern-cli-version": xFernCliVersion } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/v3/registry/docs/load/${encodeURIComponent(domain)}/organization`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "x-fern-cli-version": xFernCliVersion != null ? xFernCliVersion : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.OrgId,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v3.getOrganization.Error)?.error) {
                case "UnauthorizedError":
                case "NotFoundError":
                    return {
                        ok: false,
                        error: _response.error.body as FernRegistry.docs.v3.getOrganization.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernRegistry.docs.v3.getOrganization.Error._unknown(_response.error),
        };
    }

    /**
     * Get the navigation hierarchy for this instance of the docs
     *
     * @param {string} domain
     * @param {FernRegistry.docs.v3.DocsInstanceId} id
     * @param {FernRegistry.docs.v3.GetNavigationRequest} request
     * @param {V3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v3.getNavigation("string", FernRegistry.DocsConfigId("string"), {
     *         "x-fern-cli-version": "string"
     *     })
     */
    public async getNavigation(
        domain: string,
        id: FernRegistry.docs.v3.DocsInstanceId,
        request: FernRegistry.docs.v3.GetNavigationRequest = {},
        requestOptions?: V3.RequestOptions
    ): Promise<core.APIResponse<FernRegistry.navigation.latest.RootNode, FernRegistry.docs.v3.getNavigation.Error>> {
        const { "x-fern-cli-version": xFernCliVersion } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/v3/registry/docs/load/${encodeURIComponent(domain)}/instance/${encodeURIComponent(id)}/navigation`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "x-fern-cli-version": xFernCliVersion != null ? xFernCliVersion : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.navigation.latest.RootNode,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v3.getNavigation.Error)?.error) {
                case "UnauthorizedError":
                case "NotFoundError":
                    return {
                        ok: false,
                        error: _response.error.body as FernRegistry.docs.v3.getNavigation.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernRegistry.docs.v3.getNavigation.Error._unknown(_response.error),
        };
    }

    /**
     * Get the config for this instance of the docs
     *
     * @param {string} domain
     * @param {FernRegistry.docs.v3.DocsInstanceId} id
     * @param {FernRegistry.docs.v3.GetConfigRequest} request
     * @param {V3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v3.getConfig("string", FernRegistry.DocsConfigId("string"), {
     *         "x-fern-cli-version": "string"
     *     })
     */
    public async getConfig(
        domain: string,
        id: FernRegistry.docs.v3.DocsInstanceId,
        request: FernRegistry.docs.v3.GetConfigRequest = {},
        requestOptions?: V3.RequestOptions
    ): Promise<core.APIResponse<FernRegistry.docs.v3.DocsConfig, FernRegistry.docs.v3.getConfig.Error>> {
        const { "x-fern-cli-version": xFernCliVersion } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/v3/registry/docs/load/${encodeURIComponent(domain)}/instance/${encodeURIComponent(id)}/config`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "x-fern-cli-version": xFernCliVersion != null ? xFernCliVersion : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.docs.v3.DocsConfig,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v3.getConfig.Error)?.error) {
                case "UnauthorizedError":
                case "NotFoundError":
                    return {
                        ok: false,
                        error: _response.error.body as FernRegistry.docs.v3.getConfig.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernRegistry.docs.v3.getConfig.Error._unknown(_response.error),
        };
    }

    /**
     * Get the metadata for the files in this instance of the docs
     *
     * @param {string} domain
     * @param {FernRegistry.docs.v3.DocsInstanceId} id
     * @param {FernRegistry.docs.v3.GetFilesMetadataRequest} request
     * @param {V3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v3.getFilesMetadata("string", FernRegistry.DocsConfigId("string"), {
     *         "x-fern-cli-version": "string",
     *         files: [FernRegistry.docs.v3.FilePath("string")]
     *     })
     */
    public async getFilesMetadata(
        domain: string,
        id: FernRegistry.docs.v3.DocsInstanceId,
        request: FernRegistry.docs.v3.GetFilesMetadataRequest,
        requestOptions?: V3.RequestOptions
    ): Promise<
        core.APIResponse<
            Record<FernRegistry.docs.v3.FilePath, FernRegistry.docs.v3.FileMetadata>,
            FernRegistry.docs.v3.getFilesMetadata.Error
        >
    > {
        const { "x-fern-cli-version": xFernCliVersion, ..._body } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/v3/registry/docs/load/${encodeURIComponent(domain)}/instance/${encodeURIComponent(id)}/files`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "x-fern-cli-version": xFernCliVersion != null ? xFernCliVersion : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as Record<FernRegistry.docs.v3.FilePath, FernRegistry.docs.v3.FileMetadata>,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v3.getFilesMetadata.Error)?.error) {
                case "UnauthorizedError":
                    return {
                        ok: false,
                        error: _response.error.body as FernRegistry.docs.v3.getFilesMetadata.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernRegistry.docs.v3.getFilesMetadata.Error._unknown(_response.error),
        };
    }

    /**
     * @param {FernRegistry.OrgId} organization
     * @param {FernRegistry.docs.v3.StartDocsPreviewRequest} request
     * @param {V3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v3.startDocsPreview(FernRegistry.OrgId("string"), {
     *         "x-fern-cli-version": "string",
     *         auth: {
     *             enableAnonymousAccess: true,
     *             enableSso: true,
     *             audience: FernRegistry.AudienceId("string")
     *         },
     *         basePath: "string",
     *         publicFiles: [FernRegistry.docs.v3.FilePath("string")],
     *         privateFiles: [FernRegistry.docs.v3.FilePath("string")]
     *     })
     */
    public async startDocsPreview(
        organization: FernRegistry.OrgId,
        request: FernRegistry.docs.v3.StartDocsPreviewRequest,
        requestOptions?: V3.RequestOptions
    ): Promise<
        core.APIResponse<FernRegistry.docs.v3.StartDocsRegisterResponse, FernRegistry.docs.v3.startDocsPreview.Error>
    > {
        const { "x-fern-cli-version": xFernCliVersion, ..._body } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/v3/registry/docs/register/${encodeURIComponent(organization)}/preview`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "x-fern-cli-version": xFernCliVersion != null ? xFernCliVersion : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.docs.v3.StartDocsRegisterResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v3.startDocsPreview.Error)?.error) {
                case "UnauthorizedError":
                    return {
                        ok: false,
                        error: _response.error.body as FernRegistry.docs.v3.startDocsPreview.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernRegistry.docs.v3.startDocsPreview.Error._unknown(_response.error),
        };
    }

    /**
     * @param {FernRegistry.OrgId} organization
     * @param {string} domain
     * @param {FernRegistry.docs.v3.StartDocsRegisterRequest} request
     * @param {V3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v3.startDocsRegister(FernRegistry.OrgId("string"), "string", {
     *         "x-fern-cli-version": "string",
     *         auth: {
     *             enableAnonymousAccess: true,
     *             enableSso: true,
     *             audience: FernRegistry.AudienceId("string")
     *         },
     *         basePath: "string",
     *         publicFiles: [FernRegistry.docs.v3.FilePath("string")],
     *         privateFiles: [FernRegistry.docs.v3.FilePath("string")],
     *         aliases: {
     *             "string": {
     *                 enableAnonymousAccess: true,
     *                 enableSso: true,
     *                 audience: FernRegistry.AudienceId("string")
     *             }
     *         }
     *     })
     */
    public async startDocsRegister(
        organization: FernRegistry.OrgId,
        domain: string,
        request: FernRegistry.docs.v3.StartDocsRegisterRequest,
        requestOptions?: V3.RequestOptions
    ): Promise<
        core.APIResponse<FernRegistry.docs.v3.StartDocsRegisterResponse, FernRegistry.docs.v3.startDocsRegister.Error>
    > {
        const { "x-fern-cli-version": xFernCliVersion, ..._body } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/v3/registry/docs/register/${encodeURIComponent(organization)}/init/${encodeURIComponent(domain)}`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "x-fern-cli-version": xFernCliVersion != null ? xFernCliVersion : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.docs.v3.StartDocsRegisterResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v3.startDocsRegister.Error)?.error) {
                case "UnauthorizedError":
                case "BadRequestError":
                    return {
                        ok: false,
                        error: _response.error.body as FernRegistry.docs.v3.startDocsRegister.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernRegistry.docs.v3.startDocsRegister.Error._unknown(_response.error),
        };
    }

    /**
     * @param {FernRegistry.OrgId} organization
     * @param {FernRegistry.docs.v1.write.DocsRegistrationId} docsRegistrationId
     * @param {FernRegistry.docs.v3.PutDocsMetadata} request
     * @param {V3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v3.finishDocsRegister(FernRegistry.OrgId("string"), FernRegistry.docs.v1.write.DocsRegistrationId("string"), {
     *         "x-fern-cli-version": "string",
     *         config: {
     *             id: FernRegistry.DocsConfigId("string"),
     *             updatedAt: "2024-01-15T09:30:00Z",
     *             domain: "string",
     *             basePath: "string",
     *             title: "string",
     *             defaultLanguage: "typescript",
     *             announcement: {
     *                 text: "string"
     *             },
     *             navbarLinks: [{
     *                     type: "filled"
     *                 }],
     *             footerLinks: [{
     *                     type: "github",
     *                     value: {
     *                         "key": "value"
     *                     }
     *                 }],
     *             logoHeight: 1.1,
     *             logoHref: FernRegistry.Url("string"),
     *             favicon: FernRegistry.docs.v3.FilePath("string"),
     *             metadata: {
     *                 og:site_name: "string",
     *                 og:title: "string",
     *                 og:description: "string",
     *                 og:url: "string",
     *                 og:image: {
     *                     type: "fileId",
     *                     value: {
     *                         "key": "value"
     *                     }
     *                 },
     *                 og:image:width: 1.1,
     *                 og:image:height: 1.1,
     *                 og:locale: "string",
     *                 og:logo: {
     *                     type: "fileId",
     *                     value: {
     *                         "key": "value"
     *                     }
     *                 },
     *                 twitter:title: "string",
     *                 twitter:description: "string",
     *                 twitter:handle: "string",
     *                 twitter:image: {
     *                     type: "fileId",
     *                     value: {
     *                         "key": "value"
     *                     }
     *                 },
     *                 twitter:site: "string",
     *                 twitter:url: "string",
     *                 twitter:card: "summary",
     *                 noindex: true,
     *                 nofollow: true
     *             },
     *             redirects: [{
     *                     source: "string",
     *                     destination: "string",
     *                     permanent: {
     *                         "key": "value"
     *                     }
     *                 }],
     *             colors: {
     *                 dark: {
     *                     logo: {
     *                         "key": "value"
     *                     },
     *                     backgroundImage: {
     *                         "key": "value"
     *                     },
     *                     accentPrimary: {
     *                         r: 1,
     *                         g: 1,
     *                         b: 1,
     *                         a: {
     *                             "key": "value"
     *                         }
     *                     },
     *                     background: {
     *                         type: "solid",
     *                         r: 1,
     *                         g: 1,
     *                         b: 1,
     *                         a: {
     *                             "key": "value"
     *                         }
     *                     },
     *                     border: {
     *                         "key": "value"
     *                     },
     *                     sidebarBackground: {
     *                         "key": "value"
     *                     },
     *                     headerBackground: {
     *                         "key": "value"
     *                     },
     *                     cardBackground: {
     *                         "key": "value"
     *                     }
     *                 },
     *                 light: {
     *                     logo: {
     *                         "key": "value"
     *                     },
     *                     backgroundImage: {
     *                         "key": "value"
     *                     },
     *                     accentPrimary: {
     *                         r: 1,
     *                         g: 1,
     *                         b: 1,
     *                         a: {
     *                             "key": "value"
     *                         }
     *                     },
     *                     background: {
     *                         type: "solid",
     *                         r: 1,
     *                         g: 1,
     *                         b: 1,
     *                         a: {
     *                             "key": "value"
     *                         }
     *                     },
     *                     border: {
     *                         "key": "value"
     *                     },
     *                     sidebarBackground: {
     *                         "key": "value"
     *                     },
     *                     headerBackground: {
     *                         "key": "value"
     *                     },
     *                     cardBackground: {
     *                         "key": "value"
     *                     }
     *                 }
     *             },
     *             fonts: {
     *                 headingsFont: {
     *                     type: "custom"
     *                 },
     *                 bodyFont: {
     *                     type: "custom"
     *                 },
     *                 codeFont: {
     *                     type: "custom"
     *                 }
     *             },
     *             layout: {
     *                 pageWidth: {
     *                     type: "px",
     *                     value: {
     *                         "key": "value"
     *                     }
     *                 },
     *                 contentWidth: {
     *                     type: "px",
     *                     value: {
     *                         "key": "value"
     *                     }
     *                 },
     *                 sidebarWidth: {
     *                     type: "px",
     *                     value: {
     *                         "key": "value"
     *                     }
     *                 },
     *                 headerHeight: {
     *                     type: "px",
     *                     value: {
     *                         "key": "value"
     *                     }
     *                 },
     *                 searchbarPlacement: "HEADER",
     *                 tabsPlacement: "HEADER",
     *                 contentAlignment: "CENTER",
     *                 headerPosition: "FIXED",
     *                 disableHeader: true
     *             },
     *             analytics: {
     *                 segment: {
     *                     writeKey: "string"
     *                 },
     *                 fullstory: {
     *                     orgId: "string"
     *                 },
     *                 intercom: {
     *                     appId: "string",
     *                     apiBase: {
     *                         "key": "value"
     *                     }
     *                 },
     *                 posthog: {
     *                     apiKey: "string",
     *                     endpoint: {
     *                         "key": "value"
     *                     }
     *                 },
     *                 gtm: {
     *                     containerId: "string"
     *                 },
     *                 ga4: {
     *                     measurementId: "string"
     *                 },
     *                 amplitude: {
     *                     apiKey: "string"
     *                 },
     *                 mixpanel: {
     *                     apiKey: "string"
     *                 },
     *                 hotjar: {
     *                     hjid: "string",
     *                     hjsv: "string"
     *                 },
     *                 koala: {
     *                     apiKey: "string"
     *                 },
     *                 logrocket: {
     *                     apiKey: "string"
     *                 },
     *                 pirsch: {
     *                     id: "string"
     *                 },
     *                 plausible: {
     *                     domain: "string"
     *                 },
     *                 fathom: {
     *                     siteId: "string"
     *                 },
     *                 clearbit: {
     *                     apiKey: "string"
     *                 },
     *                 heap: {
     *                     appId: "string"
     *                 }
     *             },
     *             integrations: {
     *                 intercom: "string"
     *             },
     *             search: {
     *                 type: "unversioned"
     *             },
     *             css: {
     *                 inline: [{
     *                         "key": "value"
     *                     }]
     *             },
     *             js: {
     *                 remote: [{
     *                         "key": "value"
     *                     }],
     *                 files: [{
     *                         fileId: FernRegistry.FileId("string"),
     *                         strategy: {
     *                             "key": "value"
     *                         }
     *                     }],
     *                 inline: [{
     *                         "key": "value"
     *                     }]
     *             },
     *             playground: {
     *                 oauth: true
     *             },
     *             files: [FernRegistry.docs.v3.FilePath("string")],
     *             markdownFiles: [FernRegistry.docs.v3.FilePath("string")],
     *             mdxBundlerFile: [FernRegistry.docs.v3.FilePath("string")]
     *         },
     *         navigation: {
     *             type: "root",
     *             version: "v2",
     *             child: {
     *                 type: "versioned",
     *                 children: [{
     *                         type: "version",
     *                         default: true,
     *                         versionId: FernRegistry.VersionId("string"),
     *                         child: {
     *                             type: "tabbed",
     *                             children: [{
     *                                     "key": "value"
     *                                 }],
     *                             id: FernRegistry.navigation.latest.NodeId("string")
     *                         },
     *                         availability: {
     *                             "key": "value"
     *                         },
     *                         landingPage: {
     *                             "key": "value"
     *                         },
     *                         title: "string",
     *                         slug: FernRegistry.navigation.latest.Slug("string"),
     *                         canonicalSlug: FernRegistry.navigation.latest.Slug("string"),
     *                         icon: "string",
     *                         hidden: true,
     *                         authed: true,
     *                         audience: [{
     *                                 "key": "value"
     *                             }],
     *                         id: FernRegistry.navigation.latest.NodeId("string"),
     *                         pointsTo: {
     *                             "key": "value"
     *                         }
     *                     }],
     *                 id: FernRegistry.navigation.latest.NodeId("string")
     *             },
     *             title: "string",
     *             slug: FernRegistry.navigation.latest.Slug("string"),
     *             canonicalSlug: FernRegistry.navigation.latest.Slug("string"),
     *             icon: "string",
     *             hidden: true,
     *             authed: true,
     *             audience: [{
     *                     "key": "value"
     *                 }],
     *             id: FernRegistry.navigation.latest.NodeId("string"),
     *             pointsTo: {
     *                 "key": "value"
     *             }
     *         },
     *         files: {
     *             "string": {
     *                 type: "image",
     *                 width: 1.1,
     *                 height: 1.1,
     *                 blurDataUrl: "string",
     *                 alt: "string"
     *             }
     *         }
     *     })
     */
    public async finishDocsRegister(
        organization: FernRegistry.OrgId,
        docsRegistrationId: FernRegistry.docs.v1.write.DocsRegistrationId,
        request: FernRegistry.docs.v3.PutDocsMetadata,
        requestOptions?: V3.RequestOptions
    ): Promise<
        core.APIResponse<FernRegistry.docs.v3.FinishDocsRegisterResponse, FernRegistry.docs.v3.finishDocsRegister.Error>
    > {
        const { "x-fern-cli-version": xFernCliVersion, ..._body } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/v3/registry/docs/register/${encodeURIComponent(organization)}/job/${encodeURIComponent(
                    docsRegistrationId
                )}/metadata`
            ),
            method: "PUT",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "x-fern-cli-version": xFernCliVersion != null ? xFernCliVersion : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.docs.v3.FinishDocsRegisterResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v3.finishDocsRegister.Error)?.error) {
                case "UnauthorizedError":
                case "NotFoundError":
                case "BadRequestError":
                    return {
                        ok: false,
                        error: _response.error.body as FernRegistry.docs.v3.finishDocsRegister.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernRegistry.docs.v3.finishDocsRegister.Error._unknown(_response.error),
        };
    }

    /**
     * @param {string} domain
     * @param {FernRegistry.docs.v3.StartDocsRevalidationRequest} request
     * @param {V3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v3.startDocsRevalidation("string", {
     *         "x-fern-cli-version": "string"
     *     })
     */
    public async startDocsRevalidation(
        domain: string,
        request: FernRegistry.docs.v3.StartDocsRevalidationRequest = {},
        requestOptions?: V3.RequestOptions
    ): Promise<core.APIResponse<void, FernRegistry.docs.v3.startDocsRevalidation.Error>> {
        const { "x-fern-cli-version": xFernCliVersion } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/v3/registry/docs/revalidate/${encodeURIComponent(domain)}`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "x-fern-cli-version": xFernCliVersion != null ? xFernCliVersion : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v3.startDocsRevalidation.Error)?.error) {
                case "UnauthorizedError":
                case "NotFoundError":
                case "BadRequestError":
                    return {
                        ok: false,
                        error: _response.error.body as FernRegistry.docs.v3.startDocsRevalidation.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernRegistry.docs.v3.startDocsRevalidation.Error._unknown(_response.error),
        };
    }

    /**
     * @param {string} domain
     * @param {FernRegistry.docs.v3.GetDocsRevalidationStatusRequest} request
     * @param {V3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.docs.v3.getDocsRevalidationStatus("string", {
     *         "x-fern-cli-version": "string"
     *     })
     */
    public async getDocsRevalidationStatus(
        domain: string,
        request: FernRegistry.docs.v3.GetDocsRevalidationStatusRequest = {},
        requestOptions?: V3.RequestOptions
    ): Promise<
        core.APIResponse<FernRegistry.docs.v3.DocsRegisterStatus, FernRegistry.docs.v3.getDocsRevalidationStatus.Error>
    > {
        const { "x-fern-cli-version": xFernCliVersion } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                `/v3/registry/docs/revalidate/${encodeURIComponent(domain)}/status`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "x-fern-cli-version": xFernCliVersion != null ? xFernCliVersion : undefined,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.docs.v3.DocsRegisterStatus,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernRegistry.docs.v3.getDocsRevalidationStatus.Error)?.error) {
                case "UnauthorizedError":
                    return {
                        ok: false,
                        error: _response.error.body as FernRegistry.docs.v3.getDocsRevalidationStatus.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernRegistry.docs.v3.getDocsRevalidationStatus.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
