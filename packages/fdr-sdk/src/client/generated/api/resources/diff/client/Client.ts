/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as FernRegistry from "../../../index";
import urlJoin from "url-join";

export declare namespace Diff {
    interface Options {
        environment?: core.Supplier<environments.FernRegistryEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class Diff {
    constructor(protected readonly _options: Diff.Options = {}) {}

    /**
     * @param {FernRegistry.ApiDiffRequest} request
     * @param {Diff.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.diff.diff({
     *         previousApiDefinitionId: FernRegistry.ApiDefinitionId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
     *         currentApiDefinitionId: FernRegistry.ApiDefinitionId("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     *     })
     */
    public async diff(
        request: FernRegistry.ApiDiffRequest,
        requestOptions?: Diff.RequestOptions
    ): Promise<core.APIResponse<FernRegistry.ApiDiff, FernRegistry.diff.diff.Error>> {
        const { previousApiDefinitionId, currentApiDefinitionId } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        _queryParams["previousApiDefinitionId"] = previousApiDefinitionId;
        _queryParams["currentApiDefinitionId"] = currentApiDefinitionId;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.FernRegistryEnvironment.Prod,
                "/registry/diff"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernRegistry.ApiDiff,
            };
        }

        return {
            ok: false,
            error: FernRegistry.diff.diff.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
