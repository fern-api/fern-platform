[
  {
    "authed": false,
    "breadcrumb": [],
    "content": "You can get started in five minutes with our setup guide, or jump straight into the documentation.




Get started with Stack in 5 minutes


Learn how to use Stack's SDKs for Next.js


Explore Stack's REST API for your backends


Join our Discord community",
    "description": "Welcome to Stack Auth, the open-source authentication platform!",
    "domain": "test.com",
    "icon": "fa-regular fa-globe",
    "objectID": "test:test.com:root.uv.docs.docs.overview",
    "org_id": "test",
    "pathname": "/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Overview",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "code_snippets": [
      {
        "code": "export function MyComponent() {
  const user = useUser({ or: "redirect" });
  return <div>Hi, {user.displayName}</div>;
}",
        "lang": "tsx",
      },
      {
        "code": "<button onClick={async () => await user.update({ displayName: "New Name" })}>
  Change Name
</button>",
        "lang": "tsx",
      },
      {
        "code": "export default function CustomOAuthSignIn() {
  const app = useStackApp();
  return (
    <div>
      <button onClick={async () => await app.signInWithOAuth('google')}>
        Sign In with Google
      </button>
    </div>
  );
}",
        "lang": "tsx",
      },
    ],
    "content": "Authentication is inherently difficult. Few things are more sensitive than user data and more complex than cryptography. Not surprisingly, many online businesses struggle to get it right.
The optimal authentication solution should be secure, yet approachable. If a developer has to worry about JWTs, OAuth flows, or password hashing, then we have failed. If an authentication solution uses closed-source, unauditable code for the most critical parts of your application, then we have failed.
In truth, the authentication services industry has collectively failed. It's dominated by proprietary giants with predatory "bait-and-switch" pricing, providing no transparency into their codebase and delivering a subpar developer experience â€” because they know enterprises will pay more if setting up auth systems is painful.
That's why we built Stack. Integrating secure authentication into your app should take 5 minutes, not 5 days.
At the core of Stack are deep integrations into frontend and backend frameworks. We offer the best developer experience with Next.js. Instead of providing mediocre support for numerous frameworks, we focused on making a few integrations excellent before adding new ones. We also offer a cross-compatible REST API as a fallback.
Here's an example. To get the current user, simply call:
That's it! Stack will either return a User object or redirect the user to the login page.
You can also add a button to change the user's name:
The user data will update in both the frontend and backend automatically. The updated user data will be reflected in all other components on your page as well.
You also get pages and components for the authentication flow out-of-the-box. This is the sign-in page you get without writing a single line of code:
Stack sign in page
Notice, there's no branding on our components. We believe we should grow by building the best product, not by forcing our brand onto your users. This means we rely on you to spread the word about Stack. If you like what you're reading, please take a moment to tell one or two of your friends about us.
If you prefer a fully customized UI, you can use our low-level functions like signInWithOAuth or signInWithCredential to build your own sign-in page:
To manage everything efficiently, there is a powerful admin dashboard:
Stack dashboard
Best of all, Stack is 100% open-source. This means the client, server, dashboard, and even this documentation you're reading right now. Check out our GitHub to open an issue or pull request.
This is just a glimpse of what Stack can do. Stack also handles many other tasks like backend integration, data storage, emails, teams, permissions, and more, which you will learn about later in the documentation.
If this sounds interesting, get started with our interactive setup wizard, or join our Discord community to ask questions and get help from our team.
We're excited to have you on board! ðŸš€",
    "domain": "test.com",
    "hash": "#why-choose-stack",
    "hierarchy": {
      "h0": {
        "title": "Overview",
      },
      "h2": {
        "id": "why-choose-stack",
        "title": "Why Choose Stack?",
      },
    },
    "icon": "fa-regular fa-globe",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.overview-why-choose-stack",
    "org_id": "test",
    "pathname": "/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Why Choose Stack?",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "description": "Frequently asked questions about Stack",
    "domain": "test.com",
    "icon": "fa-regular fa-circle-question",
    "objectID": "test:test.com:root.uv.docs.docs.faq",
    "org_id": "test",
    "pathname": "/faq",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "FAQ",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "content": "In the frontend, Stack supports TypeScript and JavaScript with Next.js. In the backend, Stack has a flexible REST API that can be used with any language or framework.


While you can use any backend framework with Stack, the frontend is tightly integrated with Next.js. If you want to use a different frontend framework, you will have to build the integration ourselves with the client endpoints of our REST API. Some members of our community have started projects to do this, so you may want to join our Discord to coordinate with them.


Only the Next.js app router is currently supported. However, just like any other unsupported framework, you can use the client endpoints of our REST API to build your own integration.",
    "domain": "test.com",
    "hash": "#languages--frameworks",
    "hierarchy": {
      "h0": {
        "title": "FAQ",
      },
      "h2": {
        "id": "languages--frameworks",
        "title": "Languages & Frameworks",
      },
    },
    "icon": "fa-regular fa-circle-question",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.faq-languages--frameworks",
    "org_id": "test",
    "pathname": "/faq",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Languages & Frameworks",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "content": "Ask yourself about <X>:
Is <X> open-source?

Is <X> developer-friendly, well-documented, and lets you get started in minutes?

Besides authentication, does <X> also do authorization and user management (see feature list below)?


If you answered "no" to any of these questions, then that's how Stack Auth is different from <X>.


While you can use any backend framework with Stack, the frontend is tightly integrated with Next.js. If you want to use a different frontend framework, you will have to build the integration ourselves with the client endpoints of our REST API. Some members of our community have started projects to do this, so you may want to join our Discord to coordinate with them.


Only the Next.js app router is currently supported. However, just like any other unsupported framework, you can use the client endpoints of our REST API to build your own integration.",
    "domain": "test.com",
    "hash": "#product",
    "hierarchy": {
      "h0": {
        "title": "FAQ",
      },
      "h2": {
        "id": "product",
        "title": "Product",
      },
    },
    "icon": "fa-regular fa-circle-question",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.faq-product",
    "org_id": "test",
    "pathname": "/faq",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Product",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "content": "Please carefully read our CONTRIBUTING.md.",
    "domain": "test.com",
    "hash": "#other",
    "hierarchy": {
      "h0": {
        "title": "FAQ",
      },
      "h2": {
        "id": "other",
        "title": "Other",
      },
    },
    "icon": "fa-regular fa-circle-question",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.faq-other",
    "org_id": "test",
    "pathname": "/faq",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Other",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "description": "Getting started with Stack in 5 minutes",
    "domain": "test.com",
    "icon": "fa-regular fa-download",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.installation-setup",
    "org_id": "test",
    "pathname": "/getting-started/setup",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Installation & Setup",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "code_snippets": [
      {
        "code": "npx @stackframe/init-stack@latest",
        "lang": "sh",
        "meta": "title="Terminal"",
      },
      {
        "code": "NEXT_PUBLIC_STACK_PROJECT_ID=<your-project-id>
NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=<your-publishable-client-key>
STACK_SECRET_SERVER_KEY=<your-secret-server-key>",
        "lang": "sh",
        "meta": "title=".env.local"",
      },
      {
        "code": "npx @stackframe/init-stack@latest",
        "lang": "sh",
        "meta": "title="Terminal"",
      },
      {
        "code": "NEXT_PUBLIC_STACK_PROJECT_ID=<your-project-id>
NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=<your-publishable-client-key>
STACK_SECRET_SERVER_KEY=<your-secret-server-key>",
        "lang": "sh",
        "meta": "title=".env.local"",
      },
      {
        "code": "npm install @stackframe/stack",
        "lang": "bash",
        "meta": "title="Terminal"",
      },
      {
        "code": "NEXT_PUBLIC_STACK_PROJECT_ID=<your-project-id>
NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=<your-publishable-client-key>
STACK_SECRET_SERVER_KEY=<your-secret-server-key>",
        "lang": "sh",
        "meta": "title=".env.local"",
      },
      {
        "code": "import "server-only";
import { StackServerApp } from "@stackframe/stack";

export const stackServerApp = new StackServerApp({
  tokenStore: "nextjs-cookie", // storing auth tokens in cookies
});",
        "lang": "tsx",
        "meta": "title="stack.ts"",
      },
      {
        "code": "import { StackHandler } from "@stackframe/stack";
import { stackServerApp } from "@/stack";

export default function Handler(props: any) {
  return <StackHandler fullPage app={stackServerApp} {...props} />;
}",
        "lang": "tsx",
        "meta": "title="app/handler/[...stack]/page.tsx"",
      },
      {
        "code": "import React from "react";
import { StackProvider, StackTheme } from "@stackframe/stack";
import { stackServerApp } from "@/stack";

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <StackProvider app={stackServerApp}>
          <StackTheme>
            {children}
          </StackTheme>
        </StackProvider>
      </body>
    </html>
  );
}",
        "lang": "tsx",
        "meta": "title="app/layout.tsx"",
      },
      {
        "code": "export default function Loading() {
  // You can use any loading indicator here
  return <>
    Loading...
  </>;
}",
        "lang": "tsx",
        "meta": "title="app/loading.tsx"",
      },
      {
        "code": "npm install @stackframe/stack",
        "lang": "bash",
        "meta": "title="Terminal"",
      },
      {
        "code": "NEXT_PUBLIC_STACK_PROJECT_ID=<your-project-id>
NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=<your-publishable-client-key>
STACK_SECRET_SERVER_KEY=<your-secret-server-key>",
        "lang": "sh",
        "meta": "title=".env.local"",
      },
      {
        "code": "import "server-only";
import { StackServerApp } from "@stackframe/stack";

export const stackServerApp = new StackServerApp({
  tokenStore: "nextjs-cookie", // storing auth tokens in cookies
});",
        "lang": "tsx",
        "meta": "title="stack.ts"",
      },
      {
        "code": "import { StackHandler } from "@stackframe/stack";
import { stackServerApp } from "@/stack";

export default function Handler(props: any) {
  return <StackHandler fullPage app={stackServerApp} {...props} />;
}",
        "lang": "tsx",
        "meta": "title="app/handler/[...stack]/page.tsx"",
      },
      {
        "code": "import React from "react";
import { StackProvider, StackTheme } from "@stackframe/stack";
import { stackServerApp } from "@/stack";

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <StackProvider app={stackServerApp}>
          <StackTheme>
            {children}
          </StackTheme>
        </StackProvider>
      </body>
    </html>
  );
}",
        "lang": "tsx",
        "meta": "title="app/layout.tsx"",
      },
      {
        "code": "export default function Loading() {
  // You can use any loading indicator here
  return <>
    Loading...
  </>;
}",
        "lang": "tsx",
        "meta": "title="app/loading.tsx"",
      },
    ],
    "content": "To get started with Stack, you need a Next.js project with the app router. The pages router is not supported.
We recommend using our setup wizard, which will automatically detect your project structure and guide you through the installation process. In case it fails, you can choose to do the manual installation instead.






Run installation wizard
Run Stack's installation wizard with the following command:
Update API keys
Then, create an account on the Stack Auth dashboard, create a new project with an API key, and copy its environment variables into the .env.local file of your Next.js project:
Done!
That's it! The following files should have been created or updated in your project:
app/handler/[...stack]/page.tsx: This file contains the default pages for sign-in, sign-out, account settings, and more. If you prefer, later you will learn how to use custom pages instead.

app/layout.tsx: The layout file was updated to wrap the entire body with StackProvider and StackTheme.

app/loading.tsx: If not yet found, Stack automatically adds a Suspense boundary to your app. This is shown to the user while Stack's async hooks, like useUser, are loading.

stack.ts: This file contains the stackServerApp which you can use to access Stack from Server Components, Server Actions, API routes, and middleware.




Note: The setup wizard also supports existing, complicated projects. Cases where manual installation is necessary are rare.
If you are struggling with the setup wizard, please reach out to us on our Discord first, where we'll be happy to help you.


Install npm package
First, install Stack with npm, yarn, or pnpm:
Create API keys
If you haven't already, register a new account on Stack. Create a project in the dashboard, create a new API key from the left sidebar, and copy the project ID, publishable client key, and secret server key into a new file called .env.local in the root of your Next.js project:
Create stack.ts file
Create a new file stack.ts in your root directory and fill it with the following:
This will read the environment variables automatically and create a server app that you can later use to access Stack from your Next.js server.
Check out the StackServerApp documentation to learn more about its other options.
Create Stack handler
Create a new file in app/handler/[...stack]/page.tsx and paste the following code:
This will create pages for sign-in, sign-up, password reset, and others. Additionally, it will be used as a callback URL for OAuth. You can replace them with your own pages later.
Add StackProvider to layout.tsx
In your app/layout.tsx, wrap the entire body with a StackProvider and StackTheme. Afterwards, it should look like this:
Add Suspense boundary
By default, Stack uses Suspense to handle loading states. To show a loading indicator while Stack is fetching user data, make sure there is a loading.tsx file in your app directory:
Done!",
    "domain": "test.com",
    "hash": "#setup",
    "hierarchy": {
      "h0": {
        "title": "Installation & Setup",
      },
      "h2": {
        "id": "setup",
        "title": "Setup",
      },
    },
    "icon": "fa-regular fa-download",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.installation-setup-setup",
    "org_id": "test",
    "pathname": "/getting-started/setup",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Setup",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "That's it! Stack is now configured in your Next.js project. If you start your Next.js app with npm run dev and navigate to http://localhost:3000/handler/signup, you will see the Stack sign-up page.
Stack sign in page
After signing up/in, you will be redirected back to the home page. We will show you how to add user information to it in the next section. You can also check out the http://localhost:3000/handler/account-settings page which looks like this:
Stack account settings page",
    "domain": "test.com",
    "hash": "#post-setup",
    "hierarchy": {
      "h0": {
        "title": "Installation & Setup",
      },
      "h2": {
        "id": "post-setup",
        "title": "Post-setup",
      },
    },
    "icon": "fa-regular fa-download",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.installation-setup-post-setup",
    "org_id": "test",
    "pathname": "/getting-started/setup",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Post-setup",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "Next up, we will show you how to retrieve and update user information, and how to protect a page.",
    "domain": "test.com",
    "hash": "#next-steps",
    "hierarchy": {
      "h0": {
        "title": "Installation & Setup",
      },
      "h2": {
        "id": "next-steps",
        "title": "Next steps",
      },
    },
    "icon": "fa-regular fa-download",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.installation-setup-next-steps",
    "org_id": "test",
    "pathname": "/getting-started/setup",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Next steps",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "In the last guide, we initialized Stack. This time, we will take a quick look at some of the most useful Next.js components.
For the full documentation of all available components, please refer to the components reference.",
    "description": "Pre-built Next.js components to make your life easier",
    "domain": "test.com",
    "icon": "fa-regular fa-puzzle",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.components",
    "org_id": "test",
    "pathname": "/getting-started/components",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Components",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "code_snippets": [
      {
        "code": "import { UserButton } from '@stackframe/stack';

export default function Page() {
  return (
    <UserButton />
  );
}",
        "lang": "tsx",
        "meta": "title="page.tsx"",
      },
    ],
    "content": "The <UserButton /> component shows the user's avatar and opens a dropdown with various user settings.
UserButton",
    "domain": "test.com",
    "hash": "#userbutton-",
    "hierarchy": {
      "h0": {
        "title": "Components",
      },
      "h2": {
        "id": "userbutton-",
        "title": "<UserButton />",
      },
    },
    "icon": "fa-regular fa-puzzle",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.components-userbutton-",
    "org_id": "test",
    "pathname": "/getting-started/components",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "code_snippets": [
      {
        "code": "import { SignIn } from '@stackframe/stack';

export default function Page() {
  return (
    <SignIn />
  );
}",
        "lang": "tsx",
        "meta": "title="page.tsx"",
      },
    ],
    "content": "These components show a sign-in and sign-up form, respectively.
Sign-in Component
All of Stack's components are modular and built from smaller primitives. For example, the <SignIn /> component is composed of the following:
An <OAuthButtonGroup />, which itself is composed of multiple <OAuthButton /> components

A <MagicLinkSignIn />, which has a text field and calls useStackApp().signInWithMagicLink()

A <CredentialSignIn />, which has two text fields and calls useStackApp().signInWithCredential()


You can use these components individually to build a custom sign-in component.
To change the default sign-in URL to your own, see the documentation on custom pages.",
    "domain": "test.com",
    "hash": "#signin--and-signup-",
    "hierarchy": {
      "h0": {
        "title": "Components",
      },
      "h2": {
        "id": "signin--and-signup-",
        "title": "<SignIn /> and <SignUp />",
      },
    },
    "icon": "fa-regular fa-puzzle",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.components-signin--and-signup-",
    "org_id": "test",
    "pathname": "/getting-started/components",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "and",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "Stack has many more components available. For a comprehensive list, please check the documentation on components.",
    "domain": "test.com",
    "hash": "#others",
    "hierarchy": {
      "h0": {
        "title": "Components",
      },
      "h2": {
        "id": "others",
        "title": "Others",
      },
    },
    "icon": "fa-regular fa-puzzle",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.components-others",
    "org_id": "test",
    "pathname": "/getting-started/components",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Others",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "In the next guide, we will do a deep-dive into retrieving and modifying user objects, as well as how to protect a page.",
    "domain": "test.com",
    "hash": "#next-steps",
    "hierarchy": {
      "h0": {
        "title": "Components",
      },
      "h2": {
        "id": "next-steps",
        "title": "Next steps",
      },
    },
    "icon": "fa-regular fa-puzzle",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.components-next-steps",
    "org_id": "test",
    "pathname": "/getting-started/components",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Next steps",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "You will inevitably build custom components that access the user in one way or another. In this section, we will take a closer look at the functions and hooks that let you do this.",
    "description": "Reading and writing user information, and protecting pages",
    "domain": "test.com",
    "icon": "fa-regular fa-address-book",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users",
    "org_id": "test",
    "pathname": "/getting-started/users",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Users",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "code_snippets": [
      {
        "code": ""use client";
import { useUser } from "@stackframe/stack"

export function MyClientComponent() {
  const user = useUser();
  return <div>{user ? `Hello, ${user.displayName ?? "anon"}` : 'You are not logged in'}</div>;
}",
        "lang": "tsx",
        "meta": "title="my-client-component.tsx"",
      },
      {
        "code": "  const user = useUser({ or: "redirect" });
  return <div>{`Hello, ${user.displayName ?? "anon"}`}</div>;",
        "lang": "tsx",
      },
    ],
    "content": "The useUser() hook returns the current user in a Client Component. By default, it will return null if the user is not signed in.
The useUser() hook is simply a shorthand for useStackApp().useUser(). useStackApp() also contains other useful hooks and methods for clients, which will be described later.
Sometimes, you want to retrieve the user only if they're signed in, and redirect to the sign-in page otherwise. In this case, simply pass { or: "redirect" }, and the function will never return null.",
    "domain": "test.com",
    "hash": "#client-component-basics",
    "hierarchy": {
      "h0": {
        "title": "Users",
      },
      "h2": {
        "id": "client-component-basics",
        "title": "Client Component basics",
      },
    },
    "icon": "fa-regular fa-address-book",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-client-component-basics",
    "org_id": "test",
    "pathname": "/getting-started/users",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Client Component basics",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "code_snippets": [
      {
        "code": "import { stackServerApp } from "@/stack";

export default async function MyServerComponent() {
  const user = await stackServerApp.getUser();  // or: stackServerApp.getUser({ or: "redirect" })
  return <div>{user ? `Hello, ${user.displayName ?? "anon"}` : 'You are not logged in'}</div>;
}",
        "lang": "tsx",
        "meta": "title="my-server-component.tsx"",
      },
    ],
    "content": "Since useUser() is a stateful hook, you can't use it on server components. Instead, you can import stackServerApp from stack.ts and call getUser():


Since useUser() is a hook, it will re-render the component on user changes (eg. signout), while getUser() will only fetch the user once (on page load). You can also call useStackApp().getUser() on the client side to get the user in a non-component context.",
    "domain": "test.com",
    "hash": "#server-component-basics",
    "hierarchy": {
      "h0": {
        "title": "Users",
      },
      "h2": {
        "id": "server-component-basics",
        "title": "Server Component basics",
      },
    },
    "icon": "fa-regular fa-address-book",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-server-component-basics",
    "org_id": "test",
    "pathname": "/getting-started/users",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Server Component basics",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "code_snippets": [
      {
        "code": "export async function middleware(request: NextRequest) {
  const user = await stackServerApp.getUser();
  if (!user) {
    return NextResponse.redirect(new URL('/handler/sign-in', request.url));
  }
  return NextResponse.next();
}

export const config = {
  // You can add your own route protection logic here
  // Make sure not to protect the root URL, as it would prevent users from accessing static Next.js files or Stack's /handler path
  matcher: '/protected/:path*',
};",
        "lang": "tsx",
        "meta": "title="middleware.tsx"",
      },
      {
        "code": "export async function middleware(request: NextRequest) {
  const user = await stackServerApp.getUser();
  if (!user) {
    return NextResponse.redirect(new URL('/handler/sign-in', request.url));
  }
  return NextResponse.next();
}

export const config = {
  // You can add your own route protection logic here
  // Make sure not to protect the root URL, as it would prevent users from accessing static Next.js files or Stack's /handler path
  matcher: '/protected/:path*',
};",
        "lang": "tsx",
        "meta": "title="middleware.tsx"",
      },
      {
        "code": ""use client";
import { useUser } from "@stackframe/stack";

export default function MyProtectedClientComponent() {
  useUser({ or: 'redirect' });
  return <h1>You can only see this if you are logged in</h1>
}",
        "lang": "tsx",
        "meta": "title="my-protected-client-component.tsx"",
      },
      {
        "code": ""use client";
import { useUser } from "@stackframe/stack";

export default function MyProtectedClientComponent() {
  useUser({ or: 'redirect' });
  return <h1>You can only see this if you are logged in</h1>
}",
        "lang": "tsx",
        "meta": "title="my-protected-client-component.tsx"",
      },
      {
        "code": "import { stackServerApp } from "@/stack";

export default async function MyProtectedServerComponent() {
  await stackServerApp.getUser({ or: 'redirect' });
  return <h1>You can only see this if you are logged in</h1>
}",
        "lang": "tsx",
        "meta": "title="my-protected-server-component.tsx"",
      },
      {
        "code": "import { stackServerApp } from "@/stack";

export default async function MyProtectedServerComponent() {
  await stackServerApp.getUser({ or: 'redirect' });
  return <h1>You can only see this if you are logged in</h1>
}",
        "lang": "tsx",
        "meta": "title="my-protected-server-component.tsx"",
      },
    ],
    "content": "There are three ways to protect a page: in Client Components with useUser({ or: "redirect" }), in Server Components with await getUser({ or: "redirect" }), or with middleware.
On Client Components, the useUser({ or: 'redirect' }) hook will redirect the user to the sign-in page if they are not logged in. Similarly, on Server Components, call await getUser({ or: "redirect" }) to protect a page (or component).
Middleware can be used whenever it is easy to tell whether a page should be protected given just the URL, for example, when you have a /private section only accessible to logged-in users.










If you have sensitive information hidden in the page HTML itself, be aware of Next.js differences when using Server vs. Client Components.
Client Components: Client components are always sent to the browser, regardless of page protection. This is standard Next.js behavior. For more information, please refer to the Next.js documentation.

Server Components: If a component is protected, it is guaranteed that its bundled HTML will not be sent to the browser if the user is not logged in. However, this is not necessarily true for its children and the rest of the page, as Next.js may split components on the same page and send them to the client separately for performance.
For example, if your page is <Parent><Child /></Parent>, where Parent is protected and Child is not, Next.js may still send <Child /> to the browser even if the user is not logged in. (Normal browsers will never display it, but attackers may be able to retrieve it.) Notably, this also applies to unprotected pages inside protected layouts.
To remediate this, every component/page that contains sensitive information should protect itself, instead of relying on an outer layout. This is good practice anyways; it prevents you from accidentally exposing the data.

Middleware: Because middleware runs on the edge, it ensures that the protected URLs are not accessible to anyone who is not authorized, so you don't have to worry about Next.js pre-sending unprotected components to the client.


Irregardless of which method you use, attackers will never be able to, say, impersonate a user.",
    "domain": "test.com",
    "hash": "#protecting-a-page",
    "hierarchy": {
      "h0": {
        "title": "Users",
      },
      "h2": {
        "id": "protecting-a-page",
        "title": "Protecting a page",
      },
    },
    "icon": "fa-regular fa-address-book",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-protecting-a-page",
    "org_id": "test",
    "pathname": "/getting-started/users",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Protecting a page",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "code_snippets": [
      {
        "code": "'use client';
import { useUser } from "@stackframe/stack";

export default function MyClientComponent() {
  const user = useUser();
  return <button onClick={async () => await user.update({ displayName: "New Name" })}>
    Change Name
  </button>;
}",
        "lang": "tsx",
        "meta": "title="my-client-component.tsx"",
      },
    ],
    "content": "You can update attributes on a user object with the user.update() function.
You can also store custom user data in the clientMetadata, serverMetadata, or clientReadonlyMetadata fields. More information here.",
    "domain": "test.com",
    "hash": "#user-data",
    "hierarchy": {
      "h0": {
        "title": "Users",
      },
      "h2": {
        "id": "user-data",
        "title": "User data",
      },
    },
    "icon": "fa-regular fa-address-book",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-user-data",
    "org_id": "test",
    "pathname": "/getting-started/users",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "User data",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "code_snippets": [
      {
        "code": ""use client";
import { useUser } from "@stackframe/stack";

export default function SignOutButton() {
  const user = useUser();
  return user ? <button onClick={() => user.signOut()}>Sign Out</button> : "Not signed in";
}",
        "lang": "tsx",
        "meta": "title="sign-out-button.tsx"",
      },
      {
        "code": ""use client";
import { useUser } from "@stackframe/stack";

export default function SignOutButton() {
  const user = useUser();
  return user ? <button onClick={() => user.signOut()}>Sign Out</button> : "Not signed in";
}",
        "lang": "tsx",
        "meta": "title="sign-out-button.tsx"",
      },
      {
        "code": "import { stackServerApp } from "@/stack";

export default async function SignOutLink() {
  // stackServerApp.urls.signOut is equal to /handler/sign-out
  return <a href={stackServerApp.urls.signOut}>Sign Out</a>;
}",
        "lang": "tsx",
        "meta": "title="sign-out-link.tsx"",
      },
      {
        "code": "import { stackServerApp } from "@/stack";

export default async function SignOutLink() {
  // stackServerApp.urls.signOut is equal to /handler/sign-out
  return <a href={stackServerApp.urls.signOut}>Sign Out</a>;
}",
        "lang": "tsx",
        "meta": "title="sign-out-link.tsx"",
      },
    ],
    "content": "You can sign out the user by redirecting them to /handler/sign-out or simply by calling user.signOut(). They will be redirected to the URL configured as afterSignOut in the StackServerApp.",
    "domain": "test.com",
    "hash": "#signing-out",
    "hierarchy": {
      "h0": {
        "title": "Users",
      },
      "h2": {
        "id": "signing-out",
        "title": "Signing out",
      },
    },
    "icon": "fa-regular fa-address-book",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-signing-out",
    "org_id": "test",
    "pathname": "/getting-started/users",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Signing out",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "code_snippets": [
      {
        "code": "'use client';
import { useUser, useStackApp, UserButton } from "@stackframe/stack";

export default function PageClient() {
  const user = useUser();
  const app = useStackApp();
  return (
    <div>
      {user ? (
        <div>
          <UserButton />
          <p>Welcome, {user.displayName ?? "anonymous user"}</p>
          <p>Your e-mail: {user.primaryEmail}</p>
          <button onClick={() => user.signOut()}>Sign Out</button>
        </div>
      ) : (
        <div>
          <p>You are not logged in</p>
          <button onClick={() => app.redirectToSignIn()}>Sign in</button>
          <button onClick={() => app.redirectToSignUp()}>Sign up</button>
        </div>
      )}
    </div>
  );
}",
        "lang": "tsx",
        "meta": "title="app/profile/page.tsx"",
      },
      {
        "code": "'use client';
import { useUser, useStackApp, UserButton } from "@stackframe/stack";

export default function PageClient() {
  const user = useUser();
  const app = useStackApp();
  return (
    <div>
      {user ? (
        <div>
          <UserButton />
          <p>Welcome, {user.displayName ?? "anonymous user"}</p>
          <p>Your e-mail: {user.primaryEmail}</p>
          <button onClick={() => user.signOut()}>Sign Out</button>
        </div>
      ) : (
        <div>
          <p>You are not logged in</p>
          <button onClick={() => app.redirectToSignIn()}>Sign in</button>
          <button onClick={() => app.redirectToSignUp()}>Sign up</button>
        </div>
      )}
    </div>
  );
}",
        "lang": "tsx",
        "meta": "title="app/profile/page.tsx"",
      },
      {
        "code": "import { stackServerApp } from "@/stack";
import { UserButton } from "@stackframe/stack";

export default async function Page() {
  const user = await stackServerApp.getUser();
  return (
    <div>
      {user ? (
        <div>
          <UserButton />
          <p>Welcome, {user.displayName ?? "anonymous user"}</p>
          <p>Your e-mail: {user.primaryEmail}</p>
          <p><a href={stackServerApp.urls.signOut}>Sign Out</a></p>
        </div>
      ) : (
        <div>
          <p>You are not logged in</p>
          <p><a href={stackServerApp.urls.signIn}>Sign in</a></p>
          <p><a href={stackServerApp.urls.signUp}>Sign up</a></p>
        </div>
      )}
    </div>
  );
}",
        "lang": "tsx",
        "meta": "title="app/profile/page.tsx"",
      },
      {
        "code": "import { stackServerApp } from "@/stack";
import { UserButton } from "@stackframe/stack";

export default async function Page() {
  const user = await stackServerApp.getUser();
  return (
    <div>
      {user ? (
        <div>
          <UserButton />
          <p>Welcome, {user.displayName ?? "anonymous user"}</p>
          <p>Your e-mail: {user.primaryEmail}</p>
          <p><a href={stackServerApp.urls.signOut}>Sign Out</a></p>
        </div>
      ) : (
        <div>
          <p>You are not logged in</p>
          <p><a href={stackServerApp.urls.signIn}>Sign in</a></p>
          <p><a href={stackServerApp.urls.signUp}>Sign up</a></p>
        </div>
      )}
    </div>
  );
}",
        "lang": "tsx",
        "meta": "title="app/profile/page.tsx"",
      },
    ],
    "content": "Stack automatically creates a user profile on sign-up. Let's build a page that displays this information. In app/profile/page.tsx:






After saving your code, you can see the profile page on http://localhost:3000/profile.
For more examples on how to use the User object, check the the SDK documentation.",
    "domain": "test.com",
    "hash": "#example-custom-profile-page",
    "hierarchy": {
      "h0": {
        "title": "Users",
      },
      "h2": {
        "id": "example-custom-profile-page",
        "title": "Example: Custom profile page",
      },
    },
    "icon": "fa-regular fa-address-book",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-example-custom-profile-page",
    "org_id": "test",
    "pathname": "/getting-started/users",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Example: Custom profile page",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "In the next guide, we will show you how to put your application into production.",
    "domain": "test.com",
    "hash": "#next-steps",
    "hierarchy": {
      "h0": {
        "title": "Users",
      },
      "h2": {
        "id": "next-steps",
        "title": "Next steps",
      },
    },
    "icon": "fa-regular fa-address-book",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users-next-steps",
    "org_id": "test",
    "pathname": "/getting-started/users",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Next steps",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "Stack makes development easy with various default settings, but these settings need to be optimized for security and user experience when moving to production. Here's a checklist of things you need to do before switching to production mode:",
    "description": "Steps to prepare Stack for production use",
    "domain": "test.com",
    "icon": "fa-regular fa-rocket",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.going-to-production",
    "org_id": "test",
    "pathname": "/getting-started/production",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Going to Production",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "By default, Stack allows all localhost paths as valid callback URLs. This is convenient for development but poses a security risk in production because attackers could use their own domains as callback URLs to intercept sensitive information. Therefore, in production, Stack must know your domain (e.g., https://your-website.com) and only allow callbacks from those domains.
Follow these steps when you're ready to push your application to production:
Add Your Domain: Navigate to the Domain & Handlers tab in the Stack dashboard. If you haven't configured your handler, you can leave it as the default. (Learn more about handlers here).

Disable Localhost Callbacks: For enhanced security, disable the Allow all localhost callbacks for development option.",
    "domain": "test.com",
    "hash": "#domains-and-handlers",
    "hierarchy": {
      "h0": {
        "title": "Going to Production",
      },
      "h3": {
        "id": "domains-and-handlers",
        "title": "Domains and handlers",
      },
    },
    "icon": "fa-regular fa-rocket",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.going-to-production-domains-and-handlers",
    "org_id": "test",
    "pathname": "/getting-started/production",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Domains and handlers",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "Stack uses shared OAuth keys for development to simplify setup when using "Sign in with Google/GitHub/etc." However, this isn't secure for production as it displays "Stack Development" on the providers' consent screens, making it unclear to users if the OAuth request is genuinely from your site. Thus, you should configure your own OAuth keys with the providers and connect them to Stack.
To use your own OAuth provider setups in production, follow these steps for each provider you use:
Create an OAuth App: On the provider's website, create an OAuth app and set the callback URL to the corresponding Stack callback URL. Copy the client ID and client secret.




Google OAuth Setup Guide

Callback URL:

https://api.stack-auth.com/api/v1/auth/oauth/callback/google


GitHub OAuth Setup Guide

Callback URL:

https://api.stack-auth.com/api/v1/auth/oauth/callback/github


Facebook OAuth Setup Guide

Callback URL:

https://api.stack-auth.com/api/v1/auth/oauth/callback/facebook


Microsoft Azure OAuth Setup Guide

Callback URL:

https://api.stack-auth.com/api/v1/auth/oauth/callback/microsoft


Spotify OAuth Setup Guide

Callback URL:

https://api.stack-auth.com/api/v1/auth/oauth/callback/spotify


Gitlab OAuth Setup Guide

Callback URL:

https://api.stack-auth.com/api/v1/auth/oauth/callback/gitlab


Bitbucket OAuth Setup Guide

Callback URL:

https://api.stack-auth.com/api/v1/auth/oauth/callback/bitbucket


LinkedIn OAuth Setup Guide

Callback URL:

https://api.stack-auth.com/api/v1/auth/oauth/callback/linkedin


X OAuth Setup Guide

Callback URL:

https://api.stack-auth.com/api/v1/auth/oauth/callback/x

Enter OAuth Credentials: Go to the Auth Methods section in the Stack dashboard, open the provider's settings, switch from shared keys to custom keys, and enter the client ID and client secret.",
    "domain": "test.com",
    "hash": "#oauth-providers",
    "hierarchy": {
      "h0": {
        "title": "Going to Production",
      },
      "h3": {
        "id": "oauth-providers",
        "title": "OAuth providers",
      },
    },
    "icon": "fa-regular fa-rocket",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.going-to-production-oauth-providers",
    "org_id": "test",
    "pathname": "/getting-started/production",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "OAuth providers",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "For development, Stack uses a shared email server, which sends emails from Stack's domain. This is not ideal for production as users may not trust emails from an unfamiliar domain. You should set up an email server connected to your own domain.
Steps to connect your own email server with Stack:
Setup Email Server: Configure your own email server and connect it to your domain (this step is beyond Stack's documentation scope).

Configure Stack's Email Settings: Navigate to the Emails section in the Stack dashboard, click Edit in the Email Server section, switch from Shared to Custom SMTP server, enter your SMTP configurations, and save.",
    "domain": "test.com",
    "hash": "#email-server",
    "hierarchy": {
      "h0": {
        "title": "Going to Production",
      },
      "h3": {
        "id": "email-server",
        "title": "Email server",
      },
    },
    "icon": "fa-regular fa-rocket",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.going-to-production-email-server",
    "org_id": "test",
    "pathname": "/getting-started/production",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Email server",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "After completing the steps above, you can enable production mode on the Project Settings tab in the Stack dashboard, ensuring that your website runs securely with Stack in a production environment.",
    "domain": "test.com",
    "hash": "#enabling-production-mode",
    "hierarchy": {
      "h0": {
        "title": "Going to Production",
      },
      "h3": {
        "id": "enabling-production-mode",
        "title": "Enabling production mode",
      },
    },
    "icon": "fa-regular fa-rocket",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.going-to-production-enabling-production-mode",
    "org_id": "test",
    "pathname": "/getting-started/production",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Enabling production mode",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "By now, you may have seen the useApp() hook and the stackServerApp variable. Both return a StackApp, of type StackClientApp and StackServerApp respectively.
Nearly all of Stack's functionality is on your StackApp object. Think of this object as the "connection" from your code to Stack's servers. Each app is always associated with one specific project ID (by default the one found in your environment variables).
There is also a page on StackApp in the SDK reference, which lists all available functions.",
    "description": "The most important object of your Stack project",
    "domain": "test.com",
    "icon": "fa-regular fa-folder-gear",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.the-stack-app-object",
    "org_id": "test",
    "pathname": "/concepts/stack-app",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "The StackApp Object",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "// server-component.tsx
async function ServerComponent() {
  const app = stackServerApp;
  // returns a Promise, must be awaited
  const user = await app.getUser();

  return <div>{user.displayName}</div>;
}


// client-component.tsx
"use client";
function ClientComponent() {
  const app = useApp();
  // returns the value directly
  const user = app.useUser();

  return <div>{user.displayName}</div>;
}",
        "lang": "tsx",
      },
    ],
    "content": "You will see that most of the asynchronous functions on StackApp come in two flavors: getXyz/listXyz and useXyz. The former are asynchronous fetching functions which return a Promise, while the latter are React hooks that suspend the current component until the data is available.
Normally, you would choose between the two based on whether you are in a React Server Component or a React Client Component. However, there are some scenarios where you use getXyz on the client, for example as the callback of an onClick handler.",
    "domain": "test.com",
    "hash": "#getxyzlistxyz-vs-usexyz",
    "hierarchy": {
      "h0": {
        "title": "The StackApp Object",
      },
      "h2": {
        "id": "getxyzlistxyz-vs-usexyz",
        "title": "getXyz/listXyz vs. useXyz",
      },
    },
    "icon": "fa-regular fa-folder-gear",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.the-stack-app-object-getxyzlistxyz-vs-usexyz",
    "org_id": "test",
    "pathname": "/concepts/stack-app",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "getXyz/listXyz vs. useXyz",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "StackClientApp contains everything needed to build a frontend application, for example the currently authenticated user. It requires a publishable client key in its initialization (usually set by the NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY environment variable).
StackServerApp has all the functionality of StackClientApp, but also some functions with elevated permissions, eg. listing or modifying ALL users. This requires a secret server key (usually set by the STACK_SECRET_SERVER_KEY environment variable), which must always be kept secret.
There is also a third type, StackAdminApp, but it is rarely used. You can use it for automation or internal tools, and can edit your project's configuration.


Some of the functions have different return types; for example, StackClientApp.getUser() returns a Promise<User> while StackServerApp.getUser() returns a Promise<ServerUser>. The Server or Admin prefixes indicate that the object contains server-/admin-only functionality.",
    "domain": "test.com",
    "hash": "#client-vs-server",
    "hierarchy": {
      "h0": {
        "title": "The StackApp Object",
      },
      "h2": {
        "id": "client-vs-server",
        "title": "Client vs. server",
      },
    },
    "icon": "fa-regular fa-folder-gear",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.the-stack-app-object-client-vs-server",
    "org_id": "test",
    "pathname": "/concepts/stack-app",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Client vs. server",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "Stack Auth allows storing additional user information through three types of metadata fields:
clientMetadata: Readable and writable from a client.

serverMetadata: Readable and writable only from a server.

clientReadOnlyMetadata: Readable from a client, writable only from a server.",
    "description": "How to store custom user metadata in Stack Auth",
    "domain": "test.com",
    "icon": "fa-regular fa-user-pen",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.custom-user-data",
    "org_id": "test",
    "pathname": "/concepts/custom-user-data",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Custom User Data",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "await user.update({
  clientMetadata: {
    mailingAddress: "123 Main St",
  },
});

// On the client:
const user = useUser();
console.log(user.clientMetadata);",
        "lang": "tsx",
      },
    ],
    "content": "You can use the clientMetadata field to store non-sensitive information that both the client and server can read and write.",
    "domain": "test.com",
    "hash": "#client-metadata",
    "hierarchy": {
      "h0": {
        "title": "Custom User Data",
      },
      "h2": {
        "id": "client-metadata",
        "title": "Client metadata",
      },
    },
    "icon": "fa-regular fa-user-pen",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.custom-user-data-client-metadata",
    "org_id": "test",
    "pathname": "/concepts/custom-user-data",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Client metadata",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "const user = await stackServerApp.getUser();
await user.update({
  serverMetadata: {
    secretInfo: "This is a secret",
  },
});

// To read:
const user = await stackServerApp.getUser();
console.log(user.serverMetadata);",
        "lang": "tsx",
      },
    ],
    "content": "For sensitive information, use the serverMetadata field. This ensures the data is only accessible and modifiable by the server.",
    "domain": "test.com",
    "hash": "#server-side-metadata",
    "hierarchy": {
      "h0": {
        "title": "Custom User Data",
      },
      "h2": {
        "id": "server-side-metadata",
        "title": "Server-side metadata",
      },
    },
    "icon": "fa-regular fa-user-pen",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.custom-user-data-server-side-metadata",
    "org_id": "test",
    "pathname": "/concepts/custom-user-data",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Server-side metadata",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "// On the server:
const user = await stackServerApp.getUser();
await user.update({
  clientReadOnlyMetadata: {
    subscriptionPlan: "premium",
  },
});

// On the client:
const user = useUser();
console.log(user.clientReadOnlyMetadata);",
        "lang": "tsx",
      },
    ],
    "content": "Use clientReadOnlyMetadata for data that clients need to read but never modify, such as subscription status.",
    "domain": "test.com",
    "hash": "#client-read-only-metadata",
    "hierarchy": {
      "h0": {
        "title": "Custom User Data",
      },
      "h2": {
        "id": "client-read-only-metadata",
        "title": "Client read-only metadata",
      },
    },
    "icon": "fa-regular fa-user-pen",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.custom-user-data-client-read-only-metadata",
    "org_id": "test",
    "pathname": "/concepts/custom-user-data",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Client read-only metadata",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "By default, Stack Auth collects information such as email addresses from OAuth providers. Sometimes, you may want to collect additional information from users during sign-up, for example a name or address.
The most straightforward approach is to redirect users to an onboarding page right after they sign up. However, this is not recommended for the following reasons:
Users can accidentally (or purposefully) close or navigate away from the page before completing the onboarding.

Redirect URLs may vary depending on the context. For instance, if a user is redirected to a sign-in page after trying to access a protected page, they'll expect to return to the original protected page post-authentication.


Instead, a more reliable strategy is to store an onboarded flag in the user's metadata and redirect users to the onboarding page if they haven't completed it yet.",
    "description": "Implementing a user onboarding page and collecting information on sign-up",
    "domain": "test.com",
    "icon": "fa-regular fa-user-check",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.user-onboarding",
    "org_id": "test",
    "pathname": "/concepts/user-onboarding",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "User Onboarding",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "export default function OnboardingPage() {
  const user = useUser();
  const router = useRouter();
  const [address, setAddress] = useState('');


  return <>
    <input 
      type="text" 
      value={address} 
      onChange={(e) => setAddress(e.target.value)} 
    />

    <button onClick={async () => {
      await user.update({
        clientMetadata: {
          onboarded: true,
          address,
        },
      });
      router.push('/');
    }}>
      Submit
    </button>
    </>
  );
}",
        "lang": "jsx",
        "meta": "title="app/onboarding/page.tsx"",
      },
      {
        "code": "'use client';
import { useEffect } from 'react';
import { useUser } from '@stackframe/stack';
import { useRouter } from 'next/navigation';

export function useOnboarded() {
  const user = useUser();
  const router = useRouter();

  useEffect(() => {
    if (!user.clientMetadata.onboarded) {
      router.push('/onboarding');
    }
  }, [user]);
}",
        "lang": "jsx",
        "meta": "title="app/onboarding-hooks.ts"",
      },
      {
        "code": "'use client';
import { useEffect } from 'react';
import { useUser } from '@stackframe/stack';
import { useRouter } from 'next/navigation';

export function useOnboarded() {
  const user = useUser();
  const router = useRouter();

  useEffect(() => {
    if (!user.clientMetadata.onboarded) {
      router.push('/onboarding');
    }
  }, [user]);
}",
        "lang": "jsx",
        "meta": "title="app/onboarding-hooks.ts"",
      },
      {
        "code": "import { stackServerApp } from '@/stack';
import { redirect } from 'next/navigation';

export async function ensureOnboarded() {
  const user = await stackServerApp.getUser();
  if (!user.serverMetadata.onboarded) {
    redirect('/onboarding');
  }
}",
        "lang": "jsx",
        "meta": "title="app/onboarding-functions.ts"",
      },
      {
        "code": "import { stackServerApp } from '@/stack';
import { redirect } from 'next/navigation';

export async function ensureOnboarded() {
  const user = await stackServerApp.getUser();
  if (!user.serverMetadata.onboarded) {
    redirect('/onboarding');
  }
}",
        "lang": "jsx",
        "meta": "title="app/onboarding-functions.ts"",
      },
      {
        "code": "import { useOnboarding } from '@/app/onboarding-hooks';
import { useUser } from '@stackframe/stack';

export default function HomePage() {
  useOnboarding();
  const user = useUser();

  return (
    <div>Welcome to the app, {user.displayName}</div>
  );
}",
        "lang": "jsx",
        "meta": "title="app/page.tsx"",
      },
      {
        "code": "import { useOnboarding } from '@/app/onboarding-hooks';
import { useUser } from '@stackframe/stack';

export default function HomePage() {
  useOnboarding();
  const user = useUser();

  return (
    <div>Welcome to the app, {user.displayName}</div>
  );
}",
        "lang": "jsx",
        "meta": "title="app/page.tsx"",
      },
      {
        "code": "import { ensureOnboarding } from '@/app/onboarding-functions';
import { stackServerApp } from '@/stack';

export default async function HomePage() {
  await ensureOnboarding();
  const user = await stackServerApp.getUser();

  return (
    <div>Welcome to the app, {user.displayName}</div>
  );
}",
        "lang": "jsx",
        "meta": "title="app/page.tsx"",
      },
      {
        "code": "import { ensureOnboarding } from '@/app/onboarding-functions';
import { stackServerApp } from '@/stack';

export default async function HomePage() {
  await ensureOnboarding();
  const user = await stackServerApp.getUser();

  return (
    <div>Welcome to the app, {user.displayName}</div>
  );
}",
        "lang": "jsx",
        "meta": "title="app/page.tsx"",
      },
    ],
    "content": "Let's say you have an onboarding page that asks for an address and stores it in the user's metadata:


While the above implementation offers a basic onboarding process, users can still skip onboarding by directly sending an API request to update the clientMetadata.onboarded flag. If you want to ensure that onboarding cannot be bypassed on the API level, you should create a server endpoint to validate and store the data, then save the onboarded flag in the clientReadonlyMetadata on the server side after validation.
Next, we can create a hook/function to check if the user has completed onboarding and redirect them to the onboarding page:






You can then use these functions wherever onboarding is required:",
    "domain": "test.com",
    "hash": "#example-implementation",
    "hierarchy": {
      "h0": {
        "title": "User Onboarding",
      },
      "h2": {
        "id": "example-implementation",
        "title": "Example implementation",
      },
    },
    "icon": "fa-regular fa-user-check",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.user-onboarding-example-implementation",
    "org_id": "test",
    "pathname": "/concepts/user-onboarding",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Example implementation",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "Stack has good support for working with OAuth and OIDC providers, such as Google, Facebook, Microsoft, and others.
Beyond using OAuth for signing in, Stack can manage your users' access token so you can invoke APIs on their behalf. For example, you can use this to send emails with Gmail, access repositories on GitHub, or access files on OneDrive.
A connected account is simply an external account that is linked to the user in some way. If you are not using shared keys (see note below), any user created with "Sign up with OAuth" is automatically connected to the account they signed up with, but it's also possible to connect a user with a provider that is unavailable for sign in.


You cannot connect a user's accounts with shared OAuth keys. You need to set up your own OAuth client ID and client secret in Stack's dashboard. For more details, check Going to Production.",
    "description": "Managing third-party OAuth access tokens",
    "domain": "test.com",
    "icon": "fa-regular fa-link",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.connected-o-auth-accounts",
    "org_id": "test",
    "pathname": "/concepts/oauth",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Connected OAuth Accounts",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "'use client';

import { useUser } from "@stackframe/stack";

export default function Page() {
  const user = useUser({ or: 'redirect' });
  // Redirects to Google authorization if not already connected
  const account = user.useConnectedAccount('google', { or: 'redirect' });
  // Account is always defined because of the redirect
  return <div>Google account connected</div>;
}",
        "lang": "jsx",
      },
    ],
    "content": "You can access a user's connected account with the user.getConnectedAccount(providerId) function or user.useConnectedAccount(providerId) hook.
Often, you'll want to redirect the user to the OAuth provider's authorization page if they have not connected the account yet. Just like the getUser(...) function, getConnectedAccount(...) can also take an { or: "redirect" } argument to achieve this.
Here's how to connect with Google:",
    "domain": "test.com",
    "hash": "#connecting-with-oauth-providers",
    "hierarchy": {
      "h0": {
        "title": "Connected OAuth Accounts",
      },
      "h2": {
        "id": "connecting-with-oauth-providers",
        "title": "Connecting with OAuth providers",
      },
    },
    "icon": "fa-regular fa-link",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.connected-o-auth-accounts-connecting-with-oauth-providers",
    "org_id": "test",
    "pathname": "/concepts/oauth",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Connecting with OAuth providers",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "'use client';

import { useUser } from "@stackframe/stack";

export default function Page() {
  const user = useUser({ or: 'redirect' });
  // Redirects to the Google authorization page, requesting access to Google Drive
  const account = user.useConnectedAccount('google', { or: 'redirect', scopes: ['https://www.googleapis.com/authdrive.readonly'] });
  // Account is always defined because of the redirect
  return <div>Google Drive connected</div>;
}",
        "lang": "jsx",
      },
    ],
    "content": "Most providers have access control in the form of OAuth scopes. These are the permissions that the user will see on the authorization screen (eg. "Your App wants access to your calendar"). For instance, to read Google Drive content, you need the https://www.googleapis.com/auth/drive.readonly scope:
Check your provider's API documentation to find a list of available scopes.",
    "domain": "test.com",
    "hash": "#providing-scopes",
    "hierarchy": {
      "h0": {
        "title": "Connected OAuth Accounts",
      },
      "h2": {
        "id": "providing-scopes",
        "title": "Providing scopes",
      },
    },
    "icon": "fa-regular fa-link",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.connected-o-auth-accounts-providing-scopes",
    "org_id": "test",
    "pathname": "/concepts/oauth",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Providing scopes",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "'use client';

import { useEffect, useState } from 'react';
import { useUser } from "@stackframe/stack";

export default function Page() {
  const user = useUser({ or: 'redirect' });
  const account = user.useConnectedAccount('google', { or: 'redirect', scopes: ['https://www.googleapis.com/auth/drive.readonly'] });
  const { accessToken } = account.useAccessToken();
  const [response, setResponse] = useState<any>();

  useEffect(() => {
    fetch('https://www.googleapis.com/drive/v3/files', {
      headers: { Authorization: `Bearer ${accessToken}` }
    })
      .then((res) => res.json())
      .then((data) => setResponse(data))
      .catch((err) => console.error(err));
  }, [accessToken]);

  return <div>{response ? JSON.stringify(response) : 'Loading...'}</div>;
}",
        "lang": "jsx",
      },
    ],
    "content": "Once connected with an OAuth provider, obtain the access token with the account.getAccessToken() function. Check your provider's API documentation to understand how you can use this token to authorize the user in requests.",
    "domain": "test.com",
    "hash": "#retrieving-the-access-token",
    "hierarchy": {
      "h0": {
        "title": "Connected OAuth Accounts",
      },
      "h2": {
        "id": "retrieving-the-access-token",
        "title": "Retrieving the access token",
      },
    },
    "icon": "fa-regular fa-link",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.connected-o-auth-accounts-retrieving-the-access-token",
    "org_id": "test",
    "pathname": "/concepts/oauth",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Retrieving the access token",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "export const stackServerApp = new StackServerApp({
  // ...your other settings...
  oauthScopesOnSignIn: {
    google: ['https://www.googleapis.com/authdrive.readonly']
  }
});",
        "lang": "jsx",
        "meta": "title='stack.ts'",
      },
    ],
    "content": "To avoid showing the authorization page twice, you can already request scopes during the sign-in flow. This approach is optional. Some applications may prefer to request extra permissions only when needed, while others might want to obtain all necessary permissions upfront.
To do this, edit the oauthScopesOnSignIn setting of your stackServerApp:",
    "domain": "test.com",
    "hash": "#sign-in-default-scopes",
    "hierarchy": {
      "h0": {
        "title": "Connected OAuth Accounts",
      },
      "h2": {
        "id": "sign-in-default-scopes",
        "title": "Sign-in default scopes",
      },
    },
    "icon": "fa-regular fa-link",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.connected-o-auth-accounts-sign-in-default-scopes",
    "org_id": "test",
    "pathname": "/concepts/oauth",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Sign-in default scopes",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "Teams provide a structured way to group users and manage their permissions. Users can belong to multiple teams simultaneously, allowing them to represent departments, B2B customers, or projects.
The server can perform all operations on a team, but the client can only carry out some actions if the user has the necessary permissions. This applies to all actions that can be performed on a server/client-side User object and a Team object.",
    "description": "Manage teams and team members",
    "domain": "test.com",
    "icon": "fa-regular fa-users",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Teams",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "const user = useUser({ or: 'redirect' });
const team = user.useTeam('some-team-id');

if (!team) {
  return <div>Team not found</div>;
}

const hasPermission = user.usePermission(team, '$invite_members');

if (!hasPermission) {
  return <div>No permission</div>;
}

// Perform corresponding action like inviting a user",
        "lang": "tsx",
      },
    ],
    "content": "If you attempt to perform an action without the necessary team permissions, the function will throw an error. Always check if the user has the required permission before performing any action. Learn more about permissions here.
Here is an example of how to check if a user has a specific permission on the client",
    "domain": "test.com",
    "hash": "#team-permissions",
    "hierarchy": {
      "h0": {
        "title": "Teams",
      },
      "h2": {
        "id": "concepts",
        "title": "Concepts",
      },
      "h3": {
        "id": "team-permissions",
        "title": "Team permissions",
      },
    },
    "icon": "fa-regular fa-users",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-team-permissions",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Team permissions",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "A user can have a different profile for each team they belong to (Note this is different to the user's personal profile). This profile contains information like displayName and profileImageUrl. The team profile can be left empty and it will automatically take the user's personal profile information.
The team profile is visible to all the other users in the team that have the $read_members permission.",
    "domain": "test.com",
    "hash": "#team-profile",
    "hierarchy": {
      "h0": {
        "title": "Teams",
      },
      "h2": {
        "id": "concepts",
        "title": "Concepts",
      },
      "h3": {
        "id": "team-profile",
        "title": "Team profile",
      },
    },
    "icon": "fa-regular fa-users",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-team-profile",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Team profile",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "const user = useUser({ or: 'redirect' });
const allTeams = user.useTeams();
const someTeam = user.useTeam('some-team-id'); // May be null if the user is not a member of this team

return (
  <div>
    {allTeams.map(team => (
      <div key={team.id}>{team.displayName}</div>
    ))}
  </div>
  <div>
    {someTeam ? someTeam.displayName : 'Not a member of this team'}
  </div>
);",
        "lang": "tsx",
      },
      {
        "code": "const user = useUser({ or: 'redirect' });
const allTeams = user.useTeams();
const someTeam = user.useTeam('some-team-id'); // May be null if the user is not a member of this team

return (
  <div>
    {allTeams.map(team => (
      <div key={team.id}>{team.displayName}</div>
    ))}
  </div>
  <div>
    {someTeam ? someTeam.displayName : 'Not a member of this team'}
  </div>
);",
        "lang": "tsx",
      },
      {
        "code": "const user = await stackServerApp.getUser({ or: 'redirect' });
const allTeams = await user.listTeams();
const someTeam = await user.getTeam('some-team-id'); // May be null if the user is not a member of this team

return (
  <div>
    {allTeams.map(team => (
      <div key={team.id}>{team.displayName}</div>
    ))}
  </div>
  <div>
    {someTeam ? someTeam.displayName : 'Not a member of this team'}
  </div>",
        "lang": "tsx",
      },
      {
        "code": "const user = await stackServerApp.getUser({ or: 'redirect' });
const allTeams = await user.listTeams();
const someTeam = await user.getTeam('some-team-id'); // May be null if the user is not a member of this team

return (
  <div>
    {allTeams.map(team => (
      <div key={team.id}>{team.displayName}</div>
    ))}
  </div>
  <div>
    {someTeam ? someTeam.displayName : 'Not a member of this team'}
  </div>",
        "lang": "tsx",
      },
    ],
    "content": "You can list all teams a user belongs to using the listTeams or useTeams functions or fetch a specific team with getTeam or useTeam. These functions work on both clients and servers.",
    "domain": "test.com",
    "hash": "#retrieving-a-users-teams",
    "hierarchy": {
      "h0": {
        "title": "Teams",
      },
      "h2": {
        "id": "retrieving-a-users-teams",
        "title": "Retrieving a user's teams",
      },
    },
    "icon": "fa-regular fa-users",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-retrieving-a-users-teams",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Retrieving a user's teams",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "const team = await user.createTeam({
  displayName: 'New Team',
});",
        "lang": "jsx",
      },
      {
        "code": "const team = await stackServerApp.createTeam({
  displayName: 'New Team',
});",
        "lang": "jsx",
      },
    ],
    "content": "To create a team, use the createTeam function on the User object. The user will be added to the team with the default team creator permissions (You can change this on the permissions tab in the Stack dashboard).
On the client side, this requires enabling the "client side team creation" on the team settings tab in the Stack dashboard.
To create a team on the server without adding a specific user, use the createTeam function on the ServerApp object:",
    "domain": "test.com",
    "hash": "#creating-a-team",
    "hierarchy": {
      "h0": {
        "title": "Teams",
      },
      "h2": {
        "id": "creating-a-team",
        "title": "Creating a team",
      },
    },
    "icon": "fa-regular fa-users",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-creating-a-team",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Creating a team",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "await team.update({
  displayName: 'New Name',
});",
        "lang": "tsx",
      },
    ],
    "content": "You can update a team with the update function on the Team object.
On the client, the user must have the $update_team permission to perform this action.",
    "domain": "test.com",
    "hash": "#updating-a-team",
    "hierarchy": {
      "h0": {
        "title": "Teams",
      },
      "h2": {
        "id": "updating-a-team",
        "title": "Updating a team",
      },
    },
    "icon": "fa-regular fa-users",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-updating-a-team",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Updating a team",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "await team.update({
  clientMetadata: {
    customField: 'value',
  },
});

console.log(team.clientMetadata.customField); // 'value'",
        "lang": "tsx",
      },
    ],
    "content": "You can store custom metadata on a team object, similar to the user object. The metadata can be any JSON object.
clientMetadata: Can be read and updated on both the client and server sides.

serverMetadata: Can only be read and updated on the server side.

clientReadOnlyMetadata: Can be read on both the client and server sides, but can only be updated on the server side.",
    "domain": "test.com",
    "hash": "#custom-team-metadata",
    "hierarchy": {
      "h0": {
        "title": "Teams",
      },
      "h2": {
        "id": "custom-team-metadata",
        "title": "Custom team metadata",
      },
    },
    "icon": "fa-regular fa-users",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-custom-team-metadata",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Custom team metadata",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "// ... retrieve the team and ensure user has the necessary permissions

const users = team.useUsers();

return (
  <div>
    {users.map(user => (
      <div key={user.id}>{user.teamProfile.displayName}</div>
    ))}
  </div>
);",
        "lang": "tsx",
      },
      {
        "code": "// ... retrieve the team and ensure user has the necessary permissions

const users = team.useUsers();

return (
  <div>
    {users.map(user => (
      <div key={user.id}>{user.teamProfile.displayName}</div>
    ))}
  </div>
);",
        "lang": "tsx",
      },
      {
        "code": "// ... retrieve the team

const users = await team.listUsers();

return (
  <div>
    {users.map(user => (
      <div key={user.id}>{user.teamProfile.displayName}</div>
    ))}
  </div>
);",
        "lang": "tsx",
      },
      {
        "code": "// ... retrieve the team

const users = await team.listUsers();

return (
  <div>
    {users.map(user => (
      <div key={user.id}>{user.teamProfile.displayName}</div>
    ))}
  </div>
);",
        "lang": "tsx",
      },
    ],
    "content": "You can list all users in a team with the listUsers function or the useUsers hook on the Team object. Note that if you want to get the team profile, you need to get it with user.teamProfile.
On the client, the current user must have the $read_members permission in the team to perform this action.",
    "domain": "test.com",
    "hash": "#list-users-in-a-team",
    "hierarchy": {
      "h0": {
        "title": "Teams",
      },
      "h2": {
        "id": "list-users-in-a-team",
        "title": "List users in a team",
      },
    },
    "icon": "fa-regular fa-users",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-list-users-in-a-team",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "List users in a team",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "const teamProfile = user.useTeamProfile(team);",
        "lang": "tsx",
      },
      {
        "code": "const teamProfile = user.useTeamProfile(team);",
        "lang": "tsx",
      },
      {
        "code": "const teamProfile = await user.getTeamProfile(team);",
        "lang": "tsx",
      },
      {
        "code": "const teamProfile = await user.getTeamProfile(team);",
        "lang": "tsx",
      },
    ],
    "content": "You can get the current user's team profile with the getTeamProfile or useTeamProfile function on the User object. This function returns the team profile for the team with the given ID.",
    "domain": "test.com",
    "hash": "#get-current-users-team-profile",
    "hierarchy": {
      "h0": {
        "title": "Teams",
      },
      "h2": {
        "id": "get-current-users-team-profile",
        "title": "Get current user's team profile",
      },
    },
    "icon": "fa-regular fa-users",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-get-current-users-team-profile",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Get current user's team profile",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "await team.inviteUser(email);",
        "lang": "tsx",
      },
    ],
    "content": "You can invite a user to a team using the inviteUser function on the Team object. The user will receive an email with a link to join the team.
On the client side, the current user must have the $invite_members permission to perform this action.",
    "domain": "test.com",
    "hash": "#invite-a-user-to-a-team",
    "hierarchy": {
      "h0": {
        "title": "Teams",
      },
      "h2": {
        "id": "invite-a-user-to-a-team",
        "title": "Invite a user to a team",
      },
    },
    "icon": "fa-regular fa-users",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-invite-a-user-to-a-team",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Invite a user to a team",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "await team.addUser(user.id);",
        "lang": "tsx",
      },
    ],
    "content": "If you want to add a user to a team without sending an email, use the addUser function on the ServerTeam object. This function can only be called on the server side.",
    "domain": "test.com",
    "hash": "#adding-a-user-to-a-team",
    "hierarchy": {
      "h0": {
        "title": "Teams",
      },
      "h2": {
        "id": "adding-a-user-to-a-team",
        "title": "Adding a user to a team",
      },
    },
    "icon": "fa-regular fa-users",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-adding-a-user-to-a-team",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Adding a user to a team",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "await team.removeUser(user.id);",
        "lang": "tsx",
      },
    ],
    "content": "You can remove a user from a team with the removeUser function on the Team object.
On the client side, the current user must have the $remove_members permission to perform this action.",
    "domain": "test.com",
    "hash": "#removing-a-user-from-a-team",
    "hierarchy": {
      "h0": {
        "title": "Teams",
      },
      "h2": {
        "id": "removing-a-user-from-a-team",
        "title": "Removing a user from a team",
      },
    },
    "icon": "fa-regular fa-users",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-removing-a-user-from-a-team",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Removing a user from a team",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "const team = await user.getTeam('some-team-id');
await user.leaveTeam(team);",
        "lang": "tsx",
      },
    ],
    "content": "All users can leave a team without any permissions required.",
    "domain": "test.com",
    "hash": "#leaving-a-team",
    "hierarchy": {
      "h0": {
        "title": "Teams",
      },
      "h2": {
        "id": "leaving-a-team",
        "title": "Leaving a team",
      },
    },
    "icon": "fa-regular fa-users",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-leaving-a-team",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Leaving a team",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "await team.delete();",
        "lang": "tsx",
      },
    ],
    "content": "You can delete a team with the delete function on the Team object.
On the client side, the current user must have the $delete_team permission to perform this action.",
    "domain": "test.com",
    "hash": "#deleting-a-team",
    "hierarchy": {
      "h0": {
        "title": "Teams",
      },
      "h2": {
        "id": "deleting-a-team",
        "title": "Deleting a team",
      },
    },
    "icon": "fa-regular fa-users",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams-deleting-a-team",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Deleting a team",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "A user can be a member of multiple teams, so most websites using teams will need a way to select a "current team" that the user is working on. There are two primary methods to accomplish this:
Deep Link: Each team has a unique URL, for example, your-website.com/team/<team-id>. When a team is selected, it redirects to a page with that team's URL.

Current Team: When a user selects a team, the app stores the team as a global "current team" state. In this way, the URL of the current team might be something like your-website.com/current-team, and the URL won't change after switching teams.",
    "description": "Switch between multiple teams of a user",
    "domain": "test.com",
    "icon": "fa-regular fa-exchange",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.selecting-a-team",
    "org_id": "test",
    "pathname": "/concepts/team-selection",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Selecting a Team",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "The deep link method is generally recommended because it avoids some common issues associated with the current team method. If two users share a link while using deep link URLs, the receiving user will always be directed to the correct team's information based on the link.",
    "domain": "test.com",
    "hash": "#deep-link-method",
    "hierarchy": {
      "h0": {
        "title": "Selecting a Team",
      },
      "h2": {
        "id": "deep-link-method",
        "title": "Deep Link Method",
      },
    },
    "icon": "fa-regular fa-exchange",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.selecting-a-team-deep-link-method",
    "org_id": "test",
    "pathname": "/concepts/team-selection",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Deep Link Method",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "While the current team method can be simpler to implement, it has a downside. If a user shares a link, the recipient might see information about the wrong team (if their "current team" is set differently). This method can also cause problems when a user has multiple browser tabs open with different teams.",
    "domain": "test.com",
    "hash": "#current-team-method",
    "hierarchy": {
      "h0": {
        "title": "Selecting a Team",
      },
      "h2": {
        "id": "current-team-method",
        "title": "Current Team Method",
      },
    },
    "icon": "fa-regular fa-exchange",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.selecting-a-team-current-team-method",
    "org_id": "test",
    "pathname": "/concepts/team-selection",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Current Team Method",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "import { SelectedTeamSwitcher } from "@stackframe/stack";

export function MyPage() {
  return (
    <div>
      <SelectedTeamSwitcher/>
    </div>
  );
}",
        "lang": "jsx",
      },
      {
        "code": "<SelectedTeamSwitcher 
  urlMap={team => `/team/${team.id}`} 
  selectedTeam={team}
/>",
        "lang": "jsx",
      },
      {
        "code": "<SelectedTeamSwitcher 
  urlMap={team => `/team/${team.id}`} 
  selectedTeam={team} 
  noUpdateSelectedTeam
/>",
        "lang": "jsx",
      },
    ],
    "content": "To facilitate team selection, Stack provides a component that looks like this:
TeamSwitcher
You can import and use the SelectedTeamSwitcher component for the "current team" method. It updates the selectedTeam when a user selects a team:
To combine the switcher with the deep link method, you can pass in urlMap and selectedTeam. The urlMap is a function to generate a URL based on the team information, and selectedTeam is the team that the user is currently working on. This lets you implement "deep link" + "most recent team". The component will update the user.selectedTeam with the selectedTeam prop:
To implement the "deep link" + "default team" method, where you update the selectedTeam only when the user clicks "set to default team" or similar, pass noUpdateSelectedTeam:",
    "domain": "test.com",
    "hash": "#selected-team-switcher",
    "hierarchy": {
      "h0": {
        "title": "Selecting a Team",
      },
      "h2": {
        "id": "selected-team-switcher",
        "title": "Selected Team Switcher",
      },
    },
    "icon": "fa-regular fa-exchange",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.selecting-a-team-selected-team-switcher",
    "org_id": "test",
    "pathname": "/concepts/team-selection",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Selected Team Switcher",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": ""use client";

import { useUser, SelectedTeamSwitcher } from "@stackframe/stack";

export default function TeamPage({ params }: { params: { teamId: string } }) {
  const user = useUser({ or: 'redirect' });
  const team = user.useTeam(params.teamId);

  if (!team) {
    return <div>Team not found</div>;
  }

  return (
    <div>
      <SelectedTeamSwitcher 
        urlMap={team => `/team/${team.id}`} 
        selectedTeam={team}
      />
      
      <p>Team Name: {team.displayName}</p>
      <p>You are a member of this team.</p>
    </div>
  );
}",
        "lang": "jsx",
        "meta": "title="/app/team/[teamId]/page.tsx" ",
      },
      {
        "code": ""use client";

import { useRouter } from "next/navigation";
import { useUser } from "@stackframe/stack";

export default function TeamsPage() {
  const user = useUser({ or: 'redirect' });
  const teams = user.useTeams();
  const router = useRouter();
  const selectedTeam = user.selectedTeam;

  return (
    <div>
      {selectedTeam && 
        <button onClick={() => router.push(`/team/${selectedTeam.id}`)}>
          Most recent team
        </button>}

      <h2>All Teams</h2>
      {teams.map(team => (
        <button key={team.id} onClick={() => router.push(`/team/${team.id}`)}>
          Open {team.displayName}
        </button>
      ))}
    </div>
  );
}",
        "lang": "jsx",
        "meta": "title="/app/team/page.tsx"",
      },
    ],
    "content": "First, create a page at /app/team/[teamId]/page.tsx to display information about a specific team:
Next, create a page to display all teams at /app/team/page.tsx:
Now, if you navigate to http://localhost:3000/team, you should be able to see and interact with the teams.",
    "domain": "test.com",
    "hash": "#example-deep-link--most-recent-team",
    "hierarchy": {
      "h0": {
        "title": "Selecting a Team",
      },
      "h2": {
        "id": "example-deep-link--most-recent-team",
        "title": "Example: Deep Link + Most Recent Team",
      },
    },
    "icon": "fa-regular fa-exchange",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.selecting-a-team-example-deep-link--most-recent-team",
    "org_id": "test",
    "pathname": "/concepts/team-selection",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Example: Deep Link + Most Recent Team",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "description": "Control what each user can do and access with the permission system",
    "domain": "test.com",
    "icon": "fa-regular fa-user-lock",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac",
    "org_id": "test",
    "pathname": "/concepts/permissions",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Permissions & RBAC",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "Team permissions control what a user can do within each team. You can create and assign permissions to team members from the Stack dashboard. These permissions could include actions like create_post or read_secret_info, or roles like admin or moderator. Within your app, you can verify if a user has a specific permission within a team.
Permissions can be nested to create a hierarchical structure. For example, an admin permission can include both moderator and user permissions. We provide tools to help you verify whether a user has a permission directly or indirectly.",
    "domain": "test.com",
    "hash": "#team-permissions",
    "hierarchy": {
      "h0": {
        "title": "Permissions & RBAC",
      },
      "h2": {
        "id": "team-permissions",
        "title": "Team Permissions",
      },
    },
    "icon": "fa-regular fa-user-lock",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac-team-permissions",
    "org_id": "test",
    "pathname": "/concepts/permissions",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Team Permissions",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "To create a new permission, navigate to the Team Permissions section of the Stack dashboard. You can select the permissions that the new permission will contain. Any permissions included within these selected permissions will also be recursively included.",
    "domain": "test.com",
    "hash": "#creating-a-permission",
    "hierarchy": {
      "h0": {
        "title": "Permissions & RBAC",
      },
      "h2": {
        "id": "team-permissions",
        "title": "Team Permissions",
      },
      "h3": {
        "id": "creating-a-permission",
        "title": "Creating a Permission",
      },
    },
    "icon": "fa-regular fa-user-lock",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac-creating-a-permission",
    "org_id": "test",
    "pathname": "/concepts/permissions",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Creating a Permission",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "Stack comes with a few predefined team permissions known as system permissions. These permissions start with a dollar sign ($). While you can assign these permissions to members or include them within other permissions, you cannot modify them as they are integral to the Stack backend system.",
    "domain": "test.com",
    "hash": "#system-permissions",
    "hierarchy": {
      "h0": {
        "title": "Permissions & RBAC",
      },
      "h2": {
        "id": "team-permissions",
        "title": "Team Permissions",
      },
      "h3": {
        "id": "system-permissions",
        "title": "System Permissions",
      },
    },
    "icon": "fa-regular fa-user-lock",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac-system-permissions",
    "org_id": "test",
    "pathname": "/concepts/permissions",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "System Permissions",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": ""use client";
import { useUser } from "@stackframe/stack";

export function CheckUserPermission() {
  const user = useUser({ or: 'redirect' });
  const permission = user.usePermission('read');

  // Don't rely on client-side permission checks for business logic.
  return (
    <div>
      {permission ? 'You have the read permission' : 'You shall not pass'}
    </div>
  );
}",
        "lang": "tsx",
        "meta": "title="Check user permission on the client"",
      },
      {
        "code": ""use client";
import { useUser } from "@stackframe/stack";

export function CheckUserPermission() {
  const user = useUser({ or: 'redirect' });
  const permission = user.usePermission('read');

  // Don't rely on client-side permission checks for business logic.
  return (
    <div>
      {permission ? 'You have the read permission' : 'You shall not pass'}
    </div>
  );
}",
        "lang": "tsx",
        "meta": "title="Check user permission on the client"",
      },
      {
        "code": "import { stackServerApp } from "@/stack";

export default async function CheckUserPermission() {
  const user = await stackServerApp.getUser({ or: 'redirect' });
  const permission = await user.getPermission('read');

  // This is a server-side check, so it's secure.
  return (
    <div>
      {permission ? 'You have the read permission' : 'You shall not pass'}
    </div>
  );
}",
        "lang": "tsx",
        "meta": "title="Check user permission on the server"",
      },
      {
        "code": "import { stackServerApp } from "@/stack";

export default async function CheckUserPermission() {
  const user = await stackServerApp.getUser({ or: 'redirect' });
  const permission = await user.getPermission('read');

  // This is a server-side check, so it's secure.
  return (
    <div>
      {permission ? 'You have the read permission' : 'You shall not pass'}
    </div>
  );
}",
        "lang": "tsx",
        "meta": "title="Check user permission on the server"",
      },
    ],
    "content": "To check whether a user has a specific permission, use the getPermission method or the usePermission hook on the User object. This returns the Permission object if the user has it; otherwise, it returns null. Always perform permission checks on the server side for business logic, as client-side checks can be bypassed. Here's an example:",
    "domain": "test.com",
    "hash": "#checking-if-a-user-has-a-permission",
    "hierarchy": {
      "h0": {
        "title": "Permissions & RBAC",
      },
      "h2": {
        "id": "team-permissions",
        "title": "Team Permissions",
      },
      "h3": {
        "id": "checking-if-a-user-has-a-permission",
        "title": "Checking if a User has a Permission",
      },
    },
    "icon": "fa-regular fa-user-lock",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac-checking-if-a-user-has-a-permission",
    "org_id": "test",
    "pathname": "/concepts/permissions",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Checking if a User has a Permission",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": ""use client";
import { useUser } from "@stackframe/stack";

export function DisplayUserPermissions() {
  const user = useUser({ or: 'redirect' });
  const permissions = user.usePermissions();

  return (
    <div>
      {permissions.map(permission => (
        <div key={permission.id}>{permission.id}</div>
      ))}
    </div>
  );
}",
        "lang": "tsx",
        "meta": "title="List user permissions on the client"",
      },
      {
        "code": ""use client";
import { useUser } from "@stackframe/stack";

export function DisplayUserPermissions() {
  const user = useUser({ or: 'redirect' });
  const permissions = user.usePermissions();

  return (
    <div>
      {permissions.map(permission => (
        <div key={permission.id}>{permission.id}</div>
      ))}
    </div>
  );
}",
        "lang": "tsx",
        "meta": "title="List user permissions on the client"",
      },
      {
        "code": "import { stackServerApp } from "@/stack";

export default async function DisplayUserPermissions() {
  const user = await stackServerApp.getUser({ or: 'redirect' });
  const permissions = await user.listPermissions();

  return (
    <div>
      {permissions.map(permission => (
        <div key={permission.id}>{permission.id}</div>
      ))}
    </div>
  );
}",
        "lang": "tsx",
        "meta": "title="List user permissions on the server"",
      },
      {
        "code": "import { stackServerApp } from "@/stack";

export default async function DisplayUserPermissions() {
  const user = await stackServerApp.getUser({ or: 'redirect' });
  const permissions = await user.listPermissions();

  return (
    <div>
      {permissions.map(permission => (
        <div key={permission.id}>{permission.id}</div>
      ))}
    </div>
  );
}",
        "lang": "tsx",
        "meta": "title="List user permissions on the server"",
      },
    ],
    "content": "To get a list of all permissions a user has, use the listPermissions method or the usePermissions hook on the User object. This method retrieves both direct and indirect permissions. Here is an example:",
    "domain": "test.com",
    "hash": "#listing-all-permissions-of-a-user",
    "hierarchy": {
      "h0": {
        "title": "Permissions & RBAC",
      },
      "h2": {
        "id": "team-permissions",
        "title": "Team Permissions",
      },
      "h3": {
        "id": "listing-all-permissions-of-a-user",
        "title": "Listing All Permissions of a User",
      },
    },
    "icon": "fa-regular fa-user-lock",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac-listing-all-permissions-of-a-user",
    "org_id": "test",
    "pathname": "/concepts/permissions",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Listing All Permissions of a User",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "const team = await stackServerApp.getTeam('teamId');
const user = await stackServerApp.getUser();
await user.grantPermission(team, 'read');",
        "lang": "tsx",
      },
    ],
    "content": "To grant a permission to a user, use the grantPermission method on the ServerUser. Here's an example:",
    "domain": "test.com",
    "hash": "#granting-a-permission-to-a-user",
    "hierarchy": {
      "h0": {
        "title": "Permissions & RBAC",
      },
      "h2": {
        "id": "team-permissions",
        "title": "Team Permissions",
      },
      "h3": {
        "id": "granting-a-permission-to-a-user",
        "title": "Granting a Permission to a User",
      },
    },
    "icon": "fa-regular fa-user-lock",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac-granting-a-permission-to-a-user",
    "org_id": "test",
    "pathname": "/concepts/permissions",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Granting a Permission to a User",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "const team = await stackServerApp.getTeam('teamId');
const user = await stackServerApp.getUser();
await user.revokePermission(team, 'read');",
        "lang": "tsx",
      },
    ],
    "content": "To revoke a permission from a user, use the revokePermission method on the ServerUser. Here's an example:
By following these guidelines, you can efficiently manage and verify team permissions within your application.",
    "domain": "test.com",
    "hash": "#revoking-a-permission-from-a-user",
    "hierarchy": {
      "h0": {
        "title": "Permissions & RBAC",
      },
      "h2": {
        "id": "team-permissions",
        "title": "Team Permissions",
      },
      "h3": {
        "id": "revoking-a-permission-from-a-user",
        "title": "Revoking a Permission from a User",
      },
    },
    "icon": "fa-regular fa-user-lock",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac-revoking-a-permission-from-a-user",
    "org_id": "test",
    "pathname": "/concepts/permissions",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Revoking a Permission from a User",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "Webhooks are a powerful way to keep your backend in sync with Stack. They allow you to receive real-time updates when events occur in your Stack project, such as when a user or team is created, updated, or deleted.",
    "description": "Syncing team & user data with your backend",
    "domain": "test.com",
    "icon": "fa-regular fa-webhook",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.webhooks",
    "org_id": "test",
    "pathname": "/concepts/webhooks",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Webhooks",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "{
  "type": "team.created",
  "data": {
    "id": "2209422a-eef7-4668-967d-be79409972c5",
    "display_name": "My Team",
    ...
  }
}",
        "lang": "json",
      },
    ],
    "content": "In the Stack dashboard, you can create a webhook endpoint in the "Webhooks" section. After creating this endpoint with your server URL, you will start receiving POST requests with a JSON payload at that endpoint. The event payload will look something like this:",
    "domain": "test.com",
    "hash": "#setting-up-webhooks",
    "hierarchy": {
      "h0": {
        "title": "Webhooks",
      },
      "h2": {
        "id": "setting-up-webhooks",
        "title": "Setting up webhooks",
      },
    },
    "icon": "fa-regular fa-webhook",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.webhooks-setting-up-webhooks",
    "org_id": "test",
    "pathname": "/concepts/webhooks",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Setting up webhooks",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "You can use services like Svix Playground or Webhook.site to test the receiving of webhooks or relay them to your local development environment.",
    "domain": "test.com",
    "hash": "#testing-webhooks-locally",
    "hierarchy": {
      "h0": {
        "title": "Webhooks",
      },
      "h2": {
        "id": "testing-webhooks-locally",
        "title": "Testing webhooks locally",
      },
    },
    "icon": "fa-regular fa-webhook",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.webhooks-testing-webhooks-locally",
    "org_id": "test",
    "pathname": "/concepts/webhooks",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Testing webhooks locally",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "import { Webhook } from "svix";

const secret = "<from the dashboard>";
const headers = {
  "svix-id": "<from the webhook request headers>",
  "svix-timestamp": "<from the webhook request headers>",
  "svix-signature": "<from the webhook request headers>",
};
const payload = "<the webhook request body>";

const wh = new Webhook(secret);
// Throws on error, returns the verified content on success
const payload = wh.verify(payload, headers);",
        "lang": "jsx",
      },
    ],
    "content": "To ensure the webhook is coming from Stack (and not from a malicious actor) and is not prone to replay attacks, you should verify the request.
Stack signs the webhook payload with a secret key that you can find in the endpoint details on the dashboard. You can verify the signature using the Svix client library. Check out the Svix documentation for instructions on how to verify the signature in JavaScript, Python, Ruby, and other languages. Here is an quick example in JavaScript:
If you do not want to install the Svix client library or are using a language that is not supported, you can verify the signature manually.",
    "domain": "test.com",
    "hash": "#verifying-webhooks",
    "hierarchy": {
      "h0": {
        "title": "Webhooks",
      },
      "h2": {
        "id": "verifying-webhooks",
        "title": "Verifying webhooks",
      },
    },
    "icon": "fa-regular fa-webhook",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.webhooks-verifying-webhooks",
    "org_id": "test",
    "pathname": "/concepts/webhooks",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Verifying webhooks",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "Please refer to the webhook endpoint API reference for more details on the available event types and their payload structures.
user.created

user.updated

user.deleted

team.created

team.updated

team.deleted",
    "domain": "test.com",
    "hash": "#event-types",
    "hierarchy": {
      "h0": {
        "title": "Webhooks",
      },
      "h2": {
        "id": "event-types",
        "title": "Event types",
      },
    },
    "icon": "fa-regular fa-webhook",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.webhooks-event-types",
    "org_id": "test",
    "pathname": "/concepts/webhooks",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Event types",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "Some members of the community have shared their webhook implementations. For example, here is an example by Clark GredoÃ±a that validates the Webhook schema and update a database user.",
    "domain": "test.com",
    "hash": "#examples",
    "hierarchy": {
      "h0": {
        "title": "Webhooks",
      },
      "h2": {
        "id": "examples",
        "title": "Examples",
      },
    },
    "icon": "fa-regular fa-webhook",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.webhooks-examples",
    "org_id": "test",
    "pathname": "/concepts/webhooks",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Examples",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "content": "To authenticate your endpoints, you need to send the user's access token in the headers of the request to your server, and then make a request to Stack's server API to verify the user's identity.",
    "description": "Integrate Stack Auth with your own server with the REST APIs",
    "domain": "test.com",
    "icon": "fa-regular fa-network-wired",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.backend-integration",
    "org_id": "test",
    "pathname": "/concepts/backend-integration",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Backend Integration",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "const { accessToken } = await user.getAuthJson();
const response = await fetch('/api/users/me', {
  headers: {
    'x-stack-access-token': accessToken,
  },
  // your other options and parameters
});",
        "lang": "typescript",
      },
    ],
    "content": "To authenticate your own server endpoints using Stack's server API, you need to protect your endpoints by sending the user's access token in the headers of the request.
On the client side, you can retrieve the access token from the user object by calling user.getAuthJson(). This will return an object containing accessToken.
Then, you can call your server endpoint with these two tokens in the headers, like this:",
    "domain": "test.com",
    "hash": "#sending-requests-to-your-server-endpoints",
    "hierarchy": {
      "h0": {
        "title": "Backend Integration",
      },
      "h2": {
        "id": "sending-requests-to-your-server-endpoints",
        "title": "Sending requests to your server endpoints",
      },
    },
    "icon": "fa-regular fa-network-wired",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.backend-integration-sending-requests-to-your-server-endpoints",
    "org_id": "test",
    "pathname": "/concepts/backend-integration",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Sending requests to your server endpoints",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "code_snippets": [
      {
        "code": "const url = 'https://api.stack-auth.com/api/v1/users/me';
const headers = {
  'x-stack-access-type': 'server',
  'x-stack-project-id': 'generated on the Stack Auth dashboard',
  'x-stack-secret-server-key': 'generated on the Stack Auth dashboard',
  'x-stack-access-token': 'access token from the headers',
};

fetch(url, { headers })
  .then(response => response.json())
  .then(data => {
    if (data.id) {
      console.log('User is authenticated');
    } else {
      console.log('User is not authenticated');
    }
  });",
        "lang": "javascript",
      },
      {
        "code": "const url = 'https://api.stack-auth.com/api/v1/users/me';
const headers = {
  'x-stack-access-type': 'server',
  'x-stack-project-id': 'generated on the Stack Auth dashboard',
  'x-stack-secret-server-key': 'generated on the Stack Auth dashboard',
  'x-stack-access-token': 'access token from the headers',
};

fetch(url, { headers })
  .then(response => response.json())
  .then(data => {
    if (data.id) {
      console.log('User is authenticated');
    } else {
      console.log('User is not authenticated');
    }
  });",
        "lang": "javascript",
      },
      {
        "code": " import requests

 url = 'https://api.stack-auth.com/api/v1/users/me'
 headers = {
   'x-stack-access-type': 'server',
   'x-stack-project-id': 'generated on the Stack Auth dashboard',
   'x-stack-secret-server-key': 'generated on the Stack Auth dashboard',
   'x-stack-access-token': 'access token from the headers',
 }

 response = requests.get(url, headers=headers)
 if (response.json()['id'] is not None):
   print('User is authenticated')
 else:
   print('User is not authenticated')",
        "lang": "python",
      },
      {
        "code": " import requests

 url = 'https://api.stack-auth.com/api/v1/users/me'
 headers = {
   'x-stack-access-type': 'server',
   'x-stack-project-id': 'generated on the Stack Auth dashboard',
   'x-stack-secret-server-key': 'generated on the Stack Auth dashboard',
   'x-stack-access-token': 'access token from the headers',
 }

 response = requests.get(url, headers=headers)
 if (response.json()['id'] is not None):
   print('User is authenticated')
 else:
   print('User is not authenticated')",
        "lang": "python",
      },
    ],
    "content": "On the server side, you can extract the access token from the headers of the request and use it to authenticate the user with the REST API.",
    "domain": "test.com",
    "hash": "#authenticating-the-user-on-the-server-endpoints",
    "hierarchy": {
      "h0": {
        "title": "Backend Integration",
      },
      "h2": {
        "id": "authenticating-the-user-on-the-server-endpoints",
        "title": "Authenticating the user on the server endpoints",
      },
    },
    "icon": "fa-regular fa-network-wired",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.backend-integration-authenticating-the-user-on-the-server-endpoints",
    "org_id": "test",
    "pathname": "/concepts/backend-integration",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Authenticating the user on the server endpoints",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
    ],
    "code_snippets": [
      {
        "code": "npm install next-themes",
        "lang": "bash",
      },
      {
        "code": "import { ThemeProvider } from 'next-themes'

export default function Layout({ children }) {
  return (
    <ThemeProvider>
      <StackTheme>
        {children}
      </StackTheme>
    </ThemeProvider>
  )
}",
        "lang": "jsx",
      },
      {
        "code": "'use client';
import { useTheme } from 'next-themes'

export default function ColorModeSwitcher() {
  const { theme, setTheme } = useTheme()
  return (
    <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>
      Toggle theme
    </button>
  )
}",
        "lang": "jsx",
      },
    ],
    "content": "Stack components support light and dark mode out of the box. You can switch between light and dark mode using next-themes (or any other library that changes the data-theme or class to dark or light attribute of the html element).
Here is an example of how to set up next-themes with Stack (find more details in the next-themes documentation):
Install next-themes:


Add the ThemeProvider to your layout.tsx file:


Build a color mode switcher component:


Now if you put the ColorModeSwitcher component in your app, you should be able to switch between light and dark mode. There should be no flickering or re-rendering of the page after reloading.",
    "domain": "test.com",
    "icon": "fa-regular fa-circle-half-stroke",
    "objectID": "test:test.com:root.uv.docs.docs.customization.dark-light-mode",
    "org_id": "test",
    "pathname": "/customization/dark-mode",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Dark/Light Mode",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
    ],
    "code_snippets": [
      {
        "code": "const theme = {
  light: {
    primary: 'red',
  },
  dark: {
    primary: '#00FF00',
  },
  radius: '8px',
}

// ...

<StackTheme theme={theme}>
  {/* children */}
</StackTheme>",
        "lang": "jsx",
        "meta": "title="app/layout.tsx"",
      },
    ],
    "content": "If you want to spend minimal time on styling but still want to align with your brand, you can customize the colors of the Stack app. Colors are stored in React context and can be easily overridden.
There are some color variables that you can customize:
background

foreground

card

cardForeground

popover

popoverForeground

primary

primaryForeground

secondary

secondaryForeground

muted

mutedForeground

accent

accentForeground

destructive

destructiveForeground

border

input

ring


And some other variables:
radius: border radius of components like buttons, inputs, etc.


These variables are css variables so you can use the syntax like hsl(0, 0%, 0%), black, #fff, etc.
The colors can be different for light and dark mode. You can pass these into the StackTheme component (in your layout.tsx file if you followed the get started guide) as follows:",
    "domain": "test.com",
    "icon": "fa-regular fa-paint-brush",
    "objectID": "test:test.com:root.uv.docs.docs.customization.colors-and-styles",
    "org_id": "test",
    "pathname": "/customization/custom-styles",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Colors and Styles",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-language",
    "objectID": "test:test.com:root.uv.docs.docs.customization.internationalization",
    "org_id": "test",
    "pathname": "/customization/internationalization",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Internationalization",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
    ],
    "code_snippets": [
      {
        "code": "...
  <StackProvider ... lang={'de-DE'}>
    ...
  </StackProvider>
...",
        "lang": "jsx",
        "meta": "title="layout.tsx"",
      },
    ],
    "content": "Internationalization with Stack is very straightforward. Simply pass the lang prop to the StackProvider component, and all the pages will be translated to the specified language.
By default, if no language is provided, it will be set to en-US.
You can choose which languages to use by employing your own methods, such as storing the language in localStorage or using the user's browser language.",
    "domain": "test.com",
    "hash": "#setup",
    "hierarchy": {
      "h0": {
        "title": "Internationalization",
      },
      "h2": {
        "id": "setup",
        "title": "Setup",
      },
    },
    "icon": "fa-regular fa-language",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.customization.internationalization-setup",
    "org_id": "test",
    "pathname": "/customization/internationalization",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Setup",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
    ],
    "content": "en-US: English (United States)

de-DE: German (Germany)

es-419: Spanish (Latin America)

es-ES: Spanish (Spain)

fr-CA: French (Canada)

fr-FR: French (France)

it-IT: Italian (Italy)

pt-BR: Portuguese (Brazil)

pt-PT: Portuguese (Portugal)",
    "domain": "test.com",
    "hash": "#supported-languages",
    "hierarchy": {
      "h0": {
        "title": "Internationalization",
      },
      "h2": {
        "id": "supported-languages",
        "title": "Supported languages",
      },
    },
    "icon": "fa-regular fa-language",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.customization.internationalization-supported-languages",
    "org_id": "test",
    "pathname": "/customization/internationalization",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Supported languages",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
    ],
    "content": "If you want to have full control over the layout and logic flow, you can build your own pages using our built-in components or low-level functions.
By default, StackHandler creates all pages you need, however, you can replace them with your own pages.",
    "domain": "test.com",
    "icon": "fa-regular fa-table-layout",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-layouts-and-pages",
    "org_id": "test",
    "pathname": "/customization/custom-pages",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Custom Layouts and Pages",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
    ],
    "code_snippets": [
      {
        "code": "import { SignIn } from "@stackframe/stack";

export default function CustomSignInPage() {
  return (
    <div>
      <h1>My Custom Sign In page</h1>
      <SignIn />
    </div>
  );
}",
        "lang": "tsx",
        "meta": "title="app/signin/page.tsx"",
      },
      {
        "code": "export const stackServerApp = new StackServerApp({
  // ...
  // add these three lines
  urls: {
    signIn: '/signin',
  }
});",
        "lang": "tsx",
        "meta": "title="stack.ts"",
      },
    ],
    "content": "For example, if you want to create a custom sign-in page with a customized title on the top, you can create a file at app/signin/page.tsx:
Then you can instruct the Stack app in stack.ts to use your custom sign in page:
You are now all set! If you visit the /signin page, you should see your custom sign in page. If your user visits a protected page or the old /handler/sign-in URL, they will be redirected to your new sign-in page.
For more examples, please refer to the Examples.",
    "domain": "test.com",
    "hash": "#simple-example",
    "hierarchy": {
      "h0": {
        "title": "Custom Layouts and Pages",
      },
      "h2": {
        "id": "simple-example",
        "title": "Simple Example",
      },
    },
    "icon": "fa-regular fa-table-layout",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-layouts-and-pages-simple-example",
    "org_id": "test",
    "pathname": "/customization/custom-pages",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Simple Example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
    ],
    "code_snippets": [
      {
        "code": "'use client';
import { useStackApp } from "@stackframe/stack";

export default function CustomOAuthSignIn() {
  const app = useStackApp();

  return (
    <div>
      <h1>My Custom Sign In page</h1>
      <button onClick={async () => {
        // this will redirect to the OAuth provider's login page
        await app.signInWithOAuth('google');
      }}>
        Sign In with Google
      </button>
    </div>
  );
}",
        "lang": "tsx",
        "meta": "title="app/signin/page.tsx"",
      },
      {
        "code": "export const stackServerApp = new StackServerApp({
  // ...
  // add these three lines
  urls: {
    signIn: '/signin',
  }
});",
        "lang": "tsx",
        "meta": "title="stack.ts"",
      },
    ],
    "content": "We also provide the low-level functions powering our components, so that you can build your own logic. For example, to build a custom OAuth sign-in button, create a file at app/signin/page.tsx:
Again, edit the Stack app in stack.ts to use your custom sign in page:
As above, visit the /signin page to see your newly created custom OAuth page.",
    "domain": "test.com",
    "hash": "#from-scratch",
    "hierarchy": {
      "h0": {
        "title": "Custom Layouts and Pages",
      },
      "h2": {
        "id": "from-scratch",
        "title": "From scratch",
      },
    },
    "icon": "fa-regular fa-table-layout",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-layouts-and-pages-from-scratch",
    "org_id": "test",
    "pathname": "/customization/custom-pages",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "From scratch",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
      {
        "pathname": "/docs/customization/custom-page-examples",
        "title": "Custom Page Examples",
      },
    ],
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-in",
    "org_id": "test",
    "pathname": "/customization/page-examples/signin",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Sign In",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
      {
        "pathname": "/docs/customization/custom-page-examples",
        "title": "Custom Page Examples",
      },
    ],
    "code_snippets": [
      {
        "code": "'use client';
import { SignIn } from "@stackframe/stack";

export default function DefaultSignIn() {
  // optionally redirect to some other page if the user is already signed in
  // const user = useUser();
  // if (user) { redirect to some other page }
  return <SignIn fullPage />;
}",
        "lang": "tsx",
      },
    ],
    "content": "You can also use useUser at the beginning of the sign in page to check if wether the user is already signed in and redirect them to some other page if they are.",
    "domain": "test.com",
    "hash": "#custom-page-with-signin-component",
    "hierarchy": {
      "h0": {
        "title": "Sign In",
      },
      "h2": {
        "id": "custom-page-with-signin-component",
        "title": "Custom page with SignIn component",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-in-custom-page-with-signin-component",
    "org_id": "test",
    "pathname": "/customization/page-examples/signin",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Custom page with SignIn component",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
      {
        "pathname": "/docs/customization/custom-page-examples",
        "title": "Custom Page Examples",
      },
    ],
    "content": "CredentialSignIn: A component that contains a form for signing in with email and password.
OAuthGroup: A list of available OAuth provider signin buttons components. The available provider list is fetched from the server.
OAuthButton: A single OAuth sign in button.",
    "domain": "test.com",
    "hash": "#other-useful-components",
    "hierarchy": {
      "h0": {
        "title": "Sign In",
      },
      "h2": {
        "id": "other-useful-components",
        "title": "Other useful components",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-in-other-useful-components",
    "org_id": "test",
    "pathname": "/customization/page-examples/signin",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Other useful components",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
      {
        "pathname": "/docs/customization/custom-page-examples",
        "title": "Custom Page Examples",
      },
    ],
    "code_snippets": [
      {
        "code": "'use client';
import { useStackApp } from "@stackframe/stack";

export default function CustomOAuthSignIn() {
  const app = useStackApp();

  return (
    <div>
      <h1>My Custom Sign In page</h1>
      <button onClick={async () => {
        // this will redirect to the OAuth provider's login page
        await app.signInWithOAuth('google');
      }}>
        Sign In with Google
      </button>
    </div>
  );
}",
        "lang": "tsx",
      },
    ],
    "domain": "test.com",
    "hash": "#custom-oauth-sign-in",
    "hierarchy": {
      "h0": {
        "title": "Sign In",
      },
      "h2": {
        "id": "custom-oauth-sign-in",
        "title": "Custom OAuth Sign In",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-in-custom-oauth-sign-in",
    "org_id": "test",
    "pathname": "/customization/page-examples/signin",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Custom OAuth Sign In",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
      {
        "pathname": "/docs/customization/custom-page-examples",
        "title": "Custom Page Examples",
      },
    ],
    "code_snippets": [
      {
        "code": "'use client';
import { useStackApp } from "@stackframe/stack";
import { useState } from "react";

export default function CustomCredentialSignIn() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const app = useStackApp();

  const onSubmit = async () => {
    if (!password) {
      setError('Please enter your password');
      return;
    }
    // this will redirect to app.urls.afterSignIn if successful, you can customize it in the StackServerApp constructor
    const result = await app.signInWithCredential({ email, password });
    // It is better to handle each error code separately, but we will just show the error code directly for simplicity here
    if (result.status === 'error') {
      setError(result.error.message);
    }
  };
  
  return (
    <form onSubmit={(e) => { e.preventDefault(); onSubmit(); } }>
      {error}
      <input type='email' placeholder="email@example.com" value={email} onChange={(e) => setEmail(e.target.value)} />
      <input type='password' placeholder="password" value={password} onChange={(e) => setPassword(e.target.value)} />
      <button type='submit'>Sign In</button>
    </form>
  );
}",
        "lang": "tsx",
      },
    ],
    "domain": "test.com",
    "hash": "#custom-credential-sign-in",
    "hierarchy": {
      "h0": {
        "title": "Sign In",
      },
      "h2": {
        "id": "custom-credential-sign-in",
        "title": "Custom Credential Sign In",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-in-custom-credential-sign-in",
    "org_id": "test",
    "pathname": "/customization/page-examples/signin",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Custom Credential Sign In",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
      {
        "pathname": "/docs/customization/custom-page-examples",
        "title": "Custom Page Examples",
      },
    ],
    "code_snippets": [
      {
        "code": "'use client';

import { useStackApp } from "@stackframe/stack";
import { useState } from "react";

export default function CustomCredentialSignIn() {
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');
  const [message, setMessage] = useState('');
  const app = useStackApp();

  const onSubmit = async () => {
    // this will redirect to app.urls.afterSignIn if successful, you can customize it in the StackServerApp constructor
    const result = await app.sendMagicLinkEmail(email);
    // It is better to handle each error code separately, but we will just show the error code directly for simplicity here
    if (result.status === 'error') {
      setError(result.error.message);
    } else {
      setMessage('Magic link sent! Please check your email.');
    }
  };
  
  return (
    <form onSubmit={(e) => { e.preventDefault(); onSubmit(); } }>
      {error}
      {message ? 
        <div>{message}</div> :
        <>
          <input type='email' placeholder="email@example.com" value={email} onChange={(e) => setEmail(e.target.value)} />
          <button type='submit'>Send Magic Link</button>
        </>}
    </form>
  );
}",
        "lang": "tsx",
      },
    ],
    "domain": "test.com",
    "hash": "#custom-magic-link-sign-in",
    "hierarchy": {
      "h0": {
        "title": "Sign In",
      },
      "h2": {
        "id": "custom-magic-link-sign-in",
        "title": "Custom Magic Link Sign In",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-in-custom-magic-link-sign-in",
    "org_id": "test",
    "pathname": "/customization/page-examples/signin",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Custom Magic Link Sign In",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
      {
        "pathname": "/docs/customization/custom-page-examples",
        "title": "Custom Page Examples",
      },
    ],
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-up",
    "org_id": "test",
    "pathname": "/customization/page-examples/signup",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Sign Up",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
      {
        "pathname": "/docs/customization/custom-page-examples",
        "title": "Custom Page Examples",
      },
    ],
    "code_snippets": [
      {
        "code": "'use client';
import { SignUp } from "@stackframe/stack";

export default function DefaultSignUp() {
  // optionally redirect to some other page if the user is already signed in
  // const user = useUser();
  // if (user) { redirect to some other page }
  return <SignUp fullPage />;
}",
        "lang": "tsx",
      },
    ],
    "content": "You can also use useUser at the beginning of the sign in page to check if wether the user is already signed in and redirect them to some other page if they are.",
    "domain": "test.com",
    "hash": "#custom-page-with-signup-component",
    "hierarchy": {
      "h0": {
        "title": "Sign Up",
      },
      "h2": {
        "id": "custom-page-with-signup-component",
        "title": "Custom page with SignUp component",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-up-custom-page-with-signup-component",
    "org_id": "test",
    "pathname": "/customization/page-examples/signup",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Custom page with SignUp component",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
      {
        "pathname": "/docs/customization/custom-page-examples",
        "title": "Custom Page Examples",
      },
    ],
    "content": "CredentialSignUp: A component that contains a form for signing in with email and password.
OAuthGroup: A list of available OAuth provider sign-up buttons components. The available provider list is fetched from the server.
OAuthButton: A single OAuth sign-up button.",
    "domain": "test.com",
    "hash": "#other-useful-components",
    "hierarchy": {
      "h0": {
        "title": "Sign Up",
      },
      "h2": {
        "id": "other-useful-components",
        "title": "Other useful components",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-up-other-useful-components",
    "org_id": "test",
    "pathname": "/customization/page-examples/signup",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Other useful components",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
      {
        "pathname": "/docs/customization/custom-page-examples",
        "title": "Custom Page Examples",
      },
    ],
    "content": "OAuth sign-in and sign-up shares the same function. Check out the Sign In example for more information.",
    "domain": "test.com",
    "hash": "#custom-oauth-sign-up",
    "hierarchy": {
      "h0": {
        "title": "Sign Up",
      },
      "h2": {
        "id": "custom-oauth-sign-up",
        "title": "Custom OAuth Sign Up",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-up-custom-oauth-sign-up",
    "org_id": "test",
    "pathname": "/customization/page-examples/signup",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Custom OAuth Sign Up",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
      {
        "pathname": "/docs/customization/custom-page-examples",
        "title": "Custom Page Examples",
      },
    ],
    "code_snippets": [
      {
        "code": "'use client';

import { useStackApp } from "@stackframe/stack";
import { useState } from "react";

export default function CustomCredentialSignUp() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const app = useStackApp();

  const onSubmit = async () => {
    if (!password) {
      setError('Please enter your password');
      return;
    }
    // this will redirect to app.urls.afterSignUp if successful, you can customize it in the StackServerApp constructor
    const result = await app.signUpWithCredential({ email, password });
    // It is better to handle each error code separately, but we will just show the error code directly for simplicity here
    if (result.status === 'error') {
      setError(result.error.message);
    }
  };
  
  return (
    <form onSubmit={(e) => { e.preventDefault(); onSubmit(); } }>
      {error}
      <input type='email' placeholder="email@example.com" value={email} onChange={(e) => setEmail(e.target.value)} />
      <input type='password' placeholder="password" value={password} onChange={(e) => setPassword(e.target.value)} />
      <button type='submit'>Sign Up</button>
    </form>
  );
}",
        "lang": "tsx",
      },
    ],
    "domain": "test.com",
    "hash": "#custom-credential-sign-up",
    "hierarchy": {
      "h0": {
        "title": "Sign Up",
      },
      "h2": {
        "id": "custom-credential-sign-up",
        "title": "Custom Credential Sign Up",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-up-custom-credential-sign-up",
    "org_id": "test",
    "pathname": "/customization/page-examples/signup",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Custom Credential Sign Up",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
      {
        "pathname": "/docs/customization/custom-page-examples",
        "title": "Custom Page Examples",
      },
    ],
    "content": "Magic link sign-in and sign-up shares the same function. Check out the Sign In example for more information.",
    "domain": "test.com",
    "hash": "#custom-magic-link-sign-up",
    "hierarchy": {
      "h0": {
        "title": "Sign Up",
      },
      "h2": {
        "id": "custom-magic-link-sign-up",
        "title": "Custom Magic Link Sign Up",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-up-custom-magic-link-sign-up",
    "org_id": "test",
    "pathname": "/customization/page-examples/signup",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Custom Magic Link Sign Up",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/others",
        "title": "Others",
      },
    ],
    "content": "This guide shows how to integrate Stack Auth with Supabase row level security (RLS).


This guide only focuses on the RLS/JWT integration and does not sync user data between Supabase and Stack. You should use webhooks to achieve data sync.",
    "description": "Integrate Stack Auth with Supabase RLS",
    "domain": "test.com",
    "icon": "fa-regular fa-bolt",
    "objectID": "test:test.com:root.uv.docs.docs.others.supabase-integration",
    "org_id": "test",
    "pathname": "/others/supabase",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Supabase Integration",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/others",
        "title": "Others",
      },
    ],
    "code_snippets": [
      {
        "code": "-- Create the 'data' table
CREATE TABLE data (
  id bigint PRIMARY KEY,
  text text NOT NULL,
  user_id UUID
);

-- Insert sample data
INSERT INTO data (id, text, user_id) VALUES
  (1, 'Everyone can see this', NULL),
  (2, 'Only authenticated users can see this', NULL),
  (3, 'Only user with specific id can see this', NULL);

-- Enable Row Level Security
ALTER TABLE data ENABLE ROW LEVEL SECURITY;

-- Allow everyone to read the first row
CREATE POLICY "Public read" ON "public"."data" TO public
USING (id = 1);

-- Allow authenticated users to read the second row
CREATE POLICY "Authenticated access" ON "public"."data" TO authenticated
USING (id = 2);

-- Allow only the owner of the row to read it
CREATE POLICY "User access" ON "public"."data" TO authenticated
USING (id = 3 AND auth.uid() = user_id);",
        "lang": "sql",
        "meta": "title="Supabase SQL Editor"",
      },
      {
        "code": "npx create-next-app@latest -e with-supabase stack-supabase
cd stack-supabase
npx @stackframe/init-stack@latest",
        "lang": "bash",
        "meta": "title="Terminal"",
      },
      {
        "code": "'use server';

import { stackServerApp } from "@/stack";
import * as jose from "jose";

export const getSupabaseJwt = async () => {
  const user = await stackServerApp.getUser();

  if (!user) {
    return null;
  }

  const token = await new jose.SignJWT({
    sub: user.id,
    role: "authenticated",
  })
    .setProtectedHeader({ alg: "HS256" })
    .setIssuedAt()
    .setExpirationTime('1h')
    .sign(new TextEncoder().encode(process.env.SUPABASE_JWT_SECRET));

  return token;
};",
        "lang": "tsx",
        "meta": "title="/utils/actions.ts"",
      },
      {
        "code": "import { createBrowserClient } from "@supabase/ssr";
import { getSupabaseJwt } from "./actions";

export const createSupabaseClient = () => {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    { accessToken: async () => await getSupabaseJwt() || "" }
  );
}",
        "lang": "tsx",
        "meta": "title="/utils/supabase-client.ts"",
      },
      {
        "code": "'use client';

import { createSupabaseClient } from "@/utils/supabase-client";
import { useStackApp, useUser } from "@stackframe/stack";
import Link from "next/link";
import { useEffect, useState } from "react";

export default function Page() {
  const app = useStackApp();
  const user = useUser();
  const supabase = createSupabaseClient();
  const [data, setData] = useState<null | any[]>(null);

  useEffect(() => {
    supabase.from("data").select().then(({ data }) => setData(data ?? []));
  }, []);

  const listContent = data === null ? 
    <p>Loading...</p> :
    data.length === 0 ?
      <p>No notes found</p> :
      data.map((note) => <li key={note.id}>{note.text}</li>);

  return (
    <div>
      {
        user ? 
        <>
          <p>You are signed in</p>
          <p>User ID: {user.id}</p>
          <Link href={app.urls.signOut}>Sign Out</Link>
        </> : 
        <Link href={app.urls.signIn}>Sign In</Link>
      }
      <h3>Supabase data</h3>
      <ul>{listContent}</ul>
    </div>
  )
}",
        "lang": "tsx",
        "meta": "title="/app/page.tsx"",
      },
      {
        "code": "-- Create the 'data' table
CREATE TABLE data (
  id bigint PRIMARY KEY,
  text text NOT NULL,
  user_id UUID
);

-- Insert sample data
INSERT INTO data (id, text, user_id) VALUES
  (1, 'Everyone can see this', NULL),
  (2, 'Only authenticated users can see this', NULL),
  (3, 'Only user with specific id can see this', NULL);

-- Enable Row Level Security
ALTER TABLE data ENABLE ROW LEVEL SECURITY;

-- Allow everyone to read the first row
CREATE POLICY "Public read" ON "public"."data" TO public
USING (id = 1);

-- Allow authenticated users to read the second row
CREATE POLICY "Authenticated access" ON "public"."data" TO authenticated
USING (id = 2);

-- Allow only the owner of the row to read it
CREATE POLICY "User access" ON "public"."data" TO authenticated
USING (id = 3 AND auth.uid() = user_id);",
        "lang": "sql",
        "meta": "title="Supabase SQL Editor"",
      },
      {
        "code": "npx create-next-app@latest -e with-supabase stack-supabase
cd stack-supabase
npx @stackframe/init-stack@latest",
        "lang": "bash",
        "meta": "title="Terminal"",
      },
      {
        "code": "'use server';

import { stackServerApp } from "@/stack";
import * as jose from "jose";

export const getSupabaseJwt = async () => {
  const user = await stackServerApp.getUser();

  if (!user) {
    return null;
  }

  const token = await new jose.SignJWT({
    sub: user.id,
    role: "authenticated",
  })
    .setProtectedHeader({ alg: "HS256" })
    .setIssuedAt()
    .setExpirationTime('1h')
    .sign(new TextEncoder().encode(process.env.SUPABASE_JWT_SECRET));

  return token;
};",
        "lang": "tsx",
        "meta": "title="/utils/actions.ts"",
      },
      {
        "code": "import { createBrowserClient } from "@supabase/ssr";
import { getSupabaseJwt } from "./actions";

export const createSupabaseClient = () => {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    { accessToken: async () => await getSupabaseJwt() || "" }
  );
}",
        "lang": "tsx",
        "meta": "title="/utils/supabase-client.ts"",
      },
      {
        "code": "'use client';

import { createSupabaseClient } from "@/utils/supabase-client";
import { useStackApp, useUser } from "@stackframe/stack";
import Link from "next/link";
import { useEffect, useState } from "react";

export default function Page() {
  const app = useStackApp();
  const user = useUser();
  const supabase = createSupabaseClient();
  const [data, setData] = useState<null | any[]>(null);

  useEffect(() => {
    supabase.from("data").select().then(({ data }) => setData(data ?? []));
  }, []);

  const listContent = data === null ? 
    <p>Loading...</p> :
    data.length === 0 ?
      <p>No notes found</p> :
      data.map((note) => <li key={note.id}>{note.text}</li>);

  return (
    <div>
      {
        user ? 
        <>
          <p>You are signed in</p>
          <p>User ID: {user.id}</p>
          <Link href={app.urls.signOut}>Sign Out</Link>
        </> : 
        <Link href={app.urls.signIn}>Sign In</Link>
      }
      <h3>Supabase data</h3>
      <ul>{listContent}</ul>
    </div>
  )
}",
        "lang": "tsx",
        "meta": "title="/app/page.tsx"",
      },
    ],
    "content": "Let's create a sample table and some RLS policies to demonstrate how to integrate Stack Auth with Supabase RLS. You can apply the same logic to your own tables and policies.


Setup Supabase
First, let's create a Supabase project, then go to the SQL Editor and create a new table with some sample data and RLS policies.
Setup a new Next.js project
Now let's create a new Next.js project and install Stack Auth and Supabase client. (more details on Next.js setup, Stack Auth setup, and Supabase setup)
Now copy the environment variables from the Supabase dashboard to the .env.local file:
NEXT_PUBLIC_SUPABASE_URL

NEXT_PUBLIC_SUPABASE_ANON_KEY

SUPABASE_JWT_SECRET


Copy environment variables from the Stack dashboard to the .env.local file.
NEXT_PUBLIC_STACK_PROJECT_ID

NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY

STACK_SECRET_SERVER_KEY


Set up Supbase client
Now let's create a server action that mints a supabase JWT with the Stack Auth user ID if the user is authenticated.
And now create a helper function to create a Supabase client with the JWT signed by the server action
Fetch data from Supabase
Let's create an example page that fetches data from Supabase and displays it.
Now you should be able to compare the data you can view with an anonymous user, an authenticated user. You can also add your user Id to the row 3 of the Supabase table, and you should be able to see the row if and only if you are signed in with that user.
You can find the full example here on GitHub.",
    "domain": "test.com",
    "hash": "#setup",
    "hierarchy": {
      "h0": {
        "title": "Supabase Integration",
      },
      "h2": {
        "id": "setup",
        "title": "Setup",
      },
    },
    "icon": "fa-regular fa-bolt",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.others.supabase-integration-setup",
    "org_id": "test",
    "pathname": "/others/supabase",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Setup",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/others",
        "title": "Others",
      },
    ],
    "content": "Stack Auth is fully open-source and can be self-hosted on your own infrastructure. This guide will introduce each component of the project and how to set them up.


If you are unsure whether you should self-host, here are some things to consider:
Complexity: Stack Auth is a complex project with many interdependent services. Self-hosting requires managing these services and ensuring they work together seamlessly.

Updates: Stack Auth is a rapidly evolving project with frequent feature and fix releases. Self-hosting requires you to manage updates and apply them timely.

Reliability: Self-hosting requires you to ensure the reliability of your infrastructure. Downtimes and outages can be costly to handle.

Security: Self-hosting requires ensuring the security of your infrastructure. A compromised service can affect your users.


For most users, we recommend using Stack Auth's cloud hosted solution. However, if you understand the above challenges and are comfortable managing them, follow the instructions below to self-host!",
    "description": "Self-host Stack Auth on your own server",
    "domain": "test.com",
    "icon": "fa-regular fa-house-laptop",
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting",
    "org_id": "test",
    "pathname": "/others/self-host",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Self-Hosting",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/others",
        "title": "Others",
      },
    ],
    "content": "On a high level, Stack Auth is composed of the following services:
API backend: The core of Stack Auth, providing the REST API that the dashboard and your app connect to. This is what api.stack-auth.com provides.

Dashboard: The interface for managing users, teams, auth methods, etc. This is available at app.stack-auth.com.

Client SDK: An SDK used to connect your app to the Stack Auth API backend, wrapping API calls and providing easy-to-use interfaces. More details here.

Postgres database: Used to store all user data. We use Prisma as the ORM and manage the database schema migrations.

Svix: Used to send webhooks. Svix is open-source and can be self-hosted, but also offers a cloud hosted solution. More on Svix here

Email server: We use Inbucket as a local email server for development and a separate SMTP server for production. Any email service supporting SMTP will work.",
    "domain": "test.com",
    "hash": "#services",
    "hierarchy": {
      "h0": {
        "title": "Self-Hosting",
      },
      "h2": {
        "id": "services",
        "title": "Services",
      },
    },
    "icon": "fa-regular fa-house-laptop",
    "level": "h2",
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-services",
    "org_id": "test",
    "pathname": "/others/self-host",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Services",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/others",
        "title": "Others",
      },
    ],
    "code_snippets": [
      {
        "code": "git clone git@github.com:stack-auth/stack.git
cd stack",
        "lang": "sh",
      },
      {
        "code": "docker compose -f dependencies.compose.yaml up",
        "lang": "sh",
      },
      {
        "code": "pnpm install

# Build everything once
pnpm run build

# Initialize the database and seed it with some data
pnpm prisma db push
pnpm prisma db seed

# Run code generation (repeat this after e.g., changing the Prisma schema). This is part of the build script but faster.
pnpm run codegen

# Start the dev server
pnpm run dev

# In a different terminal, run tests in watch mode
pnpm run test",
        "lang": "sh",
      },
    ],
    "content": "Clone the repository and check out the directory:
Pre-populated .env files for the setup below are available and used by default in .env.development in each package. Copy all the .env.development files to .env.local in the respective packages for local development.
In a terminal, start the dependencies (Postgres and Inbucket) as Docker containers:
Then open a new terminal:
You can now open the dashboard at http://localhost:8101, the API on port 8102, a demo on port 8103, docs on port 8104, Inbucket (emails) on port 8105, and Prisma Studio on port 8106.
Your IDE may show errors on all @stackframe/XYZ imports. To fix this, restart the TypeScript language server; for example, in VSCode, you can open the command palette (Ctrl+Shift+P) and run Developer: Reload Window or TypeScript: Restart TS server.",
    "domain": "test.com",
    "hash": "#setup",
    "hierarchy": {
      "h0": {
        "title": "Self-Hosting",
      },
      "h2": {
        "id": "local-development",
        "title": "Local development",
      },
      "h3": {
        "id": "setup",
        "title": "Setup",
      },
    },
    "icon": "fa-regular fa-house-laptop",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-setup",
    "org_id": "test",
    "pathname": "/others/self-host",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Setup",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/others",
        "title": "Others",
      },
    ],
    "code_snippets": [
      {
        "code": "pnpm run prisma migrate dev",
        "lang": "sh",
      },
    ],
    "content": "If you make changes to the Prisma schema, you need to run the following command to create a migration:",
    "domain": "test.com",
    "hash": "#database-migrations",
    "hierarchy": {
      "h0": {
        "title": "Self-Hosting",
      },
      "h2": {
        "id": "local-development",
        "title": "Local development",
      },
      "h3": {
        "id": "database-migrations",
        "title": "Database migrations",
      },
    },
    "icon": "fa-regular fa-house-laptop",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-database-migrations",
    "org_id": "test",
    "pathname": "/others/self-host",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Database migrations",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/others",
        "title": "Others",
      },
    ],
    "content": "Deploy these services with your preferred platform. Copy the URLs/API keysâ€”you'll need them in the next step.",
    "domain": "test.com",
    "hash": "#database-svix-email",
    "hierarchy": {
      "h0": {
        "title": "Self-Hosting",
      },
      "h2": {
        "id": "production-deployment",
        "title": "Production deployment",
      },
      "h3": {
        "id": "database-svix-email",
        "title": "Database, Svix, email",
      },
    },
    "icon": "fa-regular fa-house-laptop",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-database-svix-email",
    "org_id": "test",
    "pathname": "/others/self-host",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Database, Svix, email",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/others",
        "title": "Others",
      },
    ],
    "code_snippets": [
      {
        "code": "git clone git@github.com:stack-auth/stack.git
cd stack",
        "lang": "sh",
      },
      {
        "code": "pnpm install
pnpm build:backend
pnpm start:backend",
        "lang": "sh",
      },
    ],
    "content": "Clone the repository and check out the root directory:
Set all the necessary environment variables (you can check out apps/backend/.env). Note that STACK_BASE_URL should be the URL of your deployed domain (e.g., https://your-backend-url.com).
Build and start the server:",
    "domain": "test.com",
    "hash": "#api-backend",
    "hierarchy": {
      "h0": {
        "title": "Self-Hosting",
      },
      "h2": {
        "id": "production-deployment",
        "title": "Production deployment",
      },
      "h3": {
        "id": "api-backend",
        "title": "API backend",
      },
    },
    "icon": "fa-regular fa-house-laptop",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-api-backend",
    "org_id": "test",
    "pathname": "/others/self-host",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "API backend",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/others",
        "title": "Others",
      },
    ],
    "code_snippets": [
      {
        "code": "git clone git@github.com:stack-auth/stack.git
cd stack",
        "lang": "sh",
      },
      {
        "code": "pnpm install
pnpm build:dashboard
pnpm start:dashboard",
        "lang": "sh",
      },
    ],
    "content": "Clone the repository (if you are running it on a separate server, or skip this step if you are using the same server as the API backend) and check out the dashboard directory:
Set all the necessary environment variables (you can check out apps/dashboard/.env). Note that NEXT_PUBLIC_STACK_URL should be the URL of your deployed backend (e.g., https://your-backend-url.com).
Build and start the server:",
    "domain": "test.com",
    "hash": "#dashboard",
    "hierarchy": {
      "h0": {
        "title": "Self-Hosting",
      },
      "h2": {
        "id": "production-deployment",
        "title": "Production deployment",
      },
      "h3": {
        "id": "dashboard",
        "title": "Dashboard",
      },
    },
    "icon": "fa-regular fa-house-laptop",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-dashboard",
    "org_id": "test",
    "pathname": "/others/self-host",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Dashboard",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/others",
        "title": "Others",
      },
    ],
    "code_snippets": [
      {
        "code": "pnpm prisma migrate deploy",
        "lang": "sh",
      },
      {
        "code": "pnpm prisma db seed",
        "lang": "sh",
      },
    ],
    "content": "You need to initialize the database with the following command with the backend environment variables set:
The database is still empty; you need to create a project with the ID "internal" used by the dashboard to authenticate itself. You can do this with the following command:
Now you can go to the dashboard (e.g., https://your-dashboard-url.com) and sign up for an account.
To manage your dashboard configs with this account, manually go into the database, find the user you just created, and add { managedProjectIds: ["internal"] } to the serverMetadata jsonb column.
Go back to the dashboard, refresh the page, and you should see the "Stack Dashboard" project. We recommend disabling new user sign-ups to your internal project to avoid unauthorized account and project creations.
Now, create a new project for your app and follow the normal setup process. Add NEXT_PUBLIC_STACK_URL=https://your-backend-url.com to your app's environment variables so that it connects to your API backend instead of the default Stack Auth API backend (https://api.stack-auth.com).",
    "domain": "test.com",
    "hash": "#initialize-the-database",
    "hierarchy": {
      "h0": {
        "title": "Self-Hosting",
      },
      "h2": {
        "id": "production-deployment",
        "title": "Production deployment",
      },
      "h3": {
        "id": "initialize-the-database",
        "title": "Initialize the database",
      },
    },
    "icon": "fa-regular fa-house-laptop",
    "level": "h3",
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting-initialize-the-database",
    "org_id": "test",
    "pathname": "/others/self-host",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Initialize the database",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "Renders a user button component with optional user information, color mode toggle, and extra menu items.
UserButton",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.components.components.components.user-button",
    "org_id": "test",
    "pathname": "/components/user-button",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<UserButton />",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "showUserInfo: boolean - Whether to display user information (display name and email) or only show the avatar.

colorModeToggle: () => void | Promise<void> - Function to be called when the color mode toggle button is clicked. If specified, a color mode toggle button will be shown.

extraItems: Array<{text: string, icon: React.ReactNode, onClick: Function}> - Additional menu items to display.",
    "domain": "test.com",
    "hash": "#props",
    "hierarchy": {
      "h0": {
        "title": "<UserButton />",
      },
      "h2": {
        "id": "props",
        "title": "Props",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.user-button-props",
    "org_id": "test",
    "pathname": "/components/user-button",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Props",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "code_snippets": [
      {
        "code": "'use client';
import { UserButton } from '@stackframe/stack';

export default function Page() {
  return (
    <div>
      <h1>User Button</h1>
      <UserButton
        showUserInfo={true}
        colorModeToggle={() => { console.log("color mode toggle clicked") }}
        extraItems={[{
          text: 'Custom Action',
          icon: <CustomIcon />,
          onClick: () => console.log('Custom action clicked')
        }]}
      />
    </div>
  );
}",
        "lang": "tsx",
      },
    ],
    "domain": "test.com",
    "hash": "#example",
    "hierarchy": {
      "h0": {
        "title": "<UserButton />",
      },
      "h2": {
        "id": "example",
        "title": "Example",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.user-button-example",
    "org_id": "test",
    "pathname": "/components/user-button",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "A React component for switching between teams. It displays a dropdown of teams and allows the user to select a team.
SelectedTeamSwitcher
For a comprehensive guide on using this component, refer to our Team Selection documentation.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.components.components.components.selected-team-switcher",
    "org_id": "test",
    "pathname": "/components/selected-team-switcher",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<SelectedTeamSwitcher />",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "urlMap (optional): (team: Team) => string - A function that maps a team to a URL. If provided, the component will navigate to this URL when a team is selected.

selectedTeam (optional): Team - The initially selected team.

noUpdateSelectedTeam (optional): boolean - If true, prevents updating the selected team in the user's settings when a new team is selected. Default is false.",
    "domain": "test.com",
    "hash": "#props",
    "hierarchy": {
      "h0": {
        "title": "<SelectedTeamSwitcher />",
      },
      "h2": {
        "id": "props",
        "title": "Props",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.selected-team-switcher-props",
    "org_id": "test",
    "pathname": "/components/selected-team-switcher",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Props",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "code_snippets": [
      {
        "code": "import { SelectedTeamSwitcher } from '@stackframe/stack';

export default function Page() {
  return (
    <div>
      <h1>Team Switcher</h1>
      <SelectedTeamSwitcher
        urlMap={(team) => `/team/${team.id}`}
        selectedTeam={currentTeam}
        noUpdateSelectedTeam={false}
      />
    </div>
  );
}",
        "lang": "tsx",
      },
    ],
    "domain": "test.com",
    "hash": "#example",
    "hierarchy": {
      "h0": {
        "title": "<SelectedTeamSwitcher />",
      },
      "h2": {
        "id": "example",
        "title": "Example",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.selected-team-switcher-example",
    "org_id": "test",
    "pathname": "/components/selected-team-switcher",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "Renders an account settings page with customizable sidebar items and optional full-page layout.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.components.components.components.account-settings",
    "org_id": "test",
    "pathname": "/components/account-settings",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<AccountSettings />",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "fullPage (optional): boolean - If true, renders the component in full-page mode.

extraItems (optional): Array - Additional items to be added to the sidebar. Each item should have the following properties:
title: string - The title of the item.

icon: LucideIcon - The icon component for the item.

content: React.ReactNode - The content to be rendered for the item.

subpath: string - The subpath for the item's route.",
    "domain": "test.com",
    "hash": "#props",
    "hierarchy": {
      "h0": {
        "title": "<AccountSettings />",
      },
      "h2": {
        "id": "props",
        "title": "Props",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.account-settings-props",
    "org_id": "test",
    "pathname": "/components/account-settings",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Props",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "code_snippets": [
      {
        "code": "import { AccountSettings } from '@stackframe/stack';

export default function MyAccountPage() {
  return (
    <AccountSettings
      fullPage={true}
      extraItems={[{
        title: 'Custom Section',
        icon: CustomLucideIcon,
        content: <CustomContent />,
        subpath: '/custom',
      }]}
    />
  );
}",
        "lang": "tsx",
      },
    ],
    "domain": "test.com",
    "hash": "#example",
    "hierarchy": {
      "h0": {
        "title": "<AccountSettings />",
      },
      "h2": {
        "id": "example",
        "title": "Example",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.account-settings-example",
    "org_id": "test",
    "pathname": "/components/account-settings",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "Renders a sign-in component with customizable options.
SignIn
For more information, please refer to the custom pages guide.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.components.components.components.sign-in",
    "org_id": "test",
    "pathname": "/components/sign-in",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<SignIn />",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "fullPage (optional): boolean - If true, renders the sign-in page in full-page mode.

automaticRedirect (optional): boolean - If true, redirect to afterSignIn URL if the user is already signed-in.

extraInfo (optional): React.ReactNode - Additional content to be displayed on the sign-in page.

firstTab (optional): 'magic-link' | 'password' - Determines which tab is initially active. Defaults to 'magic-link' if not specified.",
    "domain": "test.com",
    "hash": "#props",
    "hierarchy": {
      "h0": {
        "title": "<SignIn />",
      },
      "h2": {
        "id": "props",
        "title": "Props",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.sign-in-props",
    "org_id": "test",
    "pathname": "/components/sign-in",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Props",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "code_snippets": [
      {
        "code": "import { SignIn } from '@stackframe/stack';

export default function Page() {
  return (
    <div>
      <h1>Sign In</h1>
      <SignIn
        fullPage={true}
        automaticRedirect={true}
        firstTab='password'
        extraInfo={<>When signing in, you agree to our <a href="/terms">Terms</a></>}
      />
    </div>
  );
}",
        "lang": "tsx",
      },
    ],
    "domain": "test.com",
    "hash": "#example",
    "hierarchy": {
      "h0": {
        "title": "<SignIn />",
      },
      "h2": {
        "id": "example",
        "title": "Example",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.sign-in-example",
    "org_id": "test",
    "pathname": "/components/sign-in",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "A component that renders a sign-up page with various customization options.
SignUp
For more information, please refer to the custom pages guide.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.components.components.components.sign-up",
    "org_id": "test",
    "pathname": "/components/sign-up",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<SignUp />",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "fullPage (optional): boolean - If true, renders the sign-up page in full-page mode.

automaticRedirect (optional): boolean - If true, redirect to afterSignUp URL if the user is already signed-in.

noPasswordRepeat (optional): boolean - If true, removes the password confirmation field.

extraInfo (optional): React.ReactNode - Additional information to display on the sign-up page.

firstTab (optional): `'magic-link' | 'password' - Determines which tab is initially active. Defaults to 'magic-link' if not specified.",
    "domain": "test.com",
    "hash": "#props",
    "hierarchy": {
      "h0": {
        "title": "<SignUp />",
      },
      "h2": {
        "id": "props",
        "title": "Props",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.sign-up-props",
    "org_id": "test",
    "pathname": "/components/sign-up",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Props",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "code_snippets": [
      {
        "code": "import { SignUp } from '@stackframe/stack';

export default function Page() {
  return (
    <div>
      <h1>Sign Up</h1>
      <SignUp
        fullPage={true}
        automaticRedirect={true}
        firstTab='password'
        extraInfo={<>By signing up, you agree to our <a href="/terms">Terms</a></>}
      />
    </div>
  );
}",
        "lang": "tsx",
      },
    ],
    "domain": "test.com",
    "hash": "#example",
    "hierarchy": {
      "h0": {
        "title": "<SignUp />",
      },
      "h2": {
        "id": "example",
        "title": "Example",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.sign-up-example",
    "org_id": "test",
    "pathname": "/components/sign-up",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "A component that renders a sign-in form with email and password fields.
CredentialSignIn
Note that if credential sign-in is disabled in the dashboard, this component will still render. However, attempting to use it will result in an error being thrown.
For more information, please refer to the custom pages guide.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.components.components.components.credential-sign-in",
    "org_id": "test",
    "pathname": "/components/credential-sign-in",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<CredentialSignIn />",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "This component does not accept any props.",
    "domain": "test.com",
    "hash": "#props",
    "hierarchy": {
      "h0": {
        "title": "<CredentialSignIn />",
      },
      "h2": {
        "id": "props",
        "title": "Props",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.credential-sign-in-props",
    "org_id": "test",
    "pathname": "/components/credential-sign-in",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Props",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "code_snippets": [
      {
        "code": "import { CredentialSignIn } from '@stackframe/stack';

export default function Page() {
  return (
    <div>
      <h1>Sign In</h1>
      <CredentialSignIn />
    </div>
  );
}",
        "lang": "tsx",
      },
    ],
    "domain": "test.com",
    "hash": "#example",
    "hierarchy": {
      "h0": {
        "title": "<CredentialSignIn />",
      },
      "h2": {
        "id": "example",
        "title": "Example",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.credential-sign-in-example",
    "org_id": "test",
    "pathname": "/components/credential-sign-in",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "A component that renders a sign-up form with email and password fields.
CredentialSignUp
Note that if credential sign-up is disabled in the dashboard, this component will still render. However, attempting to use it will result in an error being thrown.
For more information, please refer to the custom pages guide.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.components.components.components.credential-sign-up",
    "org_id": "test",
    "pathname": "/components/credential-sign-up",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<CredentialSignUp />",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "noPasswordRepeat (optional): boolean - If set to true, the form will not include a password repeat field.",
    "domain": "test.com",
    "hash": "#props",
    "hierarchy": {
      "h0": {
        "title": "<CredentialSignUp />",
      },
      "h2": {
        "id": "props",
        "title": "Props",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.credential-sign-up-props",
    "org_id": "test",
    "pathname": "/components/credential-sign-up",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Props",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "code_snippets": [
      {
        "code": "import { CredentialSignUp } from '@stackframe/stack';

export default function Page() {
  return (
    <div>
      <h1>Sign Up</h1>
      <CredentialSignUp noPasswordRepeat />
    </div>
  );
}",
        "lang": "tsx",
      },
    ],
    "domain": "test.com",
    "hash": "#example",
    "hierarchy": {
      "h0": {
        "title": "<CredentialSignUp />",
      },
      "h2": {
        "id": "example",
        "title": "Example",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.credential-sign-up-example",
    "org_id": "test",
    "pathname": "/components/credential-sign-up",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "Renders a customized OAuth button for various providers to initiate sign-in or sign-up processes.
OAuthButton
Note that if the specific OAuth provider is disabled in the dashboard, this component will still render. However, attempting to use it will result in an error being thrown.
For more information, please refer to the custom pages guide.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.components.components.components.o-auth-button",
    "org_id": "test",
    "pathname": "/components/oauth-button",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<OAuthButton />",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "provider: string - The name of the OAuth provider (e.g., 'google', 'github', 'facebook').

type: 'sign-in' | 'sign-up' - Determines whether the button text is for signing in or signing up. (both are the same in terms of functionality)",
    "domain": "test.com",
    "hash": "#props",
    "hierarchy": {
      "h0": {
        "title": "<OAuthButton />",
      },
      "h2": {
        "id": "props",
        "title": "Props",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.o-auth-button-props",
    "org_id": "test",
    "pathname": "/components/oauth-button",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Props",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "code_snippets": [
      {
        "code": "import { OAuthButton } from '@stackframe/stack';

export default function Page() {
  return (
    <div>
      <h1>Sign In</h1>
      <OAuthButton provider="google" type="sign-in" />
      <OAuthButton provider="github" type="sign-up" />
    </div>
  );
}
",
        "lang": "tsx",
      },
    ],
    "content": "The OAuthButton component automatically styles itself based on the provided OAuth provider and handles the sign-in or sign-up process when clicked.",
    "domain": "test.com",
    "hash": "#example",
    "hierarchy": {
      "h0": {
        "title": "<OAuthButton />",
      },
      "h2": {
        "id": "example",
        "title": "Example",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.o-auth-button-example",
    "org_id": "test",
    "pathname": "/components/oauth-button",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "Renders all the available OAuth buttons for sign-in or sign-up functionality.
OAuthButtonGroup
Note that if there are no OAuth providers enabled in the dashboard, this component will be empty.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.components.components.components.o-auth-button-group",
    "org_id": "test",
    "pathname": "/components/oauth-button-group",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<OAuthButtonGroup />",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "content": "type: 'sign-in' | 'sign-up' - Specifies whether the buttons text are for sign-in or sign-up (both are the same in terms of functionality).",
    "domain": "test.com",
    "hash": "#props",
    "hierarchy": {
      "h0": {
        "title": "<OAuthButtonGroup />",
      },
      "h2": {
        "id": "props",
        "title": "Props",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.o-auth-button-group-props",
    "org_id": "test",
    "pathname": "/components/oauth-button-group",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Props",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "code_snippets": [
      {
        "code": "import { OAuthButtonGroup } from '@stackframe/stack';

export default function Page() {
  return (
    <div>
      <h1>Sign In</h1>
      <OAuthButtonGroup type='sign-in' />
    </div>
  );
}
",
        "lang": "tsx",
      },
    ],
    "domain": "test.com",
    "hash": "#example",
    "hierarchy": {
      "h0": {
        "title": "<OAuthButtonGroup />",
      },
      "h2": {
        "id": "example",
        "title": "Example",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.components.o-auth-button-group-example",
    "org_id": "test",
    "pathname": "/components/oauth-button-group",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/utilities",
        "title": "Utilities",
      },
    ],
    "content": "Renders the appropriate authentication or account-related component based on the current route.
For detailed usage instructions, please refer to the manual section of the setup guide.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-handler",
    "org_id": "test",
    "pathname": "/components/stack-handler",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<StackHandler />",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/utilities",
        "title": "Utilities",
      },
    ],
    "content": "app: StackServerApp - The Stack server application instance.

params: { stack?: string[] } - The route parameters, where stack is an array of path segments.

searchParams: Record<string, string> - The URL search parameters.

fullPage: boolean - Whether to render the component in full-page mode.

componentProps: { [K in keyof Components]?: Partial<ComponentProps<Components[K]>> } - Props to pass to the rendered components.",
    "domain": "test.com",
    "hash": "#props",
    "hierarchy": {
      "h0": {
        "title": "<StackHandler />",
      },
      "h2": {
        "id": "props",
        "title": "Props",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-handler-props",
    "org_id": "test",
    "pathname": "/components/stack-handler",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Props",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/utilities",
        "title": "Utilities",
      },
    ],
    "code_snippets": [
      {
        "code": "import { StackHandler } from '@stackframe/stack';
import { stackServerApp } from "@/stack";

export default function Hanlder(props: { params: any, searchParams: any }) {
  return (
    <StackHandler
      app={stackServerApp}
      params={props.params}
      searchParams={props.searchParams}
      fullPage={true}
      componentProps={{
        SignIn: { /* SignIn component props */ },
        SignUp: { /* SignUp component props */ },
        // ... other component props
      }}
    />
  );
}",
        "lang": "tsx",
        "meta": "title="app/handler/[...stack].tsx"",
      },
    ],
    "domain": "test.com",
    "hash": "#example",
    "hierarchy": {
      "h0": {
        "title": "<StackHandler />",
      },
      "h2": {
        "id": "example",
        "title": "Example",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-handler-example",
    "org_id": "test",
    "pathname": "/components/stack-handler",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/utilities",
        "title": "Utilities",
      },
    ],
    "content": "A React component that provides Stack context to its children.
For detailed usage instructions, please refer to the manual section of the setup guide.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-provider",
    "org_id": "test",
    "pathname": "/components/stack-provider",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<StackProvider />",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/utilities",
        "title": "Utilities",
      },
    ],
    "content": "children: React.ReactNode - The child components to be wrapped by the StackProvider.

app: StackClientApp | StackServerApp - The Stack app instance to be used.

lang (optional): "en-US" | "de-DE" | "es-419" | "es-ES" | "fr-CA" | "fr-FR" | "it-IT" | "pt-BR" | "pt-PT" - The language to be used for translations.",
    "domain": "test.com",
    "hash": "#props",
    "hierarchy": {
      "h0": {
        "title": "<StackProvider />",
      },
      "h2": {
        "id": "props",
        "title": "Props",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-provider-props",
    "org_id": "test",
    "pathname": "/components/stack-provider",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Props",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/utilities",
        "title": "Utilities",
      },
    ],
    "code_snippets": [
      {
        "code": "import { StackProvider } from '@stackframe/stack';
import { stackServerApp } from '@/stack';

function App() {
  return (
    <StackProvider app={stackServerApp} lang="de-DE">
      {/* Your app content */}
    </StackProvider>
  );
}",
        "lang": "tsx",
        "meta": "title="layout.tsx"",
      },
    ],
    "domain": "test.com",
    "hash": "#example",
    "hierarchy": {
      "h0": {
        "title": "<StackProvider />",
      },
      "h2": {
        "id": "example",
        "title": "Example",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-provider-example",
    "org_id": "test",
    "pathname": "/components/stack-provider",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/utilities",
        "title": "Utilities",
      },
    ],
    "content": "A component that applies a theme to its children.
For more information, please refer to the color and styles guide.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-theme",
    "org_id": "test",
    "pathname": "/components/stack-theme",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<StackTheme />",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/utilities",
        "title": "Utilities",
      },
    ],
    "content": "theme (optional): ThemeConfig - Custom theme configuration to override the default theme.

children (optional): React.ReactNode - Child components to be rendered within the themed context.",
    "domain": "test.com",
    "hash": "#props",
    "hierarchy": {
      "h0": {
        "title": "<StackTheme />",
      },
      "h2": {
        "id": "props",
        "title": "Props",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-theme-props",
    "org_id": "test",
    "pathname": "/components/stack-theme",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Props",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/utilities",
        "title": "Utilities",
      },
    ],
    "code_snippets": [
      {
        "code": "const theme = {
  light: {
    primary: 'red',
  },
  dark: {
    primary: '#00FF00',
  },
  radius: '8px',
}

// ...

<StackTheme theme={theme}>
  {/* children */}
</StackTheme>
",
        "lang": "tsx",
      },
    ],
    "domain": "test.com",
    "hash": "#example",
    "hierarchy": {
      "h0": {
        "title": "<StackTheme />",
      },
      "h2": {
        "id": "example",
        "title": "Example",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-theme-example",
    "org_id": "test",
    "pathname": "/components/stack-theme",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "This is a detailed reference for the User object. If you're looking for a more high-level overview, please refer to our guide on users here.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "User",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "There are a few types of user objects in Stack Auth:
CurrentUser
Represents the authenticated user on the client side

Has an active session (typically stored in browser cookies)

Used in client-side code

Obtained by calling useUser() in a Client Component



ServerUser
Represents a user on the server side without an active session

extends most of the attributes and methods of CurrentUser

Has additional capabilities like being able to update emails or passwords without confirmation

Lacks session-dependent functions like signOut()

Obtained by calling stackServerApp.getUser('user_id_123') or stackServerApp.listUsers() on the server side



CurrentServerUser
Combines attributes and methods of both ServerUser and CurrentUser

Obtained by calling stackServerApp.getUser() on the server side




These user types provide flexible and secure user management across both client and server environments, each serving a specific purpose in different application contexts.",
    "domain": "test.com",
    "hash": "#different-types-of-user-objects",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "different-types-of-user-objects",
        "title": "Different types of User objects",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-different-types-of-user-objects",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Different types of User objects",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "You can call useUser() or stackServerApp.getUser() to get the CurrentUser object.",
    "domain": "test.com",
    "hash": "#currentuser",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-currentuser",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "CurrentUser",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "The user ID. This is the unique identifier of the user.


The display name of the user. Can be changed by the user.


The primary email of the user. Note: this is not unique.


Whether the primary email is verified.


The profile image URL of the user.


The Date when the user signed up.


Whether the user has a password set.


The JSON metadata that is visible on the client side. Note that this should not contain information that should be kept private on the server side or information that should not be modified by the client.


Metadata that can be read on the client side but can only be modified on the server side.


The currently selected team for the user, if applicable.",
    "domain": "test.com",
    "hash": "#properties",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "properties",
        "title": "Properties",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-properties",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Properties",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await user.update({
  displayName: "New Display Name",
  clientMetadata: {
    address: "123 Main St",
  },
});",
        "lang": "typescript",
      },
    ],
    "content": "Update the user information.
Parameters:








The new display name for the user.


Custom metadata visible to the client.


The ID of the team to set as selected, or null to clear selection.


The URL of the user's new profile image (base64 image allowed, crop and compress before passing it in), or null to remove.
Returns:


Promise<void>
Example:",
    "domain": "test.com",
    "hash": "#update",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "update",
        "title": "update()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-update",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "update()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const team = await user.getTeam("teamId");",
        "lang": "typescript",
      },
    ],
    "content": "Get the team with the given ID.
Parameters:




The ID of the team to get.
Returns:


Promise<Team | null>: The team object, or null if the team is not found (either because it doesn't exist or because the user is not a member of the team).
Example:",
    "domain": "test.com",
    "hash": "#getteam",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "getteam",
        "title": "getTeam()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-getteam",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "getTeam()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const team = user.useTeam("teamId");",
        "lang": "typescript",
      },
    ],
    "content": "Get the team with the given ID.
This is the same as getTeam but it is a React hook.
Parameters:




The ID of the team to get.
Returns:


Team | null: The team object, or null if the team is not found (either because it doesn't exist or because the user is not a member of the team).
Example:",
    "domain": "test.com",
    "hash": "#useteam",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "useteam",
        "title": "useTeam()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-useteam",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "useTeam()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const teams = await user.listTeams();",
        "lang": "typescript",
      },
    ],
    "content": "List all the teams the user is a member of.
Parameters:


No parameters.
Returns:


Promise<Team[]>: The list of teams.
Example:",
    "domain": "test.com",
    "hash": "#listteams",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "listteams",
        "title": "listTeams()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-listteams",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "listTeams()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const teams = user.useTeams();",
        "lang": "typescript",
      },
    ],
    "content": "List all the teams the user is a member of.
This is the same as listTeams but it is a React hook.
Parameters:


No parameters.
Returns:


Team[]: The list of teams.
Example:",
    "domain": "test.com",
    "hash": "#useteams",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "useteams",
        "title": "useTeams()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-useteams",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "useTeams()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const team = await user.getTeam("team_id_123");
await user.setSelectedTeam(team);",
        "lang": "typescript",
      },
    ],
    "content": "Parameters:




The team to set as selected, or null to clear selection.
Returns:


Promise<void>
Set the currently selected team for the user.
Example:",
    "domain": "test.com",
    "hash": "#setselectedteam",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "setselectedteam",
        "title": "setSelectedTeam()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-setselectedteam",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "setSelectedTeam()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const team = await user.createTeam({
  displayName: "New Team",
  profileImageUrl: "https://example.com/profile.jpg",
});",
        "lang": "typescript",
      },
    ],
    "content": "Create a new team for the user. The user will be added to the team and be given the creator permissions.
Note that if client side team creation is disabled in the Stack dashboard, this will throw an error.
Parameters:








The display name for the team.


The URL of the team's profile image (base64 image allowed, crop and compress before passing it in), or null to remove.
Returns:


Promise<Team>: The created team.
Example:",
    "domain": "test.com",
    "hash": "#createteam",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "createteam",
        "title": "createTeam()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-createteam",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "createTeam()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await user.leaveTeam(team);",
        "lang": "typescript",
      },
    ],
    "content": "Leave a team.
Note that if the user is not a member of the team, this will throw an error.
Parameters:




The team to leave.
Returns:


Promise<void>
Example:",
    "domain": "test.com",
    "hash": "#leaveteam",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "leaveteam",
        "title": "leaveTeam()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-leaveteam",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "leaveTeam()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const profile = await user.getTeamProfile(team);",
        "lang": "typescript",
      },
    ],
    "content": "Get the user's profile for a team.
Parameters:




The team to get the profile for.
Returns:


Promise<EditableTeamMemberProfile>: The editable team member profile
Example:",
    "domain": "test.com",
    "hash": "#getteamprofile",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "getteamprofile",
        "title": "getTeamProfile()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-getteamprofile",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "getTeamProfile()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const profile = user.useTeamProfile(team);",
        "lang": "typescript",
      },
    ],
    "content": "Get the user's profile for a team.
This is the same as getTeamProfile but it is a React hook.
Parameters:




The team to get the profile for.
Returns:
EditableTeamMemberProfile: The editable team member profile
Example:",
    "domain": "test.com",
    "hash": "#useteamprofile",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "useteamprofile",
        "title": "useTeamProfile()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-useteamprofile",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "useTeamProfile()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const hasPermission = await user.hasPermission(team, "permissionId");",
        "lang": "typescript",
      },
    ],
    "content": "Parameters:




The team to check the permission for.


The ID of the permission to check.
Returns:


Promise<boolean>: Whether the user has the permission.
This will check if the user has a permission for a team. Note that if the permission is not defined in the Stack dashboard, it will still return false.
Example:",
    "domain": "test.com",
    "hash": "#haspermission",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "haspermission",
        "title": "hasPermission()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-haspermission",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "hasPermission()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const permission = await user.getPermission(team, "read_secret_info");",
        "lang": "typescript",
      },
    ],
    "content": "Parameters:




The team to get the permission for.


The ID of the permission to get.






Whether to get the permission recursively. default true.
Returns:


Promise<TeamPermission | null>: The permission object, or null if the permission is not found.
This will get the permission of a user for a team. Note that if the permission is not defined in the Stack dashboard, it will still return null.
Example:",
    "domain": "test.com",
    "hash": "#getpermission",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "getpermission",
        "title": "getPermission()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-getpermission",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "getPermission()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const permission = user.usePermission(team, "read_secret_info");",
        "lang": "typescript",
      },
    ],
    "content": "TeamPermission | null: The permission object, or null if the permission is not found.


This will get the permission of a user for a team. Note that if the permission is not defined in the Stack dashboard, it will still return null.
This is the same as getPermission but it is a React hook.
Parameters:




The team to get the permission for.


The ID of the permission to get.






Whether to get the permission recursively. default true.
Returns:


TeamPermission | null: The permission object, or null if the permission is not found.
Example:",
    "domain": "test.com",
    "hash": "#usepermission",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "usepermission",
        "title": "usePermission()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-usepermission",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "usePermission()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const permissions = await user.listPermissions(team);",
        "lang": "typescript",
      },
    ],
    "content": "List all the permissions a user has for a team.
Parameters:




The team to list the permissions for.






Whether to list the permissions recursively. default true.
Returns:


Promise<TeamPermission[]>: The list of permissions.
Example:",
    "domain": "test.com",
    "hash": "#listpermissions",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "listpermissions",
        "title": "listPermissions()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-listpermissions",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "listPermissions()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const permissions = user.usePermissions(team);",
        "lang": "typescript",
      },
    ],
    "content": "List all the permissions a user has for a team.
This is the same as listPermissions but it is a React hook.
Parameters:




The team to use the permissions for.






Whether to use the permissions recursively. default true.
Returns:


TeamPermission[]: The list of permissions.
Example:",
    "domain": "test.com",
    "hash": "#usepermissions",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "usepermissions",
        "title": "usePermissions()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-usepermissions",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "usePermissions()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const contactChannels = await user.listContactChannels();",
        "lang": "typescript",
      },
    ],
    "content": "List all the contact channels of the user.
Parameters:


No parameters.
Returns:


Promise<ContactChannel[]>: The list of contact channels.
Example:",
    "domain": "test.com",
    "hash": "#listcontactchannels",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "listcontactchannels",
        "title": "listContactChannels()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-listcontactchannels",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "listContactChannels()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const contactChannels = user.useContactChannels();",
        "lang": "typescript",
      },
    ],
    "content": "List all the contact channels of the user.
This is the same as listContactChannels but it is a React hook.
Parameters:


No parameters.
Returns:


ContactChannel[]: The list of contact channels.
Example:",
    "domain": "test.com",
    "hash": "#usecontactchannels",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "usecontactchannels",
        "title": "useContactChannels()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-usecontactchannels",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "useContactChannels()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const result = await user.updatePassword({
  oldPassword: "currentPassword",
  newPassword: "newPassword",
});
if (result.status === "error" ) {
  console.error("Error updating password", result.error);
} else {
  console.log("Password updated");
}",
        "lang": "typescript",
      },
    ],
    "content": "This will update the user's password. It will return an error object (not throw an error) if the passwords mismatch or if the new password does not meet the requirements. If successful, it will return undefined.
Parameters:








The old password.


The new password.
Returns:


Promise<void>
Example:",
    "domain": "test.com",
    "hash": "#updatepassword",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "updatepassword",
        "title": "updatePassword()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-updatepassword",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "updatePassword()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const { accessToken } = await user.getAuthJson();",
        "lang": "typescript",
      },
    ],
    "content": "This will return the authentication tokens of the user. This is normally then used for authentication to an external server. See more details here.
Parameters:


No parameters.
Returns:


Promise<{ accessToken: string | null }>
Example:",
    "domain": "test.com",
    "hash": "#getauthjson",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "getauthjson",
        "title": "getAuthJson()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-getauthjson",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "getAuthJson()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await user.signOut();",
        "lang": "typescript",
      },
    ],
    "content": "This will sign out the user and clear the session.
Parameters:


No parameters.
Returns:


Promise<void>
Example:",
    "domain": "test.com",
    "hash": "#signout",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "signout",
        "title": "signOut()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-signout",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "signOut()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await user.delete();",
        "lang": "typescript",
      },
    ],
    "content": "Delete the user. Use it with caution as it is irreversible. Note that this only works if the "allow client side user deletion" option is enabled in the Stack dashboard.
Parameters:


No parameters.
Returns:


Promise<void>
Example:",
    "domain": "test.com",
    "hash": "#delete",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentuser",
        "title": "CurrentUser",
      },
      "h3": {
        "id": "delete",
        "title": "delete()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-delete",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "delete()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "ServerUser is only available on the server side. Some of the methods on the StackServerApp return ServerUser objects, for example stackServerApp.listUsers() or stackServerApp.getUser('user_id_123').
The ServerUser object contains everything in the CurrentUser object, except for the following methods:
signOut()

getAuthJson()


It also has some additional properties and methods (some of the methods have the same name but more capabilities):",
    "domain": "test.com",
    "hash": "#serveruser",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "serveruser",
        "title": "ServerUser",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-serveruser",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "ServerUser",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "The last active at date of the user.


The server metadata of the user. Only readable and writable on the server side.",
    "domain": "test.com",
    "hash": "#properties-1",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "serveruser",
        "title": "ServerUser",
      },
      "h3": {
        "id": "properties-1",
        "title": "Properties",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-properties-1",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Properties",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await serverUser.update({
  displayName: "New Display Name",
  password: "newPassword",
  serverMetadata: {
    secret: "shh",
  },
});",
        "lang": "typescript",
      },
    ],
    "content": "Update the user information.
This is similar to the CurrentUser.update() method, but is strictly more powerful (like update password, update server metadata, etc.)
Parameters:








The new display name for the user.


Custom metadata visible to the client.


The ID of the team to set as selected, or null to clear selection.


The URL of the user's new profile image (base64 image allowed, crop and compress before passing it in), or null to remove.


Metadata that can be read on the client side but can only be modified on the server side.


Metadata that can be read and modified on the server side.


The new password for the user.
Returns:


Promise<void>
Example:",
    "domain": "test.com",
    "hash": "#update-1",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "serveruser",
        "title": "ServerUser",
      },
      "h3": {
        "id": "update-1",
        "title": "update()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-update-1",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "update()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const contactChannels = await serverUser.listContactChannels();",
        "lang": "typescript",
      },
    ],
    "content": "List all the contact channels of the user.
This is similar to CurrentUser.listContactChannels() but it returns a list of ServerContactChannel objects instead of ContactChannel objects.
Parameters:


No parameters.
Returns:


Promise<ServerContactChannel[]>: The list of contact channels.
Example:",
    "domain": "test.com",
    "hash": "#listcontactchannels-1",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "serveruser",
        "title": "ServerUser",
      },
      "h3": {
        "id": "listcontactchannels-1",
        "title": "listContactChannels()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-listcontactchannels-1",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "listContactChannels()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const contactChannels = serverUser.useContactChannels();",
        "lang": "typescript",
      },
    ],
    "content": "List all the contact channels of the user.
This is the same as listContactChannels but it is a React hook. This is also similar to CurrentUser.useContactChannels() but it returns a list of ServerContactChannel objects instead of ContactChannel objects.
Parameters:


No parameters.
Returns:


ServerContactChannel[]: The list of contact channels.
Example:",
    "domain": "test.com",
    "hash": "#usecontactchannels-1",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "serveruser",
        "title": "ServerUser",
      },
      "h3": {
        "id": "usecontactchannels-1",
        "title": "useContactChannels()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-usecontactchannels-1",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "useContactChannels()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await serverUser.grantPermission(team, "read_secret_info");",
        "lang": "typescript",
      },
    ],
    "content": "Grant a permission to a user for a team.
This action will still succeed if the permission is already granted. It will throw an error if the permission is not defined in the Stack dashboard.
Parameters:




The team to grant the permission to.


The ID of the permission to grant.
Returns:


Promise<void>
Example:",
    "domain": "test.com",
    "hash": "#grantpermission",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "serveruser",
        "title": "ServerUser",
      },
      "h3": {
        "id": "grantpermission",
        "title": "grantPermission()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-grantpermission",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "grantPermission()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await serverUser.revokePermission(team, "read_secret_info");",
        "lang": "typescript",
      },
    ],
    "content": "Revoke a permission from a user for a team.
This action will still succeed if the permission is not granted in the first place. It will throw an error if the permission is not defined in the Stack dashboard.
Parameters:




The team to revoke the permission from.


The ID of the permission to revoke.
Returns:


Promise<void>
Example:",
    "domain": "test.com",
    "hash": "#revokepermission",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "serveruser",
        "title": "ServerUser",
      },
      "h3": {
        "id": "revokepermission",
        "title": "revokePermission()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-revokepermission",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "revokePermission()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "The CurrentServerUser has the same properties and methods from ServerUser and CurrentUser combined (for the overloaded methods like update, the ServerUser methods take precedence).
To get a CurrentServerUser object, you can use the stackServerApp.getUser() method. Note that this can only be used on the server side.",
    "domain": "test.com",
    "hash": "#currentserveruser",
    "hierarchy": {
      "h0": {
        "title": "User",
      },
      "h2": {
        "id": "currentserveruser",
        "title": "CurrentServerUser",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user-currentserveruser",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "CurrentServerUser",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "This is a detailed reference for the StackApp object. Here is a more high-level overview.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "StackApp",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "Stack offers two types of app objects: StackClientApp and StackServerApp.
StackClientApp:
Designed for client-side applications

Provides functionality like signInWithOAuth, useUser, useProject, etc.

Obtain it by calling useStackApp() in a Client Component



StackServerApp:
extends StackClientApp

Has additional capabilities like being able to listing all the users in the project

Access it by importing the object from the file where you created it (import { stackServerApp } from '@/stack')

While StackServerApp includes useXYZ hooks, they are generally not usable in server-side code due to its non-reactive nature. These hooks are primarily designed for client-side use where reactivity is supported.




Choose the appropriate type based on your application's needs and environment.",
    "domain": "test.com",
    "hash": "#different-types-of-stackapp-objects",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "different-types-of-stackapp-objects",
        "title": "Different types of StackApp objects",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-different-types-of-stackapp-objects",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Different types of StackApp objects",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "You can get a StackClientApp instance by calling useStackApp() in a Client Component.",
    "domain": "test.com",
    "hash": "#stackclientapp",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-stackclientapp",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "StackClientApp",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "In most cases, we don't create a StackClientApp directly. Instead, we typically:
Create a StackServerApp instance, pass it into the StackProvider component

Use the useStackApp() hook to obtain a StackClientApp from it


Check out the manual setup guide for more details. For details on how to initialize a StackServerApp, refer to the StackServerApp section below.",
    "domain": "test.com",
    "hash": "#initialization",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp",
      },
      "h3": {
        "id": "initialization",
        "title": "Initialization",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-initialization",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Initialization",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "The ID of the project that the app is associated with.


The URLs that Stack uses to route and redirect.




The URL of the home page.


The URL of the sign-in page.


The URL that the user will be redirected to after successful signing in.


The URL of the sign-up page.


The URL that the user will be redirected to after successful signing up.


The URL that the user will be redirected to after successful signing out.


The URL of the email verification page.


The URL of the password reset page.


The URL of the forgot password page.


The URL of the account settings page.


The URL of the handler root.",
    "domain": "test.com",
    "hash": "#properties",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp",
      },
      "h3": {
        "id": "properties",
        "title": "Properties",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-properties",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Properties",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const user = await stackClientApp.getUser({ or: "redirect" });
console.log(user); // always defined

const user = await stackClientApp.getUser();
console.log(user); // null if not signed in",
        "lang": "typescript",
      },
    ],
    "content": "Get the current user.
Parameters:








What to do if the user is not signed in. Can be:
"redirect": Redirects the user to the signIn URL.

"throw": Throws an error.


Returns:


If or is not provided, returns Promise<CurrentUser | null>.

If or is "redirect" or "throw", always returns Promise<CurrentUser>.


Example:",
    "domain": "test.com",
    "hash": "#getuser",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp",
      },
      "h3": {
        "id": "getuser",
        "title": "getUser()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-getuser",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "getUser()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const user = useUser({ or: "redirect" });
console.log(user); // always defined

const user = useUser();
console.log(user); // null if not signed in",
        "lang": "typescript",
      },
    ],
    "content": "Get the current user.
This is the same as getUser() but it is a React hook. The useUser hook imported from the package is an alias for this function.
Parameters:








What to do if the user is not signed in. Can be:
"redirect": Redirects the user to the signIn URL.

"throw": Throws an error.


Returns:


If or is not provided, returns CurrentUser | null.

If or is "redirect" or "throw", always returns CurrentUser.


Example:",
    "domain": "test.com",
    "hash": "#useuser",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp",
      },
      "h3": {
        "id": "useuser",
        "title": "useUser()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-useuser",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "useUser()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await stackClientApp.signInWithOAuth("google");",
        "lang": "typescript",
      },
    ],
    "content": "Initiates the OAuth sign-in process with the specified provider. This method:
Redirects the user to the OAuth provider's sign-in page.

After successful authentication, redirects the user back to your application.

The final redirect destination is determined as follows:
If an after_auth_return_to query parameter was provided when calling this function, it uses that URL.

Otherwise, it uses the afterSignIn URL configured in the app settings.




Parameters:




The type of the OAuth provider to sign in with.
Returns:


Promise<void>: A promise that resolves when the redirect is complete.
Example:",
    "domain": "test.com",
    "hash": "#signinwithoauth",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp",
      },
      "h3": {
        "id": "signinwithoauth",
        "title": "signInWithOAuth()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-signinwithoauth",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "signInWithOAuth()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const result = await stackClientApp.signInWithCredential({
  email: "test@example.com",
  password: "password",
});

if (result.status === "error") {
  console.error("Sign in failed", result.error.message);
}",
        "lang": "typescript",
      },
    ],
    "content": "Sign in using email and password credentials. The behavior is as follows:
If sign-in is successful:
By default, redirects the user to the afterSignIn URL.

If after_auth_return_to is provided in the query parameters, redirects to that URL instead.

If noRedirect is set to true, it will not redirect and instead return a success Result object.



If sign-in fails:
No redirection occurs.

Returns a Result object containing error information.




Parameters:








The email of the user to sign in with.


The password of the user to sign in with.


Whether to not redirect the user after sign-in. Defaults to false.
Returns:


Promise<Result<undefined, KnownErrors["EmailPasswordMismatch"]>>: A promise that resolves to a Result object.
Example:",
    "domain": "test.com",
    "hash": "#signinwithcredential",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp",
      },
      "h3": {
        "id": "signinwithcredential",
        "title": "signInWithCredential()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-signinwithcredential",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "signInWithCredential()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const result = await stackClientApp.signUpWithCredential({
  email: "test@example.com",
  password: "password",
});

if (result.status === "error") {
  console.error("Sign up failed", result.error.message);
}",
        "lang": "typescript",
      },
    ],
    "content": "Sign up using email and password credentials. The behavior is as follows:
If sign-up is successful:
By default, redirects the user to the afterSignUp URL.

If after_auth_return_to is provided in the query parameters, redirects to that URL instead.

If noRedirect is set to true, it will not redirect and instead return a success Result object.



If sign-up fails:
No redirection occurs.

Returns a Result object containing error information.




Parameters:








The email of the user to sign up with.


The password of the user to sign up with.


Whether to not redirect the user after sign-up. Defaults to false.
Returns:


Promise<Result<undefined, KnownErrors["UserEmailAlreadyExists"] | KnownErrors["PasswordRequirementsNotMet"]>>: A promise that resolves to a Result object.
Example:",
    "domain": "test.com",
    "hash": "#signupwithcredential",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp",
      },
      "h3": {
        "id": "signupwithcredential",
        "title": "signUpWithCredential()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-signupwithcredential",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "signUpWithCredential()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const result = await stackClientApp.sendForgotPasswordEmail("test@example.com");

if (result.status === "success") {
  console.log("Forgot password email sent");
} else {
  console.error("Failed to send forgot password email", result.error.message);
}",
        "lang": "typescript",
      },
    ],
    "content": "Send a forgot password email to an email address.
Parameters:




The email of the user to send the forgot password email to.
Returns:


Promise<Result<undefined, KnownErrors["UserNotFound"]>>: A promise that resolves to a Result object.
Example:",
    "domain": "test.com",
    "hash": "#sendforgotpasswordemail",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp",
      },
      "h3": {
        "id": "sendforgotpasswordemail",
        "title": "sendForgotPasswordEmail()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-sendforgotpasswordemail",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "sendForgotPasswordEmail()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const result = await stackClientApp.sendMagicLinkEmail("test@example.com");",
        "lang": "typescript",
      },
    ],
    "content": "Send a magic link/OTP sign-in email to an email address.
Parameters:




The email of the user to send the magic link email to.
Returns:


Promise<Result<{ nonce: string }, KnownErrors["RedirectUrlNotWhitelisted"]>>: A promise that resolves to a Result object.
Example:",
    "domain": "test.com",
    "hash": "#sendmagiclinkemail",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp",
      },
      "h3": {
        "id": "sendmagiclinkemail",
        "title": "sendMagicLinkEmail()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-sendmagiclinkemail",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "sendMagicLinkEmail()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const project = await stackClientApp.getProject();",
        "lang": "typescript",
      },
    ],
    "content": "Get the current project.
Parameters:


No parameters.
Returns:


Promise<Project>: The current project.
Example:",
    "domain": "test.com",
    "hash": "#getproject",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp",
      },
      "h3": {
        "id": "getproject",
        "title": "getProject()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-getproject",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "getProject()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const project = useProject();",
        "lang": "typescript",
      },
    ],
    "content": "Get the current project.
This is the same as getProject() but it is a React hook. The useProject hook imported from the package is an alias for this function.
Parameters:


No parameters.
Returns:


Project: The current project.
Example:",
    "domain": "test.com",
    "hash": "#useproject",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackclientapp",
        "title": "StackClientApp",
      },
      "h3": {
        "id": "useproject",
        "title": "useProject()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-useproject",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "useProject()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "StackServerApp extends StackClientApp, so it has all the same capabilities, plus some extra ones listed below.
Note that although the useXYZ hooks are available on StackServerApp, they are generally not usable in server-side code due to its non-reactive nature. These hooks are primarily designed for client-side use where reactivity is supported.",
    "domain": "test.com",
    "hash": "#stackserverapp",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-stackserverapp",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "StackServerApp",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const stackServerApp = new StackServerApp({
  tokenStore: "nextjs-cookie",
  oauthScopesOnSignIn: {
    google: ["extra-scope"],
  },
  urls: {
    signIn: '/my-custom-sign-in-page',
  },
});",
        "lang": "typescript",
      },
    ],
    "content": "Parameters:








Where to store the auth tokens. Currently only "nextjs-cookie" is supported.


Extra OAuth scopes to request when signing in. It is an object of format { [provider: string]: string[] }, where the key is the provider type (e.g. "google", "apple", etc.) and the value is an array of scopes to request. Checkout the OAuth page for more details.


The base URL of the Stack server. By default it is read from the NEXT_PUBLIC_STACK_URL environment variable if it exists, or use https://api.stack-auth.com if it doesn't.


The ID of the project to use. By default it is read from the NEXT_PUBLIC_STACK_PROJECT_ID environment variable.


The publishable client key to use. By default it is read from the NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY environment variable.


The secret server key to use. By default it is read from the STACK_SECRET_SERVER_KEY environment variable.


Modify the URLs that Stack uses to route and redirect.




The URL of the home page.


The URL of the sign-in page.


The URL that the user will be redirected to after successful signing in.


The URL of the sign-up page.


The URL that the user will be redirected to after successful signing up.


The URL that the user will be redirected to after successful signing out.


The URL of the email verification page.


The URL of the password reset page.


The URL of the forgot password page.


The URL of the account settings page.


The URL of the handler root. When changing this, you should also change the location of the StackHandler component and the domain handler path on the dashboard. Currently putting the handler at the root / is not supported.
Example:",
    "domain": "test.com",
    "hash": "#initialization-1",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp",
      },
      "h3": {
        "id": "initialization-1",
        "title": "Initialization",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-initialization-1",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Initialization",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "Same as StackClientApp.",
    "domain": "test.com",
    "hash": "#properties-1",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp",
      },
      "h3": {
        "id": "properties-1",
        "title": "Properties",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-properties-1",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Properties",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const user = await stackServerApp.getUser({ or: "redirect" });
console.log(user); // always defined

const user = await stackServerApp.getUser();
console.log(user); // null if not signed in",
        "lang": "typescript",
      },
      {
        "code": "const user = await stackServerApp.getUser("user_id_123");
console.log(user); // null if not found",
        "lang": "typescript",
      },
    ],
    "content": "Get a user. There are two overloads:
Overload 1 (get current server user):
Parameters:








What to do if the user is not signed in. Can be:
"redirect": Redirects the user to the signIn URL.

"throw": Throws an error.


Returns:


If or is not provided, returns Promise<ServerUser | null>.

If or is "redirect" or "throw", always returns Promise<ServerUser>.


Example:
Overload 2 (get user by ID):
Parameters:




The ID of the user to get.
Returns:


Promise<ServerUser | null>: The user, or null if not found.
Example:",
    "domain": "test.com",
    "hash": "#getuser-1",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp",
      },
      "h3": {
        "id": "getuser-1",
        "title": "getUser()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-getuser-1",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "getUser()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const users = await stackServerApp.listUsers({ limit: 20 });
console.log(users);

if (users.nextCursor) {
  const nextPageUsers = await stackServerApp.listUsers({ cursor: users.nextCursor, limit: 20 });
  console.log(nextPageUsers);
}",
        "lang": "typescript",
      },
    ],
    "content": "Lists users.
If limit is not provided, it will return all users by making multiple requests to the server (this might be slow for a large number of users, so it is recommended to always use pagination).
Parameters:








The cursor to start the result set from.


The maximum number of items to return. If not provided, it will return all users.


The field to sort the results by. Currently only signedUpAt is supported.


Whether to sort the results in descending order.


A query to filter the results by. This is a free-text search on the user's display name and emails.
Returns:


Promise<ServerUser[] & { nextCursor: string | null }>: The list of users. If nextCursor is not null, there is a next page.
Example:",
    "domain": "test.com",
    "hash": "#listusers",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp",
      },
      "h3": {
        "id": "listusers",
        "title": "listUsers()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-listusers",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "listUsers()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const [cursor, setCursor] = useState<string | null>(null);
const users = useUsers({ cursor: nextCursor, limit: 20 });

return <div>
  {users.map((user) => <div key={user.id}>{user.displayName}</div>)}
  {users.nextCursor && <button onClick={() => setCursor(users.nextCursor)}>Next</button>}
</div>",
        "lang": "typescript",
      },
    ],
    "content": "Get the list of users.
If limit is not provided, it will return all users by making multiple requests to the server (this might be slow for a large number of users, so it is recommended to always use pagination).
This is the same as listUsers() but it is a React hook.
Parameters:








The cursor to start the result set from.


The maximum number of items to return. If not provided, it will return all users.


The field to sort the results by. Currently only signedUpAt is supported.


Whether to sort the results in descending order.


A query to filter the results by. This is a free-text search on the user's display name and emails.
Returns:


ServerUser[] & { nextCursor: string | null }: The list of users. If nextCursor is not null, there is a next page.
Example:",
    "domain": "test.com",
    "hash": "#useusers",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp",
      },
      "h3": {
        "id": "useusers",
        "title": "useUsers()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-useusers",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "useUsers()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "// Create a user with password authentication
const user = await stackServerApp.createUser({
  primaryEmail: "test@example.com",
  primaryEmailAuthEnabled: true,
  password: "password123",
});

// Create a user with OTP authentication
const user = await stackServerApp.createUser({
  primaryEmail: "test@example.com",
  primaryEmailVerified: true,
  primaryEmailAuthEnabled: true,
  otpAuthEnabled: true,
});",
        "lang": "typescript",
      },
    ],
    "content": "Create a new user.
Parameters:








The primary email of the user to create.


Whether the primary email is enabled. When using password or otp auth, this must be set to true, otherwise the user will not be able to sign in.


The password for the new user. An error will be thrown if a password is provided
but password authentication is not enabled for the project in the dashboard.


Enables OTP (One-Time Password) or magic link sign-in using the primary email.
Note: Only verified emails can be used for OTP sign-in. An error will be thrown
if set to true when OTP authentication is not enabled in the dashboard.


The display name of the user to create.


Whether the primary email is verified.
Returns:


Promise<ServerUser>: The created user.
Example:",
    "domain": "test.com",
    "hash": "#createuser",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp",
      },
      "h3": {
        "id": "createuser",
        "title": "createUser()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-createuser",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "createUser()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const team = await stackServerApp.getTeam("team_id_123");
console.log(team); // null if not found",
        "lang": "typescript",
      },
    ],
    "content": "Get a team by ID.
Parameters:




The ID of the team to get.
Returns:


Promise<ServerTeam | null>: The team, or null if not found.
Example:",
    "domain": "test.com",
    "hash": "#getteam",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp",
      },
      "h3": {
        "id": "getteam",
        "title": "getTeam()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-getteam",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "getTeam()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const teams = await stackServerApp.listTeams();
console.log(teams);",
        "lang": "typescript",
      },
    ],
    "content": "List all teams.
Returns:


Promise<ServerTeam[]>: The list of teams.
Example:",
    "domain": "test.com",
    "hash": "#listteams",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp",
      },
      "h3": {
        "id": "listteams",
        "title": "listTeams()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-listteams",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "listTeams()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const team = await stackServerApp.createTeam({
  displayName: "New Team",
  profileImageUrl: "https://example.com/profile.jpg",
});",
        "lang": "typescript",
      },
    ],
    "content": "create a team without a user.
This is similar to user.createTeam(), except it does not add the user to the team.
Parameters:








The display name for the team.


The URL of the team's profile image (base64 image allowed, crop and compress before passing it in), or null to remove.
Returns:


Promise<ServerTeam>: The created team.
Example:",
    "domain": "test.com",
    "hash": "#createteam",
    "hierarchy": {
      "h0": {
        "title": "StackApp",
      },
      "h2": {
        "id": "stackserverapp",
        "title": "StackServerApp",
      },
      "h3": {
        "id": "createteam",
        "title": "createTeam()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app-createteam",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "createTeam()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "This is a detailed reference for the Team object. If you're looking for a more high-level overview, please refer to our guide on teams here.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Team",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "Stack Auth provides two types of Team objects:
Team
Represents a team on the client side

Provides functions like update and inviteUser

Requires appropriate user permissions for function usage

Obtained by calling user.useTeam('team_id_123') or user.useTeams()



ServerTeam
Represents a team on the server side

Includes additional capabilities such as delete and addUser

No user permissions required for function usage

Obtained by calling stackServerApp.getTeam('team_id_123') or stackServerApp.listTeams()",
    "domain": "test.com",
    "hash": "#different-types-of-team-objects",
    "hierarchy": {
      "h0": {
        "title": "Team",
      },
      "h3": {
        "id": "different-types-of-team-objects",
        "title": "Different types of Team objects",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-different-types-of-team-objects",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Different types of Team objects",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "You can call user.useTeam('team_id_123') or user.useTeams() to get the Team object.",
    "domain": "test.com",
    "hash": "#team",
    "hierarchy": {
      "h0": {
        "title": "Team",
      },
      "h2": {
        "id": "team",
        "title": "Team",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-team",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Team",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "The team ID. This is the unique identifier of the team.


The display name of the team.


The profile image URL of the team.


The client metadata of the team.


The client read-only metadata of the team.",
    "domain": "test.com",
    "hash": "#properties",
    "hierarchy": {
      "h0": {
        "title": "Team",
      },
      "h2": {
        "id": "team",
        "title": "Team",
      },
      "h3": {
        "id": "properties",
        "title": "Properties",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-properties",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Properties",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await team.update({
  displayName: 'New Team Name',
  profileImageUrl: 'https://example.com/profile.png',
  clientMetadata: {
    address: '123 Main St, Anytown, USA',
  },
});",
        "lang": "tsx",
      },
    ],
    "content": "Update the team information.
Note that this operation requires the current user to have the $update_team permission. If the user lacks this permission, an error will be thrown.
Parameters








The display name of the team.


The profile image URL of the team.


The client metadata of the team.
Returns


Promise<void>
Example",
    "domain": "test.com",
    "hash": "#update",
    "hierarchy": {
      "h0": {
        "title": "Team",
      },
      "h2": {
        "id": "team",
        "title": "Team",
      },
      "h3": {
        "id": "update",
        "title": "update()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-update",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "update()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await team.inviteUser({
  email: 'user@example.com',
});",
        "lang": "tsx",
      },
    ],
    "content": "Send an invitation email to a user to join the team.
Note that this operation requires the current user to have the $invite_members permission. If the user lacks this permission, an error will be thrown.
An invitation email containing a magic link will be sent to the specified user. If the user has an existing account, they will be automatically added to the team upon clicking the link. For users without an account, the link will guide them through the sign-up process before adding them to the team.
Parameters








The email of the user to invite.
Returns


Promise<void>
Example",
    "domain": "test.com",
    "hash": "#inviteuser",
    "hierarchy": {
      "h0": {
        "title": "Team",
      },
      "h2": {
        "id": "team",
        "title": "Team",
      },
      "h3": {
        "id": "inviteuser",
        "title": "inviteUser()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-inviteuser",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "inviteUser()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const users = await team.listUsers();
users.forEach(user => {
  console.log(user.id, user.teamProfile.displayName);
});",
        "lang": "tsx",
      },
    ],
    "content": "Get a list of users in the team.
Note that this operation requires the current user to have the $read_members permission. If the user lacks this permission, an error will be thrown.
Parameters


No parameters.
Returns


Promise<TeamUser[]>
Example",
    "domain": "test.com",
    "hash": "#listusers",
    "hierarchy": {
      "h0": {
        "title": "Team",
      },
      "h2": {
        "id": "team",
        "title": "Team",
      },
      "h3": {
        "id": "listusers",
        "title": "listUsers()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-listusers",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "listUsers()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const users = team.useUsers();
users.forEach(user => {
  console.log(user.id, user.teamProfile.displayName);
});",
        "lang": "tsx",
      },
    ],
    "content": "Get a list of users in the team.
Note that this operation requires the current user to have the $read_members permission. If the user lacks this permission, an error will be thrown.
This is the same as listUsers but it is a React hook.
Parameters


No parameters.
Returns


TeamUser[]
Example",
    "domain": "test.com",
    "hash": "#useusers",
    "hierarchy": {
      "h0": {
        "title": "Team",
      },
      "h2": {
        "id": "team",
        "title": "Team",
      },
      "h3": {
        "id": "useusers",
        "title": "useUsers()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-useusers",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "useUsers()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "You can call stackServerApp.getTeam('team_id_123') or stackServerApp.listTeams() to get the ServerTeam object.
ServerTeam extends the Team object, providing additional functions and properties as detailed below. It's important to note that while the Team object's functions may require specific user permissions, the corresponding functions in ServerTeam can be executed without these permission checks. This allows for more flexible and unrestricted team management on the server side.",
    "domain": "test.com",
    "hash": "#serverteam",
    "hierarchy": {
      "h0": {
        "title": "Team",
      },
      "h2": {
        "id": "serverteam",
        "title": "ServerTeam",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-serverteam",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "ServerTeam",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "The date and time when the team was created.


The server metadata of the team.",
    "domain": "test.com",
    "hash": "#properties-1",
    "hierarchy": {
      "h0": {
        "title": "Team",
      },
      "h2": {
        "id": "serverteam",
        "title": "ServerTeam",
      },
      "h3": {
        "id": "properties-1",
        "title": "Properties",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-properties-1",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Properties",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const users = await team.listUsers();
users.forEach(user => {
  console.log(user.id, user.teamProfile.displayName);
});",
        "lang": "tsx",
      },
    ],
    "content": "Get a list of users in the team.
This is similar to the listUsers method on the Team object, but it returns ServerTeamUser objects instead of TeamUser objects and does not require any permissions.
Parameters


No parameters.
Returns


Promise<ServerTeamUser[]>
Example",
    "domain": "test.com",
    "hash": "#listusers-1",
    "hierarchy": {
      "h0": {
        "title": "Team",
      },
      "h2": {
        "id": "serverteam",
        "title": "ServerTeam",
      },
      "h3": {
        "id": "listusers-1",
        "title": "listUsers()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-listusers-1",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "listUsers()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "const users = team.useUsers();
users.forEach(user => {
  console.log(user.id, user.teamProfile.displayName);
});",
        "lang": "tsx",
      },
    ],
    "content": "Get a list of users in the team.
This is similar to the useUsers method on the Team object, but it returns ServerTeamUser objects instead of TeamUser objects and does not require any permissions. This is the same as listUsers but it is a React hook.
Parameters


No parameters.
Returns


ServerTeamUser[]
Example",
    "domain": "test.com",
    "hash": "#useusers-1",
    "hierarchy": {
      "h0": {
        "title": "Team",
      },
      "h2": {
        "id": "serverteam",
        "title": "ServerTeam",
      },
      "h3": {
        "id": "useusers-1",
        "title": "useUsers()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-useusers-1",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "useUsers()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await team.addUser('user_id_123');",
        "lang": "tsx",
      },
    ],
    "content": "Add a user to the team directly without sending an invitation email.
Parameters




The ID of the user to add.
Returns


Promise<void>
Example",
    "domain": "test.com",
    "hash": "#adduser",
    "hierarchy": {
      "h0": {
        "title": "Team",
      },
      "h2": {
        "id": "serverteam",
        "title": "ServerTeam",
      },
      "h3": {
        "id": "adduser",
        "title": "addUser()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-adduser",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "addUser()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await team.removeUser('user_id_123');",
        "lang": "tsx",
      },
    ],
    "content": "Remove a user from the team.
Parameters




The ID of the user to remove.
Returns


Promise<void>
Example",
    "domain": "test.com",
    "hash": "#removeuser",
    "hierarchy": {
      "h0": {
        "title": "Team",
      },
      "h2": {
        "id": "serverteam",
        "title": "ServerTeam",
      },
      "h3": {
        "id": "removeuser",
        "title": "removeUser()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-removeuser",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "removeUser()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await team.delete();",
        "lang": "tsx",
      },
    ],
    "content": "Delete the team.
Parameters


No parameters.
Returns


Promise<void>
Example",
    "domain": "test.com",
    "hash": "#delete",
    "hierarchy": {
      "h0": {
        "title": "Team",
      },
      "h2": {
        "id": "serverteam",
        "title": "ServerTeam",
      },
      "h3": {
        "id": "delete",
        "title": "delete()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-delete",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "delete()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "TeamUser is represents a user in the context of a team. There are two types of TeamUser
TeamUser
This is used on the client side.

It contains minimal information about the user, only the user's ID.

It contains a teamProfile object, which is the user's profile for the team.

You can obtain it by calling team.useUsers() or team.listUsers() on a Team object.



ServerTeamUser
This is used on the server side.

Currently it only contains the user's ID, but in the future it will extend ServerUser.

You can obtain it by calling serverTeam.listUsers() on a ServerTeam object.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-user",
    "org_id": "test",
    "pathname": "/sdk/team-user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "TeamUser",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "The ID of the user.


The team profile of the user.",
    "domain": "test.com",
    "hash": "#properties",
    "hierarchy": {
      "h0": {
        "title": "TeamUser",
      },
      "h2": {
        "id": "teamuser",
        "title": "TeamUser",
      },
      "h3": {
        "id": "properties",
        "title": "Properties",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-user-properties",
    "org_id": "test",
    "pathname": "/sdk/team-user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Properties",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "The ID of the user.


The team profile of the user.",
    "domain": "test.com",
    "hash": "#properties-1",
    "hierarchy": {
      "h0": {
        "title": "TeamUser",
      },
      "h2": {
        "id": "serverteamuser",
        "title": "ServerTeamUser",
      },
      "h3": {
        "id": "properties-1",
        "title": "Properties",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-user-properties-1",
    "org_id": "test",
    "pathname": "/sdk/team-user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Properties",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "TeamProfile is the profile of a user in the context of a team. There are two types of TeamProfile
TeamProfile
This is used on the client side.

It contains the user's profile information for the team.

You can obtain it by calling teamUser.teamProfile on a TeamUser object.



ServerTeamProfile
This is used on the server side.

Currently it contains the same information as TeamProfile, but in the future it might contain more information.

You can obtain it by calling serverTeamUser.teamProfile on a ServerTeamUser object.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-profile",
    "org_id": "test",
    "pathname": "/sdk/team-profile",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "TeamProfile",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "The display name of the user.


The profile image URL of the user.",
    "domain": "test.com",
    "hash": "#properties",
    "hierarchy": {
      "h0": {
        "title": "TeamProfile",
      },
      "h2": {
        "id": "teamprofile",
        "title": "TeamProfile",
      },
      "h3": {
        "id": "properties",
        "title": "Properties",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-profile-properties",
    "org_id": "test",
    "pathname": "/sdk/team-profile",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Properties",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "Same as TeamProfile.",
    "domain": "test.com",
    "hash": "#serverteamprofile",
    "hierarchy": {
      "h0": {
        "title": "TeamProfile",
      },
      "h2": {
        "id": "serverteamprofile",
        "title": "ServerTeamProfile",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-profile-serverteamprofile",
    "org_id": "test",
    "pathname": "/sdk/team-profile",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "ServerTeamProfile",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "TeamPermission represents that a user has a certain permission for a team. It is currently very simple and only contains an id.
It can be obtained by calling functions like user.getPermission() or user.listPermissions().",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-permission",
    "org_id": "test",
    "pathname": "/sdk/team-permission",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "TeamPermission",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "The id of the permission.",
    "domain": "test.com",
    "hash": "#properties",
    "hierarchy": {
      "h0": {
        "title": "TeamPermission",
      },
      "h3": {
        "id": "properties",
        "title": "Properties",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-permission-properties",
    "org_id": "test",
    "pathname": "/sdk/team-permission",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Properties",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "The Project object contains the information and configuration of a project like the name, description, enabled auth methods, etc.
You can obtain a Project object by calling stackApp.getProject() or useProject().",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.project",
    "org_id": "test",
    "pathname": "/sdk/project",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Project",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "The id of the project.


The display name of the project.






Whether sign up is enabled for the project.


Whether credential auth is enabled for the project.


Whether magic link auth is enabled for the project.


Whether client-side team creation is enabled for the project.


Whether client-side user deletion is enabled for the project.",
    "domain": "test.com",
    "hash": "#properties",
    "hierarchy": {
      "h0": {
        "title": "Project",
      },
      "h2": {
        "id": "project",
        "title": "Project",
      },
      "h3": {
        "id": "properties",
        "title": "Properties",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.project-properties",
    "org_id": "test",
    "pathname": "/sdk/project",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Properties",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "ContactChannel represents a user's contact information, such as an email address. In the future, it will support additional contact types like phone numbers. Contact channels can optionally be used for authentication.
Stack provides two types of contact channels:
ContactChannel
Used on the client side

Contains basic information like the contact value (e.g. email address) and type

You can obtain it by calling user.listContactChannels() or user.useContactChannels()



ServerContactChannel
Used on the server side

Extends ContactChannel with additional properties:
Verification status

Whether it's the user's primary contact channel



You can obtain it by calling serverUser.listContactChannels() or serverUser.useContactChannels()",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel",
    "org_id": "test",
    "pathname": "/sdk/contact-channel",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "ContactChannel",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "The id of the contact channel.


The value of the contact channel. If type is "email", this is an email address.


The type of the contact channel. Currently always "email".


Whether the contact channel is the user's primary contact channel. If an email is set to primary, it will be the value on the user.primaryEmail field.


Whether the contact channel is verified.


Whether the contact channel is used for authentication. If set to true, the user can use this contact channel together with OTP or password to sign in.",
    "domain": "test.com",
    "hash": "#properties",
    "hierarchy": {
      "h0": {
        "title": "ContactChannel",
      },
      "h2": {
        "id": "contactchannel",
        "title": "ContactChannel",
      },
      "h3": {
        "id": "properties",
        "title": "Properties",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel-properties",
    "org_id": "test",
    "pathname": "/sdk/contact-channel",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Properties",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await contactChannel.sendVerificationEmail();",
        "lang": "typescript",
      },
    ],
    "content": "Sends a verification email to this contact channel. Once the user clicks the verification link in the email, the contact channel will be marked as verified.
This method will throw an error if the contact channel has already been verified.
Parameters:


None
Returns:


Promise<void>
Example:",
    "domain": "test.com",
    "hash": "#sendverificationemail",
    "hierarchy": {
      "h0": {
        "title": "ContactChannel",
      },
      "h2": {
        "id": "contactchannel",
        "title": "ContactChannel",
      },
      "h3": {
        "id": "sendverificationemail",
        "title": "sendVerificationEmail()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel-sendverificationemail",
    "org_id": "test",
    "pathname": "/sdk/contact-channel",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "sendVerificationEmail()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await contactChannel.update({ value: "new-email@example.com", usedForAuth: true });",
        "lang": "typescript",
      },
    ],
    "content": "Update the contact channel.
After updating the value, the contact channel will be marked as unverified.
Parameters:








The new value of the contact channel.


The new type of the contact channel. Currently always "email".


Whether the contact channel is used for authentication.
Returns:


Promise<void>
Example:",
    "domain": "test.com",
    "hash": "#update",
    "hierarchy": {
      "h0": {
        "title": "ContactChannel",
      },
      "h2": {
        "id": "contactchannel",
        "title": "ContactChannel",
      },
      "h3": {
        "id": "update",
        "title": "update()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel-update",
    "org_id": "test",
    "pathname": "/sdk/contact-channel",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "update()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await contactChannel.delete();",
        "lang": "typescript",
      },
    ],
    "content": "Delete the contact channel.
Parameters:


No parameters
Returns:


Promise<void>
Example:",
    "domain": "test.com",
    "hash": "#delete",
    "hierarchy": {
      "h0": {
        "title": "ContactChannel",
      },
      "h2": {
        "id": "contactchannel",
        "title": "ContactChannel",
      },
      "h3": {
        "id": "delete",
        "title": "delete()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel-delete",
    "org_id": "test",
    "pathname": "/sdk/contact-channel",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "delete()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "content": "It extends ContactChannel with additional methods listed below.",
    "domain": "test.com",
    "hash": "#servercontactchannel",
    "hierarchy": {
      "h0": {
        "title": "ContactChannel",
      },
      "h2": {
        "id": "servercontactchannel",
        "title": "ServerContactChannel",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel-servercontactchannel",
    "org_id": "test",
    "pathname": "/sdk/contact-channel",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "ServerContactChannel",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "code_snippets": [
      {
        "code": "await serverContactChannel.update({ value: "new-email@example.com", usedForAuth: true, isVerified: true });",
        "lang": "typescript",
      },
    ],
    "content": "Update the contact channel.
This is similar to ContactChannel.update(), but it also allows you to set the isVerified property.
Parameters:








The new value of the contact channel.


The new type of the contact channel. Currently always "email".


Whether the contact channel is used for authentication.


Whether the contact channel is verified.
Returns:


Promise<void>
Example:",
    "domain": "test.com",
    "hash": "#update-1",
    "hierarchy": {
      "h0": {
        "title": "ContactChannel",
      },
      "h2": {
        "id": "servercontactchannel",
        "title": "ServerContactChannel",
      },
      "h3": {
        "id": "update-1",
        "title": "update()",
      },
    },
    "level": "h3",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel-update-1",
    "org_id": "test",
    "pathname": "/sdk/contact-channel",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "update()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/hooks",
        "title": "Hooks",
      },
    ],
    "content": "A React hook that fetches and manages user data.",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.sdk.sdk.hooks.use-user",
    "org_id": "test",
    "pathname": "/sdk/hooks/use-user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "useUser",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/hooks",
        "title": "Hooks",
      },
    ],
    "content": "user: User | null - The user data object if available, or null if not fetched yet.

loading: boolean - Indicates whether the user data is currently being fetched.",
    "domain": "test.com",
    "hash": "#returns",
    "hierarchy": {
      "h0": {
        "title": "useUser",
      },
      "h2": {
        "id": "returns",
        "title": "Returns",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.sdk.sdk.hooks.use-user-returns",
    "org_id": "test",
    "pathname": "/sdk/hooks/use-user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Returns",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/hooks",
        "title": "Hooks",
      },
    ],
    "code_snippets": [
      {
        "code": "import { useUser } from '@stackframe/stack';

function UserProfile() {
  const { user, loading } = useUser();

  if (loading) {
    return <div>Loading...</div>;
  }

  if (!user) {
    return <div>User not found</div>;
  }

  return (
    <div>
      <h1>{user.name}</h1>
      <p>Email: {user.email}</p>
    </div>
  );
}
``````jsx
import { useUser } from "@stackframe/stack";

function MyComponent() {
  const user = useUser({ or: "redirect" }); // user is garanteed to be non-null
  return <div>Hello, {user.name}</div>;
}",
        "lang": "tsx",
      },
      {
        "code": "import { useUser } from "@stackframe/stack";

function MyProtectedPage() {
  useUser({ or: "redirect" });
  return <div>You can only see this if you are authenticated</div>;
}",
        "lang": "jsx",
      },
    ],
    "content": "The same hook can also be used to protect a page. (You might also want to check out the server-side version here)",
    "domain": "test.com",
    "hash": "#example",
    "hierarchy": {
      "h0": {
        "title": "useUser",
      },
      "h2": {
        "id": "example",
        "title": "Example",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.sdk.sdk.hooks.use-user-example",
    "org_id": "test",
    "pathname": "/sdk/hooks/use-user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Example",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/hooks",
        "title": "Hooks",
      },
    ],
    "code_snippets": [
      {
        "code": "import { useUser } from "@stackframe/stack";

function MyComponent() {
  // user is garanteed to be non-null, but an error will be thrown if the user is not authenticated
  const user = useUser({ or: "throw" }); 

  return <div>Hello, {user.name}</div>;
}",
        "lang": "jsx",
      },
    ],
    "content": "By passing { or: "throw" } into the hook, it will throw an error if the user is not authenticated. This can be used for places where the user should never be unauthenticated if the app is working correctly.",
    "domain": "test.com",
    "hash": "#throw-an-error-when-not-authenticated",
    "hierarchy": {
      "h0": {
        "title": "useUser",
      },
      "h2": {
        "id": "throw-an-error-when-not-authenticated",
        "title": "Throw an error when not authenticated",
      },
    },
    "level": "h2",
    "objectID": "test:test.com:root.uv.sdk.sdk.hooks.use-user-throw-an-error-when-not-authenticated",
    "org_id": "test",
    "pathname": "/sdk/hooks/use-user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Throw an error when not authenticated",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/hooks",
        "title": "Hooks",
      },
    ],
    "code_snippets": [
      {
        "code": "import { useStackApp } from "@stackframe/stack";

function MyComponent() {
  const stackApp = useStackApp();
  return <div>Sign In URL: {stackApp.urls.signIn}</div>;
}",
        "lang": "jsx",
      },
    ],
    "content": "The useStackApp hook returns the StackClientApp object that you can use to interact with the Stack API. If you want to learn more about the StackClientApp object, check out the StackApp documentation.
Example:",
    "domain": "test.com",
    "objectID": "test:test.com:root.uv.sdk.sdk.hooks.use-stack-app",
    "org_id": "test",
    "pathname": "/sdk/use-stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "useStackApp()",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "content": "Stack offers a REST API for backends & frontends of any programming language or framework. This API is used to authenticate users, manage user data, and more.",
    "description": "REST API Overview",
    "domain": "test.com",
    "icon": "fa-regular fa-globe",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.api-overview",
    "org_id": "test",
    "pathname": "/rest-api/auth",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "API Overview",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "code_snippets": [
      {
        "code": "curl https://api.stack-auth.com/api/v1/ \
     -H "X-Stack-Access-Type: <either 'client' or 'server'>" \
     -H "X-Stack-Project-Id: <your project UUID>" \
     -H "X-Stack-Publishable-Client-Key: pck_<your publishable client key>" \
     -H "X-Stack-Secret-Server-Key: ssk_<your secret server key>" \
     -H "X-Stack-Access-Token: <the current user's access token>"",
        "lang": "http",
      },
    ],
    "content": "The following authentication headers are common to every endpoint:
Header Type Description 
X-Stack-Access-Type "client" | "server" Required. "client" (without quotes) for the frontend API, or "server" for the backend API. 
X-Stack-Project-Id UUID Required. The project ID as found on the Stack dashboard. 
X-Stack-Publishable-Client-Key string Required for client access. The API key as found on the Stack dashboard. 
X-Stack-Secret-Server-Key string Required for server access. The API key as found on the Stack dashboard. 
X-Stack-Access-Token string Optional. The access token for the current user. If not given, the request is considered to be logged out. 

To see how to use these headers in various programming languages, see the examples.",
    "domain": "test.com",
    "hash": "#authentication",
    "hierarchy": {
      "h0": {
        "title": "API Overview",
      },
      "h2": {
        "id": "authentication",
        "title": "Authentication",
      },
    },
    "icon": "fa-regular fa-globe",
    "level": "h2",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.api-overview-authentication",
    "org_id": "test",
    "pathname": "/rest-api/auth",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Authentication",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "content": "Any language that has the ability to send HTTP requests can use the Stack REST API. This includes JavaScript, Python, Ruby, Java, Go, C#, Dart, and many more.


Client access type is mostly used for client-side applications, like a browser or mobile app. The client APIs can only read and update the currently authenticated user's data, and it is usually fine to post the publishable client key in the client-side code.
Server access type, on the other hand, is for your backend server that you control. It has full access over all user data, and the secret server key should never be exposed to client-side code.
For more information, see the concept documentation on StackApp.


If you'd like to build your own version of the Stack dashboard (or update project configuration programmatically), you can use the admin access type. These endpoints are very dangerous and you should only use them if you know what you're doing.
For more information, see the concept documentation on StackApp.",
    "domain": "test.com",
    "hash": "#faq",
    "hierarchy": {
      "h0": {
        "title": "API Overview",
      },
      "h2": {
        "id": "faq",
        "title": "FAQ",
      },
    },
    "icon": "fa-regular fa-globe",
    "level": "h2",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.api-overview-faq",
    "org_id": "test",
    "pathname": "/rest-api/auth",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "FAQ",
    "type": "markdown",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_.apiV1",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
    ],
    "default_environment_id": "Default",
    "description": "Returns a human-readable message with some useful information about the API.",
    "domain": "test.com",
    "endpoint_path": "",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.endpoint_.apiV1",
    "org_id": "test",
    "pathname": "/rest-api/client/api-v-1",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "/api/v1",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.listContactChannels",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "default_environment_id": "Default",
    "domain": "test.com",
    "endpoint_path": "/contact-channels",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.listContactChannels",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/list-contact-channels",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List contact channels",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.createAContactChannel",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "default_environment_id": "Default",
    "domain": "test.com",
    "endpoint_path": "/contact-channels",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.createAContactChannel",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/create-a-contact-channel",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Create a contact channel",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.verifyAnEmail",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "default_environment_id": "Default",
    "description": "Verify an email address of a user",
    "domain": "test.com",
    "endpoint_path": "/contact-channels/verify",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.verifyAnEmail",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/verify-an-email",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Verify an email",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.checkEmailVerificationCode",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "default_environment_id": "Default",
    "description": "Check if an email verification code is valid without using it",
    "domain": "test.com",
    "endpoint_path": "/contact-channels/verify/check-code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.checkEmailVerificationCode",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/check-email-verification-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Check email verification code",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.getAContactChannel",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "default_environment_id": "Default",
    "domain": "test.com",
    "endpoint_path": "/contact-channels/:user_id/:contact_channel_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.getAContactChannel",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/get-a-contact-channel",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get a contact channel",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.deleteAContactChannel",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "default_environment_id": "Default",
    "domain": "test.com",
    "endpoint_path": "/contact-channels/:user_id/:contact_channel_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "DELETE",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.deleteAContactChannel",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/delete-a-contact-channel",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Delete a contact channel",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.updateAContactChannel",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "default_environment_id": "Default",
    "domain": "test.com",
    "endpoint_path": "/contact-channels/:user_id/:contact_channel_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "PATCH",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.updateAContactChannel",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/update-a-contact-channel",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update a contact channel",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_contactChannels.sendContactChannelVerificationCode",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "default_environment_id": "Default",
    "description": "Send a code to the user's contact channel for verifying the contact channel.",
    "domain": "test.com",
    "endpoint_path": "/contact-channels/:user_id/:contact_channel_id/send-verification-code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.sendContactChannelVerificationCode",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/send-contact-channel-verification-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Send contact channel verification code",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_oauth.oAuthTokenEndpoints",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/oauth",
        "title": "OAuth",
      },
    ],
    "default_environment_id": "Default",
    "description": "This endpoint is used to exchange an authorization code or refresh token for an access token.",
    "domain": "test.com",
    "endpoint_path": "/auth/oauth/token",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_oauth.endpoint_oauth.oAuthTokenEndpoints",
    "org_id": "test",
    "pathname": "/rest-api/client/oauth/o-auth-token-endpoints",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "OAuth token endpoints",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_oauth.oAuthAuthorizeEndpoint",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/oauth",
        "title": "OAuth",
      },
    ],
    "default_environment_id": "Default",
    "description": "This endpoint is used to initiate the OAuth authorization flow. there are two purposes for this endpoint: 1. Authenticate a user with an OAuth provider. 2. Link an existing user with an OAuth provider.",
    "domain": "test.com",
    "endpoint_path": "/auth/oauth/authorize/:provider_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_oauth.endpoint_oauth.oAuthAuthorizeEndpoint",
    "org_id": "test",
    "pathname": "/rest-api/client/oauth/o-auth-authorize-endpoint",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "OAuth authorize endpoint",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_otp.signInWithACode",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/otp",
        "title": "OTP",
      },
    ],
    "default_environment_id": "Default",
    "description": "Sign in with a code",
    "domain": "test.com",
    "endpoint_path": "/auth/otp/sign-in",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_otp.endpoint_otp.signInWithACode",
    "org_id": "test",
    "pathname": "/rest-api/client/otp/sign-in-with-a-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Sign in with a code",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_otp.sendSignInCode",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/otp",
        "title": "OTP",
      },
    ],
    "default_environment_id": "Default",
    "description": "Send a code to the user's email address for sign-in.",
    "domain": "test.com",
    "endpoint_path": "/auth/otp/send-sign-in-code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_otp.endpoint_otp.sendSignInCode",
    "org_id": "test",
    "pathname": "/rest-api/client/otp/send-sign-in-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Send sign-in code",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_otp.mfaSignIn",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/otp",
        "title": "OTP",
      },
    ],
    "default_environment_id": "Default",
    "description": "Complete multi-factor authorization to sign in, with a TOTP and an MFA attempt code",
    "domain": "test.com",
    "endpoint_path": "/auth/mfa/sign-in",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_otp.endpoint_otp.mfaSignIn",
    "org_id": "test",
    "pathname": "/rest-api/client/otp/mfa-sign-in",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "MFA sign in",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_otp.checkSignInCode",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/otp",
        "title": "OTP",
      },
    ],
    "default_environment_id": "Default",
    "description": "Check if a sign in code is valid without using it",
    "domain": "test.com",
    "endpoint_path": "/auth/otp/sign-in/check-code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_otp.endpoint_otp.checkSignInCode",
    "org_id": "test",
    "pathname": "/rest-api/client/otp/check-sign-in-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Check sign in code",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_password.updatePassword",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/password",
        "title": "Password",
      },
    ],
    "default_environment_id": "Default",
    "description": "Update the password of the current user, requires the old password",
    "domain": "test.com",
    "endpoint_path": "/auth/password/update",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.updatePassword",
    "org_id": "test",
    "pathname": "/rest-api/client/password/update-password",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update password",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_password.signUpWithEmailAndPassword",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/password",
        "title": "Password",
      },
    ],
    "default_environment_id": "Default",
    "description": "Create a new account with email and password",
    "domain": "test.com",
    "endpoint_path": "/auth/password/sign-up",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.signUpWithEmailAndPassword",
    "org_id": "test",
    "pathname": "/rest-api/client/password/sign-up-with-email-and-password",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Sign up with email and password",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_password.signInWithEmailAndPassword",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/password",
        "title": "Password",
      },
    ],
    "default_environment_id": "Default",
    "description": "Sign in to an account with email and password",
    "domain": "test.com",
    "endpoint_path": "/auth/password/sign-in",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.signInWithEmailAndPassword",
    "org_id": "test",
    "pathname": "/rest-api/client/password/sign-in-with-email-and-password",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Sign in with email and password",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_password.setPassword",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/password",
        "title": "Password",
      },
    ],
    "default_environment_id": "Default",
    "description": "Set a new password for the current user",
    "domain": "test.com",
    "endpoint_path": "/auth/password/set",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.setPassword",
    "org_id": "test",
    "pathname": "/rest-api/client/password/set-password",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Set password",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_password.sendResetPasswordCode",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/password",
        "title": "Password",
      },
    ],
    "default_environment_id": "Default",
    "description": "Send a code to the user's email address for resetting the password.",
    "domain": "test.com",
    "endpoint_path": "/auth/password/send-reset-code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.sendResetPasswordCode",
    "org_id": "test",
    "pathname": "/rest-api/client/password/send-reset-password-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Send reset password code",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_password.resetPasswordWithACode",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/password",
        "title": "Password",
      },
    ],
    "default_environment_id": "Default",
    "description": "Reset password with a code",
    "domain": "test.com",
    "endpoint_path": "/auth/password/reset",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.resetPasswordWithACode",
    "org_id": "test",
    "pathname": "/rest-api/client/password/reset-password-with-a-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Reset password with a code",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_password.checkResetPasswordCode",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/password",
        "title": "Password",
      },
    ],
    "default_environment_id": "Default",
    "description": "Check if a reset password code is valid without using it",
    "domain": "test.com",
    "endpoint_path": "/auth/password/reset/check-code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.checkResetPasswordCode",
    "org_id": "test",
    "pathname": "/rest-api/client/password/check-reset-password-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Check reset password code",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_permissions.listTeamPermissions",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/permissions",
        "title": "Permissions",
      },
    ],
    "default_environment_id": "Default",
    "description": "List team permissions of the current user. user_id=me must be set for client requests. Note that this might contain the permissions with the same permission ID across different teams. (team_id, user_id, permission_id) together uniquely identify a permission.",
    "domain": "test.com",
    "endpoint_path": "/team-permissions",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_permissions.endpoint_permissions.listTeamPermissions",
    "org_id": "test",
    "pathname": "/rest-api/client/permissions/list-team-permissions",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List team permissions",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_projects.getTheCurrentProject",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/projects",
        "title": "Projects",
      },
    ],
    "default_environment_id": "Default",
    "description": "Get the current project information including display name, oauth providers and authentication methods. Useful for display the available login options to the user.",
    "domain": "test.com",
    "endpoint_path": "/projects/current",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_projects.endpoint_projects.getTheCurrentProject",
    "org_id": "test",
    "pathname": "/rest-api/client/projects/get-the-current-project",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get the current project",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_sessions.signOutOfTheCurrentSession",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/sessions",
        "title": "Sessions",
      },
    ],
    "default_environment_id": "Default",
    "description": "Sign out of the current session and invalidate the refresh token",
    "domain": "test.com",
    "endpoint_path": "/auth/sessions/current",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "DELETE",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_sessions.endpoint_sessions.signOutOfTheCurrentSession",
    "org_id": "test",
    "pathname": "/rest-api/client/sessions/sign-out-of-the-current-session",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Sign out of the current session",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_sessions.refreshAccessToken",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/sessions",
        "title": "Sessions",
      },
    ],
    "default_environment_id": "Default",
    "description": "Get a new access token using a refresh token",
    "domain": "test.com",
    "endpoint_path": "/auth/sessions/current/refresh",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_sessions.endpoint_sessions.refreshAccessToken",
    "org_id": "test",
    "pathname": "/rest-api/client/sessions/refresh-access-token",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Refresh access token",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.listTeams",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "description": "List all the teams that the current user is a member of. user_id=me must be passed in the query parameters.",
    "domain": "test.com",
    "endpoint_path": "/teams",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.listTeams",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/list-teams",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List teams",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.createATeam",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "description": "Create a new team and optionally add the current user as a member.",
    "domain": "test.com",
    "endpoint_path": "/teams",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.createATeam",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/create-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Create a team",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.listTeamMembersProfiles",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "description": "List team members profiles. You always need to specify a team_id that your are a member of on the client. You can always filter for your own profile by setting me as the user_id in the path parameters. If you want list all the profiles in a team, you need to have the $read_members permission in that team.",
    "domain": "test.com",
    "endpoint_path": "/team-member-profiles",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.listTeamMembersProfiles",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/list-team-members-profiles",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List team members profiles",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.getATeam",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "description": "Get a team that the current user is a member of.",
    "domain": "test.com",
    "endpoint_path": "/teams/:team_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.getATeam",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/get-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get a team",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.deleteATeam",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "description": "Delete a team. Only allowed if the current user is a member of the team and has the $delete_team permission.",
    "domain": "test.com",
    "endpoint_path": "/teams/:team_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "DELETE",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.deleteATeam",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/delete-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Delete a team",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.updateATeam",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "description": "Update the team information. Only allowed if the current user is a member of the team and has the $update_team permission.",
    "domain": "test.com",
    "endpoint_path": "/teams/:team_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "PATCH",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.updateATeam",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/update-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update a team",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.sendAnEmailToInviteAUserToATeam",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "description": "The user receiving this email can join the team by clicking on the link in the email. If the user does not have an account yet, they will be prompted to create one.",
    "domain": "test.com",
    "endpoint_path": "/team-invitations/send-code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.sendAnEmailToInviteAUserToATeam",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/send-an-email-to-invite-a-user-to-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Send an email to invite a user to a team",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.inviteAUserToATeam",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "description": "Send an email to a user to invite them to a team",
    "domain": "test.com",
    "endpoint_path": "/team-invitations/accept",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.inviteAUserToATeam",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/invite-a-user-to-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Invite a user to a team",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.removeAUserFromATeam",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "description": "All the users are allowed to remove themselves from a team (user_id=me). Only the users who have the $remove_members permission are allowed to remove other users from a team. team_id is must an ID of a team that the user is a member of.",
    "domain": "test.com",
    "endpoint_path": "/team-memberships/:team_id/:user_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "DELETE",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.removeAUserFromATeam",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/remove-a-user-from-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Remove a user from a team",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.getATeamMemberProfile",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "description": "Get a team member profile. you can always get your own profile by setting me as the user_id in the path parameters on the client. If you want to get someone else's profile in a team, you need to have the $read_members permission in that team.",
    "domain": "test.com",
    "endpoint_path": "/team-member-profiles/:team_id/:user_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.getATeamMemberProfile",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/get-a-team-member-profile",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get a team member profile",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.updateYourTeamMemberProfile",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "description": "Update your own team member profile. user_id must be me in the path parameters on the client.",
    "domain": "test.com",
    "endpoint_path": "/team-member-profiles/:team_id/:user_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "PATCH",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.updateYourTeamMemberProfile",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/update-your-team-member-profile",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update your team member profile",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.getTeamInvitationDetails",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "description": "Get additional information about a team invitation code",
    "domain": "test.com",
    "endpoint_path": "/team-invitations/accept/details",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.getTeamInvitationDetails",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/get-team-invitation-details",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get team invitation details",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_teams.checkIfATeamInvitationCodeIsValid",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "description": "Check if a team invitation code is valid without using it",
    "domain": "test.com",
    "endpoint_path": "/team-invitations/accept/check-code",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.checkIfATeamInvitationCodeIsValid",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/check-if-a-team-invitation-code-is-valid",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Check if a team invitation code is valid",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_users.getCurrentUser",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/users",
        "title": "Users",
      },
    ],
    "default_environment_id": "Default",
    "description": "Gets the currently authenticated user.",
    "domain": "test.com",
    "endpoint_path": "/users/me",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_users.endpoint_users.getCurrentUser",
    "org_id": "test",
    "pathname": "/rest-api/client/users/get-current-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get current user",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_users.deleteCurrentUser",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/users",
        "title": "Users",
      },
    ],
    "default_environment_id": "Default",
    "description": "Deletes the currently authenticated user. Use this with caution.",
    "domain": "test.com",
    "endpoint_path": "/users/me",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "DELETE",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_users.endpoint_users.deleteCurrentUser",
    "org_id": "test",
    "pathname": "/rest-api/client/users/delete-current-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Delete current user",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
    "api_endpoint_id": "endpoint_users.updateCurrentUser",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/users",
        "title": "Users",
      },
    ],
    "default_environment_id": "Default",
    "description": "Updates the currently authenticated user. Only the values provided will be updated.",
    "domain": "test.com",
    "endpoint_path": "/users/me",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "PATCH",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_users.endpoint_users.updateCurrentUser",
    "org_id": "test",
    "pathname": "/rest-api/client/users/update-current-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update current user",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_permissions.listTeamPermissionsOfAUser",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/permissions",
        "title": "Permissions",
      },
    ],
    "default_environment_id": "Default",
    "description": "Query and filter the permission with team_id, user_id, and permission_id. Note that this might contain the permissions with the same permission ID across different teams and users. (team_id, user_id, permission_id) together uniquely identify a permission.",
    "domain": "test.com",
    "endpoint_path": "/team-permissions",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_permissions.endpoint_permissions.listTeamPermissionsOfAUser",
    "org_id": "test",
    "pathname": "/rest-api/server/permissions/list-team-permissions-of-a-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List team permissions of a user",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_permissions.grantATeamPermissionToAUser",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/permissions",
        "title": "Permissions",
      },
    ],
    "default_environment_id": "Default",
    "description": "Grant a team permission to a user (the team permission must be created first on the Stack dashboard)",
    "domain": "test.com",
    "endpoint_path": "/team-permissions/:team_id/:user_id/:permission_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_permissions.endpoint_permissions.grantATeamPermissionToAUser",
    "org_id": "test",
    "pathname": "/rest-api/server/permissions/grant-a-team-permission-to-a-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Grant a team permission to a user",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_permissions.revokeATeamPermissionFromAUser",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/permissions",
        "title": "Permissions",
      },
    ],
    "default_environment_id": "Default",
    "description": "Revoke a team permission from a user",
    "domain": "test.com",
    "endpoint_path": "/team-permissions/:team_id/:user_id/:permission_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "DELETE",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_permissions.endpoint_permissions.revokeATeamPermissionFromAUser",
    "org_id": "test",
    "pathname": "/rest-api/server/permissions/revoke-a-team-permission-from-a-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Revoke a team permission from a user",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_sessions.createSession",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/sessions",
        "title": "Sessions",
      },
    ],
    "default_environment_id": "Default",
    "description": "Create a new session for a given user. This will return a refresh token that can be used to impersonate the user.",
    "domain": "test.com",
    "endpoint_path": "/auth/sessions",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_sessions.endpoint_sessions.createSession",
    "org_id": "test",
    "pathname": "/rest-api/server/sessions/create-session",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Create session",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.addAUserToATeam",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "domain": "test.com",
    "endpoint_path": "/team-memberships/:team_id/:user_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.addAUserToATeam",
    "org_id": "test",
    "pathname": "/rest-api/server/teams/add-a-user-to-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Add a user to a team",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_teams.updateATeamMemberProfile",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "default_environment_id": "Default",
    "description": "Update a team member profile by user ID",
    "domain": "test.com",
    "endpoint_path": "/team-member-profiles/:team_id/:user_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "PATCH",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.updateATeamMemberProfile",
    "org_id": "test",
    "pathname": "/rest-api/server/teams/update-a-team-member-profile",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update a team member profile",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_users.listUsers",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/users",
        "title": "Users",
      },
    ],
    "default_environment_id": "Default",
    "description": "Lists all the users in the project.",
    "domain": "test.com",
    "endpoint_path": "/users",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.listUsers",
    "org_id": "test",
    "pathname": "/rest-api/server/users/list-users",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List users",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_users.createUser",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/users",
        "title": "Users",
      },
    ],
    "default_environment_id": "Default",
    "description": "Creates a new user. E-mail authentication is always enabled, and no password is set, meaning the only way to authenticate the newly created user is through magic link.",
    "domain": "test.com",
    "endpoint_path": "/users",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.createUser",
    "org_id": "test",
    "pathname": "/rest-api/server/users/create-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Create user",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_users.getUser",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/users",
        "title": "Users",
      },
    ],
    "default_environment_id": "Default",
    "description": "Gets a user by user ID.",
    "domain": "test.com",
    "endpoint_path": "/users/:user_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "GET",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.getUser",
    "org_id": "test",
    "pathname": "/rest-api/server/users/get-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get user",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_users.deleteUser",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/users",
        "title": "Users",
      },
    ],
    "default_environment_id": "Default",
    "description": "Deletes a user. Use this with caution.",
    "domain": "test.com",
    "endpoint_path": "/users/:user_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "DELETE",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.deleteUser",
    "org_id": "test",
    "pathname": "/rest-api/server/users/delete-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Delete user",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
    "api_endpoint_id": "endpoint_users.updateUser",
    "api_type": "http",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/users",
        "title": "Users",
      },
    ],
    "default_environment_id": "Default",
    "description": "Updates a user. Only the values provided will be updated.",
    "domain": "test.com",
    "endpoint_path": "/users/:user_id",
    "environments": [
      {
        "id": "Default",
        "url": "https://api.stack-auth.com/api/v1",
      },
    ],
    "method": "PATCH",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.updateUser",
    "org_id": "test",
    "pathname": "/rest-api/server/users/update-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update user",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_users.user.created",
    "api_type": "webhook",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/users",
        "title": "Users",
      },
    ],
    "description": "This event is triggered when a user is created.",
    "domain": "test.com",
    "endpoint_path": "",
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_users.subpackage_users.user.created",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/users/user-created",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "user.created",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_users.user.updated",
    "api_type": "webhook",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/users",
        "title": "Users",
      },
    ],
    "description": "This event is triggered when a user is updated.",
    "domain": "test.com",
    "endpoint_path": "",
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_users.subpackage_users.user.updated",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/users/user-updated",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "user.updated",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_users.user.deleted",
    "api_type": "webhook",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/users",
        "title": "Users",
      },
    ],
    "description": "This event is triggered when a user is deleted.",
    "domain": "test.com",
    "endpoint_path": "",
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_users.subpackage_users.user.deleted",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/users/user-deleted",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "user.deleted",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_teams.team.created",
    "api_type": "webhook",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/teams",
        "title": "Teams",
      },
    ],
    "description": "This event is triggered when a team is created.",
    "domain": "test.com",
    "endpoint_path": "",
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team.created",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/teams/team-created",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "team.created",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_teams.team.updated",
    "api_type": "webhook",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/teams",
        "title": "Teams",
      },
    ],
    "description": "This event is triggered when a team is updated.",
    "domain": "test.com",
    "endpoint_path": "",
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team.updated",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/teams/team-updated",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "team.updated",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_teams.team.deleted",
    "api_type": "webhook",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/teams",
        "title": "Teams",
      },
    ],
    "description": "This event is triggered when a team is deleted.",
    "domain": "test.com",
    "endpoint_path": "",
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team.deleted",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/teams/team-deleted",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "team.deleted",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_teams.team_membership.created",
    "api_type": "webhook",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/teams",
        "title": "Teams",
      },
    ],
    "description": "This event is triggered when a user is added to a team.",
    "domain": "test.com",
    "endpoint_path": "",
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team_membership.created",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/teams/team-membership-created",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "team_membership.created",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "api_definition_id": "8c451807-ffb6-4876-9831-21d410bcb716",
    "api_endpoint_id": "subpackage_teams.team_membership.deleted",
    "api_type": "webhook",
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/teams",
        "title": "Teams",
      },
    ],
    "description": "This event is triggered when a user is removed from a team.",
    "domain": "test.com",
    "endpoint_path": "",
    "method": "POST",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team_membership.deleted",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/teams/team-membership-deleted",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "team_membership.deleted",
    "type": "api-reference",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "root",
    "objectID": "test:test.com:root__navigation_record",
    "org_id": "test",
    "pathname": "/",
    "title": "Stack Auth Documentation",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "icon": "fa-solid fa-home",
    "node_type": "tab",
    "objectID": "test:test.com:root.uv.docs__navigation_record",
    "org_id": "test",
    "pathname": "/docs",
    "title": "Documentation",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "icon": "fa-regular fa-globe",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.overview__navigation_record",
    "org_id": "test",
    "pathname": "/overview",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Overview",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "icon": "fa-regular fa-circle-question",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.faq__navigation_record",
    "org_id": "test",
    "pathname": "/faq",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "FAQ",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started__navigation_record",
    "org_id": "test",
    "pathname": "/docs/getting-started",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Getting Started",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-download",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.installation-setup__navigation_record",
    "org_id": "test",
    "pathname": "/getting-started/setup",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Installation & Setup",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-puzzle",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.components__navigation_record",
    "org_id": "test",
    "pathname": "/getting-started/components",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Components",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-address-book",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.users__navigation_record",
    "org_id": "test",
    "pathname": "/getting-started/users",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Users",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/getting-started",
        "title": "Getting Started",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-rocket",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.getting-started.going-to-production__navigation_record",
    "org_id": "test",
    "pathname": "/getting-started/production",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Going to Production",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.docs.docs.concepts__navigation_record",
    "org_id": "test",
    "pathname": "/docs/concepts",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Concepts",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-folder-gear",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.the-stack-app-object__navigation_record",
    "org_id": "test",
    "pathname": "/concepts/stack-app",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "The StackApp Object",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-user-pen",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.custom-user-data__navigation_record",
    "org_id": "test",
    "pathname": "/concepts/custom-user-data",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Custom User Data",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-user-check",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.user-onboarding__navigation_record",
    "org_id": "test",
    "pathname": "/concepts/user-onboarding",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "User Onboarding",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-link",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.connected-o-auth-accounts__navigation_record",
    "org_id": "test",
    "pathname": "/concepts/oauth",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Connected OAuth Accounts",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-users",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.teams__navigation_record",
    "org_id": "test",
    "pathname": "/concepts/orgs-and-teams",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Teams",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-exchange",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.selecting-a-team__navigation_record",
    "org_id": "test",
    "pathname": "/concepts/team-selection",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Selecting a Team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-user-lock",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.permissions-rbac__navigation_record",
    "org_id": "test",
    "pathname": "/concepts/permissions",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Permissions & RBAC",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-webhook",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.webhooks__navigation_record",
    "org_id": "test",
    "pathname": "/concepts/webhooks",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Webhooks",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/concepts",
        "title": "Concepts",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-network-wired",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.concepts.backend-integration__navigation_record",
    "org_id": "test",
    "pathname": "/concepts/backend-integration",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Backend Integration",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.docs.docs.customization__navigation_record",
    "org_id": "test",
    "pathname": "/docs/customization",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Customization",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-circle-half-stroke",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.customization.dark-light-mode__navigation_record",
    "org_id": "test",
    "pathname": "/customization/dark-mode",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Dark/Light Mode",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-paint-brush",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.customization.colors-and-styles__navigation_record",
    "org_id": "test",
    "pathname": "/customization/custom-styles",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Colors and Styles",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-language",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.customization.internationalization__navigation_record",
    "org_id": "test",
    "pathname": "/customization/internationalization",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Internationalization",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-table-layout",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-layouts-and-pages__navigation_record",
    "org_id": "test",
    "pathname": "/customization/custom-pages",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Custom Layouts and Pages",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-files",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples__navigation_record",
    "org_id": "test",
    "pathname": "/docs/customization/custom-page-examples",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Custom Page Examples",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
      {
        "pathname": "/docs/customization/custom-page-examples",
        "title": "Custom Page Examples",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-in__navigation_record",
    "org_id": "test",
    "pathname": "/customization/page-examples/signin",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Sign In",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/customization",
        "title": "Customization",
      },
      {
        "pathname": "/docs/customization/custom-page-examples",
        "title": "Custom Page Examples",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.customization.custom-page-examples.sign-up__navigation_record",
    "org_id": "test",
    "pathname": "/customization/page-examples/signup",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Sign Up",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.docs.docs.others__navigation_record",
    "org_id": "test",
    "pathname": "/docs/others",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Others",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/others",
        "title": "Others",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-bolt",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.others.supabase-integration__navigation_record",
    "org_id": "test",
    "pathname": "/others/supabase",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Supabase Integration",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/docs/others",
        "title": "Others",
      },
    ],
    "domain": "test.com",
    "icon": "fa-regular fa-house-laptop",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.docs.docs.others.self-hosting__navigation_record",
    "org_id": "test",
    "pathname": "/others/self-host",
    "tab": {
      "pathname": "/docs",
      "title": "Documentation",
    },
    "title": "Self-Hosting",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "icon": "fa-solid fa-puzzle",
    "node_type": "tab",
    "objectID": "test:test.com:root.uv.components__navigation_record",
    "org_id": "test",
    "pathname": "/components",
    "title": "Components",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.components.components.components__navigation_record",
    "org_id": "test",
    "pathname": "/components/components",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Components",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.components.components.components.user-button__navigation_record",
    "org_id": "test",
    "pathname": "/components/user-button",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<UserButton />",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.components.components.components.selected-team-switcher__navigation_record",
    "org_id": "test",
    "pathname": "/components/selected-team-switcher",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<SelectedTeamSwitcher />",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.components.components.components.account-settings__navigation_record",
    "org_id": "test",
    "pathname": "/components/account-settings",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<AccountSettings />",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.components.components.components.sign-in__navigation_record",
    "org_id": "test",
    "pathname": "/components/sign-in",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<SignIn />",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.components.components.components.sign-up__navigation_record",
    "org_id": "test",
    "pathname": "/components/sign-up",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<SignUp />",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.components.components.components.credential-sign-in__navigation_record",
    "org_id": "test",
    "pathname": "/components/credential-sign-in",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<CredentialSignIn />",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.components.components.components.credential-sign-up__navigation_record",
    "org_id": "test",
    "pathname": "/components/credential-sign-up",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<CredentialSignUp />",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.components.components.components.o-auth-button__navigation_record",
    "org_id": "test",
    "pathname": "/components/oauth-button",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<OAuthButton />",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/components",
        "title": "Components",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.components.components.components.o-auth-button-group__navigation_record",
    "org_id": "test",
    "pathname": "/components/oauth-button-group",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<OAuthButtonGroup />",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.components.components.utilities__navigation_record",
    "org_id": "test",
    "pathname": "/components/utilities",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "Utilities",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/utilities",
        "title": "Utilities",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-handler__navigation_record",
    "org_id": "test",
    "pathname": "/components/stack-handler",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<StackHandler />",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/utilities",
        "title": "Utilities",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-provider__navigation_record",
    "org_id": "test",
    "pathname": "/components/stack-provider",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<StackProvider />",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/components/utilities",
        "title": "Utilities",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.components.components.utilities.stack-theme__navigation_record",
    "org_id": "test",
    "pathname": "/components/stack-theme",
    "tab": {
      "pathname": "/components",
      "title": "Components",
    },
    "title": "<StackTheme />",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "icon": "fa-solid fa-hammer",
    "node_type": "tab",
    "objectID": "test:test.com:root.uv.sdk__navigation_record",
    "org_id": "test",
    "pathname": "/sdk",
    "title": "SDK Reference",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes__navigation_record",
    "org_id": "test",
    "pathname": "/sdk/classes",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Classes",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.user__navigation_record",
    "org_id": "test",
    "pathname": "/sdk/user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "User",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.stack-app__navigation_record",
    "org_id": "test",
    "pathname": "/sdk/stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "StackApp",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team__navigation_record",
    "org_id": "test",
    "pathname": "/sdk/team",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-user__navigation_record",
    "org_id": "test",
    "pathname": "/sdk/team-user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "TeamUser",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-profile__navigation_record",
    "org_id": "test",
    "pathname": "/sdk/team-profile",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "TeamProfile",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.team-permission__navigation_record",
    "org_id": "test",
    "pathname": "/sdk/team-permission",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "TeamPermission",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.project__navigation_record",
    "org_id": "test",
    "pathname": "/sdk/project",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Project",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/classes",
        "title": "Classes",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.sdk.sdk.classes.contact-channel__navigation_record",
    "org_id": "test",
    "pathname": "/sdk/contact-channel",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "ContactChannel",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "section",
    "objectID": "test:test.com:root.uv.sdk.sdk.hooks__navigation_record",
    "org_id": "test",
    "pathname": "/sdk/hooks",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "Hooks",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/hooks",
        "title": "Hooks",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.sdk.sdk.hooks.use-user__navigation_record",
    "org_id": "test",
    "pathname": "/sdk/hooks/use-user",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "useUser()",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/sdk/hooks",
        "title": "Hooks",
      },
    ],
    "domain": "test.com",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.sdk.sdk.hooks.use-stack-app__navigation_record",
    "org_id": "test",
    "pathname": "/sdk/use-stack-app",
    "tab": {
      "pathname": "/sdk",
      "title": "SDK Reference",
    },
    "title": "useStackApp()",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "icon": "fa-solid fa-code",
    "node_type": "tab",
    "objectID": "test:test.com:root.uv.rest-api__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api",
    "title": "REST API & Webhooks",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "icon": "fa-regular fa-globe",
    "node_type": "page",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.api-overview__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/auth",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "API Overview",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "apiReference",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Client API",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.endpoint_.apiV1__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/api-v-1",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "/api/v1",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Contact Channels",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.listContactChannels__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/list-contact-channels",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List contact channels",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.createAContactChannel__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/create-a-contact-channel",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Create a contact channel",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.verifyAnEmail__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/verify-an-email",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Verify an email",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.checkEmailVerificationCode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/check-email-verification-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Check email verification code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.getAContactChannel__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/get-a-contact-channel",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get a contact channel",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.deleteAContactChannel__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/delete-a-contact-channel",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Delete a contact channel",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.updateAContactChannel__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/update-a-contact-channel",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update a contact channel",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_contactChannels.endpoint_contactChannels.sendContactChannelVerificationCode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/send-contact-channel-verification-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Send contact channel verification code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_oauth__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/oauth",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "OAuth",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/oauth",
        "title": "OAuth",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_oauth.endpoint_oauth.oAuthTokenEndpoints__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/oauth/o-auth-token-endpoints",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "OAuth token endpoints",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/oauth",
        "title": "OAuth",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_oauth.endpoint_oauth.oAuthAuthorizeEndpoint__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/oauth/o-auth-authorize-endpoint",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "OAuth authorize endpoint",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_otp__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/otp",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "OTP",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/otp",
        "title": "OTP",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_otp.endpoint_otp.signInWithACode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/otp/sign-in-with-a-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Sign in with a code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/otp",
        "title": "OTP",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_otp.endpoint_otp.sendSignInCode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/otp/send-sign-in-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Send sign-in code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/otp",
        "title": "OTP",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_otp.endpoint_otp.mfaSignIn__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/otp/mfa-sign-in",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "MFA sign in",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/otp",
        "title": "OTP",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_otp.endpoint_otp.checkSignInCode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/otp/check-sign-in-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Check sign in code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Password",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/password",
        "title": "Password",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.updatePassword__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password/update-password",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update password",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/password",
        "title": "Password",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.signUpWithEmailAndPassword__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password/sign-up-with-email-and-password",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Sign up with email and password",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/password",
        "title": "Password",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.signInWithEmailAndPassword__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password/sign-in-with-email-and-password",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Sign in with email and password",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/password",
        "title": "Password",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.setPassword__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password/set-password",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Set password",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/password",
        "title": "Password",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.sendResetPasswordCode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password/send-reset-password-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Send reset password code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/password",
        "title": "Password",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.resetPasswordWithACode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password/reset-password-with-a-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Reset password with a code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/password",
        "title": "Password",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_password.endpoint_password.checkResetPasswordCode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password/check-reset-password-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Check reset password code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_permissions__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/permissions",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Permissions",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/permissions",
        "title": "Permissions",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_permissions.endpoint_permissions.listTeamPermissions__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/permissions/list-team-permissions",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List team permissions",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_projects__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/projects",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Projects",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/projects",
        "title": "Projects",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_projects.endpoint_projects.getTheCurrentProject__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/projects/get-the-current-project",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get the current project",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_sessions__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/sessions",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Sessions",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/sessions",
        "title": "Sessions",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_sessions.endpoint_sessions.signOutOfTheCurrentSession__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/sessions/sign-out-of-the-current-session",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Sign out of the current session",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/sessions",
        "title": "Sessions",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_sessions.endpoint_sessions.refreshAccessToken__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/sessions/refresh-access-token",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Refresh access token",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Teams",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.listTeams__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/list-teams",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List teams",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.createATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/create-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Create a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.listTeamMembersProfiles__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/list-team-members-profiles",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List team members profiles",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.getATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/get-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.deleteATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/delete-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Delete a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.updateATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/update-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.sendAnEmailToInviteAUserToATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/send-an-email-to-invite-a-user-to-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Send an email to invite a user to a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.inviteAUserToATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/invite-a-user-to-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Invite a user to a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.removeAUserFromATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/remove-a-user-from-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Remove a user from a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.getATeamMemberProfile__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/get-a-team-member-profile",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get a team member profile",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.updateYourTeamMemberProfile__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/update-your-team-member-profile",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update your team member profile",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.getTeamInvitationDetails__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/get-team-invitation-details",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get team invitation details",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_teams.endpoint_teams.checkIfATeamInvitationCodeIsValid__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/check-if-a-team-invitation-code-is-valid",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Check if a team invitation code is valid",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_users__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/users",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Users",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/users",
        "title": "Users",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_users.endpoint_users.getCurrentUser__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/users/get-current-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get current user",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/users",
        "title": "Users",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_users.endpoint_users.deleteCurrentUser__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/users/delete-current-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Delete current user",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/client",
        "title": "Client API",
      },
      {
        "pathname": "/rest-api/client/users",
        "title": "Users",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.client.subpackage_users.endpoint_users.updateCurrentUser__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/users/update-current-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update current user",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "apiReference",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Server API",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.endpoint_.apiV1__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/api-v-1",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "/api/v1",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/contact-channels",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Contact Channels",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.listContactChannels__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/list-contact-channels",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List contact channels",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.createAContactChannel__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/create-a-contact-channel",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Create a contact channel",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.verifyAnEmail__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/verify-an-email",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Verify an email",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.checkEmailVerificationCode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/check-email-verification-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Check email verification code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.getAContactChannel__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/get-a-contact-channel",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get a contact channel",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.deleteAContactChannel__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/delete-a-contact-channel",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Delete a contact channel",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.updateAContactChannel__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/update-a-contact-channel",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update a contact channel",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/contact-channels",
        "title": "Contact Channels",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_contactChannels.endpoint_contactChannels.sendContactChannelVerificationCode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/contact-channels/send-contact-channel-verification-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Send contact channel verification code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_oauth__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/oauth",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "OAuth",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/oauth",
        "title": "OAuth",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_oauth.endpoint_oauth.oAuthTokenEndpoints__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/oauth/o-auth-token-endpoints",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "OAuth token endpoints",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/oauth",
        "title": "OAuth",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_oauth.endpoint_oauth.oAuthAuthorizeEndpoint__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/oauth/o-auth-authorize-endpoint",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "OAuth authorize endpoint",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_otp__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/otp",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "OTP",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/otp",
        "title": "OTP",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_otp.endpoint_otp.signInWithACode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/otp/sign-in-with-a-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Sign in with a code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/otp",
        "title": "OTP",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_otp.endpoint_otp.sendSignInCode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/otp/send-sign-in-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Send sign-in code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/otp",
        "title": "OTP",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_otp.endpoint_otp.mfaSignIn__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/otp/mfa-sign-in",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "MFA sign in",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/otp",
        "title": "OTP",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_otp.endpoint_otp.checkSignInCode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/otp/check-sign-in-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Check sign in code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/password",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Password",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/password",
        "title": "Password",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password.endpoint_password.updatePassword__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password/update-password",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update password",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/password",
        "title": "Password",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password.endpoint_password.signUpWithEmailAndPassword__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password/sign-up-with-email-and-password",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Sign up with email and password",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/password",
        "title": "Password",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password.endpoint_password.signInWithEmailAndPassword__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password/sign-in-with-email-and-password",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Sign in with email and password",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/password",
        "title": "Password",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password.endpoint_password.setPassword__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password/set-password",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Set password",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/password",
        "title": "Password",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password.endpoint_password.sendResetPasswordCode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password/send-reset-password-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Send reset password code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/password",
        "title": "Password",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password.endpoint_password.resetPasswordWithACode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password/reset-password-with-a-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Reset password with a code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/password",
        "title": "Password",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_password.endpoint_password.checkResetPasswordCode__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/password/check-reset-password-code",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Check reset password code",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_permissions__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/permissions",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Permissions",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/permissions",
        "title": "Permissions",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_permissions.endpoint_permissions.listTeamPermissionsOfAUser__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/permissions/list-team-permissions-of-a-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List team permissions of a user",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/permissions",
        "title": "Permissions",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_permissions.endpoint_permissions.grantATeamPermissionToAUser__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/permissions/grant-a-team-permission-to-a-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Grant a team permission to a user",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/permissions",
        "title": "Permissions",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_permissions.endpoint_permissions.revokeATeamPermissionFromAUser__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/permissions/revoke-a-team-permission-from-a-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Revoke a team permission from a user",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_projects__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/projects",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Projects",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/projects",
        "title": "Projects",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_projects.endpoint_projects.getTheCurrentProject__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/projects/get-the-current-project",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get the current project",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_sessions__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/sessions",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Sessions",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/sessions",
        "title": "Sessions",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_sessions.endpoint_sessions.createSession__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/sessions/create-session",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Create session",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/sessions",
        "title": "Sessions",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_sessions.endpoint_sessions.signOutOfTheCurrentSession__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/sessions/sign-out-of-the-current-session",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Sign out of the current session",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/sessions",
        "title": "Sessions",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_sessions.endpoint_sessions.refreshAccessToken__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/sessions/refresh-access-token",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Refresh access token",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/teams",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Teams",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.listTeams__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/list-teams",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List teams",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.createATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/create-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Create a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.listTeamMembersProfiles__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/list-team-members-profiles",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List team members profiles",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.getATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/get-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.deleteATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/delete-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Delete a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.updateATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/update-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.sendAnEmailToInviteAUserToATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/send-an-email-to-invite-a-user-to-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Send an email to invite a user to a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.inviteAUserToATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/invite-a-user-to-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Invite a user to a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.addAUserToATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/teams/add-a-user-to-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Add a user to a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.removeAUserFromATeam__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/remove-a-user-from-a-team",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Remove a user from a team",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.getATeamMemberProfile__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/get-a-team-member-profile",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get a team member profile",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.updateATeamMemberProfile__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/teams/update-a-team-member-profile",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update a team member profile",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.getTeamInvitationDetails__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/get-team-invitation-details",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get team invitation details",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_teams.endpoint_teams.checkIfATeamInvitationCodeIsValid__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/teams/check-if-a-team-invitation-code-is-valid",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Check if a team invitation code is valid",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/users",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Users",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/users",
        "title": "Users",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.listUsers__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/users/list-users",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "List users",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/users",
        "title": "Users",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.createUser__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/users/create-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Create user",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/users",
        "title": "Users",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.getCurrentUser__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/users/get-current-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get current user",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/users",
        "title": "Users",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.deleteCurrentUser__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/users/delete-current-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Delete current user",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/users",
        "title": "Users",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.updateCurrentUser__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/client/users/update-current-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update current user",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/users",
        "title": "Users",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.getUser__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/users/get-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Get user",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/users",
        "title": "Users",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.deleteUser__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/users/delete-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Delete user",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/server",
        "title": "Server API",
      },
      {
        "pathname": "/rest-api/server/users",
        "title": "Users",
      },
    ],
    "domain": "test.com",
    "node_type": "endpoint",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.server.subpackage_users.endpoint_users.updateUser__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/server/users/update-user",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Update user",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [],
    "domain": "test.com",
    "node_type": "apiReference",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/webhooks",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Webhooks",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_users__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/users",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Users",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/users",
        "title": "Users",
      },
    ],
    "domain": "test.com",
    "node_type": "webhook",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_users.subpackage_users.user.created__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/users/user-created",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "user.created",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/users",
        "title": "Users",
      },
    ],
    "domain": "test.com",
    "node_type": "webhook",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_users.subpackage_users.user.updated__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/users/user-updated",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "user.updated",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/users",
        "title": "Users",
      },
    ],
    "domain": "test.com",
    "node_type": "webhook",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_users.subpackage_users.user.deleted__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/users/user-deleted",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "user.deleted",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
    ],
    "domain": "test.com",
    "node_type": "apiPackage",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/teams",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "Teams",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "webhook",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team.created__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/teams/team-created",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "team.created",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "webhook",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team.updated__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/teams/team-updated",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "team.updated",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "webhook",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team.deleted__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/teams/team-deleted",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "team.deleted",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "webhook",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team_membership.created__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/teams/team-membership-created",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "team_membership.created",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
  {
    "authed": false,
    "breadcrumb": [
      {
        "pathname": "/rest-api/webhooks",
        "title": "Webhooks",
      },
      {
        "pathname": "/rest-api/webhooks/teams",
        "title": "Teams",
      },
    ],
    "domain": "test.com",
    "node_type": "webhook",
    "objectID": "test:test.com:root.uv.rest-api.rest-api.webhooks.subpackage_teams.subpackage_teams.team_membership.deleted__navigation_record",
    "org_id": "test",
    "pathname": "/rest-api/webhooks/teams/team-membership-deleted",
    "tab": {
      "pathname": "/rest-api",
      "title": "REST API & Webhooks",
    },
    "title": "team_membership.deleted",
    "type": "navigation",
    "visible_by": [
      "0",
    ],
  },
]